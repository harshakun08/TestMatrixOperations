package com.operations.Matrix;
import org.junit.FixMethodOrder;
import org.junit.Test;
import org.junit.runners.MethodSorters;

@FixMethodOrder(MethodSorters.NAME_ASCENDING)
public class RegressionTest6 {

    public static boolean debug = false;

    @Test
    public void test3001() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3001");
        com.operations.Matrix.Matrix matrix1 = com.operations.Matrix.MatrixTransformations.rotate2D((-0.1736481776669303d));
        double[] doubleArray4 = new double[] { 10, 'a' };
        double[] doubleArray7 = new double[] { 10, 'a' };
        double[][] doubleArray8 = new double[][] { doubleArray4, doubleArray7 };
        com.operations.Matrix.Matrix matrix9 = new com.operations.Matrix.Matrix(doubleArray8);
        com.operations.Matrix.Matrix matrix10 = new com.operations.Matrix.Matrix(doubleArray8);
        boolean boolean11 = com.operations.Matrix.MatrixUtils.isSquare(matrix10);
        double[] doubleArray14 = new double[] { 10, 'a' };
        double[] doubleArray17 = new double[] { 10, 'a' };
        double[][] doubleArray18 = new double[][] { doubleArray14, doubleArray17 };
        com.operations.Matrix.Matrix matrix19 = new com.operations.Matrix.Matrix(doubleArray18);
        int int20 = matrix19.getCols();
        int int21 = matrix19.getCols();
        matrix19.print();
        double[] doubleArray25 = new double[] { 10, 'a' };
        double[] doubleArray28 = new double[] { 10, 'a' };
        double[][] doubleArray29 = new double[][] { doubleArray25, doubleArray28 };
        com.operations.Matrix.Matrix matrix30 = new com.operations.Matrix.Matrix(doubleArray29);
        boolean boolean32 = com.operations.Matrix.MatrixUtils.compare(matrix19, matrix30, (double) (-1));
        com.operations.Matrix.Matrix matrix33 = com.operations.Matrix.MatrixOperations.subtract(matrix10, matrix30);
        double[] doubleArray36 = new double[] { 10, 'a' };
        double[] doubleArray39 = new double[] { 10, 'a' };
        double[][] doubleArray40 = new double[][] { doubleArray36, doubleArray39 };
        com.operations.Matrix.Matrix matrix41 = new com.operations.Matrix.Matrix(doubleArray40);
        com.operations.Matrix.Matrix matrix42 = new com.operations.Matrix.Matrix(doubleArray40);
        boolean boolean43 = com.operations.Matrix.MatrixUtils.isSquare(matrix42);
        double[] doubleArray46 = new double[] { 10, 'a' };
        double[] doubleArray49 = new double[] { 10, 'a' };
        double[][] doubleArray50 = new double[][] { doubleArray46, doubleArray49 };
        com.operations.Matrix.Matrix matrix51 = new com.operations.Matrix.Matrix(doubleArray50);
        int int52 = matrix51.getCols();
        int int53 = matrix51.getCols();
        matrix51.print();
        double[] doubleArray57 = new double[] { 10, 'a' };
        double[] doubleArray60 = new double[] { 10, 'a' };
        double[][] doubleArray61 = new double[][] { doubleArray57, doubleArray60 };
        com.operations.Matrix.Matrix matrix62 = new com.operations.Matrix.Matrix(doubleArray61);
        boolean boolean64 = com.operations.Matrix.MatrixUtils.compare(matrix51, matrix62, (double) (-1));
        com.operations.Matrix.Matrix matrix65 = com.operations.Matrix.MatrixOperations.subtract(matrix42, matrix62);
        com.operations.Matrix.Matrix matrix66 = com.operations.Matrix.MatrixOperations.add(matrix10, matrix65);
        com.operations.Matrix.Matrix matrix67 = com.operations.Matrix.MatrixOperations.multiply(matrix1, matrix66);
        int int68 = matrix66.getRows();
        int int69 = matrix66.getRows();
        // The following exception was thrown during execution in test generation
        try {
            double double72 = matrix66.getValue((int) '#', (int) 'a');
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(matrix1);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertArrayEquals(doubleArray4, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertArrayEquals(doubleArray7, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertArrayEquals(doubleArray14, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertArrayEquals(doubleArray17, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 2 + "'", int20 == 2);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 2 + "'", int21 == 2);
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertArrayEquals(doubleArray25, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertArrayEquals(doubleArray28, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(matrix33);
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertArrayEquals(doubleArray36, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertArrayEquals(doubleArray39, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertNotNull(doubleArray46);
        org.junit.Assert.assertArrayEquals(doubleArray46, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertArrayEquals(doubleArray49, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 2 + "'", int52 == 2);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 2 + "'", int53 == 2);
        org.junit.Assert.assertNotNull(doubleArray57);
        org.junit.Assert.assertArrayEquals(doubleArray57, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray60);
        org.junit.Assert.assertArrayEquals(doubleArray60, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray61);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertNotNull(matrix65);
        org.junit.Assert.assertNotNull(matrix66);
        org.junit.Assert.assertNotNull(matrix67);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 2 + "'", int68 == 2);
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 2 + "'", int69 == 2);
    }

    @Test
    public void test3002() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3002");
        com.operations.Matrix.Matrix matrix2 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0L, (double) (byte) 10);
        int int3 = matrix2.getRows();
        com.operations.Matrix.Matrix matrix9 = com.operations.Matrix.MatrixUtils.generateRandomMatrix(100, (int) (byte) 1, (int) '#', (int) '#', 1L);
        boolean boolean11 = com.operations.Matrix.MatrixUtils.compare(matrix2, matrix9, (double) 1.0f);
        com.operations.Matrix.Matrix matrix12 = com.operations.Matrix.MatrixOperations.transpose(matrix9);
        boolean boolean13 = com.operations.Matrix.MatrixUtils.isSymmetric(matrix12);
        com.operations.Matrix.Matrix matrix15 = com.operations.Matrix.MatrixTransformations.rotate2D((double) '4');
        double[] doubleArray18 = new double[] { 10, 'a' };
        double[] doubleArray21 = new double[] { 10, 'a' };
        double[][] doubleArray22 = new double[][] { doubleArray18, doubleArray21 };
        com.operations.Matrix.Matrix matrix23 = new com.operations.Matrix.Matrix(doubleArray22);
        com.operations.Matrix.Matrix matrix24 = new com.operations.Matrix.Matrix(doubleArray22);
        com.operations.Matrix.Matrix matrix26 = com.operations.Matrix.MatrixTransformations.rotate2D((double) (short) 100);
        double[] doubleArray29 = new double[] { 137.90576492663388d, (byte) -1 };
        double[] doubleArray30 = com.operations.Matrix.MatrixSolver.solveGaussian(matrix26, doubleArray29);
        com.operations.Matrix.Matrix matrix31 = com.operations.Matrix.MatrixOperations.add(matrix24, matrix26);
        boolean boolean32 = com.operations.Matrix.MatrixUtils.isSymmetric(matrix31);
        boolean boolean34 = com.operations.Matrix.MatrixUtils.compare(matrix15, matrix31, 364.0054944640259d);
        com.operations.Matrix.Matrix matrix37 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0L, (double) (byte) 10);
        int int38 = matrix37.getRows();
        com.operations.Matrix.Matrix matrix40 = com.operations.Matrix.MatrixOperations.scalarMultiply(matrix37, (double) 2);
        matrix37.print();
        com.operations.Matrix.Matrix matrix42 = com.operations.Matrix.MatrixOperations.multiply(matrix31, matrix37);
        com.operations.Matrix.Matrix matrix45 = com.operations.Matrix.MatrixTransformations.project2D((double) ' ', 0.0d);
        double[] doubleArray48 = new double[] { 10, 'a' };
        double[] doubleArray51 = new double[] { 10, 'a' };
        double[][] doubleArray52 = new double[][] { doubleArray48, doubleArray51 };
        com.operations.Matrix.Matrix matrix53 = new com.operations.Matrix.Matrix(doubleArray52);
        int int54 = matrix53.getCols();
        boolean boolean55 = com.operations.Matrix.MatrixUtils.isSquare(matrix53);
        com.operations.Matrix.Matrix matrix56 = com.operations.Matrix.MatrixOperations.transpose(matrix53);
        int int57 = matrix56.getRows();
        com.operations.Matrix.Matrix matrix60 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0L, (double) (byte) 10);
        double[] doubleArray63 = new double[] { 10, 'a' };
        double[] doubleArray66 = new double[] { 10, 'a' };
        double[][] doubleArray67 = new double[][] { doubleArray63, doubleArray66 };
        com.operations.Matrix.Matrix matrix68 = new com.operations.Matrix.Matrix(doubleArray67);
        int int69 = matrix68.getCols();
        int int70 = matrix68.getCols();
        int int71 = matrix68.getCols();
        com.operations.Matrix.Matrix[] matrixArray72 = com.operations.Matrix.MatrixDecompositions.luDecomposition(matrix68);
        com.operations.Matrix.Matrix matrix73 = com.operations.Matrix.MatrixOperations.multiply(matrix60, matrix68);
        com.operations.Matrix.Matrix matrix75 = com.operations.Matrix.MatrixTransformations.rotate2D((double) (short) 100);
        boolean boolean77 = com.operations.Matrix.MatrixUtils.compare(matrix68, matrix75, (double) (byte) 0);
        com.operations.Matrix.Matrix matrix78 = com.operations.Matrix.MatrixOperations.multiply(matrix56, matrix68);
        com.operations.Matrix.Matrix matrix79 = com.operations.Matrix.MatrixOperations.add(matrix45, matrix68);
        matrix68.print();
        com.operations.Matrix.Matrix matrix81 = com.operations.Matrix.MatrixOperations.add(matrix37, matrix68);
        int int82 = matrix37.getRows();
        boolean boolean84 = com.operations.Matrix.MatrixUtils.compare(matrix12, matrix37, 1.472965077159101d);
        boolean boolean85 = com.operations.Matrix.MatrixUtils.isSymmetric(matrix12);
        org.junit.Assert.assertNotNull(matrix2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 2 + "'", int3 == 2);
        org.junit.Assert.assertNotNull(matrix9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(matrix12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(matrix15);
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertArrayEquals(doubleArray18, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertArrayEquals(doubleArray21, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertNotNull(matrix26);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertArrayEquals(doubleArray29, new double[] { 137.90576492663388d, (-1.0d) }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertArrayEquals(doubleArray30, new double[] { (-24.931892522286255d), (-135.63701830716116d) }, 1.0E-15);
        org.junit.Assert.assertNotNull(matrix31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertNotNull(matrix37);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 2 + "'", int38 == 2);
        org.junit.Assert.assertNotNull(matrix40);
        org.junit.Assert.assertNotNull(matrix42);
        org.junit.Assert.assertNotNull(matrix45);
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertArrayEquals(doubleArray48, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertArrayEquals(doubleArray51, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 2 + "'", int54 == 2);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + true + "'", boolean55 == true);
        org.junit.Assert.assertNotNull(matrix56);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 2 + "'", int57 == 2);
        org.junit.Assert.assertNotNull(matrix60);
        org.junit.Assert.assertNotNull(doubleArray63);
        org.junit.Assert.assertArrayEquals(doubleArray63, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray66);
        org.junit.Assert.assertArrayEquals(doubleArray66, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray67);
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 2 + "'", int69 == 2);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 2 + "'", int70 == 2);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 2 + "'", int71 == 2);
        org.junit.Assert.assertNotNull(matrixArray72);
        org.junit.Assert.assertNotNull(matrix73);
        org.junit.Assert.assertNotNull(matrix75);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertNotNull(matrix78);
        org.junit.Assert.assertNotNull(matrix79);
        org.junit.Assert.assertNotNull(matrix81);
        org.junit.Assert.assertTrue("'" + int82 + "' != '" + 2 + "'", int82 == 2);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false);
    }

    @Test
    public void test3003() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3003");
        com.operations.Matrix.Matrix matrix2 = com.operations.Matrix.MatrixTransformations.scale2D(52.009614495783374d, 137.9093905432114d);
        int int3 = matrix2.getCols();
        org.junit.Assert.assertNotNull(matrix2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 2 + "'", int3 == 2);
    }

    @Test
    public void test3004() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3004");
        com.operations.Matrix.Matrix matrix2 = new com.operations.Matrix.Matrix(10, (int) (byte) 100);
    }

    @Test
    public void test3005() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3005");
        com.operations.Matrix.Matrix matrix2 = com.operations.Matrix.MatrixTransformations.scale2D(137.90576492663385d, 2.075327666839899d);
        org.junit.Assert.assertNotNull(matrix2);
    }

    @Test
    public void test3006() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3006");
        double[] doubleArray2 = new double[] { 10, 'a' };
        double[] doubleArray5 = new double[] { 10, 'a' };
        double[][] doubleArray6 = new double[][] { doubleArray2, doubleArray5 };
        com.operations.Matrix.Matrix matrix7 = new com.operations.Matrix.Matrix(doubleArray6);
        com.operations.Matrix.Matrix matrix8 = new com.operations.Matrix.Matrix(doubleArray6);
        com.operations.Matrix.Matrix matrix10 = com.operations.Matrix.MatrixTransformations.rotate2D((double) (short) 100);
        double[] doubleArray13 = new double[] { 137.90576492663388d, (byte) -1 };
        double[] doubleArray14 = com.operations.Matrix.MatrixSolver.solveGaussian(matrix10, doubleArray13);
        com.operations.Matrix.Matrix matrix15 = com.operations.Matrix.MatrixOperations.add(matrix8, matrix10);
        com.operations.Matrix.Matrix matrix16 = com.operations.Matrix.MatrixDecompositions.choleskyDecomposition(matrix8);
        com.operations.Matrix.Matrix matrix19 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0L, (double) (byte) 10);
        double[] doubleArray22 = new double[] { 10, 'a' };
        double[] doubleArray25 = new double[] { 10, 'a' };
        double[][] doubleArray26 = new double[][] { doubleArray22, doubleArray25 };
        com.operations.Matrix.Matrix matrix27 = new com.operations.Matrix.Matrix(doubleArray26);
        int int28 = matrix27.getCols();
        int int29 = matrix27.getCols();
        int int30 = matrix27.getCols();
        com.operations.Matrix.Matrix[] matrixArray31 = com.operations.Matrix.MatrixDecompositions.luDecomposition(matrix27);
        com.operations.Matrix.Matrix matrix32 = com.operations.Matrix.MatrixOperations.multiply(matrix19, matrix27);
        com.operations.Matrix.Matrix matrix34 = com.operations.Matrix.MatrixTransformations.rotate2D((double) (short) 100);
        boolean boolean36 = com.operations.Matrix.MatrixUtils.compare(matrix27, matrix34, (double) (byte) 0);
        com.operations.Matrix.Matrix matrix37 = com.operations.Matrix.MatrixOperations.transpose(matrix27);
        com.operations.Matrix.Matrix matrix39 = com.operations.Matrix.MatrixOperations.scalarMultiply(matrix37, (double) 10);
        com.operations.Matrix.Matrix matrix40 = com.operations.Matrix.MatrixOperations.add(matrix16, matrix37);
        com.operations.Matrix.Matrix matrix42 = com.operations.Matrix.MatrixOperations.scalarMultiply(matrix40, 137.90576492663388d);
        int int43 = matrix42.getCols();
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertArrayEquals(doubleArray2, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertArrayEquals(doubleArray5, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertNotNull(matrix10);
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertArrayEquals(doubleArray13, new double[] { 137.90576492663388d, (-1.0d) }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertArrayEquals(doubleArray14, new double[] { (-24.931892522286255d), (-135.63701830716116d) }, 1.0E-15);
        org.junit.Assert.assertNotNull(matrix15);
        org.junit.Assert.assertNotNull(matrix16);
        org.junit.Assert.assertNotNull(matrix19);
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertArrayEquals(doubleArray22, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertArrayEquals(doubleArray25, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 2 + "'", int28 == 2);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 2 + "'", int29 == 2);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 2 + "'", int30 == 2);
        org.junit.Assert.assertNotNull(matrixArray31);
        org.junit.Assert.assertNotNull(matrix32);
        org.junit.Assert.assertNotNull(matrix34);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(matrix37);
        org.junit.Assert.assertNotNull(matrix39);
        org.junit.Assert.assertNotNull(matrix40);
        org.junit.Assert.assertNotNull(matrix42);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 2 + "'", int43 == 2);
    }

    @Test
    public void test3007() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3007");
        com.operations.Matrix.Matrix matrix2 = com.operations.Matrix.MatrixTransformations.scale2D(100.00499987500625d, (double) (short) 1);
        com.operations.Matrix.Matrix matrix4 = com.operations.Matrix.MatrixOperations.scalarMultiply(matrix2, 36.45545226711637d);
        org.junit.Assert.assertNotNull(matrix2);
        org.junit.Assert.assertNotNull(matrix4);
    }

    @Test
    public void test3008() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3008");
        com.operations.Matrix.Matrix matrix1 = com.operations.Matrix.MatrixTransformations.rotate2D((double) (-1L));
        matrix1.print();
        com.operations.Matrix.Matrix matrix5 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0L, (double) (byte) 10);
        double[] doubleArray8 = new double[] { 10, 'a' };
        double[] doubleArray11 = new double[] { 10, 'a' };
        double[][] doubleArray12 = new double[][] { doubleArray8, doubleArray11 };
        com.operations.Matrix.Matrix matrix13 = new com.operations.Matrix.Matrix(doubleArray12);
        int int14 = matrix13.getCols();
        int int15 = matrix13.getCols();
        int int16 = matrix13.getCols();
        com.operations.Matrix.Matrix[] matrixArray17 = com.operations.Matrix.MatrixDecompositions.luDecomposition(matrix13);
        com.operations.Matrix.Matrix matrix18 = com.operations.Matrix.MatrixOperations.multiply(matrix5, matrix13);
        com.operations.Matrix.Matrix matrix20 = com.operations.Matrix.MatrixTransformations.rotate2D((double) (short) 100);
        boolean boolean22 = com.operations.Matrix.MatrixUtils.compare(matrix13, matrix20, (double) (byte) 0);
        double[] doubleArray25 = new double[] { 10, 'a' };
        double[] doubleArray28 = new double[] { 10, 'a' };
        double[][] doubleArray29 = new double[][] { doubleArray25, doubleArray28 };
        com.operations.Matrix.Matrix matrix30 = new com.operations.Matrix.Matrix(doubleArray29);
        com.operations.Matrix.Matrix matrix31 = new com.operations.Matrix.Matrix(doubleArray29);
        com.operations.Matrix.Matrix matrix32 = new com.operations.Matrix.Matrix(doubleArray29);
        boolean boolean34 = com.operations.Matrix.MatrixUtils.compare(matrix13, matrix32, (double) (-1));
        double[] doubleArray37 = new double[] { 10, 'a' };
        double[] doubleArray40 = new double[] { 10, 'a' };
        double[][] doubleArray41 = new double[][] { doubleArray37, doubleArray40 };
        com.operations.Matrix.Matrix matrix42 = new com.operations.Matrix.Matrix(doubleArray41);
        com.operations.Matrix.Matrix matrix43 = new com.operations.Matrix.Matrix(doubleArray41);
        boolean boolean44 = com.operations.Matrix.MatrixUtils.isSquare(matrix43);
        com.operations.Matrix.Matrix matrix45 = com.operations.Matrix.MatrixOperations.multiply(matrix32, matrix43);
        com.operations.Matrix.Matrix matrix48 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0L, (double) (byte) 10);
        int int49 = matrix48.getRows();
        com.operations.Matrix.Matrix matrix51 = com.operations.Matrix.MatrixOperations.scalarMultiply(matrix48, (double) 2);
        matrix48.print();
        matrix48.print();
        com.operations.Matrix.Matrix matrix54 = com.operations.Matrix.MatrixOperations.multiply(matrix45, matrix48);
        com.operations.Matrix.Matrix matrix55 = com.operations.Matrix.MatrixOperations.subtract(matrix1, matrix48);
        com.operations.Matrix.Matrix matrix56 = com.operations.Matrix.MatrixOperations.transpose(matrix1);
        com.operations.Matrix.Matrix matrix59 = com.operations.Matrix.MatrixTransformations.project2D((double) (byte) 100, (double) 1L);
        com.operations.Matrix.Matrix matrix60 = com.operations.Matrix.MatrixOperations.add(matrix1, matrix59);
        com.operations.Matrix.Matrix[] matrixArray61 = com.operations.Matrix.MatrixDecompositions.luDecomposition(matrix60);
        com.operations.Matrix.Matrix[] matrixArray62 = com.operations.Matrix.MatrixDecompositions.luDecomposition(matrix60);
        org.junit.Assert.assertNotNull(matrix1);
        org.junit.Assert.assertNotNull(matrix5);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertArrayEquals(doubleArray8, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertArrayEquals(doubleArray11, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 2 + "'", int14 == 2);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 2 + "'", int15 == 2);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 2 + "'", int16 == 2);
        org.junit.Assert.assertNotNull(matrixArray17);
        org.junit.Assert.assertNotNull(matrix18);
        org.junit.Assert.assertNotNull(matrix20);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertArrayEquals(doubleArray25, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertArrayEquals(doubleArray28, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertArrayEquals(doubleArray37, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertArrayEquals(doubleArray40, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertNotNull(matrix45);
        org.junit.Assert.assertNotNull(matrix48);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 2 + "'", int49 == 2);
        org.junit.Assert.assertNotNull(matrix51);
        org.junit.Assert.assertNotNull(matrix54);
        org.junit.Assert.assertNotNull(matrix55);
        org.junit.Assert.assertNotNull(matrix56);
        org.junit.Assert.assertNotNull(matrix59);
        org.junit.Assert.assertNotNull(matrix60);
        org.junit.Assert.assertNotNull(matrixArray61);
        org.junit.Assert.assertNotNull(matrixArray62);
    }

    @Test
    public void test3009() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3009");
        com.operations.Matrix.Matrix matrix1 = com.operations.Matrix.MatrixTransformations.rotate2D((double) '4');
        boolean boolean2 = com.operations.Matrix.MatrixUtils.isSymmetric(matrix1);
        com.operations.Matrix.Matrix matrix4 = com.operations.Matrix.MatrixTransformations.rotate2D(100.0d);
        int int5 = matrix4.getCols();
        matrix4.print();
        com.operations.Matrix.Matrix matrix8 = com.operations.Matrix.MatrixOperations.scalarMultiply(matrix4, (double) (byte) 1);
        com.operations.Matrix.Matrix matrix11 = com.operations.Matrix.MatrixTransformations.project2D((double) ' ', 0.0d);
        double[] doubleArray14 = new double[] { 10, 'a' };
        double[] doubleArray17 = new double[] { 10, 'a' };
        double[][] doubleArray18 = new double[][] { doubleArray14, doubleArray17 };
        com.operations.Matrix.Matrix matrix19 = new com.operations.Matrix.Matrix(doubleArray18);
        int int20 = matrix19.getCols();
        boolean boolean21 = com.operations.Matrix.MatrixUtils.isSquare(matrix19);
        com.operations.Matrix.Matrix matrix22 = com.operations.Matrix.MatrixOperations.transpose(matrix19);
        int int23 = matrix22.getRows();
        com.operations.Matrix.Matrix matrix26 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0L, (double) (byte) 10);
        double[] doubleArray29 = new double[] { 10, 'a' };
        double[] doubleArray32 = new double[] { 10, 'a' };
        double[][] doubleArray33 = new double[][] { doubleArray29, doubleArray32 };
        com.operations.Matrix.Matrix matrix34 = new com.operations.Matrix.Matrix(doubleArray33);
        int int35 = matrix34.getCols();
        int int36 = matrix34.getCols();
        int int37 = matrix34.getCols();
        com.operations.Matrix.Matrix[] matrixArray38 = com.operations.Matrix.MatrixDecompositions.luDecomposition(matrix34);
        com.operations.Matrix.Matrix matrix39 = com.operations.Matrix.MatrixOperations.multiply(matrix26, matrix34);
        com.operations.Matrix.Matrix matrix41 = com.operations.Matrix.MatrixTransformations.rotate2D((double) (short) 100);
        boolean boolean43 = com.operations.Matrix.MatrixUtils.compare(matrix34, matrix41, (double) (byte) 0);
        com.operations.Matrix.Matrix matrix44 = com.operations.Matrix.MatrixOperations.multiply(matrix22, matrix34);
        com.operations.Matrix.Matrix matrix45 = com.operations.Matrix.MatrixOperations.add(matrix11, matrix34);
        matrix34.print();
        boolean boolean47 = com.operations.Matrix.MatrixUtils.isSquare(matrix34);
        boolean boolean49 = com.operations.Matrix.MatrixUtils.compare(matrix4, matrix34, 1.414213562373095d);
        com.operations.Matrix.Matrix matrix51 = com.operations.Matrix.MatrixTransformations.rotate2D(100.0d);
        int int52 = matrix51.getCols();
        com.operations.Matrix.Matrix matrix53 = com.operations.Matrix.MatrixOperations.subtract(matrix34, matrix51);
        boolean boolean54 = com.operations.Matrix.MatrixUtils.isSquare(matrix51);
        com.operations.Matrix.Matrix matrix56 = com.operations.Matrix.MatrixTransformations.rotate2D((double) 1.0f);
        com.operations.Matrix.Matrix matrix59 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0L, (double) (byte) 10);
        int int60 = matrix59.getRows();
        com.operations.Matrix.Matrix matrix62 = com.operations.Matrix.MatrixOperations.scalarMultiply(matrix59, (double) 2);
        double double63 = com.operations.Matrix.MatrixUtils.frobeniusNorm(matrix59);
        com.operations.Matrix.Matrix matrix66 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0L, (double) (byte) 10);
        int int67 = matrix66.getRows();
        com.operations.Matrix.Matrix matrix69 = com.operations.Matrix.MatrixOperations.scalarMultiply(matrix66, (double) 2);
        com.operations.Matrix.Matrix matrix70 = com.operations.Matrix.MatrixOperations.subtract(matrix59, matrix69);
        com.operations.Matrix.Matrix matrix71 = com.operations.Matrix.MatrixOperations.add(matrix56, matrix69);
        com.operations.Matrix.Matrix[] matrixArray72 = com.operations.Matrix.MatrixDecompositions.luDecomposition(matrix69);
        boolean boolean73 = com.operations.Matrix.MatrixUtils.isSquare(matrix69);
        com.operations.Matrix.Matrix matrix74 = com.operations.Matrix.MatrixOperations.transpose(matrix69);
        com.operations.Matrix.Matrix matrix76 = com.operations.Matrix.MatrixOperations.scalarMultiply(matrix69, (double) ' ');
        com.operations.Matrix.Matrix matrix79 = com.operations.Matrix.MatrixTransformations.project2D(0.0d, (double) 0);
        double[][] doubleArray80 = matrix79.getData();
        com.operations.Matrix.Matrix matrix81 = new com.operations.Matrix.Matrix(doubleArray80);
        com.operations.Matrix.Matrix matrix82 = new com.operations.Matrix.Matrix(doubleArray80);
        com.operations.Matrix.Matrix matrix83 = com.operations.Matrix.MatrixOperations.multiply(matrix69, matrix82);
        com.operations.Matrix.Matrix matrix84 = com.operations.Matrix.MatrixOperations.transpose(matrix69);
        boolean boolean86 = com.operations.Matrix.MatrixUtils.compare(matrix51, matrix84, 1.414213562373095d);
        com.operations.Matrix.Matrix matrix87 = com.operations.Matrix.MatrixOperations.add(matrix1, matrix84);
        boolean boolean88 = com.operations.Matrix.MatrixUtils.isSymmetric(matrix87);
        org.junit.Assert.assertNotNull(matrix1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(matrix4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 2 + "'", int5 == 2);
        org.junit.Assert.assertNotNull(matrix8);
        org.junit.Assert.assertNotNull(matrix11);
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertArrayEquals(doubleArray14, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertArrayEquals(doubleArray17, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 2 + "'", int20 == 2);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertNotNull(matrix22);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 2 + "'", int23 == 2);
        org.junit.Assert.assertNotNull(matrix26);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertArrayEquals(doubleArray29, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertArrayEquals(doubleArray32, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 2 + "'", int35 == 2);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 2 + "'", int36 == 2);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 2 + "'", int37 == 2);
        org.junit.Assert.assertNotNull(matrixArray38);
        org.junit.Assert.assertNotNull(matrix39);
        org.junit.Assert.assertNotNull(matrix41);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(matrix44);
        org.junit.Assert.assertNotNull(matrix45);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(matrix51);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 2 + "'", int52 == 2);
        org.junit.Assert.assertNotNull(matrix53);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + true + "'", boolean54 == true);
        org.junit.Assert.assertNotNull(matrix56);
        org.junit.Assert.assertNotNull(matrix59);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 2 + "'", int60 == 2);
        org.junit.Assert.assertNotNull(matrix62);
        org.junit.Assert.assertTrue("'" + double63 + "' != '" + 10.0d + "'", double63 == 10.0d);
        org.junit.Assert.assertNotNull(matrix66);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 2 + "'", int67 == 2);
        org.junit.Assert.assertNotNull(matrix69);
        org.junit.Assert.assertNotNull(matrix70);
        org.junit.Assert.assertNotNull(matrix71);
        org.junit.Assert.assertNotNull(matrixArray72);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + true + "'", boolean73 == true);
        org.junit.Assert.assertNotNull(matrix74);
        org.junit.Assert.assertNotNull(matrix76);
        org.junit.Assert.assertNotNull(matrix79);
        org.junit.Assert.assertNotNull(doubleArray80);
        org.junit.Assert.assertNotNull(matrix83);
        org.junit.Assert.assertNotNull(matrix84);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
        org.junit.Assert.assertNotNull(matrix87);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
    }

    @Test
    public void test3010() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3010");
        com.operations.Matrix.Matrix matrix5 = com.operations.Matrix.MatrixUtils.generateRandomMatrix(1, (int) (short) 1, 35, (int) (short) 1, (long) 100);
        com.operations.Matrix.Matrix matrix8 = com.operations.Matrix.MatrixTransformations.scale2D(0.0d, 0.0d);
        double double9 = com.operations.Matrix.MatrixUtils.frobeniusNorm(matrix8);
        // The following exception was thrown during execution in test generation
        try {
            com.operations.Matrix.Matrix matrix10 = com.operations.Matrix.MatrixOperations.subtract(matrix5, matrix8);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Matrices must have the same dimensions for subtraction.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(matrix5);
        org.junit.Assert.assertNotNull(matrix8);
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 0.0d + "'", double9 == 0.0d);
    }

    @Test
    public void test3011() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3011");
        com.operations.Matrix.Matrix matrix2 = com.operations.Matrix.MatrixTransformations.scale2D(32.0d, (double) 97);
        org.junit.Assert.assertNotNull(matrix2);
    }

    @Test
    public void test3012() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3012");
        com.operations.Matrix.Matrix matrix2 = com.operations.Matrix.MatrixTransformations.scale2D(0.0d, 0.0d);
        int int3 = matrix2.getRows();
        com.operations.Matrix.Matrix[] matrixArray4 = com.operations.Matrix.MatrixDecompositions.luDecomposition(matrix2);
        int int5 = matrix2.getCols();
        org.junit.Assert.assertNotNull(matrix2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 2 + "'", int3 == 2);
        org.junit.Assert.assertNotNull(matrixArray4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 2 + "'", int5 == 2);
    }

    @Test
    public void test3013() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3013");
        com.operations.Matrix.Matrix matrix2 = com.operations.Matrix.MatrixTransformations.project2D(1363.6076983299943d, (double) 97);
        org.junit.Assert.assertNotNull(matrix2);
    }

    @Test
    public void test3014() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3014");
        com.operations.Matrix.Matrix matrix1 = com.operations.Matrix.MatrixTransformations.rotate2D(100.0d);
        int int2 = matrix1.getCols();
        double[][] doubleArray3 = matrix1.getData();
        com.operations.Matrix.Matrix matrix4 = new com.operations.Matrix.Matrix(doubleArray3);
        com.operations.Matrix.Matrix matrix5 = new com.operations.Matrix.Matrix(doubleArray3);
        com.operations.Matrix.Matrix matrix7 = com.operations.Matrix.MatrixOperations.scalarMultiply(matrix5, (double) 100.0f);
        org.junit.Assert.assertNotNull(matrix1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 2 + "'", int2 == 2);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertNotNull(matrix7);
    }

    @Test
    public void test3015() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3015");
        com.operations.Matrix.Matrix matrix2 = com.operations.Matrix.MatrixTransformations.project2D((double) (-1L), 20.0d);
        matrix2.print();
        com.operations.Matrix.Matrix matrix4 = com.operations.Matrix.MatrixOperations.transpose(matrix2);
        // The following exception was thrown during execution in test generation
        try {
            com.operations.Matrix.Matrix matrix5 = com.operations.Matrix.MatrixDecompositions.choleskyDecomposition(matrix2);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Matrix is not positive definite.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(matrix2);
        org.junit.Assert.assertNotNull(matrix4);
    }

    @Test
    public void test3016() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3016");
        com.operations.Matrix.Matrix matrix2 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0L, (double) (byte) 10);
        double[] doubleArray5 = new double[] { 10, 'a' };
        double[] doubleArray8 = new double[] { 10, 'a' };
        double[][] doubleArray9 = new double[][] { doubleArray5, doubleArray8 };
        com.operations.Matrix.Matrix matrix10 = new com.operations.Matrix.Matrix(doubleArray9);
        int int11 = matrix10.getCols();
        int int12 = matrix10.getCols();
        int int13 = matrix10.getCols();
        com.operations.Matrix.Matrix[] matrixArray14 = com.operations.Matrix.MatrixDecompositions.luDecomposition(matrix10);
        com.operations.Matrix.Matrix matrix15 = com.operations.Matrix.MatrixOperations.multiply(matrix2, matrix10);
        com.operations.Matrix.Matrix matrix17 = com.operations.Matrix.MatrixTransformations.rotate2D((double) (short) 100);
        boolean boolean19 = com.operations.Matrix.MatrixUtils.compare(matrix10, matrix17, (double) (byte) 0);
        com.operations.Matrix.Matrix matrix20 = com.operations.Matrix.MatrixOperations.transpose(matrix10);
        com.operations.Matrix.Matrix matrix22 = com.operations.Matrix.MatrixOperations.scalarMultiply(matrix20, (double) 10);
        double[] doubleArray25 = new double[] { 10, 'a' };
        double[] doubleArray28 = new double[] { 10, 'a' };
        double[][] doubleArray29 = new double[][] { doubleArray25, doubleArray28 };
        com.operations.Matrix.Matrix matrix30 = new com.operations.Matrix.Matrix(doubleArray29);
        int int31 = matrix30.getCols();
        int int32 = matrix30.getCols();
        int int33 = matrix30.getCols();
        com.operations.Matrix.Matrix matrix39 = com.operations.Matrix.MatrixUtils.generateRandomMatrix(100, (int) (byte) 1, (int) '#', (int) '#', 1L);
        double double42 = matrix39.getValue((int) '4', 0);
        double double43 = com.operations.Matrix.MatrixUtils.frobeniusNorm(matrix39);
        boolean boolean44 = com.operations.Matrix.MatrixUtils.isSquare(matrix39);
        boolean boolean46 = com.operations.Matrix.MatrixUtils.compare(matrix30, matrix39, (double) 100L);
        double[][] doubleArray47 = matrix30.getData();
        com.operations.Matrix.Matrix matrix48 = com.operations.Matrix.MatrixOperations.add(matrix22, matrix30);
        java.lang.Class<?> wildcardClass49 = matrix48.getClass();
        org.junit.Assert.assertNotNull(matrix2);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertArrayEquals(doubleArray5, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertArrayEquals(doubleArray8, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 2 + "'", int11 == 2);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 2 + "'", int12 == 2);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 2 + "'", int13 == 2);
        org.junit.Assert.assertNotNull(matrixArray14);
        org.junit.Assert.assertNotNull(matrix15);
        org.junit.Assert.assertNotNull(matrix17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(matrix20);
        org.junit.Assert.assertNotNull(matrix22);
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertArrayEquals(doubleArray25, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertArrayEquals(doubleArray28, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 2 + "'", int31 == 2);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 2 + "'", int32 == 2);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 2 + "'", int33 == 2);
        org.junit.Assert.assertNotNull(matrix39);
        org.junit.Assert.assertTrue("'" + double42 + "' != '" + 35.0d + "'", double42 == 35.0d);
        org.junit.Assert.assertTrue("'" + double43 + "' != '" + 350.0d + "'", double43 == 350.0d);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertNotNull(matrix48);
        org.junit.Assert.assertNotNull(wildcardClass49);
    }

    @Test
    public void test3017() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3017");
        com.operations.Matrix.Matrix matrix1 = com.operations.Matrix.MatrixTransformations.rotate2D(975.1410154434076d);
        com.operations.Matrix.Matrix matrix2 = com.operations.Matrix.MatrixOperations.transpose(matrix1);
        // The following exception was thrown during execution in test generation
        try {
            double double5 = matrix2.getValue((int) (byte) -1, (int) (byte) 10);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(matrix1);
        org.junit.Assert.assertNotNull(matrix2);
    }

    @Test
    public void test3018() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3018");
        // The following exception was thrown during execution in test generation
        try {
            com.operations.Matrix.Matrix matrix4 = com.operations.Matrix.MatrixUtils.generateRandomMatrix((int) (short) 0, (int) (byte) -1, (int) (short) -1, 1);
            org.junit.Assert.fail("Expected exception of type java.lang.NegativeArraySizeException; message: -1");
        } catch (java.lang.NegativeArraySizeException e) {
            // Expected exception.
        }
    }

    @Test
    public void test3019() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3019");
        com.operations.Matrix.Matrix matrix2 = com.operations.Matrix.MatrixTransformations.scale2D((double) 35, (double) (byte) -1);
        org.junit.Assert.assertNotNull(matrix2);
    }

    @Test
    public void test3020() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3020");
        com.operations.Matrix.Matrix matrix2 = com.operations.Matrix.MatrixTransformations.scale2D(137.90576492663385d, (double) 1);
        int int3 = matrix2.getCols();
        double[][] doubleArray4 = matrix2.getData();
        com.operations.Matrix.Matrix matrix7 = new com.operations.Matrix.Matrix(100, 100);
        int int8 = matrix7.getCols();
        // The following exception was thrown during execution in test generation
        try {
            com.operations.Matrix.Matrix matrix9 = com.operations.Matrix.MatrixOperations.multiply(matrix2, matrix7);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Matrix A's columns must match Matrix B's rows for multiplication.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(matrix2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 2 + "'", int3 == 2);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 100 + "'", int8 == 100);
    }

    @Test
    public void test3021() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3021");
        com.operations.Matrix.Matrix matrix2 = com.operations.Matrix.MatrixTransformations.scale2D(98.07140255956371d, 1.0d);
        org.junit.Assert.assertNotNull(matrix2);
    }

    @Test
    public void test3022() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3022");
        com.operations.Matrix.Matrix matrix2 = com.operations.Matrix.MatrixTransformations.scale2D((double) (byte) 10, (double) 10);
        double[] doubleArray5 = new double[] { 10, 'a' };
        double[] doubleArray8 = new double[] { 10, 'a' };
        double[][] doubleArray9 = new double[][] { doubleArray5, doubleArray8 };
        com.operations.Matrix.Matrix matrix10 = new com.operations.Matrix.Matrix(doubleArray9);
        com.operations.Matrix.Matrix matrix11 = new com.operations.Matrix.Matrix(doubleArray9);
        boolean boolean12 = com.operations.Matrix.MatrixUtils.isSquare(matrix11);
        double[] doubleArray15 = new double[] { 10, 'a' };
        double[] doubleArray18 = new double[] { 10, 'a' };
        double[][] doubleArray19 = new double[][] { doubleArray15, doubleArray18 };
        com.operations.Matrix.Matrix matrix20 = new com.operations.Matrix.Matrix(doubleArray19);
        int int21 = matrix20.getCols();
        int int22 = matrix20.getCols();
        matrix20.print();
        double[] doubleArray26 = new double[] { 10, 'a' };
        double[] doubleArray29 = new double[] { 10, 'a' };
        double[][] doubleArray30 = new double[][] { doubleArray26, doubleArray29 };
        com.operations.Matrix.Matrix matrix31 = new com.operations.Matrix.Matrix(doubleArray30);
        boolean boolean33 = com.operations.Matrix.MatrixUtils.compare(matrix20, matrix31, (double) (-1));
        com.operations.Matrix.Matrix matrix34 = com.operations.Matrix.MatrixOperations.subtract(matrix11, matrix31);
        com.operations.Matrix.Matrix[] matrixArray35 = com.operations.Matrix.MatrixDecompositions.luDecomposition(matrix34);
        double[][] doubleArray36 = matrix34.getData();
        com.operations.Matrix.Matrix matrix37 = new com.operations.Matrix.Matrix(doubleArray36);
        com.operations.Matrix.Matrix matrix38 = com.operations.Matrix.MatrixOperations.multiply(matrix2, matrix37);
        com.operations.Matrix.Matrix matrix41 = com.operations.Matrix.MatrixTransformations.scale2D(1.414213562373095d, (double) 1);
        com.operations.Matrix.Matrix matrix42 = com.operations.Matrix.MatrixOperations.add(matrix38, matrix41);
        com.operations.Matrix.Matrix matrix45 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0L, (double) (byte) 10);
        int int46 = matrix45.getRows();
        com.operations.Matrix.Matrix matrix48 = com.operations.Matrix.MatrixOperations.scalarMultiply(matrix45, (double) 2);
        com.operations.Matrix.Matrix[] matrixArray49 = com.operations.Matrix.MatrixDecompositions.luDecomposition(matrix48);
        com.operations.Matrix.Matrix matrix50 = com.operations.Matrix.MatrixOperations.add(matrix41, matrix48);
        com.operations.Matrix.Matrix matrix51 = com.operations.Matrix.MatrixDecompositions.choleskyDecomposition(matrix41);
        com.operations.Matrix.Matrix matrix52 = com.operations.Matrix.MatrixDecompositions.choleskyDecomposition(matrix51);
        org.junit.Assert.assertNotNull(matrix2);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertArrayEquals(doubleArray5, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertArrayEquals(doubleArray8, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertArrayEquals(doubleArray15, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertArrayEquals(doubleArray18, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 2 + "'", int21 == 2);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 2 + "'", int22 == 2);
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertArrayEquals(doubleArray26, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertArrayEquals(doubleArray29, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(matrix34);
        org.junit.Assert.assertNotNull(matrixArray35);
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertNotNull(matrix38);
        org.junit.Assert.assertNotNull(matrix41);
        org.junit.Assert.assertNotNull(matrix42);
        org.junit.Assert.assertNotNull(matrix45);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 2 + "'", int46 == 2);
        org.junit.Assert.assertNotNull(matrix48);
        org.junit.Assert.assertNotNull(matrixArray49);
        org.junit.Assert.assertNotNull(matrix50);
        org.junit.Assert.assertNotNull(matrix51);
        org.junit.Assert.assertNotNull(matrix52);
    }

    @Test
    public void test3023() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3023");
        com.operations.Matrix.Matrix matrix1 = com.operations.Matrix.MatrixTransformations.rotate2D((double) (short) 100);
        double[] doubleArray4 = new double[] { 137.90576492663388d, (byte) -1 };
        double[] doubleArray5 = com.operations.Matrix.MatrixSolver.solveGaussian(matrix1, doubleArray4);
        com.operations.Matrix.Matrix matrix8 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0L, (double) (byte) 10);
        double[] doubleArray11 = new double[] { 10, 'a' };
        double[] doubleArray14 = new double[] { 10, 'a' };
        double[][] doubleArray15 = new double[][] { doubleArray11, doubleArray14 };
        com.operations.Matrix.Matrix matrix16 = new com.operations.Matrix.Matrix(doubleArray15);
        int int17 = matrix16.getCols();
        int int18 = matrix16.getCols();
        int int19 = matrix16.getCols();
        com.operations.Matrix.Matrix[] matrixArray20 = com.operations.Matrix.MatrixDecompositions.luDecomposition(matrix16);
        com.operations.Matrix.Matrix matrix21 = com.operations.Matrix.MatrixOperations.multiply(matrix8, matrix16);
        boolean boolean23 = com.operations.Matrix.MatrixUtils.compare(matrix1, matrix8, (double) (-1L));
        boolean boolean24 = com.operations.Matrix.MatrixUtils.isSymmetric(matrix1);
        com.operations.Matrix.Matrix matrix27 = com.operations.Matrix.MatrixTransformations.scale2D((double) (-1L), (double) '4');
        double[][] doubleArray28 = matrix27.getData();
        com.operations.Matrix.Matrix matrix29 = com.operations.Matrix.MatrixOperations.multiply(matrix1, matrix27);
        int int30 = matrix27.getCols();
        org.junit.Assert.assertNotNull(matrix1);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertArrayEquals(doubleArray4, new double[] { 137.90576492663388d, (-1.0d) }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertArrayEquals(doubleArray5, new double[] { (-24.931892522286255d), (-135.63701830716116d) }, 1.0E-15);
        org.junit.Assert.assertNotNull(matrix8);
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertArrayEquals(doubleArray11, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertArrayEquals(doubleArray14, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 2 + "'", int17 == 2);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 2 + "'", int18 == 2);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 2 + "'", int19 == 2);
        org.junit.Assert.assertNotNull(matrixArray20);
        org.junit.Assert.assertNotNull(matrix21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(matrix27);
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertNotNull(matrix29);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 2 + "'", int30 == 2);
    }

    @Test
    public void test3024() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3024");
        com.operations.Matrix.Matrix matrix4 = com.operations.Matrix.MatrixUtils.generateRandomMatrix(35, (int) (short) 1, 10, (int) (byte) 1);
        com.operations.Matrix.Matrix matrix5 = null;
        // The following exception was thrown during execution in test generation
        try {
            com.operations.Matrix.Matrix matrix6 = com.operations.Matrix.MatrixOperations.subtract(matrix4, matrix5);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot invoke \"com.operations.Matrix.Matrix.getRows()\" because \"b\" is null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(matrix4);
    }

    @Test
    public void test3025() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3025");
        com.operations.Matrix.Matrix matrix5 = com.operations.Matrix.MatrixUtils.generateRandomMatrix(32, (int) '4', 0, (int) (short) 10, (long) (byte) 1);
        matrix5.print();
        org.junit.Assert.assertNotNull(matrix5);
    }

    @Test
    public void test3026() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3026");
        com.operations.Matrix.Matrix matrix1 = com.operations.Matrix.MatrixTransformations.rotate2D(138.5659917737053d);
        org.junit.Assert.assertNotNull(matrix1);
    }

    @Test
    public void test3027() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3027");
        com.operations.Matrix.Matrix matrix1 = com.operations.Matrix.MatrixTransformations.rotate2D(100.0d);
        int int2 = matrix1.getCols();
        com.operations.Matrix.Matrix matrix5 = com.operations.Matrix.MatrixTransformations.project2D((double) 1, 364.0054944640259d);
        com.operations.Matrix.Matrix matrix6 = com.operations.Matrix.MatrixOperations.multiply(matrix1, matrix5);
        matrix5.print();
        matrix5.print();
        org.junit.Assert.assertNotNull(matrix1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 2 + "'", int2 == 2);
        org.junit.Assert.assertNotNull(matrix5);
        org.junit.Assert.assertNotNull(matrix6);
    }

    @Test
    public void test3028() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3028");
        com.operations.Matrix.Matrix matrix2 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0L, (double) (byte) 10);
        double[] doubleArray5 = new double[] { 10, 'a' };
        double[] doubleArray8 = new double[] { 10, 'a' };
        double[][] doubleArray9 = new double[][] { doubleArray5, doubleArray8 };
        com.operations.Matrix.Matrix matrix10 = new com.operations.Matrix.Matrix(doubleArray9);
        int int11 = matrix10.getCols();
        int int12 = matrix10.getCols();
        int int13 = matrix10.getCols();
        com.operations.Matrix.Matrix[] matrixArray14 = com.operations.Matrix.MatrixDecompositions.luDecomposition(matrix10);
        com.operations.Matrix.Matrix matrix15 = com.operations.Matrix.MatrixOperations.multiply(matrix2, matrix10);
        com.operations.Matrix.Matrix matrix17 = com.operations.Matrix.MatrixTransformations.rotate2D((double) (short) 100);
        boolean boolean19 = com.operations.Matrix.MatrixUtils.compare(matrix10, matrix17, (double) (byte) 0);
        com.operations.Matrix.Matrix[] matrixArray20 = com.operations.Matrix.MatrixDecompositions.luDecomposition(matrix10);
        com.operations.Matrix.Matrix matrix21 = com.operations.Matrix.MatrixOperations.transpose(matrix10);
        com.operations.Matrix.Matrix matrix24 = com.operations.Matrix.MatrixTransformations.scale2D((double) 1.0f, (double) 1);
        com.operations.Matrix.Matrix matrix26 = com.operations.Matrix.MatrixTransformations.rotate2D((double) 1.0f);
        com.operations.Matrix.Matrix matrix29 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0L, (double) (byte) 10);
        int int30 = matrix29.getRows();
        com.operations.Matrix.Matrix matrix32 = com.operations.Matrix.MatrixOperations.scalarMultiply(matrix29, (double) 2);
        double double33 = com.operations.Matrix.MatrixUtils.frobeniusNorm(matrix29);
        com.operations.Matrix.Matrix matrix36 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0L, (double) (byte) 10);
        int int37 = matrix36.getRows();
        com.operations.Matrix.Matrix matrix39 = com.operations.Matrix.MatrixOperations.scalarMultiply(matrix36, (double) 2);
        com.operations.Matrix.Matrix matrix40 = com.operations.Matrix.MatrixOperations.subtract(matrix29, matrix39);
        com.operations.Matrix.Matrix matrix41 = com.operations.Matrix.MatrixOperations.add(matrix26, matrix39);
        boolean boolean43 = com.operations.Matrix.MatrixUtils.compare(matrix24, matrix26, (double) (byte) -1);
        com.operations.Matrix.Matrix matrix44 = com.operations.Matrix.MatrixOperations.subtract(matrix21, matrix24);
        com.operations.Matrix.Matrix matrix47 = com.operations.Matrix.MatrixTransformations.scale2D((double) (-1L), (double) '4');
        com.operations.Matrix.Matrix matrix48 = com.operations.Matrix.MatrixOperations.transpose(matrix47);
        double[] doubleArray51 = new double[] { 10, 'a' };
        double[] doubleArray54 = new double[] { 10, 'a' };
        double[][] doubleArray55 = new double[][] { doubleArray51, doubleArray54 };
        com.operations.Matrix.Matrix matrix56 = new com.operations.Matrix.Matrix(doubleArray55);
        com.operations.Matrix.Matrix matrix57 = new com.operations.Matrix.Matrix(doubleArray55);
        com.operations.Matrix.Matrix matrix59 = com.operations.Matrix.MatrixTransformations.rotate2D((double) (short) 100);
        double[] doubleArray62 = new double[] { 137.90576492663388d, (byte) -1 };
        double[] doubleArray63 = com.operations.Matrix.MatrixSolver.solveGaussian(matrix59, doubleArray62);
        com.operations.Matrix.Matrix matrix64 = com.operations.Matrix.MatrixOperations.add(matrix57, matrix59);
        com.operations.Matrix.Matrix matrix65 = com.operations.Matrix.MatrixOperations.transpose(matrix59);
        com.operations.Matrix.Matrix matrix66 = com.operations.Matrix.MatrixOperations.multiply(matrix48, matrix59);
        com.operations.Matrix.Matrix matrix67 = com.operations.Matrix.MatrixOperations.multiply(matrix44, matrix48);
        java.lang.Class<?> wildcardClass68 = matrix44.getClass();
        org.junit.Assert.assertNotNull(matrix2);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertArrayEquals(doubleArray5, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertArrayEquals(doubleArray8, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 2 + "'", int11 == 2);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 2 + "'", int12 == 2);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 2 + "'", int13 == 2);
        org.junit.Assert.assertNotNull(matrixArray14);
        org.junit.Assert.assertNotNull(matrix15);
        org.junit.Assert.assertNotNull(matrix17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(matrixArray20);
        org.junit.Assert.assertNotNull(matrix21);
        org.junit.Assert.assertNotNull(matrix24);
        org.junit.Assert.assertNotNull(matrix26);
        org.junit.Assert.assertNotNull(matrix29);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 2 + "'", int30 == 2);
        org.junit.Assert.assertNotNull(matrix32);
        org.junit.Assert.assertTrue("'" + double33 + "' != '" + 10.0d + "'", double33 == 10.0d);
        org.junit.Assert.assertNotNull(matrix36);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 2 + "'", int37 == 2);
        org.junit.Assert.assertNotNull(matrix39);
        org.junit.Assert.assertNotNull(matrix40);
        org.junit.Assert.assertNotNull(matrix41);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(matrix44);
        org.junit.Assert.assertNotNull(matrix47);
        org.junit.Assert.assertNotNull(matrix48);
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertArrayEquals(doubleArray51, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray54);
        org.junit.Assert.assertArrayEquals(doubleArray54, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertNotNull(matrix59);
        org.junit.Assert.assertNotNull(doubleArray62);
        org.junit.Assert.assertArrayEquals(doubleArray62, new double[] { 137.90576492663388d, (-1.0d) }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray63);
        org.junit.Assert.assertArrayEquals(doubleArray63, new double[] { (-24.931892522286255d), (-135.63701830716116d) }, 1.0E-15);
        org.junit.Assert.assertNotNull(matrix64);
        org.junit.Assert.assertNotNull(matrix65);
        org.junit.Assert.assertNotNull(matrix66);
        org.junit.Assert.assertNotNull(matrix67);
        org.junit.Assert.assertNotNull(wildcardClass68);
    }

    @Test
    public void test3029() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3029");
        com.operations.Matrix.Matrix matrix2 = com.operations.Matrix.MatrixTransformations.scale2D(0.0d, 0.9998476951563913d);
        org.junit.Assert.assertNotNull(matrix2);
    }

    @Test
    public void test3030() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3030");
        // The following exception was thrown during execution in test generation
        try {
            com.operations.Matrix.Matrix matrix5 = com.operations.Matrix.MatrixUtils.generateRandomMatrix(35, (-1), (int) (byte) 0, 0, (-1L));
            org.junit.Assert.fail("Expected exception of type java.lang.NegativeArraySizeException; message: -1");
        } catch (java.lang.NegativeArraySizeException e) {
            // Expected exception.
        }
    }

    @Test
    public void test3031() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3031");
        com.operations.Matrix.Matrix matrix2 = com.operations.Matrix.MatrixTransformations.scale2D((double) (short) 0, 3500.0d);
        // The following exception was thrown during execution in test generation
        try {
            double double5 = matrix2.getValue((int) (byte) 10, 52);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(matrix2);
    }

    @Test
    public void test3032() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3032");
        com.operations.Matrix.Matrix matrix2 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0L, (double) (byte) 10);
        int int3 = matrix2.getRows();
        com.operations.Matrix.Matrix matrix9 = com.operations.Matrix.MatrixUtils.generateRandomMatrix(100, (int) (byte) 1, (int) '#', (int) '#', 1L);
        boolean boolean11 = com.operations.Matrix.MatrixUtils.compare(matrix2, matrix9, (double) 1.0f);
        matrix9.print();
        boolean boolean13 = com.operations.Matrix.MatrixUtils.isSymmetric(matrix9);
        double[][] doubleArray14 = matrix9.getData();
        com.operations.Matrix.Matrix matrix15 = new com.operations.Matrix.Matrix(doubleArray14);
        com.operations.Matrix.Matrix matrix18 = com.operations.Matrix.MatrixTransformations.project2D((double) ' ', 0.0d);
        double[] doubleArray21 = new double[] { 10, 'a' };
        double[] doubleArray24 = new double[] { 10, 'a' };
        double[][] doubleArray25 = new double[][] { doubleArray21, doubleArray24 };
        com.operations.Matrix.Matrix matrix26 = new com.operations.Matrix.Matrix(doubleArray25);
        int int27 = matrix26.getCols();
        boolean boolean28 = com.operations.Matrix.MatrixUtils.isSquare(matrix26);
        com.operations.Matrix.Matrix matrix29 = com.operations.Matrix.MatrixOperations.transpose(matrix26);
        int int30 = matrix29.getRows();
        com.operations.Matrix.Matrix matrix33 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0L, (double) (byte) 10);
        double[] doubleArray36 = new double[] { 10, 'a' };
        double[] doubleArray39 = new double[] { 10, 'a' };
        double[][] doubleArray40 = new double[][] { doubleArray36, doubleArray39 };
        com.operations.Matrix.Matrix matrix41 = new com.operations.Matrix.Matrix(doubleArray40);
        int int42 = matrix41.getCols();
        int int43 = matrix41.getCols();
        int int44 = matrix41.getCols();
        com.operations.Matrix.Matrix[] matrixArray45 = com.operations.Matrix.MatrixDecompositions.luDecomposition(matrix41);
        com.operations.Matrix.Matrix matrix46 = com.operations.Matrix.MatrixOperations.multiply(matrix33, matrix41);
        com.operations.Matrix.Matrix matrix48 = com.operations.Matrix.MatrixTransformations.rotate2D((double) (short) 100);
        boolean boolean50 = com.operations.Matrix.MatrixUtils.compare(matrix41, matrix48, (double) (byte) 0);
        com.operations.Matrix.Matrix matrix51 = com.operations.Matrix.MatrixOperations.multiply(matrix29, matrix41);
        com.operations.Matrix.Matrix matrix52 = com.operations.Matrix.MatrixOperations.add(matrix18, matrix41);
        matrix41.print();
        com.operations.Matrix.Matrix[] matrixArray54 = com.operations.Matrix.MatrixDecompositions.luDecomposition(matrix41);
        boolean boolean55 = com.operations.Matrix.MatrixUtils.isSquare(matrix41);
        // The following exception was thrown during execution in test generation
        try {
            com.operations.Matrix.Matrix matrix56 = com.operations.Matrix.MatrixOperations.subtract(matrix15, matrix41);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Matrices must have the same dimensions for subtraction.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(matrix2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 2 + "'", int3 == 2);
        org.junit.Assert.assertNotNull(matrix9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertNotNull(matrix18);
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertArrayEquals(doubleArray21, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertArrayEquals(doubleArray24, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 2 + "'", int27 == 2);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertNotNull(matrix29);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 2 + "'", int30 == 2);
        org.junit.Assert.assertNotNull(matrix33);
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertArrayEquals(doubleArray36, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertArrayEquals(doubleArray39, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 2 + "'", int42 == 2);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 2 + "'", int43 == 2);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 2 + "'", int44 == 2);
        org.junit.Assert.assertNotNull(matrixArray45);
        org.junit.Assert.assertNotNull(matrix46);
        org.junit.Assert.assertNotNull(matrix48);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(matrix51);
        org.junit.Assert.assertNotNull(matrix52);
        org.junit.Assert.assertNotNull(matrixArray54);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + true + "'", boolean55 == true);
    }

    @Test
    public void test3033() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3033");
        com.operations.Matrix.Matrix matrix4 = com.operations.Matrix.MatrixUtils.generateRandomMatrix((int) '#', (int) (short) 100, 2, (int) (byte) -1);
        double double5 = com.operations.Matrix.MatrixUtils.frobeniusNorm(matrix4);
        org.junit.Assert.assertNotNull(matrix4);
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 59.62334183013888d + "'", double5 == 59.62334183013888d);
    }

    @Test
    public void test3034() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3034");
        com.operations.Matrix.Matrix matrix2 = com.operations.Matrix.MatrixTransformations.project2D((double) (-1), 14.142135623730951d);
        java.lang.Class<?> wildcardClass3 = matrix2.getClass();
        org.junit.Assert.assertNotNull(matrix2);
        org.junit.Assert.assertNotNull(wildcardClass3);
    }

    @Test
    public void test3035() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3035");
        com.operations.Matrix.Matrix matrix4 = com.operations.Matrix.MatrixUtils.generateRandomMatrix((int) (short) 10, 100, 0, (int) 'a');
        double[] doubleArray7 = new double[] { 10, 'a' };
        double[] doubleArray10 = new double[] { 10, 'a' };
        double[][] doubleArray11 = new double[][] { doubleArray7, doubleArray10 };
        com.operations.Matrix.Matrix matrix12 = new com.operations.Matrix.Matrix(doubleArray11);
        int int13 = matrix12.getCols();
        boolean boolean14 = com.operations.Matrix.MatrixUtils.isSquare(matrix12);
        com.operations.Matrix.Matrix matrix15 = com.operations.Matrix.MatrixOperations.transpose(matrix12);
        int int16 = matrix15.getRows();
        com.operations.Matrix.Matrix matrix19 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0L, (double) (byte) 10);
        double[] doubleArray22 = new double[] { 10, 'a' };
        double[] doubleArray25 = new double[] { 10, 'a' };
        double[][] doubleArray26 = new double[][] { doubleArray22, doubleArray25 };
        com.operations.Matrix.Matrix matrix27 = new com.operations.Matrix.Matrix(doubleArray26);
        int int28 = matrix27.getCols();
        int int29 = matrix27.getCols();
        int int30 = matrix27.getCols();
        com.operations.Matrix.Matrix[] matrixArray31 = com.operations.Matrix.MatrixDecompositions.luDecomposition(matrix27);
        com.operations.Matrix.Matrix matrix32 = com.operations.Matrix.MatrixOperations.multiply(matrix19, matrix27);
        com.operations.Matrix.Matrix matrix34 = com.operations.Matrix.MatrixTransformations.rotate2D((double) (short) 100);
        boolean boolean36 = com.operations.Matrix.MatrixUtils.compare(matrix27, matrix34, (double) (byte) 0);
        com.operations.Matrix.Matrix matrix37 = com.operations.Matrix.MatrixOperations.multiply(matrix15, matrix27);
        int int38 = matrix15.getCols();
        com.operations.Matrix.Matrix matrix40 = com.operations.Matrix.MatrixTransformations.rotate2D((double) (short) 0);
        boolean boolean42 = com.operations.Matrix.MatrixUtils.compare(matrix15, matrix40, (double) (short) 100);
        double[][] doubleArray43 = matrix40.getData();
        boolean boolean45 = com.operations.Matrix.MatrixUtils.compare(matrix4, matrix40, 137.90576492663388d);
        org.junit.Assert.assertNotNull(matrix4);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertArrayEquals(doubleArray7, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertArrayEquals(doubleArray10, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 2 + "'", int13 == 2);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNotNull(matrix15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 2 + "'", int16 == 2);
        org.junit.Assert.assertNotNull(matrix19);
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertArrayEquals(doubleArray22, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertArrayEquals(doubleArray25, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 2 + "'", int28 == 2);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 2 + "'", int29 == 2);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 2 + "'", int30 == 2);
        org.junit.Assert.assertNotNull(matrixArray31);
        org.junit.Assert.assertNotNull(matrix32);
        org.junit.Assert.assertNotNull(matrix34);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(matrix37);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 2 + "'", int38 == 2);
        org.junit.Assert.assertNotNull(matrix40);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
    }

    @Test
    public void test3036() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3036");
        com.operations.Matrix.Matrix matrix2 = com.operations.Matrix.MatrixTransformations.project2D(2.075327666839899d, (double) (byte) 100);
        org.junit.Assert.assertNotNull(matrix2);
    }

    @Test
    public void test3037() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3037");
        double[] doubleArray2 = new double[] { 10, 'a' };
        double[] doubleArray5 = new double[] { 10, 'a' };
        double[][] doubleArray6 = new double[][] { doubleArray2, doubleArray5 };
        com.operations.Matrix.Matrix matrix7 = new com.operations.Matrix.Matrix(doubleArray6);
        int int8 = matrix7.getCols();
        int int9 = matrix7.getCols();
        boolean boolean10 = com.operations.Matrix.MatrixUtils.isSquare(matrix7);
        com.operations.Matrix.Matrix matrix11 = com.operations.Matrix.MatrixDecompositions.choleskyDecomposition(matrix7);
        com.operations.Matrix.Matrix matrix14 = com.operations.Matrix.MatrixTransformations.project2D(0.0d, (double) 0);
        com.operations.Matrix.Matrix matrix15 = com.operations.Matrix.MatrixOperations.subtract(matrix11, matrix14);
        com.operations.Matrix.Matrix matrix16 = com.operations.Matrix.MatrixOperations.transpose(matrix14);
        double[] doubleArray19 = new double[] { 10, 'a' };
        double[] doubleArray22 = new double[] { 10, 'a' };
        double[][] doubleArray23 = new double[][] { doubleArray19, doubleArray22 };
        com.operations.Matrix.Matrix matrix24 = new com.operations.Matrix.Matrix(doubleArray23);
        int int25 = matrix24.getCols();
        int int26 = matrix24.getCols();
        boolean boolean27 = com.operations.Matrix.MatrixUtils.isSquare(matrix24);
        com.operations.Matrix.Matrix matrix28 = com.operations.Matrix.MatrixDecompositions.choleskyDecomposition(matrix24);
        com.operations.Matrix.Matrix matrix31 = com.operations.Matrix.MatrixTransformations.project2D(0.0d, (double) 0);
        com.operations.Matrix.Matrix matrix32 = com.operations.Matrix.MatrixOperations.subtract(matrix28, matrix31);
        com.operations.Matrix.Matrix matrix34 = com.operations.Matrix.MatrixOperations.scalarMultiply(matrix28, (double) 1.0f);
        int int35 = matrix34.getCols();
        com.operations.Matrix.Matrix matrix36 = com.operations.Matrix.MatrixOperations.subtract(matrix16, matrix34);
        com.operations.Matrix.Matrix[] matrixArray37 = com.operations.Matrix.MatrixDecompositions.luDecomposition(matrix16);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertArrayEquals(doubleArray2, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertArrayEquals(doubleArray5, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 2 + "'", int8 == 2);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 2 + "'", int9 == 2);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(matrix11);
        org.junit.Assert.assertNotNull(matrix14);
        org.junit.Assert.assertNotNull(matrix15);
        org.junit.Assert.assertNotNull(matrix16);
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertArrayEquals(doubleArray19, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertArrayEquals(doubleArray22, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 2 + "'", int25 == 2);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 2 + "'", int26 == 2);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertNotNull(matrix28);
        org.junit.Assert.assertNotNull(matrix31);
        org.junit.Assert.assertNotNull(matrix32);
        org.junit.Assert.assertNotNull(matrix34);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 2 + "'", int35 == 2);
        org.junit.Assert.assertNotNull(matrix36);
        org.junit.Assert.assertNotNull(matrixArray37);
    }

    @Test
    public void test3038() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3038");
        com.operations.Matrix.Matrix matrix1 = com.operations.Matrix.MatrixTransformations.rotate2D((double) (byte) 100);
        double double2 = com.operations.Matrix.MatrixUtils.frobeniusNorm(matrix1);
        com.operations.Matrix.Matrix matrix5 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0.0f, (double) (-1));
        com.operations.Matrix.Matrix matrix8 = com.operations.Matrix.MatrixTransformations.scale2D(146.4308710620817d, (double) 10L);
        com.operations.Matrix.Matrix matrix9 = com.operations.Matrix.MatrixOperations.multiply(matrix5, matrix8);
        com.operations.Matrix.Matrix matrix11 = com.operations.Matrix.MatrixTransformations.rotate2D((double) 1.0f);
        com.operations.Matrix.Matrix matrix14 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0L, (double) (byte) 10);
        int int15 = matrix14.getRows();
        com.operations.Matrix.Matrix matrix17 = com.operations.Matrix.MatrixOperations.scalarMultiply(matrix14, (double) 2);
        double double18 = com.operations.Matrix.MatrixUtils.frobeniusNorm(matrix14);
        com.operations.Matrix.Matrix matrix21 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0L, (double) (byte) 10);
        int int22 = matrix21.getRows();
        com.operations.Matrix.Matrix matrix24 = com.operations.Matrix.MatrixOperations.scalarMultiply(matrix21, (double) 2);
        com.operations.Matrix.Matrix matrix25 = com.operations.Matrix.MatrixOperations.subtract(matrix14, matrix24);
        com.operations.Matrix.Matrix matrix26 = com.operations.Matrix.MatrixOperations.add(matrix11, matrix24);
        matrix11.print();
        double[] doubleArray30 = new double[] { 10, 'a' };
        double[] doubleArray33 = new double[] { 10, 'a' };
        double[][] doubleArray34 = new double[][] { doubleArray30, doubleArray33 };
        com.operations.Matrix.Matrix matrix35 = new com.operations.Matrix.Matrix(doubleArray34);
        com.operations.Matrix.Matrix matrix36 = com.operations.Matrix.MatrixOperations.transpose(matrix35);
        com.operations.Matrix.Matrix matrix39 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0L, (double) (byte) 10);
        int int40 = matrix39.getRows();
        com.operations.Matrix.Matrix matrix46 = com.operations.Matrix.MatrixUtils.generateRandomMatrix(100, (int) (byte) 1, (int) '#', (int) '#', 1L);
        boolean boolean48 = com.operations.Matrix.MatrixUtils.compare(matrix39, matrix46, (double) 1.0f);
        com.operations.Matrix.Matrix matrix50 = com.operations.Matrix.MatrixOperations.scalarMultiply(matrix39, (double) 1L);
        matrix39.print();
        com.operations.Matrix.Matrix matrix52 = com.operations.Matrix.MatrixOperations.multiply(matrix36, matrix39);
        com.operations.Matrix.Matrix matrix53 = com.operations.Matrix.MatrixOperations.multiply(matrix11, matrix39);
        com.operations.Matrix.Matrix matrix54 = com.operations.Matrix.MatrixOperations.subtract(matrix5, matrix39);
        com.operations.Matrix.Matrix matrix55 = com.operations.Matrix.MatrixOperations.subtract(matrix1, matrix5);
        com.operations.Matrix.Matrix matrix57 = com.operations.Matrix.MatrixTransformations.rotate2D((double) (-1L));
        com.operations.Matrix.Matrix matrix59 = com.operations.Matrix.MatrixTransformations.rotate2D((double) (short) 100);
        double[] doubleArray62 = new double[] { 137.90576492663388d, (byte) -1 };
        double[] doubleArray63 = com.operations.Matrix.MatrixSolver.solveGaussian(matrix59, doubleArray62);
        double[] doubleArray64 = com.operations.Matrix.MatrixSolver.solveGaussian(matrix57, doubleArray62);
        com.operations.Matrix.Matrix matrix65 = com.operations.Matrix.MatrixOperations.add(matrix1, matrix57);
        com.operations.Matrix.Matrix matrix66 = com.operations.Matrix.MatrixOperations.transpose(matrix65);
        com.operations.Matrix.Matrix matrix67 = com.operations.Matrix.MatrixOperations.transpose(matrix66);
        com.operations.Matrix.Matrix matrix70 = new com.operations.Matrix.Matrix((int) (byte) 0, (int) (byte) 10);
        // The following exception was thrown during execution in test generation
        try {
            com.operations.Matrix.Matrix matrix71 = com.operations.Matrix.MatrixOperations.multiply(matrix66, matrix70);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Matrix A's columns must match Matrix B's rows for multiplication.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(matrix1);
        org.junit.Assert.assertTrue("'" + double2 + "' != '" + 1.414213562373095d + "'", double2 == 1.414213562373095d);
        org.junit.Assert.assertNotNull(matrix5);
        org.junit.Assert.assertNotNull(matrix8);
        org.junit.Assert.assertNotNull(matrix9);
        org.junit.Assert.assertNotNull(matrix11);
        org.junit.Assert.assertNotNull(matrix14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 2 + "'", int15 == 2);
        org.junit.Assert.assertNotNull(matrix17);
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 10.0d + "'", double18 == 10.0d);
        org.junit.Assert.assertNotNull(matrix21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 2 + "'", int22 == 2);
        org.junit.Assert.assertNotNull(matrix24);
        org.junit.Assert.assertNotNull(matrix25);
        org.junit.Assert.assertNotNull(matrix26);
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertArrayEquals(doubleArray30, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertArrayEquals(doubleArray33, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertNotNull(matrix36);
        org.junit.Assert.assertNotNull(matrix39);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 2 + "'", int40 == 2);
        org.junit.Assert.assertNotNull(matrix46);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(matrix50);
        org.junit.Assert.assertNotNull(matrix52);
        org.junit.Assert.assertNotNull(matrix53);
        org.junit.Assert.assertNotNull(matrix54);
        org.junit.Assert.assertNotNull(matrix55);
        org.junit.Assert.assertNotNull(matrix57);
        org.junit.Assert.assertNotNull(matrix59);
        org.junit.Assert.assertNotNull(doubleArray62);
        org.junit.Assert.assertArrayEquals(doubleArray62, new double[] { 137.90576492663388d, (-1.0d) }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray63);
        org.junit.Assert.assertArrayEquals(doubleArray63, new double[] { (-24.931892522286255d), (-135.63701830716116d) }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray64);
        org.junit.Assert.assertArrayEquals(doubleArray64, new double[] { 137.90221361711127d, 1.4069397643877004d }, 1.0E-15);
        org.junit.Assert.assertNotNull(matrix65);
        org.junit.Assert.assertNotNull(matrix66);
        org.junit.Assert.assertNotNull(matrix67);
    }

    @Test
    public void test3039() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3039");
        double[] doubleArray2 = new double[] { 10, 'a' };
        double[] doubleArray5 = new double[] { 10, 'a' };
        double[][] doubleArray6 = new double[][] { doubleArray2, doubleArray5 };
        com.operations.Matrix.Matrix matrix7 = new com.operations.Matrix.Matrix(doubleArray6);
        com.operations.Matrix.Matrix matrix8 = new com.operations.Matrix.Matrix(doubleArray6);
        boolean boolean9 = com.operations.Matrix.MatrixUtils.isSquare(matrix8);
        double[] doubleArray12 = new double[] { 10, 'a' };
        double[] doubleArray15 = new double[] { 10, 'a' };
        double[][] doubleArray16 = new double[][] { doubleArray12, doubleArray15 };
        com.operations.Matrix.Matrix matrix17 = new com.operations.Matrix.Matrix(doubleArray16);
        int int18 = matrix17.getCols();
        int int19 = matrix17.getCols();
        matrix17.print();
        double[] doubleArray23 = new double[] { 10, 'a' };
        double[] doubleArray26 = new double[] { 10, 'a' };
        double[][] doubleArray27 = new double[][] { doubleArray23, doubleArray26 };
        com.operations.Matrix.Matrix matrix28 = new com.operations.Matrix.Matrix(doubleArray27);
        boolean boolean30 = com.operations.Matrix.MatrixUtils.compare(matrix17, matrix28, (double) (-1));
        com.operations.Matrix.Matrix matrix31 = com.operations.Matrix.MatrixOperations.subtract(matrix8, matrix28);
        com.operations.Matrix.Matrix matrix33 = com.operations.Matrix.MatrixOperations.scalarMultiply(matrix8, (double) 0.0f);
        int int34 = matrix8.getCols();
        double[] doubleArray37 = new double[] { 10, 'a' };
        double[] doubleArray40 = new double[] { 10, 'a' };
        double[][] doubleArray41 = new double[][] { doubleArray37, doubleArray40 };
        com.operations.Matrix.Matrix matrix42 = new com.operations.Matrix.Matrix(doubleArray41);
        com.operations.Matrix.Matrix matrix43 = new com.operations.Matrix.Matrix(doubleArray41);
        com.operations.Matrix.Matrix matrix44 = new com.operations.Matrix.Matrix(doubleArray41);
        com.operations.Matrix.Matrix matrix45 = com.operations.Matrix.MatrixOperations.multiply(matrix8, matrix44);
        com.operations.Matrix.Matrix matrix47 = com.operations.Matrix.MatrixOperations.scalarMultiply(matrix44, (double) (short) 0);
        boolean boolean48 = com.operations.Matrix.MatrixUtils.isSymmetric(matrix44);
        // The following exception was thrown during execution in test generation
        try {
            matrix44.setValue(100, 97, 391.8840992892044d);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: Index 100 out of bounds for length 2");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertArrayEquals(doubleArray2, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertArrayEquals(doubleArray5, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertArrayEquals(doubleArray12, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertArrayEquals(doubleArray15, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 2 + "'", int18 == 2);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 2 + "'", int19 == 2);
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertArrayEquals(doubleArray23, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertArrayEquals(doubleArray26, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(matrix31);
        org.junit.Assert.assertNotNull(matrix33);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 2 + "'", int34 == 2);
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertArrayEquals(doubleArray37, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertArrayEquals(doubleArray40, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertNotNull(matrix45);
        org.junit.Assert.assertNotNull(matrix47);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
    }

    @Test
    public void test3040() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3040");
        com.operations.Matrix.Matrix matrix4 = com.operations.Matrix.MatrixUtils.generateRandomMatrix((int) 'a', 0, (int) (short) -1, (int) 'a');
        com.operations.Matrix.Matrix matrix7 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0L, (double) (byte) 10);
        int int8 = matrix7.getRows();
        com.operations.Matrix.Matrix matrix11 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0L, (double) (byte) 10);
        int int12 = matrix11.getRows();
        com.operations.Matrix.Matrix matrix14 = com.operations.Matrix.MatrixOperations.scalarMultiply(matrix11, (double) 2);
        com.operations.Matrix.Matrix matrix15 = com.operations.Matrix.MatrixOperations.subtract(matrix7, matrix11);
        boolean boolean16 = com.operations.Matrix.MatrixUtils.isSquare(matrix11);
        boolean boolean18 = com.operations.Matrix.MatrixUtils.compare(matrix4, matrix11, 146.4308710620817d);
        // The following exception was thrown during execution in test generation
        try {
            matrix4.setValue((int) (byte) 0, 100, 24.03204160570106d);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: Index 100 out of bounds for length 0");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(matrix4);
        org.junit.Assert.assertNotNull(matrix7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 2 + "'", int8 == 2);
        org.junit.Assert.assertNotNull(matrix11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 2 + "'", int12 == 2);
        org.junit.Assert.assertNotNull(matrix14);
        org.junit.Assert.assertNotNull(matrix15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
    }

    @Test
    public void test3041() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3041");
        com.operations.Matrix.Matrix matrix4 = com.operations.Matrix.MatrixUtils.generateRandomMatrix(10, (int) '#', 10, 1);
        org.junit.Assert.assertNotNull(matrix4);
    }

    @Test
    public void test3042() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3042");
        com.operations.Matrix.Matrix matrix1 = com.operations.Matrix.MatrixTransformations.rotate2D(350.0d);
        com.operations.Matrix.Matrix matrix3 = com.operations.Matrix.MatrixTransformations.rotate2D((double) (short) 100);
        double[] doubleArray6 = new double[] { 137.90576492663388d, (byte) -1 };
        double[] doubleArray7 = com.operations.Matrix.MatrixSolver.solveGaussian(matrix3, doubleArray6);
        double[] doubleArray8 = com.operations.Matrix.MatrixSolver.solveGaussian(matrix1, doubleArray7);
        com.operations.Matrix.Matrix matrix11 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0L, (double) (byte) 10);
        double[] doubleArray14 = new double[] { 10, 'a' };
        double[] doubleArray17 = new double[] { 10, 'a' };
        double[][] doubleArray18 = new double[][] { doubleArray14, doubleArray17 };
        com.operations.Matrix.Matrix matrix19 = new com.operations.Matrix.Matrix(doubleArray18);
        int int20 = matrix19.getCols();
        int int21 = matrix19.getCols();
        int int22 = matrix19.getCols();
        com.operations.Matrix.Matrix[] matrixArray23 = com.operations.Matrix.MatrixDecompositions.luDecomposition(matrix19);
        com.operations.Matrix.Matrix matrix24 = com.operations.Matrix.MatrixOperations.multiply(matrix11, matrix19);
        com.operations.Matrix.Matrix matrix26 = com.operations.Matrix.MatrixTransformations.rotate2D((double) (short) 100);
        boolean boolean28 = com.operations.Matrix.MatrixUtils.compare(matrix19, matrix26, (double) (byte) 0);
        double[] doubleArray31 = new double[] { 10, 'a' };
        double[] doubleArray34 = new double[] { 10, 'a' };
        double[][] doubleArray35 = new double[][] { doubleArray31, doubleArray34 };
        com.operations.Matrix.Matrix matrix36 = new com.operations.Matrix.Matrix(doubleArray35);
        com.operations.Matrix.Matrix matrix37 = new com.operations.Matrix.Matrix(doubleArray35);
        com.operations.Matrix.Matrix matrix38 = new com.operations.Matrix.Matrix(doubleArray35);
        boolean boolean40 = com.operations.Matrix.MatrixUtils.compare(matrix19, matrix38, (double) (-1));
        int int41 = matrix19.getRows();
        com.operations.Matrix.Matrix matrix42 = com.operations.Matrix.MatrixOperations.add(matrix1, matrix19);
        matrix42.print();
        boolean boolean44 = com.operations.Matrix.MatrixUtils.isSquare(matrix42);
        com.operations.Matrix.Matrix matrix45 = com.operations.Matrix.MatrixDecompositions.choleskyDecomposition(matrix42);
        int int46 = matrix42.getCols();
        // The following exception was thrown during execution in test generation
        try {
            matrix42.setValue((int) 'a', (int) (byte) -1, 18.985133644271098d);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: Index 97 out of bounds for length 2");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(matrix1);
        org.junit.Assert.assertNotNull(matrix3);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertArrayEquals(doubleArray6, new double[] { 137.90576492663388d, (-1.0d) }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertArrayEquals(doubleArray7, new double[] { (-24.931892522286255d), (-135.63701830716116d) }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertArrayEquals(doubleArray8, new double[] { (-0.9999999999999858d), (-137.90576492663388d) }, 1.0E-15);
        org.junit.Assert.assertNotNull(matrix11);
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertArrayEquals(doubleArray14, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertArrayEquals(doubleArray17, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 2 + "'", int20 == 2);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 2 + "'", int21 == 2);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 2 + "'", int22 == 2);
        org.junit.Assert.assertNotNull(matrixArray23);
        org.junit.Assert.assertNotNull(matrix24);
        org.junit.Assert.assertNotNull(matrix26);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertArrayEquals(doubleArray31, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertArrayEquals(doubleArray34, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 2 + "'", int41 == 2);
        org.junit.Assert.assertNotNull(matrix42);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertNotNull(matrix45);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 2 + "'", int46 == 2);
    }

    @Test
    public void test3043() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3043");
        com.operations.Matrix.Matrix matrix2 = com.operations.Matrix.MatrixTransformations.project2D(1.969615506024416d, (double) (byte) 1);
        com.operations.Matrix.Matrix matrix3 = com.operations.Matrix.MatrixOperations.transpose(matrix2);
        double[] doubleArray6 = new double[] { 10, 'a' };
        double[] doubleArray9 = new double[] { 10, 'a' };
        double[][] doubleArray10 = new double[][] { doubleArray6, doubleArray9 };
        com.operations.Matrix.Matrix matrix11 = new com.operations.Matrix.Matrix(doubleArray10);
        com.operations.Matrix.Matrix matrix12 = com.operations.Matrix.MatrixOperations.transpose(matrix11);
        com.operations.Matrix.Matrix matrix15 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0L, (double) (byte) 10);
        int int16 = matrix15.getRows();
        com.operations.Matrix.Matrix matrix22 = com.operations.Matrix.MatrixUtils.generateRandomMatrix(100, (int) (byte) 1, (int) '#', (int) '#', 1L);
        boolean boolean24 = com.operations.Matrix.MatrixUtils.compare(matrix15, matrix22, (double) 1.0f);
        com.operations.Matrix.Matrix matrix26 = com.operations.Matrix.MatrixOperations.scalarMultiply(matrix15, (double) 1L);
        matrix15.print();
        com.operations.Matrix.Matrix matrix28 = com.operations.Matrix.MatrixOperations.multiply(matrix12, matrix15);
        matrix28.print();
        double double30 = com.operations.Matrix.MatrixUtils.frobeniusNorm(matrix28);
        com.operations.Matrix.Matrix matrix33 = com.operations.Matrix.MatrixTransformations.scale2D(41.14922324710797d, 12.751772028997056d);
        com.operations.Matrix.Matrix matrix34 = com.operations.Matrix.MatrixOperations.multiply(matrix28, matrix33);
        com.operations.Matrix.Matrix[] matrixArray35 = com.operations.Matrix.MatrixDecompositions.luDecomposition(matrix33);
        com.operations.Matrix.Matrix matrix36 = com.operations.Matrix.MatrixOperations.add(matrix3, matrix33);
        org.junit.Assert.assertNotNull(matrix2);
        org.junit.Assert.assertNotNull(matrix3);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertArrayEquals(doubleArray6, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertArrayEquals(doubleArray9, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertNotNull(matrix12);
        org.junit.Assert.assertNotNull(matrix15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 2 + "'", int16 == 2);
        org.junit.Assert.assertNotNull(matrix22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(matrix26);
        org.junit.Assert.assertNotNull(matrix28);
        org.junit.Assert.assertTrue("'" + double30 + "' != '" + 975.1410154434076d + "'", double30 == 975.1410154434076d);
        org.junit.Assert.assertNotNull(matrix33);
        org.junit.Assert.assertNotNull(matrix34);
        org.junit.Assert.assertNotNull(matrixArray35);
        org.junit.Assert.assertNotNull(matrix36);
    }

    @Test
    public void test3044() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3044");
        com.operations.Matrix.Matrix matrix2 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0L, (double) 32);
        org.junit.Assert.assertNotNull(matrix2);
    }

    @Test
    public void test3045() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3045");
        double[] doubleArray2 = new double[] { 10, 'a' };
        double[] doubleArray5 = new double[] { 10, 'a' };
        double[][] doubleArray6 = new double[][] { doubleArray2, doubleArray5 };
        com.operations.Matrix.Matrix matrix7 = new com.operations.Matrix.Matrix(doubleArray6);
        com.operations.Matrix.Matrix matrix8 = new com.operations.Matrix.Matrix(doubleArray6);
        com.operations.Matrix.Matrix matrix10 = com.operations.Matrix.MatrixTransformations.rotate2D((double) (short) 100);
        double[] doubleArray13 = new double[] { 137.90576492663388d, (byte) -1 };
        double[] doubleArray14 = com.operations.Matrix.MatrixSolver.solveGaussian(matrix10, doubleArray13);
        com.operations.Matrix.Matrix matrix15 = com.operations.Matrix.MatrixOperations.add(matrix8, matrix10);
        com.operations.Matrix.Matrix matrix16 = com.operations.Matrix.MatrixDecompositions.choleskyDecomposition(matrix8);
        com.operations.Matrix.Matrix matrix19 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0L, (double) (byte) 10);
        double[] doubleArray22 = new double[] { 10, 'a' };
        double[] doubleArray25 = new double[] { 10, 'a' };
        double[][] doubleArray26 = new double[][] { doubleArray22, doubleArray25 };
        com.operations.Matrix.Matrix matrix27 = new com.operations.Matrix.Matrix(doubleArray26);
        int int28 = matrix27.getCols();
        int int29 = matrix27.getCols();
        int int30 = matrix27.getCols();
        com.operations.Matrix.Matrix[] matrixArray31 = com.operations.Matrix.MatrixDecompositions.luDecomposition(matrix27);
        com.operations.Matrix.Matrix matrix32 = com.operations.Matrix.MatrixOperations.multiply(matrix19, matrix27);
        com.operations.Matrix.Matrix matrix34 = com.operations.Matrix.MatrixTransformations.rotate2D((double) (short) 100);
        boolean boolean36 = com.operations.Matrix.MatrixUtils.compare(matrix27, matrix34, (double) (byte) 0);
        com.operations.Matrix.Matrix matrix37 = com.operations.Matrix.MatrixOperations.transpose(matrix27);
        com.operations.Matrix.Matrix matrix39 = com.operations.Matrix.MatrixOperations.scalarMultiply(matrix37, (double) 10);
        com.operations.Matrix.Matrix matrix40 = com.operations.Matrix.MatrixOperations.add(matrix16, matrix37);
        com.operations.Matrix.Matrix[] matrixArray41 = com.operations.Matrix.MatrixDecompositions.luDecomposition(matrix16);
        // The following exception was thrown during execution in test generation
        try {
            matrix16.setValue((int) ' ', 97, (double) 97);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: Index 32 out of bounds for length 2");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertArrayEquals(doubleArray2, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertArrayEquals(doubleArray5, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertNotNull(matrix10);
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertArrayEquals(doubleArray13, new double[] { 137.90576492663388d, (-1.0d) }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertArrayEquals(doubleArray14, new double[] { (-24.931892522286255d), (-135.63701830716116d) }, 1.0E-15);
        org.junit.Assert.assertNotNull(matrix15);
        org.junit.Assert.assertNotNull(matrix16);
        org.junit.Assert.assertNotNull(matrix19);
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertArrayEquals(doubleArray22, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertArrayEquals(doubleArray25, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 2 + "'", int28 == 2);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 2 + "'", int29 == 2);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 2 + "'", int30 == 2);
        org.junit.Assert.assertNotNull(matrixArray31);
        org.junit.Assert.assertNotNull(matrix32);
        org.junit.Assert.assertNotNull(matrix34);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(matrix37);
        org.junit.Assert.assertNotNull(matrix39);
        org.junit.Assert.assertNotNull(matrix40);
        org.junit.Assert.assertNotNull(matrixArray41);
    }

    @Test
    public void test3046() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3046");
        com.operations.Matrix.Matrix matrix4 = com.operations.Matrix.MatrixUtils.generateRandomMatrix((int) (short) 100, (int) '4', (int) 'a', 52);
        com.operations.Matrix.Matrix matrix7 = com.operations.Matrix.MatrixTransformations.scale2D(0.0d, 0.0d);
        int int8 = matrix7.getCols();
        // The following exception was thrown during execution in test generation
        try {
            com.operations.Matrix.Matrix matrix9 = com.operations.Matrix.MatrixOperations.multiply(matrix4, matrix7);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Matrix A's columns must match Matrix B's rows for multiplication.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(matrix4);
        org.junit.Assert.assertNotNull(matrix7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 2 + "'", int8 == 2);
    }

    @Test
    public void test3047() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3047");
        com.operations.Matrix.Matrix matrix1 = com.operations.Matrix.MatrixTransformations.rotate2D((double) '4');
        double[] doubleArray4 = new double[] { 10, 'a' };
        double[] doubleArray7 = new double[] { 10, 'a' };
        double[][] doubleArray8 = new double[][] { doubleArray4, doubleArray7 };
        com.operations.Matrix.Matrix matrix9 = new com.operations.Matrix.Matrix(doubleArray8);
        com.operations.Matrix.Matrix matrix10 = new com.operations.Matrix.Matrix(doubleArray8);
        com.operations.Matrix.Matrix matrix12 = com.operations.Matrix.MatrixTransformations.rotate2D((double) (short) 100);
        double[] doubleArray15 = new double[] { 137.90576492663388d, (byte) -1 };
        double[] doubleArray16 = com.operations.Matrix.MatrixSolver.solveGaussian(matrix12, doubleArray15);
        com.operations.Matrix.Matrix matrix17 = com.operations.Matrix.MatrixOperations.add(matrix10, matrix12);
        boolean boolean18 = com.operations.Matrix.MatrixUtils.isSymmetric(matrix17);
        boolean boolean20 = com.operations.Matrix.MatrixUtils.compare(matrix1, matrix17, 364.0054944640259d);
        com.operations.Matrix.Matrix matrix23 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0L, (double) (byte) 10);
        int int24 = matrix23.getRows();
        com.operations.Matrix.Matrix matrix26 = com.operations.Matrix.MatrixOperations.scalarMultiply(matrix23, (double) 2);
        matrix23.print();
        com.operations.Matrix.Matrix matrix28 = com.operations.Matrix.MatrixOperations.multiply(matrix17, matrix23);
        com.operations.Matrix.Matrix matrix29 = com.operations.Matrix.MatrixOperations.transpose(matrix28);
        com.operations.Matrix.Matrix matrix31 = com.operations.Matrix.MatrixTransformations.rotate2D(100.0d);
        int int32 = matrix31.getCols();
        double[][] doubleArray33 = matrix31.getData();
        double[] doubleArray36 = new double[] { 10, 'a' };
        double[] doubleArray39 = new double[] { 10, 'a' };
        double[][] doubleArray40 = new double[][] { doubleArray36, doubleArray39 };
        com.operations.Matrix.Matrix matrix41 = new com.operations.Matrix.Matrix(doubleArray40);
        com.operations.Matrix.Matrix matrix42 = com.operations.Matrix.MatrixOperations.transpose(matrix41);
        com.operations.Matrix.Matrix matrix45 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0L, (double) (byte) 10);
        int int46 = matrix45.getRows();
        com.operations.Matrix.Matrix matrix52 = com.operations.Matrix.MatrixUtils.generateRandomMatrix(100, (int) (byte) 1, (int) '#', (int) '#', 1L);
        boolean boolean54 = com.operations.Matrix.MatrixUtils.compare(matrix45, matrix52, (double) 1.0f);
        com.operations.Matrix.Matrix matrix56 = com.operations.Matrix.MatrixOperations.scalarMultiply(matrix45, (double) 1L);
        matrix45.print();
        com.operations.Matrix.Matrix matrix58 = com.operations.Matrix.MatrixOperations.multiply(matrix42, matrix45);
        boolean boolean60 = com.operations.Matrix.MatrixUtils.compare(matrix31, matrix58, (double) 0.0f);
        boolean boolean61 = com.operations.Matrix.MatrixUtils.isSquare(matrix58);
        double double62 = com.operations.Matrix.MatrixUtils.frobeniusNorm(matrix58);
        com.operations.Matrix.Matrix matrix63 = com.operations.Matrix.MatrixOperations.subtract(matrix28, matrix58);
        int int64 = matrix63.getCols();
        // The following exception was thrown during execution in test generation
        try {
            double double67 = matrix63.getValue(0, (int) ' ');
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(matrix1);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertArrayEquals(doubleArray4, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertArrayEquals(doubleArray7, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertNotNull(matrix12);
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertArrayEquals(doubleArray15, new double[] { 137.90576492663388d, (-1.0d) }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertArrayEquals(doubleArray16, new double[] { (-24.931892522286255d), (-135.63701830716116d) }, 1.0E-15);
        org.junit.Assert.assertNotNull(matrix17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertNotNull(matrix23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 2 + "'", int24 == 2);
        org.junit.Assert.assertNotNull(matrix26);
        org.junit.Assert.assertNotNull(matrix28);
        org.junit.Assert.assertNotNull(matrix29);
        org.junit.Assert.assertNotNull(matrix31);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 2 + "'", int32 == 2);
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertArrayEquals(doubleArray36, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertArrayEquals(doubleArray39, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertNotNull(matrix42);
        org.junit.Assert.assertNotNull(matrix45);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 2 + "'", int46 == 2);
        org.junit.Assert.assertNotNull(matrix52);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(matrix56);
        org.junit.Assert.assertNotNull(matrix58);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + true + "'", boolean61 == true);
        org.junit.Assert.assertTrue("'" + double62 + "' != '" + 975.1410154434076d + "'", double62 == 975.1410154434076d);
        org.junit.Assert.assertNotNull(matrix63);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 2 + "'", int64 == 2);
    }

    @Test
    public void test3048() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3048");
        com.operations.Matrix.Matrix matrix2 = com.operations.Matrix.MatrixTransformations.scale2D(0.0d, 100.00499987500625d);
        double double3 = com.operations.Matrix.MatrixUtils.frobeniusNorm(matrix2);
        // The following exception was thrown during execution in test generation
        try {
            double double6 = matrix2.getValue((int) (byte) 10, 52);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(matrix2);
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + 100.00499987500625d + "'", double3 == 100.00499987500625d);
    }

    @Test
    public void test3049() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3049");
        com.operations.Matrix.Matrix matrix1 = com.operations.Matrix.MatrixTransformations.rotate2D((double) (-1L));
        matrix1.print();
        matrix1.print();
        double[][] doubleArray4 = matrix1.getData();
        org.junit.Assert.assertNotNull(matrix1);
        org.junit.Assert.assertNotNull(doubleArray4);
    }

    @Test
    public void test3050() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3050");
        com.operations.Matrix.Matrix matrix2 = com.operations.Matrix.MatrixTransformations.project2D((double) ' ', 0.0d);
        double[] doubleArray5 = new double[] { 10, 'a' };
        double[] doubleArray8 = new double[] { 10, 'a' };
        double[][] doubleArray9 = new double[][] { doubleArray5, doubleArray8 };
        com.operations.Matrix.Matrix matrix10 = new com.operations.Matrix.Matrix(doubleArray9);
        int int11 = matrix10.getCols();
        boolean boolean12 = com.operations.Matrix.MatrixUtils.isSquare(matrix10);
        com.operations.Matrix.Matrix matrix13 = com.operations.Matrix.MatrixOperations.transpose(matrix10);
        int int14 = matrix13.getRows();
        com.operations.Matrix.Matrix matrix17 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0L, (double) (byte) 10);
        double[] doubleArray20 = new double[] { 10, 'a' };
        double[] doubleArray23 = new double[] { 10, 'a' };
        double[][] doubleArray24 = new double[][] { doubleArray20, doubleArray23 };
        com.operations.Matrix.Matrix matrix25 = new com.operations.Matrix.Matrix(doubleArray24);
        int int26 = matrix25.getCols();
        int int27 = matrix25.getCols();
        int int28 = matrix25.getCols();
        com.operations.Matrix.Matrix[] matrixArray29 = com.operations.Matrix.MatrixDecompositions.luDecomposition(matrix25);
        com.operations.Matrix.Matrix matrix30 = com.operations.Matrix.MatrixOperations.multiply(matrix17, matrix25);
        com.operations.Matrix.Matrix matrix32 = com.operations.Matrix.MatrixTransformations.rotate2D((double) (short) 100);
        boolean boolean34 = com.operations.Matrix.MatrixUtils.compare(matrix25, matrix32, (double) (byte) 0);
        com.operations.Matrix.Matrix matrix35 = com.operations.Matrix.MatrixOperations.multiply(matrix13, matrix25);
        com.operations.Matrix.Matrix matrix36 = com.operations.Matrix.MatrixOperations.add(matrix2, matrix25);
        com.operations.Matrix.Matrix matrix37 = com.operations.Matrix.MatrixOperations.transpose(matrix2);
        com.operations.Matrix.Matrix matrix40 = com.operations.Matrix.MatrixTransformations.scale2D((double) (byte) 100, 350.0d);
        double double41 = com.operations.Matrix.MatrixUtils.frobeniusNorm(matrix40);
        int int42 = matrix40.getCols();
        com.operations.Matrix.Matrix matrix43 = com.operations.Matrix.MatrixOperations.multiply(matrix2, matrix40);
        int int44 = matrix40.getRows();
        double[][] doubleArray45 = matrix40.getData();
        matrix40.print();
        // The following exception was thrown during execution in test generation
        try {
            double double49 = matrix40.getValue((-1), (int) (byte) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(matrix2);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertArrayEquals(doubleArray5, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertArrayEquals(doubleArray8, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 2 + "'", int11 == 2);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(matrix13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 2 + "'", int14 == 2);
        org.junit.Assert.assertNotNull(matrix17);
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertArrayEquals(doubleArray20, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertArrayEquals(doubleArray23, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 2 + "'", int26 == 2);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 2 + "'", int27 == 2);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 2 + "'", int28 == 2);
        org.junit.Assert.assertNotNull(matrixArray29);
        org.junit.Assert.assertNotNull(matrix30);
        org.junit.Assert.assertNotNull(matrix32);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(matrix35);
        org.junit.Assert.assertNotNull(matrix36);
        org.junit.Assert.assertNotNull(matrix37);
        org.junit.Assert.assertNotNull(matrix40);
        org.junit.Assert.assertTrue("'" + double41 + "' != '" + 364.0054944640259d + "'", double41 == 364.0054944640259d);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 2 + "'", int42 == 2);
        org.junit.Assert.assertNotNull(matrix43);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 2 + "'", int44 == 2);
        org.junit.Assert.assertNotNull(doubleArray45);
    }

    @Test
    public void test3051() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3051");
        com.operations.Matrix.Matrix matrix1 = com.operations.Matrix.MatrixTransformations.rotate2D((double) '4');
        int int2 = matrix1.getRows();
        com.operations.Matrix.Matrix[] matrixArray3 = com.operations.Matrix.MatrixDecompositions.luDecomposition(matrix1);
        java.lang.Class<?> wildcardClass4 = matrix1.getClass();
        org.junit.Assert.assertNotNull(matrix1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 2 + "'", int2 == 2);
        org.junit.Assert.assertNotNull(matrixArray3);
        org.junit.Assert.assertNotNull(wildcardClass4);
    }

    @Test
    public void test3052() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3052");
        com.operations.Matrix.Matrix matrix1 = com.operations.Matrix.MatrixTransformations.rotate2D((double) 1.0f);
        com.operations.Matrix.Matrix matrix4 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0L, (double) (byte) 10);
        int int5 = matrix4.getRows();
        com.operations.Matrix.Matrix matrix7 = com.operations.Matrix.MatrixOperations.scalarMultiply(matrix4, (double) 2);
        double double8 = com.operations.Matrix.MatrixUtils.frobeniusNorm(matrix4);
        com.operations.Matrix.Matrix matrix11 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0L, (double) (byte) 10);
        int int12 = matrix11.getRows();
        com.operations.Matrix.Matrix matrix14 = com.operations.Matrix.MatrixOperations.scalarMultiply(matrix11, (double) 2);
        com.operations.Matrix.Matrix matrix15 = com.operations.Matrix.MatrixOperations.subtract(matrix4, matrix14);
        com.operations.Matrix.Matrix matrix16 = com.operations.Matrix.MatrixOperations.add(matrix1, matrix14);
        com.operations.Matrix.Matrix[] matrixArray17 = com.operations.Matrix.MatrixDecompositions.luDecomposition(matrix14);
        boolean boolean18 = com.operations.Matrix.MatrixUtils.isSquare(matrix14);
        com.operations.Matrix.Matrix matrix19 = com.operations.Matrix.MatrixOperations.transpose(matrix14);
        double[][] doubleArray20 = matrix14.getData();
        boolean boolean21 = com.operations.Matrix.MatrixUtils.isSymmetric(matrix14);
        // The following exception was thrown during execution in test generation
        try {
            double double24 = matrix14.getValue((int) ' ', (int) (short) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(matrix1);
        org.junit.Assert.assertNotNull(matrix4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 2 + "'", int5 == 2);
        org.junit.Assert.assertNotNull(matrix7);
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 10.0d + "'", double8 == 10.0d);
        org.junit.Assert.assertNotNull(matrix11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 2 + "'", int12 == 2);
        org.junit.Assert.assertNotNull(matrix14);
        org.junit.Assert.assertNotNull(matrix15);
        org.junit.Assert.assertNotNull(matrix16);
        org.junit.Assert.assertNotNull(matrixArray17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(matrix19);
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
    }

    @Test
    public void test3053() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3053");
        com.operations.Matrix.Matrix matrix1 = com.operations.Matrix.MatrixTransformations.rotate2D((double) 10L);
        double[][] doubleArray2 = matrix1.getData();
        org.junit.Assert.assertNotNull(matrix1);
        org.junit.Assert.assertNotNull(doubleArray2);
    }

    @Test
    public void test3054() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3054");
        // The following exception was thrown during execution in test generation
        try {
            com.operations.Matrix.Matrix matrix2 = new com.operations.Matrix.Matrix((-1), (int) '#');
            org.junit.Assert.fail("Expected exception of type java.lang.NegativeArraySizeException; message: -1");
        } catch (java.lang.NegativeArraySizeException e) {
            // Expected exception.
        }
    }

    @Test
    public void test3055() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3055");
        com.operations.Matrix.Matrix matrix2 = com.operations.Matrix.MatrixTransformations.scale2D((double) (byte) 10, (double) 10);
        double[] doubleArray5 = new double[] { 10, 'a' };
        double[] doubleArray8 = new double[] { 10, 'a' };
        double[][] doubleArray9 = new double[][] { doubleArray5, doubleArray8 };
        com.operations.Matrix.Matrix matrix10 = new com.operations.Matrix.Matrix(doubleArray9);
        com.operations.Matrix.Matrix matrix11 = new com.operations.Matrix.Matrix(doubleArray9);
        boolean boolean12 = com.operations.Matrix.MatrixUtils.isSquare(matrix11);
        double[] doubleArray15 = new double[] { 10, 'a' };
        double[] doubleArray18 = new double[] { 10, 'a' };
        double[][] doubleArray19 = new double[][] { doubleArray15, doubleArray18 };
        com.operations.Matrix.Matrix matrix20 = new com.operations.Matrix.Matrix(doubleArray19);
        int int21 = matrix20.getCols();
        int int22 = matrix20.getCols();
        matrix20.print();
        double[] doubleArray26 = new double[] { 10, 'a' };
        double[] doubleArray29 = new double[] { 10, 'a' };
        double[][] doubleArray30 = new double[][] { doubleArray26, doubleArray29 };
        com.operations.Matrix.Matrix matrix31 = new com.operations.Matrix.Matrix(doubleArray30);
        boolean boolean33 = com.operations.Matrix.MatrixUtils.compare(matrix20, matrix31, (double) (-1));
        com.operations.Matrix.Matrix matrix34 = com.operations.Matrix.MatrixOperations.subtract(matrix11, matrix31);
        com.operations.Matrix.Matrix[] matrixArray35 = com.operations.Matrix.MatrixDecompositions.luDecomposition(matrix34);
        double[][] doubleArray36 = matrix34.getData();
        com.operations.Matrix.Matrix matrix37 = new com.operations.Matrix.Matrix(doubleArray36);
        com.operations.Matrix.Matrix matrix38 = com.operations.Matrix.MatrixOperations.multiply(matrix2, matrix37);
        com.operations.Matrix.Matrix matrix41 = com.operations.Matrix.MatrixTransformations.scale2D(1.414213562373095d, (double) 1);
        com.operations.Matrix.Matrix matrix42 = com.operations.Matrix.MatrixOperations.add(matrix38, matrix41);
        com.operations.Matrix.Matrix matrix45 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0L, (double) (byte) 10);
        int int46 = matrix45.getRows();
        com.operations.Matrix.Matrix matrix48 = com.operations.Matrix.MatrixOperations.scalarMultiply(matrix45, (double) 2);
        com.operations.Matrix.Matrix[] matrixArray49 = com.operations.Matrix.MatrixDecompositions.luDecomposition(matrix48);
        com.operations.Matrix.Matrix matrix50 = com.operations.Matrix.MatrixOperations.add(matrix41, matrix48);
        com.operations.Matrix.Matrix matrix53 = new com.operations.Matrix.Matrix((int) (short) 100, 1);
        com.operations.Matrix.Matrix matrix54 = com.operations.Matrix.MatrixOperations.transpose(matrix53);
        com.operations.Matrix.Matrix matrix56 = com.operations.Matrix.MatrixOperations.scalarMultiply(matrix53, 137.90576492663388d);
        com.operations.Matrix.Matrix matrix58 = com.operations.Matrix.MatrixOperations.scalarMultiply(matrix56, 136.9141301851733d);
        boolean boolean60 = com.operations.Matrix.MatrixUtils.compare(matrix50, matrix56, (double) 10);
        // The following exception was thrown during execution in test generation
        try {
            com.operations.Matrix.Matrix matrix61 = com.operations.Matrix.MatrixDecompositions.choleskyDecomposition(matrix56);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Matrix must be square for Cholesky decomposition.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(matrix2);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertArrayEquals(doubleArray5, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertArrayEquals(doubleArray8, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertArrayEquals(doubleArray15, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertArrayEquals(doubleArray18, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 2 + "'", int21 == 2);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 2 + "'", int22 == 2);
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertArrayEquals(doubleArray26, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertArrayEquals(doubleArray29, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(matrix34);
        org.junit.Assert.assertNotNull(matrixArray35);
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertNotNull(matrix38);
        org.junit.Assert.assertNotNull(matrix41);
        org.junit.Assert.assertNotNull(matrix42);
        org.junit.Assert.assertNotNull(matrix45);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 2 + "'", int46 == 2);
        org.junit.Assert.assertNotNull(matrix48);
        org.junit.Assert.assertNotNull(matrixArray49);
        org.junit.Assert.assertNotNull(matrix50);
        org.junit.Assert.assertNotNull(matrix54);
        org.junit.Assert.assertNotNull(matrix56);
        org.junit.Assert.assertNotNull(matrix58);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
    }

    @Test
    public void test3056() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3056");
        com.operations.Matrix.Matrix matrix2 = new com.operations.Matrix.Matrix((int) 'a', (int) (short) 100);
        double double3 = com.operations.Matrix.MatrixUtils.frobeniusNorm(matrix2);
        double[][] doubleArray4 = matrix2.getData();
        com.operations.Matrix.Matrix matrix6 = com.operations.Matrix.MatrixOperations.scalarMultiply(matrix2, 39.279156665611445d);
        double double7 = com.operations.Matrix.MatrixUtils.frobeniusNorm(matrix6);
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + 0.0d + "'", double3 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertNotNull(matrix6);
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.0d + "'", double7 == 0.0d);
    }

    @Test
    public void test3057() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3057");
        com.operations.Matrix.Matrix matrix2 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0L, (double) (byte) 10);
        double[] doubleArray5 = new double[] { 10, 'a' };
        double[] doubleArray8 = new double[] { 10, 'a' };
        double[][] doubleArray9 = new double[][] { doubleArray5, doubleArray8 };
        com.operations.Matrix.Matrix matrix10 = new com.operations.Matrix.Matrix(doubleArray9);
        int int11 = matrix10.getCols();
        int int12 = matrix10.getCols();
        int int13 = matrix10.getCols();
        com.operations.Matrix.Matrix[] matrixArray14 = com.operations.Matrix.MatrixDecompositions.luDecomposition(matrix10);
        com.operations.Matrix.Matrix matrix15 = com.operations.Matrix.MatrixOperations.multiply(matrix2, matrix10);
        com.operations.Matrix.Matrix matrix17 = com.operations.Matrix.MatrixTransformations.rotate2D((double) (short) 100);
        boolean boolean19 = com.operations.Matrix.MatrixUtils.compare(matrix10, matrix17, (double) (byte) 0);
        double[] doubleArray22 = new double[] { 10, 'a' };
        double[] doubleArray25 = new double[] { 10, 'a' };
        double[][] doubleArray26 = new double[][] { doubleArray22, doubleArray25 };
        com.operations.Matrix.Matrix matrix27 = new com.operations.Matrix.Matrix(doubleArray26);
        com.operations.Matrix.Matrix matrix28 = new com.operations.Matrix.Matrix(doubleArray26);
        com.operations.Matrix.Matrix matrix29 = new com.operations.Matrix.Matrix(doubleArray26);
        boolean boolean31 = com.operations.Matrix.MatrixUtils.compare(matrix10, matrix29, (double) (-1));
        double[] doubleArray34 = new double[] { 10, 'a' };
        double[] doubleArray37 = new double[] { 10, 'a' };
        double[][] doubleArray38 = new double[][] { doubleArray34, doubleArray37 };
        com.operations.Matrix.Matrix matrix39 = new com.operations.Matrix.Matrix(doubleArray38);
        com.operations.Matrix.Matrix matrix40 = new com.operations.Matrix.Matrix(doubleArray38);
        boolean boolean41 = com.operations.Matrix.MatrixUtils.isSquare(matrix40);
        com.operations.Matrix.Matrix matrix42 = com.operations.Matrix.MatrixOperations.multiply(matrix29, matrix40);
        com.operations.Matrix.Matrix matrix45 = com.operations.Matrix.MatrixTransformations.project2D((double) ' ', 0.0d);
        double[] doubleArray48 = new double[] { 10, 'a' };
        double[] doubleArray51 = new double[] { 10, 'a' };
        double[][] doubleArray52 = new double[][] { doubleArray48, doubleArray51 };
        com.operations.Matrix.Matrix matrix53 = new com.operations.Matrix.Matrix(doubleArray52);
        int int54 = matrix53.getCols();
        boolean boolean55 = com.operations.Matrix.MatrixUtils.isSquare(matrix53);
        com.operations.Matrix.Matrix matrix56 = com.operations.Matrix.MatrixOperations.transpose(matrix53);
        int int57 = matrix56.getRows();
        com.operations.Matrix.Matrix matrix60 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0L, (double) (byte) 10);
        double[] doubleArray63 = new double[] { 10, 'a' };
        double[] doubleArray66 = new double[] { 10, 'a' };
        double[][] doubleArray67 = new double[][] { doubleArray63, doubleArray66 };
        com.operations.Matrix.Matrix matrix68 = new com.operations.Matrix.Matrix(doubleArray67);
        int int69 = matrix68.getCols();
        int int70 = matrix68.getCols();
        int int71 = matrix68.getCols();
        com.operations.Matrix.Matrix[] matrixArray72 = com.operations.Matrix.MatrixDecompositions.luDecomposition(matrix68);
        com.operations.Matrix.Matrix matrix73 = com.operations.Matrix.MatrixOperations.multiply(matrix60, matrix68);
        com.operations.Matrix.Matrix matrix75 = com.operations.Matrix.MatrixTransformations.rotate2D((double) (short) 100);
        boolean boolean77 = com.operations.Matrix.MatrixUtils.compare(matrix68, matrix75, (double) (byte) 0);
        com.operations.Matrix.Matrix matrix78 = com.operations.Matrix.MatrixOperations.multiply(matrix56, matrix68);
        com.operations.Matrix.Matrix matrix79 = com.operations.Matrix.MatrixOperations.add(matrix45, matrix68);
        com.operations.Matrix.Matrix matrix80 = com.operations.Matrix.MatrixOperations.transpose(matrix45);
        com.operations.Matrix.Matrix matrix83 = com.operations.Matrix.MatrixTransformations.scale2D((double) (byte) 100, 350.0d);
        double double84 = com.operations.Matrix.MatrixUtils.frobeniusNorm(matrix83);
        int int85 = matrix83.getCols();
        com.operations.Matrix.Matrix matrix86 = com.operations.Matrix.MatrixOperations.multiply(matrix45, matrix83);
        int int87 = matrix45.getRows();
        com.operations.Matrix.Matrix matrix88 = com.operations.Matrix.MatrixOperations.multiply(matrix42, matrix45);
        int int89 = matrix45.getCols();
        double[][] doubleArray90 = matrix45.getData();
        com.operations.Matrix.Matrix matrix91 = new com.operations.Matrix.Matrix(doubleArray90);
        java.lang.Class<?> wildcardClass92 = doubleArray90.getClass();
        org.junit.Assert.assertNotNull(matrix2);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertArrayEquals(doubleArray5, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertArrayEquals(doubleArray8, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 2 + "'", int11 == 2);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 2 + "'", int12 == 2);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 2 + "'", int13 == 2);
        org.junit.Assert.assertNotNull(matrixArray14);
        org.junit.Assert.assertNotNull(matrix15);
        org.junit.Assert.assertNotNull(matrix17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertArrayEquals(doubleArray22, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertArrayEquals(doubleArray25, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertArrayEquals(doubleArray34, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertArrayEquals(doubleArray37, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertNotNull(matrix42);
        org.junit.Assert.assertNotNull(matrix45);
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertArrayEquals(doubleArray48, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertArrayEquals(doubleArray51, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 2 + "'", int54 == 2);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + true + "'", boolean55 == true);
        org.junit.Assert.assertNotNull(matrix56);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 2 + "'", int57 == 2);
        org.junit.Assert.assertNotNull(matrix60);
        org.junit.Assert.assertNotNull(doubleArray63);
        org.junit.Assert.assertArrayEquals(doubleArray63, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray66);
        org.junit.Assert.assertArrayEquals(doubleArray66, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray67);
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 2 + "'", int69 == 2);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 2 + "'", int70 == 2);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 2 + "'", int71 == 2);
        org.junit.Assert.assertNotNull(matrixArray72);
        org.junit.Assert.assertNotNull(matrix73);
        org.junit.Assert.assertNotNull(matrix75);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertNotNull(matrix78);
        org.junit.Assert.assertNotNull(matrix79);
        org.junit.Assert.assertNotNull(matrix80);
        org.junit.Assert.assertNotNull(matrix83);
        org.junit.Assert.assertTrue("'" + double84 + "' != '" + 364.0054944640259d + "'", double84 == 364.0054944640259d);
        org.junit.Assert.assertTrue("'" + int85 + "' != '" + 2 + "'", int85 == 2);
        org.junit.Assert.assertNotNull(matrix86);
        org.junit.Assert.assertTrue("'" + int87 + "' != '" + 2 + "'", int87 == 2);
        org.junit.Assert.assertNotNull(matrix88);
        org.junit.Assert.assertTrue("'" + int89 + "' != '" + 2 + "'", int89 == 2);
        org.junit.Assert.assertNotNull(doubleArray90);
        org.junit.Assert.assertNotNull(wildcardClass92);
    }

    @Test
    public void test3058() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3058");
        com.operations.Matrix.Matrix matrix2 = new com.operations.Matrix.Matrix((int) 'a', (int) (short) 100);
        double double3 = com.operations.Matrix.MatrixUtils.frobeniusNorm(matrix2);
        double double6 = matrix2.getValue((int) '4', 2);
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + 0.0d + "'", double3 == 0.0d);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.0d + "'", double6 == 0.0d);
    }

    @Test
    public void test3059() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3059");
        com.operations.Matrix.Matrix matrix2 = new com.operations.Matrix.Matrix(35, (int) (short) 0);
        // The following exception was thrown during execution in test generation
        try {
            matrix2.setValue((-1), (int) '4', 1.7320508075688774d);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: Index -1 out of bounds for length 35");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
    }

    @Test
    public void test3060() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3060");
        com.operations.Matrix.Matrix matrix2 = com.operations.Matrix.MatrixTransformations.scale2D((double) '#', 138.5659917737053d);
        com.operations.Matrix.Matrix matrix5 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0L, (double) (byte) 10);
        com.operations.Matrix.Matrix matrix6 = com.operations.Matrix.MatrixOperations.transpose(matrix5);
        com.operations.Matrix.Matrix matrix9 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0L, (double) (byte) 10);
        double[] doubleArray12 = new double[] { 10, 'a' };
        double[] doubleArray15 = new double[] { 10, 'a' };
        double[][] doubleArray16 = new double[][] { doubleArray12, doubleArray15 };
        com.operations.Matrix.Matrix matrix17 = new com.operations.Matrix.Matrix(doubleArray16);
        int int18 = matrix17.getCols();
        int int19 = matrix17.getCols();
        int int20 = matrix17.getCols();
        com.operations.Matrix.Matrix[] matrixArray21 = com.operations.Matrix.MatrixDecompositions.luDecomposition(matrix17);
        com.operations.Matrix.Matrix matrix22 = com.operations.Matrix.MatrixOperations.multiply(matrix9, matrix17);
        com.operations.Matrix.Matrix matrix24 = com.operations.Matrix.MatrixTransformations.rotate2D((double) (short) 100);
        boolean boolean26 = com.operations.Matrix.MatrixUtils.compare(matrix17, matrix24, (double) (byte) 0);
        com.operations.Matrix.Matrix matrix28 = com.operations.Matrix.MatrixTransformations.rotate2D((double) 1.0f);
        com.operations.Matrix.Matrix matrix31 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0L, (double) (byte) 10);
        int int32 = matrix31.getRows();
        com.operations.Matrix.Matrix matrix34 = com.operations.Matrix.MatrixOperations.scalarMultiply(matrix31, (double) 2);
        double double35 = com.operations.Matrix.MatrixUtils.frobeniusNorm(matrix31);
        com.operations.Matrix.Matrix matrix38 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0L, (double) (byte) 10);
        int int39 = matrix38.getRows();
        com.operations.Matrix.Matrix matrix41 = com.operations.Matrix.MatrixOperations.scalarMultiply(matrix38, (double) 2);
        com.operations.Matrix.Matrix matrix42 = com.operations.Matrix.MatrixOperations.subtract(matrix31, matrix41);
        com.operations.Matrix.Matrix matrix43 = com.operations.Matrix.MatrixOperations.add(matrix28, matrix41);
        double[] doubleArray46 = new double[] { 10, 'a' };
        double[] doubleArray49 = new double[] { 10, 'a' };
        double[][] doubleArray50 = new double[][] { doubleArray46, doubleArray49 };
        com.operations.Matrix.Matrix matrix51 = new com.operations.Matrix.Matrix(doubleArray50);
        int int52 = matrix51.getCols();
        int int53 = matrix51.getCols();
        int int54 = matrix51.getCols();
        com.operations.Matrix.Matrix matrix60 = com.operations.Matrix.MatrixUtils.generateRandomMatrix(100, (int) (byte) 1, (int) '#', (int) '#', 1L);
        double double63 = matrix60.getValue((int) '4', 0);
        double double64 = com.operations.Matrix.MatrixUtils.frobeniusNorm(matrix60);
        boolean boolean65 = com.operations.Matrix.MatrixUtils.isSquare(matrix60);
        boolean boolean67 = com.operations.Matrix.MatrixUtils.compare(matrix51, matrix60, (double) 100L);
        com.operations.Matrix.Matrix matrix69 = com.operations.Matrix.MatrixTransformations.rotate2D((double) (short) 100);
        double[] doubleArray72 = new double[] { 137.90576492663388d, (byte) -1 };
        double[] doubleArray73 = com.operations.Matrix.MatrixSolver.solveGaussian(matrix69, doubleArray72);
        com.operations.Matrix.Matrix matrix76 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0L, (double) (byte) 10);
        double[] doubleArray79 = new double[] { 10, 'a' };
        double[] doubleArray82 = new double[] { 10, 'a' };
        double[][] doubleArray83 = new double[][] { doubleArray79, doubleArray82 };
        com.operations.Matrix.Matrix matrix84 = new com.operations.Matrix.Matrix(doubleArray83);
        int int85 = matrix84.getCols();
        int int86 = matrix84.getCols();
        int int87 = matrix84.getCols();
        com.operations.Matrix.Matrix[] matrixArray88 = com.operations.Matrix.MatrixDecompositions.luDecomposition(matrix84);
        com.operations.Matrix.Matrix matrix89 = com.operations.Matrix.MatrixOperations.multiply(matrix76, matrix84);
        boolean boolean91 = com.operations.Matrix.MatrixUtils.compare(matrix69, matrix76, (double) (-1L));
        com.operations.Matrix.Matrix matrix92 = com.operations.Matrix.MatrixOperations.subtract(matrix51, matrix76);
        com.operations.Matrix.Matrix matrix93 = com.operations.Matrix.MatrixOperations.add(matrix41, matrix76);
        com.operations.Matrix.Matrix matrix94 = com.operations.Matrix.MatrixOperations.add(matrix24, matrix93);
        com.operations.Matrix.Matrix matrix95 = com.operations.Matrix.MatrixOperations.transpose(matrix93);
        int int96 = matrix95.getCols();
        com.operations.Matrix.Matrix matrix97 = com.operations.Matrix.MatrixOperations.multiply(matrix5, matrix95);
        boolean boolean99 = com.operations.Matrix.MatrixUtils.compare(matrix2, matrix97, 12.790922166892882d);
        org.junit.Assert.assertNotNull(matrix2);
        org.junit.Assert.assertNotNull(matrix5);
        org.junit.Assert.assertNotNull(matrix6);
        org.junit.Assert.assertNotNull(matrix9);
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertArrayEquals(doubleArray12, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertArrayEquals(doubleArray15, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 2 + "'", int18 == 2);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 2 + "'", int19 == 2);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 2 + "'", int20 == 2);
        org.junit.Assert.assertNotNull(matrixArray21);
        org.junit.Assert.assertNotNull(matrix22);
        org.junit.Assert.assertNotNull(matrix24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(matrix28);
        org.junit.Assert.assertNotNull(matrix31);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 2 + "'", int32 == 2);
        org.junit.Assert.assertNotNull(matrix34);
        org.junit.Assert.assertTrue("'" + double35 + "' != '" + 10.0d + "'", double35 == 10.0d);
        org.junit.Assert.assertNotNull(matrix38);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 2 + "'", int39 == 2);
        org.junit.Assert.assertNotNull(matrix41);
        org.junit.Assert.assertNotNull(matrix42);
        org.junit.Assert.assertNotNull(matrix43);
        org.junit.Assert.assertNotNull(doubleArray46);
        org.junit.Assert.assertArrayEquals(doubleArray46, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertArrayEquals(doubleArray49, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 2 + "'", int52 == 2);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 2 + "'", int53 == 2);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 2 + "'", int54 == 2);
        org.junit.Assert.assertNotNull(matrix60);
        org.junit.Assert.assertTrue("'" + double63 + "' != '" + 35.0d + "'", double63 == 35.0d);
        org.junit.Assert.assertTrue("'" + double64 + "' != '" + 350.0d + "'", double64 == 350.0d);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertNotNull(matrix69);
        org.junit.Assert.assertNotNull(doubleArray72);
        org.junit.Assert.assertArrayEquals(doubleArray72, new double[] { 137.90576492663388d, (-1.0d) }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray73);
        org.junit.Assert.assertArrayEquals(doubleArray73, new double[] { (-24.931892522286255d), (-135.63701830716116d) }, 1.0E-15);
        org.junit.Assert.assertNotNull(matrix76);
        org.junit.Assert.assertNotNull(doubleArray79);
        org.junit.Assert.assertArrayEquals(doubleArray79, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray82);
        org.junit.Assert.assertArrayEquals(doubleArray82, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray83);
        org.junit.Assert.assertTrue("'" + int85 + "' != '" + 2 + "'", int85 == 2);
        org.junit.Assert.assertTrue("'" + int86 + "' != '" + 2 + "'", int86 == 2);
        org.junit.Assert.assertTrue("'" + int87 + "' != '" + 2 + "'", int87 == 2);
        org.junit.Assert.assertNotNull(matrixArray88);
        org.junit.Assert.assertNotNull(matrix89);
        org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + false + "'", boolean91 == false);
        org.junit.Assert.assertNotNull(matrix92);
        org.junit.Assert.assertNotNull(matrix93);
        org.junit.Assert.assertNotNull(matrix94);
        org.junit.Assert.assertNotNull(matrix95);
        org.junit.Assert.assertTrue("'" + int96 + "' != '" + 2 + "'", int96 == 2);
        org.junit.Assert.assertNotNull(matrix97);
        org.junit.Assert.assertTrue("'" + boolean99 + "' != '" + false + "'", boolean99 == false);
    }

    @Test
    public void test3061() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3061");
        com.operations.Matrix.Matrix matrix2 = com.operations.Matrix.MatrixTransformations.project2D((double) (byte) 100, 32.0d);
        boolean boolean3 = com.operations.Matrix.MatrixUtils.isSquare(matrix2);
        matrix2.print();
        com.operations.Matrix.Matrix matrix6 = com.operations.Matrix.MatrixOperations.scalarMultiply(matrix2, (double) 100.0f);
        double double7 = com.operations.Matrix.MatrixUtils.frobeniusNorm(matrix6);
        org.junit.Assert.assertNotNull(matrix2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNotNull(matrix6);
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 10499.52379872535d + "'", double7 == 10499.52379872535d);
    }

    @Test
    public void test3062() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3062");
        com.operations.Matrix.Matrix matrix2 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0L, (double) (byte) 10);
        double[] doubleArray5 = new double[] { 10, 'a' };
        double[] doubleArray8 = new double[] { 10, 'a' };
        double[][] doubleArray9 = new double[][] { doubleArray5, doubleArray8 };
        com.operations.Matrix.Matrix matrix10 = new com.operations.Matrix.Matrix(doubleArray9);
        int int11 = matrix10.getCols();
        int int12 = matrix10.getCols();
        int int13 = matrix10.getCols();
        com.operations.Matrix.Matrix[] matrixArray14 = com.operations.Matrix.MatrixDecompositions.luDecomposition(matrix10);
        com.operations.Matrix.Matrix matrix15 = com.operations.Matrix.MatrixOperations.multiply(matrix2, matrix10);
        int int16 = matrix10.getRows();
        int int17 = matrix10.getCols();
        com.operations.Matrix.Matrix matrix20 = com.operations.Matrix.MatrixTransformations.project2D((double) (-1L), (double) (short) 100);
        com.operations.Matrix.Matrix matrix21 = com.operations.Matrix.MatrixOperations.subtract(matrix10, matrix20);
        com.operations.Matrix.Matrix matrix24 = com.operations.Matrix.MatrixTransformations.project2D(0.0d, (double) 0);
        double[][] doubleArray25 = matrix24.getData();
        com.operations.Matrix.Matrix matrix28 = com.operations.Matrix.MatrixTransformations.project2D((double) ' ', 0.0d);
        double[] doubleArray31 = new double[] { 10, 'a' };
        double[] doubleArray34 = new double[] { 10, 'a' };
        double[][] doubleArray35 = new double[][] { doubleArray31, doubleArray34 };
        com.operations.Matrix.Matrix matrix36 = new com.operations.Matrix.Matrix(doubleArray35);
        int int37 = matrix36.getCols();
        boolean boolean38 = com.operations.Matrix.MatrixUtils.isSquare(matrix36);
        com.operations.Matrix.Matrix matrix39 = com.operations.Matrix.MatrixOperations.transpose(matrix36);
        int int40 = matrix39.getRows();
        com.operations.Matrix.Matrix matrix43 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0L, (double) (byte) 10);
        double[] doubleArray46 = new double[] { 10, 'a' };
        double[] doubleArray49 = new double[] { 10, 'a' };
        double[][] doubleArray50 = new double[][] { doubleArray46, doubleArray49 };
        com.operations.Matrix.Matrix matrix51 = new com.operations.Matrix.Matrix(doubleArray50);
        int int52 = matrix51.getCols();
        int int53 = matrix51.getCols();
        int int54 = matrix51.getCols();
        com.operations.Matrix.Matrix[] matrixArray55 = com.operations.Matrix.MatrixDecompositions.luDecomposition(matrix51);
        com.operations.Matrix.Matrix matrix56 = com.operations.Matrix.MatrixOperations.multiply(matrix43, matrix51);
        com.operations.Matrix.Matrix matrix58 = com.operations.Matrix.MatrixTransformations.rotate2D((double) (short) 100);
        boolean boolean60 = com.operations.Matrix.MatrixUtils.compare(matrix51, matrix58, (double) (byte) 0);
        com.operations.Matrix.Matrix matrix61 = com.operations.Matrix.MatrixOperations.multiply(matrix39, matrix51);
        com.operations.Matrix.Matrix matrix62 = com.operations.Matrix.MatrixOperations.add(matrix28, matrix51);
        com.operations.Matrix.Matrix matrix63 = com.operations.Matrix.MatrixOperations.transpose(matrix28);
        boolean boolean65 = com.operations.Matrix.MatrixUtils.compare(matrix24, matrix28, (double) 0L);
        com.operations.Matrix.Matrix matrix66 = com.operations.Matrix.MatrixOperations.multiply(matrix21, matrix28);
        java.lang.Class<?> wildcardClass67 = matrix21.getClass();
        org.junit.Assert.assertNotNull(matrix2);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertArrayEquals(doubleArray5, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertArrayEquals(doubleArray8, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 2 + "'", int11 == 2);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 2 + "'", int12 == 2);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 2 + "'", int13 == 2);
        org.junit.Assert.assertNotNull(matrixArray14);
        org.junit.Assert.assertNotNull(matrix15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 2 + "'", int16 == 2);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 2 + "'", int17 == 2);
        org.junit.Assert.assertNotNull(matrix20);
        org.junit.Assert.assertNotNull(matrix21);
        org.junit.Assert.assertNotNull(matrix24);
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertNotNull(matrix28);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertArrayEquals(doubleArray31, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertArrayEquals(doubleArray34, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 2 + "'", int37 == 2);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertNotNull(matrix39);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 2 + "'", int40 == 2);
        org.junit.Assert.assertNotNull(matrix43);
        org.junit.Assert.assertNotNull(doubleArray46);
        org.junit.Assert.assertArrayEquals(doubleArray46, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertArrayEquals(doubleArray49, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 2 + "'", int52 == 2);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 2 + "'", int53 == 2);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 2 + "'", int54 == 2);
        org.junit.Assert.assertNotNull(matrixArray55);
        org.junit.Assert.assertNotNull(matrix56);
        org.junit.Assert.assertNotNull(matrix58);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertNotNull(matrix61);
        org.junit.Assert.assertNotNull(matrix62);
        org.junit.Assert.assertNotNull(matrix63);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertNotNull(matrix66);
        org.junit.Assert.assertNotNull(wildcardClass67);
    }

    @Test
    public void test3063() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3063");
        com.operations.Matrix.Matrix matrix1 = com.operations.Matrix.MatrixTransformations.rotate2D(0.984807753012208d);
        double double4 = matrix1.getValue((int) (byte) 0, (int) (byte) 1);
        int int5 = matrix1.getCols();
        com.operations.Matrix.Matrix matrix8 = com.operations.Matrix.MatrixTransformations.project2D((double) ' ', (double) (short) 0);
        com.operations.Matrix.Matrix matrix9 = com.operations.Matrix.MatrixOperations.multiply(matrix1, matrix8);
        org.junit.Assert.assertNotNull(matrix1);
        org.junit.Assert.assertTrue("'" + double4 + "' != '" + (-0.017187291480513275d) + "'", double4 == (-0.017187291480513275d));
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 2 + "'", int5 == 2);
        org.junit.Assert.assertNotNull(matrix8);
        org.junit.Assert.assertNotNull(matrix9);
    }

    @Test
    public void test3064() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3064");
        com.operations.Matrix.Matrix matrix2 = com.operations.Matrix.MatrixTransformations.scale2D(52.009614495783374d, (double) 0.0f);
        double double3 = com.operations.Matrix.MatrixUtils.frobeniusNorm(matrix2);
        double[] doubleArray6 = new double[] { 10, 'a' };
        double[] doubleArray9 = new double[] { 10, 'a' };
        double[][] doubleArray10 = new double[][] { doubleArray6, doubleArray9 };
        com.operations.Matrix.Matrix matrix11 = new com.operations.Matrix.Matrix(doubleArray10);
        int int12 = matrix11.getCols();
        int int13 = matrix11.getCols();
        boolean boolean14 = com.operations.Matrix.MatrixUtils.isSquare(matrix11);
        com.operations.Matrix.Matrix matrix15 = com.operations.Matrix.MatrixDecompositions.choleskyDecomposition(matrix11);
        com.operations.Matrix.Matrix matrix18 = com.operations.Matrix.MatrixTransformations.project2D(0.0d, (double) 0);
        com.operations.Matrix.Matrix matrix19 = com.operations.Matrix.MatrixOperations.subtract(matrix15, matrix18);
        com.operations.Matrix.Matrix matrix20 = com.operations.Matrix.MatrixOperations.multiply(matrix2, matrix19);
        double double21 = com.operations.Matrix.MatrixUtils.frobeniusNorm(matrix19);
        com.operations.Matrix.Matrix matrix22 = com.operations.Matrix.MatrixDecompositions.choleskyDecomposition(matrix19);
        // The following exception was thrown during execution in test generation
        try {
            double double25 = matrix19.getValue((int) (byte) 100, (int) (byte) 0);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(matrix2);
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + 52.009614495783374d + "'", double3 == 52.009614495783374d);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertArrayEquals(doubleArray6, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertArrayEquals(doubleArray9, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 2 + "'", int12 == 2);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 2 + "'", int13 == 2);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNotNull(matrix15);
        org.junit.Assert.assertNotNull(matrix18);
        org.junit.Assert.assertNotNull(matrix19);
        org.junit.Assert.assertNotNull(matrix20);
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 10.344080432788601d + "'", double21 == 10.344080432788601d);
        org.junit.Assert.assertNotNull(matrix22);
    }

    @Test
    public void test3065() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3065");
        com.operations.Matrix.Matrix matrix2 = new com.operations.Matrix.Matrix((int) (byte) 0, (int) (byte) 0);
        // The following exception was thrown during execution in test generation
        try {
            matrix2.setValue(97, (int) (short) 10, (double) (short) 1);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: Index 97 out of bounds for length 0");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
    }

    @Test
    public void test3066() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3066");
        com.operations.Matrix.Matrix matrix2 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0L, (double) (byte) 10);
        int int3 = matrix2.getRows();
        com.operations.Matrix.Matrix matrix6 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0L, (double) (byte) 10);
        int int7 = matrix6.getRows();
        com.operations.Matrix.Matrix matrix9 = com.operations.Matrix.MatrixOperations.scalarMultiply(matrix6, (double) 2);
        com.operations.Matrix.Matrix matrix10 = com.operations.Matrix.MatrixOperations.subtract(matrix2, matrix6);
        com.operations.Matrix.Matrix matrix13 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0L, (double) (byte) 10);
        int int14 = matrix13.getRows();
        com.operations.Matrix.Matrix matrix20 = com.operations.Matrix.MatrixUtils.generateRandomMatrix(100, (int) (byte) 1, (int) '#', (int) '#', 1L);
        boolean boolean22 = com.operations.Matrix.MatrixUtils.compare(matrix13, matrix20, (double) 1.0f);
        com.operations.Matrix.Matrix matrix24 = com.operations.Matrix.MatrixOperations.scalarMultiply(matrix13, (double) 1L);
        boolean boolean26 = com.operations.Matrix.MatrixUtils.compare(matrix10, matrix24, 0.0d);
        com.operations.Matrix.Matrix matrix28 = com.operations.Matrix.MatrixTransformations.rotate2D((double) (short) 100);
        double[][] doubleArray29 = matrix28.getData();
        com.operations.Matrix.Matrix matrix30 = new com.operations.Matrix.Matrix(doubleArray29);
        com.operations.Matrix.Matrix matrix31 = com.operations.Matrix.MatrixOperations.add(matrix24, matrix30);
        int int32 = matrix31.getRows();
        com.operations.Matrix.Matrix matrix34 = com.operations.Matrix.MatrixTransformations.rotate2D((double) '4');
        double[] doubleArray37 = new double[] { 10, 'a' };
        double[] doubleArray40 = new double[] { 10, 'a' };
        double[][] doubleArray41 = new double[][] { doubleArray37, doubleArray40 };
        com.operations.Matrix.Matrix matrix42 = new com.operations.Matrix.Matrix(doubleArray41);
        com.operations.Matrix.Matrix matrix43 = new com.operations.Matrix.Matrix(doubleArray41);
        com.operations.Matrix.Matrix matrix45 = com.operations.Matrix.MatrixTransformations.rotate2D((double) (short) 100);
        double[] doubleArray48 = new double[] { 137.90576492663388d, (byte) -1 };
        double[] doubleArray49 = com.operations.Matrix.MatrixSolver.solveGaussian(matrix45, doubleArray48);
        com.operations.Matrix.Matrix matrix50 = com.operations.Matrix.MatrixOperations.add(matrix43, matrix45);
        boolean boolean51 = com.operations.Matrix.MatrixUtils.isSymmetric(matrix50);
        boolean boolean53 = com.operations.Matrix.MatrixUtils.compare(matrix34, matrix50, 364.0054944640259d);
        com.operations.Matrix.Matrix matrix56 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0L, (double) (byte) 10);
        int int57 = matrix56.getRows();
        com.operations.Matrix.Matrix matrix59 = com.operations.Matrix.MatrixOperations.scalarMultiply(matrix56, (double) 2);
        matrix56.print();
        com.operations.Matrix.Matrix matrix61 = com.operations.Matrix.MatrixOperations.multiply(matrix50, matrix56);
        int int62 = matrix61.getRows();
        com.operations.Matrix.Matrix matrix65 = com.operations.Matrix.MatrixTransformations.scale2D(1.414213562373095d, 36.40054944640259d);
        com.operations.Matrix.Matrix matrix66 = com.operations.Matrix.MatrixOperations.transpose(matrix65);
        com.operations.Matrix.Matrix matrix67 = com.operations.Matrix.MatrixOperations.multiply(matrix61, matrix66);
        com.operations.Matrix.Matrix matrix70 = com.operations.Matrix.MatrixTransformations.project2D(0.0d, (double) (-1L));
        com.operations.Matrix.Matrix matrix71 = com.operations.Matrix.MatrixOperations.multiply(matrix61, matrix70);
        com.operations.Matrix.Matrix matrix72 = com.operations.Matrix.MatrixOperations.multiply(matrix31, matrix71);
        int int73 = matrix31.getRows();
        int int74 = matrix31.getRows();
        org.junit.Assert.assertNotNull(matrix2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 2 + "'", int3 == 2);
        org.junit.Assert.assertNotNull(matrix6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 2 + "'", int7 == 2);
        org.junit.Assert.assertNotNull(matrix9);
        org.junit.Assert.assertNotNull(matrix10);
        org.junit.Assert.assertNotNull(matrix13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 2 + "'", int14 == 2);
        org.junit.Assert.assertNotNull(matrix20);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(matrix24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(matrix28);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertNotNull(matrix31);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 2 + "'", int32 == 2);
        org.junit.Assert.assertNotNull(matrix34);
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertArrayEquals(doubleArray37, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertArrayEquals(doubleArray40, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertNotNull(matrix45);
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertArrayEquals(doubleArray48, new double[] { 137.90576492663388d, (-1.0d) }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertArrayEquals(doubleArray49, new double[] { (-24.931892522286255d), (-135.63701830716116d) }, 1.0E-15);
        org.junit.Assert.assertNotNull(matrix50);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true);
        org.junit.Assert.assertNotNull(matrix56);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 2 + "'", int57 == 2);
        org.junit.Assert.assertNotNull(matrix59);
        org.junit.Assert.assertNotNull(matrix61);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 2 + "'", int62 == 2);
        org.junit.Assert.assertNotNull(matrix65);
        org.junit.Assert.assertNotNull(matrix66);
        org.junit.Assert.assertNotNull(matrix67);
        org.junit.Assert.assertNotNull(matrix70);
        org.junit.Assert.assertNotNull(matrix71);
        org.junit.Assert.assertNotNull(matrix72);
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + 2 + "'", int73 == 2);
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 2 + "'", int74 == 2);
    }

    @Test
    public void test3067() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3067");
        com.operations.Matrix.Matrix matrix1 = com.operations.Matrix.MatrixTransformations.rotate2D((double) 1.0f);
        com.operations.Matrix.Matrix matrix4 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0L, (double) (byte) 10);
        int int5 = matrix4.getRows();
        com.operations.Matrix.Matrix matrix7 = com.operations.Matrix.MatrixOperations.scalarMultiply(matrix4, (double) 2);
        double double8 = com.operations.Matrix.MatrixUtils.frobeniusNorm(matrix4);
        com.operations.Matrix.Matrix matrix11 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0L, (double) (byte) 10);
        int int12 = matrix11.getRows();
        com.operations.Matrix.Matrix matrix14 = com.operations.Matrix.MatrixOperations.scalarMultiply(matrix11, (double) 2);
        com.operations.Matrix.Matrix matrix15 = com.operations.Matrix.MatrixOperations.subtract(matrix4, matrix14);
        com.operations.Matrix.Matrix matrix16 = com.operations.Matrix.MatrixOperations.add(matrix1, matrix14);
        com.operations.Matrix.Matrix[] matrixArray17 = com.operations.Matrix.MatrixDecompositions.luDecomposition(matrix14);
        boolean boolean18 = com.operations.Matrix.MatrixUtils.isSquare(matrix14);
        com.operations.Matrix.Matrix matrix19 = com.operations.Matrix.MatrixOperations.transpose(matrix14);
        com.operations.Matrix.Matrix matrix21 = com.operations.Matrix.MatrixOperations.scalarMultiply(matrix14, (double) ' ');
        com.operations.Matrix.Matrix matrix24 = com.operations.Matrix.MatrixTransformations.project2D(0.0d, (double) 0);
        double[][] doubleArray25 = matrix24.getData();
        com.operations.Matrix.Matrix matrix26 = new com.operations.Matrix.Matrix(doubleArray25);
        com.operations.Matrix.Matrix matrix27 = new com.operations.Matrix.Matrix(doubleArray25);
        com.operations.Matrix.Matrix matrix28 = com.operations.Matrix.MatrixOperations.multiply(matrix14, matrix27);
        com.operations.Matrix.Matrix matrix29 = com.operations.Matrix.MatrixOperations.transpose(matrix28);
        matrix28.print();
        com.operations.Matrix.Matrix matrix32 = com.operations.Matrix.MatrixOperations.scalarMultiply(matrix28, (double) 35);
        com.operations.Matrix.Matrix matrix33 = null;
        // The following exception was thrown during execution in test generation
        try {
            com.operations.Matrix.Matrix matrix34 = com.operations.Matrix.MatrixOperations.multiply(matrix32, matrix33);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(matrix1);
        org.junit.Assert.assertNotNull(matrix4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 2 + "'", int5 == 2);
        org.junit.Assert.assertNotNull(matrix7);
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 10.0d + "'", double8 == 10.0d);
        org.junit.Assert.assertNotNull(matrix11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 2 + "'", int12 == 2);
        org.junit.Assert.assertNotNull(matrix14);
        org.junit.Assert.assertNotNull(matrix15);
        org.junit.Assert.assertNotNull(matrix16);
        org.junit.Assert.assertNotNull(matrixArray17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(matrix19);
        org.junit.Assert.assertNotNull(matrix21);
        org.junit.Assert.assertNotNull(matrix24);
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertNotNull(matrix28);
        org.junit.Assert.assertNotNull(matrix29);
        org.junit.Assert.assertNotNull(matrix32);
    }

    @Test
    public void test3068() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3068");
        com.operations.Matrix.Matrix matrix2 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0L, (double) (byte) 10);
        double[] doubleArray5 = new double[] { 10, 'a' };
        double[] doubleArray8 = new double[] { 10, 'a' };
        double[][] doubleArray9 = new double[][] { doubleArray5, doubleArray8 };
        com.operations.Matrix.Matrix matrix10 = new com.operations.Matrix.Matrix(doubleArray9);
        int int11 = matrix10.getCols();
        int int12 = matrix10.getCols();
        int int13 = matrix10.getCols();
        com.operations.Matrix.Matrix[] matrixArray14 = com.operations.Matrix.MatrixDecompositions.luDecomposition(matrix10);
        com.operations.Matrix.Matrix matrix15 = com.operations.Matrix.MatrixOperations.multiply(matrix2, matrix10);
        com.operations.Matrix.Matrix matrix17 = com.operations.Matrix.MatrixTransformations.rotate2D((double) (short) 100);
        boolean boolean19 = com.operations.Matrix.MatrixUtils.compare(matrix10, matrix17, (double) (byte) 0);
        double[] doubleArray22 = new double[] { 10, 'a' };
        double[] doubleArray25 = new double[] { 10, 'a' };
        double[][] doubleArray26 = new double[][] { doubleArray22, doubleArray25 };
        com.operations.Matrix.Matrix matrix27 = new com.operations.Matrix.Matrix(doubleArray26);
        com.operations.Matrix.Matrix matrix28 = new com.operations.Matrix.Matrix(doubleArray26);
        com.operations.Matrix.Matrix matrix29 = new com.operations.Matrix.Matrix(doubleArray26);
        boolean boolean31 = com.operations.Matrix.MatrixUtils.compare(matrix10, matrix29, (double) (-1));
        double[] doubleArray34 = new double[] { 10, 'a' };
        double[] doubleArray37 = new double[] { 10, 'a' };
        double[][] doubleArray38 = new double[][] { doubleArray34, doubleArray37 };
        com.operations.Matrix.Matrix matrix39 = new com.operations.Matrix.Matrix(doubleArray38);
        com.operations.Matrix.Matrix matrix40 = new com.operations.Matrix.Matrix(doubleArray38);
        boolean boolean41 = com.operations.Matrix.MatrixUtils.isSquare(matrix40);
        com.operations.Matrix.Matrix matrix42 = com.operations.Matrix.MatrixOperations.multiply(matrix29, matrix40);
        double[][] doubleArray43 = matrix40.getData();
        com.operations.Matrix.Matrix matrix44 = new com.operations.Matrix.Matrix(doubleArray43);
        com.operations.Matrix.Matrix matrix45 = new com.operations.Matrix.Matrix(doubleArray43);
        com.operations.Matrix.Matrix matrix46 = new com.operations.Matrix.Matrix(doubleArray43);
        com.operations.Matrix.Matrix matrix48 = com.operations.Matrix.MatrixOperations.scalarMultiply(matrix46, (double) 'a');
        double double49 = com.operations.Matrix.MatrixUtils.frobeniusNorm(matrix48);
        boolean boolean50 = com.operations.Matrix.MatrixUtils.isSquare(matrix48);
        org.junit.Assert.assertNotNull(matrix2);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertArrayEquals(doubleArray5, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertArrayEquals(doubleArray8, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 2 + "'", int11 == 2);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 2 + "'", int12 == 2);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 2 + "'", int13 == 2);
        org.junit.Assert.assertNotNull(matrixArray14);
        org.junit.Assert.assertNotNull(matrix15);
        org.junit.Assert.assertNotNull(matrix17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertArrayEquals(doubleArray22, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertArrayEquals(doubleArray25, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertArrayEquals(doubleArray34, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertArrayEquals(doubleArray37, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertNotNull(matrix42);
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertNotNull(matrix48);
        org.junit.Assert.assertTrue("'" + double49 + "' != '" + 13376.859197883485d + "'", double49 == 13376.859197883485d);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
    }

    @Test
    public void test3069() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3069");
        com.operations.Matrix.Matrix matrix2 = com.operations.Matrix.MatrixTransformations.scale2D(1.6135503908876414d, 33.52610922848042d);
        org.junit.Assert.assertNotNull(matrix2);
    }

    @Test
    public void test3070() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3070");
        com.operations.Matrix.Matrix matrix1 = com.operations.Matrix.MatrixTransformations.rotate2D(350.0d);
        double double2 = com.operations.Matrix.MatrixUtils.frobeniusNorm(matrix1);
        com.operations.Matrix.Matrix matrix5 = com.operations.Matrix.MatrixTransformations.scale2D((-0.1736481776669303d), 146781.22563870353d);
        com.operations.Matrix.Matrix matrix6 = com.operations.Matrix.MatrixOperations.add(matrix1, matrix5);
        org.junit.Assert.assertNotNull(matrix1);
        org.junit.Assert.assertTrue("'" + double2 + "' != '" + 1.4142135623730951d + "'", double2 == 1.4142135623730951d);
        org.junit.Assert.assertNotNull(matrix5);
        org.junit.Assert.assertNotNull(matrix6);
    }

    @Test
    public void test3071() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3071");
        com.operations.Matrix.Matrix matrix2 = com.operations.Matrix.MatrixTransformations.scale2D((double) (-1L), (double) '4');
        com.operations.Matrix.Matrix matrix3 = com.operations.Matrix.MatrixOperations.transpose(matrix2);
        double[][] doubleArray4 = matrix2.getData();
        org.junit.Assert.assertNotNull(matrix2);
        org.junit.Assert.assertNotNull(matrix3);
        org.junit.Assert.assertNotNull(doubleArray4);
    }

    @Test
    public void test3072() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3072");
        com.operations.Matrix.Matrix matrix2 = com.operations.Matrix.MatrixTransformations.project2D(0.984807753012208d, 1.969615506024416d);
        java.lang.Class<?> wildcardClass3 = matrix2.getClass();
        org.junit.Assert.assertNotNull(matrix2);
        org.junit.Assert.assertNotNull(wildcardClass3);
    }

    @Test
    public void test3073() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3073");
        double[] doubleArray2 = new double[] { 10, 'a' };
        double[] doubleArray5 = new double[] { 10, 'a' };
        double[][] doubleArray6 = new double[][] { doubleArray2, doubleArray5 };
        com.operations.Matrix.Matrix matrix7 = new com.operations.Matrix.Matrix(doubleArray6);
        com.operations.Matrix.Matrix matrix8 = new com.operations.Matrix.Matrix(doubleArray6);
        boolean boolean9 = com.operations.Matrix.MatrixUtils.isSquare(matrix8);
        double[] doubleArray12 = new double[] { 10, 'a' };
        double[] doubleArray15 = new double[] { 10, 'a' };
        double[][] doubleArray16 = new double[][] { doubleArray12, doubleArray15 };
        com.operations.Matrix.Matrix matrix17 = new com.operations.Matrix.Matrix(doubleArray16);
        int int18 = matrix17.getCols();
        int int19 = matrix17.getCols();
        matrix17.print();
        double[] doubleArray23 = new double[] { 10, 'a' };
        double[] doubleArray26 = new double[] { 10, 'a' };
        double[][] doubleArray27 = new double[][] { doubleArray23, doubleArray26 };
        com.operations.Matrix.Matrix matrix28 = new com.operations.Matrix.Matrix(doubleArray27);
        boolean boolean30 = com.operations.Matrix.MatrixUtils.compare(matrix17, matrix28, (double) (-1));
        com.operations.Matrix.Matrix matrix31 = com.operations.Matrix.MatrixOperations.subtract(matrix8, matrix28);
        com.operations.Matrix.Matrix matrix33 = com.operations.Matrix.MatrixOperations.scalarMultiply(matrix8, (double) 0.0f);
        int int34 = matrix8.getCols();
        double[] doubleArray37 = new double[] { 10, 'a' };
        double[] doubleArray40 = new double[] { 10, 'a' };
        double[][] doubleArray41 = new double[][] { doubleArray37, doubleArray40 };
        com.operations.Matrix.Matrix matrix42 = new com.operations.Matrix.Matrix(doubleArray41);
        com.operations.Matrix.Matrix matrix43 = new com.operations.Matrix.Matrix(doubleArray41);
        com.operations.Matrix.Matrix matrix44 = new com.operations.Matrix.Matrix(doubleArray41);
        com.operations.Matrix.Matrix matrix45 = com.operations.Matrix.MatrixOperations.multiply(matrix8, matrix44);
        com.operations.Matrix.Matrix matrix46 = com.operations.Matrix.MatrixDecompositions.choleskyDecomposition(matrix44);
        com.operations.Matrix.Matrix matrix52 = com.operations.Matrix.MatrixUtils.generateRandomMatrix(1, (int) ' ', (int) (short) 0, (int) (byte) -1, (long) ' ');
        boolean boolean54 = com.operations.Matrix.MatrixUtils.compare(matrix44, matrix52, 391.8840992892044d);
        double[][] doubleArray55 = matrix52.getData();
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertArrayEquals(doubleArray2, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertArrayEquals(doubleArray5, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertArrayEquals(doubleArray12, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertArrayEquals(doubleArray15, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 2 + "'", int18 == 2);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 2 + "'", int19 == 2);
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertArrayEquals(doubleArray23, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertArrayEquals(doubleArray26, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(matrix31);
        org.junit.Assert.assertNotNull(matrix33);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 2 + "'", int34 == 2);
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertArrayEquals(doubleArray37, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertArrayEquals(doubleArray40, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertNotNull(matrix45);
        org.junit.Assert.assertNotNull(matrix46);
        org.junit.Assert.assertNotNull(matrix52);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(doubleArray55);
    }

    @Test
    public void test3074() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3074");
        com.operations.Matrix.Matrix matrix2 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0L, (double) (byte) 10);
        double[] doubleArray5 = new double[] { 10, 'a' };
        double[] doubleArray8 = new double[] { 10, 'a' };
        double[][] doubleArray9 = new double[][] { doubleArray5, doubleArray8 };
        com.operations.Matrix.Matrix matrix10 = new com.operations.Matrix.Matrix(doubleArray9);
        int int11 = matrix10.getCols();
        int int12 = matrix10.getCols();
        int int13 = matrix10.getCols();
        com.operations.Matrix.Matrix[] matrixArray14 = com.operations.Matrix.MatrixDecompositions.luDecomposition(matrix10);
        com.operations.Matrix.Matrix matrix15 = com.operations.Matrix.MatrixOperations.multiply(matrix2, matrix10);
        com.operations.Matrix.Matrix matrix17 = com.operations.Matrix.MatrixTransformations.rotate2D((double) (short) 100);
        boolean boolean19 = com.operations.Matrix.MatrixUtils.compare(matrix10, matrix17, (double) (byte) 0);
        double[] doubleArray22 = new double[] { 10, 'a' };
        double[] doubleArray25 = new double[] { 10, 'a' };
        double[][] doubleArray26 = new double[][] { doubleArray22, doubleArray25 };
        com.operations.Matrix.Matrix matrix27 = new com.operations.Matrix.Matrix(doubleArray26);
        com.operations.Matrix.Matrix matrix28 = new com.operations.Matrix.Matrix(doubleArray26);
        com.operations.Matrix.Matrix matrix29 = new com.operations.Matrix.Matrix(doubleArray26);
        boolean boolean31 = com.operations.Matrix.MatrixUtils.compare(matrix10, matrix29, (double) (-1));
        double[] doubleArray34 = new double[] { 10, 'a' };
        double[] doubleArray37 = new double[] { 10, 'a' };
        double[][] doubleArray38 = new double[][] { doubleArray34, doubleArray37 };
        com.operations.Matrix.Matrix matrix39 = new com.operations.Matrix.Matrix(doubleArray38);
        com.operations.Matrix.Matrix matrix40 = new com.operations.Matrix.Matrix(doubleArray38);
        boolean boolean41 = com.operations.Matrix.MatrixUtils.isSquare(matrix40);
        com.operations.Matrix.Matrix matrix42 = com.operations.Matrix.MatrixOperations.multiply(matrix29, matrix40);
        double[][] doubleArray43 = matrix40.getData();
        com.operations.Matrix.Matrix matrix44 = new com.operations.Matrix.Matrix(doubleArray43);
        com.operations.Matrix.Matrix matrix45 = com.operations.Matrix.MatrixOperations.transpose(matrix44);
        com.operations.Matrix.Matrix matrix48 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0L, (double) (byte) 10);
        double[] doubleArray51 = new double[] { 10, 'a' };
        double[] doubleArray54 = new double[] { 10, 'a' };
        double[][] doubleArray55 = new double[][] { doubleArray51, doubleArray54 };
        com.operations.Matrix.Matrix matrix56 = new com.operations.Matrix.Matrix(doubleArray55);
        int int57 = matrix56.getCols();
        int int58 = matrix56.getCols();
        int int59 = matrix56.getCols();
        com.operations.Matrix.Matrix[] matrixArray60 = com.operations.Matrix.MatrixDecompositions.luDecomposition(matrix56);
        com.operations.Matrix.Matrix matrix61 = com.operations.Matrix.MatrixOperations.multiply(matrix48, matrix56);
        com.operations.Matrix.Matrix matrix63 = com.operations.Matrix.MatrixTransformations.rotate2D((double) (short) 100);
        boolean boolean65 = com.operations.Matrix.MatrixUtils.compare(matrix56, matrix63, (double) (byte) 0);
        com.operations.Matrix.Matrix[] matrixArray66 = com.operations.Matrix.MatrixDecompositions.luDecomposition(matrix56);
        com.operations.Matrix.Matrix matrix67 = com.operations.Matrix.MatrixOperations.transpose(matrix56);
        com.operations.Matrix.Matrix matrix70 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0L, (double) (byte) 10);
        int int71 = matrix70.getRows();
        com.operations.Matrix.Matrix matrix74 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0L, (double) (byte) 10);
        int int75 = matrix74.getRows();
        com.operations.Matrix.Matrix matrix77 = com.operations.Matrix.MatrixOperations.scalarMultiply(matrix74, (double) 2);
        com.operations.Matrix.Matrix matrix78 = com.operations.Matrix.MatrixOperations.subtract(matrix70, matrix74);
        boolean boolean80 = com.operations.Matrix.MatrixUtils.compare(matrix56, matrix70, (double) ' ');
        com.operations.Matrix.Matrix matrix82 = com.operations.Matrix.MatrixOperations.scalarMultiply(matrix56, 137.90576492663388d);
        double[] doubleArray85 = new double[] { 10, 'a' };
        double[] doubleArray88 = new double[] { 10, 'a' };
        double[][] doubleArray89 = new double[][] { doubleArray85, doubleArray88 };
        com.operations.Matrix.Matrix matrix90 = new com.operations.Matrix.Matrix(doubleArray89);
        com.operations.Matrix.Matrix matrix91 = new com.operations.Matrix.Matrix(doubleArray89);
        boolean boolean92 = com.operations.Matrix.MatrixUtils.isSquare(matrix91);
        com.operations.Matrix.Matrix[] matrixArray93 = com.operations.Matrix.MatrixDecompositions.luDecomposition(matrix91);
        double double94 = com.operations.Matrix.MatrixUtils.frobeniusNorm(matrix91);
        int int95 = matrix91.getRows();
        com.operations.Matrix.Matrix matrix96 = com.operations.Matrix.MatrixOperations.subtract(matrix56, matrix91);
        boolean boolean98 = com.operations.Matrix.MatrixUtils.compare(matrix45, matrix91, 365.68429006453096d);
        org.junit.Assert.assertNotNull(matrix2);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertArrayEquals(doubleArray5, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertArrayEquals(doubleArray8, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 2 + "'", int11 == 2);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 2 + "'", int12 == 2);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 2 + "'", int13 == 2);
        org.junit.Assert.assertNotNull(matrixArray14);
        org.junit.Assert.assertNotNull(matrix15);
        org.junit.Assert.assertNotNull(matrix17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertArrayEquals(doubleArray22, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertArrayEquals(doubleArray25, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertArrayEquals(doubleArray34, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertArrayEquals(doubleArray37, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertNotNull(matrix42);
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertNotNull(matrix45);
        org.junit.Assert.assertNotNull(matrix48);
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertArrayEquals(doubleArray51, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray54);
        org.junit.Assert.assertArrayEquals(doubleArray54, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 2 + "'", int57 == 2);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 2 + "'", int58 == 2);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 2 + "'", int59 == 2);
        org.junit.Assert.assertNotNull(matrixArray60);
        org.junit.Assert.assertNotNull(matrix61);
        org.junit.Assert.assertNotNull(matrix63);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertNotNull(matrixArray66);
        org.junit.Assert.assertNotNull(matrix67);
        org.junit.Assert.assertNotNull(matrix70);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 2 + "'", int71 == 2);
        org.junit.Assert.assertNotNull(matrix74);
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + 2 + "'", int75 == 2);
        org.junit.Assert.assertNotNull(matrix77);
        org.junit.Assert.assertNotNull(matrix78);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertNotNull(matrix82);
        org.junit.Assert.assertNotNull(doubleArray85);
        org.junit.Assert.assertArrayEquals(doubleArray85, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray88);
        org.junit.Assert.assertArrayEquals(doubleArray88, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray89);
        org.junit.Assert.assertTrue("'" + boolean92 + "' != '" + true + "'", boolean92 == true);
        org.junit.Assert.assertNotNull(matrixArray93);
        org.junit.Assert.assertTrue("'" + double94 + "' != '" + 137.90576492663388d + "'", double94 == 137.90576492663388d);
        org.junit.Assert.assertTrue("'" + int95 + "' != '" + 2 + "'", int95 == 2);
        org.junit.Assert.assertNotNull(matrix96);
        org.junit.Assert.assertTrue("'" + boolean98 + "' != '" + true + "'", boolean98 == true);
    }

    @Test
    public void test3075() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3075");
        com.operations.Matrix.Matrix matrix2 = new com.operations.Matrix.Matrix(100, 52);
        com.operations.Matrix.Matrix matrix3 = com.operations.Matrix.MatrixOperations.transpose(matrix2);
        org.junit.Assert.assertNotNull(matrix3);
    }

    @Test
    public void test3076() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3076");
        com.operations.Matrix.Matrix matrix2 = com.operations.Matrix.MatrixTransformations.project2D((double) (byte) 100, 32.0d);
        boolean boolean3 = com.operations.Matrix.MatrixUtils.isSymmetric(matrix2);
        matrix2.print();
        com.operations.Matrix.Matrix matrix5 = com.operations.Matrix.MatrixOperations.transpose(matrix2);
        com.operations.Matrix.Matrix matrix6 = com.operations.Matrix.MatrixDecompositions.choleskyDecomposition(matrix2);
        com.operations.Matrix.Matrix matrix7 = com.operations.Matrix.MatrixOperations.transpose(matrix6);
        double double8 = com.operations.Matrix.MatrixUtils.frobeniusNorm(matrix6);
        org.junit.Assert.assertNotNull(matrix2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNotNull(matrix5);
        org.junit.Assert.assertNotNull(matrix6);
        org.junit.Assert.assertNotNull(matrix7);
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 11.489125293076057d + "'", double8 == 11.489125293076057d);
    }

    @Test
    public void test3077() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3077");
        double[] doubleArray2 = new double[] { 10, 'a' };
        double[] doubleArray5 = new double[] { 10, 'a' };
        double[][] doubleArray6 = new double[][] { doubleArray2, doubleArray5 };
        com.operations.Matrix.Matrix matrix7 = new com.operations.Matrix.Matrix(doubleArray6);
        com.operations.Matrix.Matrix matrix8 = new com.operations.Matrix.Matrix(doubleArray6);
        boolean boolean9 = com.operations.Matrix.MatrixUtils.isSquare(matrix8);
        double[] doubleArray12 = new double[] { 10, 'a' };
        double[] doubleArray15 = new double[] { 10, 'a' };
        double[][] doubleArray16 = new double[][] { doubleArray12, doubleArray15 };
        com.operations.Matrix.Matrix matrix17 = new com.operations.Matrix.Matrix(doubleArray16);
        int int18 = matrix17.getCols();
        int int19 = matrix17.getCols();
        matrix17.print();
        double[] doubleArray23 = new double[] { 10, 'a' };
        double[] doubleArray26 = new double[] { 10, 'a' };
        double[][] doubleArray27 = new double[][] { doubleArray23, doubleArray26 };
        com.operations.Matrix.Matrix matrix28 = new com.operations.Matrix.Matrix(doubleArray27);
        boolean boolean30 = com.operations.Matrix.MatrixUtils.compare(matrix17, matrix28, (double) (-1));
        com.operations.Matrix.Matrix matrix31 = com.operations.Matrix.MatrixOperations.subtract(matrix8, matrix28);
        com.operations.Matrix.Matrix[] matrixArray32 = com.operations.Matrix.MatrixDecompositions.luDecomposition(matrix31);
        double[][] doubleArray33 = matrix31.getData();
        com.operations.Matrix.Matrix matrix34 = new com.operations.Matrix.Matrix(doubleArray33);
        com.operations.Matrix.Matrix matrix35 = new com.operations.Matrix.Matrix(doubleArray33);
        boolean boolean36 = com.operations.Matrix.MatrixUtils.isSquare(matrix35);
        boolean boolean37 = com.operations.Matrix.MatrixUtils.isSymmetric(matrix35);
        boolean boolean38 = com.operations.Matrix.MatrixUtils.isSymmetric(matrix35);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertArrayEquals(doubleArray2, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertArrayEquals(doubleArray5, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertArrayEquals(doubleArray12, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertArrayEquals(doubleArray15, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 2 + "'", int18 == 2);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 2 + "'", int19 == 2);
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertArrayEquals(doubleArray23, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertArrayEquals(doubleArray26, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(matrix31);
        org.junit.Assert.assertNotNull(matrixArray32);
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
    }

    @Test
    public void test3078() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3078");
        com.operations.Matrix.Matrix matrix5 = com.operations.Matrix.MatrixUtils.generateRandomMatrix((int) (short) 100, 35, (int) (short) -1, (int) (byte) 100, (long) '#');
        org.junit.Assert.assertNotNull(matrix5);
    }

    @Test
    public void test3079() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3079");
        com.operations.Matrix.Matrix matrix2 = new com.operations.Matrix.Matrix((int) '#', 97);
    }

    @Test
    public void test3080() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3080");
        com.operations.Matrix.Matrix matrix2 = com.operations.Matrix.MatrixTransformations.project2D(3500.0d, 0.9998476951563913d);
        boolean boolean3 = com.operations.Matrix.MatrixUtils.isSymmetric(matrix2);
        com.operations.Matrix.Matrix matrix5 = com.operations.Matrix.MatrixOperations.scalarMultiply(matrix2, (double) 1);
        org.junit.Assert.assertNotNull(matrix2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNotNull(matrix5);
    }

    @Test
    public void test3081() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3081");
        com.operations.Matrix.Matrix matrix1 = com.operations.Matrix.MatrixTransformations.rotate2D((double) '4');
        double[] doubleArray4 = new double[] { 10, 'a' };
        double[] doubleArray7 = new double[] { 10, 'a' };
        double[][] doubleArray8 = new double[][] { doubleArray4, doubleArray7 };
        com.operations.Matrix.Matrix matrix9 = new com.operations.Matrix.Matrix(doubleArray8);
        com.operations.Matrix.Matrix matrix10 = new com.operations.Matrix.Matrix(doubleArray8);
        com.operations.Matrix.Matrix matrix12 = com.operations.Matrix.MatrixTransformations.rotate2D((double) (short) 100);
        double[] doubleArray15 = new double[] { 137.90576492663388d, (byte) -1 };
        double[] doubleArray16 = com.operations.Matrix.MatrixSolver.solveGaussian(matrix12, doubleArray15);
        com.operations.Matrix.Matrix matrix17 = com.operations.Matrix.MatrixOperations.add(matrix10, matrix12);
        boolean boolean18 = com.operations.Matrix.MatrixUtils.isSymmetric(matrix17);
        boolean boolean20 = com.operations.Matrix.MatrixUtils.compare(matrix1, matrix17, 364.0054944640259d);
        com.operations.Matrix.Matrix matrix23 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0L, (double) (byte) 10);
        int int24 = matrix23.getRows();
        com.operations.Matrix.Matrix matrix26 = com.operations.Matrix.MatrixOperations.scalarMultiply(matrix23, (double) 2);
        matrix23.print();
        com.operations.Matrix.Matrix matrix28 = com.operations.Matrix.MatrixOperations.multiply(matrix17, matrix23);
        com.operations.Matrix.Matrix matrix29 = com.operations.Matrix.MatrixOperations.transpose(matrix28);
        boolean boolean30 = com.operations.Matrix.MatrixUtils.isSquare(matrix28);
        org.junit.Assert.assertNotNull(matrix1);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertArrayEquals(doubleArray4, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertArrayEquals(doubleArray7, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertNotNull(matrix12);
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertArrayEquals(doubleArray15, new double[] { 137.90576492663388d, (-1.0d) }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertArrayEquals(doubleArray16, new double[] { (-24.931892522286255d), (-135.63701830716116d) }, 1.0E-15);
        org.junit.Assert.assertNotNull(matrix17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertNotNull(matrix23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 2 + "'", int24 == 2);
        org.junit.Assert.assertNotNull(matrix26);
        org.junit.Assert.assertNotNull(matrix28);
        org.junit.Assert.assertNotNull(matrix29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
    }

    @Test
    public void test3082() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3082");
        com.operations.Matrix.Matrix matrix2 = com.operations.Matrix.MatrixTransformations.project2D(0.0d, (double) 0);
        com.operations.Matrix.Matrix[] matrixArray3 = com.operations.Matrix.MatrixDecompositions.luDecomposition(matrix2);
        com.operations.Matrix.Matrix matrix6 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0L, (double) (byte) 10);
        int int7 = matrix6.getRows();
        com.operations.Matrix.Matrix matrix9 = com.operations.Matrix.MatrixOperations.scalarMultiply(matrix6, (double) 2);
        double double10 = com.operations.Matrix.MatrixUtils.frobeniusNorm(matrix6);
        int int11 = matrix6.getRows();
        com.operations.Matrix.Matrix matrix12 = com.operations.Matrix.MatrixOperations.transpose(matrix6);
        com.operations.Matrix.Matrix matrix13 = com.operations.Matrix.MatrixOperations.multiply(matrix2, matrix12);
        double[] doubleArray16 = new double[] { 10, 'a' };
        double[] doubleArray19 = new double[] { 10, 'a' };
        double[][] doubleArray20 = new double[][] { doubleArray16, doubleArray19 };
        com.operations.Matrix.Matrix matrix21 = new com.operations.Matrix.Matrix(doubleArray20);
        com.operations.Matrix.Matrix matrix22 = new com.operations.Matrix.Matrix(doubleArray20);
        com.operations.Matrix.Matrix[] matrixArray23 = com.operations.Matrix.MatrixDecompositions.luDecomposition(matrix22);
        com.operations.Matrix.Matrix matrix26 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0, (double) 100L);
        com.operations.Matrix.Matrix matrix27 = com.operations.Matrix.MatrixOperations.subtract(matrix22, matrix26);
        double[][] doubleArray28 = matrix27.getData();
        com.operations.Matrix.Matrix matrix29 = new com.operations.Matrix.Matrix(doubleArray28);
        boolean boolean31 = com.operations.Matrix.MatrixUtils.compare(matrix12, matrix29, 32.0d);
        com.operations.Matrix.Matrix matrix34 = com.operations.Matrix.MatrixTransformations.project2D(0.0d, (double) 0);
        double[][] doubleArray35 = matrix34.getData();
        com.operations.Matrix.Matrix matrix38 = com.operations.Matrix.MatrixTransformations.project2D((double) ' ', 0.0d);
        double[] doubleArray41 = new double[] { 10, 'a' };
        double[] doubleArray44 = new double[] { 10, 'a' };
        double[][] doubleArray45 = new double[][] { doubleArray41, doubleArray44 };
        com.operations.Matrix.Matrix matrix46 = new com.operations.Matrix.Matrix(doubleArray45);
        int int47 = matrix46.getCols();
        boolean boolean48 = com.operations.Matrix.MatrixUtils.isSquare(matrix46);
        com.operations.Matrix.Matrix matrix49 = com.operations.Matrix.MatrixOperations.transpose(matrix46);
        int int50 = matrix49.getRows();
        com.operations.Matrix.Matrix matrix53 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0L, (double) (byte) 10);
        double[] doubleArray56 = new double[] { 10, 'a' };
        double[] doubleArray59 = new double[] { 10, 'a' };
        double[][] doubleArray60 = new double[][] { doubleArray56, doubleArray59 };
        com.operations.Matrix.Matrix matrix61 = new com.operations.Matrix.Matrix(doubleArray60);
        int int62 = matrix61.getCols();
        int int63 = matrix61.getCols();
        int int64 = matrix61.getCols();
        com.operations.Matrix.Matrix[] matrixArray65 = com.operations.Matrix.MatrixDecompositions.luDecomposition(matrix61);
        com.operations.Matrix.Matrix matrix66 = com.operations.Matrix.MatrixOperations.multiply(matrix53, matrix61);
        com.operations.Matrix.Matrix matrix68 = com.operations.Matrix.MatrixTransformations.rotate2D((double) (short) 100);
        boolean boolean70 = com.operations.Matrix.MatrixUtils.compare(matrix61, matrix68, (double) (byte) 0);
        com.operations.Matrix.Matrix matrix71 = com.operations.Matrix.MatrixOperations.multiply(matrix49, matrix61);
        com.operations.Matrix.Matrix matrix72 = com.operations.Matrix.MatrixOperations.add(matrix38, matrix61);
        com.operations.Matrix.Matrix matrix73 = com.operations.Matrix.MatrixOperations.transpose(matrix38);
        boolean boolean75 = com.operations.Matrix.MatrixUtils.compare(matrix34, matrix38, (double) 0L);
        com.operations.Matrix.Matrix matrix76 = com.operations.Matrix.MatrixOperations.transpose(matrix38);
        com.operations.Matrix.Matrix matrix77 = com.operations.Matrix.MatrixOperations.add(matrix12, matrix76);
        boolean boolean78 = com.operations.Matrix.MatrixUtils.isSquare(matrix77);
        boolean boolean79 = com.operations.Matrix.MatrixUtils.isSquare(matrix77);
        org.junit.Assert.assertNotNull(matrix2);
        org.junit.Assert.assertNotNull(matrixArray3);
        org.junit.Assert.assertNotNull(matrix6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 2 + "'", int7 == 2);
        org.junit.Assert.assertNotNull(matrix9);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 10.0d + "'", double10 == 10.0d);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 2 + "'", int11 == 2);
        org.junit.Assert.assertNotNull(matrix12);
        org.junit.Assert.assertNotNull(matrix13);
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertArrayEquals(doubleArray16, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertArrayEquals(doubleArray19, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertNotNull(matrixArray23);
        org.junit.Assert.assertNotNull(matrix26);
        org.junit.Assert.assertNotNull(matrix27);
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(matrix34);
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertNotNull(matrix38);
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertArrayEquals(doubleArray41, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertArrayEquals(doubleArray44, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 2 + "'", int47 == 2);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
        org.junit.Assert.assertNotNull(matrix49);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 2 + "'", int50 == 2);
        org.junit.Assert.assertNotNull(matrix53);
        org.junit.Assert.assertNotNull(doubleArray56);
        org.junit.Assert.assertArrayEquals(doubleArray56, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray59);
        org.junit.Assert.assertArrayEquals(doubleArray59, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray60);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 2 + "'", int62 == 2);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 2 + "'", int63 == 2);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 2 + "'", int64 == 2);
        org.junit.Assert.assertNotNull(matrixArray65);
        org.junit.Assert.assertNotNull(matrix66);
        org.junit.Assert.assertNotNull(matrix68);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertNotNull(matrix71);
        org.junit.Assert.assertNotNull(matrix72);
        org.junit.Assert.assertNotNull(matrix73);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertNotNull(matrix76);
        org.junit.Assert.assertNotNull(matrix77);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + true + "'", boolean78 == true);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + true + "'", boolean79 == true);
    }

    @Test
    public void test3083() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3083");
        com.operations.Matrix.Matrix matrix4 = com.operations.Matrix.MatrixUtils.generateRandomMatrix(100, 0, (int) ' ', (int) (byte) 1);
        boolean boolean5 = com.operations.Matrix.MatrixUtils.isSymmetric(matrix4);
        // The following exception was thrown during execution in test generation
        try {
            com.operations.Matrix.Matrix matrix6 = com.operations.Matrix.MatrixOperations.transpose(matrix4);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: Index 0 out of bounds for length 0");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(matrix4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
    }

    @Test
    public void test3084() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3084");
        com.operations.Matrix.Matrix matrix2 = com.operations.Matrix.MatrixTransformations.scale2D((double) (byte) 1, 1363.6076983299943d);
        boolean boolean3 = com.operations.Matrix.MatrixUtils.isSymmetric(matrix2);
        org.junit.Assert.assertNotNull(matrix2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
    }

    @Test
    public void test3085() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3085");
        com.operations.Matrix.Matrix matrix2 = com.operations.Matrix.MatrixTransformations.project2D((double) ' ', 0.0d);
        int int3 = matrix2.getCols();
        boolean boolean4 = com.operations.Matrix.MatrixUtils.isSquare(matrix2);
        boolean boolean5 = com.operations.Matrix.MatrixUtils.isSquare(matrix2);
        com.operations.Matrix.Matrix matrix8 = com.operations.Matrix.MatrixTransformations.project2D(10.0d, 1.4142135623730951d);
        int int9 = matrix8.getRows();
        com.operations.Matrix.Matrix matrix12 = com.operations.Matrix.MatrixTransformations.project2D((double) (short) 100, 35.0d);
        com.operations.Matrix.Matrix matrix14 = com.operations.Matrix.MatrixTransformations.rotate2D((double) (-1L));
        com.operations.Matrix.Matrix matrix16 = com.operations.Matrix.MatrixTransformations.rotate2D((double) (short) 100);
        double[] doubleArray19 = new double[] { 137.90576492663388d, (byte) -1 };
        double[] doubleArray20 = com.operations.Matrix.MatrixSolver.solveGaussian(matrix16, doubleArray19);
        double[] doubleArray21 = com.operations.Matrix.MatrixSolver.solveGaussian(matrix14, doubleArray19);
        double[] doubleArray22 = com.operations.Matrix.MatrixSolver.solveGaussian(matrix12, doubleArray21);
        double[] doubleArray23 = com.operations.Matrix.MatrixSolver.solveGaussian(matrix8, doubleArray21);
        // The following exception was thrown during execution in test generation
        try {
            double[] doubleArray24 = com.operations.Matrix.MatrixSolver.solveGaussian(matrix2, doubleArray23);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Matrix is singular or nearly singular.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(matrix2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 2 + "'", int3 == 2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNotNull(matrix8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 2 + "'", int9 == 2);
        org.junit.Assert.assertNotNull(matrix12);
        org.junit.Assert.assertNotNull(matrix14);
        org.junit.Assert.assertNotNull(matrix16);
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertArrayEquals(doubleArray19, new double[] { 137.90576492663388d, (-1.0d) }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertArrayEquals(doubleArray20, new double[] { (-24.931892522286255d), (-135.63701830716116d) }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertArrayEquals(doubleArray21, new double[] { 137.90221361711127d, 1.4069397643877004d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertArrayEquals(doubleArray22, new double[] { 1.3790221361711128d, 0.04019827898250573d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertArrayEquals(doubleArray23, new double[] { 13.790221361711128d, 0.9948566481195463d }, 1.0E-15);
    }

    @Test
    public void test3086() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3086");
        com.operations.Matrix.Matrix matrix5 = com.operations.Matrix.MatrixUtils.generateRandomMatrix((int) ' ', 0, (int) (short) 10, (int) (byte) 100, (long) 2);
        org.junit.Assert.assertNotNull(matrix5);
    }

    @Test
    public void test3087() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3087");
        com.operations.Matrix.Matrix matrix1 = com.operations.Matrix.MatrixTransformations.rotate2D(1950.2820308868152d);
        org.junit.Assert.assertNotNull(matrix1);
    }

    @Test
    public void test3088() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3088");
        com.operations.Matrix.Matrix matrix5 = com.operations.Matrix.MatrixUtils.generateRandomMatrix((int) 'a', (int) (short) 1, (int) (byte) 100, (int) (short) 10, (long) (short) 100);
        double[] doubleArray7 = new double[] { 18.14229652832025d };
        // The following exception was thrown during execution in test generation
        try {
            double[] doubleArray8 = com.operations.Matrix.MatrixSolver.solveGaussian(matrix5, doubleArray7);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Matrix must be square to solve equations.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(matrix5);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertArrayEquals(doubleArray7, new double[] { 18.14229652832025d }, 1.0E-15);
    }

    @Test
    public void test3089() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3089");
        com.operations.Matrix.Matrix matrix1 = com.operations.Matrix.MatrixTransformations.rotate2D((double) 1.0f);
        com.operations.Matrix.Matrix matrix4 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0L, (double) (byte) 10);
        int int5 = matrix4.getRows();
        com.operations.Matrix.Matrix matrix7 = com.operations.Matrix.MatrixOperations.scalarMultiply(matrix4, (double) 2);
        double double8 = com.operations.Matrix.MatrixUtils.frobeniusNorm(matrix4);
        com.operations.Matrix.Matrix matrix11 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0L, (double) (byte) 10);
        int int12 = matrix11.getRows();
        com.operations.Matrix.Matrix matrix14 = com.operations.Matrix.MatrixOperations.scalarMultiply(matrix11, (double) 2);
        com.operations.Matrix.Matrix matrix15 = com.operations.Matrix.MatrixOperations.subtract(matrix4, matrix14);
        com.operations.Matrix.Matrix matrix16 = com.operations.Matrix.MatrixOperations.add(matrix1, matrix14);
        com.operations.Matrix.Matrix[] matrixArray17 = com.operations.Matrix.MatrixDecompositions.luDecomposition(matrix14);
        boolean boolean18 = com.operations.Matrix.MatrixUtils.isSquare(matrix14);
        com.operations.Matrix.Matrix matrix19 = com.operations.Matrix.MatrixOperations.transpose(matrix14);
        com.operations.Matrix.Matrix matrix21 = com.operations.Matrix.MatrixOperations.scalarMultiply(matrix14, (double) ' ');
        com.operations.Matrix.Matrix matrix24 = com.operations.Matrix.MatrixTransformations.project2D(0.0d, (double) 0);
        double[][] doubleArray25 = matrix24.getData();
        com.operations.Matrix.Matrix matrix26 = new com.operations.Matrix.Matrix(doubleArray25);
        com.operations.Matrix.Matrix matrix27 = new com.operations.Matrix.Matrix(doubleArray25);
        com.operations.Matrix.Matrix matrix28 = com.operations.Matrix.MatrixOperations.multiply(matrix14, matrix27);
        com.operations.Matrix.Matrix matrix29 = com.operations.Matrix.MatrixOperations.transpose(matrix14);
        com.operations.Matrix.Matrix matrix32 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0L, (double) (byte) 10);
        int int33 = matrix32.getRows();
        com.operations.Matrix.Matrix matrix36 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0L, (double) (byte) 10);
        int int37 = matrix36.getRows();
        com.operations.Matrix.Matrix matrix39 = com.operations.Matrix.MatrixOperations.scalarMultiply(matrix36, (double) 2);
        com.operations.Matrix.Matrix matrix40 = com.operations.Matrix.MatrixOperations.subtract(matrix32, matrix36);
        com.operations.Matrix.Matrix matrix43 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0L, (double) (byte) 10);
        int int44 = matrix43.getRows();
        com.operations.Matrix.Matrix matrix50 = com.operations.Matrix.MatrixUtils.generateRandomMatrix(100, (int) (byte) 1, (int) '#', (int) '#', 1L);
        boolean boolean52 = com.operations.Matrix.MatrixUtils.compare(matrix43, matrix50, (double) 1.0f);
        com.operations.Matrix.Matrix matrix54 = com.operations.Matrix.MatrixOperations.scalarMultiply(matrix43, (double) 1L);
        boolean boolean56 = com.operations.Matrix.MatrixUtils.compare(matrix40, matrix54, 0.0d);
        boolean boolean58 = com.operations.Matrix.MatrixUtils.compare(matrix29, matrix54, (-1.0d));
        double[][] doubleArray59 = matrix54.getData();
        org.junit.Assert.assertNotNull(matrix1);
        org.junit.Assert.assertNotNull(matrix4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 2 + "'", int5 == 2);
        org.junit.Assert.assertNotNull(matrix7);
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 10.0d + "'", double8 == 10.0d);
        org.junit.Assert.assertNotNull(matrix11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 2 + "'", int12 == 2);
        org.junit.Assert.assertNotNull(matrix14);
        org.junit.Assert.assertNotNull(matrix15);
        org.junit.Assert.assertNotNull(matrix16);
        org.junit.Assert.assertNotNull(matrixArray17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(matrix19);
        org.junit.Assert.assertNotNull(matrix21);
        org.junit.Assert.assertNotNull(matrix24);
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertNotNull(matrix28);
        org.junit.Assert.assertNotNull(matrix29);
        org.junit.Assert.assertNotNull(matrix32);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 2 + "'", int33 == 2);
        org.junit.Assert.assertNotNull(matrix36);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 2 + "'", int37 == 2);
        org.junit.Assert.assertNotNull(matrix39);
        org.junit.Assert.assertNotNull(matrix40);
        org.junit.Assert.assertNotNull(matrix43);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 2 + "'", int44 == 2);
        org.junit.Assert.assertNotNull(matrix50);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(matrix54);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(doubleArray59);
    }

    @Test
    public void test3090() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3090");
        com.operations.Matrix.Matrix matrix1 = com.operations.Matrix.MatrixTransformations.rotate2D((double) '4');
        double[] doubleArray4 = new double[] { 10, 'a' };
        double[] doubleArray7 = new double[] { 10, 'a' };
        double[][] doubleArray8 = new double[][] { doubleArray4, doubleArray7 };
        com.operations.Matrix.Matrix matrix9 = new com.operations.Matrix.Matrix(doubleArray8);
        com.operations.Matrix.Matrix matrix10 = new com.operations.Matrix.Matrix(doubleArray8);
        com.operations.Matrix.Matrix matrix12 = com.operations.Matrix.MatrixTransformations.rotate2D((double) (short) 100);
        double[] doubleArray15 = new double[] { 137.90576492663388d, (byte) -1 };
        double[] doubleArray16 = com.operations.Matrix.MatrixSolver.solveGaussian(matrix12, doubleArray15);
        com.operations.Matrix.Matrix matrix17 = com.operations.Matrix.MatrixOperations.add(matrix10, matrix12);
        boolean boolean18 = com.operations.Matrix.MatrixUtils.isSymmetric(matrix17);
        boolean boolean20 = com.operations.Matrix.MatrixUtils.compare(matrix1, matrix17, 364.0054944640259d);
        com.operations.Matrix.Matrix[] matrixArray21 = com.operations.Matrix.MatrixDecompositions.luDecomposition(matrix17);
        com.operations.Matrix.Matrix matrix24 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0.0f, 350.0d);
        com.operations.Matrix.Matrix matrix27 = com.operations.Matrix.MatrixTransformations.project2D(0.0d, (double) 0);
        com.operations.Matrix.Matrix[] matrixArray28 = com.operations.Matrix.MatrixDecompositions.luDecomposition(matrix27);
        com.operations.Matrix.Matrix matrix31 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0L, (double) (byte) 10);
        int int32 = matrix31.getRows();
        com.operations.Matrix.Matrix matrix34 = com.operations.Matrix.MatrixOperations.scalarMultiply(matrix31, (double) 2);
        double double35 = com.operations.Matrix.MatrixUtils.frobeniusNorm(matrix31);
        int int36 = matrix31.getRows();
        com.operations.Matrix.Matrix matrix37 = com.operations.Matrix.MatrixOperations.transpose(matrix31);
        com.operations.Matrix.Matrix matrix38 = com.operations.Matrix.MatrixOperations.multiply(matrix27, matrix37);
        com.operations.Matrix.Matrix matrix39 = com.operations.Matrix.MatrixOperations.multiply(matrix24, matrix37);
        double[][] doubleArray40 = matrix39.getData();
        com.operations.Matrix.Matrix matrix41 = new com.operations.Matrix.Matrix(doubleArray40);
        com.operations.Matrix.Matrix matrix42 = new com.operations.Matrix.Matrix(doubleArray40);
        com.operations.Matrix.Matrix matrix43 = com.operations.Matrix.MatrixOperations.subtract(matrix17, matrix42);
        // The following exception was thrown during execution in test generation
        try {
            matrix17.setValue(52, (int) '4', (double) (short) 10);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: Index 52 out of bounds for length 2");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(matrix1);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertArrayEquals(doubleArray4, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertArrayEquals(doubleArray7, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertNotNull(matrix12);
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertArrayEquals(doubleArray15, new double[] { 137.90576492663388d, (-1.0d) }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertArrayEquals(doubleArray16, new double[] { (-24.931892522286255d), (-135.63701830716116d) }, 1.0E-15);
        org.junit.Assert.assertNotNull(matrix17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertNotNull(matrixArray21);
        org.junit.Assert.assertNotNull(matrix24);
        org.junit.Assert.assertNotNull(matrix27);
        org.junit.Assert.assertNotNull(matrixArray28);
        org.junit.Assert.assertNotNull(matrix31);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 2 + "'", int32 == 2);
        org.junit.Assert.assertNotNull(matrix34);
        org.junit.Assert.assertTrue("'" + double35 + "' != '" + 10.0d + "'", double35 == 10.0d);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 2 + "'", int36 == 2);
        org.junit.Assert.assertNotNull(matrix37);
        org.junit.Assert.assertNotNull(matrix38);
        org.junit.Assert.assertNotNull(matrix39);
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertNotNull(matrix43);
    }

    @Test
    public void test3091() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3091");
        com.operations.Matrix.Matrix matrix1 = com.operations.Matrix.MatrixTransformations.rotate2D((double) 1.0f);
        com.operations.Matrix.Matrix matrix4 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0L, (double) (byte) 10);
        int int5 = matrix4.getRows();
        com.operations.Matrix.Matrix matrix7 = com.operations.Matrix.MatrixOperations.scalarMultiply(matrix4, (double) 2);
        boolean boolean9 = com.operations.Matrix.MatrixUtils.compare(matrix1, matrix7, (double) 10.0f);
        double[] doubleArray12 = new double[] { 10, 'a' };
        double[] doubleArray15 = new double[] { 10, 'a' };
        double[][] doubleArray16 = new double[][] { doubleArray12, doubleArray15 };
        com.operations.Matrix.Matrix matrix17 = new com.operations.Matrix.Matrix(doubleArray16);
        com.operations.Matrix.Matrix matrix18 = new com.operations.Matrix.Matrix(doubleArray16);
        boolean boolean19 = com.operations.Matrix.MatrixUtils.isSquare(matrix18);
        double[] doubleArray22 = new double[] { 10, 'a' };
        double[] doubleArray25 = new double[] { 10, 'a' };
        double[][] doubleArray26 = new double[][] { doubleArray22, doubleArray25 };
        com.operations.Matrix.Matrix matrix27 = new com.operations.Matrix.Matrix(doubleArray26);
        int int28 = matrix27.getCols();
        int int29 = matrix27.getCols();
        matrix27.print();
        double[] doubleArray33 = new double[] { 10, 'a' };
        double[] doubleArray36 = new double[] { 10, 'a' };
        double[][] doubleArray37 = new double[][] { doubleArray33, doubleArray36 };
        com.operations.Matrix.Matrix matrix38 = new com.operations.Matrix.Matrix(doubleArray37);
        boolean boolean40 = com.operations.Matrix.MatrixUtils.compare(matrix27, matrix38, (double) (-1));
        com.operations.Matrix.Matrix matrix41 = com.operations.Matrix.MatrixOperations.subtract(matrix18, matrix38);
        com.operations.Matrix.Matrix matrix43 = com.operations.Matrix.MatrixOperations.scalarMultiply(matrix18, (double) 0.0f);
        com.operations.Matrix.Matrix matrix44 = com.operations.Matrix.MatrixOperations.transpose(matrix18);
        com.operations.Matrix.Matrix matrix45 = com.operations.Matrix.MatrixOperations.transpose(matrix44);
        com.operations.Matrix.Matrix matrix46 = com.operations.Matrix.MatrixOperations.multiply(matrix7, matrix45);
        com.operations.Matrix.Matrix matrix48 = com.operations.Matrix.MatrixTransformations.rotate2D((double) (short) 100);
        double[] doubleArray51 = new double[] { 137.90576492663388d, (byte) -1 };
        double[] doubleArray52 = com.operations.Matrix.MatrixSolver.solveGaussian(matrix48, doubleArray51);
        com.operations.Matrix.Matrix matrix55 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0L, (double) (byte) 10);
        double[] doubleArray58 = new double[] { 10, 'a' };
        double[] doubleArray61 = new double[] { 10, 'a' };
        double[][] doubleArray62 = new double[][] { doubleArray58, doubleArray61 };
        com.operations.Matrix.Matrix matrix63 = new com.operations.Matrix.Matrix(doubleArray62);
        int int64 = matrix63.getCols();
        int int65 = matrix63.getCols();
        int int66 = matrix63.getCols();
        com.operations.Matrix.Matrix[] matrixArray67 = com.operations.Matrix.MatrixDecompositions.luDecomposition(matrix63);
        com.operations.Matrix.Matrix matrix68 = com.operations.Matrix.MatrixOperations.multiply(matrix55, matrix63);
        boolean boolean70 = com.operations.Matrix.MatrixUtils.compare(matrix48, matrix55, (double) (-1L));
        double[][] doubleArray71 = matrix48.getData();
        com.operations.Matrix.Matrix matrix74 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0L, (double) 10L);
        boolean boolean76 = com.operations.Matrix.MatrixUtils.compare(matrix48, matrix74, 146.4308710620817d);
        com.operations.Matrix.Matrix matrix77 = com.operations.Matrix.MatrixOperations.subtract(matrix45, matrix74);
        com.operations.Matrix.Matrix matrix79 = com.operations.Matrix.MatrixOperations.scalarMultiply(matrix77, (double) 0.0f);
        com.operations.Matrix.Matrix matrix81 = com.operations.Matrix.MatrixTransformations.rotate2D(100.0d);
        int int82 = matrix81.getCols();
        com.operations.Matrix.Matrix matrix85 = com.operations.Matrix.MatrixTransformations.project2D((double) 1, 364.0054944640259d);
        com.operations.Matrix.Matrix matrix86 = com.operations.Matrix.MatrixOperations.multiply(matrix81, matrix85);
        com.operations.Matrix.Matrix matrix87 = com.operations.Matrix.MatrixOperations.add(matrix79, matrix85);
        int int88 = matrix79.getRows();
        java.lang.Class<?> wildcardClass89 = matrix79.getClass();
        org.junit.Assert.assertNotNull(matrix1);
        org.junit.Assert.assertNotNull(matrix4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 2 + "'", int5 == 2);
        org.junit.Assert.assertNotNull(matrix7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertArrayEquals(doubleArray12, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertArrayEquals(doubleArray15, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertArrayEquals(doubleArray22, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertArrayEquals(doubleArray25, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 2 + "'", int28 == 2);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 2 + "'", int29 == 2);
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertArrayEquals(doubleArray33, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertArrayEquals(doubleArray36, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(matrix41);
        org.junit.Assert.assertNotNull(matrix43);
        org.junit.Assert.assertNotNull(matrix44);
        org.junit.Assert.assertNotNull(matrix45);
        org.junit.Assert.assertNotNull(matrix46);
        org.junit.Assert.assertNotNull(matrix48);
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertArrayEquals(doubleArray51, new double[] { 137.90576492663388d, (-1.0d) }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertArrayEquals(doubleArray52, new double[] { (-24.931892522286255d), (-135.63701830716116d) }, 1.0E-15);
        org.junit.Assert.assertNotNull(matrix55);
        org.junit.Assert.assertNotNull(doubleArray58);
        org.junit.Assert.assertArrayEquals(doubleArray58, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray61);
        org.junit.Assert.assertArrayEquals(doubleArray61, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray62);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 2 + "'", int64 == 2);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 2 + "'", int65 == 2);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 2 + "'", int66 == 2);
        org.junit.Assert.assertNotNull(matrixArray67);
        org.junit.Assert.assertNotNull(matrix68);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertNotNull(doubleArray71);
        org.junit.Assert.assertNotNull(matrix74);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + true + "'", boolean76 == true);
        org.junit.Assert.assertNotNull(matrix77);
        org.junit.Assert.assertNotNull(matrix79);
        org.junit.Assert.assertNotNull(matrix81);
        org.junit.Assert.assertTrue("'" + int82 + "' != '" + 2 + "'", int82 == 2);
        org.junit.Assert.assertNotNull(matrix85);
        org.junit.Assert.assertNotNull(matrix86);
        org.junit.Assert.assertNotNull(matrix87);
        org.junit.Assert.assertTrue("'" + int88 + "' != '" + 2 + "'", int88 == 2);
        org.junit.Assert.assertNotNull(wildcardClass89);
    }

    @Test
    public void test3092() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3092");
        double[] doubleArray2 = new double[] { 10, 'a' };
        double[] doubleArray5 = new double[] { 10, 'a' };
        double[][] doubleArray6 = new double[][] { doubleArray2, doubleArray5 };
        com.operations.Matrix.Matrix matrix7 = new com.operations.Matrix.Matrix(doubleArray6);
        com.operations.Matrix.Matrix matrix8 = new com.operations.Matrix.Matrix(doubleArray6);
        boolean boolean9 = com.operations.Matrix.MatrixUtils.isSquare(matrix8);
        com.operations.Matrix.Matrix matrix11 = com.operations.Matrix.MatrixOperations.scalarMultiply(matrix8, (double) 1.0f);
        com.operations.Matrix.Matrix matrix13 = com.operations.Matrix.MatrixTransformations.rotate2D(146.4308710620817d);
        double[][] doubleArray14 = matrix13.getData();
        com.operations.Matrix.Matrix matrix17 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0L, (double) (byte) 10);
        double[] doubleArray20 = new double[] { 10, 'a' };
        double[] doubleArray23 = new double[] { 10, 'a' };
        double[][] doubleArray24 = new double[][] { doubleArray20, doubleArray23 };
        com.operations.Matrix.Matrix matrix25 = new com.operations.Matrix.Matrix(doubleArray24);
        int int26 = matrix25.getCols();
        int int27 = matrix25.getCols();
        int int28 = matrix25.getCols();
        com.operations.Matrix.Matrix[] matrixArray29 = com.operations.Matrix.MatrixDecompositions.luDecomposition(matrix25);
        com.operations.Matrix.Matrix matrix30 = com.operations.Matrix.MatrixOperations.multiply(matrix17, matrix25);
        com.operations.Matrix.Matrix matrix32 = com.operations.Matrix.MatrixTransformations.rotate2D((double) (short) 100);
        boolean boolean34 = com.operations.Matrix.MatrixUtils.compare(matrix25, matrix32, (double) (byte) 0);
        double[] doubleArray37 = new double[] { 10, 'a' };
        double[] doubleArray40 = new double[] { 10, 'a' };
        double[][] doubleArray41 = new double[][] { doubleArray37, doubleArray40 };
        com.operations.Matrix.Matrix matrix42 = new com.operations.Matrix.Matrix(doubleArray41);
        com.operations.Matrix.Matrix matrix43 = new com.operations.Matrix.Matrix(doubleArray41);
        com.operations.Matrix.Matrix matrix44 = new com.operations.Matrix.Matrix(doubleArray41);
        boolean boolean46 = com.operations.Matrix.MatrixUtils.compare(matrix25, matrix44, (double) (-1));
        double[] doubleArray49 = new double[] { 10, 'a' };
        double[] doubleArray52 = new double[] { 10, 'a' };
        double[][] doubleArray53 = new double[][] { doubleArray49, doubleArray52 };
        com.operations.Matrix.Matrix matrix54 = new com.operations.Matrix.Matrix(doubleArray53);
        com.operations.Matrix.Matrix matrix55 = new com.operations.Matrix.Matrix(doubleArray53);
        boolean boolean56 = com.operations.Matrix.MatrixUtils.isSquare(matrix55);
        com.operations.Matrix.Matrix matrix57 = com.operations.Matrix.MatrixOperations.multiply(matrix44, matrix55);
        double[][] doubleArray58 = matrix55.getData();
        com.operations.Matrix.Matrix matrix59 = new com.operations.Matrix.Matrix(doubleArray58);
        com.operations.Matrix.Matrix matrix60 = new com.operations.Matrix.Matrix(doubleArray58);
        com.operations.Matrix.Matrix matrix61 = new com.operations.Matrix.Matrix(doubleArray58);
        com.operations.Matrix.Matrix matrix63 = com.operations.Matrix.MatrixOperations.scalarMultiply(matrix61, (double) 'a');
        com.operations.Matrix.Matrix matrix64 = com.operations.Matrix.MatrixOperations.add(matrix13, matrix61);
        double[] doubleArray67 = new double[] { 10, 'a' };
        double[] doubleArray70 = new double[] { 10, 'a' };
        double[][] doubleArray71 = new double[][] { doubleArray67, doubleArray70 };
        com.operations.Matrix.Matrix matrix72 = new com.operations.Matrix.Matrix(doubleArray71);
        int int73 = matrix72.getCols();
        int int74 = matrix72.getCols();
        boolean boolean75 = com.operations.Matrix.MatrixUtils.isSquare(matrix72);
        com.operations.Matrix.Matrix matrix76 = com.operations.Matrix.MatrixDecompositions.choleskyDecomposition(matrix72);
        com.operations.Matrix.Matrix matrix79 = com.operations.Matrix.MatrixTransformations.project2D(0.0d, (double) 0);
        com.operations.Matrix.Matrix matrix80 = com.operations.Matrix.MatrixOperations.subtract(matrix76, matrix79);
        com.operations.Matrix.Matrix matrix81 = com.operations.Matrix.MatrixOperations.transpose(matrix79);
        com.operations.Matrix.Matrix matrix82 = com.operations.Matrix.MatrixOperations.add(matrix64, matrix79);
        double[][] doubleArray83 = matrix79.getData();
        com.operations.Matrix.Matrix matrix84 = com.operations.Matrix.MatrixOperations.subtract(matrix8, matrix79);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertArrayEquals(doubleArray2, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertArrayEquals(doubleArray5, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertNotNull(matrix11);
        org.junit.Assert.assertNotNull(matrix13);
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertNotNull(matrix17);
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertArrayEquals(doubleArray20, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertArrayEquals(doubleArray23, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 2 + "'", int26 == 2);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 2 + "'", int27 == 2);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 2 + "'", int28 == 2);
        org.junit.Assert.assertNotNull(matrixArray29);
        org.junit.Assert.assertNotNull(matrix30);
        org.junit.Assert.assertNotNull(matrix32);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertArrayEquals(doubleArray37, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertArrayEquals(doubleArray40, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertArrayEquals(doubleArray49, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertArrayEquals(doubleArray52, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + true + "'", boolean56 == true);
        org.junit.Assert.assertNotNull(matrix57);
        org.junit.Assert.assertNotNull(doubleArray58);
        org.junit.Assert.assertNotNull(matrix63);
        org.junit.Assert.assertNotNull(matrix64);
        org.junit.Assert.assertNotNull(doubleArray67);
        org.junit.Assert.assertArrayEquals(doubleArray67, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray70);
        org.junit.Assert.assertArrayEquals(doubleArray70, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray71);
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + 2 + "'", int73 == 2);
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 2 + "'", int74 == 2);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + true + "'", boolean75 == true);
        org.junit.Assert.assertNotNull(matrix76);
        org.junit.Assert.assertNotNull(matrix79);
        org.junit.Assert.assertNotNull(matrix80);
        org.junit.Assert.assertNotNull(matrix81);
        org.junit.Assert.assertNotNull(matrix82);
        org.junit.Assert.assertNotNull(doubleArray83);
        org.junit.Assert.assertNotNull(matrix84);
    }

    @Test
    public void test3093() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3093");
        double[] doubleArray2 = new double[] { 10, 'a' };
        double[] doubleArray5 = new double[] { 10, 'a' };
        double[][] doubleArray6 = new double[][] { doubleArray2, doubleArray5 };
        com.operations.Matrix.Matrix matrix7 = new com.operations.Matrix.Matrix(doubleArray6);
        com.operations.Matrix.Matrix matrix8 = com.operations.Matrix.MatrixOperations.transpose(matrix7);
        com.operations.Matrix.Matrix matrix9 = com.operations.Matrix.MatrixDecompositions.choleskyDecomposition(matrix7);
        com.operations.Matrix.Matrix matrix11 = com.operations.Matrix.MatrixTransformations.rotate2D((double) 1.0f);
        com.operations.Matrix.Matrix matrix14 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0L, (double) (byte) 10);
        int int15 = matrix14.getRows();
        com.operations.Matrix.Matrix matrix17 = com.operations.Matrix.MatrixOperations.scalarMultiply(matrix14, (double) 2);
        boolean boolean19 = com.operations.Matrix.MatrixUtils.compare(matrix11, matrix17, (double) 10.0f);
        com.operations.Matrix.Matrix[] matrixArray20 = com.operations.Matrix.MatrixDecompositions.luDecomposition(matrix17);
        com.operations.Matrix.Matrix matrix22 = com.operations.Matrix.MatrixOperations.scalarMultiply(matrix17, 20.0d);
        double double23 = com.operations.Matrix.MatrixUtils.frobeniusNorm(matrix22);
        com.operations.Matrix.Matrix matrix25 = com.operations.Matrix.MatrixOperations.scalarMultiply(matrix22, (double) '#');
        com.operations.Matrix.Matrix matrix26 = com.operations.Matrix.MatrixOperations.add(matrix7, matrix22);
        com.operations.Matrix.Matrix matrix27 = com.operations.Matrix.MatrixOperations.transpose(matrix26);
        java.lang.Class<?> wildcardClass28 = matrix26.getClass();
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertArrayEquals(doubleArray2, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertArrayEquals(doubleArray5, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertNotNull(matrix8);
        org.junit.Assert.assertNotNull(matrix9);
        org.junit.Assert.assertNotNull(matrix11);
        org.junit.Assert.assertNotNull(matrix14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 2 + "'", int15 == 2);
        org.junit.Assert.assertNotNull(matrix17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(matrixArray20);
        org.junit.Assert.assertNotNull(matrix22);
        org.junit.Assert.assertTrue("'" + double23 + "' != '" + 400.0d + "'", double23 == 400.0d);
        org.junit.Assert.assertNotNull(matrix25);
        org.junit.Assert.assertNotNull(matrix26);
        org.junit.Assert.assertNotNull(matrix27);
        org.junit.Assert.assertNotNull(wildcardClass28);
    }

    @Test
    public void test3094() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3094");
        com.operations.Matrix.Matrix matrix2 = new com.operations.Matrix.Matrix((int) '4', (int) (byte) 10);
    }

    @Test
    public void test3095() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3095");
        com.operations.Matrix.Matrix matrix2 = com.operations.Matrix.MatrixTransformations.project2D(137.13497001129946d, 137.15495886388925d);
        int int3 = matrix2.getCols();
        com.operations.Matrix.Matrix matrix6 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0L, (double) (byte) 10);
        int int7 = matrix6.getRows();
        com.operations.Matrix.Matrix matrix13 = com.operations.Matrix.MatrixUtils.generateRandomMatrix(100, (int) (byte) 1, (int) '#', (int) '#', 1L);
        boolean boolean15 = com.operations.Matrix.MatrixUtils.compare(matrix6, matrix13, (double) 1.0f);
        boolean boolean16 = com.operations.Matrix.MatrixUtils.isSquare(matrix13);
        boolean boolean17 = com.operations.Matrix.MatrixUtils.isSymmetric(matrix13);
        // The following exception was thrown during execution in test generation
        try {
            com.operations.Matrix.Matrix matrix18 = com.operations.Matrix.MatrixOperations.multiply(matrix2, matrix13);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Matrix A's columns must match Matrix B's rows for multiplication.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(matrix2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 2 + "'", int3 == 2);
        org.junit.Assert.assertNotNull(matrix6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 2 + "'", int7 == 2);
        org.junit.Assert.assertNotNull(matrix13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
    }

    @Test
    public void test3096() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3096");
        com.operations.Matrix.Matrix matrix2 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0L, (double) (byte) 10);
        double[] doubleArray5 = new double[] { 10, 'a' };
        double[] doubleArray8 = new double[] { 10, 'a' };
        double[][] doubleArray9 = new double[][] { doubleArray5, doubleArray8 };
        com.operations.Matrix.Matrix matrix10 = new com.operations.Matrix.Matrix(doubleArray9);
        int int11 = matrix10.getCols();
        int int12 = matrix10.getCols();
        int int13 = matrix10.getCols();
        com.operations.Matrix.Matrix[] matrixArray14 = com.operations.Matrix.MatrixDecompositions.luDecomposition(matrix10);
        com.operations.Matrix.Matrix matrix15 = com.operations.Matrix.MatrixOperations.multiply(matrix2, matrix10);
        com.operations.Matrix.Matrix matrix17 = com.operations.Matrix.MatrixTransformations.rotate2D((double) (short) 100);
        boolean boolean19 = com.operations.Matrix.MatrixUtils.compare(matrix10, matrix17, (double) (byte) 0);
        com.operations.Matrix.Matrix[] matrixArray20 = com.operations.Matrix.MatrixDecompositions.luDecomposition(matrix10);
        com.operations.Matrix.Matrix matrix21 = com.operations.Matrix.MatrixOperations.transpose(matrix10);
        com.operations.Matrix.Matrix matrix24 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0L, (double) (byte) 10);
        int int25 = matrix24.getRows();
        com.operations.Matrix.Matrix matrix28 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0L, (double) (byte) 10);
        int int29 = matrix28.getRows();
        com.operations.Matrix.Matrix matrix31 = com.operations.Matrix.MatrixOperations.scalarMultiply(matrix28, (double) 2);
        com.operations.Matrix.Matrix matrix32 = com.operations.Matrix.MatrixOperations.subtract(matrix24, matrix28);
        boolean boolean34 = com.operations.Matrix.MatrixUtils.compare(matrix10, matrix24, (double) ' ');
        com.operations.Matrix.Matrix matrix37 = com.operations.Matrix.MatrixTransformations.project2D((double) ' ', 0.0d);
        double[] doubleArray40 = new double[] { 10, 'a' };
        double[] doubleArray43 = new double[] { 10, 'a' };
        double[][] doubleArray44 = new double[][] { doubleArray40, doubleArray43 };
        com.operations.Matrix.Matrix matrix45 = new com.operations.Matrix.Matrix(doubleArray44);
        int int46 = matrix45.getCols();
        boolean boolean47 = com.operations.Matrix.MatrixUtils.isSquare(matrix45);
        com.operations.Matrix.Matrix matrix48 = com.operations.Matrix.MatrixOperations.transpose(matrix45);
        int int49 = matrix48.getRows();
        com.operations.Matrix.Matrix matrix52 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0L, (double) (byte) 10);
        double[] doubleArray55 = new double[] { 10, 'a' };
        double[] doubleArray58 = new double[] { 10, 'a' };
        double[][] doubleArray59 = new double[][] { doubleArray55, doubleArray58 };
        com.operations.Matrix.Matrix matrix60 = new com.operations.Matrix.Matrix(doubleArray59);
        int int61 = matrix60.getCols();
        int int62 = matrix60.getCols();
        int int63 = matrix60.getCols();
        com.operations.Matrix.Matrix[] matrixArray64 = com.operations.Matrix.MatrixDecompositions.luDecomposition(matrix60);
        com.operations.Matrix.Matrix matrix65 = com.operations.Matrix.MatrixOperations.multiply(matrix52, matrix60);
        com.operations.Matrix.Matrix matrix67 = com.operations.Matrix.MatrixTransformations.rotate2D((double) (short) 100);
        boolean boolean69 = com.operations.Matrix.MatrixUtils.compare(matrix60, matrix67, (double) (byte) 0);
        com.operations.Matrix.Matrix matrix70 = com.operations.Matrix.MatrixOperations.multiply(matrix48, matrix60);
        com.operations.Matrix.Matrix matrix71 = com.operations.Matrix.MatrixOperations.add(matrix37, matrix60);
        com.operations.Matrix.Matrix matrix72 = com.operations.Matrix.MatrixOperations.transpose(matrix37);
        matrix37.print();
        com.operations.Matrix.Matrix matrix74 = com.operations.Matrix.MatrixOperations.add(matrix24, matrix37);
        double double75 = com.operations.Matrix.MatrixUtils.frobeniusNorm(matrix74);
        com.operations.Matrix.Matrix matrix77 = com.operations.Matrix.MatrixOperations.scalarMultiply(matrix74, (double) 'a');
        // The following exception was thrown during execution in test generation
        try {
            matrix77.setValue((int) (byte) -1, (int) (short) 100, (double) 10L);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: Index -1 out of bounds for length 2");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(matrix2);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertArrayEquals(doubleArray5, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertArrayEquals(doubleArray8, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 2 + "'", int11 == 2);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 2 + "'", int12 == 2);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 2 + "'", int13 == 2);
        org.junit.Assert.assertNotNull(matrixArray14);
        org.junit.Assert.assertNotNull(matrix15);
        org.junit.Assert.assertNotNull(matrix17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(matrixArray20);
        org.junit.Assert.assertNotNull(matrix21);
        org.junit.Assert.assertNotNull(matrix24);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 2 + "'", int25 == 2);
        org.junit.Assert.assertNotNull(matrix28);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 2 + "'", int29 == 2);
        org.junit.Assert.assertNotNull(matrix31);
        org.junit.Assert.assertNotNull(matrix32);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(matrix37);
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertArrayEquals(doubleArray40, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertArrayEquals(doubleArray43, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 2 + "'", int46 == 2);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        org.junit.Assert.assertNotNull(matrix48);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 2 + "'", int49 == 2);
        org.junit.Assert.assertNotNull(matrix52);
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertArrayEquals(doubleArray55, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray58);
        org.junit.Assert.assertArrayEquals(doubleArray58, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray59);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 2 + "'", int61 == 2);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 2 + "'", int62 == 2);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 2 + "'", int63 == 2);
        org.junit.Assert.assertNotNull(matrixArray64);
        org.junit.Assert.assertNotNull(matrix65);
        org.junit.Assert.assertNotNull(matrix67);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertNotNull(matrix70);
        org.junit.Assert.assertNotNull(matrix71);
        org.junit.Assert.assertNotNull(matrix72);
        org.junit.Assert.assertNotNull(matrix74);
        org.junit.Assert.assertTrue("'" + double75 + "' != '" + 33.52610922848042d + "'", double75 == 33.52610922848042d);
        org.junit.Assert.assertNotNull(matrix77);
    }

    @Test
    public void test3097() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3097");
        com.operations.Matrix.Matrix matrix1 = com.operations.Matrix.MatrixTransformations.rotate2D(100.0d);
        int int2 = matrix1.getCols();
        com.operations.Matrix.Matrix matrix4 = com.operations.Matrix.MatrixOperations.scalarMultiply(matrix1, (double) ' ');
        com.operations.Matrix.Matrix matrix7 = com.operations.Matrix.MatrixTransformations.scale2D((double) 1.0f, (double) 1);
        com.operations.Matrix.Matrix matrix9 = com.operations.Matrix.MatrixTransformations.rotate2D((double) 1.0f);
        com.operations.Matrix.Matrix matrix12 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0L, (double) (byte) 10);
        int int13 = matrix12.getRows();
        com.operations.Matrix.Matrix matrix15 = com.operations.Matrix.MatrixOperations.scalarMultiply(matrix12, (double) 2);
        double double16 = com.operations.Matrix.MatrixUtils.frobeniusNorm(matrix12);
        com.operations.Matrix.Matrix matrix19 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0L, (double) (byte) 10);
        int int20 = matrix19.getRows();
        com.operations.Matrix.Matrix matrix22 = com.operations.Matrix.MatrixOperations.scalarMultiply(matrix19, (double) 2);
        com.operations.Matrix.Matrix matrix23 = com.operations.Matrix.MatrixOperations.subtract(matrix12, matrix22);
        com.operations.Matrix.Matrix matrix24 = com.operations.Matrix.MatrixOperations.add(matrix9, matrix22);
        boolean boolean26 = com.operations.Matrix.MatrixUtils.compare(matrix7, matrix9, (double) (byte) -1);
        com.operations.Matrix.Matrix matrix27 = com.operations.Matrix.MatrixOperations.transpose(matrix9);
        com.operations.Matrix.Matrix matrix30 = com.operations.Matrix.MatrixTransformations.project2D((double) 10L, 10.0d);
        com.operations.Matrix.Matrix matrix32 = com.operations.Matrix.MatrixTransformations.rotate2D((double) (short) 100);
        double[] doubleArray35 = new double[] { 137.90576492663388d, (byte) -1 };
        double[] doubleArray36 = com.operations.Matrix.MatrixSolver.solveGaussian(matrix32, doubleArray35);
        com.operations.Matrix.Matrix matrix39 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0L, (double) (byte) 10);
        double[] doubleArray42 = new double[] { 10, 'a' };
        double[] doubleArray45 = new double[] { 10, 'a' };
        double[][] doubleArray46 = new double[][] { doubleArray42, doubleArray45 };
        com.operations.Matrix.Matrix matrix47 = new com.operations.Matrix.Matrix(doubleArray46);
        int int48 = matrix47.getCols();
        int int49 = matrix47.getCols();
        int int50 = matrix47.getCols();
        com.operations.Matrix.Matrix[] matrixArray51 = com.operations.Matrix.MatrixDecompositions.luDecomposition(matrix47);
        com.operations.Matrix.Matrix matrix52 = com.operations.Matrix.MatrixOperations.multiply(matrix39, matrix47);
        boolean boolean54 = com.operations.Matrix.MatrixUtils.compare(matrix32, matrix39, (double) (-1L));
        double[][] doubleArray55 = matrix32.getData();
        com.operations.Matrix.Matrix matrix57 = com.operations.Matrix.MatrixTransformations.rotate2D((double) (short) 100);
        double[] doubleArray60 = new double[] { 137.90576492663388d, (byte) -1 };
        double[] doubleArray61 = com.operations.Matrix.MatrixSolver.solveGaussian(matrix57, doubleArray60);
        double[] doubleArray62 = com.operations.Matrix.MatrixSolver.solveGaussian(matrix32, doubleArray60);
        double[] doubleArray63 = com.operations.Matrix.MatrixSolver.solveGaussian(matrix30, doubleArray62);
        double[] doubleArray64 = com.operations.Matrix.MatrixSolver.solveGaussian(matrix9, doubleArray63);
        com.operations.Matrix.Matrix matrix65 = com.operations.Matrix.MatrixDecompositions.choleskyDecomposition(matrix9);
        com.operations.Matrix.Matrix matrix68 = com.operations.Matrix.MatrixTransformations.scale2D(52.009614495783374d, (double) 0.0f);
        double double69 = com.operations.Matrix.MatrixUtils.frobeniusNorm(matrix68);
        double[] doubleArray72 = new double[] { 10, 'a' };
        double[] doubleArray75 = new double[] { 10, 'a' };
        double[][] doubleArray76 = new double[][] { doubleArray72, doubleArray75 };
        com.operations.Matrix.Matrix matrix77 = new com.operations.Matrix.Matrix(doubleArray76);
        int int78 = matrix77.getCols();
        int int79 = matrix77.getCols();
        boolean boolean80 = com.operations.Matrix.MatrixUtils.isSquare(matrix77);
        com.operations.Matrix.Matrix matrix81 = com.operations.Matrix.MatrixDecompositions.choleskyDecomposition(matrix77);
        com.operations.Matrix.Matrix matrix84 = com.operations.Matrix.MatrixTransformations.project2D(0.0d, (double) 0);
        com.operations.Matrix.Matrix matrix85 = com.operations.Matrix.MatrixOperations.subtract(matrix81, matrix84);
        com.operations.Matrix.Matrix matrix86 = com.operations.Matrix.MatrixOperations.multiply(matrix68, matrix85);
        com.operations.Matrix.Matrix matrix87 = com.operations.Matrix.MatrixOperations.subtract(matrix9, matrix86);
        com.operations.Matrix.Matrix matrix88 = com.operations.Matrix.MatrixOperations.multiply(matrix4, matrix87);
        org.junit.Assert.assertNotNull(matrix1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 2 + "'", int2 == 2);
        org.junit.Assert.assertNotNull(matrix4);
        org.junit.Assert.assertNotNull(matrix7);
        org.junit.Assert.assertNotNull(matrix9);
        org.junit.Assert.assertNotNull(matrix12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 2 + "'", int13 == 2);
        org.junit.Assert.assertNotNull(matrix15);
        org.junit.Assert.assertTrue("'" + double16 + "' != '" + 10.0d + "'", double16 == 10.0d);
        org.junit.Assert.assertNotNull(matrix19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 2 + "'", int20 == 2);
        org.junit.Assert.assertNotNull(matrix22);
        org.junit.Assert.assertNotNull(matrix23);
        org.junit.Assert.assertNotNull(matrix24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(matrix27);
        org.junit.Assert.assertNotNull(matrix30);
        org.junit.Assert.assertNotNull(matrix32);
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertArrayEquals(doubleArray35, new double[] { 137.90576492663388d, (-1.0d) }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertArrayEquals(doubleArray36, new double[] { (-24.931892522286255d), (-135.63701830716116d) }, 1.0E-15);
        org.junit.Assert.assertNotNull(matrix39);
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertArrayEquals(doubleArray42, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertArrayEquals(doubleArray45, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray46);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 2 + "'", int48 == 2);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 2 + "'", int49 == 2);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 2 + "'", int50 == 2);
        org.junit.Assert.assertNotNull(matrixArray51);
        org.junit.Assert.assertNotNull(matrix52);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertNotNull(matrix57);
        org.junit.Assert.assertNotNull(doubleArray60);
        org.junit.Assert.assertArrayEquals(doubleArray60, new double[] { 137.90576492663388d, (-1.0d) }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray61);
        org.junit.Assert.assertArrayEquals(doubleArray61, new double[] { (-24.931892522286255d), (-135.63701830716116d) }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray62);
        org.junit.Assert.assertArrayEquals(doubleArray62, new double[] { (-24.931892522286255d), (-135.63701830716116d) }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray63);
        org.junit.Assert.assertArrayEquals(doubleArray63, new double[] { (-2.4931892522286256d), (-13.563701830716116d) }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray64);
        org.junit.Assert.assertArrayEquals(doubleArray64, new double[] { (-2.7295287645732618d), (-13.518123861075072d) }, 1.0E-15);
        org.junit.Assert.assertNotNull(matrix65);
        org.junit.Assert.assertNotNull(matrix68);
        org.junit.Assert.assertTrue("'" + double69 + "' != '" + 52.009614495783374d + "'", double69 == 52.009614495783374d);
        org.junit.Assert.assertNotNull(doubleArray72);
        org.junit.Assert.assertArrayEquals(doubleArray72, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray75);
        org.junit.Assert.assertArrayEquals(doubleArray75, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray76);
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + 2 + "'", int78 == 2);
        org.junit.Assert.assertTrue("'" + int79 + "' != '" + 2 + "'", int79 == 2);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + true + "'", boolean80 == true);
        org.junit.Assert.assertNotNull(matrix81);
        org.junit.Assert.assertNotNull(matrix84);
        org.junit.Assert.assertNotNull(matrix85);
        org.junit.Assert.assertNotNull(matrix86);
        org.junit.Assert.assertNotNull(matrix87);
        org.junit.Assert.assertNotNull(matrix88);
    }

    @Test
    public void test3098() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3098");
        com.operations.Matrix.Matrix matrix2 = com.operations.Matrix.MatrixTransformations.scale2D(1040.0d, 65.19779036970327d);
        org.junit.Assert.assertNotNull(matrix2);
    }

    @Test
    public void test3099() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3099");
        com.operations.Matrix.Matrix matrix2 = com.operations.Matrix.MatrixTransformations.project2D(365.68429006453096d, 1.4142135623730951d);
        int int3 = matrix2.getRows();
        org.junit.Assert.assertNotNull(matrix2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 2 + "'", int3 == 2);
    }

    @Test
    public void test3100() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3100");
        double[] doubleArray2 = new double[] { 10, 'a' };
        double[] doubleArray5 = new double[] { 10, 'a' };
        double[][] doubleArray6 = new double[][] { doubleArray2, doubleArray5 };
        com.operations.Matrix.Matrix matrix7 = new com.operations.Matrix.Matrix(doubleArray6);
        int int8 = matrix7.getCols();
        int int9 = matrix7.getCols();
        matrix7.print();
        double[] doubleArray13 = new double[] { 10, 'a' };
        double[] doubleArray16 = new double[] { 10, 'a' };
        double[][] doubleArray17 = new double[][] { doubleArray13, doubleArray16 };
        com.operations.Matrix.Matrix matrix18 = new com.operations.Matrix.Matrix(doubleArray17);
        boolean boolean20 = com.operations.Matrix.MatrixUtils.compare(matrix7, matrix18, (double) (-1));
        boolean boolean21 = com.operations.Matrix.MatrixUtils.isSymmetric(matrix7);
        int int22 = matrix7.getRows();
        com.operations.Matrix.Matrix matrix23 = com.operations.Matrix.MatrixDecompositions.choleskyDecomposition(matrix7);
        double[] doubleArray26 = new double[] { 10, 'a' };
        double[] doubleArray29 = new double[] { 10, 'a' };
        double[][] doubleArray30 = new double[][] { doubleArray26, doubleArray29 };
        com.operations.Matrix.Matrix matrix31 = new com.operations.Matrix.Matrix(doubleArray30);
        com.operations.Matrix.Matrix matrix32 = new com.operations.Matrix.Matrix(doubleArray30);
        com.operations.Matrix.Matrix matrix34 = com.operations.Matrix.MatrixTransformations.rotate2D((double) (short) 100);
        double[] doubleArray37 = new double[] { 137.90576492663388d, (byte) -1 };
        double[] doubleArray38 = com.operations.Matrix.MatrixSolver.solveGaussian(matrix34, doubleArray37);
        com.operations.Matrix.Matrix matrix39 = com.operations.Matrix.MatrixOperations.add(matrix32, matrix34);
        com.operations.Matrix.Matrix matrix40 = com.operations.Matrix.MatrixOperations.transpose(matrix34);
        int int41 = matrix34.getCols();
        com.operations.Matrix.Matrix matrix44 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0L, (double) (byte) 10);
        double[] doubleArray47 = new double[] { 10, 'a' };
        double[] doubleArray50 = new double[] { 10, 'a' };
        double[][] doubleArray51 = new double[][] { doubleArray47, doubleArray50 };
        com.operations.Matrix.Matrix matrix52 = new com.operations.Matrix.Matrix(doubleArray51);
        int int53 = matrix52.getCols();
        int int54 = matrix52.getCols();
        int int55 = matrix52.getCols();
        com.operations.Matrix.Matrix[] matrixArray56 = com.operations.Matrix.MatrixDecompositions.luDecomposition(matrix52);
        com.operations.Matrix.Matrix matrix57 = com.operations.Matrix.MatrixOperations.multiply(matrix44, matrix52);
        com.operations.Matrix.Matrix matrix59 = com.operations.Matrix.MatrixTransformations.rotate2D((double) (short) 100);
        boolean boolean61 = com.operations.Matrix.MatrixUtils.compare(matrix52, matrix59, (double) (byte) 0);
        boolean boolean62 = com.operations.Matrix.MatrixUtils.isSymmetric(matrix59);
        boolean boolean63 = com.operations.Matrix.MatrixUtils.isSquare(matrix59);
        com.operations.Matrix.Matrix matrix65 = com.operations.Matrix.MatrixTransformations.rotate2D((double) (short) 100);
        boolean boolean67 = com.operations.Matrix.MatrixUtils.compare(matrix59, matrix65, (double) (byte) 100);
        matrix65.print();
        com.operations.Matrix.Matrix matrix69 = com.operations.Matrix.MatrixOperations.add(matrix34, matrix65);
        com.operations.Matrix.Matrix matrix70 = com.operations.Matrix.MatrixOperations.subtract(matrix23, matrix65);
        int int71 = matrix23.getCols();
        int int72 = matrix23.getRows();
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertArrayEquals(doubleArray2, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertArrayEquals(doubleArray5, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 2 + "'", int8 == 2);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 2 + "'", int9 == 2);
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertArrayEquals(doubleArray13, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertArrayEquals(doubleArray16, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 2 + "'", int22 == 2);
        org.junit.Assert.assertNotNull(matrix23);
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertArrayEquals(doubleArray26, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertArrayEquals(doubleArray29, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertNotNull(matrix34);
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertArrayEquals(doubleArray37, new double[] { 137.90576492663388d, (-1.0d) }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertArrayEquals(doubleArray38, new double[] { (-24.931892522286255d), (-135.63701830716116d) }, 1.0E-15);
        org.junit.Assert.assertNotNull(matrix39);
        org.junit.Assert.assertNotNull(matrix40);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 2 + "'", int41 == 2);
        org.junit.Assert.assertNotNull(matrix44);
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertArrayEquals(doubleArray47, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertArrayEquals(doubleArray50, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 2 + "'", int53 == 2);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 2 + "'", int54 == 2);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 2 + "'", int55 == 2);
        org.junit.Assert.assertNotNull(matrixArray56);
        org.junit.Assert.assertNotNull(matrix57);
        org.junit.Assert.assertNotNull(matrix59);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + true + "'", boolean63 == true);
        org.junit.Assert.assertNotNull(matrix65);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + true + "'", boolean67 == true);
        org.junit.Assert.assertNotNull(matrix69);
        org.junit.Assert.assertNotNull(matrix70);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 2 + "'", int71 == 2);
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 2 + "'", int72 == 2);
    }

    @Test
    public void test3101() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3101");
        com.operations.Matrix.Matrix matrix2 = com.operations.Matrix.MatrixTransformations.scale2D(1.7320508075688774d, (-1.0d));
        org.junit.Assert.assertNotNull(matrix2);
    }

    @Test
    public void test3102() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3102");
        com.operations.Matrix.Matrix matrix2 = com.operations.Matrix.MatrixTransformations.scale2D(52.009614495783374d, (double) 0.0f);
        double[] doubleArray5 = new double[] { 10, 'a' };
        double[] doubleArray8 = new double[] { 10, 'a' };
        double[][] doubleArray9 = new double[][] { doubleArray5, doubleArray8 };
        com.operations.Matrix.Matrix matrix10 = new com.operations.Matrix.Matrix(doubleArray9);
        com.operations.Matrix.Matrix matrix11 = com.operations.Matrix.MatrixOperations.transpose(matrix10);
        com.operations.Matrix.Matrix matrix14 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0L, (double) (byte) 10);
        int int15 = matrix14.getRows();
        com.operations.Matrix.Matrix matrix21 = com.operations.Matrix.MatrixUtils.generateRandomMatrix(100, (int) (byte) 1, (int) '#', (int) '#', 1L);
        boolean boolean23 = com.operations.Matrix.MatrixUtils.compare(matrix14, matrix21, (double) 1.0f);
        com.operations.Matrix.Matrix matrix25 = com.operations.Matrix.MatrixOperations.scalarMultiply(matrix14, (double) 1L);
        matrix14.print();
        com.operations.Matrix.Matrix matrix27 = com.operations.Matrix.MatrixOperations.multiply(matrix11, matrix14);
        com.operations.Matrix.Matrix matrix29 = com.operations.Matrix.MatrixTransformations.rotate2D((double) '4');
        int int30 = matrix29.getRows();
        com.operations.Matrix.Matrix matrix31 = com.operations.Matrix.MatrixOperations.add(matrix27, matrix29);
        int int32 = matrix29.getCols();
        com.operations.Matrix.Matrix matrix33 = com.operations.Matrix.MatrixOperations.multiply(matrix2, matrix29);
        org.junit.Assert.assertNotNull(matrix2);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertArrayEquals(doubleArray5, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertArrayEquals(doubleArray8, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertNotNull(matrix11);
        org.junit.Assert.assertNotNull(matrix14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 2 + "'", int15 == 2);
        org.junit.Assert.assertNotNull(matrix21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(matrix25);
        org.junit.Assert.assertNotNull(matrix27);
        org.junit.Assert.assertNotNull(matrix29);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 2 + "'", int30 == 2);
        org.junit.Assert.assertNotNull(matrix31);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 2 + "'", int32 == 2);
        org.junit.Assert.assertNotNull(matrix33);
    }

    @Test
    public void test3103() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3103");
        com.operations.Matrix.Matrix matrix2 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0L, (double) (byte) 10);
        int int3 = matrix2.getRows();
        com.operations.Matrix.Matrix matrix6 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0L, (double) (byte) 10);
        int int7 = matrix6.getRows();
        com.operations.Matrix.Matrix matrix9 = com.operations.Matrix.MatrixOperations.scalarMultiply(matrix6, (double) 2);
        com.operations.Matrix.Matrix matrix10 = com.operations.Matrix.MatrixOperations.subtract(matrix2, matrix6);
        com.operations.Matrix.Matrix matrix13 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0L, (double) (byte) 10);
        int int14 = matrix13.getRows();
        com.operations.Matrix.Matrix matrix20 = com.operations.Matrix.MatrixUtils.generateRandomMatrix(100, (int) (byte) 1, (int) '#', (int) '#', 1L);
        boolean boolean22 = com.operations.Matrix.MatrixUtils.compare(matrix13, matrix20, (double) 1.0f);
        com.operations.Matrix.Matrix matrix24 = com.operations.Matrix.MatrixOperations.scalarMultiply(matrix13, (double) 1L);
        boolean boolean26 = com.operations.Matrix.MatrixUtils.compare(matrix10, matrix24, 0.0d);
        int int27 = matrix24.getCols();
        com.operations.Matrix.Matrix matrix28 = com.operations.Matrix.MatrixOperations.transpose(matrix24);
        double double29 = com.operations.Matrix.MatrixUtils.frobeniusNorm(matrix28);
        com.operations.Matrix.Matrix matrix31 = com.operations.Matrix.MatrixOperations.scalarMultiply(matrix28, 0.01745240643728351d);
        double[][] doubleArray32 = matrix31.getData();
        com.operations.Matrix.Matrix matrix33 = new com.operations.Matrix.Matrix(doubleArray32);
        com.operations.Matrix.Matrix[] matrixArray34 = com.operations.Matrix.MatrixDecompositions.luDecomposition(matrix33);
        org.junit.Assert.assertNotNull(matrix2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 2 + "'", int3 == 2);
        org.junit.Assert.assertNotNull(matrix6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 2 + "'", int7 == 2);
        org.junit.Assert.assertNotNull(matrix9);
        org.junit.Assert.assertNotNull(matrix10);
        org.junit.Assert.assertNotNull(matrix13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 2 + "'", int14 == 2);
        org.junit.Assert.assertNotNull(matrix20);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(matrix24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 2 + "'", int27 == 2);
        org.junit.Assert.assertNotNull(matrix28);
        org.junit.Assert.assertTrue("'" + double29 + "' != '" + 10.0d + "'", double29 == 10.0d);
        org.junit.Assert.assertNotNull(matrix31);
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertNotNull(matrixArray34);
    }

    @Test
    public void test3104() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3104");
        double[] doubleArray2 = new double[] { 10, 'a' };
        double[] doubleArray5 = new double[] { 10, 'a' };
        double[][] doubleArray6 = new double[][] { doubleArray2, doubleArray5 };
        com.operations.Matrix.Matrix matrix7 = new com.operations.Matrix.Matrix(doubleArray6);
        // The following exception was thrown during execution in test generation
        try {
            matrix7.setValue((int) (short) 0, (int) '4', 131.06486943494812d);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: Index 52 out of bounds for length 2");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertArrayEquals(doubleArray2, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertArrayEquals(doubleArray5, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray6);
    }

    @Test
    public void test3105() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3105");
        com.operations.Matrix.Matrix matrix2 = com.operations.Matrix.MatrixTransformations.project2D(400.0d, (double) 52);
        org.junit.Assert.assertNotNull(matrix2);
    }

    @Test
    public void test3106() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3106");
        // The following exception was thrown during execution in test generation
        try {
            com.operations.Matrix.Matrix matrix5 = com.operations.Matrix.MatrixUtils.generateRandomMatrix(2, (int) (byte) -1, (-1), (int) (byte) -1, (long) (short) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.NegativeArraySizeException; message: -1");
        } catch (java.lang.NegativeArraySizeException e) {
            // Expected exception.
        }
    }

    @Test
    public void test3107() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3107");
        com.operations.Matrix.Matrix matrix2 = com.operations.Matrix.MatrixTransformations.scale2D(10.0d, 1.0d);
        com.operations.Matrix.Matrix matrix3 = com.operations.Matrix.MatrixOperations.transpose(matrix2);
        matrix3.print();
        com.operations.Matrix.Matrix matrix7 = com.operations.Matrix.MatrixTransformations.project2D((double) (byte) 100, 32.0d);
        boolean boolean8 = com.operations.Matrix.MatrixUtils.isSquare(matrix7);
        com.operations.Matrix.Matrix matrix9 = com.operations.Matrix.MatrixDecompositions.choleskyDecomposition(matrix7);
        com.operations.Matrix.Matrix matrix12 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0.0f, 350.0d);
        com.operations.Matrix.Matrix matrix15 = com.operations.Matrix.MatrixTransformations.project2D(0.0d, (double) 0);
        com.operations.Matrix.Matrix[] matrixArray16 = com.operations.Matrix.MatrixDecompositions.luDecomposition(matrix15);
        com.operations.Matrix.Matrix matrix19 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0L, (double) (byte) 10);
        int int20 = matrix19.getRows();
        com.operations.Matrix.Matrix matrix22 = com.operations.Matrix.MatrixOperations.scalarMultiply(matrix19, (double) 2);
        double double23 = com.operations.Matrix.MatrixUtils.frobeniusNorm(matrix19);
        int int24 = matrix19.getRows();
        com.operations.Matrix.Matrix matrix25 = com.operations.Matrix.MatrixOperations.transpose(matrix19);
        com.operations.Matrix.Matrix matrix26 = com.operations.Matrix.MatrixOperations.multiply(matrix15, matrix25);
        com.operations.Matrix.Matrix matrix27 = com.operations.Matrix.MatrixOperations.multiply(matrix12, matrix25);
        com.operations.Matrix.Matrix matrix28 = com.operations.Matrix.MatrixOperations.transpose(matrix27);
        com.operations.Matrix.Matrix matrix29 = com.operations.Matrix.MatrixOperations.add(matrix7, matrix28);
        boolean boolean30 = com.operations.Matrix.MatrixUtils.isSymmetric(matrix7);
        com.operations.Matrix.Matrix matrix31 = com.operations.Matrix.MatrixOperations.subtract(matrix3, matrix7);
        org.junit.Assert.assertNotNull(matrix2);
        org.junit.Assert.assertNotNull(matrix3);
        org.junit.Assert.assertNotNull(matrix7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNotNull(matrix9);
        org.junit.Assert.assertNotNull(matrix12);
        org.junit.Assert.assertNotNull(matrix15);
        org.junit.Assert.assertNotNull(matrixArray16);
        org.junit.Assert.assertNotNull(matrix19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 2 + "'", int20 == 2);
        org.junit.Assert.assertNotNull(matrix22);
        org.junit.Assert.assertTrue("'" + double23 + "' != '" + 10.0d + "'", double23 == 10.0d);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 2 + "'", int24 == 2);
        org.junit.Assert.assertNotNull(matrix25);
        org.junit.Assert.assertNotNull(matrix26);
        org.junit.Assert.assertNotNull(matrix27);
        org.junit.Assert.assertNotNull(matrix28);
        org.junit.Assert.assertNotNull(matrix29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertNotNull(matrix31);
    }

    @Test
    public void test3108() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3108");
        com.operations.Matrix.Matrix matrix2 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0L, (double) (byte) 10);
        double[] doubleArray5 = new double[] { 10, 'a' };
        double[] doubleArray8 = new double[] { 10, 'a' };
        double[][] doubleArray9 = new double[][] { doubleArray5, doubleArray8 };
        com.operations.Matrix.Matrix matrix10 = new com.operations.Matrix.Matrix(doubleArray9);
        int int11 = matrix10.getCols();
        int int12 = matrix10.getCols();
        int int13 = matrix10.getCols();
        com.operations.Matrix.Matrix[] matrixArray14 = com.operations.Matrix.MatrixDecompositions.luDecomposition(matrix10);
        com.operations.Matrix.Matrix matrix15 = com.operations.Matrix.MatrixOperations.multiply(matrix2, matrix10);
        com.operations.Matrix.Matrix matrix17 = com.operations.Matrix.MatrixTransformations.rotate2D((double) (short) 100);
        boolean boolean19 = com.operations.Matrix.MatrixUtils.compare(matrix10, matrix17, (double) (byte) 0);
        boolean boolean20 = com.operations.Matrix.MatrixUtils.isSymmetric(matrix17);
        boolean boolean21 = com.operations.Matrix.MatrixUtils.isSquare(matrix17);
        com.operations.Matrix.Matrix matrix23 = com.operations.Matrix.MatrixOperations.scalarMultiply(matrix17, (double) 2);
        com.operations.Matrix.Matrix matrix24 = com.operations.Matrix.MatrixOperations.transpose(matrix23);
        com.operations.Matrix.Matrix matrix27 = com.operations.Matrix.MatrixTransformations.project2D(137.90576492663388d, (double) (byte) 0);
        com.operations.Matrix.Matrix matrix28 = com.operations.Matrix.MatrixOperations.multiply(matrix23, matrix27);
        int int29 = matrix28.getRows();
        org.junit.Assert.assertNotNull(matrix2);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertArrayEquals(doubleArray5, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertArrayEquals(doubleArray8, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 2 + "'", int11 == 2);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 2 + "'", int12 == 2);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 2 + "'", int13 == 2);
        org.junit.Assert.assertNotNull(matrixArray14);
        org.junit.Assert.assertNotNull(matrix15);
        org.junit.Assert.assertNotNull(matrix17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertNotNull(matrix23);
        org.junit.Assert.assertNotNull(matrix24);
        org.junit.Assert.assertNotNull(matrix27);
        org.junit.Assert.assertNotNull(matrix28);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 2 + "'", int29 == 2);
    }

    @Test
    public void test3109() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3109");
        com.operations.Matrix.Matrix matrix2 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0L, (double) (byte) 10);
        double[] doubleArray5 = new double[] { 10, 'a' };
        double[] doubleArray8 = new double[] { 10, 'a' };
        double[][] doubleArray9 = new double[][] { doubleArray5, doubleArray8 };
        com.operations.Matrix.Matrix matrix10 = new com.operations.Matrix.Matrix(doubleArray9);
        int int11 = matrix10.getCols();
        int int12 = matrix10.getCols();
        int int13 = matrix10.getCols();
        com.operations.Matrix.Matrix[] matrixArray14 = com.operations.Matrix.MatrixDecompositions.luDecomposition(matrix10);
        com.operations.Matrix.Matrix matrix15 = com.operations.Matrix.MatrixOperations.multiply(matrix2, matrix10);
        com.operations.Matrix.Matrix matrix17 = com.operations.Matrix.MatrixTransformations.rotate2D((double) (short) 100);
        boolean boolean19 = com.operations.Matrix.MatrixUtils.compare(matrix10, matrix17, (double) (byte) 0);
        double[] doubleArray22 = new double[] { 10, 'a' };
        double[] doubleArray25 = new double[] { 10, 'a' };
        double[][] doubleArray26 = new double[][] { doubleArray22, doubleArray25 };
        com.operations.Matrix.Matrix matrix27 = new com.operations.Matrix.Matrix(doubleArray26);
        com.operations.Matrix.Matrix matrix28 = new com.operations.Matrix.Matrix(doubleArray26);
        com.operations.Matrix.Matrix matrix29 = new com.operations.Matrix.Matrix(doubleArray26);
        boolean boolean31 = com.operations.Matrix.MatrixUtils.compare(matrix10, matrix29, (double) (-1));
        double[][] doubleArray32 = matrix29.getData();
        com.operations.Matrix.Matrix[] matrixArray33 = com.operations.Matrix.MatrixDecompositions.luDecomposition(matrix29);
        com.operations.Matrix.Matrix matrix35 = com.operations.Matrix.MatrixTransformations.rotate2D((double) '4');
        double[] doubleArray38 = new double[] { 10, 'a' };
        double[] doubleArray41 = new double[] { 10, 'a' };
        double[][] doubleArray42 = new double[][] { doubleArray38, doubleArray41 };
        com.operations.Matrix.Matrix matrix43 = new com.operations.Matrix.Matrix(doubleArray42);
        com.operations.Matrix.Matrix matrix44 = new com.operations.Matrix.Matrix(doubleArray42);
        com.operations.Matrix.Matrix matrix46 = com.operations.Matrix.MatrixTransformations.rotate2D((double) (short) 100);
        double[] doubleArray49 = new double[] { 137.90576492663388d, (byte) -1 };
        double[] doubleArray50 = com.operations.Matrix.MatrixSolver.solveGaussian(matrix46, doubleArray49);
        com.operations.Matrix.Matrix matrix51 = com.operations.Matrix.MatrixOperations.add(matrix44, matrix46);
        boolean boolean52 = com.operations.Matrix.MatrixUtils.isSymmetric(matrix51);
        boolean boolean54 = com.operations.Matrix.MatrixUtils.compare(matrix35, matrix51, 364.0054944640259d);
        com.operations.Matrix.Matrix[] matrixArray55 = com.operations.Matrix.MatrixDecompositions.luDecomposition(matrix51);
        com.operations.Matrix.Matrix matrix56 = com.operations.Matrix.MatrixOperations.add(matrix29, matrix51);
        int int57 = matrix51.getCols();
        org.junit.Assert.assertNotNull(matrix2);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertArrayEquals(doubleArray5, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertArrayEquals(doubleArray8, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 2 + "'", int11 == 2);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 2 + "'", int12 == 2);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 2 + "'", int13 == 2);
        org.junit.Assert.assertNotNull(matrixArray14);
        org.junit.Assert.assertNotNull(matrix15);
        org.junit.Assert.assertNotNull(matrix17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertArrayEquals(doubleArray22, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertArrayEquals(doubleArray25, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertNotNull(matrixArray33);
        org.junit.Assert.assertNotNull(matrix35);
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertArrayEquals(doubleArray38, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertArrayEquals(doubleArray41, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertNotNull(matrix46);
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertArrayEquals(doubleArray49, new double[] { 137.90576492663388d, (-1.0d) }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertArrayEquals(doubleArray50, new double[] { (-24.931892522286255d), (-135.63701830716116d) }, 1.0E-15);
        org.junit.Assert.assertNotNull(matrix51);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + true + "'", boolean54 == true);
        org.junit.Assert.assertNotNull(matrixArray55);
        org.junit.Assert.assertNotNull(matrix56);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 2 + "'", int57 == 2);
    }

    @Test
    public void test3110() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3110");
        com.operations.Matrix.Matrix matrix2 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0L, (double) (byte) 10);
        double[] doubleArray5 = new double[] { 10, 'a' };
        double[] doubleArray8 = new double[] { 10, 'a' };
        double[][] doubleArray9 = new double[][] { doubleArray5, doubleArray8 };
        com.operations.Matrix.Matrix matrix10 = new com.operations.Matrix.Matrix(doubleArray9);
        int int11 = matrix10.getCols();
        int int12 = matrix10.getCols();
        int int13 = matrix10.getCols();
        com.operations.Matrix.Matrix[] matrixArray14 = com.operations.Matrix.MatrixDecompositions.luDecomposition(matrix10);
        com.operations.Matrix.Matrix matrix15 = com.operations.Matrix.MatrixOperations.multiply(matrix2, matrix10);
        com.operations.Matrix.Matrix matrix17 = com.operations.Matrix.MatrixTransformations.rotate2D((double) (short) 100);
        boolean boolean19 = com.operations.Matrix.MatrixUtils.compare(matrix10, matrix17, (double) (byte) 0);
        com.operations.Matrix.Matrix matrix20 = com.operations.Matrix.MatrixOperations.transpose(matrix10);
        com.operations.Matrix.Matrix matrix23 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0L, (double) (byte) 10);
        double[] doubleArray26 = new double[] { 10, 'a' };
        double[] doubleArray29 = new double[] { 10, 'a' };
        double[][] doubleArray30 = new double[][] { doubleArray26, doubleArray29 };
        com.operations.Matrix.Matrix matrix31 = new com.operations.Matrix.Matrix(doubleArray30);
        int int32 = matrix31.getCols();
        int int33 = matrix31.getCols();
        int int34 = matrix31.getCols();
        com.operations.Matrix.Matrix[] matrixArray35 = com.operations.Matrix.MatrixDecompositions.luDecomposition(matrix31);
        com.operations.Matrix.Matrix matrix36 = com.operations.Matrix.MatrixOperations.multiply(matrix23, matrix31);
        com.operations.Matrix.Matrix matrix38 = com.operations.Matrix.MatrixTransformations.rotate2D((double) (short) 100);
        boolean boolean40 = com.operations.Matrix.MatrixUtils.compare(matrix31, matrix38, (double) (byte) 0);
        double[] doubleArray43 = new double[] { 10, 'a' };
        double[] doubleArray46 = new double[] { 10, 'a' };
        double[][] doubleArray47 = new double[][] { doubleArray43, doubleArray46 };
        com.operations.Matrix.Matrix matrix48 = new com.operations.Matrix.Matrix(doubleArray47);
        com.operations.Matrix.Matrix matrix49 = new com.operations.Matrix.Matrix(doubleArray47);
        com.operations.Matrix.Matrix matrix50 = new com.operations.Matrix.Matrix(doubleArray47);
        boolean boolean52 = com.operations.Matrix.MatrixUtils.compare(matrix31, matrix50, (double) (-1));
        com.operations.Matrix.Matrix matrix55 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0L, (double) (byte) 10);
        double[] doubleArray58 = new double[] { 10, 'a' };
        double[] doubleArray61 = new double[] { 10, 'a' };
        double[][] doubleArray62 = new double[][] { doubleArray58, doubleArray61 };
        com.operations.Matrix.Matrix matrix63 = new com.operations.Matrix.Matrix(doubleArray62);
        int int64 = matrix63.getCols();
        int int65 = matrix63.getCols();
        int int66 = matrix63.getCols();
        com.operations.Matrix.Matrix[] matrixArray67 = com.operations.Matrix.MatrixDecompositions.luDecomposition(matrix63);
        com.operations.Matrix.Matrix matrix68 = com.operations.Matrix.MatrixOperations.multiply(matrix55, matrix63);
        boolean boolean70 = com.operations.Matrix.MatrixUtils.compare(matrix50, matrix55, (double) 10L);
        boolean boolean72 = com.operations.Matrix.MatrixUtils.compare(matrix20, matrix50, (double) 100L);
        double double73 = com.operations.Matrix.MatrixUtils.frobeniusNorm(matrix50);
        int int74 = matrix50.getRows();
        org.junit.Assert.assertNotNull(matrix2);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertArrayEquals(doubleArray5, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertArrayEquals(doubleArray8, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 2 + "'", int11 == 2);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 2 + "'", int12 == 2);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 2 + "'", int13 == 2);
        org.junit.Assert.assertNotNull(matrixArray14);
        org.junit.Assert.assertNotNull(matrix15);
        org.junit.Assert.assertNotNull(matrix17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(matrix20);
        org.junit.Assert.assertNotNull(matrix23);
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertArrayEquals(doubleArray26, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertArrayEquals(doubleArray29, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 2 + "'", int32 == 2);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 2 + "'", int33 == 2);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 2 + "'", int34 == 2);
        org.junit.Assert.assertNotNull(matrixArray35);
        org.junit.Assert.assertNotNull(matrix36);
        org.junit.Assert.assertNotNull(matrix38);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertArrayEquals(doubleArray43, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray46);
        org.junit.Assert.assertArrayEquals(doubleArray46, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(matrix55);
        org.junit.Assert.assertNotNull(doubleArray58);
        org.junit.Assert.assertArrayEquals(doubleArray58, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray61);
        org.junit.Assert.assertArrayEquals(doubleArray61, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray62);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 2 + "'", int64 == 2);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 2 + "'", int65 == 2);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 2 + "'", int66 == 2);
        org.junit.Assert.assertNotNull(matrixArray67);
        org.junit.Assert.assertNotNull(matrix68);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + true + "'", boolean72 == true);
        org.junit.Assert.assertTrue("'" + double73 + "' != '" + 137.90576492663388d + "'", double73 == 137.90576492663388d);
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 2 + "'", int74 == 2);
    }

    @Test
    public void test3111() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3111");
        com.operations.Matrix.Matrix matrix2 = com.operations.Matrix.MatrixTransformations.scale2D((double) 35, 0.0d);
        com.operations.Matrix.Matrix matrix5 = com.operations.Matrix.MatrixTransformations.scale2D((double) (byte) 100, 350.0d);
        com.operations.Matrix.Matrix matrix8 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0L, (double) (byte) 10);
        double[] doubleArray11 = new double[] { 10, 'a' };
        double[] doubleArray14 = new double[] { 10, 'a' };
        double[][] doubleArray15 = new double[][] { doubleArray11, doubleArray14 };
        com.operations.Matrix.Matrix matrix16 = new com.operations.Matrix.Matrix(doubleArray15);
        int int17 = matrix16.getCols();
        int int18 = matrix16.getCols();
        int int19 = matrix16.getCols();
        com.operations.Matrix.Matrix[] matrixArray20 = com.operations.Matrix.MatrixDecompositions.luDecomposition(matrix16);
        com.operations.Matrix.Matrix matrix21 = com.operations.Matrix.MatrixOperations.multiply(matrix8, matrix16);
        com.operations.Matrix.Matrix matrix23 = com.operations.Matrix.MatrixTransformations.rotate2D((double) (short) 100);
        boolean boolean25 = com.operations.Matrix.MatrixUtils.compare(matrix16, matrix23, (double) (byte) 0);
        double[] doubleArray28 = new double[] { 10, 'a' };
        double[] doubleArray31 = new double[] { 10, 'a' };
        double[][] doubleArray32 = new double[][] { doubleArray28, doubleArray31 };
        com.operations.Matrix.Matrix matrix33 = new com.operations.Matrix.Matrix(doubleArray32);
        com.operations.Matrix.Matrix matrix34 = com.operations.Matrix.MatrixOperations.multiply(matrix16, matrix33);
        com.operations.Matrix.Matrix matrix35 = com.operations.Matrix.MatrixOperations.multiply(matrix5, matrix34);
        com.operations.Matrix.Matrix matrix36 = com.operations.Matrix.MatrixOperations.subtract(matrix2, matrix5);
        double[] doubleArray39 = new double[] { 10, 'a' };
        double[] doubleArray42 = new double[] { 10, 'a' };
        double[][] doubleArray43 = new double[][] { doubleArray39, doubleArray42 };
        com.operations.Matrix.Matrix matrix44 = new com.operations.Matrix.Matrix(doubleArray43);
        int int45 = matrix44.getCols();
        int int46 = matrix44.getCols();
        boolean boolean47 = com.operations.Matrix.MatrixUtils.isSquare(matrix44);
        com.operations.Matrix.Matrix matrix48 = com.operations.Matrix.MatrixDecompositions.choleskyDecomposition(matrix44);
        com.operations.Matrix.Matrix matrix51 = com.operations.Matrix.MatrixTransformations.project2D(0.0d, (double) 0);
        com.operations.Matrix.Matrix matrix52 = com.operations.Matrix.MatrixOperations.subtract(matrix48, matrix51);
        com.operations.Matrix.Matrix matrix53 = com.operations.Matrix.MatrixOperations.transpose(matrix51);
        int int54 = matrix53.getRows();
        com.operations.Matrix.Matrix matrix55 = com.operations.Matrix.MatrixOperations.subtract(matrix5, matrix53);
        org.junit.Assert.assertNotNull(matrix2);
        org.junit.Assert.assertNotNull(matrix5);
        org.junit.Assert.assertNotNull(matrix8);
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertArrayEquals(doubleArray11, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertArrayEquals(doubleArray14, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 2 + "'", int17 == 2);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 2 + "'", int18 == 2);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 2 + "'", int19 == 2);
        org.junit.Assert.assertNotNull(matrixArray20);
        org.junit.Assert.assertNotNull(matrix21);
        org.junit.Assert.assertNotNull(matrix23);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertArrayEquals(doubleArray28, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertArrayEquals(doubleArray31, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertNotNull(matrix34);
        org.junit.Assert.assertNotNull(matrix35);
        org.junit.Assert.assertNotNull(matrix36);
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertArrayEquals(doubleArray39, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertArrayEquals(doubleArray42, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 2 + "'", int45 == 2);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 2 + "'", int46 == 2);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        org.junit.Assert.assertNotNull(matrix48);
        org.junit.Assert.assertNotNull(matrix51);
        org.junit.Assert.assertNotNull(matrix52);
        org.junit.Assert.assertNotNull(matrix53);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 2 + "'", int54 == 2);
        org.junit.Assert.assertNotNull(matrix55);
    }

    @Test
    public void test3112() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3112");
        com.operations.Matrix.Matrix matrix2 = com.operations.Matrix.MatrixTransformations.scale2D(52.009614495783374d, (double) 0.0f);
        double double3 = com.operations.Matrix.MatrixUtils.frobeniusNorm(matrix2);
        double[] doubleArray6 = new double[] { 10, 'a' };
        double[] doubleArray9 = new double[] { 10, 'a' };
        double[][] doubleArray10 = new double[][] { doubleArray6, doubleArray9 };
        com.operations.Matrix.Matrix matrix11 = new com.operations.Matrix.Matrix(doubleArray10);
        int int12 = matrix11.getCols();
        int int13 = matrix11.getCols();
        boolean boolean14 = com.operations.Matrix.MatrixUtils.isSquare(matrix11);
        com.operations.Matrix.Matrix matrix15 = com.operations.Matrix.MatrixDecompositions.choleskyDecomposition(matrix11);
        com.operations.Matrix.Matrix matrix18 = com.operations.Matrix.MatrixTransformations.project2D(0.0d, (double) 0);
        com.operations.Matrix.Matrix matrix19 = com.operations.Matrix.MatrixOperations.subtract(matrix15, matrix18);
        com.operations.Matrix.Matrix matrix20 = com.operations.Matrix.MatrixOperations.multiply(matrix2, matrix19);
        com.operations.Matrix.Matrix matrix23 = new com.operations.Matrix.Matrix(32, (int) (short) 100);
        boolean boolean25 = com.operations.Matrix.MatrixUtils.compare(matrix2, matrix23, 146.4308710620817d);
        org.junit.Assert.assertNotNull(matrix2);
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + 52.009614495783374d + "'", double3 == 52.009614495783374d);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertArrayEquals(doubleArray6, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertArrayEquals(doubleArray9, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 2 + "'", int12 == 2);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 2 + "'", int13 == 2);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNotNull(matrix15);
        org.junit.Assert.assertNotNull(matrix18);
        org.junit.Assert.assertNotNull(matrix19);
        org.junit.Assert.assertNotNull(matrix20);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
    }

    @Test
    public void test3113() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3113");
        com.operations.Matrix.Matrix matrix5 = com.operations.Matrix.MatrixUtils.generateRandomMatrix(10, (int) (short) 10, 32, (-1), 0L);
        matrix5.print();
        // The following exception was thrown during execution in test generation
        try {
            matrix5.setValue((int) (byte) 1, 10, 147.0076152978997d);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: Index 10 out of bounds for length 10");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(matrix5);
    }

    @Test
    public void test3114() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3114");
        com.operations.Matrix.Matrix matrix2 = com.operations.Matrix.MatrixTransformations.project2D((double) (-1.0f), 35.02855977627399d);
        org.junit.Assert.assertNotNull(matrix2);
    }

    @Test
    public void test3115() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3115");
        // The following exception was thrown during execution in test generation
        try {
            com.operations.Matrix.Matrix matrix4 = com.operations.Matrix.MatrixUtils.generateRandomMatrix((-1), 0, (int) '#', (int) (byte) 0);
            org.junit.Assert.fail("Expected exception of type java.lang.NegativeArraySizeException; message: -1");
        } catch (java.lang.NegativeArraySizeException e) {
            // Expected exception.
        }
    }

    @Test
    public void test3116() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3116");
        com.operations.Matrix.Matrix matrix2 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0L, (double) (byte) 10);
        double[] doubleArray5 = new double[] { 10, 'a' };
        double[] doubleArray8 = new double[] { 10, 'a' };
        double[][] doubleArray9 = new double[][] { doubleArray5, doubleArray8 };
        com.operations.Matrix.Matrix matrix10 = new com.operations.Matrix.Matrix(doubleArray9);
        int int11 = matrix10.getCols();
        int int12 = matrix10.getCols();
        int int13 = matrix10.getCols();
        com.operations.Matrix.Matrix[] matrixArray14 = com.operations.Matrix.MatrixDecompositions.luDecomposition(matrix10);
        com.operations.Matrix.Matrix matrix15 = com.operations.Matrix.MatrixOperations.multiply(matrix2, matrix10);
        com.operations.Matrix.Matrix matrix17 = com.operations.Matrix.MatrixTransformations.rotate2D((double) (short) 100);
        boolean boolean19 = com.operations.Matrix.MatrixUtils.compare(matrix10, matrix17, (double) (byte) 0);
        double[] doubleArray22 = new double[] { 10, 'a' };
        double[] doubleArray25 = new double[] { 10, 'a' };
        double[][] doubleArray26 = new double[][] { doubleArray22, doubleArray25 };
        com.operations.Matrix.Matrix matrix27 = new com.operations.Matrix.Matrix(doubleArray26);
        com.operations.Matrix.Matrix matrix28 = com.operations.Matrix.MatrixOperations.multiply(matrix10, matrix27);
        double double29 = com.operations.Matrix.MatrixUtils.frobeniusNorm(matrix27);
        int int30 = matrix27.getRows();
        com.operations.Matrix.Matrix matrix32 = com.operations.Matrix.MatrixTransformations.rotate2D((double) 1.0f);
        com.operations.Matrix.Matrix matrix35 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0L, (double) (byte) 10);
        int int36 = matrix35.getRows();
        com.operations.Matrix.Matrix matrix38 = com.operations.Matrix.MatrixOperations.scalarMultiply(matrix35, (double) 2);
        double double39 = com.operations.Matrix.MatrixUtils.frobeniusNorm(matrix35);
        com.operations.Matrix.Matrix matrix42 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0L, (double) (byte) 10);
        int int43 = matrix42.getRows();
        com.operations.Matrix.Matrix matrix45 = com.operations.Matrix.MatrixOperations.scalarMultiply(matrix42, (double) 2);
        com.operations.Matrix.Matrix matrix46 = com.operations.Matrix.MatrixOperations.subtract(matrix35, matrix45);
        com.operations.Matrix.Matrix matrix47 = com.operations.Matrix.MatrixOperations.add(matrix32, matrix45);
        matrix32.print();
        double[] doubleArray51 = new double[] { 10, 'a' };
        double[] doubleArray54 = new double[] { 10, 'a' };
        double[][] doubleArray55 = new double[][] { doubleArray51, doubleArray54 };
        com.operations.Matrix.Matrix matrix56 = new com.operations.Matrix.Matrix(doubleArray55);
        com.operations.Matrix.Matrix matrix57 = com.operations.Matrix.MatrixOperations.transpose(matrix56);
        com.operations.Matrix.Matrix matrix60 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0L, (double) (byte) 10);
        int int61 = matrix60.getRows();
        com.operations.Matrix.Matrix matrix67 = com.operations.Matrix.MatrixUtils.generateRandomMatrix(100, (int) (byte) 1, (int) '#', (int) '#', 1L);
        boolean boolean69 = com.operations.Matrix.MatrixUtils.compare(matrix60, matrix67, (double) 1.0f);
        com.operations.Matrix.Matrix matrix71 = com.operations.Matrix.MatrixOperations.scalarMultiply(matrix60, (double) 1L);
        matrix60.print();
        com.operations.Matrix.Matrix matrix73 = com.operations.Matrix.MatrixOperations.multiply(matrix57, matrix60);
        com.operations.Matrix.Matrix matrix74 = com.operations.Matrix.MatrixOperations.multiply(matrix32, matrix60);
        com.operations.Matrix.Matrix matrix76 = com.operations.Matrix.MatrixTransformations.rotate2D((double) 1.0f);
        boolean boolean78 = com.operations.Matrix.MatrixUtils.compare(matrix60, matrix76, (double) (short) 0);
        com.operations.Matrix.Matrix matrix80 = com.operations.Matrix.MatrixOperations.scalarMultiply(matrix60, 1.0d);
        boolean boolean82 = com.operations.Matrix.MatrixUtils.compare(matrix27, matrix60, (double) 97);
        boolean boolean83 = com.operations.Matrix.MatrixUtils.isSquare(matrix27);
        org.junit.Assert.assertNotNull(matrix2);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertArrayEquals(doubleArray5, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertArrayEquals(doubleArray8, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 2 + "'", int11 == 2);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 2 + "'", int12 == 2);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 2 + "'", int13 == 2);
        org.junit.Assert.assertNotNull(matrixArray14);
        org.junit.Assert.assertNotNull(matrix15);
        org.junit.Assert.assertNotNull(matrix17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertArrayEquals(doubleArray22, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertArrayEquals(doubleArray25, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertNotNull(matrix28);
        org.junit.Assert.assertTrue("'" + double29 + "' != '" + 137.90576492663388d + "'", double29 == 137.90576492663388d);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 2 + "'", int30 == 2);
        org.junit.Assert.assertNotNull(matrix32);
        org.junit.Assert.assertNotNull(matrix35);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 2 + "'", int36 == 2);
        org.junit.Assert.assertNotNull(matrix38);
        org.junit.Assert.assertTrue("'" + double39 + "' != '" + 10.0d + "'", double39 == 10.0d);
        org.junit.Assert.assertNotNull(matrix42);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 2 + "'", int43 == 2);
        org.junit.Assert.assertNotNull(matrix45);
        org.junit.Assert.assertNotNull(matrix46);
        org.junit.Assert.assertNotNull(matrix47);
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertArrayEquals(doubleArray51, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray54);
        org.junit.Assert.assertArrayEquals(doubleArray54, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertNotNull(matrix57);
        org.junit.Assert.assertNotNull(matrix60);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 2 + "'", int61 == 2);
        org.junit.Assert.assertNotNull(matrix67);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertNotNull(matrix71);
        org.junit.Assert.assertNotNull(matrix73);
        org.junit.Assert.assertNotNull(matrix74);
        org.junit.Assert.assertNotNull(matrix76);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertNotNull(matrix80);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + true + "'", boolean82 == true);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + true + "'", boolean83 == true);
    }

    @Test
    public void test3117() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3117");
        com.operations.Matrix.Matrix matrix2 = com.operations.Matrix.MatrixTransformations.project2D(20.0d, 260.95643973734866d);
        org.junit.Assert.assertNotNull(matrix2);
    }

    @Test
    public void test3118() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3118");
        com.operations.Matrix.Matrix matrix2 = new com.operations.Matrix.Matrix(97, (int) (short) 10);
    }

    @Test
    public void test3119() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3119");
        com.operations.Matrix.Matrix matrix2 = com.operations.Matrix.MatrixTransformations.project2D((double) '4', 137.15495886388925d);
        com.operations.Matrix.Matrix matrix4 = com.operations.Matrix.MatrixTransformations.rotate2D((double) 1.0f);
        com.operations.Matrix.Matrix matrix7 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0L, (double) (byte) 10);
        int int8 = matrix7.getRows();
        com.operations.Matrix.Matrix matrix10 = com.operations.Matrix.MatrixOperations.scalarMultiply(matrix7, (double) 2);
        double double11 = com.operations.Matrix.MatrixUtils.frobeniusNorm(matrix7);
        com.operations.Matrix.Matrix matrix14 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0L, (double) (byte) 10);
        int int15 = matrix14.getRows();
        com.operations.Matrix.Matrix matrix17 = com.operations.Matrix.MatrixOperations.scalarMultiply(matrix14, (double) 2);
        com.operations.Matrix.Matrix matrix18 = com.operations.Matrix.MatrixOperations.subtract(matrix7, matrix17);
        com.operations.Matrix.Matrix matrix19 = com.operations.Matrix.MatrixOperations.add(matrix4, matrix17);
        com.operations.Matrix.Matrix[] matrixArray20 = com.operations.Matrix.MatrixDecompositions.luDecomposition(matrix17);
        boolean boolean21 = com.operations.Matrix.MatrixUtils.isSquare(matrix17);
        com.operations.Matrix.Matrix matrix22 = com.operations.Matrix.MatrixOperations.transpose(matrix17);
        com.operations.Matrix.Matrix matrix24 = com.operations.Matrix.MatrixOperations.scalarMultiply(matrix17, (double) ' ');
        com.operations.Matrix.Matrix matrix27 = com.operations.Matrix.MatrixTransformations.project2D(0.0d, (double) 0);
        double[][] doubleArray28 = matrix27.getData();
        com.operations.Matrix.Matrix matrix29 = new com.operations.Matrix.Matrix(doubleArray28);
        com.operations.Matrix.Matrix matrix30 = new com.operations.Matrix.Matrix(doubleArray28);
        com.operations.Matrix.Matrix matrix31 = com.operations.Matrix.MatrixOperations.multiply(matrix17, matrix30);
        com.operations.Matrix.Matrix matrix32 = com.operations.Matrix.MatrixOperations.transpose(matrix31);
        matrix31.print();
        com.operations.Matrix.Matrix matrix34 = com.operations.Matrix.MatrixOperations.transpose(matrix31);
        com.operations.Matrix.Matrix matrix35 = com.operations.Matrix.MatrixOperations.subtract(matrix2, matrix31);
        boolean boolean36 = com.operations.Matrix.MatrixUtils.isSymmetric(matrix31);
        // The following exception was thrown during execution in test generation
        try {
            double double39 = matrix31.getValue((int) '#', (int) (short) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(matrix2);
        org.junit.Assert.assertNotNull(matrix4);
        org.junit.Assert.assertNotNull(matrix7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 2 + "'", int8 == 2);
        org.junit.Assert.assertNotNull(matrix10);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 10.0d + "'", double11 == 10.0d);
        org.junit.Assert.assertNotNull(matrix14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 2 + "'", int15 == 2);
        org.junit.Assert.assertNotNull(matrix17);
        org.junit.Assert.assertNotNull(matrix18);
        org.junit.Assert.assertNotNull(matrix19);
        org.junit.Assert.assertNotNull(matrixArray20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertNotNull(matrix22);
        org.junit.Assert.assertNotNull(matrix24);
        org.junit.Assert.assertNotNull(matrix27);
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertNotNull(matrix31);
        org.junit.Assert.assertNotNull(matrix32);
        org.junit.Assert.assertNotNull(matrix34);
        org.junit.Assert.assertNotNull(matrix35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
    }

    @Test
    public void test3120() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3120");
        com.operations.Matrix.Matrix matrix1 = com.operations.Matrix.MatrixTransformations.rotate2D(100.0d);
        int int2 = matrix1.getCols();
        matrix1.print();
        com.operations.Matrix.Matrix matrix5 = com.operations.Matrix.MatrixOperations.scalarMultiply(matrix1, (double) (byte) 1);
        boolean boolean6 = com.operations.Matrix.MatrixUtils.isSymmetric(matrix1);
        matrix1.print();
        org.junit.Assert.assertNotNull(matrix1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 2 + "'", int2 == 2);
        org.junit.Assert.assertNotNull(matrix5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
    }

    @Test
    public void test3121() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3121");
        com.operations.Matrix.Matrix matrix1 = com.operations.Matrix.MatrixTransformations.rotate2D(100.0d);
        int int2 = matrix1.getCols();
        int int3 = matrix1.getRows();
        double[] doubleArray6 = new double[] { 10, 'a' };
        double[] doubleArray9 = new double[] { 10, 'a' };
        double[][] doubleArray10 = new double[][] { doubleArray6, doubleArray9 };
        com.operations.Matrix.Matrix matrix11 = new com.operations.Matrix.Matrix(doubleArray10);
        com.operations.Matrix.Matrix matrix12 = com.operations.Matrix.MatrixOperations.transpose(matrix11);
        com.operations.Matrix.Matrix matrix15 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0L, (double) (byte) 10);
        int int16 = matrix15.getRows();
        com.operations.Matrix.Matrix matrix22 = com.operations.Matrix.MatrixUtils.generateRandomMatrix(100, (int) (byte) 1, (int) '#', (int) '#', 1L);
        boolean boolean24 = com.operations.Matrix.MatrixUtils.compare(matrix15, matrix22, (double) 1.0f);
        com.operations.Matrix.Matrix matrix26 = com.operations.Matrix.MatrixOperations.scalarMultiply(matrix15, (double) 1L);
        matrix15.print();
        com.operations.Matrix.Matrix matrix28 = com.operations.Matrix.MatrixOperations.multiply(matrix12, matrix15);
        boolean boolean29 = com.operations.Matrix.MatrixUtils.isSymmetric(matrix15);
        com.operations.Matrix.Matrix matrix30 = com.operations.Matrix.MatrixOperations.subtract(matrix1, matrix15);
        com.operations.Matrix.Matrix matrix32 = com.operations.Matrix.MatrixOperations.scalarMultiply(matrix30, (double) 1);
        double double33 = com.operations.Matrix.MatrixUtils.frobeniusNorm(matrix32);
        org.junit.Assert.assertNotNull(matrix1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 2 + "'", int2 == 2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 2 + "'", int3 == 2);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertArrayEquals(doubleArray6, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertArrayEquals(doubleArray9, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertNotNull(matrix12);
        org.junit.Assert.assertNotNull(matrix15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 2 + "'", int16 == 2);
        org.junit.Assert.assertNotNull(matrix22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(matrix26);
        org.junit.Assert.assertNotNull(matrix28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertNotNull(matrix30);
        org.junit.Assert.assertNotNull(matrix32);
        org.junit.Assert.assertTrue("'" + double33 + "' != '" + 10.270003094125075d + "'", double33 == 10.270003094125075d);
    }

    @Test
    public void test3122() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3122");
        com.operations.Matrix.Matrix matrix2 = com.operations.Matrix.MatrixTransformations.scale2D((double) 100L, 1.0d);
        com.operations.Matrix.Matrix matrix3 = com.operations.Matrix.MatrixOperations.transpose(matrix2);
        com.operations.Matrix.Matrix matrix6 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0L, (double) (byte) 10);
        double[] doubleArray9 = new double[] { 10, 'a' };
        double[] doubleArray12 = new double[] { 10, 'a' };
        double[][] doubleArray13 = new double[][] { doubleArray9, doubleArray12 };
        com.operations.Matrix.Matrix matrix14 = new com.operations.Matrix.Matrix(doubleArray13);
        int int15 = matrix14.getCols();
        int int16 = matrix14.getCols();
        int int17 = matrix14.getCols();
        com.operations.Matrix.Matrix[] matrixArray18 = com.operations.Matrix.MatrixDecompositions.luDecomposition(matrix14);
        com.operations.Matrix.Matrix matrix19 = com.operations.Matrix.MatrixOperations.multiply(matrix6, matrix14);
        int int20 = matrix14.getRows();
        boolean boolean22 = com.operations.Matrix.MatrixUtils.compare(matrix2, matrix14, (-1.0d));
        // The following exception was thrown during execution in test generation
        try {
            matrix2.setValue(52, (int) '4', 365.8209944768069d);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: Index 52 out of bounds for length 2");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(matrix2);
        org.junit.Assert.assertNotNull(matrix3);
        org.junit.Assert.assertNotNull(matrix6);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertArrayEquals(doubleArray9, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertArrayEquals(doubleArray12, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 2 + "'", int15 == 2);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 2 + "'", int16 == 2);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 2 + "'", int17 == 2);
        org.junit.Assert.assertNotNull(matrixArray18);
        org.junit.Assert.assertNotNull(matrix19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 2 + "'", int20 == 2);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
    }

    @Test
    public void test3123() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3123");
        com.operations.Matrix.Matrix matrix2 = com.operations.Matrix.MatrixTransformations.scale2D(52.009614495783374d, (double) 0.0f);
        double double3 = com.operations.Matrix.MatrixUtils.frobeniusNorm(matrix2);
        double[] doubleArray6 = new double[] { 10, 'a' };
        double[] doubleArray9 = new double[] { 10, 'a' };
        double[][] doubleArray10 = new double[][] { doubleArray6, doubleArray9 };
        com.operations.Matrix.Matrix matrix11 = new com.operations.Matrix.Matrix(doubleArray10);
        int int12 = matrix11.getCols();
        int int13 = matrix11.getCols();
        boolean boolean14 = com.operations.Matrix.MatrixUtils.isSquare(matrix11);
        com.operations.Matrix.Matrix matrix15 = com.operations.Matrix.MatrixDecompositions.choleskyDecomposition(matrix11);
        com.operations.Matrix.Matrix matrix18 = com.operations.Matrix.MatrixTransformations.project2D(0.0d, (double) 0);
        com.operations.Matrix.Matrix matrix19 = com.operations.Matrix.MatrixOperations.subtract(matrix15, matrix18);
        com.operations.Matrix.Matrix matrix20 = com.operations.Matrix.MatrixOperations.multiply(matrix2, matrix19);
        double double21 = com.operations.Matrix.MatrixUtils.frobeniusNorm(matrix19);
        double double22 = com.operations.Matrix.MatrixUtils.frobeniusNorm(matrix19);
        org.junit.Assert.assertNotNull(matrix2);
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + 52.009614495783374d + "'", double3 == 52.009614495783374d);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertArrayEquals(doubleArray6, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertArrayEquals(doubleArray9, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 2 + "'", int12 == 2);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 2 + "'", int13 == 2);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNotNull(matrix15);
        org.junit.Assert.assertNotNull(matrix18);
        org.junit.Assert.assertNotNull(matrix19);
        org.junit.Assert.assertNotNull(matrix20);
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 10.344080432788601d + "'", double21 == 10.344080432788601d);
        org.junit.Assert.assertTrue("'" + double22 + "' != '" + 10.344080432788601d + "'", double22 == 10.344080432788601d);
    }

    @Test
    public void test3124() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3124");
        com.operations.Matrix.Matrix matrix2 = com.operations.Matrix.MatrixTransformations.scale2D((double) (short) 10, (-0.1736481776669303d));
        org.junit.Assert.assertNotNull(matrix2);
    }

    @Test
    public void test3125() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3125");
        com.operations.Matrix.Matrix matrix1 = com.operations.Matrix.MatrixTransformations.rotate2D((double) (short) 100);
        double[] doubleArray4 = new double[] { 137.90576492663388d, (byte) -1 };
        double[] doubleArray5 = com.operations.Matrix.MatrixSolver.solveGaussian(matrix1, doubleArray4);
        com.operations.Matrix.Matrix matrix8 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0L, (double) (byte) 10);
        int int9 = matrix8.getRows();
        com.operations.Matrix.Matrix matrix12 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0L, (double) (byte) 10);
        int int13 = matrix12.getRows();
        com.operations.Matrix.Matrix matrix15 = com.operations.Matrix.MatrixOperations.scalarMultiply(matrix12, (double) 2);
        com.operations.Matrix.Matrix matrix16 = com.operations.Matrix.MatrixOperations.subtract(matrix8, matrix12);
        com.operations.Matrix.Matrix matrix19 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0L, (double) (byte) 10);
        int int20 = matrix19.getRows();
        com.operations.Matrix.Matrix matrix26 = com.operations.Matrix.MatrixUtils.generateRandomMatrix(100, (int) (byte) 1, (int) '#', (int) '#', 1L);
        boolean boolean28 = com.operations.Matrix.MatrixUtils.compare(matrix19, matrix26, (double) 1.0f);
        com.operations.Matrix.Matrix matrix30 = com.operations.Matrix.MatrixOperations.scalarMultiply(matrix19, (double) 1L);
        boolean boolean32 = com.operations.Matrix.MatrixUtils.compare(matrix16, matrix30, 0.0d);
        int int33 = matrix30.getCols();
        com.operations.Matrix.Matrix matrix34 = com.operations.Matrix.MatrixOperations.transpose(matrix30);
        double double35 = com.operations.Matrix.MatrixUtils.frobeniusNorm(matrix34);
        com.operations.Matrix.Matrix matrix36 = com.operations.Matrix.MatrixOperations.add(matrix1, matrix34);
        double double37 = com.operations.Matrix.MatrixUtils.frobeniusNorm(matrix34);
        com.operations.Matrix.Matrix matrix39 = com.operations.Matrix.MatrixTransformations.rotate2D((double) (short) 100);
        double[] doubleArray42 = new double[] { 137.90576492663388d, (byte) -1 };
        double[] doubleArray43 = com.operations.Matrix.MatrixSolver.solveGaussian(matrix39, doubleArray42);
        // The following exception was thrown during execution in test generation
        try {
            double[] doubleArray44 = com.operations.Matrix.MatrixSolver.solveGaussian(matrix34, doubleArray43);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Matrix is singular or nearly singular.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(matrix1);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertArrayEquals(doubleArray4, new double[] { 137.90576492663388d, (-1.0d) }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertArrayEquals(doubleArray5, new double[] { (-24.931892522286255d), (-135.63701830716116d) }, 1.0E-15);
        org.junit.Assert.assertNotNull(matrix8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 2 + "'", int9 == 2);
        org.junit.Assert.assertNotNull(matrix12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 2 + "'", int13 == 2);
        org.junit.Assert.assertNotNull(matrix15);
        org.junit.Assert.assertNotNull(matrix16);
        org.junit.Assert.assertNotNull(matrix19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 2 + "'", int20 == 2);
        org.junit.Assert.assertNotNull(matrix26);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(matrix30);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 2 + "'", int33 == 2);
        org.junit.Assert.assertNotNull(matrix34);
        org.junit.Assert.assertTrue("'" + double35 + "' != '" + 10.0d + "'", double35 == 10.0d);
        org.junit.Assert.assertNotNull(matrix36);
        org.junit.Assert.assertTrue("'" + double37 + "' != '" + 10.0d + "'", double37 == 10.0d);
        org.junit.Assert.assertNotNull(matrix39);
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertArrayEquals(doubleArray42, new double[] { 137.90576492663388d, (-1.0d) }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertArrayEquals(doubleArray43, new double[] { (-24.931892522286255d), (-135.63701830716116d) }, 1.0E-15);
    }

    @Test
    public void test3126() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3126");
        com.operations.Matrix.Matrix matrix2 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0L, (double) (byte) 10);
        double[] doubleArray5 = new double[] { 10, 'a' };
        double[] doubleArray8 = new double[] { 10, 'a' };
        double[][] doubleArray9 = new double[][] { doubleArray5, doubleArray8 };
        com.operations.Matrix.Matrix matrix10 = new com.operations.Matrix.Matrix(doubleArray9);
        int int11 = matrix10.getCols();
        int int12 = matrix10.getCols();
        int int13 = matrix10.getCols();
        com.operations.Matrix.Matrix[] matrixArray14 = com.operations.Matrix.MatrixDecompositions.luDecomposition(matrix10);
        com.operations.Matrix.Matrix matrix15 = com.operations.Matrix.MatrixOperations.multiply(matrix2, matrix10);
        com.operations.Matrix.Matrix matrix17 = com.operations.Matrix.MatrixTransformations.rotate2D((double) (short) 100);
        boolean boolean19 = com.operations.Matrix.MatrixUtils.compare(matrix10, matrix17, (double) (byte) 0);
        com.operations.Matrix.Matrix[] matrixArray20 = com.operations.Matrix.MatrixDecompositions.luDecomposition(matrix10);
        com.operations.Matrix.Matrix matrix21 = com.operations.Matrix.MatrixDecompositions.choleskyDecomposition(matrix10);
        boolean boolean22 = com.operations.Matrix.MatrixUtils.isSquare(matrix21);
        com.operations.Matrix.Matrix matrix23 = com.operations.Matrix.MatrixOperations.transpose(matrix21);
        com.operations.Matrix.Matrix matrix28 = com.operations.Matrix.MatrixUtils.generateRandomMatrix(1, (int) (short) 1, 0, (int) (short) 10);
        boolean boolean30 = com.operations.Matrix.MatrixUtils.compare(matrix21, matrix28, 0.0d);
        com.operations.Matrix.Matrix matrix31 = com.operations.Matrix.MatrixOperations.transpose(matrix21);
        org.junit.Assert.assertNotNull(matrix2);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertArrayEquals(doubleArray5, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertArrayEquals(doubleArray8, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 2 + "'", int11 == 2);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 2 + "'", int12 == 2);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 2 + "'", int13 == 2);
        org.junit.Assert.assertNotNull(matrixArray14);
        org.junit.Assert.assertNotNull(matrix15);
        org.junit.Assert.assertNotNull(matrix17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(matrixArray20);
        org.junit.Assert.assertNotNull(matrix21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertNotNull(matrix23);
        org.junit.Assert.assertNotNull(matrix28);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(matrix31);
    }

    @Test
    public void test3127() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3127");
        com.operations.Matrix.Matrix matrix1 = com.operations.Matrix.MatrixTransformations.rotate2D((double) 1.0f);
        com.operations.Matrix.Matrix matrix4 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0L, (double) (byte) 10);
        int int5 = matrix4.getRows();
        com.operations.Matrix.Matrix matrix7 = com.operations.Matrix.MatrixOperations.scalarMultiply(matrix4, (double) 2);
        double double8 = com.operations.Matrix.MatrixUtils.frobeniusNorm(matrix4);
        com.operations.Matrix.Matrix matrix11 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0L, (double) (byte) 10);
        int int12 = matrix11.getRows();
        com.operations.Matrix.Matrix matrix14 = com.operations.Matrix.MatrixOperations.scalarMultiply(matrix11, (double) 2);
        com.operations.Matrix.Matrix matrix15 = com.operations.Matrix.MatrixOperations.subtract(matrix4, matrix14);
        com.operations.Matrix.Matrix matrix16 = com.operations.Matrix.MatrixOperations.add(matrix1, matrix14);
        com.operations.Matrix.Matrix[] matrixArray17 = com.operations.Matrix.MatrixDecompositions.luDecomposition(matrix14);
        boolean boolean18 = com.operations.Matrix.MatrixUtils.isSquare(matrix14);
        com.operations.Matrix.Matrix matrix19 = com.operations.Matrix.MatrixOperations.transpose(matrix14);
        com.operations.Matrix.Matrix matrix21 = com.operations.Matrix.MatrixOperations.scalarMultiply(matrix19, (double) '4');
        double double22 = com.operations.Matrix.MatrixUtils.frobeniusNorm(matrix21);
        org.junit.Assert.assertNotNull(matrix1);
        org.junit.Assert.assertNotNull(matrix4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 2 + "'", int5 == 2);
        org.junit.Assert.assertNotNull(matrix7);
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 10.0d + "'", double8 == 10.0d);
        org.junit.Assert.assertNotNull(matrix11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 2 + "'", int12 == 2);
        org.junit.Assert.assertNotNull(matrix14);
        org.junit.Assert.assertNotNull(matrix15);
        org.junit.Assert.assertNotNull(matrix16);
        org.junit.Assert.assertNotNull(matrixArray17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(matrix19);
        org.junit.Assert.assertNotNull(matrix21);
        org.junit.Assert.assertTrue("'" + double22 + "' != '" + 1040.0d + "'", double22 == 1040.0d);
    }

    @Test
    public void test3128() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3128");
        com.operations.Matrix.Matrix matrix2 = com.operations.Matrix.MatrixTransformations.scale2D((double) 100L, 1.0d);
        com.operations.Matrix.Matrix matrix5 = com.operations.Matrix.MatrixTransformations.scale2D((double) (byte) 100, 260.95643973734866d);
        com.operations.Matrix.Matrix matrix8 = com.operations.Matrix.MatrixTransformations.project2D((double) ' ', 0.0d);
        double[] doubleArray11 = new double[] { 10, 'a' };
        double[] doubleArray14 = new double[] { 10, 'a' };
        double[][] doubleArray15 = new double[][] { doubleArray11, doubleArray14 };
        com.operations.Matrix.Matrix matrix16 = new com.operations.Matrix.Matrix(doubleArray15);
        int int17 = matrix16.getCols();
        boolean boolean18 = com.operations.Matrix.MatrixUtils.isSquare(matrix16);
        com.operations.Matrix.Matrix matrix19 = com.operations.Matrix.MatrixOperations.transpose(matrix16);
        int int20 = matrix19.getRows();
        com.operations.Matrix.Matrix matrix23 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0L, (double) (byte) 10);
        double[] doubleArray26 = new double[] { 10, 'a' };
        double[] doubleArray29 = new double[] { 10, 'a' };
        double[][] doubleArray30 = new double[][] { doubleArray26, doubleArray29 };
        com.operations.Matrix.Matrix matrix31 = new com.operations.Matrix.Matrix(doubleArray30);
        int int32 = matrix31.getCols();
        int int33 = matrix31.getCols();
        int int34 = matrix31.getCols();
        com.operations.Matrix.Matrix[] matrixArray35 = com.operations.Matrix.MatrixDecompositions.luDecomposition(matrix31);
        com.operations.Matrix.Matrix matrix36 = com.operations.Matrix.MatrixOperations.multiply(matrix23, matrix31);
        com.operations.Matrix.Matrix matrix38 = com.operations.Matrix.MatrixTransformations.rotate2D((double) (short) 100);
        boolean boolean40 = com.operations.Matrix.MatrixUtils.compare(matrix31, matrix38, (double) (byte) 0);
        com.operations.Matrix.Matrix matrix41 = com.operations.Matrix.MatrixOperations.multiply(matrix19, matrix31);
        com.operations.Matrix.Matrix matrix42 = com.operations.Matrix.MatrixOperations.add(matrix8, matrix31);
        com.operations.Matrix.Matrix matrix43 = com.operations.Matrix.MatrixOperations.transpose(matrix8);
        matrix8.print();
        com.operations.Matrix.Matrix matrix45 = com.operations.Matrix.MatrixOperations.transpose(matrix8);
        com.operations.Matrix.Matrix matrix46 = com.operations.Matrix.MatrixOperations.subtract(matrix5, matrix45);
        com.operations.Matrix.Matrix matrix47 = com.operations.Matrix.MatrixOperations.subtract(matrix2, matrix45);
        com.operations.Matrix.Matrix matrix49 = com.operations.Matrix.MatrixTransformations.rotate2D((double) (-1L));
        com.operations.Matrix.Matrix matrix51 = com.operations.Matrix.MatrixTransformations.rotate2D((double) (short) 100);
        double[] doubleArray54 = new double[] { 137.90576492663388d, (byte) -1 };
        double[] doubleArray55 = com.operations.Matrix.MatrixSolver.solveGaussian(matrix51, doubleArray54);
        double[] doubleArray56 = com.operations.Matrix.MatrixSolver.solveGaussian(matrix49, doubleArray54);
        double[][] doubleArray57 = matrix49.getData();
        com.operations.Matrix.Matrix matrix60 = com.operations.Matrix.MatrixTransformations.project2D((double) ' ', 0.0d);
        double[] doubleArray63 = new double[] { 10, 'a' };
        double[] doubleArray66 = new double[] { 10, 'a' };
        double[][] doubleArray67 = new double[][] { doubleArray63, doubleArray66 };
        com.operations.Matrix.Matrix matrix68 = new com.operations.Matrix.Matrix(doubleArray67);
        int int69 = matrix68.getCols();
        boolean boolean70 = com.operations.Matrix.MatrixUtils.isSquare(matrix68);
        com.operations.Matrix.Matrix matrix71 = com.operations.Matrix.MatrixOperations.transpose(matrix68);
        int int72 = matrix71.getRows();
        com.operations.Matrix.Matrix matrix75 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0L, (double) (byte) 10);
        double[] doubleArray78 = new double[] { 10, 'a' };
        double[] doubleArray81 = new double[] { 10, 'a' };
        double[][] doubleArray82 = new double[][] { doubleArray78, doubleArray81 };
        com.operations.Matrix.Matrix matrix83 = new com.operations.Matrix.Matrix(doubleArray82);
        int int84 = matrix83.getCols();
        int int85 = matrix83.getCols();
        int int86 = matrix83.getCols();
        com.operations.Matrix.Matrix[] matrixArray87 = com.operations.Matrix.MatrixDecompositions.luDecomposition(matrix83);
        com.operations.Matrix.Matrix matrix88 = com.operations.Matrix.MatrixOperations.multiply(matrix75, matrix83);
        com.operations.Matrix.Matrix matrix90 = com.operations.Matrix.MatrixTransformations.rotate2D((double) (short) 100);
        boolean boolean92 = com.operations.Matrix.MatrixUtils.compare(matrix83, matrix90, (double) (byte) 0);
        com.operations.Matrix.Matrix matrix93 = com.operations.Matrix.MatrixOperations.multiply(matrix71, matrix83);
        com.operations.Matrix.Matrix matrix94 = com.operations.Matrix.MatrixOperations.add(matrix60, matrix83);
        double[][] doubleArray95 = matrix94.getData();
        com.operations.Matrix.Matrix matrix96 = com.operations.Matrix.MatrixOperations.add(matrix49, matrix94);
        com.operations.Matrix.Matrix matrix97 = com.operations.Matrix.MatrixOperations.add(matrix2, matrix49);
        boolean boolean98 = com.operations.Matrix.MatrixUtils.isSquare(matrix97);
        int int99 = matrix97.getRows();
        org.junit.Assert.assertNotNull(matrix2);
        org.junit.Assert.assertNotNull(matrix5);
        org.junit.Assert.assertNotNull(matrix8);
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertArrayEquals(doubleArray11, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertArrayEquals(doubleArray14, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 2 + "'", int17 == 2);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(matrix19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 2 + "'", int20 == 2);
        org.junit.Assert.assertNotNull(matrix23);
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertArrayEquals(doubleArray26, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertArrayEquals(doubleArray29, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 2 + "'", int32 == 2);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 2 + "'", int33 == 2);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 2 + "'", int34 == 2);
        org.junit.Assert.assertNotNull(matrixArray35);
        org.junit.Assert.assertNotNull(matrix36);
        org.junit.Assert.assertNotNull(matrix38);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(matrix41);
        org.junit.Assert.assertNotNull(matrix42);
        org.junit.Assert.assertNotNull(matrix43);
        org.junit.Assert.assertNotNull(matrix45);
        org.junit.Assert.assertNotNull(matrix46);
        org.junit.Assert.assertNotNull(matrix47);
        org.junit.Assert.assertNotNull(matrix49);
        org.junit.Assert.assertNotNull(matrix51);
        org.junit.Assert.assertNotNull(doubleArray54);
        org.junit.Assert.assertArrayEquals(doubleArray54, new double[] { 137.90576492663388d, (-1.0d) }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertArrayEquals(doubleArray55, new double[] { (-24.931892522286255d), (-135.63701830716116d) }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray56);
        org.junit.Assert.assertArrayEquals(doubleArray56, new double[] { 137.90221361711127d, 1.4069397643877004d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray57);
        org.junit.Assert.assertNotNull(matrix60);
        org.junit.Assert.assertNotNull(doubleArray63);
        org.junit.Assert.assertArrayEquals(doubleArray63, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray66);
        org.junit.Assert.assertArrayEquals(doubleArray66, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray67);
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 2 + "'", int69 == 2);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + true + "'", boolean70 == true);
        org.junit.Assert.assertNotNull(matrix71);
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 2 + "'", int72 == 2);
        org.junit.Assert.assertNotNull(matrix75);
        org.junit.Assert.assertNotNull(doubleArray78);
        org.junit.Assert.assertArrayEquals(doubleArray78, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray81);
        org.junit.Assert.assertArrayEquals(doubleArray81, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray82);
        org.junit.Assert.assertTrue("'" + int84 + "' != '" + 2 + "'", int84 == 2);
        org.junit.Assert.assertTrue("'" + int85 + "' != '" + 2 + "'", int85 == 2);
        org.junit.Assert.assertTrue("'" + int86 + "' != '" + 2 + "'", int86 == 2);
        org.junit.Assert.assertNotNull(matrixArray87);
        org.junit.Assert.assertNotNull(matrix88);
        org.junit.Assert.assertNotNull(matrix90);
        org.junit.Assert.assertTrue("'" + boolean92 + "' != '" + false + "'", boolean92 == false);
        org.junit.Assert.assertNotNull(matrix93);
        org.junit.Assert.assertNotNull(matrix94);
        org.junit.Assert.assertNotNull(doubleArray95);
        org.junit.Assert.assertNotNull(matrix96);
        org.junit.Assert.assertNotNull(matrix97);
        org.junit.Assert.assertTrue("'" + boolean98 + "' != '" + true + "'", boolean98 == true);
        org.junit.Assert.assertTrue("'" + int99 + "' != '" + 2 + "'", int99 == 2);
    }

    @Test
    public void test3129() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3129");
        com.operations.Matrix.Matrix matrix2 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0.0f, (double) (-1));
        com.operations.Matrix.Matrix matrix5 = com.operations.Matrix.MatrixTransformations.scale2D(146.4308710620817d, (double) 10L);
        com.operations.Matrix.Matrix matrix6 = com.operations.Matrix.MatrixOperations.multiply(matrix2, matrix5);
        com.operations.Matrix.Matrix matrix8 = com.operations.Matrix.MatrixTransformations.rotate2D((double) 1.0f);
        com.operations.Matrix.Matrix matrix11 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0L, (double) (byte) 10);
        int int12 = matrix11.getRows();
        com.operations.Matrix.Matrix matrix14 = com.operations.Matrix.MatrixOperations.scalarMultiply(matrix11, (double) 2);
        double double15 = com.operations.Matrix.MatrixUtils.frobeniusNorm(matrix11);
        com.operations.Matrix.Matrix matrix18 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0L, (double) (byte) 10);
        int int19 = matrix18.getRows();
        com.operations.Matrix.Matrix matrix21 = com.operations.Matrix.MatrixOperations.scalarMultiply(matrix18, (double) 2);
        com.operations.Matrix.Matrix matrix22 = com.operations.Matrix.MatrixOperations.subtract(matrix11, matrix21);
        com.operations.Matrix.Matrix matrix23 = com.operations.Matrix.MatrixOperations.add(matrix8, matrix21);
        matrix8.print();
        double[] doubleArray27 = new double[] { 10, 'a' };
        double[] doubleArray30 = new double[] { 10, 'a' };
        double[][] doubleArray31 = new double[][] { doubleArray27, doubleArray30 };
        com.operations.Matrix.Matrix matrix32 = new com.operations.Matrix.Matrix(doubleArray31);
        com.operations.Matrix.Matrix matrix33 = com.operations.Matrix.MatrixOperations.transpose(matrix32);
        com.operations.Matrix.Matrix matrix36 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0L, (double) (byte) 10);
        int int37 = matrix36.getRows();
        com.operations.Matrix.Matrix matrix43 = com.operations.Matrix.MatrixUtils.generateRandomMatrix(100, (int) (byte) 1, (int) '#', (int) '#', 1L);
        boolean boolean45 = com.operations.Matrix.MatrixUtils.compare(matrix36, matrix43, (double) 1.0f);
        com.operations.Matrix.Matrix matrix47 = com.operations.Matrix.MatrixOperations.scalarMultiply(matrix36, (double) 1L);
        matrix36.print();
        com.operations.Matrix.Matrix matrix49 = com.operations.Matrix.MatrixOperations.multiply(matrix33, matrix36);
        com.operations.Matrix.Matrix matrix50 = com.operations.Matrix.MatrixOperations.multiply(matrix8, matrix36);
        com.operations.Matrix.Matrix matrix51 = com.operations.Matrix.MatrixOperations.subtract(matrix2, matrix36);
        com.operations.Matrix.Matrix matrix52 = com.operations.Matrix.MatrixOperations.transpose(matrix36);
        double double53 = com.operations.Matrix.MatrixUtils.frobeniusNorm(matrix36);
        com.operations.Matrix.Matrix[] matrixArray54 = com.operations.Matrix.MatrixDecompositions.luDecomposition(matrix36);
        org.junit.Assert.assertNotNull(matrix2);
        org.junit.Assert.assertNotNull(matrix5);
        org.junit.Assert.assertNotNull(matrix6);
        org.junit.Assert.assertNotNull(matrix8);
        org.junit.Assert.assertNotNull(matrix11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 2 + "'", int12 == 2);
        org.junit.Assert.assertNotNull(matrix14);
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 10.0d + "'", double15 == 10.0d);
        org.junit.Assert.assertNotNull(matrix18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 2 + "'", int19 == 2);
        org.junit.Assert.assertNotNull(matrix21);
        org.junit.Assert.assertNotNull(matrix22);
        org.junit.Assert.assertNotNull(matrix23);
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertArrayEquals(doubleArray27, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertArrayEquals(doubleArray30, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertNotNull(matrix33);
        org.junit.Assert.assertNotNull(matrix36);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 2 + "'", int37 == 2);
        org.junit.Assert.assertNotNull(matrix43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(matrix47);
        org.junit.Assert.assertNotNull(matrix49);
        org.junit.Assert.assertNotNull(matrix50);
        org.junit.Assert.assertNotNull(matrix51);
        org.junit.Assert.assertNotNull(matrix52);
        org.junit.Assert.assertTrue("'" + double53 + "' != '" + 10.0d + "'", double53 == 10.0d);
        org.junit.Assert.assertNotNull(matrixArray54);
    }

    @Test
    public void test3130() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3130");
        com.operations.Matrix.Matrix matrix2 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0L, (double) (byte) 10);
        int int3 = matrix2.getRows();
        com.operations.Matrix.Matrix matrix5 = com.operations.Matrix.MatrixOperations.scalarMultiply(matrix2, (double) 2);
        double[][] doubleArray6 = matrix2.getData();
        com.operations.Matrix.Matrix[] matrixArray7 = com.operations.Matrix.MatrixDecompositions.luDecomposition(matrix2);
        boolean boolean8 = com.operations.Matrix.MatrixUtils.isSymmetric(matrix2);
        org.junit.Assert.assertNotNull(matrix2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 2 + "'", int3 == 2);
        org.junit.Assert.assertNotNull(matrix5);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertNotNull(matrixArray7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
    }

    @Test
    public void test3131() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3131");
        com.operations.Matrix.Matrix matrix4 = com.operations.Matrix.MatrixUtils.generateRandomMatrix((int) (byte) 1, (int) '#', (int) (short) -1, 0);
        matrix4.print();
        int int6 = matrix4.getCols();
        org.junit.Assert.assertNotNull(matrix4);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 35 + "'", int6 == 35);
    }

    @Test
    public void test3132() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3132");
        com.operations.Matrix.Matrix matrix2 = com.operations.Matrix.MatrixTransformations.project2D(260.95643973734866d, 137.15495886388925d);
        double[][] doubleArray3 = matrix2.getData();
        com.operations.Matrix.Matrix matrix6 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0L, (double) (byte) 10);
        int int7 = matrix6.getRows();
        com.operations.Matrix.Matrix matrix9 = com.operations.Matrix.MatrixOperations.scalarMultiply(matrix6, (double) 2);
        matrix6.print();
        com.operations.Matrix.Matrix matrix16 = com.operations.Matrix.MatrixUtils.generateRandomMatrix((int) (short) 10, (int) (short) 100, (int) (byte) -1, (-1), (long) (byte) 10);
        boolean boolean18 = com.operations.Matrix.MatrixUtils.compare(matrix6, matrix16, (double) (short) 10);
        boolean boolean20 = com.operations.Matrix.MatrixUtils.compare(matrix2, matrix6, (double) 100L);
        int int21 = matrix2.getRows();
        // The following exception was thrown during execution in test generation
        try {
            double double24 = matrix2.getValue(0, 52);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(matrix2);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertNotNull(matrix6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 2 + "'", int7 == 2);
        org.junit.Assert.assertNotNull(matrix9);
        org.junit.Assert.assertNotNull(matrix16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 2 + "'", int21 == 2);
    }

    @Test
    public void test3133() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3133");
        com.operations.Matrix.Matrix matrix2 = com.operations.Matrix.MatrixTransformations.scale2D(35.0d, 4833.750951739279d);
        org.junit.Assert.assertNotNull(matrix2);
    }

    @Test
    public void test3134() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3134");
        double[] doubleArray2 = new double[] { 10, 'a' };
        double[] doubleArray5 = new double[] { 10, 'a' };
        double[][] doubleArray6 = new double[][] { doubleArray2, doubleArray5 };
        com.operations.Matrix.Matrix matrix7 = new com.operations.Matrix.Matrix(doubleArray6);
        int int8 = matrix7.getCols();
        int int9 = matrix7.getCols();
        boolean boolean10 = com.operations.Matrix.MatrixUtils.isSquare(matrix7);
        com.operations.Matrix.Matrix matrix11 = com.operations.Matrix.MatrixDecompositions.choleskyDecomposition(matrix7);
        com.operations.Matrix.Matrix matrix14 = com.operations.Matrix.MatrixTransformations.project2D(0.0d, (double) 0);
        com.operations.Matrix.Matrix matrix15 = com.operations.Matrix.MatrixOperations.subtract(matrix11, matrix14);
        com.operations.Matrix.Matrix matrix17 = com.operations.Matrix.MatrixOperations.scalarMultiply(matrix11, (double) 1.0f);
        com.operations.Matrix.Matrix matrix20 = com.operations.Matrix.MatrixTransformations.scale2D((double) (byte) 10, (double) 10);
        double[] doubleArray23 = new double[] { 10, 'a' };
        double[] doubleArray26 = new double[] { 10, 'a' };
        double[][] doubleArray27 = new double[][] { doubleArray23, doubleArray26 };
        com.operations.Matrix.Matrix matrix28 = new com.operations.Matrix.Matrix(doubleArray27);
        com.operations.Matrix.Matrix matrix29 = new com.operations.Matrix.Matrix(doubleArray27);
        boolean boolean30 = com.operations.Matrix.MatrixUtils.isSquare(matrix29);
        double[] doubleArray33 = new double[] { 10, 'a' };
        double[] doubleArray36 = new double[] { 10, 'a' };
        double[][] doubleArray37 = new double[][] { doubleArray33, doubleArray36 };
        com.operations.Matrix.Matrix matrix38 = new com.operations.Matrix.Matrix(doubleArray37);
        int int39 = matrix38.getCols();
        int int40 = matrix38.getCols();
        matrix38.print();
        double[] doubleArray44 = new double[] { 10, 'a' };
        double[] doubleArray47 = new double[] { 10, 'a' };
        double[][] doubleArray48 = new double[][] { doubleArray44, doubleArray47 };
        com.operations.Matrix.Matrix matrix49 = new com.operations.Matrix.Matrix(doubleArray48);
        boolean boolean51 = com.operations.Matrix.MatrixUtils.compare(matrix38, matrix49, (double) (-1));
        com.operations.Matrix.Matrix matrix52 = com.operations.Matrix.MatrixOperations.subtract(matrix29, matrix49);
        com.operations.Matrix.Matrix[] matrixArray53 = com.operations.Matrix.MatrixDecompositions.luDecomposition(matrix52);
        double[][] doubleArray54 = matrix52.getData();
        com.operations.Matrix.Matrix matrix55 = new com.operations.Matrix.Matrix(doubleArray54);
        com.operations.Matrix.Matrix matrix56 = com.operations.Matrix.MatrixOperations.multiply(matrix20, matrix55);
        boolean boolean57 = com.operations.Matrix.MatrixUtils.isSymmetric(matrix20);
        com.operations.Matrix.Matrix matrix59 = com.operations.Matrix.MatrixTransformations.rotate2D(350.0d);
        com.operations.Matrix.Matrix matrix60 = com.operations.Matrix.MatrixDecompositions.choleskyDecomposition(matrix59);
        int int61 = matrix59.getRows();
        com.operations.Matrix.Matrix matrix62 = com.operations.Matrix.MatrixOperations.subtract(matrix20, matrix59);
        double[] doubleArray65 = new double[] { 10, 'a' };
        double[] doubleArray68 = new double[] { 10, 'a' };
        double[][] doubleArray69 = new double[][] { doubleArray65, doubleArray68 };
        com.operations.Matrix.Matrix matrix70 = new com.operations.Matrix.Matrix(doubleArray69);
        int int71 = matrix70.getCols();
        int int72 = matrix70.getCols();
        boolean boolean73 = com.operations.Matrix.MatrixUtils.isSquare(matrix70);
        com.operations.Matrix.Matrix matrix74 = com.operations.Matrix.MatrixDecompositions.choleskyDecomposition(matrix70);
        com.operations.Matrix.Matrix matrix77 = com.operations.Matrix.MatrixTransformations.project2D(0.0d, (double) 0);
        com.operations.Matrix.Matrix matrix78 = com.operations.Matrix.MatrixOperations.subtract(matrix74, matrix77);
        com.operations.Matrix.Matrix matrix79 = com.operations.Matrix.MatrixOperations.transpose(matrix77);
        com.operations.Matrix.Matrix matrix80 = com.operations.Matrix.MatrixOperations.subtract(matrix20, matrix79);
        com.operations.Matrix.Matrix matrix82 = com.operations.Matrix.MatrixOperations.scalarMultiply(matrix80, (-0.1736481776669303d));
        boolean boolean83 = com.operations.Matrix.MatrixUtils.isSymmetric(matrix80);
        com.operations.Matrix.Matrix matrix84 = com.operations.Matrix.MatrixOperations.add(matrix17, matrix80);
        com.operations.Matrix.Matrix matrix85 = com.operations.Matrix.MatrixOperations.transpose(matrix17);
        double[][] doubleArray86 = matrix85.getData();
        com.operations.Matrix.Matrix matrix87 = new com.operations.Matrix.Matrix(doubleArray86);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertArrayEquals(doubleArray2, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertArrayEquals(doubleArray5, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 2 + "'", int8 == 2);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 2 + "'", int9 == 2);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(matrix11);
        org.junit.Assert.assertNotNull(matrix14);
        org.junit.Assert.assertNotNull(matrix15);
        org.junit.Assert.assertNotNull(matrix17);
        org.junit.Assert.assertNotNull(matrix20);
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertArrayEquals(doubleArray23, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertArrayEquals(doubleArray26, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertArrayEquals(doubleArray33, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertArrayEquals(doubleArray36, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 2 + "'", int39 == 2);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 2 + "'", int40 == 2);
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertArrayEquals(doubleArray44, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertArrayEquals(doubleArray47, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(matrix52);
        org.junit.Assert.assertNotNull(matrixArray53);
        org.junit.Assert.assertNotNull(doubleArray54);
        org.junit.Assert.assertNotNull(matrix56);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + true + "'", boolean57 == true);
        org.junit.Assert.assertNotNull(matrix59);
        org.junit.Assert.assertNotNull(matrix60);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 2 + "'", int61 == 2);
        org.junit.Assert.assertNotNull(matrix62);
        org.junit.Assert.assertNotNull(doubleArray65);
        org.junit.Assert.assertArrayEquals(doubleArray65, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray68);
        org.junit.Assert.assertArrayEquals(doubleArray68, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray69);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 2 + "'", int71 == 2);
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 2 + "'", int72 == 2);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + true + "'", boolean73 == true);
        org.junit.Assert.assertNotNull(matrix74);
        org.junit.Assert.assertNotNull(matrix77);
        org.junit.Assert.assertNotNull(matrix78);
        org.junit.Assert.assertNotNull(matrix79);
        org.junit.Assert.assertNotNull(matrix80);
        org.junit.Assert.assertNotNull(matrix82);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + true + "'", boolean83 == true);
        org.junit.Assert.assertNotNull(matrix84);
        org.junit.Assert.assertNotNull(matrix85);
        org.junit.Assert.assertNotNull(doubleArray86);
    }

    @Test
    public void test3135() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3135");
        com.operations.Matrix.Matrix matrix2 = new com.operations.Matrix.Matrix((int) (short) 100, 35);
        com.operations.Matrix.Matrix matrix5 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0L, (double) (byte) 10);
        double[] doubleArray8 = new double[] { 10, 'a' };
        double[] doubleArray11 = new double[] { 10, 'a' };
        double[][] doubleArray12 = new double[][] { doubleArray8, doubleArray11 };
        com.operations.Matrix.Matrix matrix13 = new com.operations.Matrix.Matrix(doubleArray12);
        int int14 = matrix13.getCols();
        int int15 = matrix13.getCols();
        int int16 = matrix13.getCols();
        com.operations.Matrix.Matrix[] matrixArray17 = com.operations.Matrix.MatrixDecompositions.luDecomposition(matrix13);
        com.operations.Matrix.Matrix matrix18 = com.operations.Matrix.MatrixOperations.multiply(matrix5, matrix13);
        int int19 = matrix13.getRows();
        int int20 = matrix13.getCols();
        boolean boolean22 = com.operations.Matrix.MatrixUtils.compare(matrix2, matrix13, (double) 0.0f);
        // The following exception was thrown during execution in test generation
        try {
            double double25 = matrix13.getValue(2, 0);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(matrix5);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertArrayEquals(doubleArray8, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertArrayEquals(doubleArray11, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 2 + "'", int14 == 2);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 2 + "'", int15 == 2);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 2 + "'", int16 == 2);
        org.junit.Assert.assertNotNull(matrixArray17);
        org.junit.Assert.assertNotNull(matrix18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 2 + "'", int19 == 2);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 2 + "'", int20 == 2);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
    }

    @Test
    public void test3136() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3136");
        com.operations.Matrix.Matrix matrix2 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0L, (double) (byte) 10);
        int int3 = matrix2.getRows();
        com.operations.Matrix.Matrix matrix9 = com.operations.Matrix.MatrixUtils.generateRandomMatrix(100, (int) (byte) 1, (int) '#', (int) '#', 1L);
        boolean boolean11 = com.operations.Matrix.MatrixUtils.compare(matrix2, matrix9, (double) 1.0f);
        matrix9.print();
        com.operations.Matrix.Matrix matrix13 = com.operations.Matrix.MatrixOperations.transpose(matrix9);
        com.operations.Matrix.Matrix matrix14 = com.operations.Matrix.MatrixOperations.transpose(matrix9);
        double double15 = com.operations.Matrix.MatrixUtils.frobeniusNorm(matrix9);
        com.operations.Matrix.Matrix matrix21 = com.operations.Matrix.MatrixUtils.generateRandomMatrix(100, 1, (-1), (int) (byte) -1, (long) (short) 1);
        com.operations.Matrix.Matrix matrix23 = com.operations.Matrix.MatrixOperations.scalarMultiply(matrix21, (double) (byte) -1);
        com.operations.Matrix.Matrix matrix24 = com.operations.Matrix.MatrixOperations.subtract(matrix9, matrix23);
        double double25 = com.operations.Matrix.MatrixUtils.frobeniusNorm(matrix24);
        com.operations.Matrix.Matrix matrix28 = com.operations.Matrix.MatrixTransformations.scale2D((double) 10L, 35.0d);
        matrix28.print();
        boolean boolean30 = com.operations.Matrix.MatrixUtils.isSquare(matrix28);
        com.operations.Matrix.Matrix matrix32 = com.operations.Matrix.MatrixTransformations.rotate2D((-1.0d));
        com.operations.Matrix.Matrix matrix34 = com.operations.Matrix.MatrixTransformations.rotate2D((double) (-1L));
        com.operations.Matrix.Matrix matrix36 = com.operations.Matrix.MatrixTransformations.rotate2D((double) (short) 100);
        double[] doubleArray39 = new double[] { 137.90576492663388d, (byte) -1 };
        double[] doubleArray40 = com.operations.Matrix.MatrixSolver.solveGaussian(matrix36, doubleArray39);
        double[] doubleArray41 = com.operations.Matrix.MatrixSolver.solveGaussian(matrix34, doubleArray39);
        double[] doubleArray42 = com.operations.Matrix.MatrixSolver.solveGaussian(matrix32, doubleArray39);
        double[] doubleArray43 = com.operations.Matrix.MatrixSolver.solveGaussian(matrix28, doubleArray39);
        // The following exception was thrown during execution in test generation
        try {
            double[] doubleArray44 = com.operations.Matrix.MatrixSolver.solveGaussian(matrix24, doubleArray39);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Matrix must be square to solve equations.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(matrix2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 2 + "'", int3 == 2);
        org.junit.Assert.assertNotNull(matrix9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(matrix13);
        org.junit.Assert.assertNotNull(matrix14);
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 350.0d + "'", double15 == 350.0d);
        org.junit.Assert.assertNotNull(matrix21);
        org.junit.Assert.assertNotNull(matrix23);
        org.junit.Assert.assertNotNull(matrix24);
        org.junit.Assert.assertTrue("'" + double25 + "' != '" + 340.0d + "'", double25 == 340.0d);
        org.junit.Assert.assertNotNull(matrix28);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertNotNull(matrix32);
        org.junit.Assert.assertNotNull(matrix34);
        org.junit.Assert.assertNotNull(matrix36);
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertArrayEquals(doubleArray39, new double[] { 137.90576492663388d, (-1.0d) }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertArrayEquals(doubleArray40, new double[] { (-24.931892522286255d), (-135.63701830716116d) }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertArrayEquals(doubleArray41, new double[] { 137.90221361711127d, 1.4069397643877004d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertArrayEquals(doubleArray42, new double[] { 137.90221361711127d, 1.4069397643877004d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertArrayEquals(doubleArray43, new double[] { 13.790576492663387d, (-0.02857142857142857d) }, 1.0E-15);
    }

    @Test
    public void test3137() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3137");
        com.operations.Matrix.Matrix matrix5 = com.operations.Matrix.MatrixUtils.generateRandomMatrix((int) (short) 1, (int) '4', 0, (int) (short) 0, (long) '4');
        org.junit.Assert.assertNotNull(matrix5);
    }

    @Test
    public void test3138() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3138");
        com.operations.Matrix.Matrix matrix2 = com.operations.Matrix.MatrixTransformations.project2D((double) (byte) 100, 32.0d);
        double[] doubleArray5 = new double[] { 10, 'a' };
        double[] doubleArray8 = new double[] { 10, 'a' };
        double[][] doubleArray9 = new double[][] { doubleArray5, doubleArray8 };
        com.operations.Matrix.Matrix matrix10 = new com.operations.Matrix.Matrix(doubleArray9);
        int int11 = matrix10.getCols();
        int int12 = matrix10.getCols();
        int int13 = matrix10.getCols();
        com.operations.Matrix.Matrix matrix19 = com.operations.Matrix.MatrixUtils.generateRandomMatrix(100, (int) (byte) 1, (int) '#', (int) '#', 1L);
        double double22 = matrix19.getValue((int) '4', 0);
        double double23 = com.operations.Matrix.MatrixUtils.frobeniusNorm(matrix19);
        boolean boolean24 = com.operations.Matrix.MatrixUtils.isSquare(matrix19);
        boolean boolean26 = com.operations.Matrix.MatrixUtils.compare(matrix10, matrix19, (double) 100L);
        int int27 = matrix10.getCols();
        com.operations.Matrix.Matrix matrix28 = com.operations.Matrix.MatrixOperations.transpose(matrix10);
        boolean boolean30 = com.operations.Matrix.MatrixUtils.compare(matrix2, matrix10, 137.15495886388925d);
        double[] doubleArray33 = new double[] { 10, 'a' };
        double[] doubleArray36 = new double[] { 10, 'a' };
        double[][] doubleArray37 = new double[][] { doubleArray33, doubleArray36 };
        com.operations.Matrix.Matrix matrix38 = new com.operations.Matrix.Matrix(doubleArray37);
        com.operations.Matrix.Matrix matrix39 = new com.operations.Matrix.Matrix(doubleArray37);
        boolean boolean40 = com.operations.Matrix.MatrixUtils.isSquare(matrix39);
        com.operations.Matrix.Matrix matrix42 = com.operations.Matrix.MatrixOperations.scalarMultiply(matrix39, (double) '4');
        com.operations.Matrix.Matrix matrix43 = com.operations.Matrix.MatrixOperations.subtract(matrix2, matrix42);
        boolean boolean44 = com.operations.Matrix.MatrixUtils.isSymmetric(matrix43);
        org.junit.Assert.assertNotNull(matrix2);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertArrayEquals(doubleArray5, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertArrayEquals(doubleArray8, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 2 + "'", int11 == 2);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 2 + "'", int12 == 2);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 2 + "'", int13 == 2);
        org.junit.Assert.assertNotNull(matrix19);
        org.junit.Assert.assertTrue("'" + double22 + "' != '" + 35.0d + "'", double22 == 35.0d);
        org.junit.Assert.assertTrue("'" + double23 + "' != '" + 350.0d + "'", double23 == 350.0d);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 2 + "'", int27 == 2);
        org.junit.Assert.assertNotNull(matrix28);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertArrayEquals(doubleArray33, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertArrayEquals(doubleArray36, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertNotNull(matrix42);
        org.junit.Assert.assertNotNull(matrix43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
    }

    @Test
    public void test3139() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3139");
        com.operations.Matrix.Matrix matrix5 = com.operations.Matrix.MatrixUtils.generateRandomMatrix((int) '4', (int) (byte) 1, 100, 32, 0L);
        double double6 = com.operations.Matrix.MatrixUtils.frobeniusNorm(matrix5);
        org.junit.Assert.assertNotNull(matrix5);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 481.29607094437216d + "'", double6 == 481.29607094437216d);
    }

    @Test
    public void test3140() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3140");
        com.operations.Matrix.Matrix matrix2 = com.operations.Matrix.MatrixTransformations.project2D((double) '#', 0.0d);
        com.operations.Matrix.Matrix matrix4 = com.operations.Matrix.MatrixOperations.scalarMultiply(matrix2, 640031.99920004d);
        org.junit.Assert.assertNotNull(matrix2);
        org.junit.Assert.assertNotNull(matrix4);
    }

    @Test
    public void test3141() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3141");
        com.operations.Matrix.Matrix matrix1 = com.operations.Matrix.MatrixTransformations.rotate2D(1.414213562373095d);
        com.operations.Matrix.Matrix matrix2 = com.operations.Matrix.MatrixOperations.transpose(matrix1);
        com.operations.Matrix.Matrix matrix3 = com.operations.Matrix.MatrixDecompositions.choleskyDecomposition(matrix1);
        double[][] doubleArray4 = matrix1.getData();
        org.junit.Assert.assertNotNull(matrix1);
        org.junit.Assert.assertNotNull(matrix2);
        org.junit.Assert.assertNotNull(matrix3);
        org.junit.Assert.assertNotNull(doubleArray4);
    }

    @Test
    public void test3142() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3142");
        com.operations.Matrix.Matrix matrix2 = com.operations.Matrix.MatrixTransformations.project2D(0.0d, 640031.99920004d);
        org.junit.Assert.assertNotNull(matrix2);
    }

    @Test
    public void test3143() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3143");
        double[] doubleArray2 = new double[] { 10, 'a' };
        double[] doubleArray5 = new double[] { 10, 'a' };
        double[][] doubleArray6 = new double[][] { doubleArray2, doubleArray5 };
        com.operations.Matrix.Matrix matrix7 = new com.operations.Matrix.Matrix(doubleArray6);
        com.operations.Matrix.Matrix matrix8 = new com.operations.Matrix.Matrix(doubleArray6);
        boolean boolean9 = com.operations.Matrix.MatrixUtils.isSquare(matrix8);
        double[] doubleArray12 = new double[] { 10, 'a' };
        double[] doubleArray15 = new double[] { 10, 'a' };
        double[][] doubleArray16 = new double[][] { doubleArray12, doubleArray15 };
        com.operations.Matrix.Matrix matrix17 = new com.operations.Matrix.Matrix(doubleArray16);
        int int18 = matrix17.getCols();
        int int19 = matrix17.getCols();
        matrix17.print();
        double[] doubleArray23 = new double[] { 10, 'a' };
        double[] doubleArray26 = new double[] { 10, 'a' };
        double[][] doubleArray27 = new double[][] { doubleArray23, doubleArray26 };
        com.operations.Matrix.Matrix matrix28 = new com.operations.Matrix.Matrix(doubleArray27);
        boolean boolean30 = com.operations.Matrix.MatrixUtils.compare(matrix17, matrix28, (double) (-1));
        com.operations.Matrix.Matrix matrix31 = com.operations.Matrix.MatrixOperations.subtract(matrix8, matrix28);
        com.operations.Matrix.Matrix matrix33 = com.operations.Matrix.MatrixOperations.scalarMultiply(matrix8, (double) 0.0f);
        int int34 = matrix33.getRows();
        com.operations.Matrix.Matrix matrix37 = com.operations.Matrix.MatrixTransformations.scale2D(52.009614495783374d, (double) 0.0f);
        double double38 = com.operations.Matrix.MatrixUtils.frobeniusNorm(matrix37);
        double[] doubleArray41 = new double[] { 10, 'a' };
        double[] doubleArray44 = new double[] { 10, 'a' };
        double[][] doubleArray45 = new double[][] { doubleArray41, doubleArray44 };
        com.operations.Matrix.Matrix matrix46 = new com.operations.Matrix.Matrix(doubleArray45);
        int int47 = matrix46.getCols();
        int int48 = matrix46.getCols();
        boolean boolean49 = com.operations.Matrix.MatrixUtils.isSquare(matrix46);
        com.operations.Matrix.Matrix matrix50 = com.operations.Matrix.MatrixDecompositions.choleskyDecomposition(matrix46);
        com.operations.Matrix.Matrix matrix53 = com.operations.Matrix.MatrixTransformations.project2D(0.0d, (double) 0);
        com.operations.Matrix.Matrix matrix54 = com.operations.Matrix.MatrixOperations.subtract(matrix50, matrix53);
        com.operations.Matrix.Matrix matrix55 = com.operations.Matrix.MatrixOperations.multiply(matrix37, matrix54);
        com.operations.Matrix.Matrix matrix56 = com.operations.Matrix.MatrixOperations.subtract(matrix33, matrix37);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertArrayEquals(doubleArray2, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertArrayEquals(doubleArray5, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertArrayEquals(doubleArray12, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertArrayEquals(doubleArray15, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 2 + "'", int18 == 2);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 2 + "'", int19 == 2);
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertArrayEquals(doubleArray23, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertArrayEquals(doubleArray26, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(matrix31);
        org.junit.Assert.assertNotNull(matrix33);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 2 + "'", int34 == 2);
        org.junit.Assert.assertNotNull(matrix37);
        org.junit.Assert.assertTrue("'" + double38 + "' != '" + 52.009614495783374d + "'", double38 == 52.009614495783374d);
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertArrayEquals(doubleArray41, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertArrayEquals(doubleArray44, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 2 + "'", int47 == 2);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 2 + "'", int48 == 2);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
        org.junit.Assert.assertNotNull(matrix50);
        org.junit.Assert.assertNotNull(matrix53);
        org.junit.Assert.assertNotNull(matrix54);
        org.junit.Assert.assertNotNull(matrix55);
        org.junit.Assert.assertNotNull(matrix56);
    }

    @Test
    public void test3144() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3144");
        com.operations.Matrix.Matrix matrix1 = com.operations.Matrix.MatrixTransformations.rotate2D((double) (short) 100);
        double[] doubleArray4 = new double[] { 137.90576492663388d, (byte) -1 };
        double[] doubleArray5 = com.operations.Matrix.MatrixSolver.solveGaussian(matrix1, doubleArray4);
        com.operations.Matrix.Matrix matrix8 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0L, (double) (byte) 10);
        double[] doubleArray11 = new double[] { 10, 'a' };
        double[] doubleArray14 = new double[] { 10, 'a' };
        double[][] doubleArray15 = new double[][] { doubleArray11, doubleArray14 };
        com.operations.Matrix.Matrix matrix16 = new com.operations.Matrix.Matrix(doubleArray15);
        int int17 = matrix16.getCols();
        int int18 = matrix16.getCols();
        int int19 = matrix16.getCols();
        com.operations.Matrix.Matrix[] matrixArray20 = com.operations.Matrix.MatrixDecompositions.luDecomposition(matrix16);
        com.operations.Matrix.Matrix matrix21 = com.operations.Matrix.MatrixOperations.multiply(matrix8, matrix16);
        boolean boolean23 = com.operations.Matrix.MatrixUtils.compare(matrix1, matrix8, (double) (-1L));
        com.operations.Matrix.Matrix matrix26 = new com.operations.Matrix.Matrix((int) (short) 100, 2);
        com.operations.Matrix.Matrix matrix27 = com.operations.Matrix.MatrixOperations.transpose(matrix26);
        // The following exception was thrown during execution in test generation
        try {
            com.operations.Matrix.Matrix matrix28 = com.operations.Matrix.MatrixOperations.subtract(matrix8, matrix26);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Matrices must have the same dimensions for subtraction.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(matrix1);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertArrayEquals(doubleArray4, new double[] { 137.90576492663388d, (-1.0d) }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertArrayEquals(doubleArray5, new double[] { (-24.931892522286255d), (-135.63701830716116d) }, 1.0E-15);
        org.junit.Assert.assertNotNull(matrix8);
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertArrayEquals(doubleArray11, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertArrayEquals(doubleArray14, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 2 + "'", int17 == 2);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 2 + "'", int18 == 2);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 2 + "'", int19 == 2);
        org.junit.Assert.assertNotNull(matrixArray20);
        org.junit.Assert.assertNotNull(matrix21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(matrix27);
    }

    @Test
    public void test3145() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3145");
        com.operations.Matrix.Matrix matrix5 = com.operations.Matrix.MatrixUtils.generateRandomMatrix((int) ' ', 35, 2, (int) (short) 1, (long) ' ');
        org.junit.Assert.assertNotNull(matrix5);
    }

    @Test
    public void test3146() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3146");
        com.operations.Matrix.Matrix matrix1 = com.operations.Matrix.MatrixTransformations.rotate2D((double) (short) 100);
        double[] doubleArray4 = new double[] { 137.90576492663388d, (byte) -1 };
        double[] doubleArray5 = com.operations.Matrix.MatrixSolver.solveGaussian(matrix1, doubleArray4);
        com.operations.Matrix.Matrix matrix8 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0L, (double) (byte) 10);
        double[] doubleArray11 = new double[] { 10, 'a' };
        double[] doubleArray14 = new double[] { 10, 'a' };
        double[][] doubleArray15 = new double[][] { doubleArray11, doubleArray14 };
        com.operations.Matrix.Matrix matrix16 = new com.operations.Matrix.Matrix(doubleArray15);
        int int17 = matrix16.getCols();
        int int18 = matrix16.getCols();
        int int19 = matrix16.getCols();
        com.operations.Matrix.Matrix[] matrixArray20 = com.operations.Matrix.MatrixDecompositions.luDecomposition(matrix16);
        com.operations.Matrix.Matrix matrix21 = com.operations.Matrix.MatrixOperations.multiply(matrix8, matrix16);
        boolean boolean23 = com.operations.Matrix.MatrixUtils.compare(matrix1, matrix8, (double) (-1L));
        boolean boolean24 = com.operations.Matrix.MatrixUtils.isSymmetric(matrix1);
        com.operations.Matrix.Matrix matrix27 = com.operations.Matrix.MatrixTransformations.scale2D((double) (-1L), (double) '4');
        double[][] doubleArray28 = matrix27.getData();
        com.operations.Matrix.Matrix matrix29 = com.operations.Matrix.MatrixOperations.multiply(matrix1, matrix27);
        double double30 = com.operations.Matrix.MatrixUtils.frobeniusNorm(matrix29);
        int int31 = matrix29.getCols();
        com.operations.Matrix.Matrix matrix33 = com.operations.Matrix.MatrixTransformations.rotate2D((double) (short) 100);
        double[] doubleArray36 = new double[] { 137.90576492663388d, (byte) -1 };
        double[] doubleArray37 = com.operations.Matrix.MatrixSolver.solveGaussian(matrix33, doubleArray36);
        com.operations.Matrix.Matrix matrix40 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0L, (double) (byte) 10);
        double[] doubleArray43 = new double[] { 10, 'a' };
        double[] doubleArray46 = new double[] { 10, 'a' };
        double[][] doubleArray47 = new double[][] { doubleArray43, doubleArray46 };
        com.operations.Matrix.Matrix matrix48 = new com.operations.Matrix.Matrix(doubleArray47);
        int int49 = matrix48.getCols();
        int int50 = matrix48.getCols();
        int int51 = matrix48.getCols();
        com.operations.Matrix.Matrix[] matrixArray52 = com.operations.Matrix.MatrixDecompositions.luDecomposition(matrix48);
        com.operations.Matrix.Matrix matrix53 = com.operations.Matrix.MatrixOperations.multiply(matrix40, matrix48);
        boolean boolean55 = com.operations.Matrix.MatrixUtils.compare(matrix33, matrix40, (double) (-1L));
        double[][] doubleArray56 = matrix33.getData();
        com.operations.Matrix.Matrix matrix59 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0L, (double) 10L);
        boolean boolean61 = com.operations.Matrix.MatrixUtils.compare(matrix33, matrix59, 146.4308710620817d);
        com.operations.Matrix.Matrix matrix63 = com.operations.Matrix.MatrixOperations.scalarMultiply(matrix59, 1.4142135623730951d);
        boolean boolean64 = com.operations.Matrix.MatrixUtils.isSquare(matrix63);
        com.operations.Matrix.Matrix matrix65 = com.operations.Matrix.MatrixOperations.add(matrix29, matrix63);
        matrix65.print();
        org.junit.Assert.assertNotNull(matrix1);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertArrayEquals(doubleArray4, new double[] { 137.90576492663388d, (-1.0d) }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertArrayEquals(doubleArray5, new double[] { (-24.931892522286255d), (-135.63701830716116d) }, 1.0E-15);
        org.junit.Assert.assertNotNull(matrix8);
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertArrayEquals(doubleArray11, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertArrayEquals(doubleArray14, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 2 + "'", int17 == 2);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 2 + "'", int18 == 2);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 2 + "'", int19 == 2);
        org.junit.Assert.assertNotNull(matrixArray20);
        org.junit.Assert.assertNotNull(matrix21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(matrix27);
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertNotNull(matrix29);
        org.junit.Assert.assertTrue("'" + double30 + "' != '" + 52.009614495783374d + "'", double30 == 52.009614495783374d);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 2 + "'", int31 == 2);
        org.junit.Assert.assertNotNull(matrix33);
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertArrayEquals(doubleArray36, new double[] { 137.90576492663388d, (-1.0d) }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertArrayEquals(doubleArray37, new double[] { (-24.931892522286255d), (-135.63701830716116d) }, 1.0E-15);
        org.junit.Assert.assertNotNull(matrix40);
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertArrayEquals(doubleArray43, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray46);
        org.junit.Assert.assertArrayEquals(doubleArray46, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 2 + "'", int49 == 2);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 2 + "'", int50 == 2);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 2 + "'", int51 == 2);
        org.junit.Assert.assertNotNull(matrixArray52);
        org.junit.Assert.assertNotNull(matrix53);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNotNull(doubleArray56);
        org.junit.Assert.assertNotNull(matrix59);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + true + "'", boolean61 == true);
        org.junit.Assert.assertNotNull(matrix63);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + true + "'", boolean64 == true);
        org.junit.Assert.assertNotNull(matrix65);
    }

    @Test
    public void test3147() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3147");
        com.operations.Matrix.Matrix matrix5 = com.operations.Matrix.MatrixUtils.generateRandomMatrix(100, 10, 97, 0, (long) '4');
        double[][] doubleArray6 = matrix5.getData();
        org.junit.Assert.assertNotNull(matrix5);
        org.junit.Assert.assertNotNull(doubleArray6);
    }

    @Test
    public void test3148() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3148");
        com.operations.Matrix.Matrix matrix1 = com.operations.Matrix.MatrixTransformations.rotate2D(32.0d);
        double double2 = com.operations.Matrix.MatrixUtils.frobeniusNorm(matrix1);
        com.operations.Matrix.Matrix matrix4 = com.operations.Matrix.MatrixOperations.scalarMultiply(matrix1, 0.0d);
        double[] doubleArray7 = new double[] { 10, 'a' };
        double[] doubleArray10 = new double[] { 10, 'a' };
        double[][] doubleArray11 = new double[][] { doubleArray7, doubleArray10 };
        com.operations.Matrix.Matrix matrix12 = new com.operations.Matrix.Matrix(doubleArray11);
        com.operations.Matrix.Matrix matrix13 = new com.operations.Matrix.Matrix(doubleArray11);
        com.operations.Matrix.Matrix matrix15 = com.operations.Matrix.MatrixTransformations.rotate2D((double) (short) 100);
        double[] doubleArray18 = new double[] { 137.90576492663388d, (byte) -1 };
        double[] doubleArray19 = com.operations.Matrix.MatrixSolver.solveGaussian(matrix15, doubleArray18);
        com.operations.Matrix.Matrix matrix20 = com.operations.Matrix.MatrixOperations.add(matrix13, matrix15);
        com.operations.Matrix.Matrix matrix21 = com.operations.Matrix.MatrixOperations.transpose(matrix15);
        int int22 = matrix15.getCols();
        com.operations.Matrix.Matrix matrix25 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0L, (double) (byte) 10);
        double[] doubleArray28 = new double[] { 10, 'a' };
        double[] doubleArray31 = new double[] { 10, 'a' };
        double[][] doubleArray32 = new double[][] { doubleArray28, doubleArray31 };
        com.operations.Matrix.Matrix matrix33 = new com.operations.Matrix.Matrix(doubleArray32);
        int int34 = matrix33.getCols();
        int int35 = matrix33.getCols();
        int int36 = matrix33.getCols();
        com.operations.Matrix.Matrix[] matrixArray37 = com.operations.Matrix.MatrixDecompositions.luDecomposition(matrix33);
        com.operations.Matrix.Matrix matrix38 = com.operations.Matrix.MatrixOperations.multiply(matrix25, matrix33);
        com.operations.Matrix.Matrix matrix40 = com.operations.Matrix.MatrixTransformations.rotate2D((double) (short) 100);
        boolean boolean42 = com.operations.Matrix.MatrixUtils.compare(matrix33, matrix40, (double) (byte) 0);
        boolean boolean43 = com.operations.Matrix.MatrixUtils.isSymmetric(matrix40);
        boolean boolean44 = com.operations.Matrix.MatrixUtils.isSquare(matrix40);
        com.operations.Matrix.Matrix matrix46 = com.operations.Matrix.MatrixTransformations.rotate2D((double) (short) 100);
        boolean boolean48 = com.operations.Matrix.MatrixUtils.compare(matrix40, matrix46, (double) (byte) 100);
        matrix46.print();
        com.operations.Matrix.Matrix matrix50 = com.operations.Matrix.MatrixOperations.add(matrix15, matrix46);
        int int51 = matrix50.getCols();
        double double54 = matrix50.getValue(1, 0);
        double[][] doubleArray55 = matrix50.getData();
        double double58 = matrix50.getValue((int) (byte) 1, 0);
        double[][] doubleArray59 = matrix50.getData();
        boolean boolean61 = com.operations.Matrix.MatrixUtils.compare(matrix4, matrix50, 33.52610922848042d);
        org.junit.Assert.assertNotNull(matrix1);
        org.junit.Assert.assertTrue("'" + double2 + "' != '" + 1.4142135623730951d + "'", double2 == 1.4142135623730951d);
        org.junit.Assert.assertNotNull(matrix4);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertArrayEquals(doubleArray7, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertArrayEquals(doubleArray10, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertNotNull(matrix15);
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertArrayEquals(doubleArray18, new double[] { 137.90576492663388d, (-1.0d) }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertArrayEquals(doubleArray19, new double[] { (-24.931892522286255d), (-135.63701830716116d) }, 1.0E-15);
        org.junit.Assert.assertNotNull(matrix20);
        org.junit.Assert.assertNotNull(matrix21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 2 + "'", int22 == 2);
        org.junit.Assert.assertNotNull(matrix25);
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertArrayEquals(doubleArray28, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertArrayEquals(doubleArray31, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 2 + "'", int34 == 2);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 2 + "'", int35 == 2);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 2 + "'", int36 == 2);
        org.junit.Assert.assertNotNull(matrixArray37);
        org.junit.Assert.assertNotNull(matrix38);
        org.junit.Assert.assertNotNull(matrix40);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertNotNull(matrix46);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
        org.junit.Assert.assertNotNull(matrix50);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 2 + "'", int51 == 2);
        org.junit.Assert.assertTrue("'" + double54 + "' != '" + 1.969615506024416d + "'", double54 == 1.969615506024416d);
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertTrue("'" + double58 + "' != '" + 1.969615506024416d + "'", double58 == 1.969615506024416d);
        org.junit.Assert.assertNotNull(doubleArray59);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + true + "'", boolean61 == true);
    }

    @Test
    public void test3149() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3149");
        double[] doubleArray2 = new double[] { 10, 'a' };
        double[] doubleArray5 = new double[] { 10, 'a' };
        double[][] doubleArray6 = new double[][] { doubleArray2, doubleArray5 };
        com.operations.Matrix.Matrix matrix7 = new com.operations.Matrix.Matrix(doubleArray6);
        com.operations.Matrix.Matrix matrix8 = new com.operations.Matrix.Matrix(doubleArray6);
        com.operations.Matrix.Matrix matrix10 = com.operations.Matrix.MatrixTransformations.rotate2D((double) (short) 100);
        double[] doubleArray13 = new double[] { 137.90576492663388d, (byte) -1 };
        double[] doubleArray14 = com.operations.Matrix.MatrixSolver.solveGaussian(matrix10, doubleArray13);
        com.operations.Matrix.Matrix matrix15 = com.operations.Matrix.MatrixOperations.add(matrix8, matrix10);
        com.operations.Matrix.Matrix matrix16 = com.operations.Matrix.MatrixOperations.transpose(matrix10);
        int int17 = matrix10.getCols();
        int int18 = matrix10.getRows();
        com.operations.Matrix.Matrix matrix19 = com.operations.Matrix.MatrixOperations.transpose(matrix10);
        com.operations.Matrix.Matrix matrix22 = com.operations.Matrix.MatrixTransformations.scale2D((double) (byte) 10, (double) 10);
        double[] doubleArray25 = new double[] { 10, 'a' };
        double[] doubleArray28 = new double[] { 10, 'a' };
        double[][] doubleArray29 = new double[][] { doubleArray25, doubleArray28 };
        com.operations.Matrix.Matrix matrix30 = new com.operations.Matrix.Matrix(doubleArray29);
        com.operations.Matrix.Matrix matrix31 = new com.operations.Matrix.Matrix(doubleArray29);
        boolean boolean32 = com.operations.Matrix.MatrixUtils.isSquare(matrix31);
        double[] doubleArray35 = new double[] { 10, 'a' };
        double[] doubleArray38 = new double[] { 10, 'a' };
        double[][] doubleArray39 = new double[][] { doubleArray35, doubleArray38 };
        com.operations.Matrix.Matrix matrix40 = new com.operations.Matrix.Matrix(doubleArray39);
        int int41 = matrix40.getCols();
        int int42 = matrix40.getCols();
        matrix40.print();
        double[] doubleArray46 = new double[] { 10, 'a' };
        double[] doubleArray49 = new double[] { 10, 'a' };
        double[][] doubleArray50 = new double[][] { doubleArray46, doubleArray49 };
        com.operations.Matrix.Matrix matrix51 = new com.operations.Matrix.Matrix(doubleArray50);
        boolean boolean53 = com.operations.Matrix.MatrixUtils.compare(matrix40, matrix51, (double) (-1));
        com.operations.Matrix.Matrix matrix54 = com.operations.Matrix.MatrixOperations.subtract(matrix31, matrix51);
        com.operations.Matrix.Matrix[] matrixArray55 = com.operations.Matrix.MatrixDecompositions.luDecomposition(matrix54);
        double[][] doubleArray56 = matrix54.getData();
        com.operations.Matrix.Matrix matrix57 = new com.operations.Matrix.Matrix(doubleArray56);
        com.operations.Matrix.Matrix matrix58 = com.operations.Matrix.MatrixOperations.multiply(matrix22, matrix57);
        double[][] doubleArray59 = matrix22.getData();
        com.operations.Matrix.Matrix matrix60 = com.operations.Matrix.MatrixOperations.add(matrix10, matrix22);
        com.operations.Matrix.Matrix matrix62 = com.operations.Matrix.MatrixTransformations.rotate2D(52.009614495783374d);
        boolean boolean64 = com.operations.Matrix.MatrixUtils.compare(matrix10, matrix62, (double) (-1));
        // The following exception was thrown during execution in test generation
        try {
            com.operations.Matrix.Matrix matrix65 = com.operations.Matrix.MatrixDecompositions.choleskyDecomposition(matrix62);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Matrix is not positive definite.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertArrayEquals(doubleArray2, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertArrayEquals(doubleArray5, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertNotNull(matrix10);
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertArrayEquals(doubleArray13, new double[] { 137.90576492663388d, (-1.0d) }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertArrayEquals(doubleArray14, new double[] { (-24.931892522286255d), (-135.63701830716116d) }, 1.0E-15);
        org.junit.Assert.assertNotNull(matrix15);
        org.junit.Assert.assertNotNull(matrix16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 2 + "'", int17 == 2);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 2 + "'", int18 == 2);
        org.junit.Assert.assertNotNull(matrix19);
        org.junit.Assert.assertNotNull(matrix22);
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertArrayEquals(doubleArray25, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertArrayEquals(doubleArray28, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertArrayEquals(doubleArray35, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertArrayEquals(doubleArray38, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 2 + "'", int41 == 2);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 2 + "'", int42 == 2);
        org.junit.Assert.assertNotNull(doubleArray46);
        org.junit.Assert.assertArrayEquals(doubleArray46, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertArrayEquals(doubleArray49, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(matrix54);
        org.junit.Assert.assertNotNull(matrixArray55);
        org.junit.Assert.assertNotNull(doubleArray56);
        org.junit.Assert.assertNotNull(matrix58);
        org.junit.Assert.assertNotNull(doubleArray59);
        org.junit.Assert.assertNotNull(matrix60);
        org.junit.Assert.assertNotNull(matrix62);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
    }

    @Test
    public void test3150() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3150");
        com.operations.Matrix.Matrix matrix1 = com.operations.Matrix.MatrixTransformations.rotate2D((double) '4');
        matrix1.print();
        com.operations.Matrix.Matrix matrix3 = com.operations.Matrix.MatrixOperations.transpose(matrix1);
        double[][] doubleArray4 = matrix1.getData();
        com.operations.Matrix.Matrix matrix7 = com.operations.Matrix.MatrixTransformations.project2D(400.0d, 36.40054944640259d);
        com.operations.Matrix.Matrix matrix9 = com.operations.Matrix.MatrixTransformations.rotate2D(100.0d);
        int int10 = matrix9.getCols();
        matrix9.print();
        com.operations.Matrix.Matrix matrix13 = com.operations.Matrix.MatrixOperations.scalarMultiply(matrix9, (double) (byte) 1);
        com.operations.Matrix.Matrix matrix15 = com.operations.Matrix.MatrixTransformations.rotate2D(350.0d);
        com.operations.Matrix.Matrix matrix17 = com.operations.Matrix.MatrixTransformations.rotate2D((double) (short) 100);
        double[] doubleArray20 = new double[] { 137.90576492663388d, (byte) -1 };
        double[] doubleArray21 = com.operations.Matrix.MatrixSolver.solveGaussian(matrix17, doubleArray20);
        double[] doubleArray22 = com.operations.Matrix.MatrixSolver.solveGaussian(matrix15, doubleArray21);
        double[] doubleArray23 = com.operations.Matrix.MatrixSolver.solveGaussian(matrix9, doubleArray21);
        double[] doubleArray24 = com.operations.Matrix.MatrixSolver.solveGaussian(matrix7, doubleArray21);
        double[] doubleArray25 = com.operations.Matrix.MatrixSolver.solveGaussian(matrix1, doubleArray24);
        boolean boolean26 = com.operations.Matrix.MatrixUtils.isSymmetric(matrix1);
        org.junit.Assert.assertNotNull(matrix1);
        org.junit.Assert.assertNotNull(matrix3);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertNotNull(matrix7);
        org.junit.Assert.assertNotNull(matrix9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 2 + "'", int10 == 2);
        org.junit.Assert.assertNotNull(matrix13);
        org.junit.Assert.assertNotNull(matrix15);
        org.junit.Assert.assertNotNull(matrix17);
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertArrayEquals(doubleArray20, new double[] { 137.90576492663388d, (-1.0d) }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertArrayEquals(doubleArray21, new double[] { (-24.931892522286255d), (-135.63701830716116d) }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertArrayEquals(doubleArray22, new double[] { (-0.9999999999999858d), (-137.90576492663388d) }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertArrayEquals(doubleArray23, new double[] { (-129.24700952206834d), 48.1062421064292d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertArrayEquals(doubleArray24, new double[] { (-0.06232973130571564d), (-3.7262354653980627d) }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertArrayEquals(doubleArray25, new double[] { (-2.9746876315367503d), (-2.2449831254994406d) }, 1.0E-15);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
    }

    @Test
    public void test3151() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3151");
        com.operations.Matrix.Matrix matrix2 = com.operations.Matrix.MatrixTransformations.project2D((double) (byte) 0, (double) 10L);
        com.operations.Matrix.Matrix[] matrixArray3 = com.operations.Matrix.MatrixDecompositions.luDecomposition(matrix2);
        int int4 = matrix2.getRows();
        org.junit.Assert.assertNotNull(matrix2);
        org.junit.Assert.assertNotNull(matrixArray3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 2 + "'", int4 == 2);
    }

    @Test
    public void test3152() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3152");
        com.operations.Matrix.Matrix matrix2 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0L, (double) (byte) 10);
        int int3 = matrix2.getRows();
        com.operations.Matrix.Matrix matrix9 = com.operations.Matrix.MatrixUtils.generateRandomMatrix(100, (int) (byte) 1, (int) '#', (int) '#', 1L);
        boolean boolean11 = com.operations.Matrix.MatrixUtils.compare(matrix2, matrix9, (double) 1.0f);
        matrix9.print();
        com.operations.Matrix.Matrix matrix13 = com.operations.Matrix.MatrixOperations.transpose(matrix9);
        com.operations.Matrix.Matrix matrix14 = com.operations.Matrix.MatrixOperations.transpose(matrix9);
        matrix14.print();
        java.lang.Class<?> wildcardClass16 = matrix14.getClass();
        org.junit.Assert.assertNotNull(matrix2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 2 + "'", int3 == 2);
        org.junit.Assert.assertNotNull(matrix9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(matrix13);
        org.junit.Assert.assertNotNull(matrix14);
        org.junit.Assert.assertNotNull(wildcardClass16);
    }

    @Test
    public void test3153() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3153");
        com.operations.Matrix.Matrix matrix2 = com.operations.Matrix.MatrixTransformations.project2D(0.0d, (double) 0);
        com.operations.Matrix.Matrix[] matrixArray3 = com.operations.Matrix.MatrixDecompositions.luDecomposition(matrix2);
        com.operations.Matrix.Matrix matrix6 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0L, (double) (byte) 10);
        int int7 = matrix6.getRows();
        com.operations.Matrix.Matrix matrix9 = com.operations.Matrix.MatrixOperations.scalarMultiply(matrix6, (double) 2);
        double double10 = com.operations.Matrix.MatrixUtils.frobeniusNorm(matrix6);
        int int11 = matrix6.getRows();
        com.operations.Matrix.Matrix matrix12 = com.operations.Matrix.MatrixOperations.transpose(matrix6);
        com.operations.Matrix.Matrix matrix13 = com.operations.Matrix.MatrixOperations.multiply(matrix2, matrix12);
        com.operations.Matrix.Matrix matrix14 = com.operations.Matrix.MatrixOperations.transpose(matrix13);
        org.junit.Assert.assertNotNull(matrix2);
        org.junit.Assert.assertNotNull(matrixArray3);
        org.junit.Assert.assertNotNull(matrix6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 2 + "'", int7 == 2);
        org.junit.Assert.assertNotNull(matrix9);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 10.0d + "'", double10 == 10.0d);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 2 + "'", int11 == 2);
        org.junit.Assert.assertNotNull(matrix12);
        org.junit.Assert.assertNotNull(matrix13);
        org.junit.Assert.assertNotNull(matrix14);
    }

    @Test
    public void test3154() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3154");
        // The following exception was thrown during execution in test generation
        try {
            com.operations.Matrix.Matrix matrix5 = com.operations.Matrix.MatrixUtils.generateRandomMatrix((int) (byte) -1, (int) (short) 1, (int) '4', (int) '#', (long) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.NegativeArraySizeException; message: -1");
        } catch (java.lang.NegativeArraySizeException e) {
            // Expected exception.
        }
    }

    @Test
    public void test3155() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3155");
        double[] doubleArray2 = new double[] { 10, 'a' };
        double[] doubleArray5 = new double[] { 10, 'a' };
        double[][] doubleArray6 = new double[][] { doubleArray2, doubleArray5 };
        com.operations.Matrix.Matrix matrix7 = new com.operations.Matrix.Matrix(doubleArray6);
        int int8 = matrix7.getCols();
        int int9 = matrix7.getCols();
        matrix7.print();
        double[] doubleArray13 = new double[] { 10, 'a' };
        double[] doubleArray16 = new double[] { 10, 'a' };
        double[][] doubleArray17 = new double[][] { doubleArray13, doubleArray16 };
        com.operations.Matrix.Matrix matrix18 = new com.operations.Matrix.Matrix(doubleArray17);
        boolean boolean20 = com.operations.Matrix.MatrixUtils.compare(matrix7, matrix18, (double) (-1));
        com.operations.Matrix.Matrix matrix22 = com.operations.Matrix.MatrixOperations.scalarMultiply(matrix7, 33.52610922848042d);
        double double23 = com.operations.Matrix.MatrixUtils.frobeniusNorm(matrix7);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertArrayEquals(doubleArray2, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertArrayEquals(doubleArray5, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 2 + "'", int8 == 2);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 2 + "'", int9 == 2);
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertArrayEquals(doubleArray13, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertArrayEquals(doubleArray16, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(matrix22);
        org.junit.Assert.assertTrue("'" + double23 + "' != '" + 137.90576492663388d + "'", double23 == 137.90576492663388d);
    }

    @Test
    public void test3156() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3156");
        com.operations.Matrix.Matrix matrix2 = com.operations.Matrix.MatrixTransformations.project2D(0.0d, (double) 0);
        double[][] doubleArray3 = matrix2.getData();
        com.operations.Matrix.Matrix matrix4 = new com.operations.Matrix.Matrix(doubleArray3);
        double double5 = com.operations.Matrix.MatrixUtils.frobeniusNorm(matrix4);
        int int6 = matrix4.getRows();
        org.junit.Assert.assertNotNull(matrix2);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 0.0d + "'", double5 == 0.0d);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 2 + "'", int6 == 2);
    }

    @Test
    public void test3157() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3157");
        com.operations.Matrix.Matrix matrix2 = com.operations.Matrix.MatrixTransformations.project2D(263.29311316552224d, (-1.0d));
        org.junit.Assert.assertNotNull(matrix2);
    }

    @Test
    public void test3158() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3158");
        com.operations.Matrix.Matrix matrix1 = com.operations.Matrix.MatrixTransformations.rotate2D((double) '4');
        double[] doubleArray4 = new double[] { 10, 'a' };
        double[] doubleArray7 = new double[] { 10, 'a' };
        double[][] doubleArray8 = new double[][] { doubleArray4, doubleArray7 };
        com.operations.Matrix.Matrix matrix9 = new com.operations.Matrix.Matrix(doubleArray8);
        com.operations.Matrix.Matrix matrix10 = new com.operations.Matrix.Matrix(doubleArray8);
        com.operations.Matrix.Matrix matrix12 = com.operations.Matrix.MatrixTransformations.rotate2D((double) (short) 100);
        double[] doubleArray15 = new double[] { 137.90576492663388d, (byte) -1 };
        double[] doubleArray16 = com.operations.Matrix.MatrixSolver.solveGaussian(matrix12, doubleArray15);
        com.operations.Matrix.Matrix matrix17 = com.operations.Matrix.MatrixOperations.add(matrix10, matrix12);
        boolean boolean18 = com.operations.Matrix.MatrixUtils.isSymmetric(matrix17);
        boolean boolean20 = com.operations.Matrix.MatrixUtils.compare(matrix1, matrix17, 364.0054944640259d);
        com.operations.Matrix.Matrix matrix23 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0L, (double) (byte) 10);
        int int24 = matrix23.getRows();
        com.operations.Matrix.Matrix matrix26 = com.operations.Matrix.MatrixOperations.scalarMultiply(matrix23, (double) 2);
        matrix23.print();
        com.operations.Matrix.Matrix matrix28 = com.operations.Matrix.MatrixOperations.multiply(matrix17, matrix23);
        int int29 = matrix28.getRows();
        com.operations.Matrix.Matrix matrix32 = com.operations.Matrix.MatrixTransformations.scale2D(1.414213562373095d, 36.40054944640259d);
        com.operations.Matrix.Matrix matrix33 = com.operations.Matrix.MatrixOperations.transpose(matrix32);
        com.operations.Matrix.Matrix matrix34 = com.operations.Matrix.MatrixOperations.multiply(matrix28, matrix33);
        int int35 = matrix33.getCols();
        org.junit.Assert.assertNotNull(matrix1);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertArrayEquals(doubleArray4, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertArrayEquals(doubleArray7, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertNotNull(matrix12);
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertArrayEquals(doubleArray15, new double[] { 137.90576492663388d, (-1.0d) }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertArrayEquals(doubleArray16, new double[] { (-24.931892522286255d), (-135.63701830716116d) }, 1.0E-15);
        org.junit.Assert.assertNotNull(matrix17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertNotNull(matrix23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 2 + "'", int24 == 2);
        org.junit.Assert.assertNotNull(matrix26);
        org.junit.Assert.assertNotNull(matrix28);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 2 + "'", int29 == 2);
        org.junit.Assert.assertNotNull(matrix32);
        org.junit.Assert.assertNotNull(matrix33);
        org.junit.Assert.assertNotNull(matrix34);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 2 + "'", int35 == 2);
    }

    @Test
    public void test3159() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3159");
        com.operations.Matrix.Matrix matrix4 = com.operations.Matrix.MatrixUtils.generateRandomMatrix(32, (int) 'a', (int) (byte) 10, 52);
        com.operations.Matrix.Matrix matrix7 = com.operations.Matrix.MatrixTransformations.scale2D(0.0d, 100.0d);
        com.operations.Matrix.Matrix matrix9 = com.operations.Matrix.MatrixTransformations.rotate2D((-0.1736481776669303d));
        boolean boolean11 = com.operations.Matrix.MatrixUtils.compare(matrix7, matrix9, (double) (-1L));
        com.operations.Matrix.Matrix matrix13 = com.operations.Matrix.MatrixOperations.scalarMultiply(matrix7, 137.90576492663385d);
        // The following exception was thrown during execution in test generation
        try {
            com.operations.Matrix.Matrix matrix14 = com.operations.Matrix.MatrixOperations.subtract(matrix4, matrix7);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Matrices must have the same dimensions for subtraction.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(matrix4);
        org.junit.Assert.assertNotNull(matrix7);
        org.junit.Assert.assertNotNull(matrix9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(matrix13);
    }

    @Test
    public void test3160() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3160");
        com.operations.Matrix.Matrix matrix2 = com.operations.Matrix.MatrixTransformations.scale2D(52.009614495783374d, (double) 100);
        matrix2.print();
        boolean boolean4 = com.operations.Matrix.MatrixUtils.isSymmetric(matrix2);
        org.junit.Assert.assertNotNull(matrix2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
    }

    @Test
    public void test3161() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3161");
        com.operations.Matrix.Matrix matrix5 = com.operations.Matrix.MatrixUtils.generateRandomMatrix((int) '#', 1, (int) (byte) -1, (int) (byte) 0, (long) (short) 100);
        double[][] doubleArray6 = matrix5.getData();
        org.junit.Assert.assertNotNull(matrix5);
        org.junit.Assert.assertNotNull(doubleArray6);
    }

    @Test
    public void test3162() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3162");
        com.operations.Matrix.Matrix matrix2 = com.operations.Matrix.MatrixTransformations.scale2D(59.62334183013888d, 14009.328092863216d);
        org.junit.Assert.assertNotNull(matrix2);
    }

    @Test
    public void test3163() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3163");
        com.operations.Matrix.Matrix matrix2 = com.operations.Matrix.MatrixTransformations.project2D(400.0d, (double) '#');
        org.junit.Assert.assertNotNull(matrix2);
    }

    @Test
    public void test3164() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3164");
        com.operations.Matrix.Matrix matrix5 = com.operations.Matrix.MatrixUtils.generateRandomMatrix(100, (int) (short) 10, 0, (-1), (long) (byte) -1);
        matrix5.print();
        int int7 = matrix5.getCols();
        org.junit.Assert.assertNotNull(matrix5);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 10 + "'", int7 == 10);
    }

    @Test
    public void test3165() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3165");
        com.operations.Matrix.Matrix matrix2 = com.operations.Matrix.MatrixTransformations.scale2D((double) (byte) 10, (double) 10);
        double[] doubleArray5 = new double[] { 10, 'a' };
        double[] doubleArray8 = new double[] { 10, 'a' };
        double[][] doubleArray9 = new double[][] { doubleArray5, doubleArray8 };
        com.operations.Matrix.Matrix matrix10 = new com.operations.Matrix.Matrix(doubleArray9);
        com.operations.Matrix.Matrix matrix11 = new com.operations.Matrix.Matrix(doubleArray9);
        boolean boolean12 = com.operations.Matrix.MatrixUtils.isSquare(matrix11);
        double[] doubleArray15 = new double[] { 10, 'a' };
        double[] doubleArray18 = new double[] { 10, 'a' };
        double[][] doubleArray19 = new double[][] { doubleArray15, doubleArray18 };
        com.operations.Matrix.Matrix matrix20 = new com.operations.Matrix.Matrix(doubleArray19);
        int int21 = matrix20.getCols();
        int int22 = matrix20.getCols();
        matrix20.print();
        double[] doubleArray26 = new double[] { 10, 'a' };
        double[] doubleArray29 = new double[] { 10, 'a' };
        double[][] doubleArray30 = new double[][] { doubleArray26, doubleArray29 };
        com.operations.Matrix.Matrix matrix31 = new com.operations.Matrix.Matrix(doubleArray30);
        boolean boolean33 = com.operations.Matrix.MatrixUtils.compare(matrix20, matrix31, (double) (-1));
        com.operations.Matrix.Matrix matrix34 = com.operations.Matrix.MatrixOperations.subtract(matrix11, matrix31);
        com.operations.Matrix.Matrix[] matrixArray35 = com.operations.Matrix.MatrixDecompositions.luDecomposition(matrix34);
        double[][] doubleArray36 = matrix34.getData();
        com.operations.Matrix.Matrix matrix37 = new com.operations.Matrix.Matrix(doubleArray36);
        com.operations.Matrix.Matrix matrix38 = com.operations.Matrix.MatrixOperations.multiply(matrix2, matrix37);
        boolean boolean39 = com.operations.Matrix.MatrixUtils.isSquare(matrix37);
        double[][] doubleArray40 = matrix37.getData();
        com.operations.Matrix.Matrix matrix41 = new com.operations.Matrix.Matrix(doubleArray40);
        // The following exception was thrown during execution in test generation
        try {
            com.operations.Matrix.Matrix matrix42 = com.operations.Matrix.MatrixDecompositions.choleskyDecomposition(matrix41);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Matrix is not positive definite.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(matrix2);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertArrayEquals(doubleArray5, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertArrayEquals(doubleArray8, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertArrayEquals(doubleArray15, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertArrayEquals(doubleArray18, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 2 + "'", int21 == 2);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 2 + "'", int22 == 2);
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertArrayEquals(doubleArray26, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertArrayEquals(doubleArray29, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(matrix34);
        org.junit.Assert.assertNotNull(matrixArray35);
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertNotNull(matrix38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertNotNull(doubleArray40);
    }

    @Test
    public void test3166() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3166");
        com.operations.Matrix.Matrix matrix0 = null;
        com.operations.Matrix.Matrix matrix3 = new com.operations.Matrix.Matrix((int) (short) 1, 0);
        // The following exception was thrown during execution in test generation
        try {
            com.operations.Matrix.Matrix matrix4 = com.operations.Matrix.MatrixOperations.add(matrix0, matrix3);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot invoke \"com.operations.Matrix.Matrix.getRows()\" because \"a\" is null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test3167() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3167");
        com.operations.Matrix.Matrix matrix2 = com.operations.Matrix.MatrixTransformations.project2D((double) '#', 260.95643973734866d);
        double double3 = com.operations.Matrix.MatrixUtils.frobeniusNorm(matrix2);
        // The following exception was thrown during execution in test generation
        try {
            double double6 = matrix2.getValue((int) '4', (int) (short) 0);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(matrix2);
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + 263.29311316552224d + "'", double3 == 263.29311316552224d);
    }

    @Test
    public void test3168() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3168");
        // The following exception was thrown during execution in test generation
        try {
            com.operations.Matrix.Matrix matrix5 = com.operations.Matrix.MatrixUtils.generateRandomMatrix(0, (int) (byte) 10, 1, (int) '#', (long) '4');
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
    }

    @Test
    public void test3169() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3169");
        // The following exception was thrown during execution in test generation
        try {
            com.operations.Matrix.Matrix matrix5 = com.operations.Matrix.MatrixUtils.generateRandomMatrix((int) (byte) 0, (int) (byte) 1, (int) '4', (int) '4', (long) 52);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
    }

    @Test
    public void test3170() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3170");
        com.operations.Matrix.Matrix matrix2 = com.operations.Matrix.MatrixTransformations.scale2D((double) (short) 1, 1.4142135623730951d);
        double double3 = com.operations.Matrix.MatrixUtils.frobeniusNorm(matrix2);
        // The following exception was thrown during execution in test generation
        try {
            double double6 = matrix2.getValue((int) (byte) -1, 0);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(matrix2);
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + 1.7320508075688774d + "'", double3 == 1.7320508075688774d);
    }

    @Test
    public void test3171() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3171");
        com.operations.Matrix.Matrix matrix5 = com.operations.Matrix.MatrixUtils.generateRandomMatrix(10, (int) ' ', 0, (int) (short) -1, (long) 1);
        org.junit.Assert.assertNotNull(matrix5);
    }

    @Test
    public void test3172() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3172");
        double[] doubleArray2 = new double[] { 10, 'a' };
        double[] doubleArray5 = new double[] { 10, 'a' };
        double[][] doubleArray6 = new double[][] { doubleArray2, doubleArray5 };
        com.operations.Matrix.Matrix matrix7 = new com.operations.Matrix.Matrix(doubleArray6);
        com.operations.Matrix.Matrix matrix8 = new com.operations.Matrix.Matrix(doubleArray6);
        boolean boolean9 = com.operations.Matrix.MatrixUtils.isSquare(matrix8);
        com.operations.Matrix.Matrix matrix11 = com.operations.Matrix.MatrixOperations.scalarMultiply(matrix8, (double) '4');
        boolean boolean12 = com.operations.Matrix.MatrixUtils.isSquare(matrix8);
        boolean boolean13 = com.operations.Matrix.MatrixUtils.isSymmetric(matrix8);
        matrix8.print();
        com.operations.Matrix.Matrix matrix20 = com.operations.Matrix.MatrixUtils.generateRandomMatrix(100, (int) (byte) 1, (int) '#', (int) '#', 1L);
        double double23 = matrix20.getValue((int) '4', 0);
        matrix20.print();
        com.operations.Matrix.Matrix matrix25 = com.operations.Matrix.MatrixOperations.transpose(matrix20);
        double[][] doubleArray26 = matrix25.getData();
        int int27 = matrix25.getCols();
        boolean boolean28 = com.operations.Matrix.MatrixUtils.isSymmetric(matrix25);
        // The following exception was thrown during execution in test generation
        try {
            com.operations.Matrix.Matrix matrix29 = com.operations.Matrix.MatrixOperations.multiply(matrix8, matrix25);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Matrix A's columns must match Matrix B's rows for multiplication.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertArrayEquals(doubleArray2, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertArrayEquals(doubleArray5, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertNotNull(matrix11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(matrix20);
        org.junit.Assert.assertTrue("'" + double23 + "' != '" + 35.0d + "'", double23 == 35.0d);
        org.junit.Assert.assertNotNull(matrix25);
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 100 + "'", int27 == 100);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
    }

    @Test
    public void test3173() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3173");
        double[] doubleArray2 = new double[] { 10, 'a' };
        double[] doubleArray5 = new double[] { 10, 'a' };
        double[][] doubleArray6 = new double[][] { doubleArray2, doubleArray5 };
        com.operations.Matrix.Matrix matrix7 = new com.operations.Matrix.Matrix(doubleArray6);
        int int8 = matrix7.getCols();
        int int9 = matrix7.getCols();
        matrix7.print();
        double[] doubleArray13 = new double[] { 10, 'a' };
        double[] doubleArray16 = new double[] { 10, 'a' };
        double[][] doubleArray17 = new double[][] { doubleArray13, doubleArray16 };
        com.operations.Matrix.Matrix matrix18 = new com.operations.Matrix.Matrix(doubleArray17);
        boolean boolean20 = com.operations.Matrix.MatrixUtils.compare(matrix7, matrix18, (double) (-1));
        com.operations.Matrix.Matrix matrix21 = com.operations.Matrix.MatrixDecompositions.choleskyDecomposition(matrix18);
        com.operations.Matrix.Matrix matrix23 = com.operations.Matrix.MatrixOperations.scalarMultiply(matrix21, 32.0d);
        com.operations.Matrix.Matrix matrix24 = com.operations.Matrix.MatrixDecompositions.choleskyDecomposition(matrix21);
        int int25 = matrix21.getRows();
        com.operations.Matrix.Matrix matrix28 = com.operations.Matrix.MatrixTransformations.scale2D((double) (byte) 10, (double) 10);
        double[] doubleArray31 = new double[] { 10, 'a' };
        double[] doubleArray34 = new double[] { 10, 'a' };
        double[][] doubleArray35 = new double[][] { doubleArray31, doubleArray34 };
        com.operations.Matrix.Matrix matrix36 = new com.operations.Matrix.Matrix(doubleArray35);
        com.operations.Matrix.Matrix matrix37 = new com.operations.Matrix.Matrix(doubleArray35);
        boolean boolean38 = com.operations.Matrix.MatrixUtils.isSquare(matrix37);
        double[] doubleArray41 = new double[] { 10, 'a' };
        double[] doubleArray44 = new double[] { 10, 'a' };
        double[][] doubleArray45 = new double[][] { doubleArray41, doubleArray44 };
        com.operations.Matrix.Matrix matrix46 = new com.operations.Matrix.Matrix(doubleArray45);
        int int47 = matrix46.getCols();
        int int48 = matrix46.getCols();
        matrix46.print();
        double[] doubleArray52 = new double[] { 10, 'a' };
        double[] doubleArray55 = new double[] { 10, 'a' };
        double[][] doubleArray56 = new double[][] { doubleArray52, doubleArray55 };
        com.operations.Matrix.Matrix matrix57 = new com.operations.Matrix.Matrix(doubleArray56);
        boolean boolean59 = com.operations.Matrix.MatrixUtils.compare(matrix46, matrix57, (double) (-1));
        com.operations.Matrix.Matrix matrix60 = com.operations.Matrix.MatrixOperations.subtract(matrix37, matrix57);
        com.operations.Matrix.Matrix[] matrixArray61 = com.operations.Matrix.MatrixDecompositions.luDecomposition(matrix60);
        double[][] doubleArray62 = matrix60.getData();
        com.operations.Matrix.Matrix matrix63 = new com.operations.Matrix.Matrix(doubleArray62);
        com.operations.Matrix.Matrix matrix64 = com.operations.Matrix.MatrixOperations.multiply(matrix28, matrix63);
        boolean boolean65 = com.operations.Matrix.MatrixUtils.isSymmetric(matrix28);
        com.operations.Matrix.Matrix matrix67 = com.operations.Matrix.MatrixTransformations.rotate2D(350.0d);
        com.operations.Matrix.Matrix matrix68 = com.operations.Matrix.MatrixDecompositions.choleskyDecomposition(matrix67);
        int int69 = matrix67.getRows();
        com.operations.Matrix.Matrix matrix70 = com.operations.Matrix.MatrixOperations.subtract(matrix28, matrix67);
        double[] doubleArray73 = new double[] { 10, 'a' };
        double[] doubleArray76 = new double[] { 10, 'a' };
        double[][] doubleArray77 = new double[][] { doubleArray73, doubleArray76 };
        com.operations.Matrix.Matrix matrix78 = new com.operations.Matrix.Matrix(doubleArray77);
        int int79 = matrix78.getCols();
        int int80 = matrix78.getCols();
        boolean boolean81 = com.operations.Matrix.MatrixUtils.isSquare(matrix78);
        com.operations.Matrix.Matrix matrix82 = com.operations.Matrix.MatrixDecompositions.choleskyDecomposition(matrix78);
        com.operations.Matrix.Matrix matrix85 = com.operations.Matrix.MatrixTransformations.project2D(0.0d, (double) 0);
        com.operations.Matrix.Matrix matrix86 = com.operations.Matrix.MatrixOperations.subtract(matrix82, matrix85);
        com.operations.Matrix.Matrix matrix87 = com.operations.Matrix.MatrixOperations.transpose(matrix85);
        com.operations.Matrix.Matrix matrix88 = com.operations.Matrix.MatrixOperations.subtract(matrix28, matrix87);
        com.operations.Matrix.Matrix matrix89 = com.operations.Matrix.MatrixDecompositions.choleskyDecomposition(matrix88);
        int int90 = matrix88.getCols();
        com.operations.Matrix.Matrix matrix92 = com.operations.Matrix.MatrixOperations.scalarMultiply(matrix88, 18.985133644271098d);
        com.operations.Matrix.Matrix matrix93 = com.operations.Matrix.MatrixOperations.add(matrix21, matrix88);
        com.operations.Matrix.Matrix matrix95 = com.operations.Matrix.MatrixOperations.scalarMultiply(matrix88, 626.0990336999411d);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertArrayEquals(doubleArray2, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertArrayEquals(doubleArray5, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 2 + "'", int8 == 2);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 2 + "'", int9 == 2);
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertArrayEquals(doubleArray13, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertArrayEquals(doubleArray16, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(matrix21);
        org.junit.Assert.assertNotNull(matrix23);
        org.junit.Assert.assertNotNull(matrix24);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 2 + "'", int25 == 2);
        org.junit.Assert.assertNotNull(matrix28);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertArrayEquals(doubleArray31, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertArrayEquals(doubleArray34, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertArrayEquals(doubleArray41, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertArrayEquals(doubleArray44, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 2 + "'", int47 == 2);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 2 + "'", int48 == 2);
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertArrayEquals(doubleArray52, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertArrayEquals(doubleArray55, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray56);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNotNull(matrix60);
        org.junit.Assert.assertNotNull(matrixArray61);
        org.junit.Assert.assertNotNull(doubleArray62);
        org.junit.Assert.assertNotNull(matrix64);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + true + "'", boolean65 == true);
        org.junit.Assert.assertNotNull(matrix67);
        org.junit.Assert.assertNotNull(matrix68);
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 2 + "'", int69 == 2);
        org.junit.Assert.assertNotNull(matrix70);
        org.junit.Assert.assertNotNull(doubleArray73);
        org.junit.Assert.assertArrayEquals(doubleArray73, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray76);
        org.junit.Assert.assertArrayEquals(doubleArray76, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray77);
        org.junit.Assert.assertTrue("'" + int79 + "' != '" + 2 + "'", int79 == 2);
        org.junit.Assert.assertTrue("'" + int80 + "' != '" + 2 + "'", int80 == 2);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + true + "'", boolean81 == true);
        org.junit.Assert.assertNotNull(matrix82);
        org.junit.Assert.assertNotNull(matrix85);
        org.junit.Assert.assertNotNull(matrix86);
        org.junit.Assert.assertNotNull(matrix87);
        org.junit.Assert.assertNotNull(matrix88);
        org.junit.Assert.assertNotNull(matrix89);
        org.junit.Assert.assertTrue("'" + int90 + "' != '" + 2 + "'", int90 == 2);
        org.junit.Assert.assertNotNull(matrix92);
        org.junit.Assert.assertNotNull(matrix93);
        org.junit.Assert.assertNotNull(matrix95);
    }

    @Test
    public void test3174() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3174");
        com.operations.Matrix.Matrix matrix2 = com.operations.Matrix.MatrixTransformations.project2D(1363.6076983299943d, (double) 52);
        com.operations.Matrix.Matrix matrix3 = com.operations.Matrix.MatrixDecompositions.choleskyDecomposition(matrix2);
        com.operations.Matrix.Matrix[] matrixArray4 = com.operations.Matrix.MatrixDecompositions.luDecomposition(matrix2);
        boolean boolean5 = com.operations.Matrix.MatrixUtils.isSymmetric(matrix2);
        org.junit.Assert.assertNotNull(matrix2);
        org.junit.Assert.assertNotNull(matrix3);
        org.junit.Assert.assertNotNull(matrixArray4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
    }

    @Test
    public void test3175() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3175");
        com.operations.Matrix.Matrix matrix0 = null;
        com.operations.Matrix.Matrix matrix3 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0L, (double) (byte) 10);
        int int4 = matrix3.getRows();
        com.operations.Matrix.Matrix matrix10 = com.operations.Matrix.MatrixUtils.generateRandomMatrix(100, (int) (byte) 1, (int) '#', (int) '#', 1L);
        boolean boolean12 = com.operations.Matrix.MatrixUtils.compare(matrix3, matrix10, (double) 1.0f);
        com.operations.Matrix.Matrix matrix14 = com.operations.Matrix.MatrixOperations.scalarMultiply(matrix3, (double) 1L);
        boolean boolean15 = com.operations.Matrix.MatrixUtils.isSymmetric(matrix3);
        // The following exception was thrown during execution in test generation
        try {
            com.operations.Matrix.Matrix matrix16 = com.operations.Matrix.MatrixOperations.subtract(matrix0, matrix3);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(matrix3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 2 + "'", int4 == 2);
        org.junit.Assert.assertNotNull(matrix10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(matrix14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
    }

    @Test
    public void test3176() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3176");
        com.operations.Matrix.Matrix matrix2 = com.operations.Matrix.MatrixTransformations.scale2D(136.9141301851733d, 0.0d);
        com.operations.Matrix.Matrix matrix4 = com.operations.Matrix.MatrixTransformations.rotate2D((double) '4');
        com.operations.Matrix.Matrix matrix7 = com.operations.Matrix.MatrixTransformations.project2D((double) ' ', 0.0d);
        boolean boolean8 = com.operations.Matrix.MatrixUtils.isSymmetric(matrix7);
        boolean boolean10 = com.operations.Matrix.MatrixUtils.compare(matrix4, matrix7, 1.4142135623730951d);
        boolean boolean11 = com.operations.Matrix.MatrixUtils.isSquare(matrix7);
        com.operations.Matrix.Matrix matrix14 = com.operations.Matrix.MatrixTransformations.scale2D((double) (byte) 100, 350.0d);
        com.operations.Matrix.Matrix matrix17 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0L, (double) (byte) 10);
        double[] doubleArray20 = new double[] { 10, 'a' };
        double[] doubleArray23 = new double[] { 10, 'a' };
        double[][] doubleArray24 = new double[][] { doubleArray20, doubleArray23 };
        com.operations.Matrix.Matrix matrix25 = new com.operations.Matrix.Matrix(doubleArray24);
        int int26 = matrix25.getCols();
        int int27 = matrix25.getCols();
        int int28 = matrix25.getCols();
        com.operations.Matrix.Matrix[] matrixArray29 = com.operations.Matrix.MatrixDecompositions.luDecomposition(matrix25);
        com.operations.Matrix.Matrix matrix30 = com.operations.Matrix.MatrixOperations.multiply(matrix17, matrix25);
        com.operations.Matrix.Matrix matrix32 = com.operations.Matrix.MatrixTransformations.rotate2D((double) (short) 100);
        boolean boolean34 = com.operations.Matrix.MatrixUtils.compare(matrix25, matrix32, (double) (byte) 0);
        double[] doubleArray37 = new double[] { 10, 'a' };
        double[] doubleArray40 = new double[] { 10, 'a' };
        double[][] doubleArray41 = new double[][] { doubleArray37, doubleArray40 };
        com.operations.Matrix.Matrix matrix42 = new com.operations.Matrix.Matrix(doubleArray41);
        com.operations.Matrix.Matrix matrix43 = com.operations.Matrix.MatrixOperations.multiply(matrix25, matrix42);
        com.operations.Matrix.Matrix matrix44 = com.operations.Matrix.MatrixOperations.multiply(matrix14, matrix43);
        int int45 = matrix44.getRows();
        com.operations.Matrix.Matrix matrix50 = com.operations.Matrix.MatrixUtils.generateRandomMatrix((int) '#', (int) (byte) 0, 10, (int) (short) -1);
        com.operations.Matrix.Matrix matrix52 = com.operations.Matrix.MatrixOperations.scalarMultiply(matrix50, (double) 100L);
        com.operations.Matrix.Matrix matrix55 = com.operations.Matrix.MatrixTransformations.project2D(0.0d, (double) 0);
        com.operations.Matrix.Matrix[] matrixArray56 = com.operations.Matrix.MatrixDecompositions.luDecomposition(matrix55);
        com.operations.Matrix.Matrix matrix59 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0L, (double) (byte) 10);
        int int60 = matrix59.getRows();
        com.operations.Matrix.Matrix matrix62 = com.operations.Matrix.MatrixOperations.scalarMultiply(matrix59, (double) 2);
        double double63 = com.operations.Matrix.MatrixUtils.frobeniusNorm(matrix59);
        int int64 = matrix59.getRows();
        com.operations.Matrix.Matrix matrix65 = com.operations.Matrix.MatrixOperations.transpose(matrix59);
        com.operations.Matrix.Matrix matrix66 = com.operations.Matrix.MatrixOperations.multiply(matrix55, matrix65);
        double[] doubleArray69 = new double[] { 10, 'a' };
        double[] doubleArray72 = new double[] { 10, 'a' };
        double[][] doubleArray73 = new double[][] { doubleArray69, doubleArray72 };
        com.operations.Matrix.Matrix matrix74 = new com.operations.Matrix.Matrix(doubleArray73);
        com.operations.Matrix.Matrix matrix75 = new com.operations.Matrix.Matrix(doubleArray73);
        com.operations.Matrix.Matrix[] matrixArray76 = com.operations.Matrix.MatrixDecompositions.luDecomposition(matrix75);
        com.operations.Matrix.Matrix matrix79 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0, (double) 100L);
        com.operations.Matrix.Matrix matrix80 = com.operations.Matrix.MatrixOperations.subtract(matrix75, matrix79);
        double[][] doubleArray81 = matrix80.getData();
        com.operations.Matrix.Matrix matrix82 = new com.operations.Matrix.Matrix(doubleArray81);
        boolean boolean84 = com.operations.Matrix.MatrixUtils.compare(matrix65, matrix82, 32.0d);
        boolean boolean86 = com.operations.Matrix.MatrixUtils.compare(matrix50, matrix65, 146781.22563870353d);
        com.operations.Matrix.Matrix matrix87 = com.operations.Matrix.MatrixOperations.add(matrix44, matrix65);
        boolean boolean89 = com.operations.Matrix.MatrixUtils.compare(matrix7, matrix65, 400.0d);
        boolean boolean90 = com.operations.Matrix.MatrixUtils.isSquare(matrix65);
        com.operations.Matrix.Matrix matrix91 = com.operations.Matrix.MatrixOperations.multiply(matrix2, matrix65);
        org.junit.Assert.assertNotNull(matrix2);
        org.junit.Assert.assertNotNull(matrix4);
        org.junit.Assert.assertNotNull(matrix7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNotNull(matrix14);
        org.junit.Assert.assertNotNull(matrix17);
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertArrayEquals(doubleArray20, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertArrayEquals(doubleArray23, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 2 + "'", int26 == 2);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 2 + "'", int27 == 2);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 2 + "'", int28 == 2);
        org.junit.Assert.assertNotNull(matrixArray29);
        org.junit.Assert.assertNotNull(matrix30);
        org.junit.Assert.assertNotNull(matrix32);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertArrayEquals(doubleArray37, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertArrayEquals(doubleArray40, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertNotNull(matrix43);
        org.junit.Assert.assertNotNull(matrix44);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 2 + "'", int45 == 2);
        org.junit.Assert.assertNotNull(matrix50);
        org.junit.Assert.assertNotNull(matrix52);
        org.junit.Assert.assertNotNull(matrix55);
        org.junit.Assert.assertNotNull(matrixArray56);
        org.junit.Assert.assertNotNull(matrix59);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 2 + "'", int60 == 2);
        org.junit.Assert.assertNotNull(matrix62);
        org.junit.Assert.assertTrue("'" + double63 + "' != '" + 10.0d + "'", double63 == 10.0d);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 2 + "'", int64 == 2);
        org.junit.Assert.assertNotNull(matrix65);
        org.junit.Assert.assertNotNull(matrix66);
        org.junit.Assert.assertNotNull(doubleArray69);
        org.junit.Assert.assertArrayEquals(doubleArray69, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray72);
        org.junit.Assert.assertArrayEquals(doubleArray72, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray73);
        org.junit.Assert.assertNotNull(matrixArray76);
        org.junit.Assert.assertNotNull(matrix79);
        org.junit.Assert.assertNotNull(matrix80);
        org.junit.Assert.assertNotNull(doubleArray81);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
        org.junit.Assert.assertNotNull(matrix87);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + true + "'", boolean89 == true);
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + true + "'", boolean90 == true);
        org.junit.Assert.assertNotNull(matrix91);
    }

    @Test
    public void test3177() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3177");
        com.operations.Matrix.Matrix matrix4 = com.operations.Matrix.MatrixUtils.generateRandomMatrix((int) ' ', 97, (int) (short) -1, (int) (short) 10);
        org.junit.Assert.assertNotNull(matrix4);
    }

    @Test
    public void test3178() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3178");
        com.operations.Matrix.Matrix matrix1 = com.operations.Matrix.MatrixTransformations.rotate2D((double) 10.0f);
        boolean boolean2 = com.operations.Matrix.MatrixUtils.isSquare(matrix1);
        com.operations.Matrix.Matrix matrix5 = com.operations.Matrix.MatrixTransformations.scale2D((double) 100.0f, (double) (byte) 1);
        com.operations.Matrix.Matrix matrix8 = com.operations.Matrix.MatrixTransformations.scale2D((double) 1.0f, (double) 1);
        com.operations.Matrix.Matrix matrix10 = com.operations.Matrix.MatrixTransformations.rotate2D((double) 1.0f);
        com.operations.Matrix.Matrix matrix13 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0L, (double) (byte) 10);
        int int14 = matrix13.getRows();
        com.operations.Matrix.Matrix matrix16 = com.operations.Matrix.MatrixOperations.scalarMultiply(matrix13, (double) 2);
        double double17 = com.operations.Matrix.MatrixUtils.frobeniusNorm(matrix13);
        com.operations.Matrix.Matrix matrix20 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0L, (double) (byte) 10);
        int int21 = matrix20.getRows();
        com.operations.Matrix.Matrix matrix23 = com.operations.Matrix.MatrixOperations.scalarMultiply(matrix20, (double) 2);
        com.operations.Matrix.Matrix matrix24 = com.operations.Matrix.MatrixOperations.subtract(matrix13, matrix23);
        com.operations.Matrix.Matrix matrix25 = com.operations.Matrix.MatrixOperations.add(matrix10, matrix23);
        boolean boolean27 = com.operations.Matrix.MatrixUtils.compare(matrix8, matrix10, (double) (byte) -1);
        com.operations.Matrix.Matrix matrix28 = com.operations.Matrix.MatrixOperations.transpose(matrix10);
        com.operations.Matrix.Matrix matrix31 = com.operations.Matrix.MatrixTransformations.project2D((double) 10L, 10.0d);
        com.operations.Matrix.Matrix matrix33 = com.operations.Matrix.MatrixTransformations.rotate2D((double) (short) 100);
        double[] doubleArray36 = new double[] { 137.90576492663388d, (byte) -1 };
        double[] doubleArray37 = com.operations.Matrix.MatrixSolver.solveGaussian(matrix33, doubleArray36);
        com.operations.Matrix.Matrix matrix40 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0L, (double) (byte) 10);
        double[] doubleArray43 = new double[] { 10, 'a' };
        double[] doubleArray46 = new double[] { 10, 'a' };
        double[][] doubleArray47 = new double[][] { doubleArray43, doubleArray46 };
        com.operations.Matrix.Matrix matrix48 = new com.operations.Matrix.Matrix(doubleArray47);
        int int49 = matrix48.getCols();
        int int50 = matrix48.getCols();
        int int51 = matrix48.getCols();
        com.operations.Matrix.Matrix[] matrixArray52 = com.operations.Matrix.MatrixDecompositions.luDecomposition(matrix48);
        com.operations.Matrix.Matrix matrix53 = com.operations.Matrix.MatrixOperations.multiply(matrix40, matrix48);
        boolean boolean55 = com.operations.Matrix.MatrixUtils.compare(matrix33, matrix40, (double) (-1L));
        double[][] doubleArray56 = matrix33.getData();
        com.operations.Matrix.Matrix matrix58 = com.operations.Matrix.MatrixTransformations.rotate2D((double) (short) 100);
        double[] doubleArray61 = new double[] { 137.90576492663388d, (byte) -1 };
        double[] doubleArray62 = com.operations.Matrix.MatrixSolver.solveGaussian(matrix58, doubleArray61);
        double[] doubleArray63 = com.operations.Matrix.MatrixSolver.solveGaussian(matrix33, doubleArray61);
        double[] doubleArray64 = com.operations.Matrix.MatrixSolver.solveGaussian(matrix31, doubleArray63);
        double[] doubleArray65 = com.operations.Matrix.MatrixSolver.solveGaussian(matrix10, doubleArray64);
        double[] doubleArray66 = com.operations.Matrix.MatrixSolver.solveGaussian(matrix5, doubleArray65);
        com.operations.Matrix.Matrix matrix67 = com.operations.Matrix.MatrixOperations.add(matrix1, matrix5);
        int int68 = matrix5.getRows();
        org.junit.Assert.assertNotNull(matrix1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertNotNull(matrix5);
        org.junit.Assert.assertNotNull(matrix8);
        org.junit.Assert.assertNotNull(matrix10);
        org.junit.Assert.assertNotNull(matrix13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 2 + "'", int14 == 2);
        org.junit.Assert.assertNotNull(matrix16);
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + 10.0d + "'", double17 == 10.0d);
        org.junit.Assert.assertNotNull(matrix20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 2 + "'", int21 == 2);
        org.junit.Assert.assertNotNull(matrix23);
        org.junit.Assert.assertNotNull(matrix24);
        org.junit.Assert.assertNotNull(matrix25);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(matrix28);
        org.junit.Assert.assertNotNull(matrix31);
        org.junit.Assert.assertNotNull(matrix33);
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertArrayEquals(doubleArray36, new double[] { 137.90576492663388d, (-1.0d) }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertArrayEquals(doubleArray37, new double[] { (-24.931892522286255d), (-135.63701830716116d) }, 1.0E-15);
        org.junit.Assert.assertNotNull(matrix40);
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertArrayEquals(doubleArray43, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray46);
        org.junit.Assert.assertArrayEquals(doubleArray46, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 2 + "'", int49 == 2);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 2 + "'", int50 == 2);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 2 + "'", int51 == 2);
        org.junit.Assert.assertNotNull(matrixArray52);
        org.junit.Assert.assertNotNull(matrix53);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNotNull(doubleArray56);
        org.junit.Assert.assertNotNull(matrix58);
        org.junit.Assert.assertNotNull(doubleArray61);
        org.junit.Assert.assertArrayEquals(doubleArray61, new double[] { 137.90576492663388d, (-1.0d) }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray62);
        org.junit.Assert.assertArrayEquals(doubleArray62, new double[] { (-24.931892522286255d), (-135.63701830716116d) }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray63);
        org.junit.Assert.assertArrayEquals(doubleArray63, new double[] { (-24.931892522286255d), (-135.63701830716116d) }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray64);
        org.junit.Assert.assertArrayEquals(doubleArray64, new double[] { (-2.4931892522286256d), (-13.563701830716116d) }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray65);
        org.junit.Assert.assertArrayEquals(doubleArray65, new double[] { (-2.7295287645732618d), (-13.518123861075072d) }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray66);
        org.junit.Assert.assertArrayEquals(doubleArray66, new double[] { (-0.027295287645732618d), (-13.518123861075072d) }, 1.0E-15);
        org.junit.Assert.assertNotNull(matrix67);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 2 + "'", int68 == 2);
    }

    @Test
    public void test3179() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3179");
        com.operations.Matrix.Matrix matrix2 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0L, (double) (byte) 10);
        double[] doubleArray5 = new double[] { 10, 'a' };
        double[] doubleArray8 = new double[] { 10, 'a' };
        double[][] doubleArray9 = new double[][] { doubleArray5, doubleArray8 };
        com.operations.Matrix.Matrix matrix10 = new com.operations.Matrix.Matrix(doubleArray9);
        int int11 = matrix10.getCols();
        int int12 = matrix10.getCols();
        int int13 = matrix10.getCols();
        com.operations.Matrix.Matrix[] matrixArray14 = com.operations.Matrix.MatrixDecompositions.luDecomposition(matrix10);
        com.operations.Matrix.Matrix matrix15 = com.operations.Matrix.MatrixOperations.multiply(matrix2, matrix10);
        com.operations.Matrix.Matrix matrix17 = com.operations.Matrix.MatrixTransformations.rotate2D((double) (short) 100);
        boolean boolean19 = com.operations.Matrix.MatrixUtils.compare(matrix10, matrix17, (double) (byte) 0);
        double[] doubleArray22 = new double[] { 10, 'a' };
        double[] doubleArray25 = new double[] { 10, 'a' };
        double[][] doubleArray26 = new double[][] { doubleArray22, doubleArray25 };
        com.operations.Matrix.Matrix matrix27 = new com.operations.Matrix.Matrix(doubleArray26);
        com.operations.Matrix.Matrix matrix28 = new com.operations.Matrix.Matrix(doubleArray26);
        com.operations.Matrix.Matrix matrix29 = new com.operations.Matrix.Matrix(doubleArray26);
        boolean boolean31 = com.operations.Matrix.MatrixUtils.compare(matrix10, matrix29, (double) (-1));
        com.operations.Matrix.Matrix matrix33 = com.operations.Matrix.MatrixTransformations.rotate2D((double) (short) 100);
        double[] doubleArray36 = new double[] { 137.90576492663388d, (byte) -1 };
        double[] doubleArray37 = com.operations.Matrix.MatrixSolver.solveGaussian(matrix33, doubleArray36);
        com.operations.Matrix.Matrix matrix40 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0L, (double) (byte) 10);
        double[] doubleArray43 = new double[] { 10, 'a' };
        double[] doubleArray46 = new double[] { 10, 'a' };
        double[][] doubleArray47 = new double[][] { doubleArray43, doubleArray46 };
        com.operations.Matrix.Matrix matrix48 = new com.operations.Matrix.Matrix(doubleArray47);
        int int49 = matrix48.getCols();
        int int50 = matrix48.getCols();
        int int51 = matrix48.getCols();
        com.operations.Matrix.Matrix[] matrixArray52 = com.operations.Matrix.MatrixDecompositions.luDecomposition(matrix48);
        com.operations.Matrix.Matrix matrix53 = com.operations.Matrix.MatrixOperations.multiply(matrix40, matrix48);
        boolean boolean55 = com.operations.Matrix.MatrixUtils.compare(matrix33, matrix40, (double) (-1L));
        com.operations.Matrix.Matrix matrix56 = com.operations.Matrix.MatrixOperations.add(matrix29, matrix40);
        double[] doubleArray59 = new double[] { 10, 'a' };
        double[] doubleArray62 = new double[] { 10, 'a' };
        double[][] doubleArray63 = new double[][] { doubleArray59, doubleArray62 };
        com.operations.Matrix.Matrix matrix64 = new com.operations.Matrix.Matrix(doubleArray63);
        int int65 = matrix64.getCols();
        int int66 = matrix64.getCols();
        int int67 = matrix64.getCols();
        com.operations.Matrix.Matrix matrix73 = com.operations.Matrix.MatrixUtils.generateRandomMatrix(100, (int) (byte) 1, (int) '#', (int) '#', 1L);
        double double76 = matrix73.getValue((int) '4', 0);
        double double77 = com.operations.Matrix.MatrixUtils.frobeniusNorm(matrix73);
        boolean boolean78 = com.operations.Matrix.MatrixUtils.isSquare(matrix73);
        boolean boolean80 = com.operations.Matrix.MatrixUtils.compare(matrix64, matrix73, (double) 100L);
        com.operations.Matrix.Matrix matrix81 = com.operations.Matrix.MatrixDecompositions.choleskyDecomposition(matrix64);
        double[] doubleArray84 = new double[] { 10, 'a' };
        double[] doubleArray87 = new double[] { 10, 'a' };
        double[][] doubleArray88 = new double[][] { doubleArray84, doubleArray87 };
        com.operations.Matrix.Matrix matrix89 = new com.operations.Matrix.Matrix(doubleArray88);
        int int90 = matrix89.getCols();
        int int91 = matrix89.getCols();
        int int92 = matrix89.getCols();
        com.operations.Matrix.Matrix matrix94 = com.operations.Matrix.MatrixOperations.scalarMultiply(matrix89, (double) 0.0f);
        boolean boolean96 = com.operations.Matrix.MatrixUtils.compare(matrix81, matrix89, (double) '4');
        boolean boolean97 = com.operations.Matrix.MatrixUtils.isSymmetric(matrix81);
        com.operations.Matrix.Matrix matrix98 = com.operations.Matrix.MatrixOperations.add(matrix56, matrix81);
        org.junit.Assert.assertNotNull(matrix2);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertArrayEquals(doubleArray5, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertArrayEquals(doubleArray8, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 2 + "'", int11 == 2);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 2 + "'", int12 == 2);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 2 + "'", int13 == 2);
        org.junit.Assert.assertNotNull(matrixArray14);
        org.junit.Assert.assertNotNull(matrix15);
        org.junit.Assert.assertNotNull(matrix17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertArrayEquals(doubleArray22, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertArrayEquals(doubleArray25, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(matrix33);
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertArrayEquals(doubleArray36, new double[] { 137.90576492663388d, (-1.0d) }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertArrayEquals(doubleArray37, new double[] { (-24.931892522286255d), (-135.63701830716116d) }, 1.0E-15);
        org.junit.Assert.assertNotNull(matrix40);
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertArrayEquals(doubleArray43, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray46);
        org.junit.Assert.assertArrayEquals(doubleArray46, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 2 + "'", int49 == 2);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 2 + "'", int50 == 2);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 2 + "'", int51 == 2);
        org.junit.Assert.assertNotNull(matrixArray52);
        org.junit.Assert.assertNotNull(matrix53);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNotNull(matrix56);
        org.junit.Assert.assertNotNull(doubleArray59);
        org.junit.Assert.assertArrayEquals(doubleArray59, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray62);
        org.junit.Assert.assertArrayEquals(doubleArray62, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray63);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 2 + "'", int65 == 2);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 2 + "'", int66 == 2);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 2 + "'", int67 == 2);
        org.junit.Assert.assertNotNull(matrix73);
        org.junit.Assert.assertTrue("'" + double76 + "' != '" + 35.0d + "'", double76 == 35.0d);
        org.junit.Assert.assertTrue("'" + double77 + "' != '" + 350.0d + "'", double77 == 350.0d);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertNotNull(matrix81);
        org.junit.Assert.assertNotNull(doubleArray84);
        org.junit.Assert.assertArrayEquals(doubleArray84, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray87);
        org.junit.Assert.assertArrayEquals(doubleArray87, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray88);
        org.junit.Assert.assertTrue("'" + int90 + "' != '" + 2 + "'", int90 == 2);
        org.junit.Assert.assertTrue("'" + int91 + "' != '" + 2 + "'", int91 == 2);
        org.junit.Assert.assertTrue("'" + int92 + "' != '" + 2 + "'", int92 == 2);
        org.junit.Assert.assertNotNull(matrix94);
        org.junit.Assert.assertTrue("'" + boolean96 + "' != '" + false + "'", boolean96 == false);
        org.junit.Assert.assertTrue("'" + boolean97 + "' != '" + false + "'", boolean97 == false);
        org.junit.Assert.assertNotNull(matrix98);
    }

    @Test
    public void test3180() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3180");
        com.operations.Matrix.Matrix matrix2 = com.operations.Matrix.MatrixTransformations.project2D(1040.0d, 10499.52379872535d);
        org.junit.Assert.assertNotNull(matrix2);
    }

    @Test
    public void test3181() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3181");
        com.operations.Matrix.Matrix matrix4 = com.operations.Matrix.MatrixUtils.generateRandomMatrix((int) '4', (int) (byte) 1, (int) (byte) -1, (int) (short) 100);
        com.operations.Matrix.Matrix matrix10 = com.operations.Matrix.MatrixUtils.generateRandomMatrix(100, (int) (byte) 1, (int) '#', (int) '#', 1L);
        double double13 = matrix10.getValue((int) '4', 0);
        double double14 = com.operations.Matrix.MatrixUtils.frobeniusNorm(matrix10);
        boolean boolean15 = com.operations.Matrix.MatrixUtils.isSquare(matrix10);
        int int16 = matrix10.getRows();
        boolean boolean18 = com.operations.Matrix.MatrixUtils.compare(matrix4, matrix10, (double) 100.0f);
        double double19 = com.operations.Matrix.MatrixUtils.frobeniusNorm(matrix4);
        int int20 = matrix4.getCols();
        org.junit.Assert.assertNotNull(matrix4);
        org.junit.Assert.assertNotNull(matrix10);
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 35.0d + "'", double13 == 35.0d);
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 350.0d + "'", double14 == 350.0d);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 100 + "'", int16 == 100);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 391.8840992892044d + "'", double19 == 391.8840992892044d);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 1 + "'", int20 == 1);
    }

    @Test
    public void test3182() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3182");
        double[] doubleArray2 = new double[] { 10, 'a' };
        double[] doubleArray5 = new double[] { 10, 'a' };
        double[][] doubleArray6 = new double[][] { doubleArray2, doubleArray5 };
        com.operations.Matrix.Matrix matrix7 = new com.operations.Matrix.Matrix(doubleArray6);
        int int8 = matrix7.getCols();
        boolean boolean9 = com.operations.Matrix.MatrixUtils.isSquare(matrix7);
        com.operations.Matrix.Matrix matrix10 = com.operations.Matrix.MatrixOperations.transpose(matrix7);
        int int11 = matrix10.getRows();
        com.operations.Matrix.Matrix matrix14 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0L, (double) (byte) 10);
        double[] doubleArray17 = new double[] { 10, 'a' };
        double[] doubleArray20 = new double[] { 10, 'a' };
        double[][] doubleArray21 = new double[][] { doubleArray17, doubleArray20 };
        com.operations.Matrix.Matrix matrix22 = new com.operations.Matrix.Matrix(doubleArray21);
        int int23 = matrix22.getCols();
        int int24 = matrix22.getCols();
        int int25 = matrix22.getCols();
        com.operations.Matrix.Matrix[] matrixArray26 = com.operations.Matrix.MatrixDecompositions.luDecomposition(matrix22);
        com.operations.Matrix.Matrix matrix27 = com.operations.Matrix.MatrixOperations.multiply(matrix14, matrix22);
        com.operations.Matrix.Matrix matrix29 = com.operations.Matrix.MatrixTransformations.rotate2D((double) (short) 100);
        boolean boolean31 = com.operations.Matrix.MatrixUtils.compare(matrix22, matrix29, (double) (byte) 0);
        com.operations.Matrix.Matrix matrix32 = com.operations.Matrix.MatrixOperations.multiply(matrix10, matrix22);
        int int33 = matrix10.getCols();
        double[][] doubleArray34 = matrix10.getData();
        com.operations.Matrix.Matrix matrix37 = com.operations.Matrix.MatrixTransformations.project2D((double) 10L, 10.0d);
        com.operations.Matrix.Matrix matrix39 = com.operations.Matrix.MatrixTransformations.rotate2D((double) (short) 100);
        double[] doubleArray42 = new double[] { 137.90576492663388d, (byte) -1 };
        double[] doubleArray43 = com.operations.Matrix.MatrixSolver.solveGaussian(matrix39, doubleArray42);
        com.operations.Matrix.Matrix matrix46 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0L, (double) (byte) 10);
        double[] doubleArray49 = new double[] { 10, 'a' };
        double[] doubleArray52 = new double[] { 10, 'a' };
        double[][] doubleArray53 = new double[][] { doubleArray49, doubleArray52 };
        com.operations.Matrix.Matrix matrix54 = new com.operations.Matrix.Matrix(doubleArray53);
        int int55 = matrix54.getCols();
        int int56 = matrix54.getCols();
        int int57 = matrix54.getCols();
        com.operations.Matrix.Matrix[] matrixArray58 = com.operations.Matrix.MatrixDecompositions.luDecomposition(matrix54);
        com.operations.Matrix.Matrix matrix59 = com.operations.Matrix.MatrixOperations.multiply(matrix46, matrix54);
        boolean boolean61 = com.operations.Matrix.MatrixUtils.compare(matrix39, matrix46, (double) (-1L));
        double[][] doubleArray62 = matrix39.getData();
        com.operations.Matrix.Matrix matrix64 = com.operations.Matrix.MatrixTransformations.rotate2D((double) (short) 100);
        double[] doubleArray67 = new double[] { 137.90576492663388d, (byte) -1 };
        double[] doubleArray68 = com.operations.Matrix.MatrixSolver.solveGaussian(matrix64, doubleArray67);
        double[] doubleArray69 = com.operations.Matrix.MatrixSolver.solveGaussian(matrix39, doubleArray67);
        double[] doubleArray70 = com.operations.Matrix.MatrixSolver.solveGaussian(matrix37, doubleArray69);
        boolean boolean72 = com.operations.Matrix.MatrixUtils.compare(matrix10, matrix37, (double) 100.0f);
        matrix10.print();
        com.operations.Matrix.Matrix matrix74 = com.operations.Matrix.MatrixOperations.transpose(matrix10);
        com.operations.Matrix.Matrix matrix75 = null;
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean77 = com.operations.Matrix.MatrixUtils.compare(matrix10, matrix75, 391.8840992892044d);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot invoke \"com.operations.Matrix.Matrix.getRows()\" because \"b\" is null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertArrayEquals(doubleArray2, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertArrayEquals(doubleArray5, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 2 + "'", int8 == 2);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertNotNull(matrix10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 2 + "'", int11 == 2);
        org.junit.Assert.assertNotNull(matrix14);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertArrayEquals(doubleArray17, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertArrayEquals(doubleArray20, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 2 + "'", int23 == 2);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 2 + "'", int24 == 2);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 2 + "'", int25 == 2);
        org.junit.Assert.assertNotNull(matrixArray26);
        org.junit.Assert.assertNotNull(matrix27);
        org.junit.Assert.assertNotNull(matrix29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(matrix32);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 2 + "'", int33 == 2);
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertNotNull(matrix37);
        org.junit.Assert.assertNotNull(matrix39);
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertArrayEquals(doubleArray42, new double[] { 137.90576492663388d, (-1.0d) }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertArrayEquals(doubleArray43, new double[] { (-24.931892522286255d), (-135.63701830716116d) }, 1.0E-15);
        org.junit.Assert.assertNotNull(matrix46);
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertArrayEquals(doubleArray49, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertArrayEquals(doubleArray52, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 2 + "'", int55 == 2);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 2 + "'", int56 == 2);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 2 + "'", int57 == 2);
        org.junit.Assert.assertNotNull(matrixArray58);
        org.junit.Assert.assertNotNull(matrix59);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNotNull(doubleArray62);
        org.junit.Assert.assertNotNull(matrix64);
        org.junit.Assert.assertNotNull(doubleArray67);
        org.junit.Assert.assertArrayEquals(doubleArray67, new double[] { 137.90576492663388d, (-1.0d) }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray68);
        org.junit.Assert.assertArrayEquals(doubleArray68, new double[] { (-24.931892522286255d), (-135.63701830716116d) }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray69);
        org.junit.Assert.assertArrayEquals(doubleArray69, new double[] { (-24.931892522286255d), (-135.63701830716116d) }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray70);
        org.junit.Assert.assertArrayEquals(doubleArray70, new double[] { (-2.4931892522286256d), (-13.563701830716116d) }, 1.0E-15);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + true + "'", boolean72 == true);
        org.junit.Assert.assertNotNull(matrix74);
    }

    @Test
    public void test3183() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3183");
        com.operations.Matrix.Matrix matrix2 = com.operations.Matrix.MatrixTransformations.scale2D((double) 35, (double) (-1L));
        double[][] doubleArray3 = matrix2.getData();
        com.operations.Matrix.Matrix matrix4 = new com.operations.Matrix.Matrix(doubleArray3);
        org.junit.Assert.assertNotNull(matrix2);
        org.junit.Assert.assertNotNull(doubleArray3);
    }

    @Test
    public void test3184() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3184");
        com.operations.Matrix.Matrix matrix4 = com.operations.Matrix.MatrixUtils.generateRandomMatrix(100, (int) 'a', (int) '4', (int) (byte) 100);
        org.junit.Assert.assertNotNull(matrix4);
    }

    @Test
    public void test3185() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3185");
        com.operations.Matrix.Matrix matrix2 = com.operations.Matrix.MatrixTransformations.project2D((double) (short) 100, 35.0d);
        com.operations.Matrix.Matrix[] matrixArray3 = com.operations.Matrix.MatrixDecompositions.luDecomposition(matrix2);
        com.operations.Matrix.Matrix matrix4 = com.operations.Matrix.MatrixDecompositions.choleskyDecomposition(matrix2);
        com.operations.Matrix.Matrix matrix5 = com.operations.Matrix.MatrixOperations.transpose(matrix2);
        boolean boolean6 = com.operations.Matrix.MatrixUtils.isSquare(matrix2);
        matrix2.print();
        org.junit.Assert.assertNotNull(matrix2);
        org.junit.Assert.assertNotNull(matrixArray3);
        org.junit.Assert.assertNotNull(matrix4);
        org.junit.Assert.assertNotNull(matrix5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
    }

    @Test
    public void test3186() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3186");
        com.operations.Matrix.Matrix matrix1 = com.operations.Matrix.MatrixTransformations.rotate2D(104.9952379872535d);
        org.junit.Assert.assertNotNull(matrix1);
    }

    @Test
    public void test3187() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3187");
        com.operations.Matrix.Matrix matrix2 = new com.operations.Matrix.Matrix((int) (short) 0, 52);
    }

    @Test
    public void test3188() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3188");
        com.operations.Matrix.Matrix matrix2 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0L, (double) (byte) 10);
        double[] doubleArray5 = new double[] { 10, 'a' };
        double[] doubleArray8 = new double[] { 10, 'a' };
        double[][] doubleArray9 = new double[][] { doubleArray5, doubleArray8 };
        com.operations.Matrix.Matrix matrix10 = new com.operations.Matrix.Matrix(doubleArray9);
        int int11 = matrix10.getCols();
        int int12 = matrix10.getCols();
        int int13 = matrix10.getCols();
        com.operations.Matrix.Matrix[] matrixArray14 = com.operations.Matrix.MatrixDecompositions.luDecomposition(matrix10);
        com.operations.Matrix.Matrix matrix15 = com.operations.Matrix.MatrixOperations.multiply(matrix2, matrix10);
        com.operations.Matrix.Matrix matrix17 = com.operations.Matrix.MatrixTransformations.rotate2D((double) (short) 100);
        boolean boolean19 = com.operations.Matrix.MatrixUtils.compare(matrix10, matrix17, (double) (byte) 0);
        com.operations.Matrix.Matrix[] matrixArray20 = com.operations.Matrix.MatrixDecompositions.luDecomposition(matrix10);
        com.operations.Matrix.Matrix matrix21 = com.operations.Matrix.MatrixOperations.transpose(matrix10);
        com.operations.Matrix.Matrix matrix24 = com.operations.Matrix.MatrixTransformations.scale2D((double) 1.0f, (double) 1);
        com.operations.Matrix.Matrix matrix26 = com.operations.Matrix.MatrixTransformations.rotate2D((double) 1.0f);
        com.operations.Matrix.Matrix matrix29 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0L, (double) (byte) 10);
        int int30 = matrix29.getRows();
        com.operations.Matrix.Matrix matrix32 = com.operations.Matrix.MatrixOperations.scalarMultiply(matrix29, (double) 2);
        double double33 = com.operations.Matrix.MatrixUtils.frobeniusNorm(matrix29);
        com.operations.Matrix.Matrix matrix36 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0L, (double) (byte) 10);
        int int37 = matrix36.getRows();
        com.operations.Matrix.Matrix matrix39 = com.operations.Matrix.MatrixOperations.scalarMultiply(matrix36, (double) 2);
        com.operations.Matrix.Matrix matrix40 = com.operations.Matrix.MatrixOperations.subtract(matrix29, matrix39);
        com.operations.Matrix.Matrix matrix41 = com.operations.Matrix.MatrixOperations.add(matrix26, matrix39);
        boolean boolean43 = com.operations.Matrix.MatrixUtils.compare(matrix24, matrix26, (double) (byte) -1);
        com.operations.Matrix.Matrix matrix44 = com.operations.Matrix.MatrixOperations.subtract(matrix21, matrix24);
        double double45 = com.operations.Matrix.MatrixUtils.frobeniusNorm(matrix44);
        com.operations.Matrix.Matrix matrix47 = com.operations.Matrix.MatrixTransformations.rotate2D(100.0d);
        int int48 = matrix47.getCols();
        int int49 = matrix47.getRows();
        com.operations.Matrix.Matrix matrix50 = com.operations.Matrix.MatrixOperations.subtract(matrix44, matrix47);
        // The following exception was thrown during execution in test generation
        try {
            com.operations.Matrix.Matrix matrix51 = com.operations.Matrix.MatrixDecompositions.choleskyDecomposition(matrix44);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Matrix is not positive definite.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(matrix2);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertArrayEquals(doubleArray5, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertArrayEquals(doubleArray8, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 2 + "'", int11 == 2);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 2 + "'", int12 == 2);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 2 + "'", int13 == 2);
        org.junit.Assert.assertNotNull(matrixArray14);
        org.junit.Assert.assertNotNull(matrix15);
        org.junit.Assert.assertNotNull(matrix17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(matrixArray20);
        org.junit.Assert.assertNotNull(matrix21);
        org.junit.Assert.assertNotNull(matrix24);
        org.junit.Assert.assertNotNull(matrix26);
        org.junit.Assert.assertNotNull(matrix29);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 2 + "'", int30 == 2);
        org.junit.Assert.assertNotNull(matrix32);
        org.junit.Assert.assertTrue("'" + double33 + "' != '" + 10.0d + "'", double33 == 10.0d);
        org.junit.Assert.assertNotNull(matrix36);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 2 + "'", int37 == 2);
        org.junit.Assert.assertNotNull(matrix39);
        org.junit.Assert.assertNotNull(matrix40);
        org.junit.Assert.assertNotNull(matrix41);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(matrix44);
        org.junit.Assert.assertTrue("'" + double45 + "' != '" + 137.13497001129946d + "'", double45 == 137.13497001129946d);
        org.junit.Assert.assertNotNull(matrix47);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 2 + "'", int48 == 2);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 2 + "'", int49 == 2);
        org.junit.Assert.assertNotNull(matrix50);
    }

    @Test
    public void test3189() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3189");
        com.operations.Matrix.Matrix matrix2 = com.operations.Matrix.MatrixTransformations.scale2D(147.0076152978997d, 632611.037605257d);
        org.junit.Assert.assertNotNull(matrix2);
    }

    @Test
    public void test3190() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3190");
        // The following exception was thrown during execution in test generation
        try {
            com.operations.Matrix.Matrix matrix4 = com.operations.Matrix.MatrixUtils.generateRandomMatrix((-1), 2, (int) (byte) 0, (int) (byte) 0);
            org.junit.Assert.fail("Expected exception of type java.lang.NegativeArraySizeException; message: -1");
        } catch (java.lang.NegativeArraySizeException e) {
            // Expected exception.
        }
    }

    @Test
    public void test3191() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3191");
        com.operations.Matrix.Matrix matrix1 = com.operations.Matrix.MatrixTransformations.rotate2D((double) '4');
        double[] doubleArray4 = new double[] { 10, 'a' };
        double[] doubleArray7 = new double[] { 10, 'a' };
        double[][] doubleArray8 = new double[][] { doubleArray4, doubleArray7 };
        com.operations.Matrix.Matrix matrix9 = new com.operations.Matrix.Matrix(doubleArray8);
        com.operations.Matrix.Matrix matrix10 = new com.operations.Matrix.Matrix(doubleArray8);
        com.operations.Matrix.Matrix matrix12 = com.operations.Matrix.MatrixTransformations.rotate2D((double) (short) 100);
        double[] doubleArray15 = new double[] { 137.90576492663388d, (byte) -1 };
        double[] doubleArray16 = com.operations.Matrix.MatrixSolver.solveGaussian(matrix12, doubleArray15);
        com.operations.Matrix.Matrix matrix17 = com.operations.Matrix.MatrixOperations.add(matrix10, matrix12);
        boolean boolean18 = com.operations.Matrix.MatrixUtils.isSymmetric(matrix17);
        boolean boolean20 = com.operations.Matrix.MatrixUtils.compare(matrix1, matrix17, 364.0054944640259d);
        com.operations.Matrix.Matrix matrix23 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0L, (double) (byte) 10);
        int int24 = matrix23.getRows();
        com.operations.Matrix.Matrix matrix26 = com.operations.Matrix.MatrixOperations.scalarMultiply(matrix23, (double) 2);
        matrix23.print();
        com.operations.Matrix.Matrix matrix28 = com.operations.Matrix.MatrixOperations.multiply(matrix17, matrix23);
        int int29 = matrix28.getRows();
        com.operations.Matrix.Matrix matrix32 = com.operations.Matrix.MatrixTransformations.scale2D(1.414213562373095d, 36.40054944640259d);
        com.operations.Matrix.Matrix matrix33 = com.operations.Matrix.MatrixOperations.transpose(matrix32);
        com.operations.Matrix.Matrix matrix34 = com.operations.Matrix.MatrixOperations.multiply(matrix28, matrix33);
        com.operations.Matrix.Matrix matrix37 = com.operations.Matrix.MatrixTransformations.project2D(0.0d, (double) (-1L));
        com.operations.Matrix.Matrix matrix38 = com.operations.Matrix.MatrixOperations.multiply(matrix28, matrix37);
        com.operations.Matrix.Matrix matrix40 = com.operations.Matrix.MatrixOperations.scalarMultiply(matrix38, (double) (short) 0);
        matrix40.print();
        // The following exception was thrown during execution in test generation
        try {
            double double44 = matrix40.getValue((int) (short) -1, (int) '#');
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(matrix1);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertArrayEquals(doubleArray4, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertArrayEquals(doubleArray7, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertNotNull(matrix12);
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertArrayEquals(doubleArray15, new double[] { 137.90576492663388d, (-1.0d) }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertArrayEquals(doubleArray16, new double[] { (-24.931892522286255d), (-135.63701830716116d) }, 1.0E-15);
        org.junit.Assert.assertNotNull(matrix17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertNotNull(matrix23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 2 + "'", int24 == 2);
        org.junit.Assert.assertNotNull(matrix26);
        org.junit.Assert.assertNotNull(matrix28);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 2 + "'", int29 == 2);
        org.junit.Assert.assertNotNull(matrix32);
        org.junit.Assert.assertNotNull(matrix33);
        org.junit.Assert.assertNotNull(matrix34);
        org.junit.Assert.assertNotNull(matrix37);
        org.junit.Assert.assertNotNull(matrix38);
        org.junit.Assert.assertNotNull(matrix40);
    }

    @Test
    public void test3192() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3192");
        com.operations.Matrix.Matrix matrix5 = com.operations.Matrix.MatrixUtils.generateRandomMatrix(32, (int) (byte) 1, (int) (byte) 10, (-1), (long) 100);
        org.junit.Assert.assertNotNull(matrix5);
    }

    @Test
    public void test3193() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3193");
        com.operations.Matrix.Matrix matrix2 = com.operations.Matrix.MatrixTransformations.scale2D((double) (byte) 10, (double) 10);
        double[] doubleArray5 = new double[] { 10, 'a' };
        double[] doubleArray8 = new double[] { 10, 'a' };
        double[][] doubleArray9 = new double[][] { doubleArray5, doubleArray8 };
        com.operations.Matrix.Matrix matrix10 = new com.operations.Matrix.Matrix(doubleArray9);
        com.operations.Matrix.Matrix matrix11 = new com.operations.Matrix.Matrix(doubleArray9);
        boolean boolean12 = com.operations.Matrix.MatrixUtils.isSquare(matrix11);
        double[] doubleArray15 = new double[] { 10, 'a' };
        double[] doubleArray18 = new double[] { 10, 'a' };
        double[][] doubleArray19 = new double[][] { doubleArray15, doubleArray18 };
        com.operations.Matrix.Matrix matrix20 = new com.operations.Matrix.Matrix(doubleArray19);
        int int21 = matrix20.getCols();
        int int22 = matrix20.getCols();
        matrix20.print();
        double[] doubleArray26 = new double[] { 10, 'a' };
        double[] doubleArray29 = new double[] { 10, 'a' };
        double[][] doubleArray30 = new double[][] { doubleArray26, doubleArray29 };
        com.operations.Matrix.Matrix matrix31 = new com.operations.Matrix.Matrix(doubleArray30);
        boolean boolean33 = com.operations.Matrix.MatrixUtils.compare(matrix20, matrix31, (double) (-1));
        com.operations.Matrix.Matrix matrix34 = com.operations.Matrix.MatrixOperations.subtract(matrix11, matrix31);
        com.operations.Matrix.Matrix[] matrixArray35 = com.operations.Matrix.MatrixDecompositions.luDecomposition(matrix34);
        double[][] doubleArray36 = matrix34.getData();
        com.operations.Matrix.Matrix matrix37 = new com.operations.Matrix.Matrix(doubleArray36);
        com.operations.Matrix.Matrix matrix38 = com.operations.Matrix.MatrixOperations.multiply(matrix2, matrix37);
        boolean boolean39 = com.operations.Matrix.MatrixUtils.isSymmetric(matrix2);
        com.operations.Matrix.Matrix matrix41 = com.operations.Matrix.MatrixTransformations.rotate2D(350.0d);
        com.operations.Matrix.Matrix matrix42 = com.operations.Matrix.MatrixDecompositions.choleskyDecomposition(matrix41);
        int int43 = matrix41.getRows();
        com.operations.Matrix.Matrix matrix44 = com.operations.Matrix.MatrixOperations.subtract(matrix2, matrix41);
        double[] doubleArray47 = new double[] { 10, 'a' };
        double[] doubleArray50 = new double[] { 10, 'a' };
        double[][] doubleArray51 = new double[][] { doubleArray47, doubleArray50 };
        com.operations.Matrix.Matrix matrix52 = new com.operations.Matrix.Matrix(doubleArray51);
        int int53 = matrix52.getCols();
        int int54 = matrix52.getCols();
        boolean boolean55 = com.operations.Matrix.MatrixUtils.isSquare(matrix52);
        com.operations.Matrix.Matrix matrix56 = com.operations.Matrix.MatrixDecompositions.choleskyDecomposition(matrix52);
        com.operations.Matrix.Matrix matrix59 = com.operations.Matrix.MatrixTransformations.project2D(0.0d, (double) 0);
        com.operations.Matrix.Matrix matrix60 = com.operations.Matrix.MatrixOperations.subtract(matrix56, matrix59);
        com.operations.Matrix.Matrix matrix61 = com.operations.Matrix.MatrixOperations.transpose(matrix59);
        com.operations.Matrix.Matrix matrix62 = com.operations.Matrix.MatrixOperations.subtract(matrix2, matrix61);
        com.operations.Matrix.Matrix matrix63 = com.operations.Matrix.MatrixDecompositions.choleskyDecomposition(matrix2);
        // The following exception was thrown during execution in test generation
        try {
            double double66 = matrix2.getValue((int) '4', (int) (short) 10);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(matrix2);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertArrayEquals(doubleArray5, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertArrayEquals(doubleArray8, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertArrayEquals(doubleArray15, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertArrayEquals(doubleArray18, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 2 + "'", int21 == 2);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 2 + "'", int22 == 2);
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertArrayEquals(doubleArray26, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertArrayEquals(doubleArray29, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(matrix34);
        org.junit.Assert.assertNotNull(matrixArray35);
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertNotNull(matrix38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertNotNull(matrix41);
        org.junit.Assert.assertNotNull(matrix42);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 2 + "'", int43 == 2);
        org.junit.Assert.assertNotNull(matrix44);
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertArrayEquals(doubleArray47, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertArrayEquals(doubleArray50, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 2 + "'", int53 == 2);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 2 + "'", int54 == 2);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + true + "'", boolean55 == true);
        org.junit.Assert.assertNotNull(matrix56);
        org.junit.Assert.assertNotNull(matrix59);
        org.junit.Assert.assertNotNull(matrix60);
        org.junit.Assert.assertNotNull(matrix61);
        org.junit.Assert.assertNotNull(matrix62);
        org.junit.Assert.assertNotNull(matrix63);
    }

    @Test
    public void test3194() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3194");
        com.operations.Matrix.Matrix matrix2 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0L, (double) (byte) 10);
        double[] doubleArray5 = new double[] { 10, 'a' };
        double[] doubleArray8 = new double[] { 10, 'a' };
        double[][] doubleArray9 = new double[][] { doubleArray5, doubleArray8 };
        com.operations.Matrix.Matrix matrix10 = new com.operations.Matrix.Matrix(doubleArray9);
        int int11 = matrix10.getCols();
        int int12 = matrix10.getCols();
        int int13 = matrix10.getCols();
        com.operations.Matrix.Matrix[] matrixArray14 = com.operations.Matrix.MatrixDecompositions.luDecomposition(matrix10);
        com.operations.Matrix.Matrix matrix15 = com.operations.Matrix.MatrixOperations.multiply(matrix2, matrix10);
        com.operations.Matrix.Matrix matrix17 = com.operations.Matrix.MatrixTransformations.rotate2D((double) (short) 100);
        boolean boolean19 = com.operations.Matrix.MatrixUtils.compare(matrix10, matrix17, (double) (byte) 0);
        com.operations.Matrix.Matrix[] matrixArray20 = com.operations.Matrix.MatrixDecompositions.luDecomposition(matrix10);
        com.operations.Matrix.Matrix matrix21 = com.operations.Matrix.MatrixOperations.transpose(matrix10);
        com.operations.Matrix.Matrix matrix24 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0L, (double) (byte) 10);
        int int25 = matrix24.getRows();
        com.operations.Matrix.Matrix matrix28 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0L, (double) (byte) 10);
        int int29 = matrix28.getRows();
        com.operations.Matrix.Matrix matrix31 = com.operations.Matrix.MatrixOperations.scalarMultiply(matrix28, (double) 2);
        com.operations.Matrix.Matrix matrix32 = com.operations.Matrix.MatrixOperations.subtract(matrix24, matrix28);
        boolean boolean34 = com.operations.Matrix.MatrixUtils.compare(matrix10, matrix24, (double) ' ');
        com.operations.Matrix.Matrix matrix36 = com.operations.Matrix.MatrixOperations.scalarMultiply(matrix10, 137.90576492663388d);
        double[] doubleArray39 = new double[] { 10, 'a' };
        double[] doubleArray42 = new double[] { 10, 'a' };
        double[][] doubleArray43 = new double[][] { doubleArray39, doubleArray42 };
        com.operations.Matrix.Matrix matrix44 = new com.operations.Matrix.Matrix(doubleArray43);
        com.operations.Matrix.Matrix matrix45 = new com.operations.Matrix.Matrix(doubleArray43);
        boolean boolean46 = com.operations.Matrix.MatrixUtils.isSquare(matrix45);
        com.operations.Matrix.Matrix[] matrixArray47 = com.operations.Matrix.MatrixDecompositions.luDecomposition(matrix45);
        double double48 = com.operations.Matrix.MatrixUtils.frobeniusNorm(matrix45);
        int int49 = matrix45.getRows();
        com.operations.Matrix.Matrix matrix50 = com.operations.Matrix.MatrixOperations.subtract(matrix10, matrix45);
        boolean boolean51 = com.operations.Matrix.MatrixUtils.isSymmetric(matrix10);
        com.operations.Matrix.Matrix matrix52 = com.operations.Matrix.MatrixOperations.transpose(matrix10);
        org.junit.Assert.assertNotNull(matrix2);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertArrayEquals(doubleArray5, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertArrayEquals(doubleArray8, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 2 + "'", int11 == 2);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 2 + "'", int12 == 2);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 2 + "'", int13 == 2);
        org.junit.Assert.assertNotNull(matrixArray14);
        org.junit.Assert.assertNotNull(matrix15);
        org.junit.Assert.assertNotNull(matrix17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(matrixArray20);
        org.junit.Assert.assertNotNull(matrix21);
        org.junit.Assert.assertNotNull(matrix24);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 2 + "'", int25 == 2);
        org.junit.Assert.assertNotNull(matrix28);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 2 + "'", int29 == 2);
        org.junit.Assert.assertNotNull(matrix31);
        org.junit.Assert.assertNotNull(matrix32);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(matrix36);
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertArrayEquals(doubleArray39, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertArrayEquals(doubleArray42, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertNotNull(matrixArray47);
        org.junit.Assert.assertTrue("'" + double48 + "' != '" + 137.90576492663388d + "'", double48 == 137.90576492663388d);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 2 + "'", int49 == 2);
        org.junit.Assert.assertNotNull(matrix50);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(matrix52);
    }

    @Test
    public void test3195() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3195");
        com.operations.Matrix.Matrix matrix5 = com.operations.Matrix.MatrixUtils.generateRandomMatrix((int) '#', (int) ' ', (int) 'a', 10, (long) (byte) 1);
        boolean boolean6 = com.operations.Matrix.MatrixUtils.isSquare(matrix5);
        org.junit.Assert.assertNotNull(matrix5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
    }

    @Test
    public void test3196() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3196");
        com.operations.Matrix.Matrix matrix2 = com.operations.Matrix.MatrixTransformations.project2D((double) (byte) 100, 32.0d);
        boolean boolean3 = com.operations.Matrix.MatrixUtils.isSquare(matrix2);
        matrix2.print();
        java.lang.Class<?> wildcardClass5 = matrix2.getClass();
        org.junit.Assert.assertNotNull(matrix2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNotNull(wildcardClass5);
    }

    @Test
    public void test3197() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3197");
        com.operations.Matrix.Matrix matrix2 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0L, (double) (byte) 10);
        int int3 = matrix2.getRows();
        com.operations.Matrix.Matrix matrix6 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0L, (double) (byte) 10);
        int int7 = matrix6.getRows();
        com.operations.Matrix.Matrix matrix9 = com.operations.Matrix.MatrixOperations.scalarMultiply(matrix6, (double) 2);
        com.operations.Matrix.Matrix matrix10 = com.operations.Matrix.MatrixOperations.subtract(matrix2, matrix6);
        com.operations.Matrix.Matrix matrix13 = com.operations.Matrix.MatrixTransformations.scale2D(146.4308710620817d, (double) 10L);
        boolean boolean15 = com.operations.Matrix.MatrixUtils.compare(matrix6, matrix13, (double) (byte) 1);
        com.operations.Matrix.Matrix[] matrixArray16 = com.operations.Matrix.MatrixDecompositions.luDecomposition(matrix13);
        com.operations.Matrix.Matrix matrix18 = com.operations.Matrix.MatrixTransformations.rotate2D((double) '4');
        boolean boolean19 = com.operations.Matrix.MatrixUtils.isSymmetric(matrix18);
        com.operations.Matrix.Matrix matrix20 = com.operations.Matrix.MatrixOperations.add(matrix13, matrix18);
        com.operations.Matrix.Matrix[] matrixArray21 = com.operations.Matrix.MatrixDecompositions.luDecomposition(matrix18);
        // The following exception was thrown during execution in test generation
        try {
            double double24 = matrix18.getValue((int) (byte) -1, 0);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(matrix2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 2 + "'", int3 == 2);
        org.junit.Assert.assertNotNull(matrix6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 2 + "'", int7 == 2);
        org.junit.Assert.assertNotNull(matrix9);
        org.junit.Assert.assertNotNull(matrix10);
        org.junit.Assert.assertNotNull(matrix13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(matrixArray16);
        org.junit.Assert.assertNotNull(matrix18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(matrix20);
        org.junit.Assert.assertNotNull(matrixArray21);
    }

    @Test
    public void test3198() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3198");
        com.operations.Matrix.Matrix matrix2 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0L, (double) (byte) 10);
        double[] doubleArray5 = new double[] { 10, 'a' };
        double[] doubleArray8 = new double[] { 10, 'a' };
        double[][] doubleArray9 = new double[][] { doubleArray5, doubleArray8 };
        com.operations.Matrix.Matrix matrix10 = new com.operations.Matrix.Matrix(doubleArray9);
        int int11 = matrix10.getCols();
        int int12 = matrix10.getCols();
        int int13 = matrix10.getCols();
        com.operations.Matrix.Matrix[] matrixArray14 = com.operations.Matrix.MatrixDecompositions.luDecomposition(matrix10);
        com.operations.Matrix.Matrix matrix15 = com.operations.Matrix.MatrixOperations.multiply(matrix2, matrix10);
        com.operations.Matrix.Matrix matrix17 = com.operations.Matrix.MatrixTransformations.rotate2D((double) (short) 100);
        boolean boolean19 = com.operations.Matrix.MatrixUtils.compare(matrix10, matrix17, (double) (byte) 0);
        com.operations.Matrix.Matrix[] matrixArray20 = com.operations.Matrix.MatrixDecompositions.luDecomposition(matrix10);
        com.operations.Matrix.Matrix matrix21 = com.operations.Matrix.MatrixOperations.transpose(matrix10);
        com.operations.Matrix.Matrix matrix24 = com.operations.Matrix.MatrixTransformations.scale2D((double) 1.0f, (double) 1);
        com.operations.Matrix.Matrix matrix26 = com.operations.Matrix.MatrixTransformations.rotate2D((double) 1.0f);
        com.operations.Matrix.Matrix matrix29 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0L, (double) (byte) 10);
        int int30 = matrix29.getRows();
        com.operations.Matrix.Matrix matrix32 = com.operations.Matrix.MatrixOperations.scalarMultiply(matrix29, (double) 2);
        double double33 = com.operations.Matrix.MatrixUtils.frobeniusNorm(matrix29);
        com.operations.Matrix.Matrix matrix36 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0L, (double) (byte) 10);
        int int37 = matrix36.getRows();
        com.operations.Matrix.Matrix matrix39 = com.operations.Matrix.MatrixOperations.scalarMultiply(matrix36, (double) 2);
        com.operations.Matrix.Matrix matrix40 = com.operations.Matrix.MatrixOperations.subtract(matrix29, matrix39);
        com.operations.Matrix.Matrix matrix41 = com.operations.Matrix.MatrixOperations.add(matrix26, matrix39);
        boolean boolean43 = com.operations.Matrix.MatrixUtils.compare(matrix24, matrix26, (double) (byte) -1);
        com.operations.Matrix.Matrix matrix44 = com.operations.Matrix.MatrixOperations.subtract(matrix21, matrix24);
        double[] doubleArray47 = new double[] { 10, 'a' };
        double[] doubleArray50 = new double[] { 10, 'a' };
        double[][] doubleArray51 = new double[][] { doubleArray47, doubleArray50 };
        com.operations.Matrix.Matrix matrix52 = new com.operations.Matrix.Matrix(doubleArray51);
        com.operations.Matrix.Matrix matrix53 = new com.operations.Matrix.Matrix(doubleArray51);
        boolean boolean54 = com.operations.Matrix.MatrixUtils.isSquare(matrix53);
        double[] doubleArray57 = new double[] { 10, 'a' };
        double[] doubleArray60 = new double[] { 10, 'a' };
        double[][] doubleArray61 = new double[][] { doubleArray57, doubleArray60 };
        com.operations.Matrix.Matrix matrix62 = new com.operations.Matrix.Matrix(doubleArray61);
        int int63 = matrix62.getCols();
        int int64 = matrix62.getCols();
        matrix62.print();
        double[] doubleArray68 = new double[] { 10, 'a' };
        double[] doubleArray71 = new double[] { 10, 'a' };
        double[][] doubleArray72 = new double[][] { doubleArray68, doubleArray71 };
        com.operations.Matrix.Matrix matrix73 = new com.operations.Matrix.Matrix(doubleArray72);
        boolean boolean75 = com.operations.Matrix.MatrixUtils.compare(matrix62, matrix73, (double) (-1));
        com.operations.Matrix.Matrix matrix76 = com.operations.Matrix.MatrixOperations.subtract(matrix53, matrix73);
        com.operations.Matrix.Matrix matrix78 = com.operations.Matrix.MatrixOperations.scalarMultiply(matrix53, (double) 0.0f);
        com.operations.Matrix.Matrix matrix79 = com.operations.Matrix.MatrixOperations.transpose(matrix53);
        boolean boolean81 = com.operations.Matrix.MatrixUtils.compare(matrix44, matrix79, (double) (short) 0);
        int int82 = matrix79.getCols();
        org.junit.Assert.assertNotNull(matrix2);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertArrayEquals(doubleArray5, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertArrayEquals(doubleArray8, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 2 + "'", int11 == 2);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 2 + "'", int12 == 2);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 2 + "'", int13 == 2);
        org.junit.Assert.assertNotNull(matrixArray14);
        org.junit.Assert.assertNotNull(matrix15);
        org.junit.Assert.assertNotNull(matrix17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(matrixArray20);
        org.junit.Assert.assertNotNull(matrix21);
        org.junit.Assert.assertNotNull(matrix24);
        org.junit.Assert.assertNotNull(matrix26);
        org.junit.Assert.assertNotNull(matrix29);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 2 + "'", int30 == 2);
        org.junit.Assert.assertNotNull(matrix32);
        org.junit.Assert.assertTrue("'" + double33 + "' != '" + 10.0d + "'", double33 == 10.0d);
        org.junit.Assert.assertNotNull(matrix36);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 2 + "'", int37 == 2);
        org.junit.Assert.assertNotNull(matrix39);
        org.junit.Assert.assertNotNull(matrix40);
        org.junit.Assert.assertNotNull(matrix41);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(matrix44);
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertArrayEquals(doubleArray47, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertArrayEquals(doubleArray50, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + true + "'", boolean54 == true);
        org.junit.Assert.assertNotNull(doubleArray57);
        org.junit.Assert.assertArrayEquals(doubleArray57, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray60);
        org.junit.Assert.assertArrayEquals(doubleArray60, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray61);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 2 + "'", int63 == 2);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 2 + "'", int64 == 2);
        org.junit.Assert.assertNotNull(doubleArray68);
        org.junit.Assert.assertArrayEquals(doubleArray68, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray71);
        org.junit.Assert.assertArrayEquals(doubleArray71, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray72);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertNotNull(matrix76);
        org.junit.Assert.assertNotNull(matrix78);
        org.junit.Assert.assertNotNull(matrix79);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
        org.junit.Assert.assertTrue("'" + int82 + "' != '" + 2 + "'", int82 == 2);
    }

    @Test
    public void test3199() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3199");
        com.operations.Matrix.Matrix matrix2 = com.operations.Matrix.MatrixTransformations.project2D((double) (short) 10, 12.790922166892882d);
        com.operations.Matrix.Matrix[] matrixArray3 = com.operations.Matrix.MatrixDecompositions.luDecomposition(matrix2);
        org.junit.Assert.assertNotNull(matrix2);
        org.junit.Assert.assertNotNull(matrixArray3);
    }

    @Test
    public void test3200() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3200");
        com.operations.Matrix.Matrix matrix0 = null;
        com.operations.Matrix.Matrix matrix3 = com.operations.Matrix.MatrixTransformations.project2D(0.0d, (double) 0);
        double[][] doubleArray4 = matrix3.getData();
        com.operations.Matrix.Matrix matrix5 = new com.operations.Matrix.Matrix(doubleArray4);
        com.operations.Matrix.Matrix[] matrixArray6 = com.operations.Matrix.MatrixDecompositions.luDecomposition(matrix5);
        int int7 = matrix5.getRows();
        int int8 = matrix5.getRows();
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean10 = com.operations.Matrix.MatrixUtils.compare(matrix0, matrix5, 65.19779036970327d);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot invoke \"com.operations.Matrix.Matrix.getRows()\" because \"a\" is null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(matrix3);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertNotNull(matrixArray6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 2 + "'", int7 == 2);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 2 + "'", int8 == 2);
    }

    @Test
    public void test3201() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3201");
        com.operations.Matrix.Matrix matrix4 = com.operations.Matrix.MatrixUtils.generateRandomMatrix((int) '#', (int) (byte) 10, (int) '#', 100);
        org.junit.Assert.assertNotNull(matrix4);
    }

    @Test
    public void test3202() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3202");
        com.operations.Matrix.Matrix matrix2 = com.operations.Matrix.MatrixTransformations.scale2D(0.0d, (double) 1.0f);
        com.operations.Matrix.Matrix matrix4 = com.operations.Matrix.MatrixTransformations.rotate2D((double) 1.0f);
        com.operations.Matrix.Matrix matrix7 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0L, (double) (byte) 10);
        int int8 = matrix7.getRows();
        com.operations.Matrix.Matrix matrix10 = com.operations.Matrix.MatrixOperations.scalarMultiply(matrix7, (double) 2);
        double double11 = com.operations.Matrix.MatrixUtils.frobeniusNorm(matrix7);
        com.operations.Matrix.Matrix matrix14 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0L, (double) (byte) 10);
        int int15 = matrix14.getRows();
        com.operations.Matrix.Matrix matrix17 = com.operations.Matrix.MatrixOperations.scalarMultiply(matrix14, (double) 2);
        com.operations.Matrix.Matrix matrix18 = com.operations.Matrix.MatrixOperations.subtract(matrix7, matrix17);
        com.operations.Matrix.Matrix matrix19 = com.operations.Matrix.MatrixOperations.add(matrix4, matrix17);
        com.operations.Matrix.Matrix matrix21 = com.operations.Matrix.MatrixOperations.scalarMultiply(matrix19, (double) 0L);
        com.operations.Matrix.Matrix matrix22 = com.operations.Matrix.MatrixOperations.subtract(matrix2, matrix21);
        boolean boolean23 = com.operations.Matrix.MatrixUtils.isSquare(matrix2);
        com.operations.Matrix.Matrix matrix25 = com.operations.Matrix.MatrixTransformations.rotate2D(100.0d);
        int int26 = matrix25.getCols();
        com.operations.Matrix.Matrix matrix28 = com.operations.Matrix.MatrixOperations.scalarMultiply(matrix25, (double) ' ');
        com.operations.Matrix.Matrix matrix31 = com.operations.Matrix.MatrixTransformations.scale2D((double) 100.0f, (double) (byte) 1);
        com.operations.Matrix.Matrix matrix34 = com.operations.Matrix.MatrixTransformations.scale2D((double) 1.0f, (double) 1);
        com.operations.Matrix.Matrix matrix36 = com.operations.Matrix.MatrixTransformations.rotate2D((double) 1.0f);
        com.operations.Matrix.Matrix matrix39 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0L, (double) (byte) 10);
        int int40 = matrix39.getRows();
        com.operations.Matrix.Matrix matrix42 = com.operations.Matrix.MatrixOperations.scalarMultiply(matrix39, (double) 2);
        double double43 = com.operations.Matrix.MatrixUtils.frobeniusNorm(matrix39);
        com.operations.Matrix.Matrix matrix46 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0L, (double) (byte) 10);
        int int47 = matrix46.getRows();
        com.operations.Matrix.Matrix matrix49 = com.operations.Matrix.MatrixOperations.scalarMultiply(matrix46, (double) 2);
        com.operations.Matrix.Matrix matrix50 = com.operations.Matrix.MatrixOperations.subtract(matrix39, matrix49);
        com.operations.Matrix.Matrix matrix51 = com.operations.Matrix.MatrixOperations.add(matrix36, matrix49);
        boolean boolean53 = com.operations.Matrix.MatrixUtils.compare(matrix34, matrix36, (double) (byte) -1);
        com.operations.Matrix.Matrix matrix54 = com.operations.Matrix.MatrixOperations.transpose(matrix36);
        com.operations.Matrix.Matrix matrix57 = com.operations.Matrix.MatrixTransformations.project2D((double) 10L, 10.0d);
        com.operations.Matrix.Matrix matrix59 = com.operations.Matrix.MatrixTransformations.rotate2D((double) (short) 100);
        double[] doubleArray62 = new double[] { 137.90576492663388d, (byte) -1 };
        double[] doubleArray63 = com.operations.Matrix.MatrixSolver.solveGaussian(matrix59, doubleArray62);
        com.operations.Matrix.Matrix matrix66 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0L, (double) (byte) 10);
        double[] doubleArray69 = new double[] { 10, 'a' };
        double[] doubleArray72 = new double[] { 10, 'a' };
        double[][] doubleArray73 = new double[][] { doubleArray69, doubleArray72 };
        com.operations.Matrix.Matrix matrix74 = new com.operations.Matrix.Matrix(doubleArray73);
        int int75 = matrix74.getCols();
        int int76 = matrix74.getCols();
        int int77 = matrix74.getCols();
        com.operations.Matrix.Matrix[] matrixArray78 = com.operations.Matrix.MatrixDecompositions.luDecomposition(matrix74);
        com.operations.Matrix.Matrix matrix79 = com.operations.Matrix.MatrixOperations.multiply(matrix66, matrix74);
        boolean boolean81 = com.operations.Matrix.MatrixUtils.compare(matrix59, matrix66, (double) (-1L));
        double[][] doubleArray82 = matrix59.getData();
        com.operations.Matrix.Matrix matrix84 = com.operations.Matrix.MatrixTransformations.rotate2D((double) (short) 100);
        double[] doubleArray87 = new double[] { 137.90576492663388d, (byte) -1 };
        double[] doubleArray88 = com.operations.Matrix.MatrixSolver.solveGaussian(matrix84, doubleArray87);
        double[] doubleArray89 = com.operations.Matrix.MatrixSolver.solveGaussian(matrix59, doubleArray87);
        double[] doubleArray90 = com.operations.Matrix.MatrixSolver.solveGaussian(matrix57, doubleArray89);
        double[] doubleArray91 = com.operations.Matrix.MatrixSolver.solveGaussian(matrix36, doubleArray90);
        double[] doubleArray92 = com.operations.Matrix.MatrixSolver.solveGaussian(matrix31, doubleArray91);
        double[] doubleArray93 = com.operations.Matrix.MatrixSolver.solveGaussian(matrix25, doubleArray91);
        // The following exception was thrown during execution in test generation
        try {
            double[] doubleArray94 = com.operations.Matrix.MatrixSolver.solveGaussian(matrix2, doubleArray93);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Matrix is singular or nearly singular.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(matrix2);
        org.junit.Assert.assertNotNull(matrix4);
        org.junit.Assert.assertNotNull(matrix7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 2 + "'", int8 == 2);
        org.junit.Assert.assertNotNull(matrix10);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 10.0d + "'", double11 == 10.0d);
        org.junit.Assert.assertNotNull(matrix14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 2 + "'", int15 == 2);
        org.junit.Assert.assertNotNull(matrix17);
        org.junit.Assert.assertNotNull(matrix18);
        org.junit.Assert.assertNotNull(matrix19);
        org.junit.Assert.assertNotNull(matrix21);
        org.junit.Assert.assertNotNull(matrix22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertNotNull(matrix25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 2 + "'", int26 == 2);
        org.junit.Assert.assertNotNull(matrix28);
        org.junit.Assert.assertNotNull(matrix31);
        org.junit.Assert.assertNotNull(matrix34);
        org.junit.Assert.assertNotNull(matrix36);
        org.junit.Assert.assertNotNull(matrix39);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 2 + "'", int40 == 2);
        org.junit.Assert.assertNotNull(matrix42);
        org.junit.Assert.assertTrue("'" + double43 + "' != '" + 10.0d + "'", double43 == 10.0d);
        org.junit.Assert.assertNotNull(matrix46);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 2 + "'", int47 == 2);
        org.junit.Assert.assertNotNull(matrix49);
        org.junit.Assert.assertNotNull(matrix50);
        org.junit.Assert.assertNotNull(matrix51);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(matrix54);
        org.junit.Assert.assertNotNull(matrix57);
        org.junit.Assert.assertNotNull(matrix59);
        org.junit.Assert.assertNotNull(doubleArray62);
        org.junit.Assert.assertArrayEquals(doubleArray62, new double[] { 137.90576492663388d, (-1.0d) }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray63);
        org.junit.Assert.assertArrayEquals(doubleArray63, new double[] { (-24.931892522286255d), (-135.63701830716116d) }, 1.0E-15);
        org.junit.Assert.assertNotNull(matrix66);
        org.junit.Assert.assertNotNull(doubleArray69);
        org.junit.Assert.assertArrayEquals(doubleArray69, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray72);
        org.junit.Assert.assertArrayEquals(doubleArray72, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray73);
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + 2 + "'", int75 == 2);
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 2 + "'", int76 == 2);
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + 2 + "'", int77 == 2);
        org.junit.Assert.assertNotNull(matrixArray78);
        org.junit.Assert.assertNotNull(matrix79);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
        org.junit.Assert.assertNotNull(doubleArray82);
        org.junit.Assert.assertNotNull(matrix84);
        org.junit.Assert.assertNotNull(doubleArray87);
        org.junit.Assert.assertArrayEquals(doubleArray87, new double[] { 137.90576492663388d, (-1.0d) }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray88);
        org.junit.Assert.assertArrayEquals(doubleArray88, new double[] { (-24.931892522286255d), (-135.63701830716116d) }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray89);
        org.junit.Assert.assertArrayEquals(doubleArray89, new double[] { (-24.931892522286255d), (-135.63701830716116d) }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray90);
        org.junit.Assert.assertArrayEquals(doubleArray90, new double[] { (-2.4931892522286256d), (-13.563701830716116d) }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray91);
        org.junit.Assert.assertArrayEquals(doubleArray91, new double[] { (-2.7295287645732618d), (-13.518123861075072d) }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray92);
        org.junit.Assert.assertArrayEquals(doubleArray92, new double[] { (-0.027295287645732618d), (-13.518123861075072d) }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray93);
        org.junit.Assert.assertArrayEquals(doubleArray93, new double[] { (-12.83877548870844d), 5.035458663373116d }, 1.0E-15);
    }

    @Test
    public void test3203() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3203");
        com.operations.Matrix.Matrix matrix0 = null;
        // The following exception was thrown during execution in test generation
        try {
            com.operations.Matrix.Matrix matrix2 = com.operations.Matrix.MatrixOperations.scalarMultiply(matrix0, 263.4829471529277d);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test3204() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3204");
        com.operations.Matrix.Matrix matrix2 = com.operations.Matrix.MatrixTransformations.scale2D(137.13497001129946d, (double) 0);
        com.operations.Matrix.Matrix matrix4 = com.operations.Matrix.MatrixTransformations.rotate2D((double) (short) 100);
        double[] doubleArray7 = new double[] { 137.90576492663388d, (byte) -1 };
        double[] doubleArray8 = com.operations.Matrix.MatrixSolver.solveGaussian(matrix4, doubleArray7);
        com.operations.Matrix.Matrix matrix11 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0L, (double) (byte) 10);
        double[] doubleArray14 = new double[] { 10, 'a' };
        double[] doubleArray17 = new double[] { 10, 'a' };
        double[][] doubleArray18 = new double[][] { doubleArray14, doubleArray17 };
        com.operations.Matrix.Matrix matrix19 = new com.operations.Matrix.Matrix(doubleArray18);
        int int20 = matrix19.getCols();
        int int21 = matrix19.getCols();
        int int22 = matrix19.getCols();
        com.operations.Matrix.Matrix[] matrixArray23 = com.operations.Matrix.MatrixDecompositions.luDecomposition(matrix19);
        com.operations.Matrix.Matrix matrix24 = com.operations.Matrix.MatrixOperations.multiply(matrix11, matrix19);
        boolean boolean26 = com.operations.Matrix.MatrixUtils.compare(matrix4, matrix11, (double) (-1L));
        com.operations.Matrix.Matrix matrix28 = com.operations.Matrix.MatrixTransformations.rotate2D((-1.0d));
        com.operations.Matrix.Matrix matrix30 = com.operations.Matrix.MatrixTransformations.rotate2D((double) (-1L));
        com.operations.Matrix.Matrix matrix32 = com.operations.Matrix.MatrixTransformations.rotate2D((double) (short) 100);
        double[] doubleArray35 = new double[] { 137.90576492663388d, (byte) -1 };
        double[] doubleArray36 = com.operations.Matrix.MatrixSolver.solveGaussian(matrix32, doubleArray35);
        double[] doubleArray37 = com.operations.Matrix.MatrixSolver.solveGaussian(matrix30, doubleArray35);
        double[] doubleArray38 = com.operations.Matrix.MatrixSolver.solveGaussian(matrix28, doubleArray35);
        boolean boolean40 = com.operations.Matrix.MatrixUtils.compare(matrix11, matrix28, (double) '4');
        double[] doubleArray43 = new double[] { 10, 'a' };
        double[] doubleArray46 = new double[] { 10, 'a' };
        double[][] doubleArray47 = new double[][] { doubleArray43, doubleArray46 };
        com.operations.Matrix.Matrix matrix48 = new com.operations.Matrix.Matrix(doubleArray47);
        com.operations.Matrix.Matrix matrix49 = new com.operations.Matrix.Matrix(doubleArray47);
        com.operations.Matrix.Matrix matrix51 = com.operations.Matrix.MatrixTransformations.rotate2D((double) (short) 100);
        double[] doubleArray54 = new double[] { 137.90576492663388d, (byte) -1 };
        double[] doubleArray55 = com.operations.Matrix.MatrixSolver.solveGaussian(matrix51, doubleArray54);
        com.operations.Matrix.Matrix matrix56 = com.operations.Matrix.MatrixOperations.add(matrix49, matrix51);
        com.operations.Matrix.Matrix matrix57 = com.operations.Matrix.MatrixOperations.transpose(matrix51);
        int int58 = matrix51.getCols();
        com.operations.Matrix.Matrix matrix61 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0L, (double) (byte) 10);
        double[] doubleArray64 = new double[] { 10, 'a' };
        double[] doubleArray67 = new double[] { 10, 'a' };
        double[][] doubleArray68 = new double[][] { doubleArray64, doubleArray67 };
        com.operations.Matrix.Matrix matrix69 = new com.operations.Matrix.Matrix(doubleArray68);
        int int70 = matrix69.getCols();
        int int71 = matrix69.getCols();
        int int72 = matrix69.getCols();
        com.operations.Matrix.Matrix[] matrixArray73 = com.operations.Matrix.MatrixDecompositions.luDecomposition(matrix69);
        com.operations.Matrix.Matrix matrix74 = com.operations.Matrix.MatrixOperations.multiply(matrix61, matrix69);
        com.operations.Matrix.Matrix matrix76 = com.operations.Matrix.MatrixTransformations.rotate2D((double) (short) 100);
        boolean boolean78 = com.operations.Matrix.MatrixUtils.compare(matrix69, matrix76, (double) (byte) 0);
        boolean boolean79 = com.operations.Matrix.MatrixUtils.isSymmetric(matrix76);
        boolean boolean80 = com.operations.Matrix.MatrixUtils.isSquare(matrix76);
        com.operations.Matrix.Matrix matrix82 = com.operations.Matrix.MatrixTransformations.rotate2D((double) (short) 100);
        boolean boolean84 = com.operations.Matrix.MatrixUtils.compare(matrix76, matrix82, (double) (byte) 100);
        matrix82.print();
        com.operations.Matrix.Matrix matrix86 = com.operations.Matrix.MatrixOperations.add(matrix51, matrix82);
        com.operations.Matrix.Matrix matrix87 = com.operations.Matrix.MatrixOperations.subtract(matrix28, matrix82);
        com.operations.Matrix.Matrix matrix88 = com.operations.Matrix.MatrixOperations.transpose(matrix82);
        com.operations.Matrix.Matrix matrix89 = com.operations.Matrix.MatrixOperations.add(matrix2, matrix88);
        com.operations.Matrix.Matrix[] matrixArray90 = com.operations.Matrix.MatrixDecompositions.luDecomposition(matrix88);
        org.junit.Assert.assertNotNull(matrix2);
        org.junit.Assert.assertNotNull(matrix4);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertArrayEquals(doubleArray7, new double[] { 137.90576492663388d, (-1.0d) }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertArrayEquals(doubleArray8, new double[] { (-24.931892522286255d), (-135.63701830716116d) }, 1.0E-15);
        org.junit.Assert.assertNotNull(matrix11);
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertArrayEquals(doubleArray14, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertArrayEquals(doubleArray17, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 2 + "'", int20 == 2);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 2 + "'", int21 == 2);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 2 + "'", int22 == 2);
        org.junit.Assert.assertNotNull(matrixArray23);
        org.junit.Assert.assertNotNull(matrix24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(matrix28);
        org.junit.Assert.assertNotNull(matrix30);
        org.junit.Assert.assertNotNull(matrix32);
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertArrayEquals(doubleArray35, new double[] { 137.90576492663388d, (-1.0d) }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertArrayEquals(doubleArray36, new double[] { (-24.931892522286255d), (-135.63701830716116d) }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertArrayEquals(doubleArray37, new double[] { 137.90221361711127d, 1.4069397643877004d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertArrayEquals(doubleArray38, new double[] { 137.90221361711127d, 1.4069397643877004d }, 1.0E-15);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertArrayEquals(doubleArray43, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray46);
        org.junit.Assert.assertArrayEquals(doubleArray46, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertNotNull(matrix51);
        org.junit.Assert.assertNotNull(doubleArray54);
        org.junit.Assert.assertArrayEquals(doubleArray54, new double[] { 137.90576492663388d, (-1.0d) }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertArrayEquals(doubleArray55, new double[] { (-24.931892522286255d), (-135.63701830716116d) }, 1.0E-15);
        org.junit.Assert.assertNotNull(matrix56);
        org.junit.Assert.assertNotNull(matrix57);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 2 + "'", int58 == 2);
        org.junit.Assert.assertNotNull(matrix61);
        org.junit.Assert.assertNotNull(doubleArray64);
        org.junit.Assert.assertArrayEquals(doubleArray64, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray67);
        org.junit.Assert.assertArrayEquals(doubleArray67, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray68);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 2 + "'", int70 == 2);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 2 + "'", int71 == 2);
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 2 + "'", int72 == 2);
        org.junit.Assert.assertNotNull(matrixArray73);
        org.junit.Assert.assertNotNull(matrix74);
        org.junit.Assert.assertNotNull(matrix76);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + true + "'", boolean80 == true);
        org.junit.Assert.assertNotNull(matrix82);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + true + "'", boolean84 == true);
        org.junit.Assert.assertNotNull(matrix86);
        org.junit.Assert.assertNotNull(matrix87);
        org.junit.Assert.assertNotNull(matrix88);
        org.junit.Assert.assertNotNull(matrix89);
        org.junit.Assert.assertNotNull(matrixArray90);
    }

    @Test
    public void test3205() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3205");
        com.operations.Matrix.Matrix matrix1 = com.operations.Matrix.MatrixTransformations.rotate2D(98.07140255956371d);
        com.operations.Matrix.Matrix matrix4 = com.operations.Matrix.MatrixTransformations.project2D((double) 0L, (double) 0);
        com.operations.Matrix.Matrix matrix5 = com.operations.Matrix.MatrixOperations.multiply(matrix1, matrix4);
        org.junit.Assert.assertNotNull(matrix1);
        org.junit.Assert.assertNotNull(matrix4);
        org.junit.Assert.assertNotNull(matrix5);
    }

    @Test
    public void test3206() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3206");
        com.operations.Matrix.Matrix matrix2 = com.operations.Matrix.MatrixTransformations.scale2D(52.009614495783374d, (double) 100);
        matrix2.print();
        // The following exception was thrown during execution in test generation
        try {
            double double6 = matrix2.getValue(1, (int) (short) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(matrix2);
    }

    @Test
    public void test3207() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3207");
        com.operations.Matrix.Matrix matrix2 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0.0f, (double) (-1));
        com.operations.Matrix.Matrix matrix5 = com.operations.Matrix.MatrixTransformations.scale2D(146.4308710620817d, (double) 10L);
        com.operations.Matrix.Matrix matrix6 = com.operations.Matrix.MatrixOperations.multiply(matrix2, matrix5);
        com.operations.Matrix.Matrix matrix8 = com.operations.Matrix.MatrixTransformations.rotate2D((double) 1.0f);
        com.operations.Matrix.Matrix matrix11 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0L, (double) (byte) 10);
        int int12 = matrix11.getRows();
        com.operations.Matrix.Matrix matrix14 = com.operations.Matrix.MatrixOperations.scalarMultiply(matrix11, (double) 2);
        double double15 = com.operations.Matrix.MatrixUtils.frobeniusNorm(matrix11);
        com.operations.Matrix.Matrix matrix18 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0L, (double) (byte) 10);
        int int19 = matrix18.getRows();
        com.operations.Matrix.Matrix matrix21 = com.operations.Matrix.MatrixOperations.scalarMultiply(matrix18, (double) 2);
        com.operations.Matrix.Matrix matrix22 = com.operations.Matrix.MatrixOperations.subtract(matrix11, matrix21);
        com.operations.Matrix.Matrix matrix23 = com.operations.Matrix.MatrixOperations.add(matrix8, matrix21);
        matrix8.print();
        double[] doubleArray27 = new double[] { 10, 'a' };
        double[] doubleArray30 = new double[] { 10, 'a' };
        double[][] doubleArray31 = new double[][] { doubleArray27, doubleArray30 };
        com.operations.Matrix.Matrix matrix32 = new com.operations.Matrix.Matrix(doubleArray31);
        com.operations.Matrix.Matrix matrix33 = com.operations.Matrix.MatrixOperations.transpose(matrix32);
        com.operations.Matrix.Matrix matrix36 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0L, (double) (byte) 10);
        int int37 = matrix36.getRows();
        com.operations.Matrix.Matrix matrix43 = com.operations.Matrix.MatrixUtils.generateRandomMatrix(100, (int) (byte) 1, (int) '#', (int) '#', 1L);
        boolean boolean45 = com.operations.Matrix.MatrixUtils.compare(matrix36, matrix43, (double) 1.0f);
        com.operations.Matrix.Matrix matrix47 = com.operations.Matrix.MatrixOperations.scalarMultiply(matrix36, (double) 1L);
        matrix36.print();
        com.operations.Matrix.Matrix matrix49 = com.operations.Matrix.MatrixOperations.multiply(matrix33, matrix36);
        com.operations.Matrix.Matrix matrix50 = com.operations.Matrix.MatrixOperations.multiply(matrix8, matrix36);
        com.operations.Matrix.Matrix matrix51 = com.operations.Matrix.MatrixOperations.subtract(matrix2, matrix36);
        matrix2.print();
        com.operations.Matrix.Matrix matrix55 = com.operations.Matrix.MatrixTransformations.project2D((double) (short) 0, (double) 1);
        com.operations.Matrix.Matrix matrix56 = com.operations.Matrix.MatrixOperations.multiply(matrix2, matrix55);
        com.operations.Matrix.Matrix matrix58 = com.operations.Matrix.MatrixOperations.scalarMultiply(matrix2, 137.90576492663388d);
        // The following exception was thrown during execution in test generation
        try {
            com.operations.Matrix.Matrix matrix59 = com.operations.Matrix.MatrixDecompositions.choleskyDecomposition(matrix58);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Matrix is not positive definite.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(matrix2);
        org.junit.Assert.assertNotNull(matrix5);
        org.junit.Assert.assertNotNull(matrix6);
        org.junit.Assert.assertNotNull(matrix8);
        org.junit.Assert.assertNotNull(matrix11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 2 + "'", int12 == 2);
        org.junit.Assert.assertNotNull(matrix14);
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 10.0d + "'", double15 == 10.0d);
        org.junit.Assert.assertNotNull(matrix18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 2 + "'", int19 == 2);
        org.junit.Assert.assertNotNull(matrix21);
        org.junit.Assert.assertNotNull(matrix22);
        org.junit.Assert.assertNotNull(matrix23);
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertArrayEquals(doubleArray27, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertArrayEquals(doubleArray30, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertNotNull(matrix33);
        org.junit.Assert.assertNotNull(matrix36);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 2 + "'", int37 == 2);
        org.junit.Assert.assertNotNull(matrix43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(matrix47);
        org.junit.Assert.assertNotNull(matrix49);
        org.junit.Assert.assertNotNull(matrix50);
        org.junit.Assert.assertNotNull(matrix51);
        org.junit.Assert.assertNotNull(matrix55);
        org.junit.Assert.assertNotNull(matrix56);
        org.junit.Assert.assertNotNull(matrix58);
    }

    @Test
    public void test3208() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3208");
        com.operations.Matrix.Matrix matrix2 = com.operations.Matrix.MatrixTransformations.project2D(365.8209944768069d, 365.8209944768069d);
        boolean boolean3 = com.operations.Matrix.MatrixUtils.isSquare(matrix2);
        org.junit.Assert.assertNotNull(matrix2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
    }

    @Test
    public void test3209() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3209");
        com.operations.Matrix.Matrix matrix1 = com.operations.Matrix.MatrixTransformations.rotate2D((double) '4');
        com.operations.Matrix.Matrix matrix4 = com.operations.Matrix.MatrixTransformations.project2D((double) ' ', 0.0d);
        boolean boolean5 = com.operations.Matrix.MatrixUtils.isSymmetric(matrix4);
        boolean boolean7 = com.operations.Matrix.MatrixUtils.compare(matrix1, matrix4, 1.4142135623730951d);
        boolean boolean8 = com.operations.Matrix.MatrixUtils.isSquare(matrix4);
        com.operations.Matrix.Matrix matrix11 = com.operations.Matrix.MatrixTransformations.scale2D((double) (byte) 100, 350.0d);
        com.operations.Matrix.Matrix matrix14 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0L, (double) (byte) 10);
        double[] doubleArray17 = new double[] { 10, 'a' };
        double[] doubleArray20 = new double[] { 10, 'a' };
        double[][] doubleArray21 = new double[][] { doubleArray17, doubleArray20 };
        com.operations.Matrix.Matrix matrix22 = new com.operations.Matrix.Matrix(doubleArray21);
        int int23 = matrix22.getCols();
        int int24 = matrix22.getCols();
        int int25 = matrix22.getCols();
        com.operations.Matrix.Matrix[] matrixArray26 = com.operations.Matrix.MatrixDecompositions.luDecomposition(matrix22);
        com.operations.Matrix.Matrix matrix27 = com.operations.Matrix.MatrixOperations.multiply(matrix14, matrix22);
        com.operations.Matrix.Matrix matrix29 = com.operations.Matrix.MatrixTransformations.rotate2D((double) (short) 100);
        boolean boolean31 = com.operations.Matrix.MatrixUtils.compare(matrix22, matrix29, (double) (byte) 0);
        double[] doubleArray34 = new double[] { 10, 'a' };
        double[] doubleArray37 = new double[] { 10, 'a' };
        double[][] doubleArray38 = new double[][] { doubleArray34, doubleArray37 };
        com.operations.Matrix.Matrix matrix39 = new com.operations.Matrix.Matrix(doubleArray38);
        com.operations.Matrix.Matrix matrix40 = com.operations.Matrix.MatrixOperations.multiply(matrix22, matrix39);
        com.operations.Matrix.Matrix matrix41 = com.operations.Matrix.MatrixOperations.multiply(matrix11, matrix40);
        int int42 = matrix41.getRows();
        com.operations.Matrix.Matrix matrix47 = com.operations.Matrix.MatrixUtils.generateRandomMatrix((int) '#', (int) (byte) 0, 10, (int) (short) -1);
        com.operations.Matrix.Matrix matrix49 = com.operations.Matrix.MatrixOperations.scalarMultiply(matrix47, (double) 100L);
        com.operations.Matrix.Matrix matrix52 = com.operations.Matrix.MatrixTransformations.project2D(0.0d, (double) 0);
        com.operations.Matrix.Matrix[] matrixArray53 = com.operations.Matrix.MatrixDecompositions.luDecomposition(matrix52);
        com.operations.Matrix.Matrix matrix56 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0L, (double) (byte) 10);
        int int57 = matrix56.getRows();
        com.operations.Matrix.Matrix matrix59 = com.operations.Matrix.MatrixOperations.scalarMultiply(matrix56, (double) 2);
        double double60 = com.operations.Matrix.MatrixUtils.frobeniusNorm(matrix56);
        int int61 = matrix56.getRows();
        com.operations.Matrix.Matrix matrix62 = com.operations.Matrix.MatrixOperations.transpose(matrix56);
        com.operations.Matrix.Matrix matrix63 = com.operations.Matrix.MatrixOperations.multiply(matrix52, matrix62);
        double[] doubleArray66 = new double[] { 10, 'a' };
        double[] doubleArray69 = new double[] { 10, 'a' };
        double[][] doubleArray70 = new double[][] { doubleArray66, doubleArray69 };
        com.operations.Matrix.Matrix matrix71 = new com.operations.Matrix.Matrix(doubleArray70);
        com.operations.Matrix.Matrix matrix72 = new com.operations.Matrix.Matrix(doubleArray70);
        com.operations.Matrix.Matrix[] matrixArray73 = com.operations.Matrix.MatrixDecompositions.luDecomposition(matrix72);
        com.operations.Matrix.Matrix matrix76 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0, (double) 100L);
        com.operations.Matrix.Matrix matrix77 = com.operations.Matrix.MatrixOperations.subtract(matrix72, matrix76);
        double[][] doubleArray78 = matrix77.getData();
        com.operations.Matrix.Matrix matrix79 = new com.operations.Matrix.Matrix(doubleArray78);
        boolean boolean81 = com.operations.Matrix.MatrixUtils.compare(matrix62, matrix79, 32.0d);
        boolean boolean83 = com.operations.Matrix.MatrixUtils.compare(matrix47, matrix62, 146781.22563870353d);
        com.operations.Matrix.Matrix matrix84 = com.operations.Matrix.MatrixOperations.add(matrix41, matrix62);
        boolean boolean86 = com.operations.Matrix.MatrixUtils.compare(matrix4, matrix62, 400.0d);
        matrix62.print();
        boolean boolean88 = com.operations.Matrix.MatrixUtils.isSymmetric(matrix62);
        org.junit.Assert.assertNotNull(matrix1);
        org.junit.Assert.assertNotNull(matrix4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNotNull(matrix11);
        org.junit.Assert.assertNotNull(matrix14);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertArrayEquals(doubleArray17, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertArrayEquals(doubleArray20, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 2 + "'", int23 == 2);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 2 + "'", int24 == 2);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 2 + "'", int25 == 2);
        org.junit.Assert.assertNotNull(matrixArray26);
        org.junit.Assert.assertNotNull(matrix27);
        org.junit.Assert.assertNotNull(matrix29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertArrayEquals(doubleArray34, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertArrayEquals(doubleArray37, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertNotNull(matrix40);
        org.junit.Assert.assertNotNull(matrix41);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 2 + "'", int42 == 2);
        org.junit.Assert.assertNotNull(matrix47);
        org.junit.Assert.assertNotNull(matrix49);
        org.junit.Assert.assertNotNull(matrix52);
        org.junit.Assert.assertNotNull(matrixArray53);
        org.junit.Assert.assertNotNull(matrix56);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 2 + "'", int57 == 2);
        org.junit.Assert.assertNotNull(matrix59);
        org.junit.Assert.assertTrue("'" + double60 + "' != '" + 10.0d + "'", double60 == 10.0d);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 2 + "'", int61 == 2);
        org.junit.Assert.assertNotNull(matrix62);
        org.junit.Assert.assertNotNull(matrix63);
        org.junit.Assert.assertNotNull(doubleArray66);
        org.junit.Assert.assertArrayEquals(doubleArray66, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray69);
        org.junit.Assert.assertArrayEquals(doubleArray69, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray70);
        org.junit.Assert.assertNotNull(matrixArray73);
        org.junit.Assert.assertNotNull(matrix76);
        org.junit.Assert.assertNotNull(matrix77);
        org.junit.Assert.assertNotNull(doubleArray78);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertNotNull(matrix84);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + true + "'", boolean86 == true);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + true + "'", boolean88 == true);
    }

    @Test
    public void test3210() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3210");
        com.operations.Matrix.Matrix matrix2 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0L, (double) (byte) 10);
        double[] doubleArray5 = new double[] { 10, 'a' };
        double[] doubleArray8 = new double[] { 10, 'a' };
        double[][] doubleArray9 = new double[][] { doubleArray5, doubleArray8 };
        com.operations.Matrix.Matrix matrix10 = new com.operations.Matrix.Matrix(doubleArray9);
        int int11 = matrix10.getCols();
        int int12 = matrix10.getCols();
        int int13 = matrix10.getCols();
        com.operations.Matrix.Matrix[] matrixArray14 = com.operations.Matrix.MatrixDecompositions.luDecomposition(matrix10);
        com.operations.Matrix.Matrix matrix15 = com.operations.Matrix.MatrixOperations.multiply(matrix2, matrix10);
        com.operations.Matrix.Matrix matrix17 = com.operations.Matrix.MatrixTransformations.rotate2D((double) (short) 100);
        boolean boolean19 = com.operations.Matrix.MatrixUtils.compare(matrix10, matrix17, (double) (byte) 0);
        double[] doubleArray22 = new double[] { 10, 'a' };
        double[] doubleArray25 = new double[] { 10, 'a' };
        double[][] doubleArray26 = new double[][] { doubleArray22, doubleArray25 };
        com.operations.Matrix.Matrix matrix27 = new com.operations.Matrix.Matrix(doubleArray26);
        com.operations.Matrix.Matrix matrix28 = new com.operations.Matrix.Matrix(doubleArray26);
        com.operations.Matrix.Matrix matrix29 = new com.operations.Matrix.Matrix(doubleArray26);
        boolean boolean31 = com.operations.Matrix.MatrixUtils.compare(matrix10, matrix29, (double) (-1));
        double[] doubleArray34 = new double[] { 10, 'a' };
        double[] doubleArray37 = new double[] { 10, 'a' };
        double[][] doubleArray38 = new double[][] { doubleArray34, doubleArray37 };
        com.operations.Matrix.Matrix matrix39 = new com.operations.Matrix.Matrix(doubleArray38);
        com.operations.Matrix.Matrix matrix40 = new com.operations.Matrix.Matrix(doubleArray38);
        boolean boolean41 = com.operations.Matrix.MatrixUtils.isSquare(matrix40);
        com.operations.Matrix.Matrix matrix42 = com.operations.Matrix.MatrixOperations.multiply(matrix29, matrix40);
        com.operations.Matrix.Matrix matrix45 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0L, (double) (byte) 10);
        int int46 = matrix45.getRows();
        com.operations.Matrix.Matrix matrix48 = com.operations.Matrix.MatrixOperations.scalarMultiply(matrix45, (double) 2);
        matrix45.print();
        matrix45.print();
        com.operations.Matrix.Matrix matrix51 = com.operations.Matrix.MatrixOperations.multiply(matrix42, matrix45);
        com.operations.Matrix.Matrix matrix54 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0.0f, 350.0d);
        com.operations.Matrix.Matrix matrix57 = com.operations.Matrix.MatrixTransformations.project2D(0.0d, (double) 0);
        com.operations.Matrix.Matrix[] matrixArray58 = com.operations.Matrix.MatrixDecompositions.luDecomposition(matrix57);
        com.operations.Matrix.Matrix matrix61 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0L, (double) (byte) 10);
        int int62 = matrix61.getRows();
        com.operations.Matrix.Matrix matrix64 = com.operations.Matrix.MatrixOperations.scalarMultiply(matrix61, (double) 2);
        double double65 = com.operations.Matrix.MatrixUtils.frobeniusNorm(matrix61);
        int int66 = matrix61.getRows();
        com.operations.Matrix.Matrix matrix67 = com.operations.Matrix.MatrixOperations.transpose(matrix61);
        com.operations.Matrix.Matrix matrix68 = com.operations.Matrix.MatrixOperations.multiply(matrix57, matrix67);
        com.operations.Matrix.Matrix matrix69 = com.operations.Matrix.MatrixOperations.multiply(matrix54, matrix67);
        com.operations.Matrix.Matrix matrix70 = com.operations.Matrix.MatrixOperations.transpose(matrix69);
        double double71 = com.operations.Matrix.MatrixUtils.frobeniusNorm(matrix70);
        boolean boolean72 = com.operations.Matrix.MatrixUtils.isSymmetric(matrix70);
        com.operations.Matrix.Matrix matrix73 = com.operations.Matrix.MatrixOperations.add(matrix51, matrix70);
        int int74 = matrix73.getCols();
        org.junit.Assert.assertNotNull(matrix2);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertArrayEquals(doubleArray5, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertArrayEquals(doubleArray8, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 2 + "'", int11 == 2);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 2 + "'", int12 == 2);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 2 + "'", int13 == 2);
        org.junit.Assert.assertNotNull(matrixArray14);
        org.junit.Assert.assertNotNull(matrix15);
        org.junit.Assert.assertNotNull(matrix17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertArrayEquals(doubleArray22, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertArrayEquals(doubleArray25, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertArrayEquals(doubleArray34, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertArrayEquals(doubleArray37, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertNotNull(matrix42);
        org.junit.Assert.assertNotNull(matrix45);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 2 + "'", int46 == 2);
        org.junit.Assert.assertNotNull(matrix48);
        org.junit.Assert.assertNotNull(matrix51);
        org.junit.Assert.assertNotNull(matrix54);
        org.junit.Assert.assertNotNull(matrix57);
        org.junit.Assert.assertNotNull(matrixArray58);
        org.junit.Assert.assertNotNull(matrix61);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 2 + "'", int62 == 2);
        org.junit.Assert.assertNotNull(matrix64);
        org.junit.Assert.assertTrue("'" + double65 + "' != '" + 10.0d + "'", double65 == 10.0d);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 2 + "'", int66 == 2);
        org.junit.Assert.assertNotNull(matrix67);
        org.junit.Assert.assertNotNull(matrix68);
        org.junit.Assert.assertNotNull(matrix69);
        org.junit.Assert.assertNotNull(matrix70);
        org.junit.Assert.assertTrue("'" + double71 + "' != '" + 3500.0d + "'", double71 == 3500.0d);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + true + "'", boolean72 == true);
        org.junit.Assert.assertNotNull(matrix73);
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 2 + "'", int74 == 2);
    }

    @Test
    public void test3211() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3211");
        com.operations.Matrix.Matrix matrix1 = com.operations.Matrix.MatrixTransformations.rotate2D((double) 1.0f);
        com.operations.Matrix.Matrix matrix4 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0L, (double) (byte) 10);
        int int5 = matrix4.getRows();
        com.operations.Matrix.Matrix matrix7 = com.operations.Matrix.MatrixOperations.scalarMultiply(matrix4, (double) 2);
        double double8 = com.operations.Matrix.MatrixUtils.frobeniusNorm(matrix4);
        com.operations.Matrix.Matrix matrix11 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0L, (double) (byte) 10);
        int int12 = matrix11.getRows();
        com.operations.Matrix.Matrix matrix14 = com.operations.Matrix.MatrixOperations.scalarMultiply(matrix11, (double) 2);
        com.operations.Matrix.Matrix matrix15 = com.operations.Matrix.MatrixOperations.subtract(matrix4, matrix14);
        com.operations.Matrix.Matrix matrix16 = com.operations.Matrix.MatrixOperations.add(matrix1, matrix14);
        matrix1.print();
        double[] doubleArray20 = new double[] { 10, 'a' };
        double[] doubleArray23 = new double[] { 10, 'a' };
        double[][] doubleArray24 = new double[][] { doubleArray20, doubleArray23 };
        com.operations.Matrix.Matrix matrix25 = new com.operations.Matrix.Matrix(doubleArray24);
        com.operations.Matrix.Matrix matrix26 = com.operations.Matrix.MatrixOperations.transpose(matrix25);
        com.operations.Matrix.Matrix matrix29 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0L, (double) (byte) 10);
        int int30 = matrix29.getRows();
        com.operations.Matrix.Matrix matrix36 = com.operations.Matrix.MatrixUtils.generateRandomMatrix(100, (int) (byte) 1, (int) '#', (int) '#', 1L);
        boolean boolean38 = com.operations.Matrix.MatrixUtils.compare(matrix29, matrix36, (double) 1.0f);
        com.operations.Matrix.Matrix matrix40 = com.operations.Matrix.MatrixOperations.scalarMultiply(matrix29, (double) 1L);
        matrix29.print();
        com.operations.Matrix.Matrix matrix42 = com.operations.Matrix.MatrixOperations.multiply(matrix26, matrix29);
        com.operations.Matrix.Matrix matrix43 = com.operations.Matrix.MatrixOperations.multiply(matrix1, matrix29);
        com.operations.Matrix.Matrix matrix45 = com.operations.Matrix.MatrixTransformations.rotate2D((double) 1.0f);
        boolean boolean47 = com.operations.Matrix.MatrixUtils.compare(matrix29, matrix45, (double) (short) 0);
        matrix29.print();
        com.operations.Matrix.Matrix matrix49 = com.operations.Matrix.MatrixOperations.transpose(matrix29);
        int int50 = matrix29.getCols();
        int int51 = matrix29.getRows();
        org.junit.Assert.assertNotNull(matrix1);
        org.junit.Assert.assertNotNull(matrix4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 2 + "'", int5 == 2);
        org.junit.Assert.assertNotNull(matrix7);
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 10.0d + "'", double8 == 10.0d);
        org.junit.Assert.assertNotNull(matrix11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 2 + "'", int12 == 2);
        org.junit.Assert.assertNotNull(matrix14);
        org.junit.Assert.assertNotNull(matrix15);
        org.junit.Assert.assertNotNull(matrix16);
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertArrayEquals(doubleArray20, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertArrayEquals(doubleArray23, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertNotNull(matrix26);
        org.junit.Assert.assertNotNull(matrix29);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 2 + "'", int30 == 2);
        org.junit.Assert.assertNotNull(matrix36);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(matrix40);
        org.junit.Assert.assertNotNull(matrix42);
        org.junit.Assert.assertNotNull(matrix43);
        org.junit.Assert.assertNotNull(matrix45);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(matrix49);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 2 + "'", int50 == 2);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 2 + "'", int51 == 2);
    }

    @Test
    public void test3212() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3212");
        com.operations.Matrix.Matrix matrix2 = new com.operations.Matrix.Matrix((int) (short) 10, (int) ' ');
    }

    @Test
    public void test3213() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3213");
        com.operations.Matrix.Matrix matrix1 = com.operations.Matrix.MatrixTransformations.rotate2D(100.0d);
        int int2 = matrix1.getCols();
        double[][] doubleArray3 = matrix1.getData();
        double double4 = com.operations.Matrix.MatrixUtils.frobeniusNorm(matrix1);
        com.operations.Matrix.Matrix matrix6 = com.operations.Matrix.MatrixOperations.scalarMultiply(matrix1, (double) (short) 10);
        com.operations.Matrix.Matrix[] matrixArray7 = com.operations.Matrix.MatrixDecompositions.luDecomposition(matrix1);
        com.operations.Matrix.Matrix[] matrixArray8 = com.operations.Matrix.MatrixDecompositions.luDecomposition(matrix1);
        com.operations.Matrix.Matrix matrix9 = com.operations.Matrix.MatrixOperations.transpose(matrix1);
        // The following exception was thrown during execution in test generation
        try {
            matrix1.setValue((int) (short) -1, (int) (byte) 10, (double) 1.0f);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: Index -1 out of bounds for length 2");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(matrix1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 2 + "'", int2 == 2);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertTrue("'" + double4 + "' != '" + 1.414213562373095d + "'", double4 == 1.414213562373095d);
        org.junit.Assert.assertNotNull(matrix6);
        org.junit.Assert.assertNotNull(matrixArray7);
        org.junit.Assert.assertNotNull(matrixArray8);
        org.junit.Assert.assertNotNull(matrix9);
    }

    @Test
    public void test3214() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3214");
        com.operations.Matrix.Matrix matrix4 = com.operations.Matrix.MatrixUtils.generateRandomMatrix((int) 'a', 10, (int) '4', (int) (short) -1);
        org.junit.Assert.assertNotNull(matrix4);
    }

    @Test
    public void test3215() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3215");
        // The following exception was thrown during execution in test generation
        try {
            com.operations.Matrix.Matrix matrix4 = com.operations.Matrix.MatrixUtils.generateRandomMatrix(0, 0, (int) (short) -1, 0);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
    }

    @Test
    public void test3216() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3216");
        com.operations.Matrix.Matrix matrix2 = new com.operations.Matrix.Matrix((int) (byte) 10, 10);
        boolean boolean3 = com.operations.Matrix.MatrixUtils.isSquare(matrix2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
    }

    @Test
    public void test3217() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3217");
        com.operations.Matrix.Matrix matrix2 = com.operations.Matrix.MatrixTransformations.project2D(263.4829471529277d, 400.0d);
        org.junit.Assert.assertNotNull(matrix2);
    }

    @Test
    public void test3218() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3218");
        com.operations.Matrix.Matrix matrix2 = com.operations.Matrix.MatrixTransformations.scale2D((double) (short) 1, (double) 2);
        com.operations.Matrix.Matrix matrix3 = com.operations.Matrix.MatrixOperations.transpose(matrix2);
        // The following exception was thrown during execution in test generation
        try {
            double double6 = matrix3.getValue((int) (short) 10, (int) 'a');
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(matrix2);
        org.junit.Assert.assertNotNull(matrix3);
    }

    @Test
    public void test3219() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3219");
        double[] doubleArray2 = new double[] { 10, 'a' };
        double[] doubleArray5 = new double[] { 10, 'a' };
        double[][] doubleArray6 = new double[][] { doubleArray2, doubleArray5 };
        com.operations.Matrix.Matrix matrix7 = new com.operations.Matrix.Matrix(doubleArray6);
        int int8 = matrix7.getCols();
        int int9 = matrix7.getCols();
        matrix7.print();
        double[] doubleArray13 = new double[] { 10, 'a' };
        double[] doubleArray16 = new double[] { 10, 'a' };
        double[][] doubleArray17 = new double[][] { doubleArray13, doubleArray16 };
        com.operations.Matrix.Matrix matrix18 = new com.operations.Matrix.Matrix(doubleArray17);
        boolean boolean20 = com.operations.Matrix.MatrixUtils.compare(matrix7, matrix18, (double) (-1));
        double[][] doubleArray21 = matrix7.getData();
        int int22 = matrix7.getRows();
        com.operations.Matrix.Matrix matrix24 = com.operations.Matrix.MatrixOperations.scalarMultiply(matrix7, (double) 0);
        com.operations.Matrix.Matrix[] matrixArray25 = com.operations.Matrix.MatrixDecompositions.luDecomposition(matrix24);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertArrayEquals(doubleArray2, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertArrayEquals(doubleArray5, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 2 + "'", int8 == 2);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 2 + "'", int9 == 2);
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertArrayEquals(doubleArray13, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertArrayEquals(doubleArray16, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 2 + "'", int22 == 2);
        org.junit.Assert.assertNotNull(matrix24);
        org.junit.Assert.assertNotNull(matrixArray25);
    }

    @Test
    public void test3220() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3220");
        double[] doubleArray2 = new double[] { 10, 'a' };
        double[] doubleArray5 = new double[] { 10, 'a' };
        double[][] doubleArray6 = new double[][] { doubleArray2, doubleArray5 };
        com.operations.Matrix.Matrix matrix7 = new com.operations.Matrix.Matrix(doubleArray6);
        com.operations.Matrix.Matrix matrix8 = new com.operations.Matrix.Matrix(doubleArray6);
        boolean boolean9 = com.operations.Matrix.MatrixUtils.isSquare(matrix8);
        com.operations.Matrix.Matrix matrix11 = com.operations.Matrix.MatrixOperations.scalarMultiply(matrix8, (double) 1.0f);
        // The following exception was thrown during execution in test generation
        try {
            double double14 = matrix11.getValue((int) ' ', (int) (short) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertArrayEquals(doubleArray2, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertArrayEquals(doubleArray5, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertNotNull(matrix11);
    }

    @Test
    public void test3221() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3221");
        com.operations.Matrix.Matrix matrix2 = com.operations.Matrix.MatrixTransformations.scale2D(375.213087380171d, 0.0d);
        org.junit.Assert.assertNotNull(matrix2);
    }

    @Test
    public void test3222() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3222");
        com.operations.Matrix.Matrix matrix2 = new com.operations.Matrix.Matrix((int) (short) 100, (int) ' ');
        // The following exception was thrown during execution in test generation
        try {
            matrix2.setValue(32, 52, (double) (byte) 0);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: Index 52 out of bounds for length 32");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
    }

    @Test
    public void test3223() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3223");
        com.operations.Matrix.Matrix matrix4 = com.operations.Matrix.MatrixUtils.generateRandomMatrix(1, 32, (int) (byte) 1, 32);
        // The following exception was thrown during execution in test generation
        try {
            com.operations.Matrix.Matrix[] matrixArray5 = com.operations.Matrix.MatrixDecompositions.luDecomposition(matrix4);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Matrix must be square for LU decomposition.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(matrix4);
    }

    @Test
    public void test3224() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3224");
        // The following exception was thrown during execution in test generation
        try {
            com.operations.Matrix.Matrix matrix5 = com.operations.Matrix.MatrixUtils.generateRandomMatrix(0, (int) (byte) 0, (int) (byte) 0, 2, 0L);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
    }

    @Test
    public void test3225() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3225");
        double[] doubleArray2 = new double[] { 10, 'a' };
        double[] doubleArray5 = new double[] { 10, 'a' };
        double[][] doubleArray6 = new double[][] { doubleArray2, doubleArray5 };
        com.operations.Matrix.Matrix matrix7 = new com.operations.Matrix.Matrix(doubleArray6);
        int int8 = matrix7.getCols();
        int int9 = matrix7.getCols();
        int int10 = matrix7.getCols();
        com.operations.Matrix.Matrix matrix16 = com.operations.Matrix.MatrixUtils.generateRandomMatrix(100, (int) (byte) 1, (int) '#', (int) '#', 1L);
        double double19 = matrix16.getValue((int) '4', 0);
        double double20 = com.operations.Matrix.MatrixUtils.frobeniusNorm(matrix16);
        boolean boolean21 = com.operations.Matrix.MatrixUtils.isSquare(matrix16);
        boolean boolean23 = com.operations.Matrix.MatrixUtils.compare(matrix7, matrix16, (double) 100L);
        com.operations.Matrix.Matrix matrix24 = com.operations.Matrix.MatrixDecompositions.choleskyDecomposition(matrix7);
        double[] doubleArray27 = new double[] { 10, 'a' };
        double[] doubleArray30 = new double[] { 10, 'a' };
        double[][] doubleArray31 = new double[][] { doubleArray27, doubleArray30 };
        com.operations.Matrix.Matrix matrix32 = new com.operations.Matrix.Matrix(doubleArray31);
        int int33 = matrix32.getCols();
        int int34 = matrix32.getCols();
        int int35 = matrix32.getCols();
        com.operations.Matrix.Matrix matrix37 = com.operations.Matrix.MatrixOperations.scalarMultiply(matrix32, (double) 0.0f);
        boolean boolean39 = com.operations.Matrix.MatrixUtils.compare(matrix24, matrix32, (double) '4');
        matrix32.print();
        // The following exception was thrown during execution in test generation
        try {
            double double43 = matrix32.getValue(0, (int) (byte) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertArrayEquals(doubleArray2, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertArrayEquals(doubleArray5, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 2 + "'", int8 == 2);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 2 + "'", int9 == 2);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 2 + "'", int10 == 2);
        org.junit.Assert.assertNotNull(matrix16);
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 35.0d + "'", double19 == 35.0d);
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 350.0d + "'", double20 == 350.0d);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(matrix24);
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertArrayEquals(doubleArray27, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertArrayEquals(doubleArray30, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 2 + "'", int33 == 2);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 2 + "'", int34 == 2);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 2 + "'", int35 == 2);
        org.junit.Assert.assertNotNull(matrix37);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
    }

    @Test
    public void test3226() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3226");
        com.operations.Matrix.Matrix matrix2 = com.operations.Matrix.MatrixTransformations.scale2D((double) (-1L), (double) '4');
        com.operations.Matrix.Matrix matrix3 = com.operations.Matrix.MatrixOperations.transpose(matrix2);
        double[] doubleArray6 = new double[] { 10, 'a' };
        double[] doubleArray9 = new double[] { 10, 'a' };
        double[][] doubleArray10 = new double[][] { doubleArray6, doubleArray9 };
        com.operations.Matrix.Matrix matrix11 = new com.operations.Matrix.Matrix(doubleArray10);
        com.operations.Matrix.Matrix matrix12 = new com.operations.Matrix.Matrix(doubleArray10);
        com.operations.Matrix.Matrix matrix14 = com.operations.Matrix.MatrixTransformations.rotate2D((double) (short) 100);
        double[] doubleArray17 = new double[] { 137.90576492663388d, (byte) -1 };
        double[] doubleArray18 = com.operations.Matrix.MatrixSolver.solveGaussian(matrix14, doubleArray17);
        com.operations.Matrix.Matrix matrix19 = com.operations.Matrix.MatrixOperations.add(matrix12, matrix14);
        com.operations.Matrix.Matrix matrix20 = com.operations.Matrix.MatrixOperations.transpose(matrix14);
        com.operations.Matrix.Matrix matrix21 = com.operations.Matrix.MatrixOperations.multiply(matrix3, matrix14);
        com.operations.Matrix.Matrix matrix24 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0L, (double) (byte) 10);
        int int25 = matrix24.getRows();
        com.operations.Matrix.Matrix matrix27 = com.operations.Matrix.MatrixOperations.scalarMultiply(matrix24, (double) 2);
        matrix24.print();
        matrix24.print();
        com.operations.Matrix.Matrix matrix30 = com.operations.Matrix.MatrixOperations.add(matrix3, matrix24);
        com.operations.Matrix.Matrix[] matrixArray31 = com.operations.Matrix.MatrixDecompositions.luDecomposition(matrix3);
        com.operations.Matrix.Matrix matrix34 = com.operations.Matrix.MatrixTransformations.project2D((double) (byte) 100, 32.0d);
        double[] doubleArray37 = new double[] { 10, 'a' };
        double[] doubleArray40 = new double[] { 10, 'a' };
        double[][] doubleArray41 = new double[][] { doubleArray37, doubleArray40 };
        com.operations.Matrix.Matrix matrix42 = new com.operations.Matrix.Matrix(doubleArray41);
        int int43 = matrix42.getCols();
        int int44 = matrix42.getCols();
        int int45 = matrix42.getCols();
        com.operations.Matrix.Matrix matrix51 = com.operations.Matrix.MatrixUtils.generateRandomMatrix(100, (int) (byte) 1, (int) '#', (int) '#', 1L);
        double double54 = matrix51.getValue((int) '4', 0);
        double double55 = com.operations.Matrix.MatrixUtils.frobeniusNorm(matrix51);
        boolean boolean56 = com.operations.Matrix.MatrixUtils.isSquare(matrix51);
        boolean boolean58 = com.operations.Matrix.MatrixUtils.compare(matrix42, matrix51, (double) 100L);
        int int59 = matrix42.getCols();
        com.operations.Matrix.Matrix matrix60 = com.operations.Matrix.MatrixOperations.transpose(matrix42);
        boolean boolean62 = com.operations.Matrix.MatrixUtils.compare(matrix34, matrix42, 137.15495886388925d);
        double[] doubleArray65 = new double[] { 10, 'a' };
        double[] doubleArray68 = new double[] { 10, 'a' };
        double[][] doubleArray69 = new double[][] { doubleArray65, doubleArray68 };
        com.operations.Matrix.Matrix matrix70 = new com.operations.Matrix.Matrix(doubleArray69);
        com.operations.Matrix.Matrix matrix71 = new com.operations.Matrix.Matrix(doubleArray69);
        boolean boolean72 = com.operations.Matrix.MatrixUtils.isSquare(matrix71);
        com.operations.Matrix.Matrix matrix74 = com.operations.Matrix.MatrixOperations.scalarMultiply(matrix71, (double) '4');
        com.operations.Matrix.Matrix matrix75 = com.operations.Matrix.MatrixOperations.subtract(matrix34, matrix74);
        com.operations.Matrix.Matrix matrix76 = com.operations.Matrix.MatrixOperations.subtract(matrix3, matrix34);
        // The following exception was thrown during execution in test generation
        try {
            com.operations.Matrix.Matrix matrix77 = com.operations.Matrix.MatrixDecompositions.choleskyDecomposition(matrix3);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Matrix is not positive definite.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(matrix2);
        org.junit.Assert.assertNotNull(matrix3);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertArrayEquals(doubleArray6, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertArrayEquals(doubleArray9, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertNotNull(matrix14);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertArrayEquals(doubleArray17, new double[] { 137.90576492663388d, (-1.0d) }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertArrayEquals(doubleArray18, new double[] { (-24.931892522286255d), (-135.63701830716116d) }, 1.0E-15);
        org.junit.Assert.assertNotNull(matrix19);
        org.junit.Assert.assertNotNull(matrix20);
        org.junit.Assert.assertNotNull(matrix21);
        org.junit.Assert.assertNotNull(matrix24);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 2 + "'", int25 == 2);
        org.junit.Assert.assertNotNull(matrix27);
        org.junit.Assert.assertNotNull(matrix30);
        org.junit.Assert.assertNotNull(matrixArray31);
        org.junit.Assert.assertNotNull(matrix34);
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertArrayEquals(doubleArray37, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertArrayEquals(doubleArray40, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 2 + "'", int43 == 2);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 2 + "'", int44 == 2);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 2 + "'", int45 == 2);
        org.junit.Assert.assertNotNull(matrix51);
        org.junit.Assert.assertTrue("'" + double54 + "' != '" + 35.0d + "'", double54 == 35.0d);
        org.junit.Assert.assertTrue("'" + double55 + "' != '" + 350.0d + "'", double55 == 350.0d);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 2 + "'", int59 == 2);
        org.junit.Assert.assertNotNull(matrix60);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + true + "'", boolean62 == true);
        org.junit.Assert.assertNotNull(doubleArray65);
        org.junit.Assert.assertArrayEquals(doubleArray65, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray68);
        org.junit.Assert.assertArrayEquals(doubleArray68, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray69);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + true + "'", boolean72 == true);
        org.junit.Assert.assertNotNull(matrix74);
        org.junit.Assert.assertNotNull(matrix75);
        org.junit.Assert.assertNotNull(matrix76);
    }

    @Test
    public void test3227() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3227");
        com.operations.Matrix.Matrix matrix2 = com.operations.Matrix.MatrixTransformations.project2D(1040.0d, 35.02855977627399d);
        // The following exception was thrown during execution in test generation
        try {
            matrix2.setValue(97, (int) (short) -1, 0.0d);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: Index 97 out of bounds for length 2");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(matrix2);
    }

    @Test
    public void test3228() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3228");
        com.operations.Matrix.Matrix matrix1 = com.operations.Matrix.MatrixTransformations.rotate2D(99.83621769912266d);
        boolean boolean2 = com.operations.Matrix.MatrixUtils.isSymmetric(matrix1);
        org.junit.Assert.assertNotNull(matrix1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
    }

    @Test
    public void test3229() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3229");
        com.operations.Matrix.Matrix matrix2 = com.operations.Matrix.MatrixTransformations.scale2D(10.0d, 0.0d);
        com.operations.Matrix.Matrix matrix3 = com.operations.Matrix.MatrixOperations.transpose(matrix2);
        com.operations.Matrix.Matrix matrix4 = com.operations.Matrix.MatrixOperations.transpose(matrix3);
        com.operations.Matrix.Matrix matrix6 = com.operations.Matrix.MatrixTransformations.rotate2D(0.984807753012208d);
        boolean boolean8 = com.operations.Matrix.MatrixUtils.compare(matrix3, matrix6, 137.90576492663385d);
        double double9 = com.operations.Matrix.MatrixUtils.frobeniusNorm(matrix3);
        org.junit.Assert.assertNotNull(matrix2);
        org.junit.Assert.assertNotNull(matrix3);
        org.junit.Assert.assertNotNull(matrix4);
        org.junit.Assert.assertNotNull(matrix6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 10.0d + "'", double9 == 10.0d);
    }

    @Test
    public void test3230() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3230");
        com.operations.Matrix.Matrix matrix4 = com.operations.Matrix.MatrixUtils.generateRandomMatrix(52, (int) 'a', (int) (short) -1, (-1));
        org.junit.Assert.assertNotNull(matrix4);
    }

    @Test
    public void test3231() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3231");
        com.operations.Matrix.Matrix matrix2 = com.operations.Matrix.MatrixTransformations.project2D(33.52610922848042d, 18.985133644271098d);
        org.junit.Assert.assertNotNull(matrix2);
    }

    @Test
    public void test3232() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3232");
        com.operations.Matrix.Matrix matrix2 = com.operations.Matrix.MatrixTransformations.scale2D(18.14229652832025d, 33.52610922848042d);
        org.junit.Assert.assertNotNull(matrix2);
    }

    @Test
    public void test3233() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3233");
        com.operations.Matrix.Matrix matrix2 = new com.operations.Matrix.Matrix(2, (int) (short) 1);
        com.operations.Matrix.Matrix matrix3 = com.operations.Matrix.MatrixOperations.transpose(matrix2);
        double double4 = com.operations.Matrix.MatrixUtils.frobeniusNorm(matrix2);
        org.junit.Assert.assertNotNull(matrix3);
        org.junit.Assert.assertTrue("'" + double4 + "' != '" + 0.0d + "'", double4 == 0.0d);
    }

    @Test
    public void test3234() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3234");
        double[] doubleArray2 = new double[] { 10, 'a' };
        double[] doubleArray5 = new double[] { 10, 'a' };
        double[][] doubleArray6 = new double[][] { doubleArray2, doubleArray5 };
        com.operations.Matrix.Matrix matrix7 = new com.operations.Matrix.Matrix(doubleArray6);
        com.operations.Matrix.Matrix matrix8 = new com.operations.Matrix.Matrix(doubleArray6);
        com.operations.Matrix.Matrix matrix10 = com.operations.Matrix.MatrixTransformations.rotate2D((double) (short) 100);
        double[] doubleArray13 = new double[] { 137.90576492663388d, (byte) -1 };
        double[] doubleArray14 = com.operations.Matrix.MatrixSolver.solveGaussian(matrix10, doubleArray13);
        com.operations.Matrix.Matrix matrix15 = com.operations.Matrix.MatrixOperations.add(matrix8, matrix10);
        com.operations.Matrix.Matrix matrix16 = com.operations.Matrix.MatrixOperations.transpose(matrix10);
        int int17 = matrix10.getCols();
        int int18 = matrix10.getRows();
        double[] doubleArray21 = new double[] { 10, 'a' };
        double[] doubleArray24 = new double[] { 10, 'a' };
        double[][] doubleArray25 = new double[][] { doubleArray21, doubleArray24 };
        com.operations.Matrix.Matrix matrix26 = new com.operations.Matrix.Matrix(doubleArray25);
        int int27 = matrix26.getCols();
        int int28 = matrix26.getCols();
        matrix26.print();
        double[] doubleArray32 = new double[] { 10, 'a' };
        double[] doubleArray35 = new double[] { 10, 'a' };
        double[][] doubleArray36 = new double[][] { doubleArray32, doubleArray35 };
        com.operations.Matrix.Matrix matrix37 = new com.operations.Matrix.Matrix(doubleArray36);
        boolean boolean39 = com.operations.Matrix.MatrixUtils.compare(matrix26, matrix37, (double) (-1));
        com.operations.Matrix.Matrix matrix40 = com.operations.Matrix.MatrixOperations.multiply(matrix10, matrix26);
        double double43 = matrix10.getValue((int) (short) 0, 0);
        com.operations.Matrix.Matrix matrix44 = com.operations.Matrix.MatrixOperations.transpose(matrix10);
        matrix44.print();
        boolean boolean46 = com.operations.Matrix.MatrixUtils.isSymmetric(matrix44);
        com.operations.Matrix.Matrix matrix48 = com.operations.Matrix.MatrixTransformations.rotate2D(100.0d);
        int int49 = matrix48.getCols();
        matrix48.print();
        com.operations.Matrix.Matrix matrix52 = com.operations.Matrix.MatrixTransformations.rotate2D(100.0d);
        int int53 = matrix52.getRows();
        com.operations.Matrix.Matrix matrix54 = com.operations.Matrix.MatrixOperations.multiply(matrix48, matrix52);
        com.operations.Matrix.Matrix matrix56 = com.operations.Matrix.MatrixTransformations.rotate2D((double) (short) 100);
        double[] doubleArray59 = new double[] { 137.90576492663388d, (byte) -1 };
        double[] doubleArray60 = com.operations.Matrix.MatrixSolver.solveGaussian(matrix56, doubleArray59);
        double[] doubleArray61 = com.operations.Matrix.MatrixSolver.solveGaussian(matrix54, doubleArray60);
        double[] doubleArray62 = com.operations.Matrix.MatrixSolver.solveGaussian(matrix44, doubleArray60);
        // The following exception was thrown during execution in test generation
        try {
            com.operations.Matrix.Matrix matrix63 = com.operations.Matrix.MatrixDecompositions.choleskyDecomposition(matrix44);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Matrix is not positive definite.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertArrayEquals(doubleArray2, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertArrayEquals(doubleArray5, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertNotNull(matrix10);
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertArrayEquals(doubleArray13, new double[] { 137.90576492663388d, (-1.0d) }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertArrayEquals(doubleArray14, new double[] { (-24.931892522286255d), (-135.63701830716116d) }, 1.0E-15);
        org.junit.Assert.assertNotNull(matrix15);
        org.junit.Assert.assertNotNull(matrix16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 2 + "'", int17 == 2);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 2 + "'", int18 == 2);
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertArrayEquals(doubleArray21, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertArrayEquals(doubleArray24, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 2 + "'", int27 == 2);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 2 + "'", int28 == 2);
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertArrayEquals(doubleArray32, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertArrayEquals(doubleArray35, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(matrix40);
        org.junit.Assert.assertTrue("'" + double43 + "' != '" + (-0.1736481776669303d) + "'", double43 == (-0.1736481776669303d));
        org.junit.Assert.assertNotNull(matrix44);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(matrix48);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 2 + "'", int49 == 2);
        org.junit.Assert.assertNotNull(matrix52);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 2 + "'", int53 == 2);
        org.junit.Assert.assertNotNull(matrix54);
        org.junit.Assert.assertNotNull(matrix56);
        org.junit.Assert.assertNotNull(doubleArray59);
        org.junit.Assert.assertArrayEquals(doubleArray59, new double[] { 137.90576492663388d, (-1.0d) }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray60);
        org.junit.Assert.assertArrayEquals(doubleArray60, new double[] { (-24.931892522286255d), (-135.63701830716116d) }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray61);
        org.junit.Assert.assertArrayEquals(doubleArray61, new double[] { 69.81890786710137d, 118.92989575479d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray62);
        org.junit.Assert.assertArrayEquals(doubleArray62, new double[] { 137.90576492663388d, (-1.0000000000000022d) }, 1.0E-15);
    }

    @Test
    public void test3235() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3235");
        com.operations.Matrix.Matrix matrix2 = com.operations.Matrix.MatrixTransformations.scale2D(350.0d, 0.0d);
        org.junit.Assert.assertNotNull(matrix2);
    }

    @Test
    public void test3236() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3236");
        com.operations.Matrix.Matrix matrix1 = com.operations.Matrix.MatrixTransformations.rotate2D((double) (-1L));
        matrix1.print();
        com.operations.Matrix.Matrix matrix5 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0L, (double) (byte) 10);
        double[] doubleArray8 = new double[] { 10, 'a' };
        double[] doubleArray11 = new double[] { 10, 'a' };
        double[][] doubleArray12 = new double[][] { doubleArray8, doubleArray11 };
        com.operations.Matrix.Matrix matrix13 = new com.operations.Matrix.Matrix(doubleArray12);
        int int14 = matrix13.getCols();
        int int15 = matrix13.getCols();
        int int16 = matrix13.getCols();
        com.operations.Matrix.Matrix[] matrixArray17 = com.operations.Matrix.MatrixDecompositions.luDecomposition(matrix13);
        com.operations.Matrix.Matrix matrix18 = com.operations.Matrix.MatrixOperations.multiply(matrix5, matrix13);
        com.operations.Matrix.Matrix matrix20 = com.operations.Matrix.MatrixTransformations.rotate2D((double) (short) 100);
        boolean boolean22 = com.operations.Matrix.MatrixUtils.compare(matrix13, matrix20, (double) (byte) 0);
        double[] doubleArray25 = new double[] { 10, 'a' };
        double[] doubleArray28 = new double[] { 10, 'a' };
        double[][] doubleArray29 = new double[][] { doubleArray25, doubleArray28 };
        com.operations.Matrix.Matrix matrix30 = new com.operations.Matrix.Matrix(doubleArray29);
        com.operations.Matrix.Matrix matrix31 = new com.operations.Matrix.Matrix(doubleArray29);
        com.operations.Matrix.Matrix matrix32 = new com.operations.Matrix.Matrix(doubleArray29);
        boolean boolean34 = com.operations.Matrix.MatrixUtils.compare(matrix13, matrix32, (double) (-1));
        double[] doubleArray37 = new double[] { 10, 'a' };
        double[] doubleArray40 = new double[] { 10, 'a' };
        double[][] doubleArray41 = new double[][] { doubleArray37, doubleArray40 };
        com.operations.Matrix.Matrix matrix42 = new com.operations.Matrix.Matrix(doubleArray41);
        com.operations.Matrix.Matrix matrix43 = new com.operations.Matrix.Matrix(doubleArray41);
        boolean boolean44 = com.operations.Matrix.MatrixUtils.isSquare(matrix43);
        com.operations.Matrix.Matrix matrix45 = com.operations.Matrix.MatrixOperations.multiply(matrix32, matrix43);
        com.operations.Matrix.Matrix matrix48 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0L, (double) (byte) 10);
        int int49 = matrix48.getRows();
        com.operations.Matrix.Matrix matrix51 = com.operations.Matrix.MatrixOperations.scalarMultiply(matrix48, (double) 2);
        matrix48.print();
        matrix48.print();
        com.operations.Matrix.Matrix matrix54 = com.operations.Matrix.MatrixOperations.multiply(matrix45, matrix48);
        com.operations.Matrix.Matrix matrix55 = com.operations.Matrix.MatrixOperations.subtract(matrix1, matrix48);
        com.operations.Matrix.Matrix matrix56 = com.operations.Matrix.MatrixOperations.transpose(matrix1);
        com.operations.Matrix.Matrix matrix59 = com.operations.Matrix.MatrixTransformations.project2D((double) (byte) 100, (double) 1L);
        com.operations.Matrix.Matrix matrix60 = com.operations.Matrix.MatrixOperations.add(matrix1, matrix59);
        com.operations.Matrix.Matrix[] matrixArray61 = com.operations.Matrix.MatrixDecompositions.luDecomposition(matrix60);
        // The following exception was thrown during execution in test generation
        try {
            matrix60.setValue((int) (short) 1, (int) ' ', 32.524725901652594d);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: Index 32 out of bounds for length 2");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(matrix1);
        org.junit.Assert.assertNotNull(matrix5);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertArrayEquals(doubleArray8, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertArrayEquals(doubleArray11, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 2 + "'", int14 == 2);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 2 + "'", int15 == 2);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 2 + "'", int16 == 2);
        org.junit.Assert.assertNotNull(matrixArray17);
        org.junit.Assert.assertNotNull(matrix18);
        org.junit.Assert.assertNotNull(matrix20);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertArrayEquals(doubleArray25, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertArrayEquals(doubleArray28, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertArrayEquals(doubleArray37, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertArrayEquals(doubleArray40, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertNotNull(matrix45);
        org.junit.Assert.assertNotNull(matrix48);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 2 + "'", int49 == 2);
        org.junit.Assert.assertNotNull(matrix51);
        org.junit.Assert.assertNotNull(matrix54);
        org.junit.Assert.assertNotNull(matrix55);
        org.junit.Assert.assertNotNull(matrix56);
        org.junit.Assert.assertNotNull(matrix59);
        org.junit.Assert.assertNotNull(matrix60);
        org.junit.Assert.assertNotNull(matrixArray61);
    }

    @Test
    public void test3237() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3237");
        // The following exception was thrown during execution in test generation
        try {
            com.operations.Matrix.Matrix matrix5 = com.operations.Matrix.MatrixUtils.generateRandomMatrix(0, 10, 52, (int) (short) 10, (long) (-1));
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
    }

    @Test
    public void test3238() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3238");
        com.operations.Matrix.Matrix matrix2 = com.operations.Matrix.MatrixTransformations.project2D((double) (byte) 100, 32.0d);
        double[] doubleArray5 = new double[] { 10, 'a' };
        double[] doubleArray8 = new double[] { 10, 'a' };
        double[][] doubleArray9 = new double[][] { doubleArray5, doubleArray8 };
        com.operations.Matrix.Matrix matrix10 = new com.operations.Matrix.Matrix(doubleArray9);
        int int11 = matrix10.getCols();
        int int12 = matrix10.getCols();
        int int13 = matrix10.getCols();
        com.operations.Matrix.Matrix matrix19 = com.operations.Matrix.MatrixUtils.generateRandomMatrix(100, (int) (byte) 1, (int) '#', (int) '#', 1L);
        double double22 = matrix19.getValue((int) '4', 0);
        double double23 = com.operations.Matrix.MatrixUtils.frobeniusNorm(matrix19);
        boolean boolean24 = com.operations.Matrix.MatrixUtils.isSquare(matrix19);
        boolean boolean26 = com.operations.Matrix.MatrixUtils.compare(matrix10, matrix19, (double) 100L);
        int int27 = matrix10.getCols();
        com.operations.Matrix.Matrix matrix28 = com.operations.Matrix.MatrixOperations.transpose(matrix10);
        boolean boolean30 = com.operations.Matrix.MatrixUtils.compare(matrix2, matrix10, 137.15495886388925d);
        double[] doubleArray33 = new double[] { 10, 'a' };
        double[] doubleArray36 = new double[] { 10, 'a' };
        double[][] doubleArray37 = new double[][] { doubleArray33, doubleArray36 };
        com.operations.Matrix.Matrix matrix38 = new com.operations.Matrix.Matrix(doubleArray37);
        com.operations.Matrix.Matrix matrix39 = new com.operations.Matrix.Matrix(doubleArray37);
        boolean boolean40 = com.operations.Matrix.MatrixUtils.isSquare(matrix39);
        com.operations.Matrix.Matrix matrix42 = com.operations.Matrix.MatrixOperations.scalarMultiply(matrix39, (double) '4');
        com.operations.Matrix.Matrix matrix43 = com.operations.Matrix.MatrixOperations.subtract(matrix2, matrix42);
        com.operations.Matrix.Matrix[] matrixArray44 = com.operations.Matrix.MatrixDecompositions.luDecomposition(matrix2);
        org.junit.Assert.assertNotNull(matrix2);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertArrayEquals(doubleArray5, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertArrayEquals(doubleArray8, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 2 + "'", int11 == 2);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 2 + "'", int12 == 2);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 2 + "'", int13 == 2);
        org.junit.Assert.assertNotNull(matrix19);
        org.junit.Assert.assertTrue("'" + double22 + "' != '" + 35.0d + "'", double22 == 35.0d);
        org.junit.Assert.assertTrue("'" + double23 + "' != '" + 350.0d + "'", double23 == 350.0d);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 2 + "'", int27 == 2);
        org.junit.Assert.assertNotNull(matrix28);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertArrayEquals(doubleArray33, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertArrayEquals(doubleArray36, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertNotNull(matrix42);
        org.junit.Assert.assertNotNull(matrix43);
        org.junit.Assert.assertNotNull(matrixArray44);
    }

    @Test
    public void test3239() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3239");
        // The following exception was thrown during execution in test generation
        try {
            com.operations.Matrix.Matrix matrix5 = com.operations.Matrix.MatrixUtils.generateRandomMatrix((int) (short) 0, 97, (int) (short) 10, 97, (long) 97);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
    }

    @Test
    public void test3240() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3240");
        com.operations.Matrix.Matrix matrix1 = com.operations.Matrix.MatrixTransformations.rotate2D(100.0d);
        int int2 = matrix1.getCols();
        matrix1.print();
        com.operations.Matrix.Matrix matrix5 = com.operations.Matrix.MatrixOperations.scalarMultiply(matrix1, (double) (byte) 1);
        com.operations.Matrix.Matrix[] matrixArray6 = com.operations.Matrix.MatrixDecompositions.luDecomposition(matrix1);
        com.operations.Matrix.Matrix matrix7 = com.operations.Matrix.MatrixOperations.transpose(matrix1);
        double[][] doubleArray8 = matrix7.getData();
        com.operations.Matrix.Matrix matrix9 = new com.operations.Matrix.Matrix(doubleArray8);
        com.operations.Matrix.Matrix matrix11 = com.operations.Matrix.MatrixTransformations.rotate2D((double) '4');
        double[] doubleArray14 = new double[] { 10, 'a' };
        double[] doubleArray17 = new double[] { 10, 'a' };
        double[][] doubleArray18 = new double[][] { doubleArray14, doubleArray17 };
        com.operations.Matrix.Matrix matrix19 = new com.operations.Matrix.Matrix(doubleArray18);
        com.operations.Matrix.Matrix matrix20 = new com.operations.Matrix.Matrix(doubleArray18);
        com.operations.Matrix.Matrix matrix22 = com.operations.Matrix.MatrixTransformations.rotate2D((double) (short) 100);
        double[] doubleArray25 = new double[] { 137.90576492663388d, (byte) -1 };
        double[] doubleArray26 = com.operations.Matrix.MatrixSolver.solveGaussian(matrix22, doubleArray25);
        com.operations.Matrix.Matrix matrix27 = com.operations.Matrix.MatrixOperations.add(matrix20, matrix22);
        boolean boolean28 = com.operations.Matrix.MatrixUtils.isSymmetric(matrix27);
        boolean boolean30 = com.operations.Matrix.MatrixUtils.compare(matrix11, matrix27, 364.0054944640259d);
        com.operations.Matrix.Matrix matrix33 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0L, (double) (byte) 10);
        int int34 = matrix33.getRows();
        com.operations.Matrix.Matrix matrix36 = com.operations.Matrix.MatrixOperations.scalarMultiply(matrix33, (double) 2);
        matrix33.print();
        com.operations.Matrix.Matrix matrix38 = com.operations.Matrix.MatrixOperations.multiply(matrix27, matrix33);
        com.operations.Matrix.Matrix matrix41 = com.operations.Matrix.MatrixTransformations.project2D((double) ' ', 0.0d);
        double[] doubleArray44 = new double[] { 10, 'a' };
        double[] doubleArray47 = new double[] { 10, 'a' };
        double[][] doubleArray48 = new double[][] { doubleArray44, doubleArray47 };
        com.operations.Matrix.Matrix matrix49 = new com.operations.Matrix.Matrix(doubleArray48);
        int int50 = matrix49.getCols();
        boolean boolean51 = com.operations.Matrix.MatrixUtils.isSquare(matrix49);
        com.operations.Matrix.Matrix matrix52 = com.operations.Matrix.MatrixOperations.transpose(matrix49);
        int int53 = matrix52.getRows();
        com.operations.Matrix.Matrix matrix56 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0L, (double) (byte) 10);
        double[] doubleArray59 = new double[] { 10, 'a' };
        double[] doubleArray62 = new double[] { 10, 'a' };
        double[][] doubleArray63 = new double[][] { doubleArray59, doubleArray62 };
        com.operations.Matrix.Matrix matrix64 = new com.operations.Matrix.Matrix(doubleArray63);
        int int65 = matrix64.getCols();
        int int66 = matrix64.getCols();
        int int67 = matrix64.getCols();
        com.operations.Matrix.Matrix[] matrixArray68 = com.operations.Matrix.MatrixDecompositions.luDecomposition(matrix64);
        com.operations.Matrix.Matrix matrix69 = com.operations.Matrix.MatrixOperations.multiply(matrix56, matrix64);
        com.operations.Matrix.Matrix matrix71 = com.operations.Matrix.MatrixTransformations.rotate2D((double) (short) 100);
        boolean boolean73 = com.operations.Matrix.MatrixUtils.compare(matrix64, matrix71, (double) (byte) 0);
        com.operations.Matrix.Matrix matrix74 = com.operations.Matrix.MatrixOperations.multiply(matrix52, matrix64);
        com.operations.Matrix.Matrix matrix75 = com.operations.Matrix.MatrixOperations.add(matrix41, matrix64);
        matrix64.print();
        com.operations.Matrix.Matrix matrix77 = com.operations.Matrix.MatrixOperations.add(matrix33, matrix64);
        double double78 = com.operations.Matrix.MatrixUtils.frobeniusNorm(matrix77);
        boolean boolean80 = com.operations.Matrix.MatrixUtils.compare(matrix9, matrix77, 1.969615506024416d);
        com.operations.Matrix.Matrix matrix86 = com.operations.Matrix.MatrixUtils.generateRandomMatrix(35, (int) (short) 100, 0, 0, (long) (short) 0);
        // The following exception was thrown during execution in test generation
        try {
            com.operations.Matrix.Matrix matrix87 = com.operations.Matrix.MatrixOperations.add(matrix9, matrix86);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Matrices must have the same dimensions for addition.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(matrix1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 2 + "'", int2 == 2);
        org.junit.Assert.assertNotNull(matrix5);
        org.junit.Assert.assertNotNull(matrixArray6);
        org.junit.Assert.assertNotNull(matrix7);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertNotNull(matrix11);
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertArrayEquals(doubleArray14, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertArrayEquals(doubleArray17, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertNotNull(matrix22);
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertArrayEquals(doubleArray25, new double[] { 137.90576492663388d, (-1.0d) }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertArrayEquals(doubleArray26, new double[] { (-24.931892522286255d), (-135.63701830716116d) }, 1.0E-15);
        org.junit.Assert.assertNotNull(matrix27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertNotNull(matrix33);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 2 + "'", int34 == 2);
        org.junit.Assert.assertNotNull(matrix36);
        org.junit.Assert.assertNotNull(matrix38);
        org.junit.Assert.assertNotNull(matrix41);
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertArrayEquals(doubleArray44, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertArrayEquals(doubleArray47, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 2 + "'", int50 == 2);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + true + "'", boolean51 == true);
        org.junit.Assert.assertNotNull(matrix52);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 2 + "'", int53 == 2);
        org.junit.Assert.assertNotNull(matrix56);
        org.junit.Assert.assertNotNull(doubleArray59);
        org.junit.Assert.assertArrayEquals(doubleArray59, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray62);
        org.junit.Assert.assertArrayEquals(doubleArray62, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray63);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 2 + "'", int65 == 2);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 2 + "'", int66 == 2);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 2 + "'", int67 == 2);
        org.junit.Assert.assertNotNull(matrixArray68);
        org.junit.Assert.assertNotNull(matrix69);
        org.junit.Assert.assertNotNull(matrix71);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertNotNull(matrix74);
        org.junit.Assert.assertNotNull(matrix75);
        org.junit.Assert.assertNotNull(matrix77);
        org.junit.Assert.assertTrue("'" + double78 + "' != '" + 145.11374848717816d + "'", double78 == 145.11374848717816d);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertNotNull(matrix86);
    }

    @Test
    public void test3241() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3241");
        double[] doubleArray2 = new double[] { 10, 'a' };
        double[] doubleArray5 = new double[] { 10, 'a' };
        double[][] doubleArray6 = new double[][] { doubleArray2, doubleArray5 };
        com.operations.Matrix.Matrix matrix7 = new com.operations.Matrix.Matrix(doubleArray6);
        com.operations.Matrix.Matrix matrix8 = new com.operations.Matrix.Matrix(doubleArray6);
        boolean boolean9 = com.operations.Matrix.MatrixUtils.isSquare(matrix8);
        double[] doubleArray12 = new double[] { 10, 'a' };
        double[] doubleArray15 = new double[] { 10, 'a' };
        double[][] doubleArray16 = new double[][] { doubleArray12, doubleArray15 };
        com.operations.Matrix.Matrix matrix17 = new com.operations.Matrix.Matrix(doubleArray16);
        int int18 = matrix17.getCols();
        int int19 = matrix17.getCols();
        matrix17.print();
        double[] doubleArray23 = new double[] { 10, 'a' };
        double[] doubleArray26 = new double[] { 10, 'a' };
        double[][] doubleArray27 = new double[][] { doubleArray23, doubleArray26 };
        com.operations.Matrix.Matrix matrix28 = new com.operations.Matrix.Matrix(doubleArray27);
        boolean boolean30 = com.operations.Matrix.MatrixUtils.compare(matrix17, matrix28, (double) (-1));
        com.operations.Matrix.Matrix matrix31 = com.operations.Matrix.MatrixOperations.subtract(matrix8, matrix28);
        com.operations.Matrix.Matrix[] matrixArray32 = com.operations.Matrix.MatrixDecompositions.luDecomposition(matrix31);
        double[][] doubleArray33 = matrix31.getData();
        boolean boolean34 = com.operations.Matrix.MatrixUtils.isSquare(matrix31);
        boolean boolean35 = com.operations.Matrix.MatrixUtils.isSquare(matrix31);
        com.operations.Matrix.Matrix matrix36 = com.operations.Matrix.MatrixOperations.transpose(matrix31);
        double double37 = com.operations.Matrix.MatrixUtils.frobeniusNorm(matrix31);
        com.operations.Matrix.Matrix matrix40 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0.0f, (double) (-1));
        com.operations.Matrix.Matrix matrix43 = com.operations.Matrix.MatrixTransformations.scale2D(146.4308710620817d, (double) 10L);
        com.operations.Matrix.Matrix matrix44 = com.operations.Matrix.MatrixOperations.multiply(matrix40, matrix43);
        int int45 = matrix44.getCols();
        com.operations.Matrix.Matrix matrix48 = com.operations.Matrix.MatrixTransformations.project2D((double) (-1.0f), (double) (short) 0);
        boolean boolean50 = com.operations.Matrix.MatrixUtils.compare(matrix44, matrix48, 36.40054944640259d);
        com.operations.Matrix.Matrix matrix51 = com.operations.Matrix.MatrixOperations.add(matrix31, matrix44);
        com.operations.Matrix.Matrix[] matrixArray52 = com.operations.Matrix.MatrixDecompositions.luDecomposition(matrix44);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertArrayEquals(doubleArray2, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertArrayEquals(doubleArray5, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertArrayEquals(doubleArray12, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertArrayEquals(doubleArray15, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 2 + "'", int18 == 2);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 2 + "'", int19 == 2);
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertArrayEquals(doubleArray23, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertArrayEquals(doubleArray26, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(matrix31);
        org.junit.Assert.assertNotNull(matrixArray32);
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(matrix36);
        org.junit.Assert.assertTrue("'" + double37 + "' != '" + 0.0d + "'", double37 == 0.0d);
        org.junit.Assert.assertNotNull(matrix40);
        org.junit.Assert.assertNotNull(matrix43);
        org.junit.Assert.assertNotNull(matrix44);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 2 + "'", int45 == 2);
        org.junit.Assert.assertNotNull(matrix48);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
        org.junit.Assert.assertNotNull(matrix51);
        org.junit.Assert.assertNotNull(matrixArray52);
    }

    @Test
    public void test3242() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3242");
        com.operations.Matrix.Matrix matrix1 = com.operations.Matrix.MatrixTransformations.rotate2D((-1.0d));
        com.operations.Matrix.Matrix matrix3 = com.operations.Matrix.MatrixTransformations.rotate2D((double) (-1L));
        com.operations.Matrix.Matrix matrix5 = com.operations.Matrix.MatrixTransformations.rotate2D((double) (short) 100);
        double[] doubleArray8 = new double[] { 137.90576492663388d, (byte) -1 };
        double[] doubleArray9 = com.operations.Matrix.MatrixSolver.solveGaussian(matrix5, doubleArray8);
        double[] doubleArray10 = com.operations.Matrix.MatrixSolver.solveGaussian(matrix3, doubleArray8);
        double[] doubleArray11 = com.operations.Matrix.MatrixSolver.solveGaussian(matrix1, doubleArray8);
        com.operations.Matrix.Matrix matrix14 = com.operations.Matrix.MatrixTransformations.project2D((double) 10L, 10.0d);
        com.operations.Matrix.Matrix matrix16 = com.operations.Matrix.MatrixTransformations.rotate2D((double) (short) 100);
        double[] doubleArray19 = new double[] { 137.90576492663388d, (byte) -1 };
        double[] doubleArray20 = com.operations.Matrix.MatrixSolver.solveGaussian(matrix16, doubleArray19);
        com.operations.Matrix.Matrix matrix23 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0L, (double) (byte) 10);
        double[] doubleArray26 = new double[] { 10, 'a' };
        double[] doubleArray29 = new double[] { 10, 'a' };
        double[][] doubleArray30 = new double[][] { doubleArray26, doubleArray29 };
        com.operations.Matrix.Matrix matrix31 = new com.operations.Matrix.Matrix(doubleArray30);
        int int32 = matrix31.getCols();
        int int33 = matrix31.getCols();
        int int34 = matrix31.getCols();
        com.operations.Matrix.Matrix[] matrixArray35 = com.operations.Matrix.MatrixDecompositions.luDecomposition(matrix31);
        com.operations.Matrix.Matrix matrix36 = com.operations.Matrix.MatrixOperations.multiply(matrix23, matrix31);
        boolean boolean38 = com.operations.Matrix.MatrixUtils.compare(matrix16, matrix23, (double) (-1L));
        double[][] doubleArray39 = matrix16.getData();
        com.operations.Matrix.Matrix matrix41 = com.operations.Matrix.MatrixTransformations.rotate2D((double) (short) 100);
        double[] doubleArray44 = new double[] { 137.90576492663388d, (byte) -1 };
        double[] doubleArray45 = com.operations.Matrix.MatrixSolver.solveGaussian(matrix41, doubleArray44);
        double[] doubleArray46 = com.operations.Matrix.MatrixSolver.solveGaussian(matrix16, doubleArray44);
        double[] doubleArray47 = com.operations.Matrix.MatrixSolver.solveGaussian(matrix14, doubleArray46);
        double[] doubleArray48 = com.operations.Matrix.MatrixSolver.solveGaussian(matrix1, doubleArray46);
        // The following exception was thrown during execution in test generation
        try {
            matrix1.setValue((int) (short) 100, (int) ' ', 51.2195908953061d);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: Index 100 out of bounds for length 2");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(matrix1);
        org.junit.Assert.assertNotNull(matrix3);
        org.junit.Assert.assertNotNull(matrix5);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertArrayEquals(doubleArray8, new double[] { 137.90576492663388d, (-1.0d) }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertArrayEquals(doubleArray9, new double[] { (-24.931892522286255d), (-135.63701830716116d) }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertArrayEquals(doubleArray10, new double[] { 137.90221361711127d, 1.4069397643877004d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertArrayEquals(doubleArray11, new double[] { 137.90221361711127d, 1.4069397643877004d }, 1.0E-15);
        org.junit.Assert.assertNotNull(matrix14);
        org.junit.Assert.assertNotNull(matrix16);
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertArrayEquals(doubleArray19, new double[] { 137.90576492663388d, (-1.0d) }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertArrayEquals(doubleArray20, new double[] { (-24.931892522286255d), (-135.63701830716116d) }, 1.0E-15);
        org.junit.Assert.assertNotNull(matrix23);
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertArrayEquals(doubleArray26, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertArrayEquals(doubleArray29, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 2 + "'", int32 == 2);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 2 + "'", int33 == 2);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 2 + "'", int34 == 2);
        org.junit.Assert.assertNotNull(matrixArray35);
        org.junit.Assert.assertNotNull(matrix36);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertNotNull(matrix41);
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertArrayEquals(doubleArray44, new double[] { 137.90576492663388d, (-1.0d) }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertArrayEquals(doubleArray45, new double[] { (-24.931892522286255d), (-135.63701830716116d) }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray46);
        org.junit.Assert.assertArrayEquals(doubleArray46, new double[] { (-24.931892522286255d), (-135.63701830716116d) }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertArrayEquals(doubleArray47, new double[] { (-2.4931892522286256d), (-13.563701830716116d) }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertArrayEquals(doubleArray48, new double[] { (-22.560902902856938d), (-136.05148165384992d) }, 1.0E-15);
    }

    @Test
    public void test3243() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3243");
        com.operations.Matrix.Matrix matrix2 = com.operations.Matrix.MatrixTransformations.scale2D((double) 1.0f, (double) 1);
        com.operations.Matrix.Matrix matrix4 = com.operations.Matrix.MatrixTransformations.rotate2D((double) 1.0f);
        com.operations.Matrix.Matrix matrix7 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0L, (double) (byte) 10);
        int int8 = matrix7.getRows();
        com.operations.Matrix.Matrix matrix10 = com.operations.Matrix.MatrixOperations.scalarMultiply(matrix7, (double) 2);
        double double11 = com.operations.Matrix.MatrixUtils.frobeniusNorm(matrix7);
        com.operations.Matrix.Matrix matrix14 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0L, (double) (byte) 10);
        int int15 = matrix14.getRows();
        com.operations.Matrix.Matrix matrix17 = com.operations.Matrix.MatrixOperations.scalarMultiply(matrix14, (double) 2);
        com.operations.Matrix.Matrix matrix18 = com.operations.Matrix.MatrixOperations.subtract(matrix7, matrix17);
        com.operations.Matrix.Matrix matrix19 = com.operations.Matrix.MatrixOperations.add(matrix4, matrix17);
        boolean boolean21 = com.operations.Matrix.MatrixUtils.compare(matrix2, matrix4, (double) (byte) -1);
        com.operations.Matrix.Matrix matrix22 = com.operations.Matrix.MatrixOperations.transpose(matrix4);
        com.operations.Matrix.Matrix matrix25 = com.operations.Matrix.MatrixTransformations.project2D((double) 10L, 10.0d);
        com.operations.Matrix.Matrix matrix27 = com.operations.Matrix.MatrixTransformations.rotate2D((double) (short) 100);
        double[] doubleArray30 = new double[] { 137.90576492663388d, (byte) -1 };
        double[] doubleArray31 = com.operations.Matrix.MatrixSolver.solveGaussian(matrix27, doubleArray30);
        com.operations.Matrix.Matrix matrix34 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0L, (double) (byte) 10);
        double[] doubleArray37 = new double[] { 10, 'a' };
        double[] doubleArray40 = new double[] { 10, 'a' };
        double[][] doubleArray41 = new double[][] { doubleArray37, doubleArray40 };
        com.operations.Matrix.Matrix matrix42 = new com.operations.Matrix.Matrix(doubleArray41);
        int int43 = matrix42.getCols();
        int int44 = matrix42.getCols();
        int int45 = matrix42.getCols();
        com.operations.Matrix.Matrix[] matrixArray46 = com.operations.Matrix.MatrixDecompositions.luDecomposition(matrix42);
        com.operations.Matrix.Matrix matrix47 = com.operations.Matrix.MatrixOperations.multiply(matrix34, matrix42);
        boolean boolean49 = com.operations.Matrix.MatrixUtils.compare(matrix27, matrix34, (double) (-1L));
        double[][] doubleArray50 = matrix27.getData();
        com.operations.Matrix.Matrix matrix52 = com.operations.Matrix.MatrixTransformations.rotate2D((double) (short) 100);
        double[] doubleArray55 = new double[] { 137.90576492663388d, (byte) -1 };
        double[] doubleArray56 = com.operations.Matrix.MatrixSolver.solveGaussian(matrix52, doubleArray55);
        double[] doubleArray57 = com.operations.Matrix.MatrixSolver.solveGaussian(matrix27, doubleArray55);
        double[] doubleArray58 = com.operations.Matrix.MatrixSolver.solveGaussian(matrix25, doubleArray57);
        double[] doubleArray59 = com.operations.Matrix.MatrixSolver.solveGaussian(matrix4, doubleArray58);
        com.operations.Matrix.Matrix matrix60 = com.operations.Matrix.MatrixDecompositions.choleskyDecomposition(matrix4);
        matrix4.print();
        com.operations.Matrix.Matrix matrix62 = com.operations.Matrix.MatrixOperations.transpose(matrix4);
        boolean boolean63 = com.operations.Matrix.MatrixUtils.isSquare(matrix4);
        org.junit.Assert.assertNotNull(matrix2);
        org.junit.Assert.assertNotNull(matrix4);
        org.junit.Assert.assertNotNull(matrix7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 2 + "'", int8 == 2);
        org.junit.Assert.assertNotNull(matrix10);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 10.0d + "'", double11 == 10.0d);
        org.junit.Assert.assertNotNull(matrix14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 2 + "'", int15 == 2);
        org.junit.Assert.assertNotNull(matrix17);
        org.junit.Assert.assertNotNull(matrix18);
        org.junit.Assert.assertNotNull(matrix19);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(matrix22);
        org.junit.Assert.assertNotNull(matrix25);
        org.junit.Assert.assertNotNull(matrix27);
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertArrayEquals(doubleArray30, new double[] { 137.90576492663388d, (-1.0d) }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertArrayEquals(doubleArray31, new double[] { (-24.931892522286255d), (-135.63701830716116d) }, 1.0E-15);
        org.junit.Assert.assertNotNull(matrix34);
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertArrayEquals(doubleArray37, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertArrayEquals(doubleArray40, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 2 + "'", int43 == 2);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 2 + "'", int44 == 2);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 2 + "'", int45 == 2);
        org.junit.Assert.assertNotNull(matrixArray46);
        org.junit.Assert.assertNotNull(matrix47);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertNotNull(matrix52);
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertArrayEquals(doubleArray55, new double[] { 137.90576492663388d, (-1.0d) }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray56);
        org.junit.Assert.assertArrayEquals(doubleArray56, new double[] { (-24.931892522286255d), (-135.63701830716116d) }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray57);
        org.junit.Assert.assertArrayEquals(doubleArray57, new double[] { (-24.931892522286255d), (-135.63701830716116d) }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray58);
        org.junit.Assert.assertArrayEquals(doubleArray58, new double[] { (-2.4931892522286256d), (-13.563701830716116d) }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray59);
        org.junit.Assert.assertArrayEquals(doubleArray59, new double[] { (-2.7295287645732618d), (-13.518123861075072d) }, 1.0E-15);
        org.junit.Assert.assertNotNull(matrix60);
        org.junit.Assert.assertNotNull(matrix62);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + true + "'", boolean63 == true);
    }

    @Test
    public void test3244() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3244");
        com.operations.Matrix.Matrix matrix2 = com.operations.Matrix.MatrixTransformations.scale2D(0.0d, 100.0d);
        com.operations.Matrix.Matrix matrix4 = com.operations.Matrix.MatrixTransformations.rotate2D((-0.1736481776669303d));
        boolean boolean6 = com.operations.Matrix.MatrixUtils.compare(matrix2, matrix4, (double) (-1L));
        com.operations.Matrix.Matrix matrix8 = com.operations.Matrix.MatrixOperations.scalarMultiply(matrix2, 137.90576492663385d);
        boolean boolean9 = com.operations.Matrix.MatrixUtils.isSquare(matrix8);
        org.junit.Assert.assertNotNull(matrix2);
        org.junit.Assert.assertNotNull(matrix4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(matrix8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
    }

    @Test
    public void test3245() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3245");
        com.operations.Matrix.Matrix matrix1 = com.operations.Matrix.MatrixTransformations.rotate2D(1.414213562373095d);
        com.operations.Matrix.Matrix matrix3 = com.operations.Matrix.MatrixTransformations.rotate2D((double) (short) 100);
        double[] doubleArray6 = new double[] { 137.90576492663388d, (byte) -1 };
        double[] doubleArray7 = com.operations.Matrix.MatrixSolver.solveGaussian(matrix3, doubleArray6);
        com.operations.Matrix.Matrix matrix10 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0L, (double) (byte) 10);
        double[] doubleArray13 = new double[] { 10, 'a' };
        double[] doubleArray16 = new double[] { 10, 'a' };
        double[][] doubleArray17 = new double[][] { doubleArray13, doubleArray16 };
        com.operations.Matrix.Matrix matrix18 = new com.operations.Matrix.Matrix(doubleArray17);
        int int19 = matrix18.getCols();
        int int20 = matrix18.getCols();
        int int21 = matrix18.getCols();
        com.operations.Matrix.Matrix[] matrixArray22 = com.operations.Matrix.MatrixDecompositions.luDecomposition(matrix18);
        com.operations.Matrix.Matrix matrix23 = com.operations.Matrix.MatrixOperations.multiply(matrix10, matrix18);
        boolean boolean25 = com.operations.Matrix.MatrixUtils.compare(matrix3, matrix10, (double) (-1L));
        com.operations.Matrix.Matrix matrix27 = com.operations.Matrix.MatrixTransformations.rotate2D((-1.0d));
        com.operations.Matrix.Matrix matrix29 = com.operations.Matrix.MatrixTransformations.rotate2D((double) (-1L));
        com.operations.Matrix.Matrix matrix31 = com.operations.Matrix.MatrixTransformations.rotate2D((double) (short) 100);
        double[] doubleArray34 = new double[] { 137.90576492663388d, (byte) -1 };
        double[] doubleArray35 = com.operations.Matrix.MatrixSolver.solveGaussian(matrix31, doubleArray34);
        double[] doubleArray36 = com.operations.Matrix.MatrixSolver.solveGaussian(matrix29, doubleArray34);
        double[] doubleArray37 = com.operations.Matrix.MatrixSolver.solveGaussian(matrix27, doubleArray34);
        boolean boolean39 = com.operations.Matrix.MatrixUtils.compare(matrix10, matrix27, (double) '4');
        double[] doubleArray42 = new double[] { 10, 'a' };
        double[] doubleArray45 = new double[] { 10, 'a' };
        double[][] doubleArray46 = new double[][] { doubleArray42, doubleArray45 };
        com.operations.Matrix.Matrix matrix47 = new com.operations.Matrix.Matrix(doubleArray46);
        com.operations.Matrix.Matrix matrix48 = new com.operations.Matrix.Matrix(doubleArray46);
        com.operations.Matrix.Matrix matrix50 = com.operations.Matrix.MatrixTransformations.rotate2D((double) (short) 100);
        double[] doubleArray53 = new double[] { 137.90576492663388d, (byte) -1 };
        double[] doubleArray54 = com.operations.Matrix.MatrixSolver.solveGaussian(matrix50, doubleArray53);
        com.operations.Matrix.Matrix matrix55 = com.operations.Matrix.MatrixOperations.add(matrix48, matrix50);
        com.operations.Matrix.Matrix matrix56 = com.operations.Matrix.MatrixOperations.transpose(matrix50);
        int int57 = matrix50.getCols();
        com.operations.Matrix.Matrix matrix60 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0L, (double) (byte) 10);
        double[] doubleArray63 = new double[] { 10, 'a' };
        double[] doubleArray66 = new double[] { 10, 'a' };
        double[][] doubleArray67 = new double[][] { doubleArray63, doubleArray66 };
        com.operations.Matrix.Matrix matrix68 = new com.operations.Matrix.Matrix(doubleArray67);
        int int69 = matrix68.getCols();
        int int70 = matrix68.getCols();
        int int71 = matrix68.getCols();
        com.operations.Matrix.Matrix[] matrixArray72 = com.operations.Matrix.MatrixDecompositions.luDecomposition(matrix68);
        com.operations.Matrix.Matrix matrix73 = com.operations.Matrix.MatrixOperations.multiply(matrix60, matrix68);
        com.operations.Matrix.Matrix matrix75 = com.operations.Matrix.MatrixTransformations.rotate2D((double) (short) 100);
        boolean boolean77 = com.operations.Matrix.MatrixUtils.compare(matrix68, matrix75, (double) (byte) 0);
        boolean boolean78 = com.operations.Matrix.MatrixUtils.isSymmetric(matrix75);
        boolean boolean79 = com.operations.Matrix.MatrixUtils.isSquare(matrix75);
        com.operations.Matrix.Matrix matrix81 = com.operations.Matrix.MatrixTransformations.rotate2D((double) (short) 100);
        boolean boolean83 = com.operations.Matrix.MatrixUtils.compare(matrix75, matrix81, (double) (byte) 100);
        matrix81.print();
        com.operations.Matrix.Matrix matrix85 = com.operations.Matrix.MatrixOperations.add(matrix50, matrix81);
        com.operations.Matrix.Matrix matrix86 = com.operations.Matrix.MatrixOperations.subtract(matrix27, matrix81);
        com.operations.Matrix.Matrix matrix87 = com.operations.Matrix.MatrixOperations.subtract(matrix1, matrix86);
        double[][] doubleArray88 = matrix87.getData();
        boolean boolean89 = com.operations.Matrix.MatrixUtils.isSymmetric(matrix87);
        org.junit.Assert.assertNotNull(matrix1);
        org.junit.Assert.assertNotNull(matrix3);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertArrayEquals(doubleArray6, new double[] { 137.90576492663388d, (-1.0d) }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertArrayEquals(doubleArray7, new double[] { (-24.931892522286255d), (-135.63701830716116d) }, 1.0E-15);
        org.junit.Assert.assertNotNull(matrix10);
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertArrayEquals(doubleArray13, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertArrayEquals(doubleArray16, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 2 + "'", int19 == 2);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 2 + "'", int20 == 2);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 2 + "'", int21 == 2);
        org.junit.Assert.assertNotNull(matrixArray22);
        org.junit.Assert.assertNotNull(matrix23);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(matrix27);
        org.junit.Assert.assertNotNull(matrix29);
        org.junit.Assert.assertNotNull(matrix31);
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertArrayEquals(doubleArray34, new double[] { 137.90576492663388d, (-1.0d) }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertArrayEquals(doubleArray35, new double[] { (-24.931892522286255d), (-135.63701830716116d) }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertArrayEquals(doubleArray36, new double[] { 137.90221361711127d, 1.4069397643877004d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertArrayEquals(doubleArray37, new double[] { 137.90221361711127d, 1.4069397643877004d }, 1.0E-15);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertArrayEquals(doubleArray42, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertArrayEquals(doubleArray45, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray46);
        org.junit.Assert.assertNotNull(matrix50);
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertArrayEquals(doubleArray53, new double[] { 137.90576492663388d, (-1.0d) }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray54);
        org.junit.Assert.assertArrayEquals(doubleArray54, new double[] { (-24.931892522286255d), (-135.63701830716116d) }, 1.0E-15);
        org.junit.Assert.assertNotNull(matrix55);
        org.junit.Assert.assertNotNull(matrix56);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 2 + "'", int57 == 2);
        org.junit.Assert.assertNotNull(matrix60);
        org.junit.Assert.assertNotNull(doubleArray63);
        org.junit.Assert.assertArrayEquals(doubleArray63, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray66);
        org.junit.Assert.assertArrayEquals(doubleArray66, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray67);
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 2 + "'", int69 == 2);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 2 + "'", int70 == 2);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 2 + "'", int71 == 2);
        org.junit.Assert.assertNotNull(matrixArray72);
        org.junit.Assert.assertNotNull(matrix73);
        org.junit.Assert.assertNotNull(matrix75);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + true + "'", boolean79 == true);
        org.junit.Assert.assertNotNull(matrix81);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + true + "'", boolean83 == true);
        org.junit.Assert.assertNotNull(matrix85);
        org.junit.Assert.assertNotNull(matrix86);
        org.junit.Assert.assertNotNull(matrix87);
        org.junit.Assert.assertNotNull(doubleArray88);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + false + "'", boolean89 == false);
    }

    @Test
    public void test3246() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3246");
        com.operations.Matrix.Matrix matrix2 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0L, (double) (byte) 10);
        double[] doubleArray5 = new double[] { 10, 'a' };
        double[] doubleArray8 = new double[] { 10, 'a' };
        double[][] doubleArray9 = new double[][] { doubleArray5, doubleArray8 };
        com.operations.Matrix.Matrix matrix10 = new com.operations.Matrix.Matrix(doubleArray9);
        int int11 = matrix10.getCols();
        int int12 = matrix10.getCols();
        int int13 = matrix10.getCols();
        com.operations.Matrix.Matrix[] matrixArray14 = com.operations.Matrix.MatrixDecompositions.luDecomposition(matrix10);
        com.operations.Matrix.Matrix matrix15 = com.operations.Matrix.MatrixOperations.multiply(matrix2, matrix10);
        com.operations.Matrix.Matrix matrix17 = com.operations.Matrix.MatrixTransformations.rotate2D((double) (short) 100);
        boolean boolean19 = com.operations.Matrix.MatrixUtils.compare(matrix10, matrix17, (double) (byte) 0);
        double[] doubleArray22 = new double[] { 10, 'a' };
        double[] doubleArray25 = new double[] { 10, 'a' };
        double[][] doubleArray26 = new double[][] { doubleArray22, doubleArray25 };
        com.operations.Matrix.Matrix matrix27 = new com.operations.Matrix.Matrix(doubleArray26);
        com.operations.Matrix.Matrix matrix28 = new com.operations.Matrix.Matrix(doubleArray26);
        com.operations.Matrix.Matrix matrix29 = new com.operations.Matrix.Matrix(doubleArray26);
        boolean boolean31 = com.operations.Matrix.MatrixUtils.compare(matrix10, matrix29, (double) (-1));
        double[] doubleArray34 = new double[] { 10, 'a' };
        double[] doubleArray37 = new double[] { 10, 'a' };
        double[][] doubleArray38 = new double[][] { doubleArray34, doubleArray37 };
        com.operations.Matrix.Matrix matrix39 = new com.operations.Matrix.Matrix(doubleArray38);
        com.operations.Matrix.Matrix matrix40 = new com.operations.Matrix.Matrix(doubleArray38);
        boolean boolean41 = com.operations.Matrix.MatrixUtils.isSquare(matrix40);
        com.operations.Matrix.Matrix matrix42 = com.operations.Matrix.MatrixOperations.multiply(matrix29, matrix40);
        double[][] doubleArray43 = matrix40.getData();
        com.operations.Matrix.Matrix matrix44 = new com.operations.Matrix.Matrix(doubleArray43);
        com.operations.Matrix.Matrix matrix45 = com.operations.Matrix.MatrixOperations.transpose(matrix44);
        boolean boolean46 = com.operations.Matrix.MatrixUtils.isSymmetric(matrix44);
        com.operations.Matrix.Matrix matrix48 = com.operations.Matrix.MatrixOperations.scalarMultiply(matrix44, (double) 2);
        com.operations.Matrix.Matrix matrix51 = com.operations.Matrix.MatrixTransformations.project2D((double) 100, 35.0d);
        boolean boolean53 = com.operations.Matrix.MatrixUtils.compare(matrix48, matrix51, (double) (byte) 10);
        com.operations.Matrix.Matrix matrix56 = com.operations.Matrix.MatrixTransformations.scale2D((double) 'a', (double) '4');
        com.operations.Matrix.Matrix matrix58 = com.operations.Matrix.MatrixOperations.scalarMultiply(matrix56, 100.0d);
        com.operations.Matrix.Matrix matrix59 = com.operations.Matrix.MatrixOperations.subtract(matrix51, matrix56);
        double double60 = com.operations.Matrix.MatrixUtils.frobeniusNorm(matrix59);
        org.junit.Assert.assertNotNull(matrix2);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertArrayEquals(doubleArray5, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertArrayEquals(doubleArray8, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 2 + "'", int11 == 2);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 2 + "'", int12 == 2);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 2 + "'", int13 == 2);
        org.junit.Assert.assertNotNull(matrixArray14);
        org.junit.Assert.assertNotNull(matrix15);
        org.junit.Assert.assertNotNull(matrix17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertArrayEquals(doubleArray22, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertArrayEquals(doubleArray25, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertArrayEquals(doubleArray34, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertArrayEquals(doubleArray37, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertNotNull(matrix42);
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertNotNull(matrix45);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(matrix48);
        org.junit.Assert.assertNotNull(matrix51);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(matrix56);
        org.junit.Assert.assertNotNull(matrix58);
        org.junit.Assert.assertNotNull(matrix59);
        org.junit.Assert.assertTrue("'" + double60 + "' != '" + 17.26267650163207d + "'", double60 == 17.26267650163207d);
    }

    @Test
    public void test3247() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3247");
        com.operations.Matrix.Matrix matrix2 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0L, (double) (byte) 10);
        double[] doubleArray5 = new double[] { 10, 'a' };
        double[] doubleArray8 = new double[] { 10, 'a' };
        double[][] doubleArray9 = new double[][] { doubleArray5, doubleArray8 };
        com.operations.Matrix.Matrix matrix10 = new com.operations.Matrix.Matrix(doubleArray9);
        int int11 = matrix10.getCols();
        int int12 = matrix10.getCols();
        int int13 = matrix10.getCols();
        com.operations.Matrix.Matrix[] matrixArray14 = com.operations.Matrix.MatrixDecompositions.luDecomposition(matrix10);
        com.operations.Matrix.Matrix matrix15 = com.operations.Matrix.MatrixOperations.multiply(matrix2, matrix10);
        com.operations.Matrix.Matrix matrix17 = com.operations.Matrix.MatrixTransformations.rotate2D((double) (short) 100);
        boolean boolean19 = com.operations.Matrix.MatrixUtils.compare(matrix10, matrix17, (double) (byte) 0);
        double[] doubleArray22 = new double[] { 10, 'a' };
        double[] doubleArray25 = new double[] { 10, 'a' };
        double[][] doubleArray26 = new double[][] { doubleArray22, doubleArray25 };
        com.operations.Matrix.Matrix matrix27 = new com.operations.Matrix.Matrix(doubleArray26);
        com.operations.Matrix.Matrix matrix28 = new com.operations.Matrix.Matrix(doubleArray26);
        com.operations.Matrix.Matrix matrix29 = new com.operations.Matrix.Matrix(doubleArray26);
        boolean boolean31 = com.operations.Matrix.MatrixUtils.compare(matrix10, matrix29, (double) (-1));
        double[] doubleArray34 = new double[] { 10, 'a' };
        double[] doubleArray37 = new double[] { 10, 'a' };
        double[][] doubleArray38 = new double[][] { doubleArray34, doubleArray37 };
        com.operations.Matrix.Matrix matrix39 = new com.operations.Matrix.Matrix(doubleArray38);
        com.operations.Matrix.Matrix matrix40 = new com.operations.Matrix.Matrix(doubleArray38);
        boolean boolean41 = com.operations.Matrix.MatrixUtils.isSquare(matrix40);
        com.operations.Matrix.Matrix matrix42 = com.operations.Matrix.MatrixOperations.multiply(matrix29, matrix40);
        double[][] doubleArray43 = matrix40.getData();
        com.operations.Matrix.Matrix matrix44 = new com.operations.Matrix.Matrix(doubleArray43);
        com.operations.Matrix.Matrix matrix45 = new com.operations.Matrix.Matrix(doubleArray43);
        com.operations.Matrix.Matrix matrix46 = new com.operations.Matrix.Matrix(doubleArray43);
        com.operations.Matrix.Matrix matrix48 = com.operations.Matrix.MatrixOperations.scalarMultiply(matrix46, (double) 'a');
        com.operations.Matrix.Matrix matrix51 = com.operations.Matrix.MatrixTransformations.project2D((double) ' ', 36.40054944640259d);
        int int52 = matrix51.getCols();
        com.operations.Matrix.Matrix matrix53 = com.operations.Matrix.MatrixOperations.multiply(matrix48, matrix51);
        com.operations.Matrix.Matrix[] matrixArray54 = com.operations.Matrix.MatrixDecompositions.luDecomposition(matrix51);
        java.lang.Class<?> wildcardClass55 = matrixArray54.getClass();
        org.junit.Assert.assertNotNull(matrix2);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertArrayEquals(doubleArray5, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertArrayEquals(doubleArray8, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 2 + "'", int11 == 2);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 2 + "'", int12 == 2);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 2 + "'", int13 == 2);
        org.junit.Assert.assertNotNull(matrixArray14);
        org.junit.Assert.assertNotNull(matrix15);
        org.junit.Assert.assertNotNull(matrix17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertArrayEquals(doubleArray22, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertArrayEquals(doubleArray25, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertArrayEquals(doubleArray34, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertArrayEquals(doubleArray37, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertNotNull(matrix42);
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertNotNull(matrix48);
        org.junit.Assert.assertNotNull(matrix51);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 2 + "'", int52 == 2);
        org.junit.Assert.assertNotNull(matrix53);
        org.junit.Assert.assertNotNull(matrixArray54);
        org.junit.Assert.assertNotNull(wildcardClass55);
    }

    @Test
    public void test3248() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3248");
        com.operations.Matrix.Matrix matrix2 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0L, (double) (byte) 10);
        double[] doubleArray5 = new double[] { 10, 'a' };
        double[] doubleArray8 = new double[] { 10, 'a' };
        double[][] doubleArray9 = new double[][] { doubleArray5, doubleArray8 };
        com.operations.Matrix.Matrix matrix10 = new com.operations.Matrix.Matrix(doubleArray9);
        int int11 = matrix10.getCols();
        int int12 = matrix10.getCols();
        int int13 = matrix10.getCols();
        com.operations.Matrix.Matrix[] matrixArray14 = com.operations.Matrix.MatrixDecompositions.luDecomposition(matrix10);
        com.operations.Matrix.Matrix matrix15 = com.operations.Matrix.MatrixOperations.multiply(matrix2, matrix10);
        com.operations.Matrix.Matrix matrix17 = com.operations.Matrix.MatrixTransformations.rotate2D((double) (short) 100);
        boolean boolean19 = com.operations.Matrix.MatrixUtils.compare(matrix10, matrix17, (double) (byte) 0);
        com.operations.Matrix.Matrix[] matrixArray20 = com.operations.Matrix.MatrixDecompositions.luDecomposition(matrix10);
        com.operations.Matrix.Matrix matrix21 = com.operations.Matrix.MatrixOperations.transpose(matrix10);
        com.operations.Matrix.Matrix matrix24 = com.operations.Matrix.MatrixTransformations.scale2D((double) 1.0f, (double) 1);
        com.operations.Matrix.Matrix matrix26 = com.operations.Matrix.MatrixTransformations.rotate2D((double) 1.0f);
        com.operations.Matrix.Matrix matrix29 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0L, (double) (byte) 10);
        int int30 = matrix29.getRows();
        com.operations.Matrix.Matrix matrix32 = com.operations.Matrix.MatrixOperations.scalarMultiply(matrix29, (double) 2);
        double double33 = com.operations.Matrix.MatrixUtils.frobeniusNorm(matrix29);
        com.operations.Matrix.Matrix matrix36 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0L, (double) (byte) 10);
        int int37 = matrix36.getRows();
        com.operations.Matrix.Matrix matrix39 = com.operations.Matrix.MatrixOperations.scalarMultiply(matrix36, (double) 2);
        com.operations.Matrix.Matrix matrix40 = com.operations.Matrix.MatrixOperations.subtract(matrix29, matrix39);
        com.operations.Matrix.Matrix matrix41 = com.operations.Matrix.MatrixOperations.add(matrix26, matrix39);
        boolean boolean43 = com.operations.Matrix.MatrixUtils.compare(matrix24, matrix26, (double) (byte) -1);
        com.operations.Matrix.Matrix matrix44 = com.operations.Matrix.MatrixOperations.subtract(matrix21, matrix24);
        double double45 = com.operations.Matrix.MatrixUtils.frobeniusNorm(matrix44);
        com.operations.Matrix.Matrix matrix47 = com.operations.Matrix.MatrixTransformations.rotate2D(100.0d);
        int int48 = matrix47.getCols();
        int int49 = matrix47.getRows();
        com.operations.Matrix.Matrix matrix50 = com.operations.Matrix.MatrixOperations.subtract(matrix44, matrix47);
        matrix47.print();
        boolean boolean52 = com.operations.Matrix.MatrixUtils.isSquare(matrix47);
        org.junit.Assert.assertNotNull(matrix2);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertArrayEquals(doubleArray5, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertArrayEquals(doubleArray8, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 2 + "'", int11 == 2);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 2 + "'", int12 == 2);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 2 + "'", int13 == 2);
        org.junit.Assert.assertNotNull(matrixArray14);
        org.junit.Assert.assertNotNull(matrix15);
        org.junit.Assert.assertNotNull(matrix17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(matrixArray20);
        org.junit.Assert.assertNotNull(matrix21);
        org.junit.Assert.assertNotNull(matrix24);
        org.junit.Assert.assertNotNull(matrix26);
        org.junit.Assert.assertNotNull(matrix29);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 2 + "'", int30 == 2);
        org.junit.Assert.assertNotNull(matrix32);
        org.junit.Assert.assertTrue("'" + double33 + "' != '" + 10.0d + "'", double33 == 10.0d);
        org.junit.Assert.assertNotNull(matrix36);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 2 + "'", int37 == 2);
        org.junit.Assert.assertNotNull(matrix39);
        org.junit.Assert.assertNotNull(matrix40);
        org.junit.Assert.assertNotNull(matrix41);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(matrix44);
        org.junit.Assert.assertTrue("'" + double45 + "' != '" + 137.13497001129946d + "'", double45 == 137.13497001129946d);
        org.junit.Assert.assertNotNull(matrix47);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 2 + "'", int48 == 2);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 2 + "'", int49 == 2);
        org.junit.Assert.assertNotNull(matrix50);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + true + "'", boolean52 == true);
    }

    @Test
    public void test3249() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3249");
        com.operations.Matrix.Matrix matrix2 = com.operations.Matrix.MatrixTransformations.scale2D(0.0d, 98.07140255956371d);
        org.junit.Assert.assertNotNull(matrix2);
    }

    @Test
    public void test3250() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3250");
        // The following exception was thrown during execution in test generation
        try {
            com.operations.Matrix.Matrix matrix5 = com.operations.Matrix.MatrixUtils.generateRandomMatrix((int) (byte) -1, 35, (int) ' ', (int) '4', 100L);
            org.junit.Assert.fail("Expected exception of type java.lang.NegativeArraySizeException; message: -1");
        } catch (java.lang.NegativeArraySizeException e) {
            // Expected exception.
        }
    }

    @Test
    public void test3251() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3251");
        com.operations.Matrix.Matrix matrix1 = com.operations.Matrix.MatrixTransformations.rotate2D(176.5915398536741d);
        int int2 = matrix1.getRows();
        org.junit.Assert.assertNotNull(matrix1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 2 + "'", int2 == 2);
    }

    @Test
    public void test3252() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3252");
        // The following exception was thrown during execution in test generation
        try {
            com.operations.Matrix.Matrix matrix4 = com.operations.Matrix.MatrixUtils.generateRandomMatrix(52, (int) (byte) -1, (int) (short) 1, 1);
            org.junit.Assert.fail("Expected exception of type java.lang.NegativeArraySizeException; message: -1");
        } catch (java.lang.NegativeArraySizeException e) {
            // Expected exception.
        }
    }

    @Test
    public void test3253() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3253");
        com.operations.Matrix.Matrix matrix2 = new com.operations.Matrix.Matrix(2, (int) (byte) 100);
    }

    @Test
    public void test3254() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3254");
        com.operations.Matrix.Matrix matrix2 = com.operations.Matrix.MatrixTransformations.project2D(400.0d, 36.40054944640259d);
        com.operations.Matrix.Matrix matrix4 = com.operations.Matrix.MatrixTransformations.rotate2D(100.0d);
        int int5 = matrix4.getCols();
        matrix4.print();
        com.operations.Matrix.Matrix matrix8 = com.operations.Matrix.MatrixOperations.scalarMultiply(matrix4, (double) (byte) 1);
        com.operations.Matrix.Matrix matrix10 = com.operations.Matrix.MatrixTransformations.rotate2D(350.0d);
        com.operations.Matrix.Matrix matrix12 = com.operations.Matrix.MatrixTransformations.rotate2D((double) (short) 100);
        double[] doubleArray15 = new double[] { 137.90576492663388d, (byte) -1 };
        double[] doubleArray16 = com.operations.Matrix.MatrixSolver.solveGaussian(matrix12, doubleArray15);
        double[] doubleArray17 = com.operations.Matrix.MatrixSolver.solveGaussian(matrix10, doubleArray16);
        double[] doubleArray18 = com.operations.Matrix.MatrixSolver.solveGaussian(matrix4, doubleArray16);
        double[] doubleArray19 = com.operations.Matrix.MatrixSolver.solveGaussian(matrix2, doubleArray16);
        com.operations.Matrix.Matrix[] matrixArray20 = com.operations.Matrix.MatrixDecompositions.luDecomposition(matrix2);
        org.junit.Assert.assertNotNull(matrix2);
        org.junit.Assert.assertNotNull(matrix4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 2 + "'", int5 == 2);
        org.junit.Assert.assertNotNull(matrix8);
        org.junit.Assert.assertNotNull(matrix10);
        org.junit.Assert.assertNotNull(matrix12);
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertArrayEquals(doubleArray15, new double[] { 137.90576492663388d, (-1.0d) }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertArrayEquals(doubleArray16, new double[] { (-24.931892522286255d), (-135.63701830716116d) }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertArrayEquals(doubleArray17, new double[] { (-0.9999999999999858d), (-137.90576492663388d) }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertArrayEquals(doubleArray18, new double[] { (-129.24700952206834d), 48.1062421064292d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertArrayEquals(doubleArray19, new double[] { (-0.06232973130571564d), (-3.7262354653980627d) }, 1.0E-15);
        org.junit.Assert.assertNotNull(matrixArray20);
    }

    @Test
    public void test3255() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3255");
        double[] doubleArray2 = new double[] { 10, 'a' };
        double[] doubleArray5 = new double[] { 10, 'a' };
        double[][] doubleArray6 = new double[][] { doubleArray2, doubleArray5 };
        com.operations.Matrix.Matrix matrix7 = new com.operations.Matrix.Matrix(doubleArray6);
        int int8 = matrix7.getCols();
        int int9 = matrix7.getCols();
        int int10 = matrix7.getCols();
        com.operations.Matrix.Matrix matrix16 = com.operations.Matrix.MatrixUtils.generateRandomMatrix(100, (int) (byte) 1, (int) '#', (int) '#', 1L);
        double double19 = matrix16.getValue((int) '4', 0);
        double double20 = com.operations.Matrix.MatrixUtils.frobeniusNorm(matrix16);
        boolean boolean21 = com.operations.Matrix.MatrixUtils.isSquare(matrix16);
        boolean boolean23 = com.operations.Matrix.MatrixUtils.compare(matrix7, matrix16, (double) 100L);
        double[][] doubleArray24 = matrix7.getData();
        com.operations.Matrix.Matrix matrix25 = com.operations.Matrix.MatrixDecompositions.choleskyDecomposition(matrix7);
        com.operations.Matrix.Matrix matrix27 = com.operations.Matrix.MatrixOperations.scalarMultiply(matrix25, 1363.6076983299943d);
        com.operations.Matrix.Matrix matrix32 = com.operations.Matrix.MatrixUtils.generateRandomMatrix(32, (int) (byte) 10, (int) (short) 10, 1);
        boolean boolean34 = com.operations.Matrix.MatrixUtils.compare(matrix27, matrix32, 21.023651153076518d);
        com.operations.Matrix.Matrix matrix40 = com.operations.Matrix.MatrixUtils.generateRandomMatrix((int) (short) 10, (int) (short) 100, (int) (byte) -1, (-1), (long) (byte) 10);
        int int41 = matrix40.getRows();
        // The following exception was thrown during execution in test generation
        try {
            com.operations.Matrix.Matrix matrix42 = com.operations.Matrix.MatrixOperations.subtract(matrix27, matrix40);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Matrices must have the same dimensions for subtraction.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertArrayEquals(doubleArray2, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertArrayEquals(doubleArray5, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 2 + "'", int8 == 2);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 2 + "'", int9 == 2);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 2 + "'", int10 == 2);
        org.junit.Assert.assertNotNull(matrix16);
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 35.0d + "'", double19 == 35.0d);
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 350.0d + "'", double20 == 350.0d);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertNotNull(matrix25);
        org.junit.Assert.assertNotNull(matrix27);
        org.junit.Assert.assertNotNull(matrix32);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(matrix40);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 10 + "'", int41 == 10);
    }

    @Test
    public void test3256() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3256");
        double[] doubleArray2 = new double[] { 10, 'a' };
        double[] doubleArray5 = new double[] { 10, 'a' };
        double[][] doubleArray6 = new double[][] { doubleArray2, doubleArray5 };
        com.operations.Matrix.Matrix matrix7 = new com.operations.Matrix.Matrix(doubleArray6);
        com.operations.Matrix.Matrix matrix8 = new com.operations.Matrix.Matrix(doubleArray6);
        com.operations.Matrix.Matrix[] matrixArray9 = com.operations.Matrix.MatrixDecompositions.luDecomposition(matrix8);
        double double10 = com.operations.Matrix.MatrixUtils.frobeniusNorm(matrix8);
        int int11 = matrix8.getRows();
        com.operations.Matrix.Matrix matrix13 = com.operations.Matrix.MatrixOperations.scalarMultiply(matrix8, 400.0d);
        double[] doubleArray16 = new double[] { 10, 'a' };
        double[] doubleArray19 = new double[] { 10, 'a' };
        double[][] doubleArray20 = new double[][] { doubleArray16, doubleArray19 };
        com.operations.Matrix.Matrix matrix21 = new com.operations.Matrix.Matrix(doubleArray20);
        com.operations.Matrix.Matrix matrix22 = new com.operations.Matrix.Matrix(doubleArray20);
        boolean boolean23 = com.operations.Matrix.MatrixUtils.isSquare(matrix22);
        double[] doubleArray26 = new double[] { 10, 'a' };
        double[] doubleArray29 = new double[] { 10, 'a' };
        double[][] doubleArray30 = new double[][] { doubleArray26, doubleArray29 };
        com.operations.Matrix.Matrix matrix31 = new com.operations.Matrix.Matrix(doubleArray30);
        int int32 = matrix31.getCols();
        int int33 = matrix31.getCols();
        matrix31.print();
        double[] doubleArray37 = new double[] { 10, 'a' };
        double[] doubleArray40 = new double[] { 10, 'a' };
        double[][] doubleArray41 = new double[][] { doubleArray37, doubleArray40 };
        com.operations.Matrix.Matrix matrix42 = new com.operations.Matrix.Matrix(doubleArray41);
        boolean boolean44 = com.operations.Matrix.MatrixUtils.compare(matrix31, matrix42, (double) (-1));
        com.operations.Matrix.Matrix matrix45 = com.operations.Matrix.MatrixOperations.subtract(matrix22, matrix42);
        com.operations.Matrix.Matrix[] matrixArray46 = com.operations.Matrix.MatrixDecompositions.luDecomposition(matrix45);
        double[][] doubleArray47 = matrix45.getData();
        com.operations.Matrix.Matrix matrix48 = com.operations.Matrix.MatrixOperations.multiply(matrix13, matrix45);
        double[] doubleArray49 = null;
        // The following exception was thrown during execution in test generation
        try {
            double[] doubleArray50 = com.operations.Matrix.MatrixSolver.solveGaussian(matrix45, doubleArray49);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertArrayEquals(doubleArray2, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertArrayEquals(doubleArray5, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertNotNull(matrixArray9);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 137.90576492663388d + "'", double10 == 137.90576492663388d);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 2 + "'", int11 == 2);
        org.junit.Assert.assertNotNull(matrix13);
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertArrayEquals(doubleArray16, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertArrayEquals(doubleArray19, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertArrayEquals(doubleArray26, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertArrayEquals(doubleArray29, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 2 + "'", int32 == 2);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 2 + "'", int33 == 2);
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertArrayEquals(doubleArray37, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertArrayEquals(doubleArray40, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(matrix45);
        org.junit.Assert.assertNotNull(matrixArray46);
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertNotNull(matrix48);
    }

    @Test
    public void test3257() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3257");
        com.operations.Matrix.Matrix matrix1 = com.operations.Matrix.MatrixTransformations.rotate2D((-0.1736481776669303d));
        double[] doubleArray4 = new double[] { 10, 'a' };
        double[] doubleArray7 = new double[] { 10, 'a' };
        double[][] doubleArray8 = new double[][] { doubleArray4, doubleArray7 };
        com.operations.Matrix.Matrix matrix9 = new com.operations.Matrix.Matrix(doubleArray8);
        com.operations.Matrix.Matrix matrix10 = new com.operations.Matrix.Matrix(doubleArray8);
        boolean boolean11 = com.operations.Matrix.MatrixUtils.isSquare(matrix10);
        double[] doubleArray14 = new double[] { 10, 'a' };
        double[] doubleArray17 = new double[] { 10, 'a' };
        double[][] doubleArray18 = new double[][] { doubleArray14, doubleArray17 };
        com.operations.Matrix.Matrix matrix19 = new com.operations.Matrix.Matrix(doubleArray18);
        int int20 = matrix19.getCols();
        int int21 = matrix19.getCols();
        matrix19.print();
        double[] doubleArray25 = new double[] { 10, 'a' };
        double[] doubleArray28 = new double[] { 10, 'a' };
        double[][] doubleArray29 = new double[][] { doubleArray25, doubleArray28 };
        com.operations.Matrix.Matrix matrix30 = new com.operations.Matrix.Matrix(doubleArray29);
        boolean boolean32 = com.operations.Matrix.MatrixUtils.compare(matrix19, matrix30, (double) (-1));
        com.operations.Matrix.Matrix matrix33 = com.operations.Matrix.MatrixOperations.subtract(matrix10, matrix30);
        double[] doubleArray36 = new double[] { 10, 'a' };
        double[] doubleArray39 = new double[] { 10, 'a' };
        double[][] doubleArray40 = new double[][] { doubleArray36, doubleArray39 };
        com.operations.Matrix.Matrix matrix41 = new com.operations.Matrix.Matrix(doubleArray40);
        com.operations.Matrix.Matrix matrix42 = new com.operations.Matrix.Matrix(doubleArray40);
        boolean boolean43 = com.operations.Matrix.MatrixUtils.isSquare(matrix42);
        double[] doubleArray46 = new double[] { 10, 'a' };
        double[] doubleArray49 = new double[] { 10, 'a' };
        double[][] doubleArray50 = new double[][] { doubleArray46, doubleArray49 };
        com.operations.Matrix.Matrix matrix51 = new com.operations.Matrix.Matrix(doubleArray50);
        int int52 = matrix51.getCols();
        int int53 = matrix51.getCols();
        matrix51.print();
        double[] doubleArray57 = new double[] { 10, 'a' };
        double[] doubleArray60 = new double[] { 10, 'a' };
        double[][] doubleArray61 = new double[][] { doubleArray57, doubleArray60 };
        com.operations.Matrix.Matrix matrix62 = new com.operations.Matrix.Matrix(doubleArray61);
        boolean boolean64 = com.operations.Matrix.MatrixUtils.compare(matrix51, matrix62, (double) (-1));
        com.operations.Matrix.Matrix matrix65 = com.operations.Matrix.MatrixOperations.subtract(matrix42, matrix62);
        com.operations.Matrix.Matrix matrix66 = com.operations.Matrix.MatrixOperations.add(matrix10, matrix65);
        com.operations.Matrix.Matrix matrix67 = com.operations.Matrix.MatrixOperations.multiply(matrix1, matrix66);
        int int68 = matrix66.getRows();
        matrix66.print();
        com.operations.Matrix.Matrix matrix70 = com.operations.Matrix.MatrixDecompositions.choleskyDecomposition(matrix66);
        // The following exception was thrown during execution in test generation
        try {
            double double73 = matrix70.getValue(52, (int) (byte) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(matrix1);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertArrayEquals(doubleArray4, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertArrayEquals(doubleArray7, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertArrayEquals(doubleArray14, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertArrayEquals(doubleArray17, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 2 + "'", int20 == 2);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 2 + "'", int21 == 2);
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertArrayEquals(doubleArray25, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertArrayEquals(doubleArray28, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(matrix33);
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertArrayEquals(doubleArray36, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertArrayEquals(doubleArray39, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertNotNull(doubleArray46);
        org.junit.Assert.assertArrayEquals(doubleArray46, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertArrayEquals(doubleArray49, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 2 + "'", int52 == 2);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 2 + "'", int53 == 2);
        org.junit.Assert.assertNotNull(doubleArray57);
        org.junit.Assert.assertArrayEquals(doubleArray57, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray60);
        org.junit.Assert.assertArrayEquals(doubleArray60, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray61);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertNotNull(matrix65);
        org.junit.Assert.assertNotNull(matrix66);
        org.junit.Assert.assertNotNull(matrix67);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 2 + "'", int68 == 2);
        org.junit.Assert.assertNotNull(matrix70);
    }

    @Test
    public void test3258() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3258");
        com.operations.Matrix.Matrix matrix2 = com.operations.Matrix.MatrixTransformations.project2D((double) (short) 100, (double) 0L);
        boolean boolean3 = com.operations.Matrix.MatrixUtils.isSquare(matrix2);
        double[] doubleArray6 = new double[] { 10, 'a' };
        double[] doubleArray9 = new double[] { 10, 'a' };
        double[][] doubleArray10 = new double[][] { doubleArray6, doubleArray9 };
        com.operations.Matrix.Matrix matrix11 = new com.operations.Matrix.Matrix(doubleArray10);
        com.operations.Matrix.Matrix matrix12 = new com.operations.Matrix.Matrix(doubleArray10);
        com.operations.Matrix.Matrix matrix14 = com.operations.Matrix.MatrixTransformations.rotate2D((double) (short) 100);
        double[] doubleArray17 = new double[] { 137.90576492663388d, (byte) -1 };
        double[] doubleArray18 = com.operations.Matrix.MatrixSolver.solveGaussian(matrix14, doubleArray17);
        com.operations.Matrix.Matrix matrix19 = com.operations.Matrix.MatrixOperations.add(matrix12, matrix14);
        com.operations.Matrix.Matrix matrix20 = com.operations.Matrix.MatrixOperations.transpose(matrix14);
        int int21 = matrix14.getCols();
        int int22 = matrix14.getRows();
        double[] doubleArray25 = new double[] { 10, 'a' };
        double[] doubleArray28 = new double[] { 10, 'a' };
        double[][] doubleArray29 = new double[][] { doubleArray25, doubleArray28 };
        com.operations.Matrix.Matrix matrix30 = new com.operations.Matrix.Matrix(doubleArray29);
        int int31 = matrix30.getCols();
        int int32 = matrix30.getCols();
        matrix30.print();
        double[] doubleArray36 = new double[] { 10, 'a' };
        double[] doubleArray39 = new double[] { 10, 'a' };
        double[][] doubleArray40 = new double[][] { doubleArray36, doubleArray39 };
        com.operations.Matrix.Matrix matrix41 = new com.operations.Matrix.Matrix(doubleArray40);
        boolean boolean43 = com.operations.Matrix.MatrixUtils.compare(matrix30, matrix41, (double) (-1));
        com.operations.Matrix.Matrix matrix44 = com.operations.Matrix.MatrixOperations.multiply(matrix14, matrix30);
        double double47 = matrix14.getValue((int) (short) 0, 0);
        com.operations.Matrix.Matrix matrix48 = com.operations.Matrix.MatrixOperations.add(matrix2, matrix14);
        double[][] doubleArray49 = matrix48.getData();
        com.operations.Matrix.Matrix matrix50 = new com.operations.Matrix.Matrix(doubleArray49);
        com.operations.Matrix.Matrix matrix52 = com.operations.Matrix.MatrixTransformations.rotate2D((double) (short) 100);
        double[] doubleArray55 = new double[] { 137.90576492663388d, (byte) -1 };
        double[] doubleArray56 = com.operations.Matrix.MatrixSolver.solveGaussian(matrix52, doubleArray55);
        com.operations.Matrix.Matrix matrix59 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0L, (double) (byte) 10);
        double[] doubleArray62 = new double[] { 10, 'a' };
        double[] doubleArray65 = new double[] { 10, 'a' };
        double[][] doubleArray66 = new double[][] { doubleArray62, doubleArray65 };
        com.operations.Matrix.Matrix matrix67 = new com.operations.Matrix.Matrix(doubleArray66);
        int int68 = matrix67.getCols();
        int int69 = matrix67.getCols();
        int int70 = matrix67.getCols();
        com.operations.Matrix.Matrix[] matrixArray71 = com.operations.Matrix.MatrixDecompositions.luDecomposition(matrix67);
        com.operations.Matrix.Matrix matrix72 = com.operations.Matrix.MatrixOperations.multiply(matrix59, matrix67);
        boolean boolean74 = com.operations.Matrix.MatrixUtils.compare(matrix52, matrix59, (double) (-1L));
        boolean boolean75 = com.operations.Matrix.MatrixUtils.isSymmetric(matrix52);
        int int76 = matrix52.getCols();
        com.operations.Matrix.Matrix matrix78 = com.operations.Matrix.MatrixTransformations.rotate2D((-1.0d));
        com.operations.Matrix.Matrix matrix80 = com.operations.Matrix.MatrixTransformations.rotate2D((double) (-1L));
        com.operations.Matrix.Matrix matrix82 = com.operations.Matrix.MatrixTransformations.rotate2D((double) (short) 100);
        double[] doubleArray85 = new double[] { 137.90576492663388d, (byte) -1 };
        double[] doubleArray86 = com.operations.Matrix.MatrixSolver.solveGaussian(matrix82, doubleArray85);
        double[] doubleArray87 = com.operations.Matrix.MatrixSolver.solveGaussian(matrix80, doubleArray85);
        double[] doubleArray88 = com.operations.Matrix.MatrixSolver.solveGaussian(matrix78, doubleArray85);
        double[] doubleArray89 = com.operations.Matrix.MatrixSolver.solveGaussian(matrix52, doubleArray85);
        double[] doubleArray90 = com.operations.Matrix.MatrixSolver.solveGaussian(matrix50, doubleArray85);
        matrix50.print();
        org.junit.Assert.assertNotNull(matrix2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertArrayEquals(doubleArray6, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertArrayEquals(doubleArray9, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertNotNull(matrix14);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertArrayEquals(doubleArray17, new double[] { 137.90576492663388d, (-1.0d) }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertArrayEquals(doubleArray18, new double[] { (-24.931892522286255d), (-135.63701830716116d) }, 1.0E-15);
        org.junit.Assert.assertNotNull(matrix19);
        org.junit.Assert.assertNotNull(matrix20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 2 + "'", int21 == 2);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 2 + "'", int22 == 2);
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertArrayEquals(doubleArray25, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertArrayEquals(doubleArray28, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 2 + "'", int31 == 2);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 2 + "'", int32 == 2);
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertArrayEquals(doubleArray36, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertArrayEquals(doubleArray39, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(matrix44);
        org.junit.Assert.assertTrue("'" + double47 + "' != '" + (-0.1736481776669303d) + "'", double47 == (-0.1736481776669303d));
        org.junit.Assert.assertNotNull(matrix48);
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertNotNull(matrix52);
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertArrayEquals(doubleArray55, new double[] { 137.90576492663388d, (-1.0d) }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray56);
        org.junit.Assert.assertArrayEquals(doubleArray56, new double[] { (-24.931892522286255d), (-135.63701830716116d) }, 1.0E-15);
        org.junit.Assert.assertNotNull(matrix59);
        org.junit.Assert.assertNotNull(doubleArray62);
        org.junit.Assert.assertArrayEquals(doubleArray62, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray65);
        org.junit.Assert.assertArrayEquals(doubleArray65, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray66);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 2 + "'", int68 == 2);
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 2 + "'", int69 == 2);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 2 + "'", int70 == 2);
        org.junit.Assert.assertNotNull(matrixArray71);
        org.junit.Assert.assertNotNull(matrix72);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 2 + "'", int76 == 2);
        org.junit.Assert.assertNotNull(matrix78);
        org.junit.Assert.assertNotNull(matrix80);
        org.junit.Assert.assertNotNull(matrix82);
        org.junit.Assert.assertNotNull(doubleArray85);
        org.junit.Assert.assertArrayEquals(doubleArray85, new double[] { 137.90576492663388d, (-1.0d) }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray86);
        org.junit.Assert.assertArrayEquals(doubleArray86, new double[] { (-24.931892522286255d), (-135.63701830716116d) }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray87);
        org.junit.Assert.assertArrayEquals(doubleArray87, new double[] { 137.90221361711127d, 1.4069397643877004d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray88);
        org.junit.Assert.assertArrayEquals(doubleArray88, new double[] { 137.90221361711127d, 1.4069397643877004d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray89);
        org.junit.Assert.assertArrayEquals(doubleArray89, new double[] { (-24.931892522286255d), (-135.63701830716116d) }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray90);
        org.junit.Assert.assertArrayEquals(doubleArray90, new double[] { 1.523505661824699d, 14.399000445134698d }, 1.0E-15);
    }

    @Test
    public void test3259() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3259");
        com.operations.Matrix.Matrix matrix2 = com.operations.Matrix.MatrixTransformations.project2D((double) ' ', (double) (byte) 10);
        org.junit.Assert.assertNotNull(matrix2);
    }

    @Test
    public void test3260() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3260");
        com.operations.Matrix.Matrix matrix1 = com.operations.Matrix.MatrixTransformations.rotate2D((-0.1736481776669303d));
        double[] doubleArray4 = new double[] { 10, 'a' };
        double[] doubleArray7 = new double[] { 10, 'a' };
        double[][] doubleArray8 = new double[][] { doubleArray4, doubleArray7 };
        com.operations.Matrix.Matrix matrix9 = new com.operations.Matrix.Matrix(doubleArray8);
        com.operations.Matrix.Matrix matrix10 = new com.operations.Matrix.Matrix(doubleArray8);
        boolean boolean11 = com.operations.Matrix.MatrixUtils.isSquare(matrix10);
        double[] doubleArray14 = new double[] { 10, 'a' };
        double[] doubleArray17 = new double[] { 10, 'a' };
        double[][] doubleArray18 = new double[][] { doubleArray14, doubleArray17 };
        com.operations.Matrix.Matrix matrix19 = new com.operations.Matrix.Matrix(doubleArray18);
        int int20 = matrix19.getCols();
        int int21 = matrix19.getCols();
        matrix19.print();
        double[] doubleArray25 = new double[] { 10, 'a' };
        double[] doubleArray28 = new double[] { 10, 'a' };
        double[][] doubleArray29 = new double[][] { doubleArray25, doubleArray28 };
        com.operations.Matrix.Matrix matrix30 = new com.operations.Matrix.Matrix(doubleArray29);
        boolean boolean32 = com.operations.Matrix.MatrixUtils.compare(matrix19, matrix30, (double) (-1));
        com.operations.Matrix.Matrix matrix33 = com.operations.Matrix.MatrixOperations.subtract(matrix10, matrix30);
        double[] doubleArray36 = new double[] { 10, 'a' };
        double[] doubleArray39 = new double[] { 10, 'a' };
        double[][] doubleArray40 = new double[][] { doubleArray36, doubleArray39 };
        com.operations.Matrix.Matrix matrix41 = new com.operations.Matrix.Matrix(doubleArray40);
        com.operations.Matrix.Matrix matrix42 = new com.operations.Matrix.Matrix(doubleArray40);
        boolean boolean43 = com.operations.Matrix.MatrixUtils.isSquare(matrix42);
        double[] doubleArray46 = new double[] { 10, 'a' };
        double[] doubleArray49 = new double[] { 10, 'a' };
        double[][] doubleArray50 = new double[][] { doubleArray46, doubleArray49 };
        com.operations.Matrix.Matrix matrix51 = new com.operations.Matrix.Matrix(doubleArray50);
        int int52 = matrix51.getCols();
        int int53 = matrix51.getCols();
        matrix51.print();
        double[] doubleArray57 = new double[] { 10, 'a' };
        double[] doubleArray60 = new double[] { 10, 'a' };
        double[][] doubleArray61 = new double[][] { doubleArray57, doubleArray60 };
        com.operations.Matrix.Matrix matrix62 = new com.operations.Matrix.Matrix(doubleArray61);
        boolean boolean64 = com.operations.Matrix.MatrixUtils.compare(matrix51, matrix62, (double) (-1));
        com.operations.Matrix.Matrix matrix65 = com.operations.Matrix.MatrixOperations.subtract(matrix42, matrix62);
        com.operations.Matrix.Matrix matrix66 = com.operations.Matrix.MatrixOperations.add(matrix10, matrix65);
        com.operations.Matrix.Matrix matrix67 = com.operations.Matrix.MatrixOperations.multiply(matrix1, matrix66);
        int int68 = matrix66.getRows();
        matrix66.print();
        double double70 = com.operations.Matrix.MatrixUtils.frobeniusNorm(matrix66);
        org.junit.Assert.assertNotNull(matrix1);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertArrayEquals(doubleArray4, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertArrayEquals(doubleArray7, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertArrayEquals(doubleArray14, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertArrayEquals(doubleArray17, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 2 + "'", int20 == 2);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 2 + "'", int21 == 2);
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertArrayEquals(doubleArray25, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertArrayEquals(doubleArray28, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(matrix33);
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertArrayEquals(doubleArray36, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertArrayEquals(doubleArray39, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertNotNull(doubleArray46);
        org.junit.Assert.assertArrayEquals(doubleArray46, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertArrayEquals(doubleArray49, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 2 + "'", int52 == 2);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 2 + "'", int53 == 2);
        org.junit.Assert.assertNotNull(doubleArray57);
        org.junit.Assert.assertArrayEquals(doubleArray57, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray60);
        org.junit.Assert.assertArrayEquals(doubleArray60, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray61);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertNotNull(matrix65);
        org.junit.Assert.assertNotNull(matrix66);
        org.junit.Assert.assertNotNull(matrix67);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 2 + "'", int68 == 2);
        org.junit.Assert.assertTrue("'" + double70 + "' != '" + 137.90576492663388d + "'", double70 == 137.90576492663388d);
    }

    @Test
    public void test3261() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3261");
        double[] doubleArray2 = new double[] { 10, 'a' };
        double[] doubleArray5 = new double[] { 10, 'a' };
        double[][] doubleArray6 = new double[][] { doubleArray2, doubleArray5 };
        com.operations.Matrix.Matrix matrix7 = new com.operations.Matrix.Matrix(doubleArray6);
        com.operations.Matrix.Matrix matrix8 = new com.operations.Matrix.Matrix(doubleArray6);
        boolean boolean9 = com.operations.Matrix.MatrixUtils.isSquare(matrix8);
        double[] doubleArray12 = new double[] { 10, 'a' };
        double[] doubleArray15 = new double[] { 10, 'a' };
        double[][] doubleArray16 = new double[][] { doubleArray12, doubleArray15 };
        com.operations.Matrix.Matrix matrix17 = new com.operations.Matrix.Matrix(doubleArray16);
        int int18 = matrix17.getCols();
        int int19 = matrix17.getCols();
        matrix17.print();
        double[] doubleArray23 = new double[] { 10, 'a' };
        double[] doubleArray26 = new double[] { 10, 'a' };
        double[][] doubleArray27 = new double[][] { doubleArray23, doubleArray26 };
        com.operations.Matrix.Matrix matrix28 = new com.operations.Matrix.Matrix(doubleArray27);
        boolean boolean30 = com.operations.Matrix.MatrixUtils.compare(matrix17, matrix28, (double) (-1));
        com.operations.Matrix.Matrix matrix31 = com.operations.Matrix.MatrixOperations.subtract(matrix8, matrix28);
        com.operations.Matrix.Matrix matrix33 = com.operations.Matrix.MatrixOperations.scalarMultiply(matrix8, (double) 0.0f);
        int int34 = matrix8.getCols();
        com.operations.Matrix.Matrix matrix35 = com.operations.Matrix.MatrixDecompositions.choleskyDecomposition(matrix8);
        com.operations.Matrix.Matrix matrix38 = com.operations.Matrix.MatrixTransformations.scale2D((double) 100L, 1.0d);
        com.operations.Matrix.Matrix matrix39 = com.operations.Matrix.MatrixOperations.transpose(matrix38);
        com.operations.Matrix.Matrix matrix40 = com.operations.Matrix.MatrixOperations.add(matrix35, matrix39);
        double[][] doubleArray41 = matrix40.getData();
        // The following exception was thrown during execution in test generation
        try {
            double double44 = matrix40.getValue((int) '4', (-1));
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertArrayEquals(doubleArray2, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertArrayEquals(doubleArray5, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertArrayEquals(doubleArray12, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertArrayEquals(doubleArray15, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 2 + "'", int18 == 2);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 2 + "'", int19 == 2);
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertArrayEquals(doubleArray23, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertArrayEquals(doubleArray26, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(matrix31);
        org.junit.Assert.assertNotNull(matrix33);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 2 + "'", int34 == 2);
        org.junit.Assert.assertNotNull(matrix35);
        org.junit.Assert.assertNotNull(matrix38);
        org.junit.Assert.assertNotNull(matrix39);
        org.junit.Assert.assertNotNull(matrix40);
        org.junit.Assert.assertNotNull(doubleArray41);
    }

    @Test
    public void test3262() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3262");
        com.operations.Matrix.Matrix matrix2 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0L, (double) (byte) 10);
        double[] doubleArray5 = new double[] { 10, 'a' };
        double[] doubleArray8 = new double[] { 10, 'a' };
        double[][] doubleArray9 = new double[][] { doubleArray5, doubleArray8 };
        com.operations.Matrix.Matrix matrix10 = new com.operations.Matrix.Matrix(doubleArray9);
        int int11 = matrix10.getCols();
        int int12 = matrix10.getCols();
        int int13 = matrix10.getCols();
        com.operations.Matrix.Matrix[] matrixArray14 = com.operations.Matrix.MatrixDecompositions.luDecomposition(matrix10);
        com.operations.Matrix.Matrix matrix15 = com.operations.Matrix.MatrixOperations.multiply(matrix2, matrix10);
        com.operations.Matrix.Matrix matrix17 = com.operations.Matrix.MatrixTransformations.rotate2D((double) (short) 100);
        boolean boolean19 = com.operations.Matrix.MatrixUtils.compare(matrix10, matrix17, (double) (byte) 0);
        com.operations.Matrix.Matrix[] matrixArray20 = com.operations.Matrix.MatrixDecompositions.luDecomposition(matrix10);
        com.operations.Matrix.Matrix matrix21 = com.operations.Matrix.MatrixOperations.transpose(matrix10);
        com.operations.Matrix.Matrix matrix24 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0L, (double) (byte) 10);
        int int25 = matrix24.getRows();
        com.operations.Matrix.Matrix matrix28 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0L, (double) (byte) 10);
        int int29 = matrix28.getRows();
        com.operations.Matrix.Matrix matrix31 = com.operations.Matrix.MatrixOperations.scalarMultiply(matrix28, (double) 2);
        com.operations.Matrix.Matrix matrix32 = com.operations.Matrix.MatrixOperations.subtract(matrix24, matrix28);
        boolean boolean34 = com.operations.Matrix.MatrixUtils.compare(matrix10, matrix24, (double) ' ');
        boolean boolean35 = com.operations.Matrix.MatrixUtils.isSquare(matrix24);
        boolean boolean36 = com.operations.Matrix.MatrixUtils.isSymmetric(matrix24);
        double[] doubleArray39 = new double[] { 10, 'a' };
        double[] doubleArray42 = new double[] { 10, 'a' };
        double[][] doubleArray43 = new double[][] { doubleArray39, doubleArray42 };
        com.operations.Matrix.Matrix matrix44 = new com.operations.Matrix.Matrix(doubleArray43);
        com.operations.Matrix.Matrix matrix45 = new com.operations.Matrix.Matrix(doubleArray43);
        com.operations.Matrix.Matrix matrix47 = com.operations.Matrix.MatrixTransformations.rotate2D((double) (short) 100);
        double[] doubleArray50 = new double[] { 137.90576492663388d, (byte) -1 };
        double[] doubleArray51 = com.operations.Matrix.MatrixSolver.solveGaussian(matrix47, doubleArray50);
        com.operations.Matrix.Matrix matrix52 = com.operations.Matrix.MatrixOperations.add(matrix45, matrix47);
        double[][] doubleArray53 = matrix45.getData();
        com.operations.Matrix.Matrix matrix54 = new com.operations.Matrix.Matrix(doubleArray53);
        com.operations.Matrix.Matrix matrix55 = new com.operations.Matrix.Matrix(doubleArray53);
        com.operations.Matrix.Matrix matrix58 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0L, (double) (byte) 10);
        int int59 = matrix58.getRows();
        com.operations.Matrix.Matrix matrix61 = com.operations.Matrix.MatrixOperations.scalarMultiply(matrix58, (double) 2);
        com.operations.Matrix.Matrix[] matrixArray62 = com.operations.Matrix.MatrixDecompositions.luDecomposition(matrix61);
        com.operations.Matrix.Matrix matrix63 = com.operations.Matrix.MatrixOperations.transpose(matrix61);
        com.operations.Matrix.Matrix matrix64 = com.operations.Matrix.MatrixOperations.subtract(matrix55, matrix61);
        com.operations.Matrix.Matrix matrix65 = com.operations.Matrix.MatrixOperations.add(matrix24, matrix55);
        org.junit.Assert.assertNotNull(matrix2);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertArrayEquals(doubleArray5, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertArrayEquals(doubleArray8, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 2 + "'", int11 == 2);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 2 + "'", int12 == 2);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 2 + "'", int13 == 2);
        org.junit.Assert.assertNotNull(matrixArray14);
        org.junit.Assert.assertNotNull(matrix15);
        org.junit.Assert.assertNotNull(matrix17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(matrixArray20);
        org.junit.Assert.assertNotNull(matrix21);
        org.junit.Assert.assertNotNull(matrix24);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 2 + "'", int25 == 2);
        org.junit.Assert.assertNotNull(matrix28);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 2 + "'", int29 == 2);
        org.junit.Assert.assertNotNull(matrix31);
        org.junit.Assert.assertNotNull(matrix32);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertArrayEquals(doubleArray39, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertArrayEquals(doubleArray42, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertNotNull(matrix47);
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertArrayEquals(doubleArray50, new double[] { 137.90576492663388d, (-1.0d) }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertArrayEquals(doubleArray51, new double[] { (-24.931892522286255d), (-135.63701830716116d) }, 1.0E-15);
        org.junit.Assert.assertNotNull(matrix52);
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertNotNull(matrix58);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 2 + "'", int59 == 2);
        org.junit.Assert.assertNotNull(matrix61);
        org.junit.Assert.assertNotNull(matrixArray62);
        org.junit.Assert.assertNotNull(matrix63);
        org.junit.Assert.assertNotNull(matrix64);
        org.junit.Assert.assertNotNull(matrix65);
    }

    @Test
    public void test3263() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3263");
        com.operations.Matrix.Matrix matrix2 = new com.operations.Matrix.Matrix(2, (int) (short) 1);
        com.operations.Matrix.Matrix matrix3 = com.operations.Matrix.MatrixOperations.transpose(matrix2);
        int int4 = matrix3.getRows();
        org.junit.Assert.assertNotNull(matrix3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 1 + "'", int4 == 1);
    }

    @Test
    public void test3264() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3264");
        com.operations.Matrix.Matrix matrix1 = com.operations.Matrix.MatrixTransformations.rotate2D((double) 52);
        matrix1.print();
        // The following exception was thrown during execution in test generation
        try {
            matrix1.setValue(32, (int) (byte) 1, 310.45666917731234d);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: Index 32 out of bounds for length 2");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(matrix1);
    }

    @Test
    public void test3265() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3265");
        com.operations.Matrix.Matrix matrix2 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0L, (double) (byte) 10);
        int int3 = matrix2.getRows();
        com.operations.Matrix.Matrix matrix5 = com.operations.Matrix.MatrixOperations.scalarMultiply(matrix2, (double) 2);
        com.operations.Matrix.Matrix[] matrixArray6 = com.operations.Matrix.MatrixDecompositions.luDecomposition(matrix5);
        com.operations.Matrix.Matrix matrix7 = com.operations.Matrix.MatrixOperations.transpose(matrix5);
        com.operations.Matrix.Matrix matrix9 = com.operations.Matrix.MatrixOperations.scalarMultiply(matrix5, (double) 1L);
        double[][] doubleArray10 = matrix9.getData();
        int int11 = matrix9.getRows();
        com.operations.Matrix.Matrix matrix14 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0.0f, (double) (-1));
        com.operations.Matrix.Matrix matrix17 = com.operations.Matrix.MatrixTransformations.scale2D(146.4308710620817d, (double) 10L);
        com.operations.Matrix.Matrix matrix18 = com.operations.Matrix.MatrixOperations.multiply(matrix14, matrix17);
        com.operations.Matrix.Matrix matrix19 = com.operations.Matrix.MatrixOperations.transpose(matrix14);
        double[] doubleArray22 = new double[] { 10, 'a' };
        double[] doubleArray25 = new double[] { 10, 'a' };
        double[][] doubleArray26 = new double[][] { doubleArray22, doubleArray25 };
        com.operations.Matrix.Matrix matrix27 = new com.operations.Matrix.Matrix(doubleArray26);
        com.operations.Matrix.Matrix matrix28 = new com.operations.Matrix.Matrix(doubleArray26);
        boolean boolean29 = com.operations.Matrix.MatrixUtils.isSquare(matrix28);
        double[] doubleArray32 = new double[] { 10, 'a' };
        double[] doubleArray35 = new double[] { 10, 'a' };
        double[][] doubleArray36 = new double[][] { doubleArray32, doubleArray35 };
        com.operations.Matrix.Matrix matrix37 = new com.operations.Matrix.Matrix(doubleArray36);
        int int38 = matrix37.getCols();
        int int39 = matrix37.getCols();
        matrix37.print();
        double[] doubleArray43 = new double[] { 10, 'a' };
        double[] doubleArray46 = new double[] { 10, 'a' };
        double[][] doubleArray47 = new double[][] { doubleArray43, doubleArray46 };
        com.operations.Matrix.Matrix matrix48 = new com.operations.Matrix.Matrix(doubleArray47);
        boolean boolean50 = com.operations.Matrix.MatrixUtils.compare(matrix37, matrix48, (double) (-1));
        com.operations.Matrix.Matrix matrix51 = com.operations.Matrix.MatrixOperations.subtract(matrix28, matrix48);
        boolean boolean52 = com.operations.Matrix.MatrixUtils.isSymmetric(matrix51);
        com.operations.Matrix.Matrix[] matrixArray53 = com.operations.Matrix.MatrixDecompositions.luDecomposition(matrix51);
        com.operations.Matrix.Matrix matrix54 = com.operations.Matrix.MatrixOperations.subtract(matrix19, matrix51);
        boolean boolean56 = com.operations.Matrix.MatrixUtils.compare(matrix9, matrix54, 975.1410154434076d);
        org.junit.Assert.assertNotNull(matrix2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 2 + "'", int3 == 2);
        org.junit.Assert.assertNotNull(matrix5);
        org.junit.Assert.assertNotNull(matrixArray6);
        org.junit.Assert.assertNotNull(matrix7);
        org.junit.Assert.assertNotNull(matrix9);
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 2 + "'", int11 == 2);
        org.junit.Assert.assertNotNull(matrix14);
        org.junit.Assert.assertNotNull(matrix17);
        org.junit.Assert.assertNotNull(matrix18);
        org.junit.Assert.assertNotNull(matrix19);
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertArrayEquals(doubleArray22, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertArrayEquals(doubleArray25, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertArrayEquals(doubleArray32, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertArrayEquals(doubleArray35, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 2 + "'", int38 == 2);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 2 + "'", int39 == 2);
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertArrayEquals(doubleArray43, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray46);
        org.junit.Assert.assertArrayEquals(doubleArray46, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(matrix51);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + true + "'", boolean52 == true);
        org.junit.Assert.assertNotNull(matrixArray53);
        org.junit.Assert.assertNotNull(matrix54);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + true + "'", boolean56 == true);
    }

    @Test
    public void test3266() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3266");
        com.operations.Matrix.Matrix matrix5 = com.operations.Matrix.MatrixUtils.generateRandomMatrix((int) (byte) 1, 52, (int) (byte) 1, (int) (byte) 10, (long) '#');
        boolean boolean6 = com.operations.Matrix.MatrixUtils.isSymmetric(matrix5);
        org.junit.Assert.assertNotNull(matrix5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
    }

    @Test
    public void test3267() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3267");
        // The following exception was thrown during execution in test generation
        try {
            com.operations.Matrix.Matrix matrix4 = com.operations.Matrix.MatrixUtils.generateRandomMatrix((int) (short) -1, 10, (int) (byte) 100, (int) '#');
            org.junit.Assert.fail("Expected exception of type java.lang.NegativeArraySizeException; message: -1");
        } catch (java.lang.NegativeArraySizeException e) {
            // Expected exception.
        }
    }

    @Test
    public void test3268() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3268");
        com.operations.Matrix.Matrix matrix4 = com.operations.Matrix.MatrixUtils.generateRandomMatrix((int) (byte) 10, (int) 'a', (int) '4', (int) ' ');
        double[][] doubleArray5 = matrix4.getData();
        double[][] doubleArray6 = matrix4.getData();
        com.operations.Matrix.Matrix matrix7 = new com.operations.Matrix.Matrix(doubleArray6);
        java.lang.Class<?> wildcardClass8 = doubleArray6.getClass();
        org.junit.Assert.assertNotNull(matrix4);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertNotNull(wildcardClass8);
    }

    @Test
    public void test3269() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3269");
        com.operations.Matrix.Matrix matrix2 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0L, (double) (byte) 10);
        double[] doubleArray5 = new double[] { 10, 'a' };
        double[] doubleArray8 = new double[] { 10, 'a' };
        double[][] doubleArray9 = new double[][] { doubleArray5, doubleArray8 };
        com.operations.Matrix.Matrix matrix10 = new com.operations.Matrix.Matrix(doubleArray9);
        int int11 = matrix10.getCols();
        int int12 = matrix10.getCols();
        int int13 = matrix10.getCols();
        com.operations.Matrix.Matrix[] matrixArray14 = com.operations.Matrix.MatrixDecompositions.luDecomposition(matrix10);
        com.operations.Matrix.Matrix matrix15 = com.operations.Matrix.MatrixOperations.multiply(matrix2, matrix10);
        com.operations.Matrix.Matrix matrix17 = com.operations.Matrix.MatrixTransformations.rotate2D((double) (short) 100);
        boolean boolean19 = com.operations.Matrix.MatrixUtils.compare(matrix10, matrix17, (double) (byte) 0);
        boolean boolean20 = com.operations.Matrix.MatrixUtils.isSymmetric(matrix17);
        boolean boolean21 = com.operations.Matrix.MatrixUtils.isSquare(matrix17);
        com.operations.Matrix.Matrix matrix23 = com.operations.Matrix.MatrixOperations.scalarMultiply(matrix17, (double) 2);
        com.operations.Matrix.Matrix matrix24 = com.operations.Matrix.MatrixOperations.transpose(matrix23);
        boolean boolean25 = com.operations.Matrix.MatrixUtils.isSquare(matrix23);
        com.operations.Matrix.Matrix[] matrixArray26 = com.operations.Matrix.MatrixDecompositions.luDecomposition(matrix23);
        java.lang.Class<?> wildcardClass27 = matrix23.getClass();
        org.junit.Assert.assertNotNull(matrix2);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertArrayEquals(doubleArray5, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertArrayEquals(doubleArray8, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 2 + "'", int11 == 2);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 2 + "'", int12 == 2);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 2 + "'", int13 == 2);
        org.junit.Assert.assertNotNull(matrixArray14);
        org.junit.Assert.assertNotNull(matrix15);
        org.junit.Assert.assertNotNull(matrix17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertNotNull(matrix23);
        org.junit.Assert.assertNotNull(matrix24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertNotNull(matrixArray26);
        org.junit.Assert.assertNotNull(wildcardClass27);
    }

    @Test
    public void test3270() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3270");
        com.operations.Matrix.Matrix matrix4 = com.operations.Matrix.MatrixUtils.generateRandomMatrix((int) '4', (int) (short) 100, 0, 0);
        matrix4.setValue(10, (int) (byte) 0, 10.0d);
        org.junit.Assert.assertNotNull(matrix4);
    }

    @Test
    public void test3271() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3271");
        com.operations.Matrix.Matrix matrix1 = com.operations.Matrix.MatrixTransformations.rotate2D(350.0d);
        com.operations.Matrix.Matrix matrix3 = com.operations.Matrix.MatrixTransformations.rotate2D((double) (short) 100);
        double[] doubleArray6 = new double[] { 137.90576492663388d, (byte) -1 };
        double[] doubleArray7 = com.operations.Matrix.MatrixSolver.solveGaussian(matrix3, doubleArray6);
        double[] doubleArray8 = com.operations.Matrix.MatrixSolver.solveGaussian(matrix1, doubleArray7);
        com.operations.Matrix.Matrix matrix11 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0L, (double) (byte) 10);
        double[] doubleArray14 = new double[] { 10, 'a' };
        double[] doubleArray17 = new double[] { 10, 'a' };
        double[][] doubleArray18 = new double[][] { doubleArray14, doubleArray17 };
        com.operations.Matrix.Matrix matrix19 = new com.operations.Matrix.Matrix(doubleArray18);
        int int20 = matrix19.getCols();
        int int21 = matrix19.getCols();
        int int22 = matrix19.getCols();
        com.operations.Matrix.Matrix[] matrixArray23 = com.operations.Matrix.MatrixDecompositions.luDecomposition(matrix19);
        com.operations.Matrix.Matrix matrix24 = com.operations.Matrix.MatrixOperations.multiply(matrix11, matrix19);
        com.operations.Matrix.Matrix matrix26 = com.operations.Matrix.MatrixTransformations.rotate2D((double) (short) 100);
        boolean boolean28 = com.operations.Matrix.MatrixUtils.compare(matrix19, matrix26, (double) (byte) 0);
        double[] doubleArray31 = new double[] { 10, 'a' };
        double[] doubleArray34 = new double[] { 10, 'a' };
        double[][] doubleArray35 = new double[][] { doubleArray31, doubleArray34 };
        com.operations.Matrix.Matrix matrix36 = new com.operations.Matrix.Matrix(doubleArray35);
        com.operations.Matrix.Matrix matrix37 = new com.operations.Matrix.Matrix(doubleArray35);
        com.operations.Matrix.Matrix matrix38 = new com.operations.Matrix.Matrix(doubleArray35);
        boolean boolean40 = com.operations.Matrix.MatrixUtils.compare(matrix19, matrix38, (double) (-1));
        int int41 = matrix19.getRows();
        com.operations.Matrix.Matrix matrix42 = com.operations.Matrix.MatrixOperations.add(matrix1, matrix19);
        int int43 = matrix1.getRows();
        double[] doubleArray46 = new double[] { 10, 'a' };
        double[] doubleArray49 = new double[] { 10, 'a' };
        double[][] doubleArray50 = new double[][] { doubleArray46, doubleArray49 };
        com.operations.Matrix.Matrix matrix51 = new com.operations.Matrix.Matrix(doubleArray50);
        com.operations.Matrix.Matrix matrix52 = new com.operations.Matrix.Matrix(doubleArray50);
        boolean boolean53 = com.operations.Matrix.MatrixUtils.isSquare(matrix52);
        double[] doubleArray56 = new double[] { 10, 'a' };
        double[] doubleArray59 = new double[] { 10, 'a' };
        double[][] doubleArray60 = new double[][] { doubleArray56, doubleArray59 };
        com.operations.Matrix.Matrix matrix61 = new com.operations.Matrix.Matrix(doubleArray60);
        int int62 = matrix61.getCols();
        int int63 = matrix61.getCols();
        matrix61.print();
        double[] doubleArray67 = new double[] { 10, 'a' };
        double[] doubleArray70 = new double[] { 10, 'a' };
        double[][] doubleArray71 = new double[][] { doubleArray67, doubleArray70 };
        com.operations.Matrix.Matrix matrix72 = new com.operations.Matrix.Matrix(doubleArray71);
        boolean boolean74 = com.operations.Matrix.MatrixUtils.compare(matrix61, matrix72, (double) (-1));
        com.operations.Matrix.Matrix matrix75 = com.operations.Matrix.MatrixOperations.subtract(matrix52, matrix72);
        com.operations.Matrix.Matrix matrix77 = com.operations.Matrix.MatrixOperations.scalarMultiply(matrix52, (double) 0.0f);
        com.operations.Matrix.Matrix matrix78 = com.operations.Matrix.MatrixOperations.transpose(matrix52);
        double[][] doubleArray79 = matrix52.getData();
        matrix52.print();
        matrix52.print();
        com.operations.Matrix.Matrix matrix82 = com.operations.Matrix.MatrixOperations.transpose(matrix52);
        com.operations.Matrix.Matrix matrix83 = com.operations.Matrix.MatrixOperations.add(matrix1, matrix82);
        int int84 = matrix82.getRows();
        int int85 = matrix82.getCols();
        org.junit.Assert.assertNotNull(matrix1);
        org.junit.Assert.assertNotNull(matrix3);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertArrayEquals(doubleArray6, new double[] { 137.90576492663388d, (-1.0d) }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertArrayEquals(doubleArray7, new double[] { (-24.931892522286255d), (-135.63701830716116d) }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertArrayEquals(doubleArray8, new double[] { (-0.9999999999999858d), (-137.90576492663388d) }, 1.0E-15);
        org.junit.Assert.assertNotNull(matrix11);
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertArrayEquals(doubleArray14, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertArrayEquals(doubleArray17, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 2 + "'", int20 == 2);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 2 + "'", int21 == 2);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 2 + "'", int22 == 2);
        org.junit.Assert.assertNotNull(matrixArray23);
        org.junit.Assert.assertNotNull(matrix24);
        org.junit.Assert.assertNotNull(matrix26);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertArrayEquals(doubleArray31, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertArrayEquals(doubleArray34, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 2 + "'", int41 == 2);
        org.junit.Assert.assertNotNull(matrix42);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 2 + "'", int43 == 2);
        org.junit.Assert.assertNotNull(doubleArray46);
        org.junit.Assert.assertArrayEquals(doubleArray46, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertArrayEquals(doubleArray49, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true);
        org.junit.Assert.assertNotNull(doubleArray56);
        org.junit.Assert.assertArrayEquals(doubleArray56, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray59);
        org.junit.Assert.assertArrayEquals(doubleArray59, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray60);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 2 + "'", int62 == 2);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 2 + "'", int63 == 2);
        org.junit.Assert.assertNotNull(doubleArray67);
        org.junit.Assert.assertArrayEquals(doubleArray67, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray70);
        org.junit.Assert.assertArrayEquals(doubleArray70, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray71);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertNotNull(matrix75);
        org.junit.Assert.assertNotNull(matrix77);
        org.junit.Assert.assertNotNull(matrix78);
        org.junit.Assert.assertNotNull(doubleArray79);
        org.junit.Assert.assertNotNull(matrix82);
        org.junit.Assert.assertNotNull(matrix83);
        org.junit.Assert.assertTrue("'" + int84 + "' != '" + 2 + "'", int84 == 2);
        org.junit.Assert.assertTrue("'" + int85 + "' != '" + 2 + "'", int85 == 2);
    }

    @Test
    public void test3272() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3272");
        com.operations.Matrix.Matrix matrix2 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0L, (double) (byte) 10);
        double[] doubleArray5 = new double[] { 10, 'a' };
        double[] doubleArray8 = new double[] { 10, 'a' };
        double[][] doubleArray9 = new double[][] { doubleArray5, doubleArray8 };
        com.operations.Matrix.Matrix matrix10 = new com.operations.Matrix.Matrix(doubleArray9);
        int int11 = matrix10.getCols();
        int int12 = matrix10.getCols();
        int int13 = matrix10.getCols();
        com.operations.Matrix.Matrix[] matrixArray14 = com.operations.Matrix.MatrixDecompositions.luDecomposition(matrix10);
        com.operations.Matrix.Matrix matrix15 = com.operations.Matrix.MatrixOperations.multiply(matrix2, matrix10);
        com.operations.Matrix.Matrix matrix17 = com.operations.Matrix.MatrixTransformations.rotate2D((double) (short) 100);
        boolean boolean19 = com.operations.Matrix.MatrixUtils.compare(matrix10, matrix17, (double) (byte) 0);
        com.operations.Matrix.Matrix[] matrixArray20 = com.operations.Matrix.MatrixDecompositions.luDecomposition(matrix10);
        com.operations.Matrix.Matrix matrix21 = com.operations.Matrix.MatrixOperations.transpose(matrix10);
        com.operations.Matrix.Matrix matrix23 = com.operations.Matrix.MatrixTransformations.rotate2D(35.0d);
        com.operations.Matrix.Matrix matrix24 = com.operations.Matrix.MatrixOperations.subtract(matrix21, matrix23);
        com.operations.Matrix.Matrix matrix27 = com.operations.Matrix.MatrixTransformations.scale2D((double) (-1L), (double) '4');
        com.operations.Matrix.Matrix matrix28 = com.operations.Matrix.MatrixOperations.transpose(matrix27);
        com.operations.Matrix.Matrix matrix29 = com.operations.Matrix.MatrixOperations.subtract(matrix23, matrix27);
        boolean boolean30 = com.operations.Matrix.MatrixUtils.isSymmetric(matrix29);
        com.operations.Matrix.Matrix matrix33 = com.operations.Matrix.MatrixTransformations.project2D((double) 10.0f, (double) 35);
        com.operations.Matrix.Matrix matrix34 = com.operations.Matrix.MatrixOperations.subtract(matrix29, matrix33);
        int int35 = matrix29.getRows();
        org.junit.Assert.assertNotNull(matrix2);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertArrayEquals(doubleArray5, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertArrayEquals(doubleArray8, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 2 + "'", int11 == 2);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 2 + "'", int12 == 2);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 2 + "'", int13 == 2);
        org.junit.Assert.assertNotNull(matrixArray14);
        org.junit.Assert.assertNotNull(matrix15);
        org.junit.Assert.assertNotNull(matrix17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(matrixArray20);
        org.junit.Assert.assertNotNull(matrix21);
        org.junit.Assert.assertNotNull(matrix23);
        org.junit.Assert.assertNotNull(matrix24);
        org.junit.Assert.assertNotNull(matrix27);
        org.junit.Assert.assertNotNull(matrix28);
        org.junit.Assert.assertNotNull(matrix29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(matrix33);
        org.junit.Assert.assertNotNull(matrix34);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 2 + "'", int35 == 2);
    }

    @Test
    public void test3273() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3273");
        double[] doubleArray2 = new double[] { 10, 'a' };
        double[] doubleArray5 = new double[] { 10, 'a' };
        double[][] doubleArray6 = new double[][] { doubleArray2, doubleArray5 };
        com.operations.Matrix.Matrix matrix7 = new com.operations.Matrix.Matrix(doubleArray6);
        int int8 = matrix7.getCols();
        int int9 = matrix7.getCols();
        int int10 = matrix7.getCols();
        com.operations.Matrix.Matrix matrix16 = com.operations.Matrix.MatrixUtils.generateRandomMatrix(100, (int) (byte) 1, (int) '#', (int) '#', 1L);
        double double19 = matrix16.getValue((int) '4', 0);
        double double20 = com.operations.Matrix.MatrixUtils.frobeniusNorm(matrix16);
        boolean boolean21 = com.operations.Matrix.MatrixUtils.isSquare(matrix16);
        boolean boolean23 = com.operations.Matrix.MatrixUtils.compare(matrix7, matrix16, (double) 100L);
        int int24 = matrix7.getCols();
        com.operations.Matrix.Matrix matrix25 = com.operations.Matrix.MatrixOperations.transpose(matrix7);
        com.operations.Matrix.Matrix matrix28 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0L, (double) (byte) 10);
        int int29 = matrix28.getRows();
        com.operations.Matrix.Matrix matrix32 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0L, (double) (byte) 10);
        int int33 = matrix32.getRows();
        com.operations.Matrix.Matrix matrix35 = com.operations.Matrix.MatrixOperations.scalarMultiply(matrix32, (double) 2);
        com.operations.Matrix.Matrix matrix36 = com.operations.Matrix.MatrixOperations.subtract(matrix28, matrix32);
        com.operations.Matrix.Matrix matrix39 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0L, (double) (byte) 10);
        int int40 = matrix39.getRows();
        com.operations.Matrix.Matrix matrix46 = com.operations.Matrix.MatrixUtils.generateRandomMatrix(100, (int) (byte) 1, (int) '#', (int) '#', 1L);
        boolean boolean48 = com.operations.Matrix.MatrixUtils.compare(matrix39, matrix46, (double) 1.0f);
        com.operations.Matrix.Matrix matrix50 = com.operations.Matrix.MatrixOperations.scalarMultiply(matrix39, (double) 1L);
        boolean boolean52 = com.operations.Matrix.MatrixUtils.compare(matrix36, matrix50, 0.0d);
        int int53 = matrix50.getCols();
        com.operations.Matrix.Matrix matrix54 = com.operations.Matrix.MatrixOperations.transpose(matrix50);
        double double55 = com.operations.Matrix.MatrixUtils.frobeniusNorm(matrix54);
        com.operations.Matrix.Matrix matrix56 = com.operations.Matrix.MatrixOperations.add(matrix7, matrix54);
        matrix54.print();
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertArrayEquals(doubleArray2, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertArrayEquals(doubleArray5, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 2 + "'", int8 == 2);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 2 + "'", int9 == 2);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 2 + "'", int10 == 2);
        org.junit.Assert.assertNotNull(matrix16);
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 35.0d + "'", double19 == 35.0d);
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 350.0d + "'", double20 == 350.0d);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 2 + "'", int24 == 2);
        org.junit.Assert.assertNotNull(matrix25);
        org.junit.Assert.assertNotNull(matrix28);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 2 + "'", int29 == 2);
        org.junit.Assert.assertNotNull(matrix32);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 2 + "'", int33 == 2);
        org.junit.Assert.assertNotNull(matrix35);
        org.junit.Assert.assertNotNull(matrix36);
        org.junit.Assert.assertNotNull(matrix39);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 2 + "'", int40 == 2);
        org.junit.Assert.assertNotNull(matrix46);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(matrix50);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 2 + "'", int53 == 2);
        org.junit.Assert.assertNotNull(matrix54);
        org.junit.Assert.assertTrue("'" + double55 + "' != '" + 10.0d + "'", double55 == 10.0d);
        org.junit.Assert.assertNotNull(matrix56);
    }

    @Test
    public void test3274() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3274");
        com.operations.Matrix.Matrix matrix1 = com.operations.Matrix.MatrixTransformations.rotate2D(350.0d);
        boolean boolean2 = com.operations.Matrix.MatrixUtils.isSquare(matrix1);
        int int3 = matrix1.getRows();
        org.junit.Assert.assertNotNull(matrix1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 2 + "'", int3 == 2);
    }

    @Test
    public void test3275() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3275");
        // The following exception was thrown during execution in test generation
        try {
            com.operations.Matrix.Matrix matrix4 = com.operations.Matrix.MatrixUtils.generateRandomMatrix(0, (int) (byte) 1, 2, (int) '4');
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
    }

    @Test
    public void test3276() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3276");
        // The following exception was thrown during execution in test generation
        try {
            com.operations.Matrix.Matrix matrix4 = com.operations.Matrix.MatrixUtils.generateRandomMatrix(0, (int) (short) 1, (int) '4', 32);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
    }

    @Test
    public void test3277() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3277");
        com.operations.Matrix.Matrix matrix2 = com.operations.Matrix.MatrixTransformations.project2D((double) 0L, (double) 0);
        com.operations.Matrix.Matrix[] matrixArray3 = com.operations.Matrix.MatrixDecompositions.luDecomposition(matrix2);
        double[] doubleArray6 = new double[] { 10, 'a' };
        double[] doubleArray9 = new double[] { 10, 'a' };
        double[][] doubleArray10 = new double[][] { doubleArray6, doubleArray9 };
        com.operations.Matrix.Matrix matrix11 = new com.operations.Matrix.Matrix(doubleArray10);
        int int12 = matrix11.getCols();
        com.operations.Matrix.Matrix matrix13 = com.operations.Matrix.MatrixOperations.add(matrix2, matrix11);
        org.junit.Assert.assertNotNull(matrix2);
        org.junit.Assert.assertNotNull(matrixArray3);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertArrayEquals(doubleArray6, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertArrayEquals(doubleArray9, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 2 + "'", int12 == 2);
        org.junit.Assert.assertNotNull(matrix13);
    }

    @Test
    public void test3278() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3278");
        double[] doubleArray2 = new double[] { 10, 'a' };
        double[] doubleArray5 = new double[] { 10, 'a' };
        double[][] doubleArray6 = new double[][] { doubleArray2, doubleArray5 };
        com.operations.Matrix.Matrix matrix7 = new com.operations.Matrix.Matrix(doubleArray6);
        com.operations.Matrix.Matrix matrix8 = new com.operations.Matrix.Matrix(doubleArray6);
        boolean boolean9 = com.operations.Matrix.MatrixUtils.isSquare(matrix8);
        double[] doubleArray12 = new double[] { 10, 'a' };
        double[] doubleArray15 = new double[] { 10, 'a' };
        double[][] doubleArray16 = new double[][] { doubleArray12, doubleArray15 };
        com.operations.Matrix.Matrix matrix17 = new com.operations.Matrix.Matrix(doubleArray16);
        int int18 = matrix17.getCols();
        int int19 = matrix17.getCols();
        matrix17.print();
        double[] doubleArray23 = new double[] { 10, 'a' };
        double[] doubleArray26 = new double[] { 10, 'a' };
        double[][] doubleArray27 = new double[][] { doubleArray23, doubleArray26 };
        com.operations.Matrix.Matrix matrix28 = new com.operations.Matrix.Matrix(doubleArray27);
        boolean boolean30 = com.operations.Matrix.MatrixUtils.compare(matrix17, matrix28, (double) (-1));
        com.operations.Matrix.Matrix matrix31 = com.operations.Matrix.MatrixOperations.subtract(matrix8, matrix28);
        double[] doubleArray34 = new double[] { 10, 'a' };
        double[] doubleArray37 = new double[] { 10, 'a' };
        double[][] doubleArray38 = new double[][] { doubleArray34, doubleArray37 };
        com.operations.Matrix.Matrix matrix39 = new com.operations.Matrix.Matrix(doubleArray38);
        com.operations.Matrix.Matrix matrix40 = new com.operations.Matrix.Matrix(doubleArray38);
        boolean boolean41 = com.operations.Matrix.MatrixUtils.isSquare(matrix40);
        double[] doubleArray44 = new double[] { 10, 'a' };
        double[] doubleArray47 = new double[] { 10, 'a' };
        double[][] doubleArray48 = new double[][] { doubleArray44, doubleArray47 };
        com.operations.Matrix.Matrix matrix49 = new com.operations.Matrix.Matrix(doubleArray48);
        int int50 = matrix49.getCols();
        int int51 = matrix49.getCols();
        matrix49.print();
        double[] doubleArray55 = new double[] { 10, 'a' };
        double[] doubleArray58 = new double[] { 10, 'a' };
        double[][] doubleArray59 = new double[][] { doubleArray55, doubleArray58 };
        com.operations.Matrix.Matrix matrix60 = new com.operations.Matrix.Matrix(doubleArray59);
        boolean boolean62 = com.operations.Matrix.MatrixUtils.compare(matrix49, matrix60, (double) (-1));
        com.operations.Matrix.Matrix matrix63 = com.operations.Matrix.MatrixOperations.subtract(matrix40, matrix60);
        com.operations.Matrix.Matrix matrix64 = com.operations.Matrix.MatrixOperations.add(matrix8, matrix63);
        com.operations.Matrix.Matrix matrix67 = com.operations.Matrix.MatrixTransformations.scale2D((double) 100.0f, 146.4308710620817d);
        com.operations.Matrix.Matrix matrix68 = com.operations.Matrix.MatrixOperations.subtract(matrix64, matrix67);
        boolean boolean69 = com.operations.Matrix.MatrixUtils.isSquare(matrix68);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertArrayEquals(doubleArray2, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertArrayEquals(doubleArray5, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertArrayEquals(doubleArray12, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertArrayEquals(doubleArray15, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 2 + "'", int18 == 2);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 2 + "'", int19 == 2);
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertArrayEquals(doubleArray23, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertArrayEquals(doubleArray26, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(matrix31);
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertArrayEquals(doubleArray34, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertArrayEquals(doubleArray37, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertArrayEquals(doubleArray44, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertArrayEquals(doubleArray47, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 2 + "'", int50 == 2);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 2 + "'", int51 == 2);
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertArrayEquals(doubleArray55, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray58);
        org.junit.Assert.assertArrayEquals(doubleArray58, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray59);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertNotNull(matrix63);
        org.junit.Assert.assertNotNull(matrix64);
        org.junit.Assert.assertNotNull(matrix67);
        org.junit.Assert.assertNotNull(matrix68);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + true + "'", boolean69 == true);
    }

    @Test
    public void test3279() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3279");
        com.operations.Matrix.Matrix matrix2 = com.operations.Matrix.MatrixTransformations.project2D(10.344080432788601d, (double) 97);
        com.operations.Matrix.Matrix matrix4 = com.operations.Matrix.MatrixTransformations.rotate2D((double) (short) 100);
        double[] doubleArray7 = new double[] { 137.90576492663388d, (byte) -1 };
        double[] doubleArray8 = com.operations.Matrix.MatrixSolver.solveGaussian(matrix4, doubleArray7);
        com.operations.Matrix.Matrix matrix11 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0L, (double) (byte) 10);
        double[] doubleArray14 = new double[] { 10, 'a' };
        double[] doubleArray17 = new double[] { 10, 'a' };
        double[][] doubleArray18 = new double[][] { doubleArray14, doubleArray17 };
        com.operations.Matrix.Matrix matrix19 = new com.operations.Matrix.Matrix(doubleArray18);
        int int20 = matrix19.getCols();
        int int21 = matrix19.getCols();
        int int22 = matrix19.getCols();
        com.operations.Matrix.Matrix[] matrixArray23 = com.operations.Matrix.MatrixDecompositions.luDecomposition(matrix19);
        com.operations.Matrix.Matrix matrix24 = com.operations.Matrix.MatrixOperations.multiply(matrix11, matrix19);
        boolean boolean26 = com.operations.Matrix.MatrixUtils.compare(matrix4, matrix11, (double) (-1L));
        boolean boolean27 = com.operations.Matrix.MatrixUtils.isSymmetric(matrix4);
        int int28 = matrix4.getCols();
        com.operations.Matrix.Matrix[] matrixArray29 = com.operations.Matrix.MatrixDecompositions.luDecomposition(matrix4);
        double double30 = com.operations.Matrix.MatrixUtils.frobeniusNorm(matrix4);
        double double31 = com.operations.Matrix.MatrixUtils.frobeniusNorm(matrix4);
        double[][] doubleArray32 = matrix4.getData();
        com.operations.Matrix.Matrix matrix33 = new com.operations.Matrix.Matrix(doubleArray32);
        com.operations.Matrix.Matrix matrix34 = new com.operations.Matrix.Matrix(doubleArray32);
        com.operations.Matrix.Matrix matrix35 = com.operations.Matrix.MatrixOperations.multiply(matrix2, matrix34);
        com.operations.Matrix.Matrix matrix38 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0L, (double) (byte) 10);
        int int39 = matrix38.getRows();
        com.operations.Matrix.Matrix matrix41 = com.operations.Matrix.MatrixOperations.scalarMultiply(matrix38, (double) 2);
        double double42 = com.operations.Matrix.MatrixUtils.frobeniusNorm(matrix38);
        com.operations.Matrix.Matrix matrix43 = com.operations.Matrix.MatrixOperations.subtract(matrix35, matrix38);
        // The following exception was thrown during execution in test generation
        try {
            com.operations.Matrix.Matrix matrix44 = com.operations.Matrix.MatrixDecompositions.choleskyDecomposition(matrix38);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Matrix is not positive definite.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(matrix2);
        org.junit.Assert.assertNotNull(matrix4);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertArrayEquals(doubleArray7, new double[] { 137.90576492663388d, (-1.0d) }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertArrayEquals(doubleArray8, new double[] { (-24.931892522286255d), (-135.63701830716116d) }, 1.0E-15);
        org.junit.Assert.assertNotNull(matrix11);
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertArrayEquals(doubleArray14, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertArrayEquals(doubleArray17, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 2 + "'", int20 == 2);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 2 + "'", int21 == 2);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 2 + "'", int22 == 2);
        org.junit.Assert.assertNotNull(matrixArray23);
        org.junit.Assert.assertNotNull(matrix24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 2 + "'", int28 == 2);
        org.junit.Assert.assertNotNull(matrixArray29);
        org.junit.Assert.assertTrue("'" + double30 + "' != '" + 1.414213562373095d + "'", double30 == 1.414213562373095d);
        org.junit.Assert.assertTrue("'" + double31 + "' != '" + 1.414213562373095d + "'", double31 == 1.414213562373095d);
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertNotNull(matrix35);
        org.junit.Assert.assertNotNull(matrix38);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 2 + "'", int39 == 2);
        org.junit.Assert.assertNotNull(matrix41);
        org.junit.Assert.assertTrue("'" + double42 + "' != '" + 10.0d + "'", double42 == 10.0d);
        org.junit.Assert.assertNotNull(matrix43);
    }

    @Test
    public void test3280() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3280");
        double[] doubleArray2 = new double[] { 10, 'a' };
        double[] doubleArray5 = new double[] { 10, 'a' };
        double[][] doubleArray6 = new double[][] { doubleArray2, doubleArray5 };
        com.operations.Matrix.Matrix matrix7 = new com.operations.Matrix.Matrix(doubleArray6);
        com.operations.Matrix.Matrix matrix8 = new com.operations.Matrix.Matrix(doubleArray6);
        com.operations.Matrix.Matrix[] matrixArray9 = com.operations.Matrix.MatrixDecompositions.luDecomposition(matrix8);
        com.operations.Matrix.Matrix matrix12 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0, (double) 100L);
        com.operations.Matrix.Matrix matrix13 = com.operations.Matrix.MatrixOperations.subtract(matrix8, matrix12);
        boolean boolean14 = com.operations.Matrix.MatrixUtils.isSymmetric(matrix8);
        com.operations.Matrix.Matrix matrix17 = com.operations.Matrix.MatrixTransformations.project2D(0.0d, (double) 0);
        double[][] doubleArray18 = matrix17.getData();
        com.operations.Matrix.Matrix matrix21 = com.operations.Matrix.MatrixTransformations.project2D((double) ' ', 0.0d);
        double[] doubleArray24 = new double[] { 10, 'a' };
        double[] doubleArray27 = new double[] { 10, 'a' };
        double[][] doubleArray28 = new double[][] { doubleArray24, doubleArray27 };
        com.operations.Matrix.Matrix matrix29 = new com.operations.Matrix.Matrix(doubleArray28);
        int int30 = matrix29.getCols();
        boolean boolean31 = com.operations.Matrix.MatrixUtils.isSquare(matrix29);
        com.operations.Matrix.Matrix matrix32 = com.operations.Matrix.MatrixOperations.transpose(matrix29);
        int int33 = matrix32.getRows();
        com.operations.Matrix.Matrix matrix36 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0L, (double) (byte) 10);
        double[] doubleArray39 = new double[] { 10, 'a' };
        double[] doubleArray42 = new double[] { 10, 'a' };
        double[][] doubleArray43 = new double[][] { doubleArray39, doubleArray42 };
        com.operations.Matrix.Matrix matrix44 = new com.operations.Matrix.Matrix(doubleArray43);
        int int45 = matrix44.getCols();
        int int46 = matrix44.getCols();
        int int47 = matrix44.getCols();
        com.operations.Matrix.Matrix[] matrixArray48 = com.operations.Matrix.MatrixDecompositions.luDecomposition(matrix44);
        com.operations.Matrix.Matrix matrix49 = com.operations.Matrix.MatrixOperations.multiply(matrix36, matrix44);
        com.operations.Matrix.Matrix matrix51 = com.operations.Matrix.MatrixTransformations.rotate2D((double) (short) 100);
        boolean boolean53 = com.operations.Matrix.MatrixUtils.compare(matrix44, matrix51, (double) (byte) 0);
        com.operations.Matrix.Matrix matrix54 = com.operations.Matrix.MatrixOperations.multiply(matrix32, matrix44);
        com.operations.Matrix.Matrix matrix55 = com.operations.Matrix.MatrixOperations.add(matrix21, matrix44);
        com.operations.Matrix.Matrix matrix56 = com.operations.Matrix.MatrixOperations.transpose(matrix21);
        boolean boolean58 = com.operations.Matrix.MatrixUtils.compare(matrix17, matrix21, (double) 0L);
        com.operations.Matrix.Matrix matrix59 = com.operations.Matrix.MatrixOperations.multiply(matrix8, matrix17);
        int int60 = matrix59.getCols();
        java.lang.Class<?> wildcardClass61 = matrix59.getClass();
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertArrayEquals(doubleArray2, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertArrayEquals(doubleArray5, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertNotNull(matrixArray9);
        org.junit.Assert.assertNotNull(matrix12);
        org.junit.Assert.assertNotNull(matrix13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(matrix17);
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertNotNull(matrix21);
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertArrayEquals(doubleArray24, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertArrayEquals(doubleArray27, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 2 + "'", int30 == 2);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertNotNull(matrix32);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 2 + "'", int33 == 2);
        org.junit.Assert.assertNotNull(matrix36);
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertArrayEquals(doubleArray39, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertArrayEquals(doubleArray42, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 2 + "'", int45 == 2);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 2 + "'", int46 == 2);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 2 + "'", int47 == 2);
        org.junit.Assert.assertNotNull(matrixArray48);
        org.junit.Assert.assertNotNull(matrix49);
        org.junit.Assert.assertNotNull(matrix51);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(matrix54);
        org.junit.Assert.assertNotNull(matrix55);
        org.junit.Assert.assertNotNull(matrix56);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(matrix59);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 2 + "'", int60 == 2);
        org.junit.Assert.assertNotNull(wildcardClass61);
    }

    @Test
    public void test3281() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3281");
        com.operations.Matrix.Matrix matrix2 = new com.operations.Matrix.Matrix((int) (short) 1, (int) ' ');
    }

    @Test
    public void test3282() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3282");
        com.operations.Matrix.Matrix matrix1 = com.operations.Matrix.MatrixTransformations.rotate2D(100.0d);
        int int2 = matrix1.getCols();
        double[][] doubleArray3 = matrix1.getData();
        com.operations.Matrix.Matrix matrix4 = new com.operations.Matrix.Matrix(doubleArray3);
        com.operations.Matrix.Matrix matrix5 = new com.operations.Matrix.Matrix(doubleArray3);
        com.operations.Matrix.Matrix matrix8 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0L, (double) (byte) 10);
        double[] doubleArray11 = new double[] { 10, 'a' };
        double[] doubleArray14 = new double[] { 10, 'a' };
        double[][] doubleArray15 = new double[][] { doubleArray11, doubleArray14 };
        com.operations.Matrix.Matrix matrix16 = new com.operations.Matrix.Matrix(doubleArray15);
        int int17 = matrix16.getCols();
        int int18 = matrix16.getCols();
        int int19 = matrix16.getCols();
        com.operations.Matrix.Matrix[] matrixArray20 = com.operations.Matrix.MatrixDecompositions.luDecomposition(matrix16);
        com.operations.Matrix.Matrix matrix21 = com.operations.Matrix.MatrixOperations.multiply(matrix8, matrix16);
        int int22 = matrix16.getRows();
        int int23 = matrix16.getCols();
        com.operations.Matrix.Matrix matrix26 = com.operations.Matrix.MatrixTransformations.project2D((double) (-1L), (double) (short) 100);
        com.operations.Matrix.Matrix matrix27 = com.operations.Matrix.MatrixOperations.subtract(matrix16, matrix26);
        com.operations.Matrix.Matrix matrix30 = com.operations.Matrix.MatrixTransformations.project2D(0.0d, (double) 0);
        double[][] doubleArray31 = matrix30.getData();
        com.operations.Matrix.Matrix matrix34 = com.operations.Matrix.MatrixTransformations.project2D((double) ' ', 0.0d);
        double[] doubleArray37 = new double[] { 10, 'a' };
        double[] doubleArray40 = new double[] { 10, 'a' };
        double[][] doubleArray41 = new double[][] { doubleArray37, doubleArray40 };
        com.operations.Matrix.Matrix matrix42 = new com.operations.Matrix.Matrix(doubleArray41);
        int int43 = matrix42.getCols();
        boolean boolean44 = com.operations.Matrix.MatrixUtils.isSquare(matrix42);
        com.operations.Matrix.Matrix matrix45 = com.operations.Matrix.MatrixOperations.transpose(matrix42);
        int int46 = matrix45.getRows();
        com.operations.Matrix.Matrix matrix49 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0L, (double) (byte) 10);
        double[] doubleArray52 = new double[] { 10, 'a' };
        double[] doubleArray55 = new double[] { 10, 'a' };
        double[][] doubleArray56 = new double[][] { doubleArray52, doubleArray55 };
        com.operations.Matrix.Matrix matrix57 = new com.operations.Matrix.Matrix(doubleArray56);
        int int58 = matrix57.getCols();
        int int59 = matrix57.getCols();
        int int60 = matrix57.getCols();
        com.operations.Matrix.Matrix[] matrixArray61 = com.operations.Matrix.MatrixDecompositions.luDecomposition(matrix57);
        com.operations.Matrix.Matrix matrix62 = com.operations.Matrix.MatrixOperations.multiply(matrix49, matrix57);
        com.operations.Matrix.Matrix matrix64 = com.operations.Matrix.MatrixTransformations.rotate2D((double) (short) 100);
        boolean boolean66 = com.operations.Matrix.MatrixUtils.compare(matrix57, matrix64, (double) (byte) 0);
        com.operations.Matrix.Matrix matrix67 = com.operations.Matrix.MatrixOperations.multiply(matrix45, matrix57);
        com.operations.Matrix.Matrix matrix68 = com.operations.Matrix.MatrixOperations.add(matrix34, matrix57);
        com.operations.Matrix.Matrix matrix69 = com.operations.Matrix.MatrixOperations.transpose(matrix34);
        boolean boolean71 = com.operations.Matrix.MatrixUtils.compare(matrix30, matrix34, (double) 0L);
        com.operations.Matrix.Matrix matrix72 = com.operations.Matrix.MatrixOperations.multiply(matrix27, matrix34);
        boolean boolean74 = com.operations.Matrix.MatrixUtils.compare(matrix5, matrix72, (double) 'a');
        org.junit.Assert.assertNotNull(matrix1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 2 + "'", int2 == 2);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertNotNull(matrix8);
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertArrayEquals(doubleArray11, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertArrayEquals(doubleArray14, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 2 + "'", int17 == 2);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 2 + "'", int18 == 2);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 2 + "'", int19 == 2);
        org.junit.Assert.assertNotNull(matrixArray20);
        org.junit.Assert.assertNotNull(matrix21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 2 + "'", int22 == 2);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 2 + "'", int23 == 2);
        org.junit.Assert.assertNotNull(matrix26);
        org.junit.Assert.assertNotNull(matrix27);
        org.junit.Assert.assertNotNull(matrix30);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertNotNull(matrix34);
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertArrayEquals(doubleArray37, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertArrayEquals(doubleArray40, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 2 + "'", int43 == 2);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertNotNull(matrix45);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 2 + "'", int46 == 2);
        org.junit.Assert.assertNotNull(matrix49);
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertArrayEquals(doubleArray52, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertArrayEquals(doubleArray55, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray56);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 2 + "'", int58 == 2);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 2 + "'", int59 == 2);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 2 + "'", int60 == 2);
        org.junit.Assert.assertNotNull(matrixArray61);
        org.junit.Assert.assertNotNull(matrix62);
        org.junit.Assert.assertNotNull(matrix64);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertNotNull(matrix67);
        org.junit.Assert.assertNotNull(matrix68);
        org.junit.Assert.assertNotNull(matrix69);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertNotNull(matrix72);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
    }

    @Test
    public void test3283() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3283");
        com.operations.Matrix.Matrix matrix2 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0L, (double) (byte) 10);
        int int3 = matrix2.getRows();
        com.operations.Matrix.Matrix matrix6 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0L, (double) (byte) 10);
        int int7 = matrix6.getRows();
        com.operations.Matrix.Matrix matrix9 = com.operations.Matrix.MatrixOperations.scalarMultiply(matrix6, (double) 2);
        com.operations.Matrix.Matrix matrix10 = com.operations.Matrix.MatrixOperations.subtract(matrix2, matrix6);
        com.operations.Matrix.Matrix matrix13 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0L, (double) (byte) 10);
        int int14 = matrix13.getRows();
        com.operations.Matrix.Matrix matrix20 = com.operations.Matrix.MatrixUtils.generateRandomMatrix(100, (int) (byte) 1, (int) '#', (int) '#', 1L);
        boolean boolean22 = com.operations.Matrix.MatrixUtils.compare(matrix13, matrix20, (double) 1.0f);
        com.operations.Matrix.Matrix matrix24 = com.operations.Matrix.MatrixOperations.scalarMultiply(matrix13, (double) 1L);
        boolean boolean26 = com.operations.Matrix.MatrixUtils.compare(matrix10, matrix24, 0.0d);
        int int27 = matrix24.getCols();
        com.operations.Matrix.Matrix[] matrixArray28 = com.operations.Matrix.MatrixDecompositions.luDecomposition(matrix24);
        com.operations.Matrix.Matrix matrix31 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0L, (double) (byte) 10);
        int int32 = matrix31.getRows();
        com.operations.Matrix.Matrix matrix34 = com.operations.Matrix.MatrixOperations.scalarMultiply(matrix31, (double) 2);
        double double35 = com.operations.Matrix.MatrixUtils.frobeniusNorm(matrix31);
        int int36 = matrix31.getRows();
        com.operations.Matrix.Matrix matrix37 = com.operations.Matrix.MatrixOperations.add(matrix24, matrix31);
        int int38 = matrix37.getRows();
        // The following exception was thrown during execution in test generation
        try {
            com.operations.Matrix.Matrix matrix39 = com.operations.Matrix.MatrixDecompositions.choleskyDecomposition(matrix37);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Matrix is not positive definite.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(matrix2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 2 + "'", int3 == 2);
        org.junit.Assert.assertNotNull(matrix6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 2 + "'", int7 == 2);
        org.junit.Assert.assertNotNull(matrix9);
        org.junit.Assert.assertNotNull(matrix10);
        org.junit.Assert.assertNotNull(matrix13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 2 + "'", int14 == 2);
        org.junit.Assert.assertNotNull(matrix20);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(matrix24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 2 + "'", int27 == 2);
        org.junit.Assert.assertNotNull(matrixArray28);
        org.junit.Assert.assertNotNull(matrix31);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 2 + "'", int32 == 2);
        org.junit.Assert.assertNotNull(matrix34);
        org.junit.Assert.assertTrue("'" + double35 + "' != '" + 10.0d + "'", double35 == 10.0d);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 2 + "'", int36 == 2);
        org.junit.Assert.assertNotNull(matrix37);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 2 + "'", int38 == 2);
    }

    @Test
    public void test3284() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3284");
        com.operations.Matrix.Matrix matrix1 = com.operations.Matrix.MatrixTransformations.rotate2D((double) (short) 100);
        double[] doubleArray4 = new double[] { 137.90576492663388d, (byte) -1 };
        double[] doubleArray5 = com.operations.Matrix.MatrixSolver.solveGaussian(matrix1, doubleArray4);
        com.operations.Matrix.Matrix matrix8 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0L, (double) (byte) 10);
        double[] doubleArray11 = new double[] { 10, 'a' };
        double[] doubleArray14 = new double[] { 10, 'a' };
        double[][] doubleArray15 = new double[][] { doubleArray11, doubleArray14 };
        com.operations.Matrix.Matrix matrix16 = new com.operations.Matrix.Matrix(doubleArray15);
        int int17 = matrix16.getCols();
        int int18 = matrix16.getCols();
        int int19 = matrix16.getCols();
        com.operations.Matrix.Matrix[] matrixArray20 = com.operations.Matrix.MatrixDecompositions.luDecomposition(matrix16);
        com.operations.Matrix.Matrix matrix21 = com.operations.Matrix.MatrixOperations.multiply(matrix8, matrix16);
        boolean boolean23 = com.operations.Matrix.MatrixUtils.compare(matrix1, matrix8, (double) (-1L));
        double[] doubleArray26 = new double[] { 10, 'a' };
        double[] doubleArray29 = new double[] { 10, 'a' };
        double[][] doubleArray30 = new double[][] { doubleArray26, doubleArray29 };
        com.operations.Matrix.Matrix matrix31 = new com.operations.Matrix.Matrix(doubleArray30);
        int int32 = matrix31.getCols();
        int int33 = matrix31.getCols();
        boolean boolean34 = com.operations.Matrix.MatrixUtils.isSquare(matrix31);
        com.operations.Matrix.Matrix matrix35 = com.operations.Matrix.MatrixDecompositions.choleskyDecomposition(matrix31);
        com.operations.Matrix.Matrix matrix38 = com.operations.Matrix.MatrixTransformations.project2D(0.0d, (double) 0);
        com.operations.Matrix.Matrix matrix39 = com.operations.Matrix.MatrixOperations.subtract(matrix35, matrix38);
        com.operations.Matrix.Matrix matrix41 = com.operations.Matrix.MatrixOperations.scalarMultiply(matrix35, (double) 1.0f);
        com.operations.Matrix.Matrix matrix42 = com.operations.Matrix.MatrixOperations.subtract(matrix1, matrix41);
        com.operations.Matrix.Matrix matrix43 = com.operations.Matrix.MatrixOperations.transpose(matrix41);
        com.operations.Matrix.Matrix[] matrixArray44 = com.operations.Matrix.MatrixDecompositions.luDecomposition(matrix43);
        boolean boolean45 = com.operations.Matrix.MatrixUtils.isSquare(matrix43);
        org.junit.Assert.assertNotNull(matrix1);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertArrayEquals(doubleArray4, new double[] { 137.90576492663388d, (-1.0d) }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertArrayEquals(doubleArray5, new double[] { (-24.931892522286255d), (-135.63701830716116d) }, 1.0E-15);
        org.junit.Assert.assertNotNull(matrix8);
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertArrayEquals(doubleArray11, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertArrayEquals(doubleArray14, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 2 + "'", int17 == 2);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 2 + "'", int18 == 2);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 2 + "'", int19 == 2);
        org.junit.Assert.assertNotNull(matrixArray20);
        org.junit.Assert.assertNotNull(matrix21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertArrayEquals(doubleArray26, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertArrayEquals(doubleArray29, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 2 + "'", int32 == 2);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 2 + "'", int33 == 2);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertNotNull(matrix35);
        org.junit.Assert.assertNotNull(matrix38);
        org.junit.Assert.assertNotNull(matrix39);
        org.junit.Assert.assertNotNull(matrix41);
        org.junit.Assert.assertNotNull(matrix42);
        org.junit.Assert.assertNotNull(matrix43);
        org.junit.Assert.assertNotNull(matrixArray44);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
    }

    @Test
    public void test3285() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3285");
        com.operations.Matrix.Matrix matrix2 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0L, (double) (byte) 10);
        double[] doubleArray5 = new double[] { 10, 'a' };
        double[] doubleArray8 = new double[] { 10, 'a' };
        double[][] doubleArray9 = new double[][] { doubleArray5, doubleArray8 };
        com.operations.Matrix.Matrix matrix10 = new com.operations.Matrix.Matrix(doubleArray9);
        int int11 = matrix10.getCols();
        int int12 = matrix10.getCols();
        int int13 = matrix10.getCols();
        com.operations.Matrix.Matrix[] matrixArray14 = com.operations.Matrix.MatrixDecompositions.luDecomposition(matrix10);
        com.operations.Matrix.Matrix matrix15 = com.operations.Matrix.MatrixOperations.multiply(matrix2, matrix10);
        com.operations.Matrix.Matrix matrix17 = com.operations.Matrix.MatrixTransformations.rotate2D((double) (short) 100);
        boolean boolean19 = com.operations.Matrix.MatrixUtils.compare(matrix10, matrix17, (double) (byte) 0);
        double[] doubleArray22 = new double[] { 10, 'a' };
        double[] doubleArray25 = new double[] { 10, 'a' };
        double[][] doubleArray26 = new double[][] { doubleArray22, doubleArray25 };
        com.operations.Matrix.Matrix matrix27 = new com.operations.Matrix.Matrix(doubleArray26);
        com.operations.Matrix.Matrix matrix28 = new com.operations.Matrix.Matrix(doubleArray26);
        com.operations.Matrix.Matrix matrix29 = new com.operations.Matrix.Matrix(doubleArray26);
        boolean boolean31 = com.operations.Matrix.MatrixUtils.compare(matrix10, matrix29, (double) (-1));
        com.operations.Matrix.Matrix matrix33 = com.operations.Matrix.MatrixTransformations.rotate2D((double) (short) 100);
        double[] doubleArray36 = new double[] { 137.90576492663388d, (byte) -1 };
        double[] doubleArray37 = com.operations.Matrix.MatrixSolver.solveGaussian(matrix33, doubleArray36);
        com.operations.Matrix.Matrix matrix40 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0L, (double) (byte) 10);
        double[] doubleArray43 = new double[] { 10, 'a' };
        double[] doubleArray46 = new double[] { 10, 'a' };
        double[][] doubleArray47 = new double[][] { doubleArray43, doubleArray46 };
        com.operations.Matrix.Matrix matrix48 = new com.operations.Matrix.Matrix(doubleArray47);
        int int49 = matrix48.getCols();
        int int50 = matrix48.getCols();
        int int51 = matrix48.getCols();
        com.operations.Matrix.Matrix[] matrixArray52 = com.operations.Matrix.MatrixDecompositions.luDecomposition(matrix48);
        com.operations.Matrix.Matrix matrix53 = com.operations.Matrix.MatrixOperations.multiply(matrix40, matrix48);
        boolean boolean55 = com.operations.Matrix.MatrixUtils.compare(matrix33, matrix40, (double) (-1L));
        com.operations.Matrix.Matrix matrix56 = com.operations.Matrix.MatrixOperations.add(matrix29, matrix40);
        boolean boolean57 = com.operations.Matrix.MatrixUtils.isSymmetric(matrix56);
        org.junit.Assert.assertNotNull(matrix2);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertArrayEquals(doubleArray5, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertArrayEquals(doubleArray8, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 2 + "'", int11 == 2);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 2 + "'", int12 == 2);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 2 + "'", int13 == 2);
        org.junit.Assert.assertNotNull(matrixArray14);
        org.junit.Assert.assertNotNull(matrix15);
        org.junit.Assert.assertNotNull(matrix17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertArrayEquals(doubleArray22, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertArrayEquals(doubleArray25, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(matrix33);
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertArrayEquals(doubleArray36, new double[] { 137.90576492663388d, (-1.0d) }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertArrayEquals(doubleArray37, new double[] { (-24.931892522286255d), (-135.63701830716116d) }, 1.0E-15);
        org.junit.Assert.assertNotNull(matrix40);
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertArrayEquals(doubleArray43, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray46);
        org.junit.Assert.assertArrayEquals(doubleArray46, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 2 + "'", int49 == 2);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 2 + "'", int50 == 2);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 2 + "'", int51 == 2);
        org.junit.Assert.assertNotNull(matrixArray52);
        org.junit.Assert.assertNotNull(matrix53);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNotNull(matrix56);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
    }

    @Test
    public void test3286() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3286");
        com.operations.Matrix.Matrix matrix1 = com.operations.Matrix.MatrixTransformations.rotate2D((double) 1.0f);
        com.operations.Matrix.Matrix matrix4 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0L, (double) (byte) 10);
        int int5 = matrix4.getRows();
        com.operations.Matrix.Matrix matrix7 = com.operations.Matrix.MatrixOperations.scalarMultiply(matrix4, (double) 2);
        boolean boolean9 = com.operations.Matrix.MatrixUtils.compare(matrix1, matrix7, (double) 10.0f);
        double[] doubleArray12 = new double[] { 10, 'a' };
        double[] doubleArray15 = new double[] { 10, 'a' };
        double[][] doubleArray16 = new double[][] { doubleArray12, doubleArray15 };
        com.operations.Matrix.Matrix matrix17 = new com.operations.Matrix.Matrix(doubleArray16);
        com.operations.Matrix.Matrix matrix18 = new com.operations.Matrix.Matrix(doubleArray16);
        boolean boolean19 = com.operations.Matrix.MatrixUtils.isSquare(matrix18);
        double[] doubleArray22 = new double[] { 10, 'a' };
        double[] doubleArray25 = new double[] { 10, 'a' };
        double[][] doubleArray26 = new double[][] { doubleArray22, doubleArray25 };
        com.operations.Matrix.Matrix matrix27 = new com.operations.Matrix.Matrix(doubleArray26);
        int int28 = matrix27.getCols();
        int int29 = matrix27.getCols();
        matrix27.print();
        double[] doubleArray33 = new double[] { 10, 'a' };
        double[] doubleArray36 = new double[] { 10, 'a' };
        double[][] doubleArray37 = new double[][] { doubleArray33, doubleArray36 };
        com.operations.Matrix.Matrix matrix38 = new com.operations.Matrix.Matrix(doubleArray37);
        boolean boolean40 = com.operations.Matrix.MatrixUtils.compare(matrix27, matrix38, (double) (-1));
        com.operations.Matrix.Matrix matrix41 = com.operations.Matrix.MatrixOperations.subtract(matrix18, matrix38);
        com.operations.Matrix.Matrix matrix43 = com.operations.Matrix.MatrixOperations.scalarMultiply(matrix18, (double) 0.0f);
        com.operations.Matrix.Matrix matrix44 = com.operations.Matrix.MatrixOperations.transpose(matrix18);
        com.operations.Matrix.Matrix matrix45 = com.operations.Matrix.MatrixOperations.transpose(matrix44);
        com.operations.Matrix.Matrix matrix46 = com.operations.Matrix.MatrixOperations.multiply(matrix7, matrix45);
        com.operations.Matrix.Matrix matrix48 = com.operations.Matrix.MatrixTransformations.rotate2D((double) (short) 100);
        double[] doubleArray51 = new double[] { 137.90576492663388d, (byte) -1 };
        double[] doubleArray52 = com.operations.Matrix.MatrixSolver.solveGaussian(matrix48, doubleArray51);
        com.operations.Matrix.Matrix matrix55 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0L, (double) (byte) 10);
        double[] doubleArray58 = new double[] { 10, 'a' };
        double[] doubleArray61 = new double[] { 10, 'a' };
        double[][] doubleArray62 = new double[][] { doubleArray58, doubleArray61 };
        com.operations.Matrix.Matrix matrix63 = new com.operations.Matrix.Matrix(doubleArray62);
        int int64 = matrix63.getCols();
        int int65 = matrix63.getCols();
        int int66 = matrix63.getCols();
        com.operations.Matrix.Matrix[] matrixArray67 = com.operations.Matrix.MatrixDecompositions.luDecomposition(matrix63);
        com.operations.Matrix.Matrix matrix68 = com.operations.Matrix.MatrixOperations.multiply(matrix55, matrix63);
        boolean boolean70 = com.operations.Matrix.MatrixUtils.compare(matrix48, matrix55, (double) (-1L));
        double[][] doubleArray71 = matrix48.getData();
        com.operations.Matrix.Matrix matrix74 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0L, (double) 10L);
        boolean boolean76 = com.operations.Matrix.MatrixUtils.compare(matrix48, matrix74, 146.4308710620817d);
        com.operations.Matrix.Matrix matrix77 = com.operations.Matrix.MatrixOperations.subtract(matrix45, matrix74);
        com.operations.Matrix.Matrix matrix79 = com.operations.Matrix.MatrixOperations.scalarMultiply(matrix77, (double) 0.0f);
        com.operations.Matrix.Matrix matrix81 = com.operations.Matrix.MatrixTransformations.rotate2D(100.0d);
        int int82 = matrix81.getCols();
        com.operations.Matrix.Matrix matrix85 = com.operations.Matrix.MatrixTransformations.project2D((double) 1, 364.0054944640259d);
        com.operations.Matrix.Matrix matrix86 = com.operations.Matrix.MatrixOperations.multiply(matrix81, matrix85);
        com.operations.Matrix.Matrix matrix87 = com.operations.Matrix.MatrixOperations.add(matrix79, matrix85);
        com.operations.Matrix.Matrix matrix89 = com.operations.Matrix.MatrixOperations.scalarMultiply(matrix87, 1363.6076983299943d);
        boolean boolean90 = com.operations.Matrix.MatrixUtils.isSquare(matrix89);
        org.junit.Assert.assertNotNull(matrix1);
        org.junit.Assert.assertNotNull(matrix4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 2 + "'", int5 == 2);
        org.junit.Assert.assertNotNull(matrix7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertArrayEquals(doubleArray12, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertArrayEquals(doubleArray15, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertArrayEquals(doubleArray22, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertArrayEquals(doubleArray25, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 2 + "'", int28 == 2);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 2 + "'", int29 == 2);
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertArrayEquals(doubleArray33, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertArrayEquals(doubleArray36, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(matrix41);
        org.junit.Assert.assertNotNull(matrix43);
        org.junit.Assert.assertNotNull(matrix44);
        org.junit.Assert.assertNotNull(matrix45);
        org.junit.Assert.assertNotNull(matrix46);
        org.junit.Assert.assertNotNull(matrix48);
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertArrayEquals(doubleArray51, new double[] { 137.90576492663388d, (-1.0d) }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertArrayEquals(doubleArray52, new double[] { (-24.931892522286255d), (-135.63701830716116d) }, 1.0E-15);
        org.junit.Assert.assertNotNull(matrix55);
        org.junit.Assert.assertNotNull(doubleArray58);
        org.junit.Assert.assertArrayEquals(doubleArray58, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray61);
        org.junit.Assert.assertArrayEquals(doubleArray61, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray62);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 2 + "'", int64 == 2);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 2 + "'", int65 == 2);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 2 + "'", int66 == 2);
        org.junit.Assert.assertNotNull(matrixArray67);
        org.junit.Assert.assertNotNull(matrix68);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertNotNull(doubleArray71);
        org.junit.Assert.assertNotNull(matrix74);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + true + "'", boolean76 == true);
        org.junit.Assert.assertNotNull(matrix77);
        org.junit.Assert.assertNotNull(matrix79);
        org.junit.Assert.assertNotNull(matrix81);
        org.junit.Assert.assertTrue("'" + int82 + "' != '" + 2 + "'", int82 == 2);
        org.junit.Assert.assertNotNull(matrix85);
        org.junit.Assert.assertNotNull(matrix86);
        org.junit.Assert.assertNotNull(matrix87);
        org.junit.Assert.assertNotNull(matrix89);
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + true + "'", boolean90 == true);
    }

    @Test
    public void test3287() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3287");
        com.operations.Matrix.Matrix matrix2 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0L, (double) (byte) 10);
        double[] doubleArray5 = new double[] { 10, 'a' };
        double[] doubleArray8 = new double[] { 10, 'a' };
        double[][] doubleArray9 = new double[][] { doubleArray5, doubleArray8 };
        com.operations.Matrix.Matrix matrix10 = new com.operations.Matrix.Matrix(doubleArray9);
        int int11 = matrix10.getCols();
        int int12 = matrix10.getCols();
        int int13 = matrix10.getCols();
        com.operations.Matrix.Matrix[] matrixArray14 = com.operations.Matrix.MatrixDecompositions.luDecomposition(matrix10);
        com.operations.Matrix.Matrix matrix15 = com.operations.Matrix.MatrixOperations.multiply(matrix2, matrix10);
        com.operations.Matrix.Matrix matrix17 = com.operations.Matrix.MatrixTransformations.rotate2D((double) (short) 100);
        boolean boolean19 = com.operations.Matrix.MatrixUtils.compare(matrix10, matrix17, (double) (byte) 0);
        com.operations.Matrix.Matrix[] matrixArray20 = com.operations.Matrix.MatrixDecompositions.luDecomposition(matrix10);
        com.operations.Matrix.Matrix matrix21 = com.operations.Matrix.MatrixOperations.transpose(matrix10);
        com.operations.Matrix.Matrix matrix24 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0L, (double) (byte) 10);
        int int25 = matrix24.getRows();
        com.operations.Matrix.Matrix matrix28 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0L, (double) (byte) 10);
        int int29 = matrix28.getRows();
        com.operations.Matrix.Matrix matrix31 = com.operations.Matrix.MatrixOperations.scalarMultiply(matrix28, (double) 2);
        com.operations.Matrix.Matrix matrix32 = com.operations.Matrix.MatrixOperations.subtract(matrix24, matrix28);
        boolean boolean34 = com.operations.Matrix.MatrixUtils.compare(matrix10, matrix24, (double) ' ');
        com.operations.Matrix.Matrix matrix36 = com.operations.Matrix.MatrixOperations.scalarMultiply(matrix10, 137.90576492663388d);
        boolean boolean37 = com.operations.Matrix.MatrixUtils.isSquare(matrix36);
        com.operations.Matrix.Matrix matrix40 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0L, (double) (byte) 10);
        double[] doubleArray43 = new double[] { 10, 'a' };
        double[] doubleArray46 = new double[] { 10, 'a' };
        double[][] doubleArray47 = new double[][] { doubleArray43, doubleArray46 };
        com.operations.Matrix.Matrix matrix48 = new com.operations.Matrix.Matrix(doubleArray47);
        int int49 = matrix48.getCols();
        int int50 = matrix48.getCols();
        int int51 = matrix48.getCols();
        com.operations.Matrix.Matrix[] matrixArray52 = com.operations.Matrix.MatrixDecompositions.luDecomposition(matrix48);
        com.operations.Matrix.Matrix matrix53 = com.operations.Matrix.MatrixOperations.multiply(matrix40, matrix48);
        com.operations.Matrix.Matrix matrix55 = com.operations.Matrix.MatrixTransformations.rotate2D((double) (short) 100);
        boolean boolean57 = com.operations.Matrix.MatrixUtils.compare(matrix48, matrix55, (double) (byte) 0);
        boolean boolean58 = com.operations.Matrix.MatrixUtils.isSymmetric(matrix55);
        double[][] doubleArray59 = matrix55.getData();
        boolean boolean61 = com.operations.Matrix.MatrixUtils.compare(matrix36, matrix55, 2.075327666839899d);
        org.junit.Assert.assertNotNull(matrix2);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertArrayEquals(doubleArray5, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertArrayEquals(doubleArray8, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 2 + "'", int11 == 2);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 2 + "'", int12 == 2);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 2 + "'", int13 == 2);
        org.junit.Assert.assertNotNull(matrixArray14);
        org.junit.Assert.assertNotNull(matrix15);
        org.junit.Assert.assertNotNull(matrix17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(matrixArray20);
        org.junit.Assert.assertNotNull(matrix21);
        org.junit.Assert.assertNotNull(matrix24);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 2 + "'", int25 == 2);
        org.junit.Assert.assertNotNull(matrix28);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 2 + "'", int29 == 2);
        org.junit.Assert.assertNotNull(matrix31);
        org.junit.Assert.assertNotNull(matrix32);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(matrix36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertNotNull(matrix40);
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertArrayEquals(doubleArray43, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray46);
        org.junit.Assert.assertArrayEquals(doubleArray46, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 2 + "'", int49 == 2);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 2 + "'", int50 == 2);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 2 + "'", int51 == 2);
        org.junit.Assert.assertNotNull(matrixArray52);
        org.junit.Assert.assertNotNull(matrix53);
        org.junit.Assert.assertNotNull(matrix55);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(doubleArray59);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
    }

    @Test
    public void test3288() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3288");
        com.operations.Matrix.Matrix matrix2 = com.operations.Matrix.MatrixTransformations.scale2D(36.40054944640259d, 146.4308710620817d);
        com.operations.Matrix.Matrix matrix5 = com.operations.Matrix.MatrixTransformations.project2D((double) ' ', 0.0d);
        double[] doubleArray8 = new double[] { 10, 'a' };
        double[] doubleArray11 = new double[] { 10, 'a' };
        double[][] doubleArray12 = new double[][] { doubleArray8, doubleArray11 };
        com.operations.Matrix.Matrix matrix13 = new com.operations.Matrix.Matrix(doubleArray12);
        int int14 = matrix13.getCols();
        boolean boolean15 = com.operations.Matrix.MatrixUtils.isSquare(matrix13);
        com.operations.Matrix.Matrix matrix16 = com.operations.Matrix.MatrixOperations.transpose(matrix13);
        int int17 = matrix16.getRows();
        com.operations.Matrix.Matrix matrix20 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0L, (double) (byte) 10);
        double[] doubleArray23 = new double[] { 10, 'a' };
        double[] doubleArray26 = new double[] { 10, 'a' };
        double[][] doubleArray27 = new double[][] { doubleArray23, doubleArray26 };
        com.operations.Matrix.Matrix matrix28 = new com.operations.Matrix.Matrix(doubleArray27);
        int int29 = matrix28.getCols();
        int int30 = matrix28.getCols();
        int int31 = matrix28.getCols();
        com.operations.Matrix.Matrix[] matrixArray32 = com.operations.Matrix.MatrixDecompositions.luDecomposition(matrix28);
        com.operations.Matrix.Matrix matrix33 = com.operations.Matrix.MatrixOperations.multiply(matrix20, matrix28);
        com.operations.Matrix.Matrix matrix35 = com.operations.Matrix.MatrixTransformations.rotate2D((double) (short) 100);
        boolean boolean37 = com.operations.Matrix.MatrixUtils.compare(matrix28, matrix35, (double) (byte) 0);
        com.operations.Matrix.Matrix matrix38 = com.operations.Matrix.MatrixOperations.multiply(matrix16, matrix28);
        com.operations.Matrix.Matrix matrix39 = com.operations.Matrix.MatrixOperations.add(matrix5, matrix28);
        com.operations.Matrix.Matrix matrix40 = com.operations.Matrix.MatrixOperations.transpose(matrix5);
        com.operations.Matrix.Matrix matrix43 = com.operations.Matrix.MatrixTransformations.scale2D((double) (byte) 100, 350.0d);
        double double44 = com.operations.Matrix.MatrixUtils.frobeniusNorm(matrix43);
        int int45 = matrix43.getCols();
        com.operations.Matrix.Matrix matrix46 = com.operations.Matrix.MatrixOperations.multiply(matrix5, matrix43);
        int int47 = matrix43.getRows();
        double[][] doubleArray48 = matrix43.getData();
        com.operations.Matrix.Matrix matrix49 = new com.operations.Matrix.Matrix(doubleArray48);
        com.operations.Matrix.Matrix matrix50 = new com.operations.Matrix.Matrix(doubleArray48);
        com.operations.Matrix.Matrix matrix52 = com.operations.Matrix.MatrixTransformations.rotate2D(350.0d);
        com.operations.Matrix.Matrix matrix54 = com.operations.Matrix.MatrixTransformations.rotate2D((double) (short) 100);
        double[] doubleArray57 = new double[] { 137.90576492663388d, (byte) -1 };
        double[] doubleArray58 = com.operations.Matrix.MatrixSolver.solveGaussian(matrix54, doubleArray57);
        double[] doubleArray59 = com.operations.Matrix.MatrixSolver.solveGaussian(matrix52, doubleArray58);
        double[] doubleArray60 = com.operations.Matrix.MatrixSolver.solveGaussian(matrix50, doubleArray59);
        double[] doubleArray61 = com.operations.Matrix.MatrixSolver.solveGaussian(matrix2, doubleArray60);
        org.junit.Assert.assertNotNull(matrix2);
        org.junit.Assert.assertNotNull(matrix5);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertArrayEquals(doubleArray8, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertArrayEquals(doubleArray11, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 2 + "'", int14 == 2);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNotNull(matrix16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 2 + "'", int17 == 2);
        org.junit.Assert.assertNotNull(matrix20);
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertArrayEquals(doubleArray23, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertArrayEquals(doubleArray26, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 2 + "'", int29 == 2);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 2 + "'", int30 == 2);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 2 + "'", int31 == 2);
        org.junit.Assert.assertNotNull(matrixArray32);
        org.junit.Assert.assertNotNull(matrix33);
        org.junit.Assert.assertNotNull(matrix35);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(matrix38);
        org.junit.Assert.assertNotNull(matrix39);
        org.junit.Assert.assertNotNull(matrix40);
        org.junit.Assert.assertNotNull(matrix43);
        org.junit.Assert.assertTrue("'" + double44 + "' != '" + 364.0054944640259d + "'", double44 == 364.0054944640259d);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 2 + "'", int45 == 2);
        org.junit.Assert.assertNotNull(matrix46);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 2 + "'", int47 == 2);
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertNotNull(matrix52);
        org.junit.Assert.assertNotNull(matrix54);
        org.junit.Assert.assertNotNull(doubleArray57);
        org.junit.Assert.assertArrayEquals(doubleArray57, new double[] { 137.90576492663388d, (-1.0d) }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray58);
        org.junit.Assert.assertArrayEquals(doubleArray58, new double[] { (-24.931892522286255d), (-135.63701830716116d) }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray59);
        org.junit.Assert.assertArrayEquals(doubleArray59, new double[] { (-0.9999999999999858d), (-137.90576492663388d) }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray60);
        org.junit.Assert.assertArrayEquals(doubleArray60, new double[] { (-0.009999999999999858d), (-0.39401647121895395d) }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray61);
        org.junit.Assert.assertArrayEquals(doubleArray61, new double[] { (-2.7472112789737413E-4d), (-0.002690801935145932d) }, 1.0E-15);
    }

    @Test
    public void test3289() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3289");
        com.operations.Matrix.Matrix matrix1 = com.operations.Matrix.MatrixTransformations.rotate2D(100.0d);
        int int2 = matrix1.getCols();
        double[][] doubleArray3 = matrix1.getData();
        double[] doubleArray6 = new double[] { 10, 'a' };
        double[] doubleArray9 = new double[] { 10, 'a' };
        double[][] doubleArray10 = new double[][] { doubleArray6, doubleArray9 };
        com.operations.Matrix.Matrix matrix11 = new com.operations.Matrix.Matrix(doubleArray10);
        com.operations.Matrix.Matrix matrix12 = com.operations.Matrix.MatrixOperations.transpose(matrix11);
        com.operations.Matrix.Matrix matrix15 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0L, (double) (byte) 10);
        int int16 = matrix15.getRows();
        com.operations.Matrix.Matrix matrix22 = com.operations.Matrix.MatrixUtils.generateRandomMatrix(100, (int) (byte) 1, (int) '#', (int) '#', 1L);
        boolean boolean24 = com.operations.Matrix.MatrixUtils.compare(matrix15, matrix22, (double) 1.0f);
        com.operations.Matrix.Matrix matrix26 = com.operations.Matrix.MatrixOperations.scalarMultiply(matrix15, (double) 1L);
        matrix15.print();
        com.operations.Matrix.Matrix matrix28 = com.operations.Matrix.MatrixOperations.multiply(matrix12, matrix15);
        boolean boolean30 = com.operations.Matrix.MatrixUtils.compare(matrix1, matrix28, (double) 0.0f);
        boolean boolean31 = com.operations.Matrix.MatrixUtils.isSquare(matrix28);
        double double32 = com.operations.Matrix.MatrixUtils.frobeniusNorm(matrix28);
        double[][] doubleArray33 = matrix28.getData();
        com.operations.Matrix.Matrix matrix36 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0L, (double) (byte) 10);
        double[] doubleArray39 = new double[] { 10, 'a' };
        double[] doubleArray42 = new double[] { 10, 'a' };
        double[][] doubleArray43 = new double[][] { doubleArray39, doubleArray42 };
        com.operations.Matrix.Matrix matrix44 = new com.operations.Matrix.Matrix(doubleArray43);
        int int45 = matrix44.getCols();
        int int46 = matrix44.getCols();
        int int47 = matrix44.getCols();
        com.operations.Matrix.Matrix[] matrixArray48 = com.operations.Matrix.MatrixDecompositions.luDecomposition(matrix44);
        com.operations.Matrix.Matrix matrix49 = com.operations.Matrix.MatrixOperations.multiply(matrix36, matrix44);
        com.operations.Matrix.Matrix matrix51 = com.operations.Matrix.MatrixTransformations.rotate2D((double) (short) 100);
        boolean boolean53 = com.operations.Matrix.MatrixUtils.compare(matrix44, matrix51, (double) (byte) 0);
        boolean boolean54 = com.operations.Matrix.MatrixUtils.isSymmetric(matrix51);
        boolean boolean55 = com.operations.Matrix.MatrixUtils.isSquare(matrix51);
        com.operations.Matrix.Matrix matrix57 = com.operations.Matrix.MatrixOperations.scalarMultiply(matrix51, (double) 2);
        com.operations.Matrix.Matrix matrix58 = com.operations.Matrix.MatrixOperations.transpose(matrix57);
        com.operations.Matrix.Matrix matrix61 = com.operations.Matrix.MatrixTransformations.project2D(137.90576492663388d, (double) (byte) 0);
        com.operations.Matrix.Matrix matrix62 = com.operations.Matrix.MatrixOperations.multiply(matrix57, matrix61);
        boolean boolean64 = com.operations.Matrix.MatrixUtils.compare(matrix28, matrix57, 32.0d);
        org.junit.Assert.assertNotNull(matrix1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 2 + "'", int2 == 2);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertArrayEquals(doubleArray6, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertArrayEquals(doubleArray9, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertNotNull(matrix12);
        org.junit.Assert.assertNotNull(matrix15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 2 + "'", int16 == 2);
        org.junit.Assert.assertNotNull(matrix22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(matrix26);
        org.junit.Assert.assertNotNull(matrix28);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertTrue("'" + double32 + "' != '" + 975.1410154434076d + "'", double32 == 975.1410154434076d);
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertNotNull(matrix36);
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertArrayEquals(doubleArray39, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertArrayEquals(doubleArray42, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 2 + "'", int45 == 2);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 2 + "'", int46 == 2);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 2 + "'", int47 == 2);
        org.junit.Assert.assertNotNull(matrixArray48);
        org.junit.Assert.assertNotNull(matrix49);
        org.junit.Assert.assertNotNull(matrix51);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + true + "'", boolean55 == true);
        org.junit.Assert.assertNotNull(matrix57);
        org.junit.Assert.assertNotNull(matrix58);
        org.junit.Assert.assertNotNull(matrix61);
        org.junit.Assert.assertNotNull(matrix62);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
    }

    @Test
    public void test3290() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3290");
        com.operations.Matrix.Matrix matrix1 = com.operations.Matrix.MatrixTransformations.rotate2D((double) (short) 100);
        double[] doubleArray4 = new double[] { 137.90576492663388d, (byte) -1 };
        double[] doubleArray5 = com.operations.Matrix.MatrixSolver.solveGaussian(matrix1, doubleArray4);
        com.operations.Matrix.Matrix matrix8 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0L, (double) (byte) 10);
        double[] doubleArray11 = new double[] { 10, 'a' };
        double[] doubleArray14 = new double[] { 10, 'a' };
        double[][] doubleArray15 = new double[][] { doubleArray11, doubleArray14 };
        com.operations.Matrix.Matrix matrix16 = new com.operations.Matrix.Matrix(doubleArray15);
        int int17 = matrix16.getCols();
        int int18 = matrix16.getCols();
        int int19 = matrix16.getCols();
        com.operations.Matrix.Matrix[] matrixArray20 = com.operations.Matrix.MatrixDecompositions.luDecomposition(matrix16);
        com.operations.Matrix.Matrix matrix21 = com.operations.Matrix.MatrixOperations.multiply(matrix8, matrix16);
        boolean boolean23 = com.operations.Matrix.MatrixUtils.compare(matrix1, matrix8, (double) (-1L));
        com.operations.Matrix.Matrix matrix26 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0L, (double) (byte) 10);
        int int27 = matrix26.getRows();
        com.operations.Matrix.Matrix matrix33 = com.operations.Matrix.MatrixUtils.generateRandomMatrix(100, (int) (byte) 1, (int) '#', (int) '#', 1L);
        boolean boolean35 = com.operations.Matrix.MatrixUtils.compare(matrix26, matrix33, (double) 1.0f);
        matrix33.print();
        com.operations.Matrix.Matrix matrix37 = com.operations.Matrix.MatrixOperations.transpose(matrix33);
        com.operations.Matrix.Matrix matrix38 = com.operations.Matrix.MatrixOperations.transpose(matrix33);
        boolean boolean40 = com.operations.Matrix.MatrixUtils.compare(matrix8, matrix38, 3500.0d);
        double[][] doubleArray41 = matrix38.getData();
        org.junit.Assert.assertNotNull(matrix1);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertArrayEquals(doubleArray4, new double[] { 137.90576492663388d, (-1.0d) }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertArrayEquals(doubleArray5, new double[] { (-24.931892522286255d), (-135.63701830716116d) }, 1.0E-15);
        org.junit.Assert.assertNotNull(matrix8);
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertArrayEquals(doubleArray11, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertArrayEquals(doubleArray14, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 2 + "'", int17 == 2);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 2 + "'", int18 == 2);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 2 + "'", int19 == 2);
        org.junit.Assert.assertNotNull(matrixArray20);
        org.junit.Assert.assertNotNull(matrix21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(matrix26);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 2 + "'", int27 == 2);
        org.junit.Assert.assertNotNull(matrix33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(matrix37);
        org.junit.Assert.assertNotNull(matrix38);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(doubleArray41);
    }

    @Test
    public void test3291() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3291");
        double[] doubleArray2 = new double[] { 10, 'a' };
        double[] doubleArray5 = new double[] { 10, 'a' };
        double[][] doubleArray6 = new double[][] { doubleArray2, doubleArray5 };
        com.operations.Matrix.Matrix matrix7 = new com.operations.Matrix.Matrix(doubleArray6);
        com.operations.Matrix.Matrix matrix8 = new com.operations.Matrix.Matrix(doubleArray6);
        boolean boolean9 = com.operations.Matrix.MatrixUtils.isSquare(matrix8);
        double[] doubleArray12 = new double[] { 10, 'a' };
        double[] doubleArray15 = new double[] { 10, 'a' };
        double[][] doubleArray16 = new double[][] { doubleArray12, doubleArray15 };
        com.operations.Matrix.Matrix matrix17 = new com.operations.Matrix.Matrix(doubleArray16);
        int int18 = matrix17.getCols();
        int int19 = matrix17.getCols();
        matrix17.print();
        double[] doubleArray23 = new double[] { 10, 'a' };
        double[] doubleArray26 = new double[] { 10, 'a' };
        double[][] doubleArray27 = new double[][] { doubleArray23, doubleArray26 };
        com.operations.Matrix.Matrix matrix28 = new com.operations.Matrix.Matrix(doubleArray27);
        boolean boolean30 = com.operations.Matrix.MatrixUtils.compare(matrix17, matrix28, (double) (-1));
        com.operations.Matrix.Matrix matrix31 = com.operations.Matrix.MatrixOperations.subtract(matrix8, matrix28);
        com.operations.Matrix.Matrix[] matrixArray32 = com.operations.Matrix.MatrixDecompositions.luDecomposition(matrix31);
        double[][] doubleArray33 = matrix31.getData();
        double double34 = com.operations.Matrix.MatrixUtils.frobeniusNorm(matrix31);
        double[] doubleArray37 = new double[] { 10, 'a' };
        double[] doubleArray40 = new double[] { 10, 'a' };
        double[][] doubleArray41 = new double[][] { doubleArray37, doubleArray40 };
        com.operations.Matrix.Matrix matrix42 = new com.operations.Matrix.Matrix(doubleArray41);
        int int43 = matrix42.getCols();
        int int44 = matrix42.getCols();
        int int45 = matrix42.getCols();
        com.operations.Matrix.Matrix matrix51 = com.operations.Matrix.MatrixUtils.generateRandomMatrix(100, (int) (byte) 1, (int) '#', (int) '#', 1L);
        double double54 = matrix51.getValue((int) '4', 0);
        double double55 = com.operations.Matrix.MatrixUtils.frobeniusNorm(matrix51);
        boolean boolean56 = com.operations.Matrix.MatrixUtils.isSquare(matrix51);
        boolean boolean58 = com.operations.Matrix.MatrixUtils.compare(matrix42, matrix51, (double) 100L);
        int int59 = matrix42.getCols();
        com.operations.Matrix.Matrix matrix60 = com.operations.Matrix.MatrixOperations.add(matrix31, matrix42);
        com.operations.Matrix.Matrix matrix61 = com.operations.Matrix.MatrixOperations.transpose(matrix42);
        int int62 = matrix61.getRows();
        com.operations.Matrix.Matrix matrix63 = com.operations.Matrix.MatrixOperations.transpose(matrix61);
        // The following exception was thrown during execution in test generation
        try {
            double double66 = matrix63.getValue(0, (int) (byte) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertArrayEquals(doubleArray2, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertArrayEquals(doubleArray5, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertArrayEquals(doubleArray12, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertArrayEquals(doubleArray15, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 2 + "'", int18 == 2);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 2 + "'", int19 == 2);
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertArrayEquals(doubleArray23, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertArrayEquals(doubleArray26, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(matrix31);
        org.junit.Assert.assertNotNull(matrixArray32);
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertTrue("'" + double34 + "' != '" + 0.0d + "'", double34 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertArrayEquals(doubleArray37, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertArrayEquals(doubleArray40, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 2 + "'", int43 == 2);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 2 + "'", int44 == 2);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 2 + "'", int45 == 2);
        org.junit.Assert.assertNotNull(matrix51);
        org.junit.Assert.assertTrue("'" + double54 + "' != '" + 35.0d + "'", double54 == 35.0d);
        org.junit.Assert.assertTrue("'" + double55 + "' != '" + 350.0d + "'", double55 == 350.0d);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 2 + "'", int59 == 2);
        org.junit.Assert.assertNotNull(matrix60);
        org.junit.Assert.assertNotNull(matrix61);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 2 + "'", int62 == 2);
        org.junit.Assert.assertNotNull(matrix63);
    }

    @Test
    public void test3292() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3292");
        com.operations.Matrix.Matrix matrix1 = com.operations.Matrix.MatrixTransformations.rotate2D((double) 1.0f);
        com.operations.Matrix.Matrix matrix4 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0L, (double) (byte) 10);
        int int5 = matrix4.getRows();
        com.operations.Matrix.Matrix matrix7 = com.operations.Matrix.MatrixOperations.scalarMultiply(matrix4, (double) 2);
        double double8 = com.operations.Matrix.MatrixUtils.frobeniusNorm(matrix4);
        com.operations.Matrix.Matrix matrix11 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0L, (double) (byte) 10);
        int int12 = matrix11.getRows();
        com.operations.Matrix.Matrix matrix14 = com.operations.Matrix.MatrixOperations.scalarMultiply(matrix11, (double) 2);
        com.operations.Matrix.Matrix matrix15 = com.operations.Matrix.MatrixOperations.subtract(matrix4, matrix14);
        com.operations.Matrix.Matrix matrix16 = com.operations.Matrix.MatrixOperations.add(matrix1, matrix14);
        boolean boolean17 = com.operations.Matrix.MatrixUtils.isSymmetric(matrix14);
        int int18 = matrix14.getCols();
        boolean boolean19 = com.operations.Matrix.MatrixUtils.isSymmetric(matrix14);
        org.junit.Assert.assertNotNull(matrix1);
        org.junit.Assert.assertNotNull(matrix4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 2 + "'", int5 == 2);
        org.junit.Assert.assertNotNull(matrix7);
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 10.0d + "'", double8 == 10.0d);
        org.junit.Assert.assertNotNull(matrix11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 2 + "'", int12 == 2);
        org.junit.Assert.assertNotNull(matrix14);
        org.junit.Assert.assertNotNull(matrix15);
        org.junit.Assert.assertNotNull(matrix16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 2 + "'", int18 == 2);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
    }

    @Test
    public void test3293() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3293");
        double[] doubleArray2 = new double[] { 10, 'a' };
        double[] doubleArray5 = new double[] { 10, 'a' };
        double[][] doubleArray6 = new double[][] { doubleArray2, doubleArray5 };
        com.operations.Matrix.Matrix matrix7 = new com.operations.Matrix.Matrix(doubleArray6);
        int int8 = matrix7.getCols();
        int int9 = matrix7.getCols();
        boolean boolean10 = com.operations.Matrix.MatrixUtils.isSquare(matrix7);
        com.operations.Matrix.Matrix matrix11 = com.operations.Matrix.MatrixDecompositions.choleskyDecomposition(matrix7);
        com.operations.Matrix.Matrix matrix14 = com.operations.Matrix.MatrixTransformations.project2D(0.0d, (double) 0);
        com.operations.Matrix.Matrix matrix15 = com.operations.Matrix.MatrixOperations.subtract(matrix11, matrix14);
        com.operations.Matrix.Matrix matrix17 = com.operations.Matrix.MatrixOperations.scalarMultiply(matrix11, (double) 1.0f);
        com.operations.Matrix.Matrix matrix20 = com.operations.Matrix.MatrixTransformations.scale2D((double) (byte) 10, (double) 10);
        double[] doubleArray23 = new double[] { 10, 'a' };
        double[] doubleArray26 = new double[] { 10, 'a' };
        double[][] doubleArray27 = new double[][] { doubleArray23, doubleArray26 };
        com.operations.Matrix.Matrix matrix28 = new com.operations.Matrix.Matrix(doubleArray27);
        com.operations.Matrix.Matrix matrix29 = new com.operations.Matrix.Matrix(doubleArray27);
        boolean boolean30 = com.operations.Matrix.MatrixUtils.isSquare(matrix29);
        double[] doubleArray33 = new double[] { 10, 'a' };
        double[] doubleArray36 = new double[] { 10, 'a' };
        double[][] doubleArray37 = new double[][] { doubleArray33, doubleArray36 };
        com.operations.Matrix.Matrix matrix38 = new com.operations.Matrix.Matrix(doubleArray37);
        int int39 = matrix38.getCols();
        int int40 = matrix38.getCols();
        matrix38.print();
        double[] doubleArray44 = new double[] { 10, 'a' };
        double[] doubleArray47 = new double[] { 10, 'a' };
        double[][] doubleArray48 = new double[][] { doubleArray44, doubleArray47 };
        com.operations.Matrix.Matrix matrix49 = new com.operations.Matrix.Matrix(doubleArray48);
        boolean boolean51 = com.operations.Matrix.MatrixUtils.compare(matrix38, matrix49, (double) (-1));
        com.operations.Matrix.Matrix matrix52 = com.operations.Matrix.MatrixOperations.subtract(matrix29, matrix49);
        com.operations.Matrix.Matrix[] matrixArray53 = com.operations.Matrix.MatrixDecompositions.luDecomposition(matrix52);
        double[][] doubleArray54 = matrix52.getData();
        com.operations.Matrix.Matrix matrix55 = new com.operations.Matrix.Matrix(doubleArray54);
        com.operations.Matrix.Matrix matrix56 = com.operations.Matrix.MatrixOperations.multiply(matrix20, matrix55);
        boolean boolean57 = com.operations.Matrix.MatrixUtils.isSymmetric(matrix20);
        com.operations.Matrix.Matrix matrix59 = com.operations.Matrix.MatrixTransformations.rotate2D(350.0d);
        com.operations.Matrix.Matrix matrix60 = com.operations.Matrix.MatrixDecompositions.choleskyDecomposition(matrix59);
        int int61 = matrix59.getRows();
        com.operations.Matrix.Matrix matrix62 = com.operations.Matrix.MatrixOperations.subtract(matrix20, matrix59);
        double[] doubleArray65 = new double[] { 10, 'a' };
        double[] doubleArray68 = new double[] { 10, 'a' };
        double[][] doubleArray69 = new double[][] { doubleArray65, doubleArray68 };
        com.operations.Matrix.Matrix matrix70 = new com.operations.Matrix.Matrix(doubleArray69);
        int int71 = matrix70.getCols();
        int int72 = matrix70.getCols();
        boolean boolean73 = com.operations.Matrix.MatrixUtils.isSquare(matrix70);
        com.operations.Matrix.Matrix matrix74 = com.operations.Matrix.MatrixDecompositions.choleskyDecomposition(matrix70);
        com.operations.Matrix.Matrix matrix77 = com.operations.Matrix.MatrixTransformations.project2D(0.0d, (double) 0);
        com.operations.Matrix.Matrix matrix78 = com.operations.Matrix.MatrixOperations.subtract(matrix74, matrix77);
        com.operations.Matrix.Matrix matrix79 = com.operations.Matrix.MatrixOperations.transpose(matrix77);
        com.operations.Matrix.Matrix matrix80 = com.operations.Matrix.MatrixOperations.subtract(matrix20, matrix79);
        com.operations.Matrix.Matrix matrix82 = com.operations.Matrix.MatrixOperations.scalarMultiply(matrix80, (-0.1736481776669303d));
        boolean boolean83 = com.operations.Matrix.MatrixUtils.isSymmetric(matrix80);
        com.operations.Matrix.Matrix matrix84 = com.operations.Matrix.MatrixOperations.add(matrix17, matrix80);
        com.operations.Matrix.Matrix matrix87 = com.operations.Matrix.MatrixTransformations.project2D((double) 0L, (double) 0);
        com.operations.Matrix.Matrix[] matrixArray88 = com.operations.Matrix.MatrixDecompositions.luDecomposition(matrix87);
        com.operations.Matrix.Matrix matrix89 = com.operations.Matrix.MatrixOperations.multiply(matrix17, matrix87);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertArrayEquals(doubleArray2, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertArrayEquals(doubleArray5, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 2 + "'", int8 == 2);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 2 + "'", int9 == 2);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(matrix11);
        org.junit.Assert.assertNotNull(matrix14);
        org.junit.Assert.assertNotNull(matrix15);
        org.junit.Assert.assertNotNull(matrix17);
        org.junit.Assert.assertNotNull(matrix20);
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertArrayEquals(doubleArray23, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertArrayEquals(doubleArray26, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertArrayEquals(doubleArray33, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertArrayEquals(doubleArray36, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 2 + "'", int39 == 2);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 2 + "'", int40 == 2);
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertArrayEquals(doubleArray44, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertArrayEquals(doubleArray47, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(matrix52);
        org.junit.Assert.assertNotNull(matrixArray53);
        org.junit.Assert.assertNotNull(doubleArray54);
        org.junit.Assert.assertNotNull(matrix56);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + true + "'", boolean57 == true);
        org.junit.Assert.assertNotNull(matrix59);
        org.junit.Assert.assertNotNull(matrix60);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 2 + "'", int61 == 2);
        org.junit.Assert.assertNotNull(matrix62);
        org.junit.Assert.assertNotNull(doubleArray65);
        org.junit.Assert.assertArrayEquals(doubleArray65, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray68);
        org.junit.Assert.assertArrayEquals(doubleArray68, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray69);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 2 + "'", int71 == 2);
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 2 + "'", int72 == 2);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + true + "'", boolean73 == true);
        org.junit.Assert.assertNotNull(matrix74);
        org.junit.Assert.assertNotNull(matrix77);
        org.junit.Assert.assertNotNull(matrix78);
        org.junit.Assert.assertNotNull(matrix79);
        org.junit.Assert.assertNotNull(matrix80);
        org.junit.Assert.assertNotNull(matrix82);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + true + "'", boolean83 == true);
        org.junit.Assert.assertNotNull(matrix84);
        org.junit.Assert.assertNotNull(matrix87);
        org.junit.Assert.assertNotNull(matrixArray88);
        org.junit.Assert.assertNotNull(matrix89);
    }

    @Test
    public void test3294() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3294");
        double[] doubleArray2 = new double[] { 10, 'a' };
        double[] doubleArray5 = new double[] { 10, 'a' };
        double[][] doubleArray6 = new double[][] { doubleArray2, doubleArray5 };
        com.operations.Matrix.Matrix matrix7 = new com.operations.Matrix.Matrix(doubleArray6);
        com.operations.Matrix.Matrix matrix8 = new com.operations.Matrix.Matrix(doubleArray6);
        boolean boolean9 = com.operations.Matrix.MatrixUtils.isSquare(matrix8);
        double[] doubleArray12 = new double[] { 10, 'a' };
        double[] doubleArray15 = new double[] { 10, 'a' };
        double[][] doubleArray16 = new double[][] { doubleArray12, doubleArray15 };
        com.operations.Matrix.Matrix matrix17 = new com.operations.Matrix.Matrix(doubleArray16);
        int int18 = matrix17.getCols();
        int int19 = matrix17.getCols();
        matrix17.print();
        double[] doubleArray23 = new double[] { 10, 'a' };
        double[] doubleArray26 = new double[] { 10, 'a' };
        double[][] doubleArray27 = new double[][] { doubleArray23, doubleArray26 };
        com.operations.Matrix.Matrix matrix28 = new com.operations.Matrix.Matrix(doubleArray27);
        boolean boolean30 = com.operations.Matrix.MatrixUtils.compare(matrix17, matrix28, (double) (-1));
        com.operations.Matrix.Matrix matrix31 = com.operations.Matrix.MatrixOperations.subtract(matrix8, matrix28);
        com.operations.Matrix.Matrix matrix33 = com.operations.Matrix.MatrixOperations.scalarMultiply(matrix8, (double) 0.0f);
        com.operations.Matrix.Matrix matrix34 = com.operations.Matrix.MatrixOperations.transpose(matrix8);
        com.operations.Matrix.Matrix matrix40 = com.operations.Matrix.MatrixUtils.generateRandomMatrix(2, (int) (byte) 10, (int) (byte) -1, 0, (long) (byte) 10);
        matrix40.print();
        boolean boolean43 = com.operations.Matrix.MatrixUtils.compare(matrix34, matrix40, 975.1410154434076d);
        com.operations.Matrix.Matrix matrix48 = com.operations.Matrix.MatrixUtils.generateRandomMatrix((int) '#', (int) '#', (int) (short) 1, 100);
        // The following exception was thrown during execution in test generation
        try {
            com.operations.Matrix.Matrix matrix49 = com.operations.Matrix.MatrixOperations.multiply(matrix34, matrix48);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Matrix A's columns must match Matrix B's rows for multiplication.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertArrayEquals(doubleArray2, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertArrayEquals(doubleArray5, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertArrayEquals(doubleArray12, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertArrayEquals(doubleArray15, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 2 + "'", int18 == 2);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 2 + "'", int19 == 2);
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertArrayEquals(doubleArray23, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertArrayEquals(doubleArray26, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(matrix31);
        org.junit.Assert.assertNotNull(matrix33);
        org.junit.Assert.assertNotNull(matrix34);
        org.junit.Assert.assertNotNull(matrix40);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(matrix48);
    }

    @Test
    public void test3295() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3295");
        com.operations.Matrix.Matrix matrix2 = com.operations.Matrix.MatrixTransformations.project2D(365.68429006453096d, 145.11374848717816d);
        com.operations.Matrix.Matrix matrix4 = com.operations.Matrix.MatrixTransformations.rotate2D((double) (short) 100);
        double[] doubleArray7 = new double[] { 137.90576492663388d, (byte) -1 };
        double[] doubleArray8 = com.operations.Matrix.MatrixSolver.solveGaussian(matrix4, doubleArray7);
        com.operations.Matrix.Matrix matrix11 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0L, (double) (byte) 10);
        double[] doubleArray14 = new double[] { 10, 'a' };
        double[] doubleArray17 = new double[] { 10, 'a' };
        double[][] doubleArray18 = new double[][] { doubleArray14, doubleArray17 };
        com.operations.Matrix.Matrix matrix19 = new com.operations.Matrix.Matrix(doubleArray18);
        int int20 = matrix19.getCols();
        int int21 = matrix19.getCols();
        int int22 = matrix19.getCols();
        com.operations.Matrix.Matrix[] matrixArray23 = com.operations.Matrix.MatrixDecompositions.luDecomposition(matrix19);
        com.operations.Matrix.Matrix matrix24 = com.operations.Matrix.MatrixOperations.multiply(matrix11, matrix19);
        boolean boolean26 = com.operations.Matrix.MatrixUtils.compare(matrix4, matrix11, (double) (-1L));
        boolean boolean27 = com.operations.Matrix.MatrixUtils.isSymmetric(matrix4);
        com.operations.Matrix.Matrix matrix30 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0L, (double) (byte) 10);
        double[] doubleArray33 = new double[] { 10, 'a' };
        double[] doubleArray36 = new double[] { 10, 'a' };
        double[][] doubleArray37 = new double[][] { doubleArray33, doubleArray36 };
        com.operations.Matrix.Matrix matrix38 = new com.operations.Matrix.Matrix(doubleArray37);
        int int39 = matrix38.getCols();
        int int40 = matrix38.getCols();
        int int41 = matrix38.getCols();
        com.operations.Matrix.Matrix[] matrixArray42 = com.operations.Matrix.MatrixDecompositions.luDecomposition(matrix38);
        com.operations.Matrix.Matrix matrix43 = com.operations.Matrix.MatrixOperations.multiply(matrix30, matrix38);
        com.operations.Matrix.Matrix matrix45 = com.operations.Matrix.MatrixTransformations.rotate2D((double) (short) 100);
        boolean boolean47 = com.operations.Matrix.MatrixUtils.compare(matrix38, matrix45, (double) (byte) 0);
        boolean boolean48 = com.operations.Matrix.MatrixUtils.isSymmetric(matrix45);
        boolean boolean49 = com.operations.Matrix.MatrixUtils.isSquare(matrix45);
        com.operations.Matrix.Matrix matrix51 = com.operations.Matrix.MatrixTransformations.rotate2D((double) (short) 100);
        boolean boolean53 = com.operations.Matrix.MatrixUtils.compare(matrix45, matrix51, (double) (byte) 100);
        matrix51.print();
        int int55 = matrix51.getCols();
        com.operations.Matrix.Matrix matrix56 = com.operations.Matrix.MatrixOperations.multiply(matrix4, matrix51);
        boolean boolean58 = com.operations.Matrix.MatrixUtils.compare(matrix2, matrix51, (double) (short) 10);
        double[][] doubleArray59 = matrix51.getData();
        org.junit.Assert.assertNotNull(matrix2);
        org.junit.Assert.assertNotNull(matrix4);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertArrayEquals(doubleArray7, new double[] { 137.90576492663388d, (-1.0d) }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertArrayEquals(doubleArray8, new double[] { (-24.931892522286255d), (-135.63701830716116d) }, 1.0E-15);
        org.junit.Assert.assertNotNull(matrix11);
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertArrayEquals(doubleArray14, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertArrayEquals(doubleArray17, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 2 + "'", int20 == 2);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 2 + "'", int21 == 2);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 2 + "'", int22 == 2);
        org.junit.Assert.assertNotNull(matrixArray23);
        org.junit.Assert.assertNotNull(matrix24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(matrix30);
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertArrayEquals(doubleArray33, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertArrayEquals(doubleArray36, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 2 + "'", int39 == 2);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 2 + "'", int40 == 2);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 2 + "'", int41 == 2);
        org.junit.Assert.assertNotNull(matrixArray42);
        org.junit.Assert.assertNotNull(matrix43);
        org.junit.Assert.assertNotNull(matrix45);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
        org.junit.Assert.assertNotNull(matrix51);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 2 + "'", int55 == 2);
        org.junit.Assert.assertNotNull(matrix56);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(doubleArray59);
    }

    @Test
    public void test3296() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3296");
        com.operations.Matrix.Matrix matrix2 = com.operations.Matrix.MatrixTransformations.project2D(131.06486943494812d, (double) 100L);
        org.junit.Assert.assertNotNull(matrix2);
    }

    @Test
    public void test3297() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3297");
        com.operations.Matrix.Matrix matrix2 = com.operations.Matrix.MatrixTransformations.scale2D(30.0d, (double) 0L);
        double[] doubleArray5 = new double[] { 10, 'a' };
        double[] doubleArray8 = new double[] { 10, 'a' };
        double[][] doubleArray9 = new double[][] { doubleArray5, doubleArray8 };
        com.operations.Matrix.Matrix matrix10 = new com.operations.Matrix.Matrix(doubleArray9);
        com.operations.Matrix.Matrix matrix11 = new com.operations.Matrix.Matrix(doubleArray9);
        com.operations.Matrix.Matrix matrix13 = com.operations.Matrix.MatrixTransformations.rotate2D((double) (short) 100);
        double[] doubleArray16 = new double[] { 137.90576492663388d, (byte) -1 };
        double[] doubleArray17 = com.operations.Matrix.MatrixSolver.solveGaussian(matrix13, doubleArray16);
        com.operations.Matrix.Matrix matrix18 = com.operations.Matrix.MatrixOperations.add(matrix11, matrix13);
        com.operations.Matrix.Matrix matrix19 = com.operations.Matrix.MatrixOperations.transpose(matrix13);
        int int20 = matrix13.getCols();
        int int21 = matrix13.getRows();
        double[] doubleArray24 = new double[] { 10, 'a' };
        double[] doubleArray27 = new double[] { 10, 'a' };
        double[][] doubleArray28 = new double[][] { doubleArray24, doubleArray27 };
        com.operations.Matrix.Matrix matrix29 = new com.operations.Matrix.Matrix(doubleArray28);
        int int30 = matrix29.getCols();
        int int31 = matrix29.getCols();
        matrix29.print();
        double[] doubleArray35 = new double[] { 10, 'a' };
        double[] doubleArray38 = new double[] { 10, 'a' };
        double[][] doubleArray39 = new double[][] { doubleArray35, doubleArray38 };
        com.operations.Matrix.Matrix matrix40 = new com.operations.Matrix.Matrix(doubleArray39);
        boolean boolean42 = com.operations.Matrix.MatrixUtils.compare(matrix29, matrix40, (double) (-1));
        com.operations.Matrix.Matrix matrix43 = com.operations.Matrix.MatrixOperations.multiply(matrix13, matrix29);
        com.operations.Matrix.Matrix matrix46 = com.operations.Matrix.MatrixTransformations.project2D(10.0d, 1.4142135623730951d);
        int int47 = matrix46.getRows();
        com.operations.Matrix.Matrix matrix50 = com.operations.Matrix.MatrixTransformations.project2D((double) (short) 100, 35.0d);
        com.operations.Matrix.Matrix matrix52 = com.operations.Matrix.MatrixTransformations.rotate2D((double) (-1L));
        com.operations.Matrix.Matrix matrix54 = com.operations.Matrix.MatrixTransformations.rotate2D((double) (short) 100);
        double[] doubleArray57 = new double[] { 137.90576492663388d, (byte) -1 };
        double[] doubleArray58 = com.operations.Matrix.MatrixSolver.solveGaussian(matrix54, doubleArray57);
        double[] doubleArray59 = com.operations.Matrix.MatrixSolver.solveGaussian(matrix52, doubleArray57);
        double[] doubleArray60 = com.operations.Matrix.MatrixSolver.solveGaussian(matrix50, doubleArray59);
        double[] doubleArray61 = com.operations.Matrix.MatrixSolver.solveGaussian(matrix46, doubleArray59);
        double[] doubleArray62 = com.operations.Matrix.MatrixSolver.solveGaussian(matrix13, doubleArray61);
        // The following exception was thrown during execution in test generation
        try {
            double[] doubleArray63 = com.operations.Matrix.MatrixSolver.solveGaussian(matrix2, doubleArray62);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Matrix is singular or nearly singular.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(matrix2);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertArrayEquals(doubleArray5, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertArrayEquals(doubleArray8, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertNotNull(matrix13);
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertArrayEquals(doubleArray16, new double[] { 137.90576492663388d, (-1.0d) }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertArrayEquals(doubleArray17, new double[] { (-24.931892522286255d), (-135.63701830716116d) }, 1.0E-15);
        org.junit.Assert.assertNotNull(matrix18);
        org.junit.Assert.assertNotNull(matrix19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 2 + "'", int20 == 2);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 2 + "'", int21 == 2);
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertArrayEquals(doubleArray24, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertArrayEquals(doubleArray27, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 2 + "'", int30 == 2);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 2 + "'", int31 == 2);
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertArrayEquals(doubleArray35, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertArrayEquals(doubleArray38, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(matrix43);
        org.junit.Assert.assertNotNull(matrix46);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 2 + "'", int47 == 2);
        org.junit.Assert.assertNotNull(matrix50);
        org.junit.Assert.assertNotNull(matrix52);
        org.junit.Assert.assertNotNull(matrix54);
        org.junit.Assert.assertNotNull(doubleArray57);
        org.junit.Assert.assertArrayEquals(doubleArray57, new double[] { 137.90576492663388d, (-1.0d) }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray58);
        org.junit.Assert.assertArrayEquals(doubleArray58, new double[] { (-24.931892522286255d), (-135.63701830716116d) }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray59);
        org.junit.Assert.assertArrayEquals(doubleArray59, new double[] { 137.90221361711127d, 1.4069397643877004d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray60);
        org.junit.Assert.assertArrayEquals(doubleArray60, new double[] { 1.3790221361711128d, 0.04019827898250573d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray61);
        org.junit.Assert.assertArrayEquals(doubleArray61, new double[] { 13.790221361711128d, 0.9948566481195463d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray62);
        org.junit.Assert.assertArrayEquals(doubleArray62, new double[] { (-1.4149042688808446d), (-13.75347195675348d) }, 1.0E-15);
    }

    @Test
    public void test3298() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3298");
        com.operations.Matrix.Matrix matrix1 = com.operations.Matrix.MatrixTransformations.rotate2D((double) '4');
        double[] doubleArray4 = new double[] { 10, 'a' };
        double[] doubleArray7 = new double[] { 10, 'a' };
        double[][] doubleArray8 = new double[][] { doubleArray4, doubleArray7 };
        com.operations.Matrix.Matrix matrix9 = new com.operations.Matrix.Matrix(doubleArray8);
        com.operations.Matrix.Matrix matrix10 = new com.operations.Matrix.Matrix(doubleArray8);
        com.operations.Matrix.Matrix matrix12 = com.operations.Matrix.MatrixTransformations.rotate2D((double) (short) 100);
        double[] doubleArray15 = new double[] { 137.90576492663388d, (byte) -1 };
        double[] doubleArray16 = com.operations.Matrix.MatrixSolver.solveGaussian(matrix12, doubleArray15);
        com.operations.Matrix.Matrix matrix17 = com.operations.Matrix.MatrixOperations.add(matrix10, matrix12);
        boolean boolean18 = com.operations.Matrix.MatrixUtils.isSymmetric(matrix17);
        boolean boolean20 = com.operations.Matrix.MatrixUtils.compare(matrix1, matrix17, 364.0054944640259d);
        com.operations.Matrix.Matrix[] matrixArray21 = com.operations.Matrix.MatrixDecompositions.luDecomposition(matrix17);
        com.operations.Matrix.Matrix matrix23 = com.operations.Matrix.MatrixTransformations.rotate2D(100.0d);
        int int24 = matrix23.getCols();
        matrix23.print();
        com.operations.Matrix.Matrix matrix27 = com.operations.Matrix.MatrixOperations.scalarMultiply(matrix23, (double) (byte) 1);
        boolean boolean28 = com.operations.Matrix.MatrixUtils.isSymmetric(matrix23);
        com.operations.Matrix.Matrix matrix30 = com.operations.Matrix.MatrixTransformations.rotate2D((-1.0d));
        com.operations.Matrix.Matrix matrix32 = com.operations.Matrix.MatrixTransformations.rotate2D((double) (-1L));
        com.operations.Matrix.Matrix matrix34 = com.operations.Matrix.MatrixTransformations.rotate2D((double) (short) 100);
        double[] doubleArray37 = new double[] { 137.90576492663388d, (byte) -1 };
        double[] doubleArray38 = com.operations.Matrix.MatrixSolver.solveGaussian(matrix34, doubleArray37);
        double[] doubleArray39 = com.operations.Matrix.MatrixSolver.solveGaussian(matrix32, doubleArray37);
        double[] doubleArray40 = com.operations.Matrix.MatrixSolver.solveGaussian(matrix30, doubleArray37);
        double[] doubleArray41 = com.operations.Matrix.MatrixSolver.solveGaussian(matrix23, doubleArray40);
        double[] doubleArray42 = com.operations.Matrix.MatrixSolver.solveGaussian(matrix17, doubleArray40);
        com.operations.Matrix.Matrix matrix45 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0L, (double) (byte) 10);
        double[] doubleArray48 = new double[] { 10, 'a' };
        double[] doubleArray51 = new double[] { 10, 'a' };
        double[][] doubleArray52 = new double[][] { doubleArray48, doubleArray51 };
        com.operations.Matrix.Matrix matrix53 = new com.operations.Matrix.Matrix(doubleArray52);
        int int54 = matrix53.getCols();
        int int55 = matrix53.getCols();
        int int56 = matrix53.getCols();
        com.operations.Matrix.Matrix[] matrixArray57 = com.operations.Matrix.MatrixDecompositions.luDecomposition(matrix53);
        com.operations.Matrix.Matrix matrix58 = com.operations.Matrix.MatrixOperations.multiply(matrix45, matrix53);
        int int59 = matrix53.getRows();
        com.operations.Matrix.Matrix matrix61 = com.operations.Matrix.MatrixOperations.scalarMultiply(matrix53, (double) (-1L));
        com.operations.Matrix.Matrix matrix64 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0L, (double) (byte) 10);
        int int65 = matrix64.getRows();
        com.operations.Matrix.Matrix matrix67 = com.operations.Matrix.MatrixOperations.scalarMultiply(matrix64, (double) 2);
        com.operations.Matrix.Matrix[] matrixArray68 = com.operations.Matrix.MatrixDecompositions.luDecomposition(matrix67);
        com.operations.Matrix.Matrix matrix69 = com.operations.Matrix.MatrixOperations.transpose(matrix67);
        com.operations.Matrix.Matrix matrix70 = com.operations.Matrix.MatrixOperations.add(matrix53, matrix67);
        com.operations.Matrix.Matrix matrix72 = com.operations.Matrix.MatrixTransformations.rotate2D((double) '4');
        matrix72.print();
        com.operations.Matrix.Matrix matrix74 = com.operations.Matrix.MatrixOperations.transpose(matrix72);
        double[][] doubleArray75 = matrix72.getData();
        com.operations.Matrix.Matrix matrix78 = com.operations.Matrix.MatrixTransformations.project2D(400.0d, 36.40054944640259d);
        com.operations.Matrix.Matrix matrix80 = com.operations.Matrix.MatrixTransformations.rotate2D(100.0d);
        int int81 = matrix80.getCols();
        matrix80.print();
        com.operations.Matrix.Matrix matrix84 = com.operations.Matrix.MatrixOperations.scalarMultiply(matrix80, (double) (byte) 1);
        com.operations.Matrix.Matrix matrix86 = com.operations.Matrix.MatrixTransformations.rotate2D(350.0d);
        com.operations.Matrix.Matrix matrix88 = com.operations.Matrix.MatrixTransformations.rotate2D((double) (short) 100);
        double[] doubleArray91 = new double[] { 137.90576492663388d, (byte) -1 };
        double[] doubleArray92 = com.operations.Matrix.MatrixSolver.solveGaussian(matrix88, doubleArray91);
        double[] doubleArray93 = com.operations.Matrix.MatrixSolver.solveGaussian(matrix86, doubleArray92);
        double[] doubleArray94 = com.operations.Matrix.MatrixSolver.solveGaussian(matrix80, doubleArray92);
        double[] doubleArray95 = com.operations.Matrix.MatrixSolver.solveGaussian(matrix78, doubleArray92);
        double[] doubleArray96 = com.operations.Matrix.MatrixSolver.solveGaussian(matrix72, doubleArray95);
        double[] doubleArray97 = com.operations.Matrix.MatrixSolver.solveGaussian(matrix70, doubleArray96);
        double[] doubleArray98 = com.operations.Matrix.MatrixSolver.solveGaussian(matrix17, doubleArray96);
        org.junit.Assert.assertNotNull(matrix1);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertArrayEquals(doubleArray4, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertArrayEquals(doubleArray7, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertNotNull(matrix12);
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertArrayEquals(doubleArray15, new double[] { 137.90576492663388d, (-1.0d) }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertArrayEquals(doubleArray16, new double[] { (-24.931892522286255d), (-135.63701830716116d) }, 1.0E-15);
        org.junit.Assert.assertNotNull(matrix17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertNotNull(matrixArray21);
        org.junit.Assert.assertNotNull(matrix23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 2 + "'", int24 == 2);
        org.junit.Assert.assertNotNull(matrix27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(matrix30);
        org.junit.Assert.assertNotNull(matrix32);
        org.junit.Assert.assertNotNull(matrix34);
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertArrayEquals(doubleArray37, new double[] { 137.90576492663388d, (-1.0d) }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertArrayEquals(doubleArray38, new double[] { (-24.931892522286255d), (-135.63701830716116d) }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertArrayEquals(doubleArray39, new double[] { 137.90221361711127d, 1.4069397643877004d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertArrayEquals(doubleArray40, new double[] { 137.90221361711127d, 1.4069397643877004d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertArrayEquals(doubleArray41, new double[] { (-22.56090290285694d), (-136.05148165384995d) }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertArrayEquals(doubleArray42, new double[] { (-128.00364213570185d), 14.536356206966005d }, 1.0E-15);
        org.junit.Assert.assertNotNull(matrix45);
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertArrayEquals(doubleArray48, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertArrayEquals(doubleArray51, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 2 + "'", int54 == 2);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 2 + "'", int55 == 2);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 2 + "'", int56 == 2);
        org.junit.Assert.assertNotNull(matrixArray57);
        org.junit.Assert.assertNotNull(matrix58);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 2 + "'", int59 == 2);
        org.junit.Assert.assertNotNull(matrix61);
        org.junit.Assert.assertNotNull(matrix64);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 2 + "'", int65 == 2);
        org.junit.Assert.assertNotNull(matrix67);
        org.junit.Assert.assertNotNull(matrixArray68);
        org.junit.Assert.assertNotNull(matrix69);
        org.junit.Assert.assertNotNull(matrix70);
        org.junit.Assert.assertNotNull(matrix72);
        org.junit.Assert.assertNotNull(matrix74);
        org.junit.Assert.assertNotNull(doubleArray75);
        org.junit.Assert.assertNotNull(matrix78);
        org.junit.Assert.assertNotNull(matrix80);
        org.junit.Assert.assertTrue("'" + int81 + "' != '" + 2 + "'", int81 == 2);
        org.junit.Assert.assertNotNull(matrix84);
        org.junit.Assert.assertNotNull(matrix86);
        org.junit.Assert.assertNotNull(matrix88);
        org.junit.Assert.assertNotNull(doubleArray91);
        org.junit.Assert.assertArrayEquals(doubleArray91, new double[] { 137.90576492663388d, (-1.0d) }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray92);
        org.junit.Assert.assertArrayEquals(doubleArray92, new double[] { (-24.931892522286255d), (-135.63701830716116d) }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray93);
        org.junit.Assert.assertArrayEquals(doubleArray93, new double[] { (-0.9999999999999858d), (-137.90576492663388d) }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray94);
        org.junit.Assert.assertArrayEquals(doubleArray94, new double[] { (-129.24700952206834d), 48.1062421064292d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray95);
        org.junit.Assert.assertArrayEquals(doubleArray95, new double[] { (-0.06232973130571564d), (-3.7262354653980627d) }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray96);
        org.junit.Assert.assertArrayEquals(doubleArray96, new double[] { (-2.9746876315367503d), (-2.2449831254994406d) }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray97);
        org.junit.Assert.assertArrayEquals(doubleArray97, new double[] { (-0.6513754485817702d), 0.03648522530186549d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray98);
        org.junit.Assert.assertArrayEquals(doubleArray98, new double[] { 0.7018848218483179d, (-0.10281346731442477d) }, 1.0E-15);
    }

    @Test
    public void test3299() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3299");
        // The following exception was thrown during execution in test generation
        try {
            com.operations.Matrix.Matrix matrix4 = com.operations.Matrix.MatrixUtils.generateRandomMatrix(0, (-1), 10, 32);
            org.junit.Assert.fail("Expected exception of type java.lang.NegativeArraySizeException; message: -1");
        } catch (java.lang.NegativeArraySizeException e) {
            // Expected exception.
        }
    }

    @Test
    public void test3300() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3300");
        com.operations.Matrix.Matrix matrix2 = com.operations.Matrix.MatrixTransformations.project2D(137.15495886388925d, 146781.22563870353d);
        com.operations.Matrix.Matrix matrix5 = com.operations.Matrix.MatrixTransformations.scale2D((double) 100.0f, (double) (short) -1);
        com.operations.Matrix.Matrix matrix7 = com.operations.Matrix.MatrixTransformations.rotate2D(350.0d);
        com.operations.Matrix.Matrix matrix9 = com.operations.Matrix.MatrixTransformations.rotate2D((double) (short) 100);
        double[] doubleArray12 = new double[] { 137.90576492663388d, (byte) -1 };
        double[] doubleArray13 = com.operations.Matrix.MatrixSolver.solveGaussian(matrix9, doubleArray12);
        double[] doubleArray14 = com.operations.Matrix.MatrixSolver.solveGaussian(matrix7, doubleArray13);
        com.operations.Matrix.Matrix matrix17 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0L, (double) (byte) 10);
        double[] doubleArray20 = new double[] { 10, 'a' };
        double[] doubleArray23 = new double[] { 10, 'a' };
        double[][] doubleArray24 = new double[][] { doubleArray20, doubleArray23 };
        com.operations.Matrix.Matrix matrix25 = new com.operations.Matrix.Matrix(doubleArray24);
        int int26 = matrix25.getCols();
        int int27 = matrix25.getCols();
        int int28 = matrix25.getCols();
        com.operations.Matrix.Matrix[] matrixArray29 = com.operations.Matrix.MatrixDecompositions.luDecomposition(matrix25);
        com.operations.Matrix.Matrix matrix30 = com.operations.Matrix.MatrixOperations.multiply(matrix17, matrix25);
        com.operations.Matrix.Matrix matrix32 = com.operations.Matrix.MatrixTransformations.rotate2D((double) (short) 100);
        boolean boolean34 = com.operations.Matrix.MatrixUtils.compare(matrix25, matrix32, (double) (byte) 0);
        double[] doubleArray37 = new double[] { 10, 'a' };
        double[] doubleArray40 = new double[] { 10, 'a' };
        double[][] doubleArray41 = new double[][] { doubleArray37, doubleArray40 };
        com.operations.Matrix.Matrix matrix42 = new com.operations.Matrix.Matrix(doubleArray41);
        com.operations.Matrix.Matrix matrix43 = new com.operations.Matrix.Matrix(doubleArray41);
        com.operations.Matrix.Matrix matrix44 = new com.operations.Matrix.Matrix(doubleArray41);
        boolean boolean46 = com.operations.Matrix.MatrixUtils.compare(matrix25, matrix44, (double) (-1));
        double[] doubleArray49 = new double[] { 10, 'a' };
        double[] doubleArray52 = new double[] { 10, 'a' };
        double[][] doubleArray53 = new double[][] { doubleArray49, doubleArray52 };
        com.operations.Matrix.Matrix matrix54 = new com.operations.Matrix.Matrix(doubleArray53);
        com.operations.Matrix.Matrix matrix55 = new com.operations.Matrix.Matrix(doubleArray53);
        boolean boolean56 = com.operations.Matrix.MatrixUtils.isSquare(matrix55);
        com.operations.Matrix.Matrix matrix57 = com.operations.Matrix.MatrixOperations.multiply(matrix44, matrix55);
        double[][] doubleArray58 = matrix55.getData();
        com.operations.Matrix.Matrix matrix59 = new com.operations.Matrix.Matrix(doubleArray58);
        com.operations.Matrix.Matrix matrix60 = new com.operations.Matrix.Matrix(doubleArray58);
        boolean boolean61 = com.operations.Matrix.MatrixUtils.isSymmetric(matrix60);
        com.operations.Matrix.Matrix matrix62 = com.operations.Matrix.MatrixOperations.subtract(matrix7, matrix60);
        com.operations.Matrix.Matrix matrix63 = com.operations.Matrix.MatrixOperations.add(matrix5, matrix60);
        com.operations.Matrix.Matrix matrix65 = com.operations.Matrix.MatrixOperations.scalarMultiply(matrix5, 693.7418269995209d);
        com.operations.Matrix.Matrix matrix67 = com.operations.Matrix.MatrixTransformations.rotate2D((double) (short) 100);
        double[] doubleArray70 = new double[] { 137.90576492663388d, (byte) -1 };
        double[] doubleArray71 = com.operations.Matrix.MatrixSolver.solveGaussian(matrix67, doubleArray70);
        com.operations.Matrix.Matrix matrix74 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0L, (double) (byte) 10);
        double[] doubleArray77 = new double[] { 10, 'a' };
        double[] doubleArray80 = new double[] { 10, 'a' };
        double[][] doubleArray81 = new double[][] { doubleArray77, doubleArray80 };
        com.operations.Matrix.Matrix matrix82 = new com.operations.Matrix.Matrix(doubleArray81);
        int int83 = matrix82.getCols();
        int int84 = matrix82.getCols();
        int int85 = matrix82.getCols();
        com.operations.Matrix.Matrix[] matrixArray86 = com.operations.Matrix.MatrixDecompositions.luDecomposition(matrix82);
        com.operations.Matrix.Matrix matrix87 = com.operations.Matrix.MatrixOperations.multiply(matrix74, matrix82);
        boolean boolean89 = com.operations.Matrix.MatrixUtils.compare(matrix67, matrix74, (double) (-1L));
        double[][] doubleArray90 = matrix67.getData();
        matrix67.print();
        com.operations.Matrix.Matrix matrix93 = com.operations.Matrix.MatrixOperations.scalarMultiply(matrix67, (double) (-1));
        boolean boolean95 = com.operations.Matrix.MatrixUtils.compare(matrix65, matrix67, 3.618031071604718d);
        com.operations.Matrix.Matrix matrix96 = com.operations.Matrix.MatrixOperations.transpose(matrix67);
        boolean boolean98 = com.operations.Matrix.MatrixUtils.compare(matrix2, matrix96, 263.4829471529277d);
        int int99 = matrix2.getCols();
        org.junit.Assert.assertNotNull(matrix2);
        org.junit.Assert.assertNotNull(matrix5);
        org.junit.Assert.assertNotNull(matrix7);
        org.junit.Assert.assertNotNull(matrix9);
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertArrayEquals(doubleArray12, new double[] { 137.90576492663388d, (-1.0d) }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertArrayEquals(doubleArray13, new double[] { (-24.931892522286255d), (-135.63701830716116d) }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertArrayEquals(doubleArray14, new double[] { (-0.9999999999999858d), (-137.90576492663388d) }, 1.0E-15);
        org.junit.Assert.assertNotNull(matrix17);
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertArrayEquals(doubleArray20, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertArrayEquals(doubleArray23, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 2 + "'", int26 == 2);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 2 + "'", int27 == 2);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 2 + "'", int28 == 2);
        org.junit.Assert.assertNotNull(matrixArray29);
        org.junit.Assert.assertNotNull(matrix30);
        org.junit.Assert.assertNotNull(matrix32);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertArrayEquals(doubleArray37, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertArrayEquals(doubleArray40, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertArrayEquals(doubleArray49, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertArrayEquals(doubleArray52, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + true + "'", boolean56 == true);
        org.junit.Assert.assertNotNull(matrix57);
        org.junit.Assert.assertNotNull(doubleArray58);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNotNull(matrix62);
        org.junit.Assert.assertNotNull(matrix63);
        org.junit.Assert.assertNotNull(matrix65);
        org.junit.Assert.assertNotNull(matrix67);
        org.junit.Assert.assertNotNull(doubleArray70);
        org.junit.Assert.assertArrayEquals(doubleArray70, new double[] { 137.90576492663388d, (-1.0d) }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray71);
        org.junit.Assert.assertArrayEquals(doubleArray71, new double[] { (-24.931892522286255d), (-135.63701830716116d) }, 1.0E-15);
        org.junit.Assert.assertNotNull(matrix74);
        org.junit.Assert.assertNotNull(doubleArray77);
        org.junit.Assert.assertArrayEquals(doubleArray77, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray80);
        org.junit.Assert.assertArrayEquals(doubleArray80, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray81);
        org.junit.Assert.assertTrue("'" + int83 + "' != '" + 2 + "'", int83 == 2);
        org.junit.Assert.assertTrue("'" + int84 + "' != '" + 2 + "'", int84 == 2);
        org.junit.Assert.assertTrue("'" + int85 + "' != '" + 2 + "'", int85 == 2);
        org.junit.Assert.assertNotNull(matrixArray86);
        org.junit.Assert.assertNotNull(matrix87);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + false + "'", boolean89 == false);
        org.junit.Assert.assertNotNull(doubleArray90);
        org.junit.Assert.assertNotNull(matrix93);
        org.junit.Assert.assertTrue("'" + boolean95 + "' != '" + false + "'", boolean95 == false);
        org.junit.Assert.assertNotNull(matrix96);
        org.junit.Assert.assertTrue("'" + boolean98 + "' != '" + false + "'", boolean98 == false);
        org.junit.Assert.assertTrue("'" + int99 + "' != '" + 2 + "'", int99 == 2);
    }

    @Test
    public void test3301() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3301");
        com.operations.Matrix.Matrix matrix1 = com.operations.Matrix.MatrixTransformations.rotate2D((double) (byte) 100);
        double double2 = com.operations.Matrix.MatrixUtils.frobeniusNorm(matrix1);
        com.operations.Matrix.Matrix matrix5 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0.0f, (double) (-1));
        com.operations.Matrix.Matrix matrix8 = com.operations.Matrix.MatrixTransformations.scale2D(146.4308710620817d, (double) 10L);
        com.operations.Matrix.Matrix matrix9 = com.operations.Matrix.MatrixOperations.multiply(matrix5, matrix8);
        com.operations.Matrix.Matrix matrix11 = com.operations.Matrix.MatrixTransformations.rotate2D((double) 1.0f);
        com.operations.Matrix.Matrix matrix14 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0L, (double) (byte) 10);
        int int15 = matrix14.getRows();
        com.operations.Matrix.Matrix matrix17 = com.operations.Matrix.MatrixOperations.scalarMultiply(matrix14, (double) 2);
        double double18 = com.operations.Matrix.MatrixUtils.frobeniusNorm(matrix14);
        com.operations.Matrix.Matrix matrix21 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0L, (double) (byte) 10);
        int int22 = matrix21.getRows();
        com.operations.Matrix.Matrix matrix24 = com.operations.Matrix.MatrixOperations.scalarMultiply(matrix21, (double) 2);
        com.operations.Matrix.Matrix matrix25 = com.operations.Matrix.MatrixOperations.subtract(matrix14, matrix24);
        com.operations.Matrix.Matrix matrix26 = com.operations.Matrix.MatrixOperations.add(matrix11, matrix24);
        matrix11.print();
        double[] doubleArray30 = new double[] { 10, 'a' };
        double[] doubleArray33 = new double[] { 10, 'a' };
        double[][] doubleArray34 = new double[][] { doubleArray30, doubleArray33 };
        com.operations.Matrix.Matrix matrix35 = new com.operations.Matrix.Matrix(doubleArray34);
        com.operations.Matrix.Matrix matrix36 = com.operations.Matrix.MatrixOperations.transpose(matrix35);
        com.operations.Matrix.Matrix matrix39 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0L, (double) (byte) 10);
        int int40 = matrix39.getRows();
        com.operations.Matrix.Matrix matrix46 = com.operations.Matrix.MatrixUtils.generateRandomMatrix(100, (int) (byte) 1, (int) '#', (int) '#', 1L);
        boolean boolean48 = com.operations.Matrix.MatrixUtils.compare(matrix39, matrix46, (double) 1.0f);
        com.operations.Matrix.Matrix matrix50 = com.operations.Matrix.MatrixOperations.scalarMultiply(matrix39, (double) 1L);
        matrix39.print();
        com.operations.Matrix.Matrix matrix52 = com.operations.Matrix.MatrixOperations.multiply(matrix36, matrix39);
        com.operations.Matrix.Matrix matrix53 = com.operations.Matrix.MatrixOperations.multiply(matrix11, matrix39);
        com.operations.Matrix.Matrix matrix54 = com.operations.Matrix.MatrixOperations.subtract(matrix5, matrix39);
        com.operations.Matrix.Matrix matrix55 = com.operations.Matrix.MatrixOperations.subtract(matrix1, matrix5);
        com.operations.Matrix.Matrix matrix57 = com.operations.Matrix.MatrixTransformations.rotate2D((double) (-1L));
        com.operations.Matrix.Matrix matrix59 = com.operations.Matrix.MatrixTransformations.rotate2D((double) (short) 100);
        double[] doubleArray62 = new double[] { 137.90576492663388d, (byte) -1 };
        double[] doubleArray63 = com.operations.Matrix.MatrixSolver.solveGaussian(matrix59, doubleArray62);
        double[] doubleArray64 = com.operations.Matrix.MatrixSolver.solveGaussian(matrix57, doubleArray62);
        com.operations.Matrix.Matrix matrix65 = com.operations.Matrix.MatrixOperations.add(matrix1, matrix57);
        boolean boolean66 = com.operations.Matrix.MatrixUtils.isSquare(matrix65);
        int int67 = matrix65.getRows();
        com.operations.Matrix.Matrix matrix69 = com.operations.Matrix.MatrixOperations.scalarMultiply(matrix65, (double) (byte) 10);
        com.operations.Matrix.Matrix matrix71 = com.operations.Matrix.MatrixOperations.scalarMultiply(matrix65, 52.009614495783374d);
        // The following exception was thrown during execution in test generation
        try {
            matrix65.setValue(97, (int) ' ', (double) (byte) 10);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: Index 97 out of bounds for length 2");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(matrix1);
        org.junit.Assert.assertTrue("'" + double2 + "' != '" + 1.414213562373095d + "'", double2 == 1.414213562373095d);
        org.junit.Assert.assertNotNull(matrix5);
        org.junit.Assert.assertNotNull(matrix8);
        org.junit.Assert.assertNotNull(matrix9);
        org.junit.Assert.assertNotNull(matrix11);
        org.junit.Assert.assertNotNull(matrix14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 2 + "'", int15 == 2);
        org.junit.Assert.assertNotNull(matrix17);
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 10.0d + "'", double18 == 10.0d);
        org.junit.Assert.assertNotNull(matrix21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 2 + "'", int22 == 2);
        org.junit.Assert.assertNotNull(matrix24);
        org.junit.Assert.assertNotNull(matrix25);
        org.junit.Assert.assertNotNull(matrix26);
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertArrayEquals(doubleArray30, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertArrayEquals(doubleArray33, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertNotNull(matrix36);
        org.junit.Assert.assertNotNull(matrix39);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 2 + "'", int40 == 2);
        org.junit.Assert.assertNotNull(matrix46);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(matrix50);
        org.junit.Assert.assertNotNull(matrix52);
        org.junit.Assert.assertNotNull(matrix53);
        org.junit.Assert.assertNotNull(matrix54);
        org.junit.Assert.assertNotNull(matrix55);
        org.junit.Assert.assertNotNull(matrix57);
        org.junit.Assert.assertNotNull(matrix59);
        org.junit.Assert.assertNotNull(doubleArray62);
        org.junit.Assert.assertArrayEquals(doubleArray62, new double[] { 137.90576492663388d, (-1.0d) }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray63);
        org.junit.Assert.assertArrayEquals(doubleArray63, new double[] { (-24.931892522286255d), (-135.63701830716116d) }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray64);
        org.junit.Assert.assertArrayEquals(doubleArray64, new double[] { 137.90221361711127d, 1.4069397643877004d }, 1.0E-15);
        org.junit.Assert.assertNotNull(matrix65);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + true + "'", boolean66 == true);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 2 + "'", int67 == 2);
        org.junit.Assert.assertNotNull(matrix69);
        org.junit.Assert.assertNotNull(matrix71);
    }

    @Test
    public void test3302() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3302");
        com.operations.Matrix.Matrix matrix2 = new com.operations.Matrix.Matrix((int) ' ', (int) (byte) 0);
        com.operations.Matrix.Matrix matrix4 = com.operations.Matrix.MatrixOperations.scalarMultiply(matrix2, 41.14922324710797d);
        org.junit.Assert.assertNotNull(matrix4);
    }

    @Test
    public void test3303() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3303");
        com.operations.Matrix.Matrix matrix2 = com.operations.Matrix.MatrixTransformations.scale2D((double) (short) 1, 0.0d);
        org.junit.Assert.assertNotNull(matrix2);
    }

    @Test
    public void test3304() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3304");
        com.operations.Matrix.Matrix matrix1 = com.operations.Matrix.MatrixTransformations.rotate2D((double) (short) 100);
        double[] doubleArray4 = new double[] { 137.90576492663388d, (byte) -1 };
        double[] doubleArray5 = com.operations.Matrix.MatrixSolver.solveGaussian(matrix1, doubleArray4);
        com.operations.Matrix.Matrix matrix8 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0L, (double) (byte) 10);
        double[] doubleArray11 = new double[] { 10, 'a' };
        double[] doubleArray14 = new double[] { 10, 'a' };
        double[][] doubleArray15 = new double[][] { doubleArray11, doubleArray14 };
        com.operations.Matrix.Matrix matrix16 = new com.operations.Matrix.Matrix(doubleArray15);
        int int17 = matrix16.getCols();
        int int18 = matrix16.getCols();
        int int19 = matrix16.getCols();
        com.operations.Matrix.Matrix[] matrixArray20 = com.operations.Matrix.MatrixDecompositions.luDecomposition(matrix16);
        com.operations.Matrix.Matrix matrix21 = com.operations.Matrix.MatrixOperations.multiply(matrix8, matrix16);
        boolean boolean23 = com.operations.Matrix.MatrixUtils.compare(matrix1, matrix8, (double) (-1L));
        double[] doubleArray26 = new double[] { 10, 'a' };
        double[] doubleArray29 = new double[] { 10, 'a' };
        double[][] doubleArray30 = new double[][] { doubleArray26, doubleArray29 };
        com.operations.Matrix.Matrix matrix31 = new com.operations.Matrix.Matrix(doubleArray30);
        int int32 = matrix31.getCols();
        int int33 = matrix31.getCols();
        boolean boolean34 = com.operations.Matrix.MatrixUtils.isSquare(matrix31);
        com.operations.Matrix.Matrix matrix35 = com.operations.Matrix.MatrixDecompositions.choleskyDecomposition(matrix31);
        com.operations.Matrix.Matrix matrix38 = com.operations.Matrix.MatrixTransformations.project2D(0.0d, (double) 0);
        com.operations.Matrix.Matrix matrix39 = com.operations.Matrix.MatrixOperations.subtract(matrix35, matrix38);
        com.operations.Matrix.Matrix matrix41 = com.operations.Matrix.MatrixOperations.scalarMultiply(matrix35, (double) 1.0f);
        com.operations.Matrix.Matrix matrix42 = com.operations.Matrix.MatrixOperations.subtract(matrix1, matrix41);
        boolean boolean43 = com.operations.Matrix.MatrixUtils.isSquare(matrix42);
        // The following exception was thrown during execution in test generation
        try {
            double double46 = matrix42.getValue(0, (int) '#');
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(matrix1);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertArrayEquals(doubleArray4, new double[] { 137.90576492663388d, (-1.0d) }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertArrayEquals(doubleArray5, new double[] { (-24.931892522286255d), (-135.63701830716116d) }, 1.0E-15);
        org.junit.Assert.assertNotNull(matrix8);
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertArrayEquals(doubleArray11, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertArrayEquals(doubleArray14, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 2 + "'", int17 == 2);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 2 + "'", int18 == 2);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 2 + "'", int19 == 2);
        org.junit.Assert.assertNotNull(matrixArray20);
        org.junit.Assert.assertNotNull(matrix21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertArrayEquals(doubleArray26, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertArrayEquals(doubleArray29, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 2 + "'", int32 == 2);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 2 + "'", int33 == 2);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertNotNull(matrix35);
        org.junit.Assert.assertNotNull(matrix38);
        org.junit.Assert.assertNotNull(matrix39);
        org.junit.Assert.assertNotNull(matrix41);
        org.junit.Assert.assertNotNull(matrix42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
    }

    @Test
    public void test3305() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3305");
        com.operations.Matrix.Matrix matrix1 = com.operations.Matrix.MatrixTransformations.rotate2D((double) '4');
        double[] doubleArray4 = new double[] { 10, 'a' };
        double[] doubleArray7 = new double[] { 10, 'a' };
        double[][] doubleArray8 = new double[][] { doubleArray4, doubleArray7 };
        com.operations.Matrix.Matrix matrix9 = new com.operations.Matrix.Matrix(doubleArray8);
        com.operations.Matrix.Matrix matrix10 = new com.operations.Matrix.Matrix(doubleArray8);
        com.operations.Matrix.Matrix matrix12 = com.operations.Matrix.MatrixTransformations.rotate2D((double) (short) 100);
        double[] doubleArray15 = new double[] { 137.90576492663388d, (byte) -1 };
        double[] doubleArray16 = com.operations.Matrix.MatrixSolver.solveGaussian(matrix12, doubleArray15);
        com.operations.Matrix.Matrix matrix17 = com.operations.Matrix.MatrixOperations.add(matrix10, matrix12);
        boolean boolean18 = com.operations.Matrix.MatrixUtils.isSymmetric(matrix17);
        boolean boolean20 = com.operations.Matrix.MatrixUtils.compare(matrix1, matrix17, 364.0054944640259d);
        com.operations.Matrix.Matrix[] matrixArray21 = com.operations.Matrix.MatrixDecompositions.luDecomposition(matrix17);
        com.operations.Matrix.Matrix matrix24 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0.0f, 350.0d);
        com.operations.Matrix.Matrix matrix27 = com.operations.Matrix.MatrixTransformations.project2D(0.0d, (double) 0);
        com.operations.Matrix.Matrix[] matrixArray28 = com.operations.Matrix.MatrixDecompositions.luDecomposition(matrix27);
        com.operations.Matrix.Matrix matrix31 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0L, (double) (byte) 10);
        int int32 = matrix31.getRows();
        com.operations.Matrix.Matrix matrix34 = com.operations.Matrix.MatrixOperations.scalarMultiply(matrix31, (double) 2);
        double double35 = com.operations.Matrix.MatrixUtils.frobeniusNorm(matrix31);
        int int36 = matrix31.getRows();
        com.operations.Matrix.Matrix matrix37 = com.operations.Matrix.MatrixOperations.transpose(matrix31);
        com.operations.Matrix.Matrix matrix38 = com.operations.Matrix.MatrixOperations.multiply(matrix27, matrix37);
        com.operations.Matrix.Matrix matrix39 = com.operations.Matrix.MatrixOperations.multiply(matrix24, matrix37);
        double[][] doubleArray40 = matrix39.getData();
        com.operations.Matrix.Matrix matrix41 = new com.operations.Matrix.Matrix(doubleArray40);
        com.operations.Matrix.Matrix matrix42 = new com.operations.Matrix.Matrix(doubleArray40);
        com.operations.Matrix.Matrix matrix43 = com.operations.Matrix.MatrixOperations.subtract(matrix17, matrix42);
        com.operations.Matrix.Matrix matrix46 = com.operations.Matrix.MatrixTransformations.project2D(3.618031071604718d, 100.0d);
        com.operations.Matrix.Matrix matrix47 = com.operations.Matrix.MatrixOperations.add(matrix42, matrix46);
        // The following exception was thrown during execution in test generation
        try {
            matrix47.setValue((-1), (int) (byte) 10, 6.0d);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: Index -1 out of bounds for length 2");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(matrix1);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertArrayEquals(doubleArray4, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertArrayEquals(doubleArray7, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertNotNull(matrix12);
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertArrayEquals(doubleArray15, new double[] { 137.90576492663388d, (-1.0d) }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertArrayEquals(doubleArray16, new double[] { (-24.931892522286255d), (-135.63701830716116d) }, 1.0E-15);
        org.junit.Assert.assertNotNull(matrix17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertNotNull(matrixArray21);
        org.junit.Assert.assertNotNull(matrix24);
        org.junit.Assert.assertNotNull(matrix27);
        org.junit.Assert.assertNotNull(matrixArray28);
        org.junit.Assert.assertNotNull(matrix31);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 2 + "'", int32 == 2);
        org.junit.Assert.assertNotNull(matrix34);
        org.junit.Assert.assertTrue("'" + double35 + "' != '" + 10.0d + "'", double35 == 10.0d);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 2 + "'", int36 == 2);
        org.junit.Assert.assertNotNull(matrix37);
        org.junit.Assert.assertNotNull(matrix38);
        org.junit.Assert.assertNotNull(matrix39);
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertNotNull(matrix43);
        org.junit.Assert.assertNotNull(matrix46);
        org.junit.Assert.assertNotNull(matrix47);
    }

    @Test
    public void test3306() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3306");
        com.operations.Matrix.Matrix matrix5 = com.operations.Matrix.MatrixUtils.generateRandomMatrix((int) (short) 10, 2, (int) 'a', 10, (long) (byte) 0);
        boolean boolean6 = com.operations.Matrix.MatrixUtils.isSymmetric(matrix5);
        int int7 = matrix5.getRows();
        org.junit.Assert.assertNotNull(matrix5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 10 + "'", int7 == 10);
    }

    @Test
    public void test3307() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3307");
        com.operations.Matrix.Matrix matrix2 = com.operations.Matrix.MatrixTransformations.project2D((double) '#', 364.0054944640259d);
        com.operations.Matrix.Matrix matrix3 = com.operations.Matrix.MatrixDecompositions.choleskyDecomposition(matrix2);
        com.operations.Matrix.Matrix matrix5 = com.operations.Matrix.MatrixTransformations.rotate2D(100.0d);
        int int6 = matrix5.getCols();
        matrix5.print();
        com.operations.Matrix.Matrix matrix9 = com.operations.Matrix.MatrixTransformations.rotate2D(100.0d);
        int int10 = matrix9.getRows();
        com.operations.Matrix.Matrix matrix11 = com.operations.Matrix.MatrixOperations.multiply(matrix5, matrix9);
        boolean boolean13 = com.operations.Matrix.MatrixUtils.compare(matrix2, matrix9, 1.0d);
        com.operations.Matrix.Matrix matrix14 = com.operations.Matrix.MatrixDecompositions.choleskyDecomposition(matrix2);
        org.junit.Assert.assertNotNull(matrix2);
        org.junit.Assert.assertNotNull(matrix3);
        org.junit.Assert.assertNotNull(matrix5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 2 + "'", int6 == 2);
        org.junit.Assert.assertNotNull(matrix9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 2 + "'", int10 == 2);
        org.junit.Assert.assertNotNull(matrix11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(matrix14);
    }

    @Test
    public void test3308() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3308");
        com.operations.Matrix.Matrix matrix2 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0.0f, (double) (-1));
        com.operations.Matrix.Matrix matrix4 = com.operations.Matrix.MatrixTransformations.rotate2D((double) (byte) 100);
        double double5 = com.operations.Matrix.MatrixUtils.frobeniusNorm(matrix4);
        com.operations.Matrix.Matrix matrix8 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0.0f, (double) (-1));
        com.operations.Matrix.Matrix matrix11 = com.operations.Matrix.MatrixTransformations.scale2D(146.4308710620817d, (double) 10L);
        com.operations.Matrix.Matrix matrix12 = com.operations.Matrix.MatrixOperations.multiply(matrix8, matrix11);
        com.operations.Matrix.Matrix matrix14 = com.operations.Matrix.MatrixTransformations.rotate2D((double) 1.0f);
        com.operations.Matrix.Matrix matrix17 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0L, (double) (byte) 10);
        int int18 = matrix17.getRows();
        com.operations.Matrix.Matrix matrix20 = com.operations.Matrix.MatrixOperations.scalarMultiply(matrix17, (double) 2);
        double double21 = com.operations.Matrix.MatrixUtils.frobeniusNorm(matrix17);
        com.operations.Matrix.Matrix matrix24 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0L, (double) (byte) 10);
        int int25 = matrix24.getRows();
        com.operations.Matrix.Matrix matrix27 = com.operations.Matrix.MatrixOperations.scalarMultiply(matrix24, (double) 2);
        com.operations.Matrix.Matrix matrix28 = com.operations.Matrix.MatrixOperations.subtract(matrix17, matrix27);
        com.operations.Matrix.Matrix matrix29 = com.operations.Matrix.MatrixOperations.add(matrix14, matrix27);
        matrix14.print();
        double[] doubleArray33 = new double[] { 10, 'a' };
        double[] doubleArray36 = new double[] { 10, 'a' };
        double[][] doubleArray37 = new double[][] { doubleArray33, doubleArray36 };
        com.operations.Matrix.Matrix matrix38 = new com.operations.Matrix.Matrix(doubleArray37);
        com.operations.Matrix.Matrix matrix39 = com.operations.Matrix.MatrixOperations.transpose(matrix38);
        com.operations.Matrix.Matrix matrix42 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0L, (double) (byte) 10);
        int int43 = matrix42.getRows();
        com.operations.Matrix.Matrix matrix49 = com.operations.Matrix.MatrixUtils.generateRandomMatrix(100, (int) (byte) 1, (int) '#', (int) '#', 1L);
        boolean boolean51 = com.operations.Matrix.MatrixUtils.compare(matrix42, matrix49, (double) 1.0f);
        com.operations.Matrix.Matrix matrix53 = com.operations.Matrix.MatrixOperations.scalarMultiply(matrix42, (double) 1L);
        matrix42.print();
        com.operations.Matrix.Matrix matrix55 = com.operations.Matrix.MatrixOperations.multiply(matrix39, matrix42);
        com.operations.Matrix.Matrix matrix56 = com.operations.Matrix.MatrixOperations.multiply(matrix14, matrix42);
        com.operations.Matrix.Matrix matrix57 = com.operations.Matrix.MatrixOperations.subtract(matrix8, matrix42);
        com.operations.Matrix.Matrix matrix58 = com.operations.Matrix.MatrixOperations.subtract(matrix4, matrix8);
        com.operations.Matrix.Matrix matrix60 = com.operations.Matrix.MatrixTransformations.rotate2D((double) (-1L));
        com.operations.Matrix.Matrix matrix62 = com.operations.Matrix.MatrixTransformations.rotate2D((double) (short) 100);
        double[] doubleArray65 = new double[] { 137.90576492663388d, (byte) -1 };
        double[] doubleArray66 = com.operations.Matrix.MatrixSolver.solveGaussian(matrix62, doubleArray65);
        double[] doubleArray67 = com.operations.Matrix.MatrixSolver.solveGaussian(matrix60, doubleArray65);
        com.operations.Matrix.Matrix matrix68 = com.operations.Matrix.MatrixOperations.add(matrix4, matrix60);
        boolean boolean70 = com.operations.Matrix.MatrixUtils.compare(matrix2, matrix4, (double) 1.0f);
        boolean boolean71 = com.operations.Matrix.MatrixUtils.isSymmetric(matrix4);
        com.operations.Matrix.Matrix matrix74 = com.operations.Matrix.MatrixTransformations.project2D((double) 10.0f, (double) 35);
        double double77 = matrix74.getValue(0, (int) (byte) 0);
        boolean boolean79 = com.operations.Matrix.MatrixUtils.compare(matrix4, matrix74, 35.0d);
        // The following exception was thrown during execution in test generation
        try {
            double double82 = matrix74.getValue((int) (byte) 100, 100);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(matrix2);
        org.junit.Assert.assertNotNull(matrix4);
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 1.414213562373095d + "'", double5 == 1.414213562373095d);
        org.junit.Assert.assertNotNull(matrix8);
        org.junit.Assert.assertNotNull(matrix11);
        org.junit.Assert.assertNotNull(matrix12);
        org.junit.Assert.assertNotNull(matrix14);
        org.junit.Assert.assertNotNull(matrix17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 2 + "'", int18 == 2);
        org.junit.Assert.assertNotNull(matrix20);
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 10.0d + "'", double21 == 10.0d);
        org.junit.Assert.assertNotNull(matrix24);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 2 + "'", int25 == 2);
        org.junit.Assert.assertNotNull(matrix27);
        org.junit.Assert.assertNotNull(matrix28);
        org.junit.Assert.assertNotNull(matrix29);
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertArrayEquals(doubleArray33, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertArrayEquals(doubleArray36, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertNotNull(matrix39);
        org.junit.Assert.assertNotNull(matrix42);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 2 + "'", int43 == 2);
        org.junit.Assert.assertNotNull(matrix49);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(matrix53);
        org.junit.Assert.assertNotNull(matrix55);
        org.junit.Assert.assertNotNull(matrix56);
        org.junit.Assert.assertNotNull(matrix57);
        org.junit.Assert.assertNotNull(matrix58);
        org.junit.Assert.assertNotNull(matrix60);
        org.junit.Assert.assertNotNull(matrix62);
        org.junit.Assert.assertNotNull(doubleArray65);
        org.junit.Assert.assertArrayEquals(doubleArray65, new double[] { 137.90576492663388d, (-1.0d) }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray66);
        org.junit.Assert.assertArrayEquals(doubleArray66, new double[] { (-24.931892522286255d), (-135.63701830716116d) }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray67);
        org.junit.Assert.assertArrayEquals(doubleArray67, new double[] { 137.90221361711127d, 1.4069397643877004d }, 1.0E-15);
        org.junit.Assert.assertNotNull(matrix68);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + true + "'", boolean70 == true);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertNotNull(matrix74);
        org.junit.Assert.assertTrue("'" + double77 + "' != '" + 10.0d + "'", double77 == 10.0d);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
    }

    @Test
    public void test3309() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3309");
        com.operations.Matrix.Matrix matrix5 = com.operations.Matrix.MatrixUtils.generateRandomMatrix(100, (int) (byte) 1, (int) '#', (int) '#', 1L);
        double double8 = matrix5.getValue((int) '4', 0);
        matrix5.print();
        com.operations.Matrix.Matrix matrix10 = com.operations.Matrix.MatrixOperations.transpose(matrix5);
        matrix5.print();
        boolean boolean12 = com.operations.Matrix.MatrixUtils.isSquare(matrix5);
        com.operations.Matrix.Matrix matrix17 = com.operations.Matrix.MatrixUtils.generateRandomMatrix((int) ' ', 2, (int) ' ', 10);
        // The following exception was thrown during execution in test generation
        try {
            com.operations.Matrix.Matrix matrix18 = com.operations.Matrix.MatrixOperations.subtract(matrix5, matrix17);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Matrices must have the same dimensions for subtraction.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(matrix5);
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 35.0d + "'", double8 == 35.0d);
        org.junit.Assert.assertNotNull(matrix10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(matrix17);
    }

    @Test
    public void test3310() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3310");
        com.operations.Matrix.Matrix matrix1 = com.operations.Matrix.MatrixTransformations.rotate2D(1.6135503908876414d);
        org.junit.Assert.assertNotNull(matrix1);
    }

    @Test
    public void test3311() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3311");
        com.operations.Matrix.Matrix matrix2 = com.operations.Matrix.MatrixTransformations.scale2D(0.0d, 391.8840992892044d);
        org.junit.Assert.assertNotNull(matrix2);
    }

    @Test
    public void test3312() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3312");
        com.operations.Matrix.Matrix matrix2 = com.operations.Matrix.MatrixTransformations.scale2D((double) (-1L), (double) '4');
        // The following exception was thrown during execution in test generation
        try {
            double double5 = matrix2.getValue((int) (byte) 0, (-1));
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(matrix2);
    }

    @Test
    public void test3313() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3313");
        double[] doubleArray2 = new double[] { 10, 'a' };
        double[] doubleArray5 = new double[] { 10, 'a' };
        double[][] doubleArray6 = new double[][] { doubleArray2, doubleArray5 };
        com.operations.Matrix.Matrix matrix7 = new com.operations.Matrix.Matrix(doubleArray6);
        com.operations.Matrix.Matrix matrix8 = new com.operations.Matrix.Matrix(doubleArray6);
        com.operations.Matrix.Matrix matrix10 = com.operations.Matrix.MatrixTransformations.rotate2D((double) (short) 100);
        double[] doubleArray13 = new double[] { 137.90576492663388d, (byte) -1 };
        double[] doubleArray14 = com.operations.Matrix.MatrixSolver.solveGaussian(matrix10, doubleArray13);
        com.operations.Matrix.Matrix matrix15 = com.operations.Matrix.MatrixOperations.add(matrix8, matrix10);
        com.operations.Matrix.Matrix matrix16 = com.operations.Matrix.MatrixOperations.transpose(matrix10);
        int int17 = matrix10.getCols();
        com.operations.Matrix.Matrix matrix20 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0L, (double) (byte) 10);
        double[] doubleArray23 = new double[] { 10, 'a' };
        double[] doubleArray26 = new double[] { 10, 'a' };
        double[][] doubleArray27 = new double[][] { doubleArray23, doubleArray26 };
        com.operations.Matrix.Matrix matrix28 = new com.operations.Matrix.Matrix(doubleArray27);
        int int29 = matrix28.getCols();
        int int30 = matrix28.getCols();
        int int31 = matrix28.getCols();
        com.operations.Matrix.Matrix[] matrixArray32 = com.operations.Matrix.MatrixDecompositions.luDecomposition(matrix28);
        com.operations.Matrix.Matrix matrix33 = com.operations.Matrix.MatrixOperations.multiply(matrix20, matrix28);
        com.operations.Matrix.Matrix matrix35 = com.operations.Matrix.MatrixTransformations.rotate2D((double) (short) 100);
        boolean boolean37 = com.operations.Matrix.MatrixUtils.compare(matrix28, matrix35, (double) (byte) 0);
        boolean boolean38 = com.operations.Matrix.MatrixUtils.isSymmetric(matrix35);
        boolean boolean39 = com.operations.Matrix.MatrixUtils.isSquare(matrix35);
        com.operations.Matrix.Matrix matrix41 = com.operations.Matrix.MatrixTransformations.rotate2D((double) (short) 100);
        boolean boolean43 = com.operations.Matrix.MatrixUtils.compare(matrix35, matrix41, (double) (byte) 100);
        matrix41.print();
        com.operations.Matrix.Matrix matrix45 = com.operations.Matrix.MatrixOperations.add(matrix10, matrix41);
        int int46 = matrix45.getCols();
        double double49 = matrix45.getValue(1, 0);
        com.operations.Matrix.Matrix matrix52 = com.operations.Matrix.MatrixTransformations.project2D(10.0d, (double) 1);
        double[][] doubleArray53 = matrix52.getData();
        double[] doubleArray56 = new double[] { 10, 'a' };
        double[] doubleArray59 = new double[] { 10, 'a' };
        double[][] doubleArray60 = new double[][] { doubleArray56, doubleArray59 };
        com.operations.Matrix.Matrix matrix61 = new com.operations.Matrix.Matrix(doubleArray60);
        com.operations.Matrix.Matrix matrix62 = new com.operations.Matrix.Matrix(doubleArray60);
        com.operations.Matrix.Matrix matrix64 = com.operations.Matrix.MatrixTransformations.rotate2D((double) (short) 100);
        double[] doubleArray67 = new double[] { 137.90576492663388d, (byte) -1 };
        double[] doubleArray68 = com.operations.Matrix.MatrixSolver.solveGaussian(matrix64, doubleArray67);
        com.operations.Matrix.Matrix matrix69 = com.operations.Matrix.MatrixOperations.add(matrix62, matrix64);
        double[][] doubleArray70 = matrix62.getData();
        int int71 = matrix62.getCols();
        double[][] doubleArray72 = matrix62.getData();
        com.operations.Matrix.Matrix matrix73 = com.operations.Matrix.MatrixOperations.add(matrix52, matrix62);
        com.operations.Matrix.Matrix matrix74 = com.operations.Matrix.MatrixOperations.subtract(matrix45, matrix52);
        double double77 = matrix74.getValue((int) (short) 0, 0);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertArrayEquals(doubleArray2, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertArrayEquals(doubleArray5, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertNotNull(matrix10);
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertArrayEquals(doubleArray13, new double[] { 137.90576492663388d, (-1.0d) }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertArrayEquals(doubleArray14, new double[] { (-24.931892522286255d), (-135.63701830716116d) }, 1.0E-15);
        org.junit.Assert.assertNotNull(matrix15);
        org.junit.Assert.assertNotNull(matrix16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 2 + "'", int17 == 2);
        org.junit.Assert.assertNotNull(matrix20);
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertArrayEquals(doubleArray23, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertArrayEquals(doubleArray26, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 2 + "'", int29 == 2);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 2 + "'", int30 == 2);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 2 + "'", int31 == 2);
        org.junit.Assert.assertNotNull(matrixArray32);
        org.junit.Assert.assertNotNull(matrix33);
        org.junit.Assert.assertNotNull(matrix35);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertNotNull(matrix41);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertNotNull(matrix45);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 2 + "'", int46 == 2);
        org.junit.Assert.assertTrue("'" + double49 + "' != '" + 1.969615506024416d + "'", double49 == 1.969615506024416d);
        org.junit.Assert.assertNotNull(matrix52);
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertNotNull(doubleArray56);
        org.junit.Assert.assertArrayEquals(doubleArray56, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray59);
        org.junit.Assert.assertArrayEquals(doubleArray59, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray60);
        org.junit.Assert.assertNotNull(matrix64);
        org.junit.Assert.assertNotNull(doubleArray67);
        org.junit.Assert.assertArrayEquals(doubleArray67, new double[] { 137.90576492663388d, (-1.0d) }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray68);
        org.junit.Assert.assertArrayEquals(doubleArray68, new double[] { (-24.931892522286255d), (-135.63701830716116d) }, 1.0E-15);
        org.junit.Assert.assertNotNull(matrix69);
        org.junit.Assert.assertNotNull(doubleArray70);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 2 + "'", int71 == 2);
        org.junit.Assert.assertNotNull(doubleArray72);
        org.junit.Assert.assertNotNull(matrix73);
        org.junit.Assert.assertNotNull(matrix74);
        org.junit.Assert.assertTrue("'" + double77 + "' != '" + (-10.34729635533386d) + "'", double77 == (-10.34729635533386d));
    }

    @Test
    public void test3314() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3314");
        com.operations.Matrix.Matrix matrix2 = new com.operations.Matrix.Matrix(0, (int) '4');
        // The following exception was thrown during execution in test generation
        try {
            com.operations.Matrix.Matrix[] matrixArray3 = com.operations.Matrix.MatrixDecompositions.luDecomposition(matrix2);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Matrix must be square for LU decomposition.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test3315() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3315");
        com.operations.Matrix.Matrix matrix2 = com.operations.Matrix.MatrixTransformations.scale2D((double) 1.0f, (double) 1);
        com.operations.Matrix.Matrix matrix4 = com.operations.Matrix.MatrixTransformations.rotate2D((double) 1.0f);
        com.operations.Matrix.Matrix matrix7 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0L, (double) (byte) 10);
        int int8 = matrix7.getRows();
        com.operations.Matrix.Matrix matrix10 = com.operations.Matrix.MatrixOperations.scalarMultiply(matrix7, (double) 2);
        double double11 = com.operations.Matrix.MatrixUtils.frobeniusNorm(matrix7);
        com.operations.Matrix.Matrix matrix14 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0L, (double) (byte) 10);
        int int15 = matrix14.getRows();
        com.operations.Matrix.Matrix matrix17 = com.operations.Matrix.MatrixOperations.scalarMultiply(matrix14, (double) 2);
        com.operations.Matrix.Matrix matrix18 = com.operations.Matrix.MatrixOperations.subtract(matrix7, matrix17);
        com.operations.Matrix.Matrix matrix19 = com.operations.Matrix.MatrixOperations.add(matrix4, matrix17);
        boolean boolean21 = com.operations.Matrix.MatrixUtils.compare(matrix2, matrix4, (double) (byte) -1);
        com.operations.Matrix.Matrix matrix22 = com.operations.Matrix.MatrixOperations.transpose(matrix4);
        double double25 = matrix22.getValue(0, (int) (short) 0);
        com.operations.Matrix.Matrix matrix26 = com.operations.Matrix.MatrixOperations.transpose(matrix22);
        int int27 = matrix26.getCols();
        com.operations.Matrix.Matrix matrix30 = com.operations.Matrix.MatrixTransformations.scale2D(137.15495886388925d, 100.00499987500625d);
        com.operations.Matrix.Matrix matrix31 = com.operations.Matrix.MatrixOperations.subtract(matrix26, matrix30);
        com.operations.Matrix.Matrix matrix33 = com.operations.Matrix.MatrixOperations.scalarMultiply(matrix31, 100.00000152293244d);
        com.operations.Matrix.Matrix matrix34 = null;
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean36 = com.operations.Matrix.MatrixUtils.compare(matrix33, matrix34, 138.5659917737053d);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot invoke \"com.operations.Matrix.Matrix.getRows()\" because \"b\" is null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(matrix2);
        org.junit.Assert.assertNotNull(matrix4);
        org.junit.Assert.assertNotNull(matrix7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 2 + "'", int8 == 2);
        org.junit.Assert.assertNotNull(matrix10);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 10.0d + "'", double11 == 10.0d);
        org.junit.Assert.assertNotNull(matrix14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 2 + "'", int15 == 2);
        org.junit.Assert.assertNotNull(matrix17);
        org.junit.Assert.assertNotNull(matrix18);
        org.junit.Assert.assertNotNull(matrix19);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(matrix22);
        org.junit.Assert.assertTrue("'" + double25 + "' != '" + 0.9998476951563913d + "'", double25 == 0.9998476951563913d);
        org.junit.Assert.assertNotNull(matrix26);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 2 + "'", int27 == 2);
        org.junit.Assert.assertNotNull(matrix30);
        org.junit.Assert.assertNotNull(matrix31);
        org.junit.Assert.assertNotNull(matrix33);
    }

    @Test
    public void test3316() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3316");
        com.operations.Matrix.Matrix matrix1 = com.operations.Matrix.MatrixTransformations.rotate2D((double) 1.0f);
        com.operations.Matrix.Matrix matrix4 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0L, (double) (byte) 10);
        int int5 = matrix4.getRows();
        com.operations.Matrix.Matrix matrix7 = com.operations.Matrix.MatrixOperations.scalarMultiply(matrix4, (double) 2);
        boolean boolean9 = com.operations.Matrix.MatrixUtils.compare(matrix1, matrix7, (double) 10.0f);
        com.operations.Matrix.Matrix[] matrixArray10 = com.operations.Matrix.MatrixDecompositions.luDecomposition(matrix7);
        com.operations.Matrix.Matrix matrix12 = com.operations.Matrix.MatrixOperations.scalarMultiply(matrix7, 20.0d);
        com.operations.Matrix.Matrix matrix14 = com.operations.Matrix.MatrixTransformations.rotate2D(350.0d);
        com.operations.Matrix.Matrix matrix16 = com.operations.Matrix.MatrixTransformations.rotate2D((double) (short) 100);
        double[] doubleArray19 = new double[] { 137.90576492663388d, (byte) -1 };
        double[] doubleArray20 = com.operations.Matrix.MatrixSolver.solveGaussian(matrix16, doubleArray19);
        double[] doubleArray21 = com.operations.Matrix.MatrixSolver.solveGaussian(matrix14, doubleArray20);
        com.operations.Matrix.Matrix matrix22 = com.operations.Matrix.MatrixOperations.multiply(matrix12, matrix14);
        int int23 = matrix12.getCols();
        org.junit.Assert.assertNotNull(matrix1);
        org.junit.Assert.assertNotNull(matrix4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 2 + "'", int5 == 2);
        org.junit.Assert.assertNotNull(matrix7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(matrixArray10);
        org.junit.Assert.assertNotNull(matrix12);
        org.junit.Assert.assertNotNull(matrix14);
        org.junit.Assert.assertNotNull(matrix16);
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertArrayEquals(doubleArray19, new double[] { 137.90576492663388d, (-1.0d) }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertArrayEquals(doubleArray20, new double[] { (-24.931892522286255d), (-135.63701830716116d) }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertArrayEquals(doubleArray21, new double[] { (-0.9999999999999858d), (-137.90576492663388d) }, 1.0E-15);
        org.junit.Assert.assertNotNull(matrix22);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 2 + "'", int23 == 2);
    }

    @Test
    public void test3317() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3317");
        com.operations.Matrix.Matrix matrix1 = com.operations.Matrix.MatrixTransformations.rotate2D(100.0d);
        int int2 = matrix1.getCols();
        int int3 = matrix1.getRows();
        com.operations.Matrix.Matrix matrix6 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0L, (double) (byte) 10);
        int int7 = matrix6.getRows();
        com.operations.Matrix.Matrix matrix9 = com.operations.Matrix.MatrixOperations.scalarMultiply(matrix6, (double) 2);
        double double10 = com.operations.Matrix.MatrixUtils.frobeniusNorm(matrix6);
        com.operations.Matrix.Matrix matrix11 = com.operations.Matrix.MatrixOperations.add(matrix1, matrix6);
        int int12 = matrix6.getRows();
        org.junit.Assert.assertNotNull(matrix1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 2 + "'", int2 == 2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 2 + "'", int3 == 2);
        org.junit.Assert.assertNotNull(matrix6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 2 + "'", int7 == 2);
        org.junit.Assert.assertNotNull(matrix9);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 10.0d + "'", double10 == 10.0d);
        org.junit.Assert.assertNotNull(matrix11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 2 + "'", int12 == 2);
    }

    @Test
    public void test3318() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3318");
        com.operations.Matrix.Matrix matrix2 = com.operations.Matrix.MatrixTransformations.scale2D((double) (byte) 0, 145.11374848717816d);
        org.junit.Assert.assertNotNull(matrix2);
    }

    @Test
    public void test3319() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3319");
        // The following exception was thrown during execution in test generation
        try {
            com.operations.Matrix.Matrix matrix5 = com.operations.Matrix.MatrixUtils.generateRandomMatrix((int) (byte) -1, (int) (byte) 100, (int) (short) 0, (int) (byte) 10, (long) (-1));
            org.junit.Assert.fail("Expected exception of type java.lang.NegativeArraySizeException; message: -1");
        } catch (java.lang.NegativeArraySizeException e) {
            // Expected exception.
        }
    }

    @Test
    public void test3320() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3320");
        com.operations.Matrix.Matrix matrix1 = com.operations.Matrix.MatrixTransformations.rotate2D(1.414213562373095d);
        com.operations.Matrix.Matrix matrix3 = com.operations.Matrix.MatrixOperations.scalarMultiply(matrix1, 21.023651153076518d);
        com.operations.Matrix.Matrix matrix6 = com.operations.Matrix.MatrixTransformations.scale2D((double) (byte) 10, (double) 10);
        double[] doubleArray9 = new double[] { 10, 'a' };
        double[] doubleArray12 = new double[] { 10, 'a' };
        double[][] doubleArray13 = new double[][] { doubleArray9, doubleArray12 };
        com.operations.Matrix.Matrix matrix14 = new com.operations.Matrix.Matrix(doubleArray13);
        com.operations.Matrix.Matrix matrix15 = new com.operations.Matrix.Matrix(doubleArray13);
        boolean boolean16 = com.operations.Matrix.MatrixUtils.isSquare(matrix15);
        double[] doubleArray19 = new double[] { 10, 'a' };
        double[] doubleArray22 = new double[] { 10, 'a' };
        double[][] doubleArray23 = new double[][] { doubleArray19, doubleArray22 };
        com.operations.Matrix.Matrix matrix24 = new com.operations.Matrix.Matrix(doubleArray23);
        int int25 = matrix24.getCols();
        int int26 = matrix24.getCols();
        matrix24.print();
        double[] doubleArray30 = new double[] { 10, 'a' };
        double[] doubleArray33 = new double[] { 10, 'a' };
        double[][] doubleArray34 = new double[][] { doubleArray30, doubleArray33 };
        com.operations.Matrix.Matrix matrix35 = new com.operations.Matrix.Matrix(doubleArray34);
        boolean boolean37 = com.operations.Matrix.MatrixUtils.compare(matrix24, matrix35, (double) (-1));
        com.operations.Matrix.Matrix matrix38 = com.operations.Matrix.MatrixOperations.subtract(matrix15, matrix35);
        com.operations.Matrix.Matrix[] matrixArray39 = com.operations.Matrix.MatrixDecompositions.luDecomposition(matrix38);
        double[][] doubleArray40 = matrix38.getData();
        com.operations.Matrix.Matrix matrix41 = new com.operations.Matrix.Matrix(doubleArray40);
        com.operations.Matrix.Matrix matrix42 = com.operations.Matrix.MatrixOperations.multiply(matrix6, matrix41);
        boolean boolean43 = com.operations.Matrix.MatrixUtils.isSymmetric(matrix6);
        com.operations.Matrix.Matrix matrix45 = com.operations.Matrix.MatrixTransformations.rotate2D(350.0d);
        com.operations.Matrix.Matrix matrix46 = com.operations.Matrix.MatrixDecompositions.choleskyDecomposition(matrix45);
        int int47 = matrix45.getRows();
        com.operations.Matrix.Matrix matrix48 = com.operations.Matrix.MatrixOperations.subtract(matrix6, matrix45);
        com.operations.Matrix.Matrix matrix49 = com.operations.Matrix.MatrixOperations.multiply(matrix3, matrix6);
        com.operations.Matrix.Matrix matrix51 = com.operations.Matrix.MatrixOperations.scalarMultiply(matrix49, 364.0054944640259d);
        double double52 = com.operations.Matrix.MatrixUtils.frobeniusNorm(matrix51);
        org.junit.Assert.assertNotNull(matrix1);
        org.junit.Assert.assertNotNull(matrix3);
        org.junit.Assert.assertNotNull(matrix6);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertArrayEquals(doubleArray9, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertArrayEquals(doubleArray12, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertArrayEquals(doubleArray19, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertArrayEquals(doubleArray22, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 2 + "'", int25 == 2);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 2 + "'", int26 == 2);
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertArrayEquals(doubleArray30, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertArrayEquals(doubleArray33, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(matrix38);
        org.junit.Assert.assertNotNull(matrixArray39);
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertNotNull(matrix42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertNotNull(matrix45);
        org.junit.Assert.assertNotNull(matrix46);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 2 + "'", int47 == 2);
        org.junit.Assert.assertNotNull(matrix48);
        org.junit.Assert.assertNotNull(matrix49);
        org.junit.Assert.assertNotNull(matrix51);
        org.junit.Assert.assertTrue("'" + double52 + "' != '" + 108225.86824260534d + "'", double52 == 108225.86824260534d);
    }

    @Test
    public void test3321() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3321");
        com.operations.Matrix.Matrix matrix2 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0L, (double) (byte) 10);
        int int3 = matrix2.getRows();
        com.operations.Matrix.Matrix matrix5 = com.operations.Matrix.MatrixOperations.scalarMultiply(matrix2, (double) 2);
        matrix2.print();
        com.operations.Matrix.Matrix matrix8 = com.operations.Matrix.MatrixOperations.scalarMultiply(matrix2, 100.00499987500625d);
        int int9 = matrix8.getRows();
        com.operations.Matrix.Matrix matrix11 = com.operations.Matrix.MatrixTransformations.rotate2D((double) 1.0f);
        com.operations.Matrix.Matrix matrix14 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0L, (double) (byte) 10);
        int int15 = matrix14.getRows();
        com.operations.Matrix.Matrix matrix17 = com.operations.Matrix.MatrixOperations.scalarMultiply(matrix14, (double) 2);
        double double18 = com.operations.Matrix.MatrixUtils.frobeniusNorm(matrix14);
        com.operations.Matrix.Matrix matrix21 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0L, (double) (byte) 10);
        int int22 = matrix21.getRows();
        com.operations.Matrix.Matrix matrix24 = com.operations.Matrix.MatrixOperations.scalarMultiply(matrix21, (double) 2);
        com.operations.Matrix.Matrix matrix25 = com.operations.Matrix.MatrixOperations.subtract(matrix14, matrix24);
        com.operations.Matrix.Matrix matrix26 = com.operations.Matrix.MatrixOperations.add(matrix11, matrix24);
        com.operations.Matrix.Matrix[] matrixArray27 = com.operations.Matrix.MatrixDecompositions.luDecomposition(matrix24);
        boolean boolean28 = com.operations.Matrix.MatrixUtils.isSquare(matrix24);
        com.operations.Matrix.Matrix matrix29 = com.operations.Matrix.MatrixOperations.transpose(matrix24);
        com.operations.Matrix.Matrix matrix31 = com.operations.Matrix.MatrixOperations.scalarMultiply(matrix24, (double) ' ');
        com.operations.Matrix.Matrix matrix32 = com.operations.Matrix.MatrixOperations.multiply(matrix8, matrix31);
        com.operations.Matrix.Matrix matrix35 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0L, (double) 10L);
        com.operations.Matrix.Matrix matrix38 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0L, (double) (byte) 10);
        double[] doubleArray41 = new double[] { 10, 'a' };
        double[] doubleArray44 = new double[] { 10, 'a' };
        double[][] doubleArray45 = new double[][] { doubleArray41, doubleArray44 };
        com.operations.Matrix.Matrix matrix46 = new com.operations.Matrix.Matrix(doubleArray45);
        int int47 = matrix46.getCols();
        int int48 = matrix46.getCols();
        int int49 = matrix46.getCols();
        com.operations.Matrix.Matrix[] matrixArray50 = com.operations.Matrix.MatrixDecompositions.luDecomposition(matrix46);
        com.operations.Matrix.Matrix matrix51 = com.operations.Matrix.MatrixOperations.multiply(matrix38, matrix46);
        com.operations.Matrix.Matrix matrix53 = com.operations.Matrix.MatrixTransformations.rotate2D((double) (short) 100);
        boolean boolean55 = com.operations.Matrix.MatrixUtils.compare(matrix46, matrix53, (double) (byte) 0);
        double[] doubleArray58 = new double[] { 10, 'a' };
        double[] doubleArray61 = new double[] { 10, 'a' };
        double[][] doubleArray62 = new double[][] { doubleArray58, doubleArray61 };
        com.operations.Matrix.Matrix matrix63 = new com.operations.Matrix.Matrix(doubleArray62);
        com.operations.Matrix.Matrix matrix64 = new com.operations.Matrix.Matrix(doubleArray62);
        com.operations.Matrix.Matrix matrix65 = new com.operations.Matrix.Matrix(doubleArray62);
        boolean boolean67 = com.operations.Matrix.MatrixUtils.compare(matrix46, matrix65, (double) (-1));
        com.operations.Matrix.Matrix matrix69 = com.operations.Matrix.MatrixTransformations.rotate2D((double) (short) 100);
        double[] doubleArray72 = new double[] { 137.90576492663388d, (byte) -1 };
        double[] doubleArray73 = com.operations.Matrix.MatrixSolver.solveGaussian(matrix69, doubleArray72);
        com.operations.Matrix.Matrix matrix76 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0L, (double) (byte) 10);
        double[] doubleArray79 = new double[] { 10, 'a' };
        double[] doubleArray82 = new double[] { 10, 'a' };
        double[][] doubleArray83 = new double[][] { doubleArray79, doubleArray82 };
        com.operations.Matrix.Matrix matrix84 = new com.operations.Matrix.Matrix(doubleArray83);
        int int85 = matrix84.getCols();
        int int86 = matrix84.getCols();
        int int87 = matrix84.getCols();
        com.operations.Matrix.Matrix[] matrixArray88 = com.operations.Matrix.MatrixDecompositions.luDecomposition(matrix84);
        com.operations.Matrix.Matrix matrix89 = com.operations.Matrix.MatrixOperations.multiply(matrix76, matrix84);
        boolean boolean91 = com.operations.Matrix.MatrixUtils.compare(matrix69, matrix76, (double) (-1L));
        com.operations.Matrix.Matrix matrix92 = com.operations.Matrix.MatrixOperations.add(matrix65, matrix76);
        boolean boolean94 = com.operations.Matrix.MatrixUtils.compare(matrix35, matrix92, 146.4308710620817d);
        com.operations.Matrix.Matrix matrix96 = com.operations.Matrix.MatrixOperations.scalarMultiply(matrix92, (double) 100L);
        com.operations.Matrix.Matrix matrix97 = com.operations.Matrix.MatrixDecompositions.choleskyDecomposition(matrix96);
        com.operations.Matrix.Matrix matrix98 = com.operations.Matrix.MatrixOperations.multiply(matrix31, matrix96);
        int int99 = matrix96.getCols();
        org.junit.Assert.assertNotNull(matrix2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 2 + "'", int3 == 2);
        org.junit.Assert.assertNotNull(matrix5);
        org.junit.Assert.assertNotNull(matrix8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 2 + "'", int9 == 2);
        org.junit.Assert.assertNotNull(matrix11);
        org.junit.Assert.assertNotNull(matrix14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 2 + "'", int15 == 2);
        org.junit.Assert.assertNotNull(matrix17);
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 10.0d + "'", double18 == 10.0d);
        org.junit.Assert.assertNotNull(matrix21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 2 + "'", int22 == 2);
        org.junit.Assert.assertNotNull(matrix24);
        org.junit.Assert.assertNotNull(matrix25);
        org.junit.Assert.assertNotNull(matrix26);
        org.junit.Assert.assertNotNull(matrixArray27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertNotNull(matrix29);
        org.junit.Assert.assertNotNull(matrix31);
        org.junit.Assert.assertNotNull(matrix32);
        org.junit.Assert.assertNotNull(matrix35);
        org.junit.Assert.assertNotNull(matrix38);
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertArrayEquals(doubleArray41, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertArrayEquals(doubleArray44, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 2 + "'", int47 == 2);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 2 + "'", int48 == 2);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 2 + "'", int49 == 2);
        org.junit.Assert.assertNotNull(matrixArray50);
        org.junit.Assert.assertNotNull(matrix51);
        org.junit.Assert.assertNotNull(matrix53);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNotNull(doubleArray58);
        org.junit.Assert.assertArrayEquals(doubleArray58, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray61);
        org.junit.Assert.assertArrayEquals(doubleArray61, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray62);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertNotNull(matrix69);
        org.junit.Assert.assertNotNull(doubleArray72);
        org.junit.Assert.assertArrayEquals(doubleArray72, new double[] { 137.90576492663388d, (-1.0d) }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray73);
        org.junit.Assert.assertArrayEquals(doubleArray73, new double[] { (-24.931892522286255d), (-135.63701830716116d) }, 1.0E-15);
        org.junit.Assert.assertNotNull(matrix76);
        org.junit.Assert.assertNotNull(doubleArray79);
        org.junit.Assert.assertArrayEquals(doubleArray79, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray82);
        org.junit.Assert.assertArrayEquals(doubleArray82, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray83);
        org.junit.Assert.assertTrue("'" + int85 + "' != '" + 2 + "'", int85 == 2);
        org.junit.Assert.assertTrue("'" + int86 + "' != '" + 2 + "'", int86 == 2);
        org.junit.Assert.assertTrue("'" + int87 + "' != '" + 2 + "'", int87 == 2);
        org.junit.Assert.assertNotNull(matrixArray88);
        org.junit.Assert.assertNotNull(matrix89);
        org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + false + "'", boolean91 == false);
        org.junit.Assert.assertNotNull(matrix92);
        org.junit.Assert.assertTrue("'" + boolean94 + "' != '" + true + "'", boolean94 == true);
        org.junit.Assert.assertNotNull(matrix96);
        org.junit.Assert.assertNotNull(matrix97);
        org.junit.Assert.assertNotNull(matrix98);
        org.junit.Assert.assertTrue("'" + int99 + "' != '" + 2 + "'", int99 == 2);
    }

    @Test
    public void test3322() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3322");
        double[] doubleArray2 = new double[] { 10, 'a' };
        double[] doubleArray5 = new double[] { 10, 'a' };
        double[][] doubleArray6 = new double[][] { doubleArray2, doubleArray5 };
        com.operations.Matrix.Matrix matrix7 = new com.operations.Matrix.Matrix(doubleArray6);
        int int8 = matrix7.getCols();
        int int9 = matrix7.getCols();
        int int10 = matrix7.getCols();
        com.operations.Matrix.Matrix matrix16 = com.operations.Matrix.MatrixUtils.generateRandomMatrix(100, (int) (byte) 1, (int) '#', (int) '#', 1L);
        double double19 = matrix16.getValue((int) '4', 0);
        double double20 = com.operations.Matrix.MatrixUtils.frobeniusNorm(matrix16);
        boolean boolean21 = com.operations.Matrix.MatrixUtils.isSquare(matrix16);
        boolean boolean23 = com.operations.Matrix.MatrixUtils.compare(matrix7, matrix16, (double) 100L);
        int int24 = matrix7.getCols();
        com.operations.Matrix.Matrix matrix25 = com.operations.Matrix.MatrixOperations.transpose(matrix7);
        com.operations.Matrix.Matrix matrix26 = com.operations.Matrix.MatrixDecompositions.choleskyDecomposition(matrix7);
        com.operations.Matrix.Matrix matrix29 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0.0f, 350.0d);
        com.operations.Matrix.Matrix matrix30 = com.operations.Matrix.MatrixOperations.multiply(matrix7, matrix29);
        matrix7.print();
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertArrayEquals(doubleArray2, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertArrayEquals(doubleArray5, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 2 + "'", int8 == 2);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 2 + "'", int9 == 2);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 2 + "'", int10 == 2);
        org.junit.Assert.assertNotNull(matrix16);
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 35.0d + "'", double19 == 35.0d);
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 350.0d + "'", double20 == 350.0d);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 2 + "'", int24 == 2);
        org.junit.Assert.assertNotNull(matrix25);
        org.junit.Assert.assertNotNull(matrix26);
        org.junit.Assert.assertNotNull(matrix29);
        org.junit.Assert.assertNotNull(matrix30);
    }

    @Test
    public void test3323() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3323");
        com.operations.Matrix.Matrix matrix2 = com.operations.Matrix.MatrixTransformations.project2D(0.0d, (double) (-1));
        boolean boolean3 = com.operations.Matrix.MatrixUtils.isSymmetric(matrix2);
        double[][] doubleArray4 = matrix2.getData();
        com.operations.Matrix.Matrix matrix5 = new com.operations.Matrix.Matrix(doubleArray4);
        boolean boolean6 = com.operations.Matrix.MatrixUtils.isSymmetric(matrix5);
        double[] doubleArray9 = new double[] { 10, 'a' };
        double[] doubleArray12 = new double[] { 10, 'a' };
        double[][] doubleArray13 = new double[][] { doubleArray9, doubleArray12 };
        com.operations.Matrix.Matrix matrix14 = new com.operations.Matrix.Matrix(doubleArray13);
        int int15 = matrix14.getCols();
        boolean boolean16 = com.operations.Matrix.MatrixUtils.isSquare(matrix14);
        com.operations.Matrix.Matrix matrix18 = com.operations.Matrix.MatrixOperations.scalarMultiply(matrix14, 98.07140255956371d);
        boolean boolean19 = com.operations.Matrix.MatrixUtils.isSymmetric(matrix18);
        int int20 = matrix18.getRows();
        boolean boolean22 = com.operations.Matrix.MatrixUtils.compare(matrix5, matrix18, (double) 10);
        org.junit.Assert.assertNotNull(matrix2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertArrayEquals(doubleArray9, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertArrayEquals(doubleArray12, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 2 + "'", int15 == 2);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertNotNull(matrix18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 2 + "'", int20 == 2);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
    }

    @Test
    public void test3324() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3324");
        com.operations.Matrix.Matrix matrix2 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0.0f, (double) (-1));
        com.operations.Matrix.Matrix matrix5 = com.operations.Matrix.MatrixTransformations.scale2D(146.4308710620817d, (double) 10L);
        com.operations.Matrix.Matrix matrix6 = com.operations.Matrix.MatrixOperations.multiply(matrix2, matrix5);
        int int7 = matrix6.getCols();
        com.operations.Matrix.Matrix matrix10 = com.operations.Matrix.MatrixTransformations.project2D((double) (short) 100, (double) 0L);
        boolean boolean11 = com.operations.Matrix.MatrixUtils.isSquare(matrix10);
        double[] doubleArray14 = new double[] { 10, 'a' };
        double[] doubleArray17 = new double[] { 10, 'a' };
        double[][] doubleArray18 = new double[][] { doubleArray14, doubleArray17 };
        com.operations.Matrix.Matrix matrix19 = new com.operations.Matrix.Matrix(doubleArray18);
        com.operations.Matrix.Matrix matrix20 = new com.operations.Matrix.Matrix(doubleArray18);
        com.operations.Matrix.Matrix matrix22 = com.operations.Matrix.MatrixTransformations.rotate2D((double) (short) 100);
        double[] doubleArray25 = new double[] { 137.90576492663388d, (byte) -1 };
        double[] doubleArray26 = com.operations.Matrix.MatrixSolver.solveGaussian(matrix22, doubleArray25);
        com.operations.Matrix.Matrix matrix27 = com.operations.Matrix.MatrixOperations.add(matrix20, matrix22);
        com.operations.Matrix.Matrix matrix28 = com.operations.Matrix.MatrixOperations.transpose(matrix22);
        int int29 = matrix22.getCols();
        int int30 = matrix22.getRows();
        double[] doubleArray33 = new double[] { 10, 'a' };
        double[] doubleArray36 = new double[] { 10, 'a' };
        double[][] doubleArray37 = new double[][] { doubleArray33, doubleArray36 };
        com.operations.Matrix.Matrix matrix38 = new com.operations.Matrix.Matrix(doubleArray37);
        int int39 = matrix38.getCols();
        int int40 = matrix38.getCols();
        matrix38.print();
        double[] doubleArray44 = new double[] { 10, 'a' };
        double[] doubleArray47 = new double[] { 10, 'a' };
        double[][] doubleArray48 = new double[][] { doubleArray44, doubleArray47 };
        com.operations.Matrix.Matrix matrix49 = new com.operations.Matrix.Matrix(doubleArray48);
        boolean boolean51 = com.operations.Matrix.MatrixUtils.compare(matrix38, matrix49, (double) (-1));
        com.operations.Matrix.Matrix matrix52 = com.operations.Matrix.MatrixOperations.multiply(matrix22, matrix38);
        double double55 = matrix22.getValue((int) (short) 0, 0);
        com.operations.Matrix.Matrix matrix56 = com.operations.Matrix.MatrixOperations.add(matrix10, matrix22);
        com.operations.Matrix.Matrix matrix57 = com.operations.Matrix.MatrixOperations.multiply(matrix6, matrix10);
        com.operations.Matrix.Matrix matrix60 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0L, (double) (byte) 10);
        double[] doubleArray63 = new double[] { 10, 'a' };
        double[] doubleArray66 = new double[] { 10, 'a' };
        double[][] doubleArray67 = new double[][] { doubleArray63, doubleArray66 };
        com.operations.Matrix.Matrix matrix68 = new com.operations.Matrix.Matrix(doubleArray67);
        int int69 = matrix68.getCols();
        int int70 = matrix68.getCols();
        int int71 = matrix68.getCols();
        com.operations.Matrix.Matrix[] matrixArray72 = com.operations.Matrix.MatrixDecompositions.luDecomposition(matrix68);
        com.operations.Matrix.Matrix matrix73 = com.operations.Matrix.MatrixOperations.multiply(matrix60, matrix68);
        com.operations.Matrix.Matrix matrix75 = com.operations.Matrix.MatrixTransformations.rotate2D((double) (short) 100);
        boolean boolean77 = com.operations.Matrix.MatrixUtils.compare(matrix68, matrix75, (double) (byte) 0);
        com.operations.Matrix.Matrix[] matrixArray78 = com.operations.Matrix.MatrixDecompositions.luDecomposition(matrix68);
        com.operations.Matrix.Matrix matrix79 = com.operations.Matrix.MatrixOperations.transpose(matrix68);
        com.operations.Matrix.Matrix matrix82 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0L, (double) (byte) 10);
        int int83 = matrix82.getRows();
        com.operations.Matrix.Matrix matrix86 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0L, (double) (byte) 10);
        int int87 = matrix86.getRows();
        com.operations.Matrix.Matrix matrix89 = com.operations.Matrix.MatrixOperations.scalarMultiply(matrix86, (double) 2);
        com.operations.Matrix.Matrix matrix90 = com.operations.Matrix.MatrixOperations.subtract(matrix82, matrix86);
        boolean boolean92 = com.operations.Matrix.MatrixUtils.compare(matrix68, matrix82, (double) ' ');
        com.operations.Matrix.Matrix matrix94 = com.operations.Matrix.MatrixOperations.scalarMultiply(matrix68, 137.90576492663388d);
        matrix94.print();
        com.operations.Matrix.Matrix matrix96 = com.operations.Matrix.MatrixOperations.add(matrix10, matrix94);
        double[][] doubleArray97 = matrix96.getData();
        org.junit.Assert.assertNotNull(matrix2);
        org.junit.Assert.assertNotNull(matrix5);
        org.junit.Assert.assertNotNull(matrix6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 2 + "'", int7 == 2);
        org.junit.Assert.assertNotNull(matrix10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertArrayEquals(doubleArray14, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertArrayEquals(doubleArray17, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertNotNull(matrix22);
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertArrayEquals(doubleArray25, new double[] { 137.90576492663388d, (-1.0d) }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertArrayEquals(doubleArray26, new double[] { (-24.931892522286255d), (-135.63701830716116d) }, 1.0E-15);
        org.junit.Assert.assertNotNull(matrix27);
        org.junit.Assert.assertNotNull(matrix28);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 2 + "'", int29 == 2);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 2 + "'", int30 == 2);
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertArrayEquals(doubleArray33, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertArrayEquals(doubleArray36, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 2 + "'", int39 == 2);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 2 + "'", int40 == 2);
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertArrayEquals(doubleArray44, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertArrayEquals(doubleArray47, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(matrix52);
        org.junit.Assert.assertTrue("'" + double55 + "' != '" + (-0.1736481776669303d) + "'", double55 == (-0.1736481776669303d));
        org.junit.Assert.assertNotNull(matrix56);
        org.junit.Assert.assertNotNull(matrix57);
        org.junit.Assert.assertNotNull(matrix60);
        org.junit.Assert.assertNotNull(doubleArray63);
        org.junit.Assert.assertArrayEquals(doubleArray63, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray66);
        org.junit.Assert.assertArrayEquals(doubleArray66, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray67);
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 2 + "'", int69 == 2);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 2 + "'", int70 == 2);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 2 + "'", int71 == 2);
        org.junit.Assert.assertNotNull(matrixArray72);
        org.junit.Assert.assertNotNull(matrix73);
        org.junit.Assert.assertNotNull(matrix75);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertNotNull(matrixArray78);
        org.junit.Assert.assertNotNull(matrix79);
        org.junit.Assert.assertNotNull(matrix82);
        org.junit.Assert.assertTrue("'" + int83 + "' != '" + 2 + "'", int83 == 2);
        org.junit.Assert.assertNotNull(matrix86);
        org.junit.Assert.assertTrue("'" + int87 + "' != '" + 2 + "'", int87 == 2);
        org.junit.Assert.assertNotNull(matrix89);
        org.junit.Assert.assertNotNull(matrix90);
        org.junit.Assert.assertTrue("'" + boolean92 + "' != '" + false + "'", boolean92 == false);
        org.junit.Assert.assertNotNull(matrix94);
        org.junit.Assert.assertNotNull(matrix96);
        org.junit.Assert.assertNotNull(doubleArray97);
    }

    @Test
    public void test3325() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3325");
        com.operations.Matrix.Matrix matrix4 = com.operations.Matrix.MatrixUtils.generateRandomMatrix((int) '#', (int) (byte) 10, (int) (short) 0, 0);
        com.operations.Matrix.Matrix matrix7 = new com.operations.Matrix.Matrix((int) (byte) 0, (int) (short) 0);
        boolean boolean9 = com.operations.Matrix.MatrixUtils.compare(matrix4, matrix7, 41.14922324710797d);
        org.junit.Assert.assertNotNull(matrix4);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
    }

    @Test
    public void test3326() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3326");
        com.operations.Matrix.Matrix matrix2 = com.operations.Matrix.MatrixTransformations.project2D(10.0d, (double) 1);
        double[][] doubleArray3 = matrix2.getData();
        com.operations.Matrix.Matrix matrix4 = new com.operations.Matrix.Matrix(doubleArray3);
        com.operations.Matrix.Matrix matrix6 = com.operations.Matrix.MatrixOperations.scalarMultiply(matrix4, (-1.0d));
        com.operations.Matrix.Matrix matrix7 = com.operations.Matrix.MatrixDecompositions.choleskyDecomposition(matrix4);
        com.operations.Matrix.Matrix matrix8 = com.operations.Matrix.MatrixOperations.transpose(matrix4);
        // The following exception was thrown during execution in test generation
        try {
            matrix4.setValue(2, (int) 'a', 146.4308710620817d);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: Index 2 out of bounds for length 2");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(matrix2);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertNotNull(matrix6);
        org.junit.Assert.assertNotNull(matrix7);
        org.junit.Assert.assertNotNull(matrix8);
    }

    @Test
    public void test3327() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3327");
        double[] doubleArray2 = new double[] { 10, 'a' };
        double[] doubleArray5 = new double[] { 10, 'a' };
        double[][] doubleArray6 = new double[][] { doubleArray2, doubleArray5 };
        com.operations.Matrix.Matrix matrix7 = new com.operations.Matrix.Matrix(doubleArray6);
        int int8 = matrix7.getCols();
        boolean boolean9 = com.operations.Matrix.MatrixUtils.isSquare(matrix7);
        com.operations.Matrix.Matrix matrix10 = com.operations.Matrix.MatrixOperations.transpose(matrix7);
        int int11 = matrix10.getRows();
        com.operations.Matrix.Matrix matrix14 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0L, (double) (byte) 10);
        double[] doubleArray17 = new double[] { 10, 'a' };
        double[] doubleArray20 = new double[] { 10, 'a' };
        double[][] doubleArray21 = new double[][] { doubleArray17, doubleArray20 };
        com.operations.Matrix.Matrix matrix22 = new com.operations.Matrix.Matrix(doubleArray21);
        int int23 = matrix22.getCols();
        int int24 = matrix22.getCols();
        int int25 = matrix22.getCols();
        com.operations.Matrix.Matrix[] matrixArray26 = com.operations.Matrix.MatrixDecompositions.luDecomposition(matrix22);
        com.operations.Matrix.Matrix matrix27 = com.operations.Matrix.MatrixOperations.multiply(matrix14, matrix22);
        com.operations.Matrix.Matrix matrix29 = com.operations.Matrix.MatrixTransformations.rotate2D((double) (short) 100);
        boolean boolean31 = com.operations.Matrix.MatrixUtils.compare(matrix22, matrix29, (double) (byte) 0);
        com.operations.Matrix.Matrix matrix32 = com.operations.Matrix.MatrixOperations.multiply(matrix10, matrix22);
        int int33 = matrix10.getCols();
        com.operations.Matrix.Matrix matrix35 = com.operations.Matrix.MatrixTransformations.rotate2D((double) (short) 0);
        boolean boolean37 = com.operations.Matrix.MatrixUtils.compare(matrix10, matrix35, (double) (short) 100);
        matrix35.print();
        boolean boolean39 = com.operations.Matrix.MatrixUtils.isSquare(matrix35);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertArrayEquals(doubleArray2, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertArrayEquals(doubleArray5, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 2 + "'", int8 == 2);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertNotNull(matrix10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 2 + "'", int11 == 2);
        org.junit.Assert.assertNotNull(matrix14);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertArrayEquals(doubleArray17, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertArrayEquals(doubleArray20, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 2 + "'", int23 == 2);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 2 + "'", int24 == 2);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 2 + "'", int25 == 2);
        org.junit.Assert.assertNotNull(matrixArray26);
        org.junit.Assert.assertNotNull(matrix27);
        org.junit.Assert.assertNotNull(matrix29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(matrix32);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 2 + "'", int33 == 2);
        org.junit.Assert.assertNotNull(matrix35);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
    }

    @Test
    public void test3328() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3328");
        com.operations.Matrix.Matrix matrix2 = com.operations.Matrix.MatrixTransformations.project2D((-0.017187291480513275d), 20.0d);
        org.junit.Assert.assertNotNull(matrix2);
    }

    @Test
    public void test3329() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3329");
        com.operations.Matrix.Matrix matrix2 = com.operations.Matrix.MatrixTransformations.scale2D(20.0d, 0.0d);
        com.operations.Matrix.Matrix matrix4 = com.operations.Matrix.MatrixOperations.scalarMultiply(matrix2, 13376.859197883485d);
        org.junit.Assert.assertNotNull(matrix2);
        org.junit.Assert.assertNotNull(matrix4);
    }

    @Test
    public void test3330() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3330");
        com.operations.Matrix.Matrix matrix2 = com.operations.Matrix.MatrixTransformations.scale2D((double) (byte) 10, (double) 10);
        double[] doubleArray5 = new double[] { 10, 'a' };
        double[] doubleArray8 = new double[] { 10, 'a' };
        double[][] doubleArray9 = new double[][] { doubleArray5, doubleArray8 };
        com.operations.Matrix.Matrix matrix10 = new com.operations.Matrix.Matrix(doubleArray9);
        com.operations.Matrix.Matrix matrix11 = new com.operations.Matrix.Matrix(doubleArray9);
        boolean boolean12 = com.operations.Matrix.MatrixUtils.isSquare(matrix11);
        double[] doubleArray15 = new double[] { 10, 'a' };
        double[] doubleArray18 = new double[] { 10, 'a' };
        double[][] doubleArray19 = new double[][] { doubleArray15, doubleArray18 };
        com.operations.Matrix.Matrix matrix20 = new com.operations.Matrix.Matrix(doubleArray19);
        int int21 = matrix20.getCols();
        int int22 = matrix20.getCols();
        matrix20.print();
        double[] doubleArray26 = new double[] { 10, 'a' };
        double[] doubleArray29 = new double[] { 10, 'a' };
        double[][] doubleArray30 = new double[][] { doubleArray26, doubleArray29 };
        com.operations.Matrix.Matrix matrix31 = new com.operations.Matrix.Matrix(doubleArray30);
        boolean boolean33 = com.operations.Matrix.MatrixUtils.compare(matrix20, matrix31, (double) (-1));
        com.operations.Matrix.Matrix matrix34 = com.operations.Matrix.MatrixOperations.subtract(matrix11, matrix31);
        com.operations.Matrix.Matrix[] matrixArray35 = com.operations.Matrix.MatrixDecompositions.luDecomposition(matrix34);
        double[][] doubleArray36 = matrix34.getData();
        com.operations.Matrix.Matrix matrix37 = new com.operations.Matrix.Matrix(doubleArray36);
        com.operations.Matrix.Matrix matrix38 = com.operations.Matrix.MatrixOperations.multiply(matrix2, matrix37);
        boolean boolean39 = com.operations.Matrix.MatrixUtils.isSymmetric(matrix2);
        com.operations.Matrix.Matrix matrix41 = com.operations.Matrix.MatrixTransformations.rotate2D(350.0d);
        com.operations.Matrix.Matrix matrix42 = com.operations.Matrix.MatrixDecompositions.choleskyDecomposition(matrix41);
        int int43 = matrix41.getRows();
        com.operations.Matrix.Matrix matrix44 = com.operations.Matrix.MatrixOperations.subtract(matrix2, matrix41);
        double[] doubleArray47 = new double[] { 10, 'a' };
        double[] doubleArray50 = new double[] { 10, 'a' };
        double[][] doubleArray51 = new double[][] { doubleArray47, doubleArray50 };
        com.operations.Matrix.Matrix matrix52 = new com.operations.Matrix.Matrix(doubleArray51);
        int int53 = matrix52.getCols();
        int int54 = matrix52.getCols();
        boolean boolean55 = com.operations.Matrix.MatrixUtils.isSquare(matrix52);
        com.operations.Matrix.Matrix matrix56 = com.operations.Matrix.MatrixDecompositions.choleskyDecomposition(matrix52);
        com.operations.Matrix.Matrix matrix59 = com.operations.Matrix.MatrixTransformations.project2D(0.0d, (double) 0);
        com.operations.Matrix.Matrix matrix60 = com.operations.Matrix.MatrixOperations.subtract(matrix56, matrix59);
        com.operations.Matrix.Matrix matrix61 = com.operations.Matrix.MatrixOperations.transpose(matrix59);
        com.operations.Matrix.Matrix matrix62 = com.operations.Matrix.MatrixOperations.subtract(matrix2, matrix61);
        com.operations.Matrix.Matrix matrix63 = com.operations.Matrix.MatrixOperations.transpose(matrix62);
        boolean boolean64 = com.operations.Matrix.MatrixUtils.isSymmetric(matrix63);
        com.operations.Matrix.Matrix matrix65 = com.operations.Matrix.MatrixDecompositions.choleskyDecomposition(matrix63);
        org.junit.Assert.assertNotNull(matrix2);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertArrayEquals(doubleArray5, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertArrayEquals(doubleArray8, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertArrayEquals(doubleArray15, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertArrayEquals(doubleArray18, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 2 + "'", int21 == 2);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 2 + "'", int22 == 2);
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertArrayEquals(doubleArray26, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertArrayEquals(doubleArray29, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(matrix34);
        org.junit.Assert.assertNotNull(matrixArray35);
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertNotNull(matrix38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertNotNull(matrix41);
        org.junit.Assert.assertNotNull(matrix42);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 2 + "'", int43 == 2);
        org.junit.Assert.assertNotNull(matrix44);
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertArrayEquals(doubleArray47, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertArrayEquals(doubleArray50, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 2 + "'", int53 == 2);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 2 + "'", int54 == 2);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + true + "'", boolean55 == true);
        org.junit.Assert.assertNotNull(matrix56);
        org.junit.Assert.assertNotNull(matrix59);
        org.junit.Assert.assertNotNull(matrix60);
        org.junit.Assert.assertNotNull(matrix61);
        org.junit.Assert.assertNotNull(matrix62);
        org.junit.Assert.assertNotNull(matrix63);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + true + "'", boolean64 == true);
        org.junit.Assert.assertNotNull(matrix65);
    }

    @Test
    public void test3331() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3331");
        // The following exception was thrown during execution in test generation
        try {
            com.operations.Matrix.Matrix matrix2 = new com.operations.Matrix.Matrix((int) (byte) 0, (-1));
            org.junit.Assert.fail("Expected exception of type java.lang.NegativeArraySizeException; message: -1");
        } catch (java.lang.NegativeArraySizeException e) {
            // Expected exception.
        }
    }

    @Test
    public void test3332() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3332");
        // The following exception was thrown during execution in test generation
        try {
            com.operations.Matrix.Matrix matrix5 = com.operations.Matrix.MatrixUtils.generateRandomMatrix((-1), 1, (int) (short) -1, (int) (short) 10, 100L);
            org.junit.Assert.fail("Expected exception of type java.lang.NegativeArraySizeException; message: -1");
        } catch (java.lang.NegativeArraySizeException e) {
            // Expected exception.
        }
    }

    @Test
    public void test3333() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3333");
        double[] doubleArray2 = new double[] { 10, 'a' };
        double[] doubleArray5 = new double[] { 10, 'a' };
        double[][] doubleArray6 = new double[][] { doubleArray2, doubleArray5 };
        com.operations.Matrix.Matrix matrix7 = new com.operations.Matrix.Matrix(doubleArray6);
        int int8 = matrix7.getCols();
        int int9 = matrix7.getCols();
        int int10 = matrix7.getCols();
        com.operations.Matrix.Matrix matrix16 = com.operations.Matrix.MatrixUtils.generateRandomMatrix(100, (int) (byte) 1, (int) '#', (int) '#', 1L);
        double double19 = matrix16.getValue((int) '4', 0);
        double double20 = com.operations.Matrix.MatrixUtils.frobeniusNorm(matrix16);
        boolean boolean21 = com.operations.Matrix.MatrixUtils.isSquare(matrix16);
        boolean boolean23 = com.operations.Matrix.MatrixUtils.compare(matrix7, matrix16, (double) 100L);
        double[][] doubleArray24 = matrix7.getData();
        com.operations.Matrix.Matrix matrix25 = new com.operations.Matrix.Matrix(doubleArray24);
        com.operations.Matrix.Matrix matrix28 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0L, (double) (byte) 10);
        int int29 = matrix28.getRows();
        com.operations.Matrix.Matrix matrix31 = com.operations.Matrix.MatrixOperations.scalarMultiply(matrix28, (double) 2);
        double double32 = com.operations.Matrix.MatrixUtils.frobeniusNorm(matrix28);
        com.operations.Matrix.Matrix matrix35 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0L, (double) (byte) 10);
        int int36 = matrix35.getRows();
        com.operations.Matrix.Matrix matrix38 = com.operations.Matrix.MatrixOperations.scalarMultiply(matrix35, (double) 2);
        com.operations.Matrix.Matrix matrix39 = com.operations.Matrix.MatrixOperations.subtract(matrix28, matrix38);
        com.operations.Matrix.Matrix matrix41 = com.operations.Matrix.MatrixTransformations.rotate2D((double) (short) 100);
        double[] doubleArray44 = new double[] { 137.90576492663388d, (byte) -1 };
        double[] doubleArray45 = com.operations.Matrix.MatrixSolver.solveGaussian(matrix41, doubleArray44);
        com.operations.Matrix.Matrix matrix48 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0L, (double) (byte) 10);
        double[] doubleArray51 = new double[] { 10, 'a' };
        double[] doubleArray54 = new double[] { 10, 'a' };
        double[][] doubleArray55 = new double[][] { doubleArray51, doubleArray54 };
        com.operations.Matrix.Matrix matrix56 = new com.operations.Matrix.Matrix(doubleArray55);
        int int57 = matrix56.getCols();
        int int58 = matrix56.getCols();
        int int59 = matrix56.getCols();
        com.operations.Matrix.Matrix[] matrixArray60 = com.operations.Matrix.MatrixDecompositions.luDecomposition(matrix56);
        com.operations.Matrix.Matrix matrix61 = com.operations.Matrix.MatrixOperations.multiply(matrix48, matrix56);
        boolean boolean63 = com.operations.Matrix.MatrixUtils.compare(matrix41, matrix48, (double) (-1L));
        double[][] doubleArray64 = matrix41.getData();
        com.operations.Matrix.Matrix matrix67 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0L, (double) 10L);
        boolean boolean69 = com.operations.Matrix.MatrixUtils.compare(matrix41, matrix67, 146.4308710620817d);
        com.operations.Matrix.Matrix matrix70 = com.operations.Matrix.MatrixOperations.subtract(matrix39, matrix67);
        com.operations.Matrix.Matrix matrix73 = com.operations.Matrix.MatrixTransformations.project2D((double) 0L, (double) 0);
        com.operations.Matrix.Matrix[] matrixArray74 = com.operations.Matrix.MatrixDecompositions.luDecomposition(matrix73);
        com.operations.Matrix.Matrix matrix75 = com.operations.Matrix.MatrixOperations.transpose(matrix73);
        com.operations.Matrix.Matrix matrix76 = com.operations.Matrix.MatrixOperations.multiply(matrix67, matrix75);
        boolean boolean78 = com.operations.Matrix.MatrixUtils.compare(matrix25, matrix76, (double) (-1L));
        double[][] doubleArray79 = matrix25.getData();
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertArrayEquals(doubleArray2, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertArrayEquals(doubleArray5, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 2 + "'", int8 == 2);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 2 + "'", int9 == 2);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 2 + "'", int10 == 2);
        org.junit.Assert.assertNotNull(matrix16);
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 35.0d + "'", double19 == 35.0d);
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 350.0d + "'", double20 == 350.0d);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertNotNull(matrix28);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 2 + "'", int29 == 2);
        org.junit.Assert.assertNotNull(matrix31);
        org.junit.Assert.assertTrue("'" + double32 + "' != '" + 10.0d + "'", double32 == 10.0d);
        org.junit.Assert.assertNotNull(matrix35);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 2 + "'", int36 == 2);
        org.junit.Assert.assertNotNull(matrix38);
        org.junit.Assert.assertNotNull(matrix39);
        org.junit.Assert.assertNotNull(matrix41);
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertArrayEquals(doubleArray44, new double[] { 137.90576492663388d, (-1.0d) }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertArrayEquals(doubleArray45, new double[] { (-24.931892522286255d), (-135.63701830716116d) }, 1.0E-15);
        org.junit.Assert.assertNotNull(matrix48);
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertArrayEquals(doubleArray51, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray54);
        org.junit.Assert.assertArrayEquals(doubleArray54, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 2 + "'", int57 == 2);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 2 + "'", int58 == 2);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 2 + "'", int59 == 2);
        org.junit.Assert.assertNotNull(matrixArray60);
        org.junit.Assert.assertNotNull(matrix61);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNotNull(doubleArray64);
        org.junit.Assert.assertNotNull(matrix67);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + true + "'", boolean69 == true);
        org.junit.Assert.assertNotNull(matrix70);
        org.junit.Assert.assertNotNull(matrix73);
        org.junit.Assert.assertNotNull(matrixArray74);
        org.junit.Assert.assertNotNull(matrix75);
        org.junit.Assert.assertNotNull(matrix76);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertNotNull(doubleArray79);
    }

    @Test
    public void test3334() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3334");
        com.operations.Matrix.Matrix matrix2 = com.operations.Matrix.MatrixTransformations.scale2D(1.414213562373095d, 12.751772028997056d);
        org.junit.Assert.assertNotNull(matrix2);
    }

    @Test
    public void test3335() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3335");
        // The following exception was thrown during execution in test generation
        try {
            com.operations.Matrix.Matrix matrix4 = com.operations.Matrix.MatrixUtils.generateRandomMatrix((int) (short) -1, 1, (int) (byte) -1, (int) (short) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.NegativeArraySizeException; message: -1");
        } catch (java.lang.NegativeArraySizeException e) {
            // Expected exception.
        }
    }

    @Test
    public void test3336() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3336");
        com.operations.Matrix.Matrix matrix2 = com.operations.Matrix.MatrixTransformations.scale2D(0.0d, 3500.011571801086d);
        org.junit.Assert.assertNotNull(matrix2);
    }

    @Test
    public void test3337() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3337");
        com.operations.Matrix.Matrix matrix4 = com.operations.Matrix.MatrixUtils.generateRandomMatrix((int) '#', (int) (byte) 0, 10, (int) (short) -1);
        com.operations.Matrix.Matrix matrix6 = com.operations.Matrix.MatrixOperations.scalarMultiply(matrix4, (double) 100L);
        com.operations.Matrix.Matrix matrix8 = com.operations.Matrix.MatrixTransformations.rotate2D((double) (short) 100);
        double[] doubleArray11 = new double[] { 137.90576492663388d, (byte) -1 };
        double[] doubleArray12 = com.operations.Matrix.MatrixSolver.solveGaussian(matrix8, doubleArray11);
        com.operations.Matrix.Matrix matrix15 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0L, (double) (byte) 10);
        double[] doubleArray18 = new double[] { 10, 'a' };
        double[] doubleArray21 = new double[] { 10, 'a' };
        double[][] doubleArray22 = new double[][] { doubleArray18, doubleArray21 };
        com.operations.Matrix.Matrix matrix23 = new com.operations.Matrix.Matrix(doubleArray22);
        int int24 = matrix23.getCols();
        int int25 = matrix23.getCols();
        int int26 = matrix23.getCols();
        com.operations.Matrix.Matrix[] matrixArray27 = com.operations.Matrix.MatrixDecompositions.luDecomposition(matrix23);
        com.operations.Matrix.Matrix matrix28 = com.operations.Matrix.MatrixOperations.multiply(matrix15, matrix23);
        boolean boolean30 = com.operations.Matrix.MatrixUtils.compare(matrix8, matrix15, (double) (-1L));
        boolean boolean31 = com.operations.Matrix.MatrixUtils.isSymmetric(matrix8);
        int int32 = matrix8.getCols();
        com.operations.Matrix.Matrix[] matrixArray33 = com.operations.Matrix.MatrixDecompositions.luDecomposition(matrix8);
        double double34 = com.operations.Matrix.MatrixUtils.frobeniusNorm(matrix8);
        double double35 = com.operations.Matrix.MatrixUtils.frobeniusNorm(matrix8);
        double[][] doubleArray36 = matrix8.getData();
        com.operations.Matrix.Matrix matrix37 = new com.operations.Matrix.Matrix(doubleArray36);
        boolean boolean38 = com.operations.Matrix.MatrixUtils.isSquare(matrix37);
        // The following exception was thrown during execution in test generation
        try {
            com.operations.Matrix.Matrix matrix39 = com.operations.Matrix.MatrixOperations.add(matrix6, matrix37);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Matrices must have the same dimensions for addition.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(matrix4);
        org.junit.Assert.assertNotNull(matrix6);
        org.junit.Assert.assertNotNull(matrix8);
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertArrayEquals(doubleArray11, new double[] { 137.90576492663388d, (-1.0d) }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertArrayEquals(doubleArray12, new double[] { (-24.931892522286255d), (-135.63701830716116d) }, 1.0E-15);
        org.junit.Assert.assertNotNull(matrix15);
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertArrayEquals(doubleArray18, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertArrayEquals(doubleArray21, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 2 + "'", int24 == 2);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 2 + "'", int25 == 2);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 2 + "'", int26 == 2);
        org.junit.Assert.assertNotNull(matrixArray27);
        org.junit.Assert.assertNotNull(matrix28);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 2 + "'", int32 == 2);
        org.junit.Assert.assertNotNull(matrixArray33);
        org.junit.Assert.assertTrue("'" + double34 + "' != '" + 1.414213562373095d + "'", double34 == 1.414213562373095d);
        org.junit.Assert.assertTrue("'" + double35 + "' != '" + 1.414213562373095d + "'", double35 == 1.414213562373095d);
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
    }

    @Test
    public void test3338() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3338");
        com.operations.Matrix.Matrix matrix1 = com.operations.Matrix.MatrixTransformations.rotate2D((-1.0d));
        com.operations.Matrix.Matrix matrix3 = com.operations.Matrix.MatrixTransformations.rotate2D((double) (-1L));
        com.operations.Matrix.Matrix matrix5 = com.operations.Matrix.MatrixTransformations.rotate2D((double) (short) 100);
        double[] doubleArray8 = new double[] { 137.90576492663388d, (byte) -1 };
        double[] doubleArray9 = com.operations.Matrix.MatrixSolver.solveGaussian(matrix5, doubleArray8);
        double[] doubleArray10 = com.operations.Matrix.MatrixSolver.solveGaussian(matrix3, doubleArray8);
        double[] doubleArray11 = com.operations.Matrix.MatrixSolver.solveGaussian(matrix1, doubleArray8);
        com.operations.Matrix.Matrix matrix12 = com.operations.Matrix.MatrixDecompositions.choleskyDecomposition(matrix1);
        int int13 = matrix12.getRows();
        org.junit.Assert.assertNotNull(matrix1);
        org.junit.Assert.assertNotNull(matrix3);
        org.junit.Assert.assertNotNull(matrix5);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertArrayEquals(doubleArray8, new double[] { 137.90576492663388d, (-1.0d) }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertArrayEquals(doubleArray9, new double[] { (-24.931892522286255d), (-135.63701830716116d) }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertArrayEquals(doubleArray10, new double[] { 137.90221361711127d, 1.4069397643877004d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertArrayEquals(doubleArray11, new double[] { 137.90221361711127d, 1.4069397643877004d }, 1.0E-15);
        org.junit.Assert.assertNotNull(matrix12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 2 + "'", int13 == 2);
    }

    @Test
    public void test3339() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3339");
        com.operations.Matrix.Matrix matrix2 = com.operations.Matrix.MatrixTransformations.project2D(10.344080432788601d, 10.344080432788601d);
        int int3 = matrix2.getCols();
        org.junit.Assert.assertNotNull(matrix2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 2 + "'", int3 == 2);
    }

    @Test
    public void test3340() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3340");
        com.operations.Matrix.Matrix matrix2 = com.operations.Matrix.MatrixTransformations.scale2D(3200.015624961853d, 10.0d);
        org.junit.Assert.assertNotNull(matrix2);
    }

    @Test
    public void test3341() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3341");
        com.operations.Matrix.Matrix matrix5 = com.operations.Matrix.MatrixUtils.generateRandomMatrix(100, (int) (byte) 1, (int) '#', (int) '#', 1L);
        double double8 = matrix5.getValue((int) '4', 0);
        matrix5.print();
        com.operations.Matrix.Matrix matrix10 = com.operations.Matrix.MatrixOperations.transpose(matrix5);
        // The following exception was thrown during execution in test generation
        try {
            com.operations.Matrix.Matrix matrix11 = com.operations.Matrix.MatrixDecompositions.choleskyDecomposition(matrix10);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Matrix must be square for Cholesky decomposition.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(matrix5);
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 35.0d + "'", double8 == 35.0d);
        org.junit.Assert.assertNotNull(matrix10);
    }

    @Test
    public void test3342() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3342");
        com.operations.Matrix.Matrix matrix2 = new com.operations.Matrix.Matrix(10, 1);
        matrix2.print();
        double[] doubleArray6 = new double[] { 10, 'a' };
        double[] doubleArray9 = new double[] { 10, 'a' };
        double[][] doubleArray10 = new double[][] { doubleArray6, doubleArray9 };
        com.operations.Matrix.Matrix matrix11 = new com.operations.Matrix.Matrix(doubleArray10);
        int int12 = matrix11.getCols();
        int int13 = matrix11.getCols();
        matrix11.print();
        double[] doubleArray17 = new double[] { 10, 'a' };
        double[] doubleArray20 = new double[] { 10, 'a' };
        double[][] doubleArray21 = new double[][] { doubleArray17, doubleArray20 };
        com.operations.Matrix.Matrix matrix22 = new com.operations.Matrix.Matrix(doubleArray21);
        boolean boolean24 = com.operations.Matrix.MatrixUtils.compare(matrix11, matrix22, (double) (-1));
        double[][] doubleArray25 = matrix11.getData();
        matrix11.print();
        // The following exception was thrown during execution in test generation
        try {
            com.operations.Matrix.Matrix matrix27 = com.operations.Matrix.MatrixOperations.multiply(matrix2, matrix11);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Matrix A's columns must match Matrix B's rows for multiplication.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertArrayEquals(doubleArray6, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertArrayEquals(doubleArray9, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 2 + "'", int12 == 2);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 2 + "'", int13 == 2);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertArrayEquals(doubleArray17, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertArrayEquals(doubleArray20, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(doubleArray25);
    }

    @Test
    public void test3343() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3343");
        com.operations.Matrix.Matrix matrix2 = com.operations.Matrix.MatrixTransformations.scale2D(137.90576492663385d, (-1.0d));
        org.junit.Assert.assertNotNull(matrix2);
    }

    @Test
    public void test3344() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3344");
        double[] doubleArray2 = new double[] { 10, 'a' };
        double[] doubleArray5 = new double[] { 10, 'a' };
        double[][] doubleArray6 = new double[][] { doubleArray2, doubleArray5 };
        com.operations.Matrix.Matrix matrix7 = new com.operations.Matrix.Matrix(doubleArray6);
        com.operations.Matrix.Matrix matrix8 = new com.operations.Matrix.Matrix(doubleArray6);
        com.operations.Matrix.Matrix[] matrixArray9 = com.operations.Matrix.MatrixDecompositions.luDecomposition(matrix8);
        com.operations.Matrix.Matrix matrix12 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0, (double) 100L);
        com.operations.Matrix.Matrix matrix13 = com.operations.Matrix.MatrixOperations.subtract(matrix8, matrix12);
        com.operations.Matrix.Matrix matrix15 = com.operations.Matrix.MatrixTransformations.rotate2D((double) (short) 100);
        double[] doubleArray18 = new double[] { 137.90576492663388d, (byte) -1 };
        double[] doubleArray19 = com.operations.Matrix.MatrixSolver.solveGaussian(matrix15, doubleArray18);
        com.operations.Matrix.Matrix matrix22 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0L, (double) (byte) 10);
        double[] doubleArray25 = new double[] { 10, 'a' };
        double[] doubleArray28 = new double[] { 10, 'a' };
        double[][] doubleArray29 = new double[][] { doubleArray25, doubleArray28 };
        com.operations.Matrix.Matrix matrix30 = new com.operations.Matrix.Matrix(doubleArray29);
        int int31 = matrix30.getCols();
        int int32 = matrix30.getCols();
        int int33 = matrix30.getCols();
        com.operations.Matrix.Matrix[] matrixArray34 = com.operations.Matrix.MatrixDecompositions.luDecomposition(matrix30);
        com.operations.Matrix.Matrix matrix35 = com.operations.Matrix.MatrixOperations.multiply(matrix22, matrix30);
        boolean boolean37 = com.operations.Matrix.MatrixUtils.compare(matrix15, matrix22, (double) (-1L));
        com.operations.Matrix.Matrix matrix38 = com.operations.Matrix.MatrixOperations.add(matrix8, matrix15);
        double[][] doubleArray39 = matrix38.getData();
        boolean boolean40 = com.operations.Matrix.MatrixUtils.isSquare(matrix38);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertArrayEquals(doubleArray2, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertArrayEquals(doubleArray5, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertNotNull(matrixArray9);
        org.junit.Assert.assertNotNull(matrix12);
        org.junit.Assert.assertNotNull(matrix13);
        org.junit.Assert.assertNotNull(matrix15);
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertArrayEquals(doubleArray18, new double[] { 137.90576492663388d, (-1.0d) }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertArrayEquals(doubleArray19, new double[] { (-24.931892522286255d), (-135.63701830716116d) }, 1.0E-15);
        org.junit.Assert.assertNotNull(matrix22);
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertArrayEquals(doubleArray25, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertArrayEquals(doubleArray28, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 2 + "'", int31 == 2);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 2 + "'", int32 == 2);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 2 + "'", int33 == 2);
        org.junit.Assert.assertNotNull(matrixArray34);
        org.junit.Assert.assertNotNull(matrix35);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(matrix38);
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
    }

    @Test
    public void test3345() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3345");
        com.operations.Matrix.Matrix matrix2 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0.0f, (double) (-1));
        com.operations.Matrix.Matrix matrix5 = com.operations.Matrix.MatrixTransformations.scale2D(146.4308710620817d, (double) 10L);
        com.operations.Matrix.Matrix matrix6 = com.operations.Matrix.MatrixOperations.multiply(matrix2, matrix5);
        com.operations.Matrix.Matrix matrix8 = com.operations.Matrix.MatrixTransformations.rotate2D((double) 1.0f);
        com.operations.Matrix.Matrix matrix11 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0L, (double) (byte) 10);
        int int12 = matrix11.getRows();
        com.operations.Matrix.Matrix matrix14 = com.operations.Matrix.MatrixOperations.scalarMultiply(matrix11, (double) 2);
        double double15 = com.operations.Matrix.MatrixUtils.frobeniusNorm(matrix11);
        com.operations.Matrix.Matrix matrix18 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0L, (double) (byte) 10);
        int int19 = matrix18.getRows();
        com.operations.Matrix.Matrix matrix21 = com.operations.Matrix.MatrixOperations.scalarMultiply(matrix18, (double) 2);
        com.operations.Matrix.Matrix matrix22 = com.operations.Matrix.MatrixOperations.subtract(matrix11, matrix21);
        com.operations.Matrix.Matrix matrix23 = com.operations.Matrix.MatrixOperations.add(matrix8, matrix21);
        matrix8.print();
        double[] doubleArray27 = new double[] { 10, 'a' };
        double[] doubleArray30 = new double[] { 10, 'a' };
        double[][] doubleArray31 = new double[][] { doubleArray27, doubleArray30 };
        com.operations.Matrix.Matrix matrix32 = new com.operations.Matrix.Matrix(doubleArray31);
        com.operations.Matrix.Matrix matrix33 = com.operations.Matrix.MatrixOperations.transpose(matrix32);
        com.operations.Matrix.Matrix matrix36 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0L, (double) (byte) 10);
        int int37 = matrix36.getRows();
        com.operations.Matrix.Matrix matrix43 = com.operations.Matrix.MatrixUtils.generateRandomMatrix(100, (int) (byte) 1, (int) '#', (int) '#', 1L);
        boolean boolean45 = com.operations.Matrix.MatrixUtils.compare(matrix36, matrix43, (double) 1.0f);
        com.operations.Matrix.Matrix matrix47 = com.operations.Matrix.MatrixOperations.scalarMultiply(matrix36, (double) 1L);
        matrix36.print();
        com.operations.Matrix.Matrix matrix49 = com.operations.Matrix.MatrixOperations.multiply(matrix33, matrix36);
        com.operations.Matrix.Matrix matrix50 = com.operations.Matrix.MatrixOperations.multiply(matrix8, matrix36);
        com.operations.Matrix.Matrix matrix51 = com.operations.Matrix.MatrixOperations.subtract(matrix2, matrix36);
        double double52 = com.operations.Matrix.MatrixUtils.frobeniusNorm(matrix2);
        com.operations.Matrix.Matrix matrix53 = com.operations.Matrix.MatrixOperations.transpose(matrix2);
        org.junit.Assert.assertNotNull(matrix2);
        org.junit.Assert.assertNotNull(matrix5);
        org.junit.Assert.assertNotNull(matrix6);
        org.junit.Assert.assertNotNull(matrix8);
        org.junit.Assert.assertNotNull(matrix11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 2 + "'", int12 == 2);
        org.junit.Assert.assertNotNull(matrix14);
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 10.0d + "'", double15 == 10.0d);
        org.junit.Assert.assertNotNull(matrix18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 2 + "'", int19 == 2);
        org.junit.Assert.assertNotNull(matrix21);
        org.junit.Assert.assertNotNull(matrix22);
        org.junit.Assert.assertNotNull(matrix23);
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertArrayEquals(doubleArray27, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertArrayEquals(doubleArray30, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertNotNull(matrix33);
        org.junit.Assert.assertNotNull(matrix36);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 2 + "'", int37 == 2);
        org.junit.Assert.assertNotNull(matrix43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(matrix47);
        org.junit.Assert.assertNotNull(matrix49);
        org.junit.Assert.assertNotNull(matrix50);
        org.junit.Assert.assertNotNull(matrix51);
        org.junit.Assert.assertTrue("'" + double52 + "' != '" + 1.0d + "'", double52 == 1.0d);
        org.junit.Assert.assertNotNull(matrix53);
    }

    @Test
    public void test3346() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3346");
        com.operations.Matrix.Matrix matrix0 = null;
        com.operations.Matrix.Matrix matrix6 = com.operations.Matrix.MatrixUtils.generateRandomMatrix(35, (int) (byte) 0, (int) (byte) 10, (int) 'a', (long) (short) 1);
        com.operations.Matrix.Matrix matrix9 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0L, (double) (byte) 10);
        double[] doubleArray12 = new double[] { 10, 'a' };
        double[] doubleArray15 = new double[] { 10, 'a' };
        double[][] doubleArray16 = new double[][] { doubleArray12, doubleArray15 };
        com.operations.Matrix.Matrix matrix17 = new com.operations.Matrix.Matrix(doubleArray16);
        int int18 = matrix17.getCols();
        int int19 = matrix17.getCols();
        int int20 = matrix17.getCols();
        com.operations.Matrix.Matrix[] matrixArray21 = com.operations.Matrix.MatrixDecompositions.luDecomposition(matrix17);
        com.operations.Matrix.Matrix matrix22 = com.operations.Matrix.MatrixOperations.multiply(matrix9, matrix17);
        com.operations.Matrix.Matrix matrix24 = com.operations.Matrix.MatrixTransformations.rotate2D((double) (short) 100);
        boolean boolean26 = com.operations.Matrix.MatrixUtils.compare(matrix17, matrix24, (double) (byte) 0);
        double[] doubleArray29 = new double[] { 10, 'a' };
        double[] doubleArray32 = new double[] { 10, 'a' };
        double[][] doubleArray33 = new double[][] { doubleArray29, doubleArray32 };
        com.operations.Matrix.Matrix matrix34 = new com.operations.Matrix.Matrix(doubleArray33);
        com.operations.Matrix.Matrix matrix35 = com.operations.Matrix.MatrixOperations.multiply(matrix17, matrix34);
        com.operations.Matrix.Matrix matrix37 = com.operations.Matrix.MatrixOperations.scalarMultiply(matrix17, 364.0054944640259d);
        com.operations.Matrix.Matrix matrix40 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0L, (double) (byte) 10);
        int int41 = matrix40.getRows();
        com.operations.Matrix.Matrix matrix43 = com.operations.Matrix.MatrixOperations.scalarMultiply(matrix40, (double) 2);
        matrix40.print();
        matrix40.print();
        com.operations.Matrix.Matrix matrix46 = com.operations.Matrix.MatrixOperations.multiply(matrix17, matrix40);
        com.operations.Matrix.Matrix matrix48 = com.operations.Matrix.MatrixTransformations.rotate2D((double) 100L);
        com.operations.Matrix.Matrix matrix49 = com.operations.Matrix.MatrixOperations.multiply(matrix46, matrix48);
        matrix48.print();
        com.operations.Matrix.Matrix[] matrixArray51 = com.operations.Matrix.MatrixDecompositions.luDecomposition(matrix48);
        boolean boolean53 = com.operations.Matrix.MatrixUtils.compare(matrix6, matrix48, 365.8209944768069d);
        // The following exception was thrown during execution in test generation
        try {
            com.operations.Matrix.Matrix matrix54 = com.operations.Matrix.MatrixOperations.add(matrix0, matrix6);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot invoke \"com.operations.Matrix.Matrix.getRows()\" because \"a\" is null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(matrix6);
        org.junit.Assert.assertNotNull(matrix9);
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertArrayEquals(doubleArray12, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertArrayEquals(doubleArray15, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 2 + "'", int18 == 2);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 2 + "'", int19 == 2);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 2 + "'", int20 == 2);
        org.junit.Assert.assertNotNull(matrixArray21);
        org.junit.Assert.assertNotNull(matrix22);
        org.junit.Assert.assertNotNull(matrix24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertArrayEquals(doubleArray29, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertArrayEquals(doubleArray32, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertNotNull(matrix35);
        org.junit.Assert.assertNotNull(matrix37);
        org.junit.Assert.assertNotNull(matrix40);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 2 + "'", int41 == 2);
        org.junit.Assert.assertNotNull(matrix43);
        org.junit.Assert.assertNotNull(matrix46);
        org.junit.Assert.assertNotNull(matrix48);
        org.junit.Assert.assertNotNull(matrix49);
        org.junit.Assert.assertNotNull(matrixArray51);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
    }

    @Test
    public void test3347() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3347");
        com.operations.Matrix.Matrix matrix2 = com.operations.Matrix.MatrixTransformations.scale2D((double) 10, (double) 0);
        double[] doubleArray5 = new double[] { 10, 'a' };
        double[] doubleArray8 = new double[] { 10, 'a' };
        double[][] doubleArray9 = new double[][] { doubleArray5, doubleArray8 };
        com.operations.Matrix.Matrix matrix10 = new com.operations.Matrix.Matrix(doubleArray9);
        com.operations.Matrix.Matrix matrix11 = new com.operations.Matrix.Matrix(doubleArray9);
        boolean boolean12 = com.operations.Matrix.MatrixUtils.isSquare(matrix11);
        double[] doubleArray15 = new double[] { 10, 'a' };
        double[] doubleArray18 = new double[] { 10, 'a' };
        double[][] doubleArray19 = new double[][] { doubleArray15, doubleArray18 };
        com.operations.Matrix.Matrix matrix20 = new com.operations.Matrix.Matrix(doubleArray19);
        int int21 = matrix20.getCols();
        int int22 = matrix20.getCols();
        matrix20.print();
        double[] doubleArray26 = new double[] { 10, 'a' };
        double[] doubleArray29 = new double[] { 10, 'a' };
        double[][] doubleArray30 = new double[][] { doubleArray26, doubleArray29 };
        com.operations.Matrix.Matrix matrix31 = new com.operations.Matrix.Matrix(doubleArray30);
        boolean boolean33 = com.operations.Matrix.MatrixUtils.compare(matrix20, matrix31, (double) (-1));
        com.operations.Matrix.Matrix matrix34 = com.operations.Matrix.MatrixOperations.subtract(matrix11, matrix31);
        com.operations.Matrix.Matrix[] matrixArray35 = com.operations.Matrix.MatrixDecompositions.luDecomposition(matrix34);
        double[][] doubleArray36 = matrix34.getData();
        boolean boolean37 = com.operations.Matrix.MatrixUtils.isSquare(matrix34);
        int int38 = matrix34.getCols();
        com.operations.Matrix.Matrix matrix39 = com.operations.Matrix.MatrixOperations.multiply(matrix2, matrix34);
        com.operations.Matrix.Matrix matrix42 = com.operations.Matrix.MatrixTransformations.scale2D(10.0d, 1.0d);
        com.operations.Matrix.Matrix matrix43 = com.operations.Matrix.MatrixOperations.transpose(matrix42);
        matrix43.print();
        com.operations.Matrix.Matrix matrix45 = com.operations.Matrix.MatrixOperations.subtract(matrix39, matrix43);
        int int46 = matrix45.getCols();
        org.junit.Assert.assertNotNull(matrix2);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertArrayEquals(doubleArray5, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertArrayEquals(doubleArray8, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertArrayEquals(doubleArray15, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertArrayEquals(doubleArray18, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 2 + "'", int21 == 2);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 2 + "'", int22 == 2);
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertArrayEquals(doubleArray26, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertArrayEquals(doubleArray29, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(matrix34);
        org.junit.Assert.assertNotNull(matrixArray35);
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 2 + "'", int38 == 2);
        org.junit.Assert.assertNotNull(matrix39);
        org.junit.Assert.assertNotNull(matrix42);
        org.junit.Assert.assertNotNull(matrix43);
        org.junit.Assert.assertNotNull(matrix45);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 2 + "'", int46 == 2);
    }

    @Test
    public void test3348() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3348");
        com.operations.Matrix.Matrix matrix2 = new com.operations.Matrix.Matrix((int) (byte) 10, (int) (short) 100);
        com.operations.Matrix.Matrix matrix4 = com.operations.Matrix.MatrixOperations.scalarMultiply(matrix2, 146.4308710620817d);
        org.junit.Assert.assertNotNull(matrix4);
    }

    @Test
    public void test3349() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3349");
        // The following exception was thrown during execution in test generation
        try {
            com.operations.Matrix.Matrix matrix4 = com.operations.Matrix.MatrixUtils.generateRandomMatrix(1, (-1), 97, (int) (byte) 10);
            org.junit.Assert.fail("Expected exception of type java.lang.NegativeArraySizeException; message: -1");
        } catch (java.lang.NegativeArraySizeException e) {
            // Expected exception.
        }
    }

    @Test
    public void test3350() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3350");
        com.operations.Matrix.Matrix matrix2 = com.operations.Matrix.MatrixTransformations.scale2D((double) (byte) 10, (double) 10);
        double[] doubleArray5 = new double[] { 10, 'a' };
        double[] doubleArray8 = new double[] { 10, 'a' };
        double[][] doubleArray9 = new double[][] { doubleArray5, doubleArray8 };
        com.operations.Matrix.Matrix matrix10 = new com.operations.Matrix.Matrix(doubleArray9);
        com.operations.Matrix.Matrix matrix11 = new com.operations.Matrix.Matrix(doubleArray9);
        boolean boolean12 = com.operations.Matrix.MatrixUtils.isSquare(matrix11);
        double[] doubleArray15 = new double[] { 10, 'a' };
        double[] doubleArray18 = new double[] { 10, 'a' };
        double[][] doubleArray19 = new double[][] { doubleArray15, doubleArray18 };
        com.operations.Matrix.Matrix matrix20 = new com.operations.Matrix.Matrix(doubleArray19);
        int int21 = matrix20.getCols();
        int int22 = matrix20.getCols();
        matrix20.print();
        double[] doubleArray26 = new double[] { 10, 'a' };
        double[] doubleArray29 = new double[] { 10, 'a' };
        double[][] doubleArray30 = new double[][] { doubleArray26, doubleArray29 };
        com.operations.Matrix.Matrix matrix31 = new com.operations.Matrix.Matrix(doubleArray30);
        boolean boolean33 = com.operations.Matrix.MatrixUtils.compare(matrix20, matrix31, (double) (-1));
        com.operations.Matrix.Matrix matrix34 = com.operations.Matrix.MatrixOperations.subtract(matrix11, matrix31);
        com.operations.Matrix.Matrix[] matrixArray35 = com.operations.Matrix.MatrixDecompositions.luDecomposition(matrix34);
        double[][] doubleArray36 = matrix34.getData();
        com.operations.Matrix.Matrix matrix37 = new com.operations.Matrix.Matrix(doubleArray36);
        com.operations.Matrix.Matrix matrix38 = com.operations.Matrix.MatrixOperations.multiply(matrix2, matrix37);
        com.operations.Matrix.Matrix matrix41 = com.operations.Matrix.MatrixTransformations.scale2D(1.414213562373095d, (double) 1);
        com.operations.Matrix.Matrix matrix42 = com.operations.Matrix.MatrixOperations.add(matrix38, matrix41);
        double[][] doubleArray43 = matrix38.getData();
        com.operations.Matrix.Matrix matrix44 = new com.operations.Matrix.Matrix(doubleArray43);
        com.operations.Matrix.Matrix matrix45 = new com.operations.Matrix.Matrix(doubleArray43);
        org.junit.Assert.assertNotNull(matrix2);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertArrayEquals(doubleArray5, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertArrayEquals(doubleArray8, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertArrayEquals(doubleArray15, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertArrayEquals(doubleArray18, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 2 + "'", int21 == 2);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 2 + "'", int22 == 2);
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertArrayEquals(doubleArray26, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertArrayEquals(doubleArray29, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(matrix34);
        org.junit.Assert.assertNotNull(matrixArray35);
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertNotNull(matrix38);
        org.junit.Assert.assertNotNull(matrix41);
        org.junit.Assert.assertNotNull(matrix42);
        org.junit.Assert.assertNotNull(doubleArray43);
    }

    @Test
    public void test3351() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3351");
        com.operations.Matrix.Matrix matrix5 = com.operations.Matrix.MatrixUtils.generateRandomMatrix((int) 'a', (int) (byte) 10, (int) '#', 100, 100L);
        com.operations.Matrix.Matrix matrix8 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0L, (double) (byte) 10);
        int int9 = matrix8.getRows();
        com.operations.Matrix.Matrix matrix15 = com.operations.Matrix.MatrixUtils.generateRandomMatrix(100, (int) (byte) 1, (int) '#', (int) '#', 1L);
        boolean boolean17 = com.operations.Matrix.MatrixUtils.compare(matrix8, matrix15, (double) 1.0f);
        matrix15.print();
        com.operations.Matrix.Matrix matrix19 = com.operations.Matrix.MatrixOperations.transpose(matrix15);
        boolean boolean20 = com.operations.Matrix.MatrixUtils.isSquare(matrix19);
        com.operations.Matrix.Matrix matrix22 = com.operations.Matrix.MatrixOperations.scalarMultiply(matrix19, 0.0d);
        boolean boolean24 = com.operations.Matrix.MatrixUtils.compare(matrix5, matrix22, 975.1410154434076d);
        double double25 = com.operations.Matrix.MatrixUtils.frobeniusNorm(matrix22);
        com.operations.Matrix.Matrix matrix31 = com.operations.Matrix.MatrixUtils.generateRandomMatrix(100, 1, (-1), (int) (byte) -1, (long) (short) 1);
        com.operations.Matrix.Matrix matrix33 = com.operations.Matrix.MatrixOperations.scalarMultiply(matrix31, (double) (byte) -1);
        boolean boolean34 = com.operations.Matrix.MatrixUtils.isSymmetric(matrix31);
        boolean boolean35 = com.operations.Matrix.MatrixUtils.isSymmetric(matrix31);
        // The following exception was thrown during execution in test generation
        try {
            com.operations.Matrix.Matrix matrix36 = com.operations.Matrix.MatrixOperations.add(matrix22, matrix31);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Matrices must have the same dimensions for addition.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(matrix5);
        org.junit.Assert.assertNotNull(matrix8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 2 + "'", int9 == 2);
        org.junit.Assert.assertNotNull(matrix15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(matrix19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(matrix22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + double25 + "' != '" + 0.0d + "'", double25 == 0.0d);
        org.junit.Assert.assertNotNull(matrix31);
        org.junit.Assert.assertNotNull(matrix33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
    }

    @Test
    public void test3352() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3352");
        com.operations.Matrix.Matrix matrix2 = com.operations.Matrix.MatrixTransformations.scale2D(99.83621769912266d, (double) 100.0f);
        int int3 = matrix2.getCols();
        org.junit.Assert.assertNotNull(matrix2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 2 + "'", int3 == 2);
    }

    @Test
    public void test3353() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3353");
        com.operations.Matrix.Matrix matrix2 = com.operations.Matrix.MatrixTransformations.project2D((double) ' ', 0.0d);
        double[] doubleArray5 = new double[] { 10, 'a' };
        double[] doubleArray8 = new double[] { 10, 'a' };
        double[][] doubleArray9 = new double[][] { doubleArray5, doubleArray8 };
        com.operations.Matrix.Matrix matrix10 = new com.operations.Matrix.Matrix(doubleArray9);
        int int11 = matrix10.getCols();
        boolean boolean12 = com.operations.Matrix.MatrixUtils.isSquare(matrix10);
        com.operations.Matrix.Matrix matrix13 = com.operations.Matrix.MatrixOperations.transpose(matrix10);
        int int14 = matrix13.getRows();
        com.operations.Matrix.Matrix matrix17 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0L, (double) (byte) 10);
        double[] doubleArray20 = new double[] { 10, 'a' };
        double[] doubleArray23 = new double[] { 10, 'a' };
        double[][] doubleArray24 = new double[][] { doubleArray20, doubleArray23 };
        com.operations.Matrix.Matrix matrix25 = new com.operations.Matrix.Matrix(doubleArray24);
        int int26 = matrix25.getCols();
        int int27 = matrix25.getCols();
        int int28 = matrix25.getCols();
        com.operations.Matrix.Matrix[] matrixArray29 = com.operations.Matrix.MatrixDecompositions.luDecomposition(matrix25);
        com.operations.Matrix.Matrix matrix30 = com.operations.Matrix.MatrixOperations.multiply(matrix17, matrix25);
        com.operations.Matrix.Matrix matrix32 = com.operations.Matrix.MatrixTransformations.rotate2D((double) (short) 100);
        boolean boolean34 = com.operations.Matrix.MatrixUtils.compare(matrix25, matrix32, (double) (byte) 0);
        com.operations.Matrix.Matrix matrix35 = com.operations.Matrix.MatrixOperations.multiply(matrix13, matrix25);
        com.operations.Matrix.Matrix matrix36 = com.operations.Matrix.MatrixOperations.add(matrix2, matrix25);
        com.operations.Matrix.Matrix matrix37 = com.operations.Matrix.MatrixOperations.transpose(matrix2);
        com.operations.Matrix.Matrix matrix40 = com.operations.Matrix.MatrixTransformations.scale2D((double) (byte) 100, 350.0d);
        double double41 = com.operations.Matrix.MatrixUtils.frobeniusNorm(matrix40);
        int int42 = matrix40.getCols();
        com.operations.Matrix.Matrix matrix43 = com.operations.Matrix.MatrixOperations.multiply(matrix2, matrix40);
        int int44 = matrix40.getRows();
        double[][] doubleArray45 = matrix40.getData();
        com.operations.Matrix.Matrix matrix46 = new com.operations.Matrix.Matrix(doubleArray45);
        com.operations.Matrix.Matrix matrix47 = new com.operations.Matrix.Matrix(doubleArray45);
        // The following exception was thrown during execution in test generation
        try {
            matrix47.setValue((int) (byte) 0, 52, 59.62334183013888d);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: Index 52 out of bounds for length 2");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(matrix2);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertArrayEquals(doubleArray5, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertArrayEquals(doubleArray8, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 2 + "'", int11 == 2);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(matrix13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 2 + "'", int14 == 2);
        org.junit.Assert.assertNotNull(matrix17);
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertArrayEquals(doubleArray20, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertArrayEquals(doubleArray23, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 2 + "'", int26 == 2);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 2 + "'", int27 == 2);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 2 + "'", int28 == 2);
        org.junit.Assert.assertNotNull(matrixArray29);
        org.junit.Assert.assertNotNull(matrix30);
        org.junit.Assert.assertNotNull(matrix32);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(matrix35);
        org.junit.Assert.assertNotNull(matrix36);
        org.junit.Assert.assertNotNull(matrix37);
        org.junit.Assert.assertNotNull(matrix40);
        org.junit.Assert.assertTrue("'" + double41 + "' != '" + 364.0054944640259d + "'", double41 == 364.0054944640259d);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 2 + "'", int42 == 2);
        org.junit.Assert.assertNotNull(matrix43);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 2 + "'", int44 == 2);
        org.junit.Assert.assertNotNull(doubleArray45);
    }

    @Test
    public void test3354() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3354");
        double[] doubleArray4 = new double[] { 10.0f, 136.9141301851733d, 19018.0d, 263.29311316552224d };
        double[] doubleArray9 = new double[] { 10.0f, 136.9141301851733d, 19018.0d, 263.29311316552224d };
        double[][] doubleArray10 = new double[][] { doubleArray4, doubleArray9 };
        com.operations.Matrix.Matrix matrix11 = new com.operations.Matrix.Matrix(doubleArray10);
        com.operations.Matrix.Matrix matrix13 = com.operations.Matrix.MatrixTransformations.rotate2D(12.751772028997056d);
        // The following exception was thrown during execution in test generation
        try {
            com.operations.Matrix.Matrix matrix14 = com.operations.Matrix.MatrixOperations.add(matrix11, matrix13);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Matrices must have the same dimensions for addition.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertArrayEquals(doubleArray4, new double[] { 10.0d, 136.9141301851733d, 19018.0d, 263.29311316552224d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertArrayEquals(doubleArray9, new double[] { 10.0d, 136.9141301851733d, 19018.0d, 263.29311316552224d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertNotNull(matrix13);
    }

    @Test
    public void test3355() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3355");
        double[] doubleArray2 = new double[] { 10, 'a' };
        double[] doubleArray5 = new double[] { 10, 'a' };
        double[][] doubleArray6 = new double[][] { doubleArray2, doubleArray5 };
        com.operations.Matrix.Matrix matrix7 = new com.operations.Matrix.Matrix(doubleArray6);
        com.operations.Matrix.Matrix matrix8 = new com.operations.Matrix.Matrix(doubleArray6);
        com.operations.Matrix.Matrix matrix10 = com.operations.Matrix.MatrixTransformations.rotate2D((double) (short) 100);
        double[] doubleArray13 = new double[] { 137.90576492663388d, (byte) -1 };
        double[] doubleArray14 = com.operations.Matrix.MatrixSolver.solveGaussian(matrix10, doubleArray13);
        com.operations.Matrix.Matrix matrix15 = com.operations.Matrix.MatrixOperations.add(matrix8, matrix10);
        com.operations.Matrix.Matrix matrix16 = com.operations.Matrix.MatrixOperations.transpose(matrix10);
        int int17 = matrix10.getCols();
        com.operations.Matrix.Matrix matrix20 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0L, (double) (byte) 10);
        double[] doubleArray23 = new double[] { 10, 'a' };
        double[] doubleArray26 = new double[] { 10, 'a' };
        double[][] doubleArray27 = new double[][] { doubleArray23, doubleArray26 };
        com.operations.Matrix.Matrix matrix28 = new com.operations.Matrix.Matrix(doubleArray27);
        int int29 = matrix28.getCols();
        int int30 = matrix28.getCols();
        int int31 = matrix28.getCols();
        com.operations.Matrix.Matrix[] matrixArray32 = com.operations.Matrix.MatrixDecompositions.luDecomposition(matrix28);
        com.operations.Matrix.Matrix matrix33 = com.operations.Matrix.MatrixOperations.multiply(matrix20, matrix28);
        com.operations.Matrix.Matrix matrix35 = com.operations.Matrix.MatrixTransformations.rotate2D((double) (short) 100);
        boolean boolean37 = com.operations.Matrix.MatrixUtils.compare(matrix28, matrix35, (double) (byte) 0);
        boolean boolean38 = com.operations.Matrix.MatrixUtils.isSymmetric(matrix35);
        boolean boolean39 = com.operations.Matrix.MatrixUtils.isSquare(matrix35);
        com.operations.Matrix.Matrix matrix41 = com.operations.Matrix.MatrixTransformations.rotate2D((double) (short) 100);
        boolean boolean43 = com.operations.Matrix.MatrixUtils.compare(matrix35, matrix41, (double) (byte) 100);
        matrix41.print();
        com.operations.Matrix.Matrix matrix45 = com.operations.Matrix.MatrixOperations.add(matrix10, matrix41);
        com.operations.Matrix.Matrix matrix48 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0L, (double) (byte) 10);
        int int49 = matrix48.getRows();
        com.operations.Matrix.Matrix matrix51 = com.operations.Matrix.MatrixOperations.scalarMultiply(matrix48, (double) 2);
        matrix48.print();
        com.operations.Matrix.Matrix matrix54 = com.operations.Matrix.MatrixOperations.scalarMultiply(matrix48, 100.00499987500625d);
        com.operations.Matrix.Matrix matrix57 = new com.operations.Matrix.Matrix(10, (int) (byte) 1);
        boolean boolean59 = com.operations.Matrix.MatrixUtils.compare(matrix54, matrix57, (double) 100L);
        com.operations.Matrix.Matrix matrix60 = com.operations.Matrix.MatrixOperations.add(matrix41, matrix54);
        double double61 = com.operations.Matrix.MatrixUtils.frobeniusNorm(matrix41);
        matrix41.print();
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertArrayEquals(doubleArray2, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertArrayEquals(doubleArray5, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertNotNull(matrix10);
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertArrayEquals(doubleArray13, new double[] { 137.90576492663388d, (-1.0d) }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertArrayEquals(doubleArray14, new double[] { (-24.931892522286255d), (-135.63701830716116d) }, 1.0E-15);
        org.junit.Assert.assertNotNull(matrix15);
        org.junit.Assert.assertNotNull(matrix16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 2 + "'", int17 == 2);
        org.junit.Assert.assertNotNull(matrix20);
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertArrayEquals(doubleArray23, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertArrayEquals(doubleArray26, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 2 + "'", int29 == 2);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 2 + "'", int30 == 2);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 2 + "'", int31 == 2);
        org.junit.Assert.assertNotNull(matrixArray32);
        org.junit.Assert.assertNotNull(matrix33);
        org.junit.Assert.assertNotNull(matrix35);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertNotNull(matrix41);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertNotNull(matrix45);
        org.junit.Assert.assertNotNull(matrix48);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 2 + "'", int49 == 2);
        org.junit.Assert.assertNotNull(matrix51);
        org.junit.Assert.assertNotNull(matrix54);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNotNull(matrix60);
        org.junit.Assert.assertTrue("'" + double61 + "' != '" + 1.414213562373095d + "'", double61 == 1.414213562373095d);
    }

    @Test
    public void test3356() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3356");
        com.operations.Matrix.Matrix matrix2 = com.operations.Matrix.MatrixTransformations.project2D(0.01745240643728351d, 364.0054944640259d);
        org.junit.Assert.assertNotNull(matrix2);
    }

    @Test
    public void test3357() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3357");
        com.operations.Matrix.Matrix matrix2 = com.operations.Matrix.MatrixTransformations.project2D((-1.0d), (double) 1L);
        double double3 = com.operations.Matrix.MatrixUtils.frobeniusNorm(matrix2);
        com.operations.Matrix.Matrix matrix6 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0L, (double) (byte) 10);
        double[] doubleArray9 = new double[] { 10, 'a' };
        double[] doubleArray12 = new double[] { 10, 'a' };
        double[][] doubleArray13 = new double[][] { doubleArray9, doubleArray12 };
        com.operations.Matrix.Matrix matrix14 = new com.operations.Matrix.Matrix(doubleArray13);
        int int15 = matrix14.getCols();
        int int16 = matrix14.getCols();
        int int17 = matrix14.getCols();
        com.operations.Matrix.Matrix[] matrixArray18 = com.operations.Matrix.MatrixDecompositions.luDecomposition(matrix14);
        com.operations.Matrix.Matrix matrix19 = com.operations.Matrix.MatrixOperations.multiply(matrix6, matrix14);
        com.operations.Matrix.Matrix matrix21 = com.operations.Matrix.MatrixTransformations.rotate2D((double) (short) 100);
        boolean boolean23 = com.operations.Matrix.MatrixUtils.compare(matrix14, matrix21, (double) (byte) 0);
        com.operations.Matrix.Matrix[] matrixArray24 = com.operations.Matrix.MatrixDecompositions.luDecomposition(matrix14);
        com.operations.Matrix.Matrix matrix25 = com.operations.Matrix.MatrixOperations.transpose(matrix14);
        com.operations.Matrix.Matrix matrix28 = com.operations.Matrix.MatrixTransformations.scale2D((double) 1.0f, (double) 1);
        com.operations.Matrix.Matrix matrix30 = com.operations.Matrix.MatrixTransformations.rotate2D((double) 1.0f);
        com.operations.Matrix.Matrix matrix33 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0L, (double) (byte) 10);
        int int34 = matrix33.getRows();
        com.operations.Matrix.Matrix matrix36 = com.operations.Matrix.MatrixOperations.scalarMultiply(matrix33, (double) 2);
        double double37 = com.operations.Matrix.MatrixUtils.frobeniusNorm(matrix33);
        com.operations.Matrix.Matrix matrix40 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0L, (double) (byte) 10);
        int int41 = matrix40.getRows();
        com.operations.Matrix.Matrix matrix43 = com.operations.Matrix.MatrixOperations.scalarMultiply(matrix40, (double) 2);
        com.operations.Matrix.Matrix matrix44 = com.operations.Matrix.MatrixOperations.subtract(matrix33, matrix43);
        com.operations.Matrix.Matrix matrix45 = com.operations.Matrix.MatrixOperations.add(matrix30, matrix43);
        boolean boolean47 = com.operations.Matrix.MatrixUtils.compare(matrix28, matrix30, (double) (byte) -1);
        com.operations.Matrix.Matrix matrix48 = com.operations.Matrix.MatrixOperations.subtract(matrix25, matrix28);
        com.operations.Matrix.Matrix matrix49 = com.operations.Matrix.MatrixOperations.multiply(matrix2, matrix28);
        com.operations.Matrix.Matrix[] matrixArray50 = com.operations.Matrix.MatrixDecompositions.luDecomposition(matrix28);
        org.junit.Assert.assertNotNull(matrix2);
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + 1.4142135623730951d + "'", double3 == 1.4142135623730951d);
        org.junit.Assert.assertNotNull(matrix6);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertArrayEquals(doubleArray9, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertArrayEquals(doubleArray12, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 2 + "'", int15 == 2);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 2 + "'", int16 == 2);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 2 + "'", int17 == 2);
        org.junit.Assert.assertNotNull(matrixArray18);
        org.junit.Assert.assertNotNull(matrix19);
        org.junit.Assert.assertNotNull(matrix21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(matrixArray24);
        org.junit.Assert.assertNotNull(matrix25);
        org.junit.Assert.assertNotNull(matrix28);
        org.junit.Assert.assertNotNull(matrix30);
        org.junit.Assert.assertNotNull(matrix33);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 2 + "'", int34 == 2);
        org.junit.Assert.assertNotNull(matrix36);
        org.junit.Assert.assertTrue("'" + double37 + "' != '" + 10.0d + "'", double37 == 10.0d);
        org.junit.Assert.assertNotNull(matrix40);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 2 + "'", int41 == 2);
        org.junit.Assert.assertNotNull(matrix43);
        org.junit.Assert.assertNotNull(matrix44);
        org.junit.Assert.assertNotNull(matrix45);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(matrix48);
        org.junit.Assert.assertNotNull(matrix49);
        org.junit.Assert.assertNotNull(matrixArray50);
    }

    @Test
    public void test3358() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3358");
        com.operations.Matrix.Matrix matrix2 = com.operations.Matrix.MatrixTransformations.project2D(65.19779036970327d, (double) (-1));
        org.junit.Assert.assertNotNull(matrix2);
    }

    @Test
    public void test3359() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3359");
        double[] doubleArray2 = new double[] { 10, 'a' };
        double[] doubleArray5 = new double[] { 10, 'a' };
        double[][] doubleArray6 = new double[][] { doubleArray2, doubleArray5 };
        com.operations.Matrix.Matrix matrix7 = new com.operations.Matrix.Matrix(doubleArray6);
        int int8 = matrix7.getCols();
        int int9 = matrix7.getCols();
        matrix7.print();
        double[] doubleArray13 = new double[] { 10, 'a' };
        double[] doubleArray16 = new double[] { 10, 'a' };
        double[][] doubleArray17 = new double[][] { doubleArray13, doubleArray16 };
        com.operations.Matrix.Matrix matrix18 = new com.operations.Matrix.Matrix(doubleArray17);
        boolean boolean20 = com.operations.Matrix.MatrixUtils.compare(matrix7, matrix18, (double) (-1));
        com.operations.Matrix.Matrix matrix21 = com.operations.Matrix.MatrixDecompositions.choleskyDecomposition(matrix18);
        com.operations.Matrix.Matrix matrix23 = com.operations.Matrix.MatrixOperations.scalarMultiply(matrix21, 32.0d);
        com.operations.Matrix.Matrix matrix24 = com.operations.Matrix.MatrixDecompositions.choleskyDecomposition(matrix21);
        double[][] doubleArray25 = matrix21.getData();
        com.operations.Matrix.Matrix matrix26 = com.operations.Matrix.MatrixOperations.transpose(matrix21);
        matrix21.print();
        double[][] doubleArray28 = matrix21.getData();
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertArrayEquals(doubleArray2, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertArrayEquals(doubleArray5, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 2 + "'", int8 == 2);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 2 + "'", int9 == 2);
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertArrayEquals(doubleArray13, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertArrayEquals(doubleArray16, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(matrix21);
        org.junit.Assert.assertNotNull(matrix23);
        org.junit.Assert.assertNotNull(matrix24);
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertNotNull(matrix26);
        org.junit.Assert.assertNotNull(doubleArray28);
    }

    @Test
    public void test3360() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3360");
        double[] doubleArray2 = new double[] { 10, 'a' };
        double[] doubleArray5 = new double[] { 10, 'a' };
        double[][] doubleArray6 = new double[][] { doubleArray2, doubleArray5 };
        com.operations.Matrix.Matrix matrix7 = new com.operations.Matrix.Matrix(doubleArray6);
        com.operations.Matrix.Matrix matrix8 = new com.operations.Matrix.Matrix(doubleArray6);
        boolean boolean9 = com.operations.Matrix.MatrixUtils.isSquare(matrix8);
        double[] doubleArray12 = new double[] { 10, 'a' };
        double[] doubleArray15 = new double[] { 10, 'a' };
        double[][] doubleArray16 = new double[][] { doubleArray12, doubleArray15 };
        com.operations.Matrix.Matrix matrix17 = new com.operations.Matrix.Matrix(doubleArray16);
        int int18 = matrix17.getCols();
        int int19 = matrix17.getCols();
        matrix17.print();
        double[] doubleArray23 = new double[] { 10, 'a' };
        double[] doubleArray26 = new double[] { 10, 'a' };
        double[][] doubleArray27 = new double[][] { doubleArray23, doubleArray26 };
        com.operations.Matrix.Matrix matrix28 = new com.operations.Matrix.Matrix(doubleArray27);
        boolean boolean30 = com.operations.Matrix.MatrixUtils.compare(matrix17, matrix28, (double) (-1));
        com.operations.Matrix.Matrix matrix31 = com.operations.Matrix.MatrixOperations.subtract(matrix8, matrix28);
        com.operations.Matrix.Matrix matrix33 = com.operations.Matrix.MatrixOperations.scalarMultiply(matrix8, (double) 0.0f);
        int int34 = matrix8.getCols();
        com.operations.Matrix.Matrix matrix35 = com.operations.Matrix.MatrixDecompositions.choleskyDecomposition(matrix8);
        com.operations.Matrix.Matrix matrix38 = com.operations.Matrix.MatrixTransformations.scale2D((double) 100L, 1.0d);
        com.operations.Matrix.Matrix matrix39 = com.operations.Matrix.MatrixOperations.transpose(matrix38);
        com.operations.Matrix.Matrix matrix40 = com.operations.Matrix.MatrixOperations.add(matrix35, matrix39);
        com.operations.Matrix.Matrix[] matrixArray41 = com.operations.Matrix.MatrixDecompositions.luDecomposition(matrix39);
        int int42 = matrix39.getCols();
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertArrayEquals(doubleArray2, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertArrayEquals(doubleArray5, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertArrayEquals(doubleArray12, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertArrayEquals(doubleArray15, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 2 + "'", int18 == 2);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 2 + "'", int19 == 2);
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertArrayEquals(doubleArray23, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertArrayEquals(doubleArray26, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(matrix31);
        org.junit.Assert.assertNotNull(matrix33);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 2 + "'", int34 == 2);
        org.junit.Assert.assertNotNull(matrix35);
        org.junit.Assert.assertNotNull(matrix38);
        org.junit.Assert.assertNotNull(matrix39);
        org.junit.Assert.assertNotNull(matrix40);
        org.junit.Assert.assertNotNull(matrixArray41);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 2 + "'", int42 == 2);
    }

    @Test
    public void test3361() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3361");
        com.operations.Matrix.Matrix matrix4 = com.operations.Matrix.MatrixUtils.generateRandomMatrix(100, 0, (int) ' ', (int) (byte) 1);
        matrix4.print();
        matrix4.print();
        org.junit.Assert.assertNotNull(matrix4);
    }

    @Test
    public void test3362() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3362");
        com.operations.Matrix.Matrix matrix1 = com.operations.Matrix.MatrixTransformations.rotate2D(186.6644586191991d);
        org.junit.Assert.assertNotNull(matrix1);
    }

    @Test
    public void test3363() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3363");
        com.operations.Matrix.Matrix matrix2 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0L, (double) (byte) 10);
        double[] doubleArray5 = new double[] { 10, 'a' };
        double[] doubleArray8 = new double[] { 10, 'a' };
        double[][] doubleArray9 = new double[][] { doubleArray5, doubleArray8 };
        com.operations.Matrix.Matrix matrix10 = new com.operations.Matrix.Matrix(doubleArray9);
        int int11 = matrix10.getCols();
        int int12 = matrix10.getCols();
        int int13 = matrix10.getCols();
        com.operations.Matrix.Matrix[] matrixArray14 = com.operations.Matrix.MatrixDecompositions.luDecomposition(matrix10);
        com.operations.Matrix.Matrix matrix15 = com.operations.Matrix.MatrixOperations.multiply(matrix2, matrix10);
        com.operations.Matrix.Matrix matrix17 = com.operations.Matrix.MatrixTransformations.rotate2D((double) (short) 100);
        boolean boolean19 = com.operations.Matrix.MatrixUtils.compare(matrix10, matrix17, (double) (byte) 0);
        boolean boolean20 = com.operations.Matrix.MatrixUtils.isSymmetric(matrix17);
        boolean boolean21 = com.operations.Matrix.MatrixUtils.isSquare(matrix17);
        com.operations.Matrix.Matrix matrix23 = com.operations.Matrix.MatrixTransformations.rotate2D((double) (short) 100);
        boolean boolean25 = com.operations.Matrix.MatrixUtils.compare(matrix17, matrix23, (double) (byte) 100);
        matrix23.print();
        com.operations.Matrix.Matrix matrix29 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0L, (double) (byte) 10);
        int int30 = matrix29.getRows();
        com.operations.Matrix.Matrix matrix32 = com.operations.Matrix.MatrixOperations.scalarMultiply(matrix29, (double) 2);
        matrix29.print();
        com.operations.Matrix.Matrix matrix39 = com.operations.Matrix.MatrixUtils.generateRandomMatrix((int) (short) 10, (int) (short) 100, (int) (byte) -1, (-1), (long) (byte) 10);
        boolean boolean41 = com.operations.Matrix.MatrixUtils.compare(matrix29, matrix39, (double) (short) 10);
        double[] doubleArray44 = new double[] { 10, 'a' };
        double[] doubleArray47 = new double[] { 10, 'a' };
        double[][] doubleArray48 = new double[][] { doubleArray44, doubleArray47 };
        com.operations.Matrix.Matrix matrix49 = new com.operations.Matrix.Matrix(doubleArray48);
        com.operations.Matrix.Matrix matrix50 = new com.operations.Matrix.Matrix(doubleArray48);
        com.operations.Matrix.Matrix matrix52 = com.operations.Matrix.MatrixTransformations.rotate2D((double) (short) 100);
        double[] doubleArray55 = new double[] { 137.90576492663388d, (byte) -1 };
        double[] doubleArray56 = com.operations.Matrix.MatrixSolver.solveGaussian(matrix52, doubleArray55);
        com.operations.Matrix.Matrix matrix57 = com.operations.Matrix.MatrixOperations.add(matrix50, matrix52);
        com.operations.Matrix.Matrix matrix58 = com.operations.Matrix.MatrixDecompositions.choleskyDecomposition(matrix50);
        com.operations.Matrix.Matrix matrix61 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0L, (double) (byte) 10);
        double[] doubleArray64 = new double[] { 10, 'a' };
        double[] doubleArray67 = new double[] { 10, 'a' };
        double[][] doubleArray68 = new double[][] { doubleArray64, doubleArray67 };
        com.operations.Matrix.Matrix matrix69 = new com.operations.Matrix.Matrix(doubleArray68);
        int int70 = matrix69.getCols();
        int int71 = matrix69.getCols();
        int int72 = matrix69.getCols();
        com.operations.Matrix.Matrix[] matrixArray73 = com.operations.Matrix.MatrixDecompositions.luDecomposition(matrix69);
        com.operations.Matrix.Matrix matrix74 = com.operations.Matrix.MatrixOperations.multiply(matrix61, matrix69);
        com.operations.Matrix.Matrix matrix76 = com.operations.Matrix.MatrixTransformations.rotate2D((double) (short) 100);
        boolean boolean78 = com.operations.Matrix.MatrixUtils.compare(matrix69, matrix76, (double) (byte) 0);
        com.operations.Matrix.Matrix matrix79 = com.operations.Matrix.MatrixOperations.transpose(matrix69);
        com.operations.Matrix.Matrix matrix81 = com.operations.Matrix.MatrixOperations.scalarMultiply(matrix79, (double) 10);
        com.operations.Matrix.Matrix matrix82 = com.operations.Matrix.MatrixOperations.add(matrix58, matrix79);
        com.operations.Matrix.Matrix matrix84 = com.operations.Matrix.MatrixOperations.scalarMultiply(matrix82, 137.90576492663388d);
        com.operations.Matrix.Matrix matrix85 = com.operations.Matrix.MatrixOperations.multiply(matrix29, matrix82);
        boolean boolean87 = com.operations.Matrix.MatrixUtils.compare(matrix23, matrix29, 350.0d);
        boolean boolean88 = com.operations.Matrix.MatrixUtils.isSymmetric(matrix29);
        org.junit.Assert.assertNotNull(matrix2);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertArrayEquals(doubleArray5, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertArrayEquals(doubleArray8, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 2 + "'", int11 == 2);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 2 + "'", int12 == 2);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 2 + "'", int13 == 2);
        org.junit.Assert.assertNotNull(matrixArray14);
        org.junit.Assert.assertNotNull(matrix15);
        org.junit.Assert.assertNotNull(matrix17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertNotNull(matrix23);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertNotNull(matrix29);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 2 + "'", int30 == 2);
        org.junit.Assert.assertNotNull(matrix32);
        org.junit.Assert.assertNotNull(matrix39);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertArrayEquals(doubleArray44, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertArrayEquals(doubleArray47, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertNotNull(matrix52);
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertArrayEquals(doubleArray55, new double[] { 137.90576492663388d, (-1.0d) }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray56);
        org.junit.Assert.assertArrayEquals(doubleArray56, new double[] { (-24.931892522286255d), (-135.63701830716116d) }, 1.0E-15);
        org.junit.Assert.assertNotNull(matrix57);
        org.junit.Assert.assertNotNull(matrix58);
        org.junit.Assert.assertNotNull(matrix61);
        org.junit.Assert.assertNotNull(doubleArray64);
        org.junit.Assert.assertArrayEquals(doubleArray64, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray67);
        org.junit.Assert.assertArrayEquals(doubleArray67, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray68);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 2 + "'", int70 == 2);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 2 + "'", int71 == 2);
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 2 + "'", int72 == 2);
        org.junit.Assert.assertNotNull(matrixArray73);
        org.junit.Assert.assertNotNull(matrix74);
        org.junit.Assert.assertNotNull(matrix76);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertNotNull(matrix79);
        org.junit.Assert.assertNotNull(matrix81);
        org.junit.Assert.assertNotNull(matrix82);
        org.junit.Assert.assertNotNull(matrix84);
        org.junit.Assert.assertNotNull(matrix85);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + true + "'", boolean87 == true);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + true + "'", boolean88 == true);
    }

    @Test
    public void test3364() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3364");
        // The following exception was thrown during execution in test generation
        try {
            com.operations.Matrix.Matrix matrix4 = com.operations.Matrix.MatrixUtils.generateRandomMatrix((int) (byte) 0, (int) (short) 100, (int) (short) 10, (int) (short) 10);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
    }

    @Test
    public void test3365() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3365");
        com.operations.Matrix.Matrix matrix1 = com.operations.Matrix.MatrixTransformations.rotate2D(130.28797221734817d);
        org.junit.Assert.assertNotNull(matrix1);
    }

    @Test
    public void test3366() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3366");
        com.operations.Matrix.Matrix matrix2 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0L, (double) (byte) 10);
        double[] doubleArray5 = new double[] { 10, 'a' };
        double[] doubleArray8 = new double[] { 10, 'a' };
        double[][] doubleArray9 = new double[][] { doubleArray5, doubleArray8 };
        com.operations.Matrix.Matrix matrix10 = new com.operations.Matrix.Matrix(doubleArray9);
        int int11 = matrix10.getCols();
        int int12 = matrix10.getCols();
        int int13 = matrix10.getCols();
        com.operations.Matrix.Matrix[] matrixArray14 = com.operations.Matrix.MatrixDecompositions.luDecomposition(matrix10);
        com.operations.Matrix.Matrix matrix15 = com.operations.Matrix.MatrixOperations.multiply(matrix2, matrix10);
        com.operations.Matrix.Matrix matrix17 = com.operations.Matrix.MatrixTransformations.rotate2D((double) (short) 100);
        boolean boolean19 = com.operations.Matrix.MatrixUtils.compare(matrix10, matrix17, (double) (byte) 0);
        com.operations.Matrix.Matrix[] matrixArray20 = com.operations.Matrix.MatrixDecompositions.luDecomposition(matrix10);
        com.operations.Matrix.Matrix matrix21 = com.operations.Matrix.MatrixOperations.transpose(matrix10);
        com.operations.Matrix.Matrix matrix23 = com.operations.Matrix.MatrixTransformations.rotate2D(35.0d);
        com.operations.Matrix.Matrix matrix24 = com.operations.Matrix.MatrixOperations.subtract(matrix21, matrix23);
        com.operations.Matrix.Matrix matrix27 = com.operations.Matrix.MatrixTransformations.scale2D((double) (-1L), (double) '4');
        com.operations.Matrix.Matrix matrix28 = com.operations.Matrix.MatrixOperations.transpose(matrix27);
        com.operations.Matrix.Matrix matrix29 = com.operations.Matrix.MatrixOperations.subtract(matrix23, matrix27);
        // The following exception was thrown during execution in test generation
        try {
            com.operations.Matrix.Matrix matrix30 = com.operations.Matrix.MatrixDecompositions.choleskyDecomposition(matrix27);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Matrix is not positive definite.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(matrix2);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertArrayEquals(doubleArray5, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertArrayEquals(doubleArray8, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 2 + "'", int11 == 2);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 2 + "'", int12 == 2);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 2 + "'", int13 == 2);
        org.junit.Assert.assertNotNull(matrixArray14);
        org.junit.Assert.assertNotNull(matrix15);
        org.junit.Assert.assertNotNull(matrix17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(matrixArray20);
        org.junit.Assert.assertNotNull(matrix21);
        org.junit.Assert.assertNotNull(matrix23);
        org.junit.Assert.assertNotNull(matrix24);
        org.junit.Assert.assertNotNull(matrix27);
        org.junit.Assert.assertNotNull(matrix28);
        org.junit.Assert.assertNotNull(matrix29);
    }

    @Test
    public void test3367() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3367");
        com.operations.Matrix.Matrix matrix2 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0L, (double) (byte) 10);
        double[] doubleArray5 = new double[] { 10, 'a' };
        double[] doubleArray8 = new double[] { 10, 'a' };
        double[][] doubleArray9 = new double[][] { doubleArray5, doubleArray8 };
        com.operations.Matrix.Matrix matrix10 = new com.operations.Matrix.Matrix(doubleArray9);
        int int11 = matrix10.getCols();
        int int12 = matrix10.getCols();
        int int13 = matrix10.getCols();
        com.operations.Matrix.Matrix[] matrixArray14 = com.operations.Matrix.MatrixDecompositions.luDecomposition(matrix10);
        com.operations.Matrix.Matrix matrix15 = com.operations.Matrix.MatrixOperations.multiply(matrix2, matrix10);
        com.operations.Matrix.Matrix matrix17 = com.operations.Matrix.MatrixTransformations.rotate2D((double) (short) 100);
        boolean boolean19 = com.operations.Matrix.MatrixUtils.compare(matrix10, matrix17, (double) (byte) 0);
        com.operations.Matrix.Matrix matrix20 = com.operations.Matrix.MatrixOperations.transpose(matrix10);
        com.operations.Matrix.Matrix matrix22 = com.operations.Matrix.MatrixOperations.scalarMultiply(matrix20, (double) 10);
        com.operations.Matrix.Matrix matrix25 = new com.operations.Matrix.Matrix(52, 2);
        int int26 = matrix25.getRows();
        boolean boolean28 = com.operations.Matrix.MatrixUtils.compare(matrix22, matrix25, 30.0d);
        int int29 = matrix25.getCols();
        org.junit.Assert.assertNotNull(matrix2);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertArrayEquals(doubleArray5, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertArrayEquals(doubleArray8, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 2 + "'", int11 == 2);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 2 + "'", int12 == 2);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 2 + "'", int13 == 2);
        org.junit.Assert.assertNotNull(matrixArray14);
        org.junit.Assert.assertNotNull(matrix15);
        org.junit.Assert.assertNotNull(matrix17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(matrix20);
        org.junit.Assert.assertNotNull(matrix22);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 52 + "'", int26 == 52);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 2 + "'", int29 == 2);
    }

    @Test
    public void test3368() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3368");
        com.operations.Matrix.Matrix matrix4 = com.operations.Matrix.MatrixUtils.generateRandomMatrix(97, 0, (int) '4', 2);
        // The following exception was thrown during execution in test generation
        try {
            double double7 = matrix4.getValue((int) (short) 0, 32);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(matrix4);
    }

    @Test
    public void test3369() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3369");
        com.operations.Matrix.Matrix matrix2 = com.operations.Matrix.MatrixTransformations.project2D((double) ' ', 0.0d);
        double[] doubleArray5 = new double[] { 10, 'a' };
        double[] doubleArray8 = new double[] { 10, 'a' };
        double[][] doubleArray9 = new double[][] { doubleArray5, doubleArray8 };
        com.operations.Matrix.Matrix matrix10 = new com.operations.Matrix.Matrix(doubleArray9);
        int int11 = matrix10.getCols();
        boolean boolean12 = com.operations.Matrix.MatrixUtils.isSquare(matrix10);
        com.operations.Matrix.Matrix matrix13 = com.operations.Matrix.MatrixOperations.transpose(matrix10);
        int int14 = matrix13.getRows();
        com.operations.Matrix.Matrix matrix17 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0L, (double) (byte) 10);
        double[] doubleArray20 = new double[] { 10, 'a' };
        double[] doubleArray23 = new double[] { 10, 'a' };
        double[][] doubleArray24 = new double[][] { doubleArray20, doubleArray23 };
        com.operations.Matrix.Matrix matrix25 = new com.operations.Matrix.Matrix(doubleArray24);
        int int26 = matrix25.getCols();
        int int27 = matrix25.getCols();
        int int28 = matrix25.getCols();
        com.operations.Matrix.Matrix[] matrixArray29 = com.operations.Matrix.MatrixDecompositions.luDecomposition(matrix25);
        com.operations.Matrix.Matrix matrix30 = com.operations.Matrix.MatrixOperations.multiply(matrix17, matrix25);
        com.operations.Matrix.Matrix matrix32 = com.operations.Matrix.MatrixTransformations.rotate2D((double) (short) 100);
        boolean boolean34 = com.operations.Matrix.MatrixUtils.compare(matrix25, matrix32, (double) (byte) 0);
        com.operations.Matrix.Matrix matrix35 = com.operations.Matrix.MatrixOperations.multiply(matrix13, matrix25);
        com.operations.Matrix.Matrix matrix36 = com.operations.Matrix.MatrixOperations.add(matrix2, matrix25);
        matrix25.print();
        com.operations.Matrix.Matrix[] matrixArray38 = com.operations.Matrix.MatrixDecompositions.luDecomposition(matrix25);
        boolean boolean39 = com.operations.Matrix.MatrixUtils.isSquare(matrix25);
        com.operations.Matrix.Matrix[] matrixArray40 = com.operations.Matrix.MatrixDecompositions.luDecomposition(matrix25);
        int int41 = matrix25.getCols();
        com.operations.Matrix.Matrix[] matrixArray42 = com.operations.Matrix.MatrixDecompositions.luDecomposition(matrix25);
        // The following exception was thrown during execution in test generation
        try {
            double double45 = matrix25.getValue((int) (byte) -1, (int) (short) 1);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(matrix2);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertArrayEquals(doubleArray5, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertArrayEquals(doubleArray8, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 2 + "'", int11 == 2);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(matrix13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 2 + "'", int14 == 2);
        org.junit.Assert.assertNotNull(matrix17);
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertArrayEquals(doubleArray20, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertArrayEquals(doubleArray23, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 2 + "'", int26 == 2);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 2 + "'", int27 == 2);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 2 + "'", int28 == 2);
        org.junit.Assert.assertNotNull(matrixArray29);
        org.junit.Assert.assertNotNull(matrix30);
        org.junit.Assert.assertNotNull(matrix32);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(matrix35);
        org.junit.Assert.assertNotNull(matrix36);
        org.junit.Assert.assertNotNull(matrixArray38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertNotNull(matrixArray40);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 2 + "'", int41 == 2);
        org.junit.Assert.assertNotNull(matrixArray42);
    }

    @Test
    public void test3370() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3370");
        double[] doubleArray2 = new double[] { 10, 'a' };
        double[] doubleArray5 = new double[] { 10, 'a' };
        double[][] doubleArray6 = new double[][] { doubleArray2, doubleArray5 };
        com.operations.Matrix.Matrix matrix7 = new com.operations.Matrix.Matrix(doubleArray6);
        com.operations.Matrix.Matrix matrix8 = new com.operations.Matrix.Matrix(doubleArray6);
        int int9 = matrix8.getCols();
        int int10 = matrix8.getRows();
        // The following exception was thrown during execution in test generation
        try {
            matrix8.setValue(100, (int) (byte) 10, 481.29607094437216d);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: Index 100 out of bounds for length 2");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertArrayEquals(doubleArray2, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertArrayEquals(doubleArray5, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 2 + "'", int9 == 2);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 2 + "'", int10 == 2);
    }

    @Test
    public void test3371() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3371");
        com.operations.Matrix.Matrix matrix2 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0L, (double) (byte) 10);
        int int3 = matrix2.getRows();
        com.operations.Matrix.Matrix matrix6 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0L, (double) (byte) 10);
        int int7 = matrix6.getRows();
        com.operations.Matrix.Matrix matrix9 = com.operations.Matrix.MatrixOperations.scalarMultiply(matrix6, (double) 2);
        com.operations.Matrix.Matrix matrix10 = com.operations.Matrix.MatrixOperations.subtract(matrix2, matrix6);
        com.operations.Matrix.Matrix matrix13 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0L, (double) (byte) 10);
        int int14 = matrix13.getRows();
        com.operations.Matrix.Matrix matrix20 = com.operations.Matrix.MatrixUtils.generateRandomMatrix(100, (int) (byte) 1, (int) '#', (int) '#', 1L);
        boolean boolean22 = com.operations.Matrix.MatrixUtils.compare(matrix13, matrix20, (double) 1.0f);
        com.operations.Matrix.Matrix matrix24 = com.operations.Matrix.MatrixOperations.scalarMultiply(matrix13, (double) 1L);
        boolean boolean26 = com.operations.Matrix.MatrixUtils.compare(matrix10, matrix24, 0.0d);
        com.operations.Matrix.Matrix matrix28 = com.operations.Matrix.MatrixTransformations.rotate2D((double) (short) 100);
        double[][] doubleArray29 = matrix28.getData();
        com.operations.Matrix.Matrix matrix30 = new com.operations.Matrix.Matrix(doubleArray29);
        com.operations.Matrix.Matrix matrix31 = com.operations.Matrix.MatrixOperations.add(matrix24, matrix30);
        int int32 = matrix30.getRows();
        org.junit.Assert.assertNotNull(matrix2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 2 + "'", int3 == 2);
        org.junit.Assert.assertNotNull(matrix6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 2 + "'", int7 == 2);
        org.junit.Assert.assertNotNull(matrix9);
        org.junit.Assert.assertNotNull(matrix10);
        org.junit.Assert.assertNotNull(matrix13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 2 + "'", int14 == 2);
        org.junit.Assert.assertNotNull(matrix20);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(matrix24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(matrix28);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertNotNull(matrix31);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 2 + "'", int32 == 2);
    }

    @Test
    public void test3372() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3372");
        com.operations.Matrix.Matrix matrix4 = com.operations.Matrix.MatrixUtils.generateRandomMatrix((int) (byte) 1, (int) (byte) 1, 35, (int) '#');
        org.junit.Assert.assertNotNull(matrix4);
    }

    @Test
    public void test3373() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3373");
        com.operations.Matrix.Matrix matrix2 = com.operations.Matrix.MatrixTransformations.project2D(17.26267650163207d, (double) 100L);
        org.junit.Assert.assertNotNull(matrix2);
    }

    @Test
    public void test3374() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3374");
        com.operations.Matrix.Matrix matrix2 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0.0f, 350.0d);
        com.operations.Matrix.Matrix matrix5 = com.operations.Matrix.MatrixTransformations.project2D(0.0d, (double) 0);
        com.operations.Matrix.Matrix[] matrixArray6 = com.operations.Matrix.MatrixDecompositions.luDecomposition(matrix5);
        com.operations.Matrix.Matrix matrix9 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0L, (double) (byte) 10);
        int int10 = matrix9.getRows();
        com.operations.Matrix.Matrix matrix12 = com.operations.Matrix.MatrixOperations.scalarMultiply(matrix9, (double) 2);
        double double13 = com.operations.Matrix.MatrixUtils.frobeniusNorm(matrix9);
        int int14 = matrix9.getRows();
        com.operations.Matrix.Matrix matrix15 = com.operations.Matrix.MatrixOperations.transpose(matrix9);
        com.operations.Matrix.Matrix matrix16 = com.operations.Matrix.MatrixOperations.multiply(matrix5, matrix15);
        com.operations.Matrix.Matrix matrix17 = com.operations.Matrix.MatrixOperations.multiply(matrix2, matrix15);
        com.operations.Matrix.Matrix matrix19 = com.operations.Matrix.MatrixOperations.scalarMultiply(matrix15, 10.0d);
        matrix19.print();
        int int21 = matrix19.getRows();
        org.junit.Assert.assertNotNull(matrix2);
        org.junit.Assert.assertNotNull(matrix5);
        org.junit.Assert.assertNotNull(matrixArray6);
        org.junit.Assert.assertNotNull(matrix9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 2 + "'", int10 == 2);
        org.junit.Assert.assertNotNull(matrix12);
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 10.0d + "'", double13 == 10.0d);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 2 + "'", int14 == 2);
        org.junit.Assert.assertNotNull(matrix15);
        org.junit.Assert.assertNotNull(matrix16);
        org.junit.Assert.assertNotNull(matrix17);
        org.junit.Assert.assertNotNull(matrix19);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 2 + "'", int21 == 2);
    }

    @Test
    public void test3375() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3375");
        com.operations.Matrix.Matrix matrix2 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0.0f, (double) (-1));
        com.operations.Matrix.Matrix matrix5 = com.operations.Matrix.MatrixTransformations.scale2D(146.4308710620817d, (double) 10L);
        com.operations.Matrix.Matrix matrix6 = com.operations.Matrix.MatrixOperations.multiply(matrix2, matrix5);
        com.operations.Matrix.Matrix matrix7 = com.operations.Matrix.MatrixOperations.transpose(matrix2);
        double double8 = com.operations.Matrix.MatrixUtils.frobeniusNorm(matrix2);
        org.junit.Assert.assertNotNull(matrix2);
        org.junit.Assert.assertNotNull(matrix5);
        org.junit.Assert.assertNotNull(matrix6);
        org.junit.Assert.assertNotNull(matrix7);
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 1.0d + "'", double8 == 1.0d);
    }

    @Test
    public void test3376() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3376");
        com.operations.Matrix.Matrix matrix2 = new com.operations.Matrix.Matrix((int) (short) 10, (int) (short) 100);
        com.operations.Matrix.Matrix matrix8 = com.operations.Matrix.MatrixUtils.generateRandomMatrix(100, (int) (byte) 1, (int) '#', (int) '#', 1L);
        double double11 = matrix8.getValue((int) '4', 0);
        matrix8.print();
        com.operations.Matrix.Matrix matrix13 = com.operations.Matrix.MatrixOperations.transpose(matrix8);
        int int14 = matrix8.getRows();
        boolean boolean15 = com.operations.Matrix.MatrixUtils.isSquare(matrix8);
        // The following exception was thrown during execution in test generation
        try {
            com.operations.Matrix.Matrix matrix16 = com.operations.Matrix.MatrixOperations.add(matrix2, matrix8);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Matrices must have the same dimensions for addition.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(matrix8);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 35.0d + "'", double11 == 35.0d);
        org.junit.Assert.assertNotNull(matrix13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 100 + "'", int14 == 100);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
    }

    @Test
    public void test3377() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3377");
        com.operations.Matrix.Matrix matrix2 = com.operations.Matrix.MatrixTransformations.scale2D((double) 100, (double) 1L);
        double[] doubleArray5 = new double[] { 10, 'a' };
        double[] doubleArray8 = new double[] { 10, 'a' };
        double[][] doubleArray9 = new double[][] { doubleArray5, doubleArray8 };
        com.operations.Matrix.Matrix matrix10 = new com.operations.Matrix.Matrix(doubleArray9);
        com.operations.Matrix.Matrix matrix11 = new com.operations.Matrix.Matrix(doubleArray9);
        com.operations.Matrix.Matrix[] matrixArray12 = com.operations.Matrix.MatrixDecompositions.luDecomposition(matrix11);
        com.operations.Matrix.Matrix matrix15 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0, (double) 100L);
        com.operations.Matrix.Matrix matrix16 = com.operations.Matrix.MatrixOperations.subtract(matrix11, matrix15);
        double[][] doubleArray17 = matrix16.getData();
        com.operations.Matrix.Matrix matrix18 = new com.operations.Matrix.Matrix(doubleArray17);
        com.operations.Matrix.Matrix matrix20 = com.operations.Matrix.MatrixTransformations.rotate2D(100.0d);
        com.operations.Matrix.Matrix matrix21 = com.operations.Matrix.MatrixOperations.subtract(matrix18, matrix20);
        com.operations.Matrix.Matrix matrix22 = com.operations.Matrix.MatrixOperations.add(matrix2, matrix20);
        java.lang.Class<?> wildcardClass23 = matrix22.getClass();
        org.junit.Assert.assertNotNull(matrix2);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertArrayEquals(doubleArray5, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertArrayEquals(doubleArray8, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertNotNull(matrixArray12);
        org.junit.Assert.assertNotNull(matrix15);
        org.junit.Assert.assertNotNull(matrix16);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertNotNull(matrix20);
        org.junit.Assert.assertNotNull(matrix21);
        org.junit.Assert.assertNotNull(matrix22);
        org.junit.Assert.assertNotNull(wildcardClass23);
    }

    @Test
    public void test3378() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3378");
        double[] doubleArray2 = new double[] { 10, 'a' };
        double[] doubleArray5 = new double[] { 10, 'a' };
        double[][] doubleArray6 = new double[][] { doubleArray2, doubleArray5 };
        com.operations.Matrix.Matrix matrix7 = new com.operations.Matrix.Matrix(doubleArray6);
        int int8 = matrix7.getCols();
        boolean boolean9 = com.operations.Matrix.MatrixUtils.isSquare(matrix7);
        com.operations.Matrix.Matrix matrix10 = com.operations.Matrix.MatrixOperations.transpose(matrix7);
        int int11 = matrix10.getRows();
        com.operations.Matrix.Matrix matrix14 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0L, (double) (byte) 10);
        double[] doubleArray17 = new double[] { 10, 'a' };
        double[] doubleArray20 = new double[] { 10, 'a' };
        double[][] doubleArray21 = new double[][] { doubleArray17, doubleArray20 };
        com.operations.Matrix.Matrix matrix22 = new com.operations.Matrix.Matrix(doubleArray21);
        int int23 = matrix22.getCols();
        int int24 = matrix22.getCols();
        int int25 = matrix22.getCols();
        com.operations.Matrix.Matrix[] matrixArray26 = com.operations.Matrix.MatrixDecompositions.luDecomposition(matrix22);
        com.operations.Matrix.Matrix matrix27 = com.operations.Matrix.MatrixOperations.multiply(matrix14, matrix22);
        com.operations.Matrix.Matrix matrix29 = com.operations.Matrix.MatrixTransformations.rotate2D((double) (short) 100);
        boolean boolean31 = com.operations.Matrix.MatrixUtils.compare(matrix22, matrix29, (double) (byte) 0);
        com.operations.Matrix.Matrix matrix32 = com.operations.Matrix.MatrixOperations.multiply(matrix10, matrix22);
        double[] doubleArray35 = new double[] { 10, 'a' };
        double[] doubleArray38 = new double[] { 10, 'a' };
        double[][] doubleArray39 = new double[][] { doubleArray35, doubleArray38 };
        com.operations.Matrix.Matrix matrix40 = new com.operations.Matrix.Matrix(doubleArray39);
        int int41 = matrix40.getCols();
        int int42 = matrix40.getCols();
        matrix40.print();
        com.operations.Matrix.Matrix matrix44 = com.operations.Matrix.MatrixOperations.multiply(matrix10, matrix40);
        double double45 = com.operations.Matrix.MatrixUtils.frobeniusNorm(matrix40);
        double[][] doubleArray46 = matrix40.getData();
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertArrayEquals(doubleArray2, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertArrayEquals(doubleArray5, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 2 + "'", int8 == 2);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertNotNull(matrix10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 2 + "'", int11 == 2);
        org.junit.Assert.assertNotNull(matrix14);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertArrayEquals(doubleArray17, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertArrayEquals(doubleArray20, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 2 + "'", int23 == 2);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 2 + "'", int24 == 2);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 2 + "'", int25 == 2);
        org.junit.Assert.assertNotNull(matrixArray26);
        org.junit.Assert.assertNotNull(matrix27);
        org.junit.Assert.assertNotNull(matrix29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(matrix32);
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertArrayEquals(doubleArray35, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertArrayEquals(doubleArray38, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 2 + "'", int41 == 2);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 2 + "'", int42 == 2);
        org.junit.Assert.assertNotNull(matrix44);
        org.junit.Assert.assertTrue("'" + double45 + "' != '" + 137.90576492663388d + "'", double45 == 137.90576492663388d);
        org.junit.Assert.assertNotNull(doubleArray46);
    }

    @Test
    public void test3379() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3379");
        com.operations.Matrix.Matrix matrix2 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0L, (double) (byte) 10);
        double[] doubleArray5 = new double[] { 10, 'a' };
        double[] doubleArray8 = new double[] { 10, 'a' };
        double[][] doubleArray9 = new double[][] { doubleArray5, doubleArray8 };
        com.operations.Matrix.Matrix matrix10 = new com.operations.Matrix.Matrix(doubleArray9);
        int int11 = matrix10.getCols();
        int int12 = matrix10.getCols();
        int int13 = matrix10.getCols();
        com.operations.Matrix.Matrix[] matrixArray14 = com.operations.Matrix.MatrixDecompositions.luDecomposition(matrix10);
        com.operations.Matrix.Matrix matrix15 = com.operations.Matrix.MatrixOperations.multiply(matrix2, matrix10);
        com.operations.Matrix.Matrix matrix17 = com.operations.Matrix.MatrixTransformations.rotate2D((double) (short) 100);
        boolean boolean19 = com.operations.Matrix.MatrixUtils.compare(matrix10, matrix17, (double) (byte) 0);
        double[] doubleArray22 = new double[] { 10, 'a' };
        double[] doubleArray25 = new double[] { 10, 'a' };
        double[][] doubleArray26 = new double[][] { doubleArray22, doubleArray25 };
        com.operations.Matrix.Matrix matrix27 = new com.operations.Matrix.Matrix(doubleArray26);
        com.operations.Matrix.Matrix matrix28 = new com.operations.Matrix.Matrix(doubleArray26);
        com.operations.Matrix.Matrix matrix29 = new com.operations.Matrix.Matrix(doubleArray26);
        boolean boolean31 = com.operations.Matrix.MatrixUtils.compare(matrix10, matrix29, (double) (-1));
        com.operations.Matrix.Matrix matrix33 = com.operations.Matrix.MatrixTransformations.rotate2D((double) (short) 100);
        double[] doubleArray36 = new double[] { 137.90576492663388d, (byte) -1 };
        double[] doubleArray37 = com.operations.Matrix.MatrixSolver.solveGaussian(matrix33, doubleArray36);
        com.operations.Matrix.Matrix matrix40 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0L, (double) (byte) 10);
        double[] doubleArray43 = new double[] { 10, 'a' };
        double[] doubleArray46 = new double[] { 10, 'a' };
        double[][] doubleArray47 = new double[][] { doubleArray43, doubleArray46 };
        com.operations.Matrix.Matrix matrix48 = new com.operations.Matrix.Matrix(doubleArray47);
        int int49 = matrix48.getCols();
        int int50 = matrix48.getCols();
        int int51 = matrix48.getCols();
        com.operations.Matrix.Matrix[] matrixArray52 = com.operations.Matrix.MatrixDecompositions.luDecomposition(matrix48);
        com.operations.Matrix.Matrix matrix53 = com.operations.Matrix.MatrixOperations.multiply(matrix40, matrix48);
        boolean boolean55 = com.operations.Matrix.MatrixUtils.compare(matrix33, matrix40, (double) (-1L));
        com.operations.Matrix.Matrix matrix56 = com.operations.Matrix.MatrixOperations.add(matrix29, matrix40);
        double double57 = com.operations.Matrix.MatrixUtils.frobeniusNorm(matrix29);
        com.operations.Matrix.Matrix[] matrixArray58 = com.operations.Matrix.MatrixDecompositions.luDecomposition(matrix29);
        com.operations.Matrix.Matrix matrix59 = com.operations.Matrix.MatrixOperations.transpose(matrix29);
        java.lang.Class<?> wildcardClass60 = matrix29.getClass();
        org.junit.Assert.assertNotNull(matrix2);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertArrayEquals(doubleArray5, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertArrayEquals(doubleArray8, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 2 + "'", int11 == 2);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 2 + "'", int12 == 2);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 2 + "'", int13 == 2);
        org.junit.Assert.assertNotNull(matrixArray14);
        org.junit.Assert.assertNotNull(matrix15);
        org.junit.Assert.assertNotNull(matrix17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertArrayEquals(doubleArray22, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertArrayEquals(doubleArray25, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(matrix33);
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertArrayEquals(doubleArray36, new double[] { 137.90576492663388d, (-1.0d) }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertArrayEquals(doubleArray37, new double[] { (-24.931892522286255d), (-135.63701830716116d) }, 1.0E-15);
        org.junit.Assert.assertNotNull(matrix40);
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertArrayEquals(doubleArray43, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray46);
        org.junit.Assert.assertArrayEquals(doubleArray46, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 2 + "'", int49 == 2);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 2 + "'", int50 == 2);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 2 + "'", int51 == 2);
        org.junit.Assert.assertNotNull(matrixArray52);
        org.junit.Assert.assertNotNull(matrix53);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNotNull(matrix56);
        org.junit.Assert.assertTrue("'" + double57 + "' != '" + 137.90576492663388d + "'", double57 == 137.90576492663388d);
        org.junit.Assert.assertNotNull(matrixArray58);
        org.junit.Assert.assertNotNull(matrix59);
        org.junit.Assert.assertNotNull(wildcardClass60);
    }

    @Test
    public void test3380() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3380");
        double[] doubleArray2 = new double[] { 10, 'a' };
        double[] doubleArray5 = new double[] { 10, 'a' };
        double[][] doubleArray6 = new double[][] { doubleArray2, doubleArray5 };
        com.operations.Matrix.Matrix matrix7 = new com.operations.Matrix.Matrix(doubleArray6);
        com.operations.Matrix.Matrix matrix8 = new com.operations.Matrix.Matrix(doubleArray6);
        boolean boolean9 = com.operations.Matrix.MatrixUtils.isSquare(matrix8);
        double[] doubleArray12 = new double[] { 10, 'a' };
        double[] doubleArray15 = new double[] { 10, 'a' };
        double[][] doubleArray16 = new double[][] { doubleArray12, doubleArray15 };
        com.operations.Matrix.Matrix matrix17 = new com.operations.Matrix.Matrix(doubleArray16);
        int int18 = matrix17.getCols();
        int int19 = matrix17.getCols();
        matrix17.print();
        double[] doubleArray23 = new double[] { 10, 'a' };
        double[] doubleArray26 = new double[] { 10, 'a' };
        double[][] doubleArray27 = new double[][] { doubleArray23, doubleArray26 };
        com.operations.Matrix.Matrix matrix28 = new com.operations.Matrix.Matrix(doubleArray27);
        boolean boolean30 = com.operations.Matrix.MatrixUtils.compare(matrix17, matrix28, (double) (-1));
        com.operations.Matrix.Matrix matrix31 = com.operations.Matrix.MatrixOperations.subtract(matrix8, matrix28);
        com.operations.Matrix.Matrix matrix33 = com.operations.Matrix.MatrixOperations.scalarMultiply(matrix8, (double) 0.0f);
        int int34 = matrix8.getCols();
        com.operations.Matrix.Matrix matrix35 = com.operations.Matrix.MatrixDecompositions.choleskyDecomposition(matrix8);
        com.operations.Matrix.Matrix matrix38 = com.operations.Matrix.MatrixTransformations.scale2D((double) 100L, 1.0d);
        com.operations.Matrix.Matrix matrix39 = com.operations.Matrix.MatrixOperations.transpose(matrix38);
        com.operations.Matrix.Matrix matrix40 = com.operations.Matrix.MatrixOperations.add(matrix35, matrix39);
        boolean boolean41 = com.operations.Matrix.MatrixUtils.isSquare(matrix40);
        com.operations.Matrix.Matrix matrix44 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0L, (double) (byte) 10);
        int int45 = matrix44.getRows();
        com.operations.Matrix.Matrix matrix48 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0L, (double) (byte) 10);
        int int49 = matrix48.getRows();
        com.operations.Matrix.Matrix matrix51 = com.operations.Matrix.MatrixOperations.scalarMultiply(matrix48, (double) 2);
        com.operations.Matrix.Matrix matrix52 = com.operations.Matrix.MatrixOperations.subtract(matrix44, matrix48);
        com.operations.Matrix.Matrix matrix55 = com.operations.Matrix.MatrixTransformations.scale2D(146.4308710620817d, (double) 10L);
        boolean boolean57 = com.operations.Matrix.MatrixUtils.compare(matrix48, matrix55, (double) (byte) 1);
        com.operations.Matrix.Matrix[] matrixArray58 = com.operations.Matrix.MatrixDecompositions.luDecomposition(matrix55);
        com.operations.Matrix.Matrix matrix60 = com.operations.Matrix.MatrixTransformations.rotate2D((double) '4');
        boolean boolean61 = com.operations.Matrix.MatrixUtils.isSymmetric(matrix60);
        com.operations.Matrix.Matrix matrix62 = com.operations.Matrix.MatrixOperations.add(matrix55, matrix60);
        com.operations.Matrix.Matrix matrix65 = com.operations.Matrix.MatrixTransformations.project2D(137.13497001129946d, 137.15495886388925d);
        boolean boolean67 = com.operations.Matrix.MatrixUtils.compare(matrix62, matrix65, (double) 'a');
        com.operations.Matrix.Matrix matrix68 = com.operations.Matrix.MatrixOperations.add(matrix40, matrix65);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertArrayEquals(doubleArray2, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertArrayEquals(doubleArray5, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertArrayEquals(doubleArray12, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertArrayEquals(doubleArray15, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 2 + "'", int18 == 2);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 2 + "'", int19 == 2);
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertArrayEquals(doubleArray23, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertArrayEquals(doubleArray26, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(matrix31);
        org.junit.Assert.assertNotNull(matrix33);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 2 + "'", int34 == 2);
        org.junit.Assert.assertNotNull(matrix35);
        org.junit.Assert.assertNotNull(matrix38);
        org.junit.Assert.assertNotNull(matrix39);
        org.junit.Assert.assertNotNull(matrix40);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertNotNull(matrix44);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 2 + "'", int45 == 2);
        org.junit.Assert.assertNotNull(matrix48);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 2 + "'", int49 == 2);
        org.junit.Assert.assertNotNull(matrix51);
        org.junit.Assert.assertNotNull(matrix52);
        org.junit.Assert.assertNotNull(matrix55);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNotNull(matrixArray58);
        org.junit.Assert.assertNotNull(matrix60);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNotNull(matrix62);
        org.junit.Assert.assertNotNull(matrix65);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertNotNull(matrix68);
    }

    @Test
    public void test3381() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3381");
        com.operations.Matrix.Matrix matrix0 = null;
        com.operations.Matrix.Matrix matrix5 = com.operations.Matrix.MatrixUtils.generateRandomMatrix(100, 100, 0, (int) (byte) 100);
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean7 = com.operations.Matrix.MatrixUtils.compare(matrix0, matrix5, 391.8840992892044d);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot invoke \"com.operations.Matrix.Matrix.getRows()\" because \"a\" is null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(matrix5);
    }

    @Test
    public void test3382() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3382");
        // The following exception was thrown during execution in test generation
        try {
            com.operations.Matrix.Matrix matrix5 = com.operations.Matrix.MatrixUtils.generateRandomMatrix((int) (short) 0, 35, (int) (short) 10, 100, (long) (byte) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
    }

    @Test
    public void test3383() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3383");
        com.operations.Matrix.Matrix matrix1 = com.operations.Matrix.MatrixTransformations.rotate2D((double) (short) 100);
        double[] doubleArray4 = new double[] { 137.90576492663388d, (byte) -1 };
        double[] doubleArray5 = com.operations.Matrix.MatrixSolver.solveGaussian(matrix1, doubleArray4);
        com.operations.Matrix.Matrix matrix8 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0L, (double) (byte) 10);
        int int9 = matrix8.getRows();
        com.operations.Matrix.Matrix matrix12 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0L, (double) (byte) 10);
        int int13 = matrix12.getRows();
        com.operations.Matrix.Matrix matrix15 = com.operations.Matrix.MatrixOperations.scalarMultiply(matrix12, (double) 2);
        com.operations.Matrix.Matrix matrix16 = com.operations.Matrix.MatrixOperations.subtract(matrix8, matrix12);
        com.operations.Matrix.Matrix matrix19 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0L, (double) (byte) 10);
        int int20 = matrix19.getRows();
        com.operations.Matrix.Matrix matrix26 = com.operations.Matrix.MatrixUtils.generateRandomMatrix(100, (int) (byte) 1, (int) '#', (int) '#', 1L);
        boolean boolean28 = com.operations.Matrix.MatrixUtils.compare(matrix19, matrix26, (double) 1.0f);
        com.operations.Matrix.Matrix matrix30 = com.operations.Matrix.MatrixOperations.scalarMultiply(matrix19, (double) 1L);
        boolean boolean32 = com.operations.Matrix.MatrixUtils.compare(matrix16, matrix30, 0.0d);
        int int33 = matrix30.getCols();
        com.operations.Matrix.Matrix matrix34 = com.operations.Matrix.MatrixOperations.transpose(matrix30);
        double double35 = com.operations.Matrix.MatrixUtils.frobeniusNorm(matrix34);
        com.operations.Matrix.Matrix matrix36 = com.operations.Matrix.MatrixOperations.add(matrix1, matrix34);
        com.operations.Matrix.Matrix matrix38 = com.operations.Matrix.MatrixOperations.scalarMultiply(matrix34, (double) 32);
        org.junit.Assert.assertNotNull(matrix1);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertArrayEquals(doubleArray4, new double[] { 137.90576492663388d, (-1.0d) }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertArrayEquals(doubleArray5, new double[] { (-24.931892522286255d), (-135.63701830716116d) }, 1.0E-15);
        org.junit.Assert.assertNotNull(matrix8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 2 + "'", int9 == 2);
        org.junit.Assert.assertNotNull(matrix12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 2 + "'", int13 == 2);
        org.junit.Assert.assertNotNull(matrix15);
        org.junit.Assert.assertNotNull(matrix16);
        org.junit.Assert.assertNotNull(matrix19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 2 + "'", int20 == 2);
        org.junit.Assert.assertNotNull(matrix26);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(matrix30);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 2 + "'", int33 == 2);
        org.junit.Assert.assertNotNull(matrix34);
        org.junit.Assert.assertTrue("'" + double35 + "' != '" + 10.0d + "'", double35 == 10.0d);
        org.junit.Assert.assertNotNull(matrix36);
        org.junit.Assert.assertNotNull(matrix38);
    }

    @Test
    public void test3384() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3384");
        // The following exception was thrown during execution in test generation
        try {
            com.operations.Matrix.Matrix matrix5 = com.operations.Matrix.MatrixUtils.generateRandomMatrix((int) '#', (int) (short) -1, 97, 0, (long) 2);
            org.junit.Assert.fail("Expected exception of type java.lang.NegativeArraySizeException; message: -1");
        } catch (java.lang.NegativeArraySizeException e) {
            // Expected exception.
        }
    }

    @Test
    public void test3385() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3385");
        com.operations.Matrix.Matrix matrix5 = com.operations.Matrix.MatrixUtils.generateRandomMatrix(52, 0, 0, (int) (short) -1, (long) (short) 10);
        com.operations.Matrix.Matrix matrix10 = com.operations.Matrix.MatrixUtils.generateRandomMatrix((int) (short) 10, (int) (byte) 100, 10, 0);
        // The following exception was thrown during execution in test generation
        try {
            com.operations.Matrix.Matrix matrix11 = com.operations.Matrix.MatrixOperations.add(matrix5, matrix10);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Matrices must have the same dimensions for addition.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(matrix5);
        org.junit.Assert.assertNotNull(matrix10);
    }

    @Test
    public void test3386() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3386");
        com.operations.Matrix.Matrix matrix2 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0L, (double) (byte) 10);
        double[] doubleArray5 = new double[] { 10, 'a' };
        double[] doubleArray8 = new double[] { 10, 'a' };
        double[][] doubleArray9 = new double[][] { doubleArray5, doubleArray8 };
        com.operations.Matrix.Matrix matrix10 = new com.operations.Matrix.Matrix(doubleArray9);
        int int11 = matrix10.getCols();
        int int12 = matrix10.getCols();
        int int13 = matrix10.getCols();
        com.operations.Matrix.Matrix[] matrixArray14 = com.operations.Matrix.MatrixDecompositions.luDecomposition(matrix10);
        com.operations.Matrix.Matrix matrix15 = com.operations.Matrix.MatrixOperations.multiply(matrix2, matrix10);
        com.operations.Matrix.Matrix matrix17 = com.operations.Matrix.MatrixTransformations.rotate2D((double) (short) 100);
        boolean boolean19 = com.operations.Matrix.MatrixUtils.compare(matrix10, matrix17, (double) (byte) 0);
        double[] doubleArray22 = new double[] { 10, 'a' };
        double[] doubleArray25 = new double[] { 10, 'a' };
        double[][] doubleArray26 = new double[][] { doubleArray22, doubleArray25 };
        com.operations.Matrix.Matrix matrix27 = new com.operations.Matrix.Matrix(doubleArray26);
        com.operations.Matrix.Matrix matrix28 = com.operations.Matrix.MatrixOperations.multiply(matrix10, matrix27);
        int int29 = matrix28.getRows();
        org.junit.Assert.assertNotNull(matrix2);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertArrayEquals(doubleArray5, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertArrayEquals(doubleArray8, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 2 + "'", int11 == 2);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 2 + "'", int12 == 2);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 2 + "'", int13 == 2);
        org.junit.Assert.assertNotNull(matrixArray14);
        org.junit.Assert.assertNotNull(matrix15);
        org.junit.Assert.assertNotNull(matrix17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertArrayEquals(doubleArray22, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertArrayEquals(doubleArray25, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertNotNull(matrix28);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 2 + "'", int29 == 2);
    }

    @Test
    public void test3387() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3387");
        com.operations.Matrix.Matrix matrix2 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0L, (double) (byte) 10);
        int int3 = matrix2.getRows();
        com.operations.Matrix.Matrix matrix5 = com.operations.Matrix.MatrixOperations.scalarMultiply(matrix2, (double) 2);
        double double6 = com.operations.Matrix.MatrixUtils.frobeniusNorm(matrix2);
        com.operations.Matrix.Matrix matrix9 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0L, (double) (byte) 10);
        int int10 = matrix9.getRows();
        com.operations.Matrix.Matrix matrix12 = com.operations.Matrix.MatrixOperations.scalarMultiply(matrix9, (double) 2);
        com.operations.Matrix.Matrix matrix13 = com.operations.Matrix.MatrixOperations.subtract(matrix2, matrix12);
        com.operations.Matrix.Matrix matrix15 = com.operations.Matrix.MatrixTransformations.rotate2D((double) (short) 100);
        double[] doubleArray18 = new double[] { 137.90576492663388d, (byte) -1 };
        double[] doubleArray19 = com.operations.Matrix.MatrixSolver.solveGaussian(matrix15, doubleArray18);
        com.operations.Matrix.Matrix matrix22 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0L, (double) (byte) 10);
        double[] doubleArray25 = new double[] { 10, 'a' };
        double[] doubleArray28 = new double[] { 10, 'a' };
        double[][] doubleArray29 = new double[][] { doubleArray25, doubleArray28 };
        com.operations.Matrix.Matrix matrix30 = new com.operations.Matrix.Matrix(doubleArray29);
        int int31 = matrix30.getCols();
        int int32 = matrix30.getCols();
        int int33 = matrix30.getCols();
        com.operations.Matrix.Matrix[] matrixArray34 = com.operations.Matrix.MatrixDecompositions.luDecomposition(matrix30);
        com.operations.Matrix.Matrix matrix35 = com.operations.Matrix.MatrixOperations.multiply(matrix22, matrix30);
        boolean boolean37 = com.operations.Matrix.MatrixUtils.compare(matrix15, matrix22, (double) (-1L));
        double[][] doubleArray38 = matrix15.getData();
        com.operations.Matrix.Matrix matrix41 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0L, (double) 10L);
        boolean boolean43 = com.operations.Matrix.MatrixUtils.compare(matrix15, matrix41, 146.4308710620817d);
        com.operations.Matrix.Matrix matrix44 = com.operations.Matrix.MatrixOperations.subtract(matrix13, matrix41);
        com.operations.Matrix.Matrix matrix47 = com.operations.Matrix.MatrixTransformations.project2D((double) 0L, (double) 0);
        com.operations.Matrix.Matrix[] matrixArray48 = com.operations.Matrix.MatrixDecompositions.luDecomposition(matrix47);
        com.operations.Matrix.Matrix matrix49 = com.operations.Matrix.MatrixOperations.transpose(matrix47);
        com.operations.Matrix.Matrix matrix50 = com.operations.Matrix.MatrixOperations.multiply(matrix41, matrix49);
        boolean boolean51 = com.operations.Matrix.MatrixUtils.isSymmetric(matrix49);
        org.junit.Assert.assertNotNull(matrix2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 2 + "'", int3 == 2);
        org.junit.Assert.assertNotNull(matrix5);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 10.0d + "'", double6 == 10.0d);
        org.junit.Assert.assertNotNull(matrix9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 2 + "'", int10 == 2);
        org.junit.Assert.assertNotNull(matrix12);
        org.junit.Assert.assertNotNull(matrix13);
        org.junit.Assert.assertNotNull(matrix15);
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertArrayEquals(doubleArray18, new double[] { 137.90576492663388d, (-1.0d) }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertArrayEquals(doubleArray19, new double[] { (-24.931892522286255d), (-135.63701830716116d) }, 1.0E-15);
        org.junit.Assert.assertNotNull(matrix22);
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertArrayEquals(doubleArray25, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertArrayEquals(doubleArray28, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 2 + "'", int31 == 2);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 2 + "'", int32 == 2);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 2 + "'", int33 == 2);
        org.junit.Assert.assertNotNull(matrixArray34);
        org.junit.Assert.assertNotNull(matrix35);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertNotNull(matrix41);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertNotNull(matrix44);
        org.junit.Assert.assertNotNull(matrix47);
        org.junit.Assert.assertNotNull(matrixArray48);
        org.junit.Assert.assertNotNull(matrix49);
        org.junit.Assert.assertNotNull(matrix50);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + true + "'", boolean51 == true);
    }

    @Test
    public void test3388() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3388");
        com.operations.Matrix.Matrix matrix1 = com.operations.Matrix.MatrixTransformations.rotate2D(975.1410154434076d);
        boolean boolean2 = com.operations.Matrix.MatrixUtils.isSymmetric(matrix1);
        int int3 = matrix1.getCols();
        boolean boolean4 = com.operations.Matrix.MatrixUtils.isSquare(matrix1);
        com.operations.Matrix.Matrix matrix7 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0L, (double) (byte) 10);
        double[] doubleArray10 = new double[] { 10, 'a' };
        double[] doubleArray13 = new double[] { 10, 'a' };
        double[][] doubleArray14 = new double[][] { doubleArray10, doubleArray13 };
        com.operations.Matrix.Matrix matrix15 = new com.operations.Matrix.Matrix(doubleArray14);
        int int16 = matrix15.getCols();
        int int17 = matrix15.getCols();
        int int18 = matrix15.getCols();
        com.operations.Matrix.Matrix[] matrixArray19 = com.operations.Matrix.MatrixDecompositions.luDecomposition(matrix15);
        com.operations.Matrix.Matrix matrix20 = com.operations.Matrix.MatrixOperations.multiply(matrix7, matrix15);
        com.operations.Matrix.Matrix matrix22 = com.operations.Matrix.MatrixTransformations.rotate2D((double) (short) 100);
        boolean boolean24 = com.operations.Matrix.MatrixUtils.compare(matrix15, matrix22, (double) (byte) 0);
        double[] doubleArray27 = new double[] { 10, 'a' };
        double[] doubleArray30 = new double[] { 10, 'a' };
        double[][] doubleArray31 = new double[][] { doubleArray27, doubleArray30 };
        com.operations.Matrix.Matrix matrix32 = new com.operations.Matrix.Matrix(doubleArray31);
        com.operations.Matrix.Matrix matrix33 = com.operations.Matrix.MatrixOperations.multiply(matrix15, matrix32);
        com.operations.Matrix.Matrix matrix35 = com.operations.Matrix.MatrixOperations.scalarMultiply(matrix15, 364.0054944640259d);
        com.operations.Matrix.Matrix matrix38 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0L, (double) (byte) 10);
        int int39 = matrix38.getRows();
        com.operations.Matrix.Matrix matrix41 = com.operations.Matrix.MatrixOperations.scalarMultiply(matrix38, (double) 2);
        matrix38.print();
        matrix38.print();
        com.operations.Matrix.Matrix matrix44 = com.operations.Matrix.MatrixOperations.multiply(matrix15, matrix38);
        com.operations.Matrix.Matrix matrix45 = com.operations.Matrix.MatrixOperations.multiply(matrix1, matrix38);
        org.junit.Assert.assertNotNull(matrix1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 2 + "'", int3 == 2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(matrix7);
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertArrayEquals(doubleArray10, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertArrayEquals(doubleArray13, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 2 + "'", int16 == 2);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 2 + "'", int17 == 2);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 2 + "'", int18 == 2);
        org.junit.Assert.assertNotNull(matrixArray19);
        org.junit.Assert.assertNotNull(matrix20);
        org.junit.Assert.assertNotNull(matrix22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertArrayEquals(doubleArray27, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertArrayEquals(doubleArray30, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertNotNull(matrix33);
        org.junit.Assert.assertNotNull(matrix35);
        org.junit.Assert.assertNotNull(matrix38);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 2 + "'", int39 == 2);
        org.junit.Assert.assertNotNull(matrix41);
        org.junit.Assert.assertNotNull(matrix44);
        org.junit.Assert.assertNotNull(matrix45);
    }

    @Test
    public void test3389() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3389");
        com.operations.Matrix.Matrix matrix4 = com.operations.Matrix.MatrixUtils.generateRandomMatrix(100, (int) (short) 100, 0, (int) (short) 10);
        org.junit.Assert.assertNotNull(matrix4);
    }

    @Test
    public void test3390() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3390");
        com.operations.Matrix.Matrix matrix2 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0L, (double) (byte) 10);
        double[] doubleArray5 = new double[] { 10, 'a' };
        double[] doubleArray8 = new double[] { 10, 'a' };
        double[][] doubleArray9 = new double[][] { doubleArray5, doubleArray8 };
        com.operations.Matrix.Matrix matrix10 = new com.operations.Matrix.Matrix(doubleArray9);
        int int11 = matrix10.getCols();
        int int12 = matrix10.getCols();
        int int13 = matrix10.getCols();
        com.operations.Matrix.Matrix[] matrixArray14 = com.operations.Matrix.MatrixDecompositions.luDecomposition(matrix10);
        com.operations.Matrix.Matrix matrix15 = com.operations.Matrix.MatrixOperations.multiply(matrix2, matrix10);
        com.operations.Matrix.Matrix matrix17 = com.operations.Matrix.MatrixTransformations.rotate2D((double) (short) 100);
        boolean boolean19 = com.operations.Matrix.MatrixUtils.compare(matrix10, matrix17, (double) (byte) 0);
        com.operations.Matrix.Matrix matrix20 = com.operations.Matrix.MatrixOperations.transpose(matrix10);
        com.operations.Matrix.Matrix matrix22 = com.operations.Matrix.MatrixOperations.scalarMultiply(matrix20, (double) 10);
        // The following exception was thrown during execution in test generation
        try {
            double double25 = matrix22.getValue(2, (int) '#');
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(matrix2);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertArrayEquals(doubleArray5, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertArrayEquals(doubleArray8, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 2 + "'", int11 == 2);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 2 + "'", int12 == 2);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 2 + "'", int13 == 2);
        org.junit.Assert.assertNotNull(matrixArray14);
        org.junit.Assert.assertNotNull(matrix15);
        org.junit.Assert.assertNotNull(matrix17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(matrix20);
        org.junit.Assert.assertNotNull(matrix22);
    }

    @Test
    public void test3391() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3391");
        // The following exception was thrown during execution in test generation
        try {
            com.operations.Matrix.Matrix matrix5 = com.operations.Matrix.MatrixUtils.generateRandomMatrix((int) (byte) 0, 1, 52, (int) (short) 1, (long) 'a');
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
    }

    @Test
    public void test3392() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3392");
        com.operations.Matrix.Matrix matrix5 = com.operations.Matrix.MatrixUtils.generateRandomMatrix(32, 97, (int) ' ', (int) (byte) 100, (long) (short) 1);
        double double8 = matrix5.getValue(2, 10);
        org.junit.Assert.assertNotNull(matrix5);
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 90.28463890218569d + "'", double8 == 90.28463890218569d);
    }

    @Test
    public void test3393() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3393");
        com.operations.Matrix.Matrix matrix2 = com.operations.Matrix.MatrixTransformations.project2D((double) (-1L), (-1.0d));
        com.operations.Matrix.Matrix matrix5 = com.operations.Matrix.MatrixTransformations.scale2D((double) 1.0f, (double) 1);
        com.operations.Matrix.Matrix matrix7 = com.operations.Matrix.MatrixTransformations.rotate2D((double) 1.0f);
        com.operations.Matrix.Matrix matrix10 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0L, (double) (byte) 10);
        int int11 = matrix10.getRows();
        com.operations.Matrix.Matrix matrix13 = com.operations.Matrix.MatrixOperations.scalarMultiply(matrix10, (double) 2);
        double double14 = com.operations.Matrix.MatrixUtils.frobeniusNorm(matrix10);
        com.operations.Matrix.Matrix matrix17 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0L, (double) (byte) 10);
        int int18 = matrix17.getRows();
        com.operations.Matrix.Matrix matrix20 = com.operations.Matrix.MatrixOperations.scalarMultiply(matrix17, (double) 2);
        com.operations.Matrix.Matrix matrix21 = com.operations.Matrix.MatrixOperations.subtract(matrix10, matrix20);
        com.operations.Matrix.Matrix matrix22 = com.operations.Matrix.MatrixOperations.add(matrix7, matrix20);
        boolean boolean24 = com.operations.Matrix.MatrixUtils.compare(matrix5, matrix7, (double) (byte) -1);
        com.operations.Matrix.Matrix matrix25 = com.operations.Matrix.MatrixOperations.transpose(matrix7);
        com.operations.Matrix.Matrix matrix28 = com.operations.Matrix.MatrixTransformations.project2D((double) 10L, 10.0d);
        com.operations.Matrix.Matrix matrix30 = com.operations.Matrix.MatrixTransformations.rotate2D((double) (short) 100);
        double[] doubleArray33 = new double[] { 137.90576492663388d, (byte) -1 };
        double[] doubleArray34 = com.operations.Matrix.MatrixSolver.solveGaussian(matrix30, doubleArray33);
        com.operations.Matrix.Matrix matrix37 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0L, (double) (byte) 10);
        double[] doubleArray40 = new double[] { 10, 'a' };
        double[] doubleArray43 = new double[] { 10, 'a' };
        double[][] doubleArray44 = new double[][] { doubleArray40, doubleArray43 };
        com.operations.Matrix.Matrix matrix45 = new com.operations.Matrix.Matrix(doubleArray44);
        int int46 = matrix45.getCols();
        int int47 = matrix45.getCols();
        int int48 = matrix45.getCols();
        com.operations.Matrix.Matrix[] matrixArray49 = com.operations.Matrix.MatrixDecompositions.luDecomposition(matrix45);
        com.operations.Matrix.Matrix matrix50 = com.operations.Matrix.MatrixOperations.multiply(matrix37, matrix45);
        boolean boolean52 = com.operations.Matrix.MatrixUtils.compare(matrix30, matrix37, (double) (-1L));
        double[][] doubleArray53 = matrix30.getData();
        com.operations.Matrix.Matrix matrix55 = com.operations.Matrix.MatrixTransformations.rotate2D((double) (short) 100);
        double[] doubleArray58 = new double[] { 137.90576492663388d, (byte) -1 };
        double[] doubleArray59 = com.operations.Matrix.MatrixSolver.solveGaussian(matrix55, doubleArray58);
        double[] doubleArray60 = com.operations.Matrix.MatrixSolver.solveGaussian(matrix30, doubleArray58);
        double[] doubleArray61 = com.operations.Matrix.MatrixSolver.solveGaussian(matrix28, doubleArray60);
        double[] doubleArray62 = com.operations.Matrix.MatrixSolver.solveGaussian(matrix7, doubleArray61);
        double[] doubleArray63 = com.operations.Matrix.MatrixSolver.solveGaussian(matrix2, doubleArray61);
        boolean boolean64 = com.operations.Matrix.MatrixUtils.isSquare(matrix2);
        com.operations.Matrix.Matrix matrix65 = com.operations.Matrix.MatrixOperations.transpose(matrix2);
        double double66 = com.operations.Matrix.MatrixUtils.frobeniusNorm(matrix65);
        org.junit.Assert.assertNotNull(matrix2);
        org.junit.Assert.assertNotNull(matrix5);
        org.junit.Assert.assertNotNull(matrix7);
        org.junit.Assert.assertNotNull(matrix10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 2 + "'", int11 == 2);
        org.junit.Assert.assertNotNull(matrix13);
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 10.0d + "'", double14 == 10.0d);
        org.junit.Assert.assertNotNull(matrix17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 2 + "'", int18 == 2);
        org.junit.Assert.assertNotNull(matrix20);
        org.junit.Assert.assertNotNull(matrix21);
        org.junit.Assert.assertNotNull(matrix22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(matrix25);
        org.junit.Assert.assertNotNull(matrix28);
        org.junit.Assert.assertNotNull(matrix30);
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertArrayEquals(doubleArray33, new double[] { 137.90576492663388d, (-1.0d) }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertArrayEquals(doubleArray34, new double[] { (-24.931892522286255d), (-135.63701830716116d) }, 1.0E-15);
        org.junit.Assert.assertNotNull(matrix37);
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertArrayEquals(doubleArray40, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertArrayEquals(doubleArray43, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 2 + "'", int46 == 2);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 2 + "'", int47 == 2);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 2 + "'", int48 == 2);
        org.junit.Assert.assertNotNull(matrixArray49);
        org.junit.Assert.assertNotNull(matrix50);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertNotNull(matrix55);
        org.junit.Assert.assertNotNull(doubleArray58);
        org.junit.Assert.assertArrayEquals(doubleArray58, new double[] { 137.90576492663388d, (-1.0d) }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray59);
        org.junit.Assert.assertArrayEquals(doubleArray59, new double[] { (-24.931892522286255d), (-135.63701830716116d) }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray60);
        org.junit.Assert.assertArrayEquals(doubleArray60, new double[] { (-24.931892522286255d), (-135.63701830716116d) }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray61);
        org.junit.Assert.assertArrayEquals(doubleArray61, new double[] { (-2.4931892522286256d), (-13.563701830716116d) }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray62);
        org.junit.Assert.assertArrayEquals(doubleArray62, new double[] { (-2.7295287645732618d), (-13.518123861075072d) }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray63);
        org.junit.Assert.assertArrayEquals(doubleArray63, new double[] { 2.4931892522286256d, 13.563701830716116d }, 1.0E-15);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + true + "'", boolean64 == true);
        org.junit.Assert.assertNotNull(matrix65);
        org.junit.Assert.assertTrue("'" + double66 + "' != '" + 1.4142135623730951d + "'", double66 == 1.4142135623730951d);
    }

    @Test
    public void test3394() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3394");
        com.operations.Matrix.Matrix matrix2 = com.operations.Matrix.MatrixTransformations.scale2D((double) 1.0f, 20.0d);
        double[][] doubleArray3 = matrix2.getData();
        org.junit.Assert.assertNotNull(matrix2);
        org.junit.Assert.assertNotNull(doubleArray3);
    }

    @Test
    public void test3395() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3395");
        com.operations.Matrix.Matrix matrix4 = com.operations.Matrix.MatrixUtils.generateRandomMatrix((int) '#', (int) (byte) 0, 10, (int) (short) -1);
        com.operations.Matrix.Matrix matrix6 = com.operations.Matrix.MatrixOperations.scalarMultiply(matrix4, (double) 100L);
        com.operations.Matrix.Matrix matrix8 = com.operations.Matrix.MatrixOperations.scalarMultiply(matrix4, (double) 100.0f);
        double[][] doubleArray9 = matrix4.getData();
        com.operations.Matrix.Matrix matrix11 = com.operations.Matrix.MatrixOperations.scalarMultiply(matrix4, 18.14229652832025d);
        // The following exception was thrown during execution in test generation
        try {
            com.operations.Matrix.Matrix[] matrixArray12 = com.operations.Matrix.MatrixDecompositions.luDecomposition(matrix11);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Matrix must be square for LU decomposition.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(matrix4);
        org.junit.Assert.assertNotNull(matrix6);
        org.junit.Assert.assertNotNull(matrix8);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertNotNull(matrix11);
    }

    @Test
    public void test3396() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3396");
        com.operations.Matrix.Matrix matrix5 = com.operations.Matrix.MatrixUtils.generateRandomMatrix(32, 0, (int) (short) 100, (int) (short) -1, (long) 32);
        double[] doubleArray8 = new double[] { 10, 'a' };
        double[] doubleArray11 = new double[] { 10, 'a' };
        double[][] doubleArray12 = new double[][] { doubleArray8, doubleArray11 };
        com.operations.Matrix.Matrix matrix13 = new com.operations.Matrix.Matrix(doubleArray12);
        int int14 = matrix13.getCols();
        int int15 = matrix13.getCols();
        matrix13.print();
        double[] doubleArray19 = new double[] { 10, 'a' };
        double[] doubleArray22 = new double[] { 10, 'a' };
        double[][] doubleArray23 = new double[][] { doubleArray19, doubleArray22 };
        com.operations.Matrix.Matrix matrix24 = new com.operations.Matrix.Matrix(doubleArray23);
        boolean boolean26 = com.operations.Matrix.MatrixUtils.compare(matrix13, matrix24, (double) (-1));
        int int27 = matrix24.getCols();
        com.operations.Matrix.Matrix[] matrixArray28 = com.operations.Matrix.MatrixDecompositions.luDecomposition(matrix24);
        com.operations.Matrix.Matrix[] matrixArray29 = com.operations.Matrix.MatrixDecompositions.luDecomposition(matrix24);
        boolean boolean30 = com.operations.Matrix.MatrixUtils.isSymmetric(matrix24);
        boolean boolean32 = com.operations.Matrix.MatrixUtils.compare(matrix5, matrix24, 340.0d);
        com.operations.Matrix.Matrix matrix34 = com.operations.Matrix.MatrixTransformations.rotate2D((double) (short) 100);
        double[] doubleArray37 = new double[] { 137.90576492663388d, (byte) -1 };
        double[] doubleArray38 = com.operations.Matrix.MatrixSolver.solveGaussian(matrix34, doubleArray37);
        com.operations.Matrix.Matrix matrix41 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0L, (double) (byte) 10);
        double[] doubleArray44 = new double[] { 10, 'a' };
        double[] doubleArray47 = new double[] { 10, 'a' };
        double[][] doubleArray48 = new double[][] { doubleArray44, doubleArray47 };
        com.operations.Matrix.Matrix matrix49 = new com.operations.Matrix.Matrix(doubleArray48);
        int int50 = matrix49.getCols();
        int int51 = matrix49.getCols();
        int int52 = matrix49.getCols();
        com.operations.Matrix.Matrix[] matrixArray53 = com.operations.Matrix.MatrixDecompositions.luDecomposition(matrix49);
        com.operations.Matrix.Matrix matrix54 = com.operations.Matrix.MatrixOperations.multiply(matrix41, matrix49);
        boolean boolean56 = com.operations.Matrix.MatrixUtils.compare(matrix34, matrix41, (double) (-1L));
        double[][] doubleArray57 = matrix34.getData();
        com.operations.Matrix.Matrix matrix59 = com.operations.Matrix.MatrixTransformations.rotate2D((double) (short) 100);
        double[] doubleArray62 = new double[] { 137.90576492663388d, (byte) -1 };
        double[] doubleArray63 = com.operations.Matrix.MatrixSolver.solveGaussian(matrix59, doubleArray62);
        double[] doubleArray64 = com.operations.Matrix.MatrixSolver.solveGaussian(matrix34, doubleArray62);
        // The following exception was thrown during execution in test generation
        try {
            double[] doubleArray65 = com.operations.Matrix.MatrixSolver.solveGaussian(matrix5, doubleArray64);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Matrix must be square to solve equations.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(matrix5);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertArrayEquals(doubleArray8, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertArrayEquals(doubleArray11, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 2 + "'", int14 == 2);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 2 + "'", int15 == 2);
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertArrayEquals(doubleArray19, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertArrayEquals(doubleArray22, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 2 + "'", int27 == 2);
        org.junit.Assert.assertNotNull(matrixArray28);
        org.junit.Assert.assertNotNull(matrixArray29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(matrix34);
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertArrayEquals(doubleArray37, new double[] { 137.90576492663388d, (-1.0d) }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertArrayEquals(doubleArray38, new double[] { (-24.931892522286255d), (-135.63701830716116d) }, 1.0E-15);
        org.junit.Assert.assertNotNull(matrix41);
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertArrayEquals(doubleArray44, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertArrayEquals(doubleArray47, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 2 + "'", int50 == 2);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 2 + "'", int51 == 2);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 2 + "'", int52 == 2);
        org.junit.Assert.assertNotNull(matrixArray53);
        org.junit.Assert.assertNotNull(matrix54);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(doubleArray57);
        org.junit.Assert.assertNotNull(matrix59);
        org.junit.Assert.assertNotNull(doubleArray62);
        org.junit.Assert.assertArrayEquals(doubleArray62, new double[] { 137.90576492663388d, (-1.0d) }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray63);
        org.junit.Assert.assertArrayEquals(doubleArray63, new double[] { (-24.931892522286255d), (-135.63701830716116d) }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray64);
        org.junit.Assert.assertArrayEquals(doubleArray64, new double[] { (-24.931892522286255d), (-135.63701830716116d) }, 1.0E-15);
    }

    @Test
    public void test3397() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3397");
        com.operations.Matrix.Matrix matrix2 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0L, (double) (byte) 10);
        double[] doubleArray5 = new double[] { 10, 'a' };
        double[] doubleArray8 = new double[] { 10, 'a' };
        double[][] doubleArray9 = new double[][] { doubleArray5, doubleArray8 };
        com.operations.Matrix.Matrix matrix10 = new com.operations.Matrix.Matrix(doubleArray9);
        int int11 = matrix10.getCols();
        int int12 = matrix10.getCols();
        int int13 = matrix10.getCols();
        com.operations.Matrix.Matrix[] matrixArray14 = com.operations.Matrix.MatrixDecompositions.luDecomposition(matrix10);
        com.operations.Matrix.Matrix matrix15 = com.operations.Matrix.MatrixOperations.multiply(matrix2, matrix10);
        com.operations.Matrix.Matrix matrix17 = com.operations.Matrix.MatrixTransformations.rotate2D((double) (short) 100);
        boolean boolean19 = com.operations.Matrix.MatrixUtils.compare(matrix10, matrix17, (double) (byte) 0);
        com.operations.Matrix.Matrix matrix20 = com.operations.Matrix.MatrixOperations.transpose(matrix10);
        com.operations.Matrix.Matrix matrix23 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0L, (double) (byte) 10);
        double[] doubleArray26 = new double[] { 10, 'a' };
        double[] doubleArray29 = new double[] { 10, 'a' };
        double[][] doubleArray30 = new double[][] { doubleArray26, doubleArray29 };
        com.operations.Matrix.Matrix matrix31 = new com.operations.Matrix.Matrix(doubleArray30);
        int int32 = matrix31.getCols();
        int int33 = matrix31.getCols();
        int int34 = matrix31.getCols();
        com.operations.Matrix.Matrix[] matrixArray35 = com.operations.Matrix.MatrixDecompositions.luDecomposition(matrix31);
        com.operations.Matrix.Matrix matrix36 = com.operations.Matrix.MatrixOperations.multiply(matrix23, matrix31);
        com.operations.Matrix.Matrix matrix38 = com.operations.Matrix.MatrixTransformations.rotate2D((double) (short) 100);
        boolean boolean40 = com.operations.Matrix.MatrixUtils.compare(matrix31, matrix38, (double) (byte) 0);
        double[] doubleArray43 = new double[] { 10, 'a' };
        double[] doubleArray46 = new double[] { 10, 'a' };
        double[][] doubleArray47 = new double[][] { doubleArray43, doubleArray46 };
        com.operations.Matrix.Matrix matrix48 = new com.operations.Matrix.Matrix(doubleArray47);
        com.operations.Matrix.Matrix matrix49 = new com.operations.Matrix.Matrix(doubleArray47);
        com.operations.Matrix.Matrix matrix50 = new com.operations.Matrix.Matrix(doubleArray47);
        boolean boolean52 = com.operations.Matrix.MatrixUtils.compare(matrix31, matrix50, (double) (-1));
        com.operations.Matrix.Matrix matrix55 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0L, (double) (byte) 10);
        double[] doubleArray58 = new double[] { 10, 'a' };
        double[] doubleArray61 = new double[] { 10, 'a' };
        double[][] doubleArray62 = new double[][] { doubleArray58, doubleArray61 };
        com.operations.Matrix.Matrix matrix63 = new com.operations.Matrix.Matrix(doubleArray62);
        int int64 = matrix63.getCols();
        int int65 = matrix63.getCols();
        int int66 = matrix63.getCols();
        com.operations.Matrix.Matrix[] matrixArray67 = com.operations.Matrix.MatrixDecompositions.luDecomposition(matrix63);
        com.operations.Matrix.Matrix matrix68 = com.operations.Matrix.MatrixOperations.multiply(matrix55, matrix63);
        boolean boolean70 = com.operations.Matrix.MatrixUtils.compare(matrix50, matrix55, (double) 10L);
        boolean boolean72 = com.operations.Matrix.MatrixUtils.compare(matrix20, matrix50, (double) 100L);
        com.operations.Matrix.Matrix matrix75 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0L, (double) (byte) 10);
        double[] doubleArray78 = new double[] { 10, 'a' };
        double[] doubleArray81 = new double[] { 10, 'a' };
        double[][] doubleArray82 = new double[][] { doubleArray78, doubleArray81 };
        com.operations.Matrix.Matrix matrix83 = new com.operations.Matrix.Matrix(doubleArray82);
        int int84 = matrix83.getCols();
        int int85 = matrix83.getCols();
        int int86 = matrix83.getCols();
        com.operations.Matrix.Matrix[] matrixArray87 = com.operations.Matrix.MatrixDecompositions.luDecomposition(matrix83);
        com.operations.Matrix.Matrix matrix88 = com.operations.Matrix.MatrixOperations.multiply(matrix75, matrix83);
        int int89 = matrix83.getRows();
        int int90 = matrix83.getCols();
        com.operations.Matrix.Matrix matrix91 = com.operations.Matrix.MatrixOperations.subtract(matrix50, matrix83);
        com.operations.Matrix.Matrix matrix92 = com.operations.Matrix.MatrixOperations.transpose(matrix83);
        com.operations.Matrix.Matrix[] matrixArray93 = com.operations.Matrix.MatrixDecompositions.luDecomposition(matrix92);
        org.junit.Assert.assertNotNull(matrix2);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertArrayEquals(doubleArray5, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertArrayEquals(doubleArray8, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 2 + "'", int11 == 2);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 2 + "'", int12 == 2);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 2 + "'", int13 == 2);
        org.junit.Assert.assertNotNull(matrixArray14);
        org.junit.Assert.assertNotNull(matrix15);
        org.junit.Assert.assertNotNull(matrix17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(matrix20);
        org.junit.Assert.assertNotNull(matrix23);
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertArrayEquals(doubleArray26, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertArrayEquals(doubleArray29, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 2 + "'", int32 == 2);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 2 + "'", int33 == 2);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 2 + "'", int34 == 2);
        org.junit.Assert.assertNotNull(matrixArray35);
        org.junit.Assert.assertNotNull(matrix36);
        org.junit.Assert.assertNotNull(matrix38);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertArrayEquals(doubleArray43, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray46);
        org.junit.Assert.assertArrayEquals(doubleArray46, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(matrix55);
        org.junit.Assert.assertNotNull(doubleArray58);
        org.junit.Assert.assertArrayEquals(doubleArray58, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray61);
        org.junit.Assert.assertArrayEquals(doubleArray61, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray62);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 2 + "'", int64 == 2);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 2 + "'", int65 == 2);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 2 + "'", int66 == 2);
        org.junit.Assert.assertNotNull(matrixArray67);
        org.junit.Assert.assertNotNull(matrix68);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + true + "'", boolean72 == true);
        org.junit.Assert.assertNotNull(matrix75);
        org.junit.Assert.assertNotNull(doubleArray78);
        org.junit.Assert.assertArrayEquals(doubleArray78, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray81);
        org.junit.Assert.assertArrayEquals(doubleArray81, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray82);
        org.junit.Assert.assertTrue("'" + int84 + "' != '" + 2 + "'", int84 == 2);
        org.junit.Assert.assertTrue("'" + int85 + "' != '" + 2 + "'", int85 == 2);
        org.junit.Assert.assertTrue("'" + int86 + "' != '" + 2 + "'", int86 == 2);
        org.junit.Assert.assertNotNull(matrixArray87);
        org.junit.Assert.assertNotNull(matrix88);
        org.junit.Assert.assertTrue("'" + int89 + "' != '" + 2 + "'", int89 == 2);
        org.junit.Assert.assertTrue("'" + int90 + "' != '" + 2 + "'", int90 == 2);
        org.junit.Assert.assertNotNull(matrix91);
        org.junit.Assert.assertNotNull(matrix92);
        org.junit.Assert.assertNotNull(matrixArray93);
    }

    @Test
    public void test3398() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3398");
        com.operations.Matrix.Matrix matrix2 = com.operations.Matrix.MatrixTransformations.project2D(263.4829471529277d, 130.28797221734817d);
        org.junit.Assert.assertNotNull(matrix2);
    }

    @Test
    public void test3399() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3399");
        double[] doubleArray2 = new double[] { 10, 'a' };
        double[] doubleArray5 = new double[] { 10, 'a' };
        double[][] doubleArray6 = new double[][] { doubleArray2, doubleArray5 };
        com.operations.Matrix.Matrix matrix7 = new com.operations.Matrix.Matrix(doubleArray6);
        int int8 = matrix7.getCols();
        int int9 = matrix7.getCols();
        matrix7.print();
        boolean boolean11 = com.operations.Matrix.MatrixUtils.isSymmetric(matrix7);
        com.operations.Matrix.Matrix matrix14 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0L, (double) (byte) 10);
        double[] doubleArray17 = new double[] { 10, 'a' };
        double[] doubleArray20 = new double[] { 10, 'a' };
        double[][] doubleArray21 = new double[][] { doubleArray17, doubleArray20 };
        com.operations.Matrix.Matrix matrix22 = new com.operations.Matrix.Matrix(doubleArray21);
        int int23 = matrix22.getCols();
        int int24 = matrix22.getCols();
        int int25 = matrix22.getCols();
        com.operations.Matrix.Matrix[] matrixArray26 = com.operations.Matrix.MatrixDecompositions.luDecomposition(matrix22);
        com.operations.Matrix.Matrix matrix27 = com.operations.Matrix.MatrixOperations.multiply(matrix14, matrix22);
        int int28 = matrix22.getRows();
        com.operations.Matrix.Matrix matrix30 = com.operations.Matrix.MatrixOperations.scalarMultiply(matrix22, (double) (-1L));
        com.operations.Matrix.Matrix matrix33 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0L, (double) (byte) 10);
        int int34 = matrix33.getRows();
        com.operations.Matrix.Matrix matrix36 = com.operations.Matrix.MatrixOperations.scalarMultiply(matrix33, (double) 2);
        com.operations.Matrix.Matrix[] matrixArray37 = com.operations.Matrix.MatrixDecompositions.luDecomposition(matrix36);
        com.operations.Matrix.Matrix matrix38 = com.operations.Matrix.MatrixOperations.transpose(matrix36);
        com.operations.Matrix.Matrix matrix39 = com.operations.Matrix.MatrixOperations.add(matrix22, matrix36);
        com.operations.Matrix.Matrix matrix40 = com.operations.Matrix.MatrixOperations.subtract(matrix7, matrix36);
        com.operations.Matrix.Matrix matrix41 = com.operations.Matrix.MatrixOperations.transpose(matrix40);
        double[][] doubleArray42 = matrix40.getData();
        int int43 = matrix40.getCols();
        com.operations.Matrix.Matrix matrix44 = null;
        // The following exception was thrown during execution in test generation
        try {
            com.operations.Matrix.Matrix matrix45 = com.operations.Matrix.MatrixOperations.multiply(matrix40, matrix44);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertArrayEquals(doubleArray2, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertArrayEquals(doubleArray5, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 2 + "'", int8 == 2);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 2 + "'", int9 == 2);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(matrix14);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertArrayEquals(doubleArray17, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertArrayEquals(doubleArray20, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 2 + "'", int23 == 2);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 2 + "'", int24 == 2);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 2 + "'", int25 == 2);
        org.junit.Assert.assertNotNull(matrixArray26);
        org.junit.Assert.assertNotNull(matrix27);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 2 + "'", int28 == 2);
        org.junit.Assert.assertNotNull(matrix30);
        org.junit.Assert.assertNotNull(matrix33);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 2 + "'", int34 == 2);
        org.junit.Assert.assertNotNull(matrix36);
        org.junit.Assert.assertNotNull(matrixArray37);
        org.junit.Assert.assertNotNull(matrix38);
        org.junit.Assert.assertNotNull(matrix39);
        org.junit.Assert.assertNotNull(matrix40);
        org.junit.Assert.assertNotNull(matrix41);
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 2 + "'", int43 == 2);
    }

    @Test
    public void test3400() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3400");
        com.operations.Matrix.Matrix matrix2 = com.operations.Matrix.MatrixTransformations.project2D(1.414213562373095d, 641.7761389614766d);
        com.operations.Matrix.Matrix matrix4 = com.operations.Matrix.MatrixOperations.scalarMultiply(matrix2, 0.0d);
        // The following exception was thrown during execution in test generation
        try {
            double double7 = matrix2.getValue((int) 'a', (int) (short) 0);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(matrix2);
        org.junit.Assert.assertNotNull(matrix4);
    }

    @Test
    public void test3401() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3401");
        // The following exception was thrown during execution in test generation
        try {
            com.operations.Matrix.Matrix matrix4 = com.operations.Matrix.MatrixUtils.generateRandomMatrix(0, (int) (short) 10, 0, 52);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
    }

    @Test
    public void test3402() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3402");
        com.operations.Matrix.Matrix matrix2 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0L, (double) (byte) 10);
        double[] doubleArray5 = new double[] { 10, 'a' };
        double[] doubleArray8 = new double[] { 10, 'a' };
        double[][] doubleArray9 = new double[][] { doubleArray5, doubleArray8 };
        com.operations.Matrix.Matrix matrix10 = new com.operations.Matrix.Matrix(doubleArray9);
        int int11 = matrix10.getCols();
        int int12 = matrix10.getCols();
        int int13 = matrix10.getCols();
        com.operations.Matrix.Matrix[] matrixArray14 = com.operations.Matrix.MatrixDecompositions.luDecomposition(matrix10);
        com.operations.Matrix.Matrix matrix15 = com.operations.Matrix.MatrixOperations.multiply(matrix2, matrix10);
        com.operations.Matrix.Matrix matrix17 = com.operations.Matrix.MatrixTransformations.rotate2D((double) (short) 100);
        boolean boolean19 = com.operations.Matrix.MatrixUtils.compare(matrix10, matrix17, (double) (byte) 0);
        com.operations.Matrix.Matrix matrix20 = com.operations.Matrix.MatrixOperations.transpose(matrix10);
        com.operations.Matrix.Matrix matrix22 = com.operations.Matrix.MatrixOperations.scalarMultiply(matrix20, (double) 10);
        com.operations.Matrix.Matrix matrix23 = com.operations.Matrix.MatrixOperations.transpose(matrix22);
        boolean boolean24 = com.operations.Matrix.MatrixUtils.isSymmetric(matrix23);
        org.junit.Assert.assertNotNull(matrix2);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertArrayEquals(doubleArray5, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertArrayEquals(doubleArray8, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 2 + "'", int11 == 2);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 2 + "'", int12 == 2);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 2 + "'", int13 == 2);
        org.junit.Assert.assertNotNull(matrixArray14);
        org.junit.Assert.assertNotNull(matrix15);
        org.junit.Assert.assertNotNull(matrix17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(matrix20);
        org.junit.Assert.assertNotNull(matrix22);
        org.junit.Assert.assertNotNull(matrix23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
    }

    @Test
    public void test3403() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3403");
        com.operations.Matrix.Matrix matrix2 = new com.operations.Matrix.Matrix((int) (byte) 1, 0);
    }

    @Test
    public void test3404() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3404");
        com.operations.Matrix.Matrix matrix2 = com.operations.Matrix.MatrixTransformations.scale2D((double) (byte) 10, (double) 10);
        double[] doubleArray5 = new double[] { 10, 'a' };
        double[] doubleArray8 = new double[] { 10, 'a' };
        double[][] doubleArray9 = new double[][] { doubleArray5, doubleArray8 };
        com.operations.Matrix.Matrix matrix10 = new com.operations.Matrix.Matrix(doubleArray9);
        com.operations.Matrix.Matrix matrix11 = new com.operations.Matrix.Matrix(doubleArray9);
        boolean boolean12 = com.operations.Matrix.MatrixUtils.isSquare(matrix11);
        double[] doubleArray15 = new double[] { 10, 'a' };
        double[] doubleArray18 = new double[] { 10, 'a' };
        double[][] doubleArray19 = new double[][] { doubleArray15, doubleArray18 };
        com.operations.Matrix.Matrix matrix20 = new com.operations.Matrix.Matrix(doubleArray19);
        int int21 = matrix20.getCols();
        int int22 = matrix20.getCols();
        matrix20.print();
        double[] doubleArray26 = new double[] { 10, 'a' };
        double[] doubleArray29 = new double[] { 10, 'a' };
        double[][] doubleArray30 = new double[][] { doubleArray26, doubleArray29 };
        com.operations.Matrix.Matrix matrix31 = new com.operations.Matrix.Matrix(doubleArray30);
        boolean boolean33 = com.operations.Matrix.MatrixUtils.compare(matrix20, matrix31, (double) (-1));
        com.operations.Matrix.Matrix matrix34 = com.operations.Matrix.MatrixOperations.subtract(matrix11, matrix31);
        com.operations.Matrix.Matrix[] matrixArray35 = com.operations.Matrix.MatrixDecompositions.luDecomposition(matrix34);
        double[][] doubleArray36 = matrix34.getData();
        com.operations.Matrix.Matrix matrix37 = new com.operations.Matrix.Matrix(doubleArray36);
        com.operations.Matrix.Matrix matrix38 = com.operations.Matrix.MatrixOperations.multiply(matrix2, matrix37);
        boolean boolean39 = com.operations.Matrix.MatrixUtils.isSymmetric(matrix2);
        com.operations.Matrix.Matrix matrix41 = com.operations.Matrix.MatrixTransformations.rotate2D(350.0d);
        com.operations.Matrix.Matrix matrix42 = com.operations.Matrix.MatrixDecompositions.choleskyDecomposition(matrix41);
        int int43 = matrix41.getRows();
        com.operations.Matrix.Matrix matrix44 = com.operations.Matrix.MatrixOperations.subtract(matrix2, matrix41);
        double[] doubleArray47 = new double[] { 10, 'a' };
        double[] doubleArray50 = new double[] { 10, 'a' };
        double[][] doubleArray51 = new double[][] { doubleArray47, doubleArray50 };
        com.operations.Matrix.Matrix matrix52 = new com.operations.Matrix.Matrix(doubleArray51);
        int int53 = matrix52.getCols();
        int int54 = matrix52.getCols();
        boolean boolean55 = com.operations.Matrix.MatrixUtils.isSquare(matrix52);
        com.operations.Matrix.Matrix matrix56 = com.operations.Matrix.MatrixDecompositions.choleskyDecomposition(matrix52);
        com.operations.Matrix.Matrix matrix59 = com.operations.Matrix.MatrixTransformations.project2D(0.0d, (double) 0);
        com.operations.Matrix.Matrix matrix60 = com.operations.Matrix.MatrixOperations.subtract(matrix56, matrix59);
        com.operations.Matrix.Matrix matrix61 = com.operations.Matrix.MatrixOperations.transpose(matrix59);
        com.operations.Matrix.Matrix matrix62 = com.operations.Matrix.MatrixOperations.subtract(matrix2, matrix61);
        com.operations.Matrix.Matrix matrix63 = com.operations.Matrix.MatrixOperations.transpose(matrix62);
        com.operations.Matrix.Matrix matrix65 = com.operations.Matrix.MatrixOperations.scalarMultiply(matrix62, (double) (byte) 1);
        double double66 = com.operations.Matrix.MatrixUtils.frobeniusNorm(matrix65);
        org.junit.Assert.assertNotNull(matrix2);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertArrayEquals(doubleArray5, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertArrayEquals(doubleArray8, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertArrayEquals(doubleArray15, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertArrayEquals(doubleArray18, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 2 + "'", int21 == 2);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 2 + "'", int22 == 2);
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertArrayEquals(doubleArray26, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertArrayEquals(doubleArray29, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(matrix34);
        org.junit.Assert.assertNotNull(matrixArray35);
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertNotNull(matrix38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertNotNull(matrix41);
        org.junit.Assert.assertNotNull(matrix42);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 2 + "'", int43 == 2);
        org.junit.Assert.assertNotNull(matrix44);
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertArrayEquals(doubleArray47, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertArrayEquals(doubleArray50, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 2 + "'", int53 == 2);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 2 + "'", int54 == 2);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + true + "'", boolean55 == true);
        org.junit.Assert.assertNotNull(matrix56);
        org.junit.Assert.assertNotNull(matrix59);
        org.junit.Assert.assertNotNull(matrix60);
        org.junit.Assert.assertNotNull(matrix61);
        org.junit.Assert.assertNotNull(matrix62);
        org.junit.Assert.assertNotNull(matrix63);
        org.junit.Assert.assertNotNull(matrix65);
        org.junit.Assert.assertTrue("'" + double66 + "' != '" + 14.142135623730951d + "'", double66 == 14.142135623730951d);
    }

    @Test
    public void test3405() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3405");
        // The following exception was thrown during execution in test generation
        try {
            com.operations.Matrix.Matrix matrix5 = com.operations.Matrix.MatrixUtils.generateRandomMatrix((int) (short) 0, (int) ' ', 100, 97, (long) (byte) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
    }

    @Test
    public void test3406() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3406");
        com.operations.Matrix.Matrix matrix2 = com.operations.Matrix.MatrixTransformations.scale2D((double) (byte) 10, (double) 10);
        double[] doubleArray5 = new double[] { 10, 'a' };
        double[] doubleArray8 = new double[] { 10, 'a' };
        double[][] doubleArray9 = new double[][] { doubleArray5, doubleArray8 };
        com.operations.Matrix.Matrix matrix10 = new com.operations.Matrix.Matrix(doubleArray9);
        com.operations.Matrix.Matrix matrix11 = new com.operations.Matrix.Matrix(doubleArray9);
        boolean boolean12 = com.operations.Matrix.MatrixUtils.isSquare(matrix11);
        double[] doubleArray15 = new double[] { 10, 'a' };
        double[] doubleArray18 = new double[] { 10, 'a' };
        double[][] doubleArray19 = new double[][] { doubleArray15, doubleArray18 };
        com.operations.Matrix.Matrix matrix20 = new com.operations.Matrix.Matrix(doubleArray19);
        int int21 = matrix20.getCols();
        int int22 = matrix20.getCols();
        matrix20.print();
        double[] doubleArray26 = new double[] { 10, 'a' };
        double[] doubleArray29 = new double[] { 10, 'a' };
        double[][] doubleArray30 = new double[][] { doubleArray26, doubleArray29 };
        com.operations.Matrix.Matrix matrix31 = new com.operations.Matrix.Matrix(doubleArray30);
        boolean boolean33 = com.operations.Matrix.MatrixUtils.compare(matrix20, matrix31, (double) (-1));
        com.operations.Matrix.Matrix matrix34 = com.operations.Matrix.MatrixOperations.subtract(matrix11, matrix31);
        com.operations.Matrix.Matrix[] matrixArray35 = com.operations.Matrix.MatrixDecompositions.luDecomposition(matrix34);
        double[][] doubleArray36 = matrix34.getData();
        com.operations.Matrix.Matrix matrix37 = new com.operations.Matrix.Matrix(doubleArray36);
        com.operations.Matrix.Matrix matrix38 = com.operations.Matrix.MatrixOperations.multiply(matrix2, matrix37);
        com.operations.Matrix.Matrix matrix41 = com.operations.Matrix.MatrixTransformations.scale2D(1.414213562373095d, (double) 1);
        com.operations.Matrix.Matrix matrix42 = com.operations.Matrix.MatrixOperations.add(matrix38, matrix41);
        double[][] doubleArray43 = matrix38.getData();
        com.operations.Matrix.Matrix matrix44 = new com.operations.Matrix.Matrix(doubleArray43);
        // The following exception was thrown during execution in test generation
        try {
            matrix44.setValue((int) (byte) 100, 100, 4362.86355112226d);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: Index 100 out of bounds for length 2");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(matrix2);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertArrayEquals(doubleArray5, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertArrayEquals(doubleArray8, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertArrayEquals(doubleArray15, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertArrayEquals(doubleArray18, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 2 + "'", int21 == 2);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 2 + "'", int22 == 2);
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertArrayEquals(doubleArray26, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertArrayEquals(doubleArray29, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(matrix34);
        org.junit.Assert.assertNotNull(matrixArray35);
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertNotNull(matrix38);
        org.junit.Assert.assertNotNull(matrix41);
        org.junit.Assert.assertNotNull(matrix42);
        org.junit.Assert.assertNotNull(doubleArray43);
    }

    @Test
    public void test3407() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3407");
        com.operations.Matrix.Matrix matrix2 = com.operations.Matrix.MatrixTransformations.scale2D((double) 10L, (double) 2);
        com.operations.Matrix.Matrix matrix5 = com.operations.Matrix.MatrixTransformations.project2D((double) (short) 100, (double) 0L);
        boolean boolean6 = com.operations.Matrix.MatrixUtils.isSquare(matrix5);
        double[] doubleArray9 = new double[] { 10, 'a' };
        double[] doubleArray12 = new double[] { 10, 'a' };
        double[][] doubleArray13 = new double[][] { doubleArray9, doubleArray12 };
        com.operations.Matrix.Matrix matrix14 = new com.operations.Matrix.Matrix(doubleArray13);
        com.operations.Matrix.Matrix matrix15 = new com.operations.Matrix.Matrix(doubleArray13);
        com.operations.Matrix.Matrix matrix17 = com.operations.Matrix.MatrixTransformations.rotate2D((double) (short) 100);
        double[] doubleArray20 = new double[] { 137.90576492663388d, (byte) -1 };
        double[] doubleArray21 = com.operations.Matrix.MatrixSolver.solveGaussian(matrix17, doubleArray20);
        com.operations.Matrix.Matrix matrix22 = com.operations.Matrix.MatrixOperations.add(matrix15, matrix17);
        com.operations.Matrix.Matrix matrix23 = com.operations.Matrix.MatrixOperations.transpose(matrix17);
        int int24 = matrix17.getCols();
        int int25 = matrix17.getRows();
        double[] doubleArray28 = new double[] { 10, 'a' };
        double[] doubleArray31 = new double[] { 10, 'a' };
        double[][] doubleArray32 = new double[][] { doubleArray28, doubleArray31 };
        com.operations.Matrix.Matrix matrix33 = new com.operations.Matrix.Matrix(doubleArray32);
        int int34 = matrix33.getCols();
        int int35 = matrix33.getCols();
        matrix33.print();
        double[] doubleArray39 = new double[] { 10, 'a' };
        double[] doubleArray42 = new double[] { 10, 'a' };
        double[][] doubleArray43 = new double[][] { doubleArray39, doubleArray42 };
        com.operations.Matrix.Matrix matrix44 = new com.operations.Matrix.Matrix(doubleArray43);
        boolean boolean46 = com.operations.Matrix.MatrixUtils.compare(matrix33, matrix44, (double) (-1));
        com.operations.Matrix.Matrix matrix47 = com.operations.Matrix.MatrixOperations.multiply(matrix17, matrix33);
        double double50 = matrix17.getValue((int) (short) 0, 0);
        com.operations.Matrix.Matrix matrix51 = com.operations.Matrix.MatrixOperations.add(matrix5, matrix17);
        com.operations.Matrix.Matrix matrix52 = com.operations.Matrix.MatrixOperations.multiply(matrix2, matrix5);
        double double53 = com.operations.Matrix.MatrixUtils.frobeniusNorm(matrix5);
        boolean boolean54 = com.operations.Matrix.MatrixUtils.isSquare(matrix5);
        org.junit.Assert.assertNotNull(matrix2);
        org.junit.Assert.assertNotNull(matrix5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertArrayEquals(doubleArray9, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertArrayEquals(doubleArray12, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertNotNull(matrix17);
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertArrayEquals(doubleArray20, new double[] { 137.90576492663388d, (-1.0d) }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertArrayEquals(doubleArray21, new double[] { (-24.931892522286255d), (-135.63701830716116d) }, 1.0E-15);
        org.junit.Assert.assertNotNull(matrix22);
        org.junit.Assert.assertNotNull(matrix23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 2 + "'", int24 == 2);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 2 + "'", int25 == 2);
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertArrayEquals(doubleArray28, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertArrayEquals(doubleArray31, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 2 + "'", int34 == 2);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 2 + "'", int35 == 2);
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertArrayEquals(doubleArray39, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertArrayEquals(doubleArray42, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(matrix47);
        org.junit.Assert.assertTrue("'" + double50 + "' != '" + (-0.1736481776669303d) + "'", double50 == (-0.1736481776669303d));
        org.junit.Assert.assertNotNull(matrix51);
        org.junit.Assert.assertNotNull(matrix52);
        org.junit.Assert.assertTrue("'" + double53 + "' != '" + 100.0d + "'", double53 == 100.0d);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + true + "'", boolean54 == true);
    }

    @Test
    public void test3408() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3408");
        com.operations.Matrix.Matrix matrix4 = com.operations.Matrix.MatrixUtils.generateRandomMatrix((int) (short) 1, (int) '#', 32, (int) (short) 100);
        org.junit.Assert.assertNotNull(matrix4);
    }

    @Test
    public void test3409() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3409");
        com.operations.Matrix.Matrix matrix5 = com.operations.Matrix.MatrixUtils.generateRandomMatrix(52, 32, (int) (short) 100, (int) (short) 0, 1L);
        com.operations.Matrix.Matrix matrix7 = com.operations.Matrix.MatrixTransformations.rotate2D(1.414213562373095d);
        com.operations.Matrix.Matrix matrix9 = com.operations.Matrix.MatrixTransformations.rotate2D((double) (short) 100);
        double[] doubleArray12 = new double[] { 137.90576492663388d, (byte) -1 };
        double[] doubleArray13 = com.operations.Matrix.MatrixSolver.solveGaussian(matrix9, doubleArray12);
        com.operations.Matrix.Matrix matrix16 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0L, (double) (byte) 10);
        double[] doubleArray19 = new double[] { 10, 'a' };
        double[] doubleArray22 = new double[] { 10, 'a' };
        double[][] doubleArray23 = new double[][] { doubleArray19, doubleArray22 };
        com.operations.Matrix.Matrix matrix24 = new com.operations.Matrix.Matrix(doubleArray23);
        int int25 = matrix24.getCols();
        int int26 = matrix24.getCols();
        int int27 = matrix24.getCols();
        com.operations.Matrix.Matrix[] matrixArray28 = com.operations.Matrix.MatrixDecompositions.luDecomposition(matrix24);
        com.operations.Matrix.Matrix matrix29 = com.operations.Matrix.MatrixOperations.multiply(matrix16, matrix24);
        boolean boolean31 = com.operations.Matrix.MatrixUtils.compare(matrix9, matrix16, (double) (-1L));
        com.operations.Matrix.Matrix matrix33 = com.operations.Matrix.MatrixTransformations.rotate2D((-1.0d));
        com.operations.Matrix.Matrix matrix35 = com.operations.Matrix.MatrixTransformations.rotate2D((double) (-1L));
        com.operations.Matrix.Matrix matrix37 = com.operations.Matrix.MatrixTransformations.rotate2D((double) (short) 100);
        double[] doubleArray40 = new double[] { 137.90576492663388d, (byte) -1 };
        double[] doubleArray41 = com.operations.Matrix.MatrixSolver.solveGaussian(matrix37, doubleArray40);
        double[] doubleArray42 = com.operations.Matrix.MatrixSolver.solveGaussian(matrix35, doubleArray40);
        double[] doubleArray43 = com.operations.Matrix.MatrixSolver.solveGaussian(matrix33, doubleArray40);
        boolean boolean45 = com.operations.Matrix.MatrixUtils.compare(matrix16, matrix33, (double) '4');
        double[] doubleArray48 = new double[] { 10, 'a' };
        double[] doubleArray51 = new double[] { 10, 'a' };
        double[][] doubleArray52 = new double[][] { doubleArray48, doubleArray51 };
        com.operations.Matrix.Matrix matrix53 = new com.operations.Matrix.Matrix(doubleArray52);
        com.operations.Matrix.Matrix matrix54 = new com.operations.Matrix.Matrix(doubleArray52);
        com.operations.Matrix.Matrix matrix56 = com.operations.Matrix.MatrixTransformations.rotate2D((double) (short) 100);
        double[] doubleArray59 = new double[] { 137.90576492663388d, (byte) -1 };
        double[] doubleArray60 = com.operations.Matrix.MatrixSolver.solveGaussian(matrix56, doubleArray59);
        com.operations.Matrix.Matrix matrix61 = com.operations.Matrix.MatrixOperations.add(matrix54, matrix56);
        com.operations.Matrix.Matrix matrix62 = com.operations.Matrix.MatrixOperations.transpose(matrix56);
        int int63 = matrix56.getCols();
        com.operations.Matrix.Matrix matrix66 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0L, (double) (byte) 10);
        double[] doubleArray69 = new double[] { 10, 'a' };
        double[] doubleArray72 = new double[] { 10, 'a' };
        double[][] doubleArray73 = new double[][] { doubleArray69, doubleArray72 };
        com.operations.Matrix.Matrix matrix74 = new com.operations.Matrix.Matrix(doubleArray73);
        int int75 = matrix74.getCols();
        int int76 = matrix74.getCols();
        int int77 = matrix74.getCols();
        com.operations.Matrix.Matrix[] matrixArray78 = com.operations.Matrix.MatrixDecompositions.luDecomposition(matrix74);
        com.operations.Matrix.Matrix matrix79 = com.operations.Matrix.MatrixOperations.multiply(matrix66, matrix74);
        com.operations.Matrix.Matrix matrix81 = com.operations.Matrix.MatrixTransformations.rotate2D((double) (short) 100);
        boolean boolean83 = com.operations.Matrix.MatrixUtils.compare(matrix74, matrix81, (double) (byte) 0);
        boolean boolean84 = com.operations.Matrix.MatrixUtils.isSymmetric(matrix81);
        boolean boolean85 = com.operations.Matrix.MatrixUtils.isSquare(matrix81);
        com.operations.Matrix.Matrix matrix87 = com.operations.Matrix.MatrixTransformations.rotate2D((double) (short) 100);
        boolean boolean89 = com.operations.Matrix.MatrixUtils.compare(matrix81, matrix87, (double) (byte) 100);
        matrix87.print();
        com.operations.Matrix.Matrix matrix91 = com.operations.Matrix.MatrixOperations.add(matrix56, matrix87);
        com.operations.Matrix.Matrix matrix92 = com.operations.Matrix.MatrixOperations.subtract(matrix33, matrix87);
        com.operations.Matrix.Matrix matrix93 = com.operations.Matrix.MatrixOperations.subtract(matrix7, matrix92);
        double double94 = com.operations.Matrix.MatrixUtils.frobeniusNorm(matrix93);
        // The following exception was thrown during execution in test generation
        try {
            com.operations.Matrix.Matrix matrix95 = com.operations.Matrix.MatrixOperations.add(matrix5, matrix93);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Matrices must have the same dimensions for addition.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(matrix5);
        org.junit.Assert.assertNotNull(matrix7);
        org.junit.Assert.assertNotNull(matrix9);
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertArrayEquals(doubleArray12, new double[] { 137.90576492663388d, (-1.0d) }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertArrayEquals(doubleArray13, new double[] { (-24.931892522286255d), (-135.63701830716116d) }, 1.0E-15);
        org.junit.Assert.assertNotNull(matrix16);
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertArrayEquals(doubleArray19, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertArrayEquals(doubleArray22, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 2 + "'", int25 == 2);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 2 + "'", int26 == 2);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 2 + "'", int27 == 2);
        org.junit.Assert.assertNotNull(matrixArray28);
        org.junit.Assert.assertNotNull(matrix29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(matrix33);
        org.junit.Assert.assertNotNull(matrix35);
        org.junit.Assert.assertNotNull(matrix37);
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertArrayEquals(doubleArray40, new double[] { 137.90576492663388d, (-1.0d) }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertArrayEquals(doubleArray41, new double[] { (-24.931892522286255d), (-135.63701830716116d) }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertArrayEquals(doubleArray42, new double[] { 137.90221361711127d, 1.4069397643877004d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertArrayEquals(doubleArray43, new double[] { 137.90221361711127d, 1.4069397643877004d }, 1.0E-15);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertArrayEquals(doubleArray48, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertArrayEquals(doubleArray51, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertNotNull(matrix56);
        org.junit.Assert.assertNotNull(doubleArray59);
        org.junit.Assert.assertArrayEquals(doubleArray59, new double[] { 137.90576492663388d, (-1.0d) }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray60);
        org.junit.Assert.assertArrayEquals(doubleArray60, new double[] { (-24.931892522286255d), (-135.63701830716116d) }, 1.0E-15);
        org.junit.Assert.assertNotNull(matrix61);
        org.junit.Assert.assertNotNull(matrix62);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 2 + "'", int63 == 2);
        org.junit.Assert.assertNotNull(matrix66);
        org.junit.Assert.assertNotNull(doubleArray69);
        org.junit.Assert.assertArrayEquals(doubleArray69, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray72);
        org.junit.Assert.assertArrayEquals(doubleArray72, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray73);
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + 2 + "'", int75 == 2);
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 2 + "'", int76 == 2);
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + 2 + "'", int77 == 2);
        org.junit.Assert.assertNotNull(matrixArray78);
        org.junit.Assert.assertNotNull(matrix79);
        org.junit.Assert.assertNotNull(matrix81);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + true + "'", boolean85 == true);
        org.junit.Assert.assertNotNull(matrix87);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + true + "'", boolean89 == true);
        org.junit.Assert.assertNotNull(matrix91);
        org.junit.Assert.assertNotNull(matrix92);
        org.junit.Assert.assertNotNull(matrix93);
        org.junit.Assert.assertTrue("'" + double94 + "' != '" + 1.472965077159101d + "'", double94 == 1.472965077159101d);
    }

    @Test
    public void test3410() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3410");
        com.operations.Matrix.Matrix matrix2 = com.operations.Matrix.MatrixTransformations.project2D(13376.859197883485d, 99.83621769912266d);
        org.junit.Assert.assertNotNull(matrix2);
    }

    @Test
    public void test3411() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3411");
        double[] doubleArray2 = new double[] { 10, 'a' };
        double[] doubleArray5 = new double[] { 10, 'a' };
        double[][] doubleArray6 = new double[][] { doubleArray2, doubleArray5 };
        com.operations.Matrix.Matrix matrix7 = new com.operations.Matrix.Matrix(doubleArray6);
        int int8 = matrix7.getCols();
        boolean boolean9 = com.operations.Matrix.MatrixUtils.isSquare(matrix7);
        com.operations.Matrix.Matrix matrix10 = com.operations.Matrix.MatrixOperations.transpose(matrix7);
        int int11 = matrix10.getRows();
        com.operations.Matrix.Matrix matrix14 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0L, (double) (byte) 10);
        double[] doubleArray17 = new double[] { 10, 'a' };
        double[] doubleArray20 = new double[] { 10, 'a' };
        double[][] doubleArray21 = new double[][] { doubleArray17, doubleArray20 };
        com.operations.Matrix.Matrix matrix22 = new com.operations.Matrix.Matrix(doubleArray21);
        int int23 = matrix22.getCols();
        int int24 = matrix22.getCols();
        int int25 = matrix22.getCols();
        com.operations.Matrix.Matrix[] matrixArray26 = com.operations.Matrix.MatrixDecompositions.luDecomposition(matrix22);
        com.operations.Matrix.Matrix matrix27 = com.operations.Matrix.MatrixOperations.multiply(matrix14, matrix22);
        com.operations.Matrix.Matrix matrix29 = com.operations.Matrix.MatrixTransformations.rotate2D((double) (short) 100);
        boolean boolean31 = com.operations.Matrix.MatrixUtils.compare(matrix22, matrix29, (double) (byte) 0);
        com.operations.Matrix.Matrix matrix32 = com.operations.Matrix.MatrixOperations.multiply(matrix10, matrix22);
        int int33 = matrix10.getCols();
        double[][] doubleArray34 = matrix10.getData();
        com.operations.Matrix.Matrix matrix37 = com.operations.Matrix.MatrixTransformations.project2D((double) 10L, 10.0d);
        com.operations.Matrix.Matrix matrix39 = com.operations.Matrix.MatrixTransformations.rotate2D((double) (short) 100);
        double[] doubleArray42 = new double[] { 137.90576492663388d, (byte) -1 };
        double[] doubleArray43 = com.operations.Matrix.MatrixSolver.solveGaussian(matrix39, doubleArray42);
        com.operations.Matrix.Matrix matrix46 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0L, (double) (byte) 10);
        double[] doubleArray49 = new double[] { 10, 'a' };
        double[] doubleArray52 = new double[] { 10, 'a' };
        double[][] doubleArray53 = new double[][] { doubleArray49, doubleArray52 };
        com.operations.Matrix.Matrix matrix54 = new com.operations.Matrix.Matrix(doubleArray53);
        int int55 = matrix54.getCols();
        int int56 = matrix54.getCols();
        int int57 = matrix54.getCols();
        com.operations.Matrix.Matrix[] matrixArray58 = com.operations.Matrix.MatrixDecompositions.luDecomposition(matrix54);
        com.operations.Matrix.Matrix matrix59 = com.operations.Matrix.MatrixOperations.multiply(matrix46, matrix54);
        boolean boolean61 = com.operations.Matrix.MatrixUtils.compare(matrix39, matrix46, (double) (-1L));
        double[][] doubleArray62 = matrix39.getData();
        com.operations.Matrix.Matrix matrix64 = com.operations.Matrix.MatrixTransformations.rotate2D((double) (short) 100);
        double[] doubleArray67 = new double[] { 137.90576492663388d, (byte) -1 };
        double[] doubleArray68 = com.operations.Matrix.MatrixSolver.solveGaussian(matrix64, doubleArray67);
        double[] doubleArray69 = com.operations.Matrix.MatrixSolver.solveGaussian(matrix39, doubleArray67);
        double[] doubleArray70 = com.operations.Matrix.MatrixSolver.solveGaussian(matrix37, doubleArray69);
        boolean boolean72 = com.operations.Matrix.MatrixUtils.compare(matrix10, matrix37, (double) 100.0f);
        matrix10.print();
        com.operations.Matrix.Matrix matrix74 = com.operations.Matrix.MatrixOperations.transpose(matrix10);
        com.operations.Matrix.Matrix matrix76 = com.operations.Matrix.MatrixTransformations.rotate2D(100.0d);
        int int77 = matrix76.getCols();
        matrix76.print();
        com.operations.Matrix.Matrix matrix80 = com.operations.Matrix.MatrixOperations.scalarMultiply(matrix76, (double) (byte) 1);
        com.operations.Matrix.Matrix matrix82 = com.operations.Matrix.MatrixTransformations.rotate2D(350.0d);
        com.operations.Matrix.Matrix matrix84 = com.operations.Matrix.MatrixTransformations.rotate2D((double) (short) 100);
        double[] doubleArray87 = new double[] { 137.90576492663388d, (byte) -1 };
        double[] doubleArray88 = com.operations.Matrix.MatrixSolver.solveGaussian(matrix84, doubleArray87);
        double[] doubleArray89 = com.operations.Matrix.MatrixSolver.solveGaussian(matrix82, doubleArray88);
        double[] doubleArray90 = com.operations.Matrix.MatrixSolver.solveGaussian(matrix76, doubleArray88);
        // The following exception was thrown during execution in test generation
        try {
            double[] doubleArray91 = com.operations.Matrix.MatrixSolver.solveGaussian(matrix10, doubleArray90);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Matrix is singular or nearly singular.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertArrayEquals(doubleArray2, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertArrayEquals(doubleArray5, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 2 + "'", int8 == 2);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertNotNull(matrix10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 2 + "'", int11 == 2);
        org.junit.Assert.assertNotNull(matrix14);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertArrayEquals(doubleArray17, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertArrayEquals(doubleArray20, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 2 + "'", int23 == 2);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 2 + "'", int24 == 2);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 2 + "'", int25 == 2);
        org.junit.Assert.assertNotNull(matrixArray26);
        org.junit.Assert.assertNotNull(matrix27);
        org.junit.Assert.assertNotNull(matrix29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(matrix32);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 2 + "'", int33 == 2);
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertNotNull(matrix37);
        org.junit.Assert.assertNotNull(matrix39);
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertArrayEquals(doubleArray42, new double[] { 137.90576492663388d, (-1.0d) }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertArrayEquals(doubleArray43, new double[] { (-24.931892522286255d), (-135.63701830716116d) }, 1.0E-15);
        org.junit.Assert.assertNotNull(matrix46);
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertArrayEquals(doubleArray49, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertArrayEquals(doubleArray52, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 2 + "'", int55 == 2);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 2 + "'", int56 == 2);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 2 + "'", int57 == 2);
        org.junit.Assert.assertNotNull(matrixArray58);
        org.junit.Assert.assertNotNull(matrix59);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNotNull(doubleArray62);
        org.junit.Assert.assertNotNull(matrix64);
        org.junit.Assert.assertNotNull(doubleArray67);
        org.junit.Assert.assertArrayEquals(doubleArray67, new double[] { 137.90576492663388d, (-1.0d) }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray68);
        org.junit.Assert.assertArrayEquals(doubleArray68, new double[] { (-24.931892522286255d), (-135.63701830716116d) }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray69);
        org.junit.Assert.assertArrayEquals(doubleArray69, new double[] { (-24.931892522286255d), (-135.63701830716116d) }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray70);
        org.junit.Assert.assertArrayEquals(doubleArray70, new double[] { (-2.4931892522286256d), (-13.563701830716116d) }, 1.0E-15);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + true + "'", boolean72 == true);
        org.junit.Assert.assertNotNull(matrix74);
        org.junit.Assert.assertNotNull(matrix76);
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + 2 + "'", int77 == 2);
        org.junit.Assert.assertNotNull(matrix80);
        org.junit.Assert.assertNotNull(matrix82);
        org.junit.Assert.assertNotNull(matrix84);
        org.junit.Assert.assertNotNull(doubleArray87);
        org.junit.Assert.assertArrayEquals(doubleArray87, new double[] { 137.90576492663388d, (-1.0d) }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray88);
        org.junit.Assert.assertArrayEquals(doubleArray88, new double[] { (-24.931892522286255d), (-135.63701830716116d) }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray89);
        org.junit.Assert.assertArrayEquals(doubleArray89, new double[] { (-0.9999999999999858d), (-137.90576492663388d) }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray90);
        org.junit.Assert.assertArrayEquals(doubleArray90, new double[] { (-129.24700952206834d), 48.1062421064292d }, 1.0E-15);
    }

    @Test
    public void test3412() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3412");
        com.operations.Matrix.Matrix matrix2 = com.operations.Matrix.MatrixTransformations.scale2D((double) 10, (double) 0);
        double[] doubleArray5 = new double[] { 10, 'a' };
        double[] doubleArray8 = new double[] { 10, 'a' };
        double[][] doubleArray9 = new double[][] { doubleArray5, doubleArray8 };
        com.operations.Matrix.Matrix matrix10 = new com.operations.Matrix.Matrix(doubleArray9);
        com.operations.Matrix.Matrix matrix11 = new com.operations.Matrix.Matrix(doubleArray9);
        boolean boolean12 = com.operations.Matrix.MatrixUtils.isSquare(matrix11);
        double[] doubleArray15 = new double[] { 10, 'a' };
        double[] doubleArray18 = new double[] { 10, 'a' };
        double[][] doubleArray19 = new double[][] { doubleArray15, doubleArray18 };
        com.operations.Matrix.Matrix matrix20 = new com.operations.Matrix.Matrix(doubleArray19);
        int int21 = matrix20.getCols();
        int int22 = matrix20.getCols();
        matrix20.print();
        double[] doubleArray26 = new double[] { 10, 'a' };
        double[] doubleArray29 = new double[] { 10, 'a' };
        double[][] doubleArray30 = new double[][] { doubleArray26, doubleArray29 };
        com.operations.Matrix.Matrix matrix31 = new com.operations.Matrix.Matrix(doubleArray30);
        boolean boolean33 = com.operations.Matrix.MatrixUtils.compare(matrix20, matrix31, (double) (-1));
        com.operations.Matrix.Matrix matrix34 = com.operations.Matrix.MatrixOperations.subtract(matrix11, matrix31);
        com.operations.Matrix.Matrix[] matrixArray35 = com.operations.Matrix.MatrixDecompositions.luDecomposition(matrix34);
        double[][] doubleArray36 = matrix34.getData();
        boolean boolean37 = com.operations.Matrix.MatrixUtils.isSquare(matrix34);
        int int38 = matrix34.getCols();
        com.operations.Matrix.Matrix matrix39 = com.operations.Matrix.MatrixOperations.multiply(matrix2, matrix34);
        com.operations.Matrix.Matrix matrix42 = com.operations.Matrix.MatrixTransformations.scale2D(10.0d, 1.0d);
        com.operations.Matrix.Matrix matrix43 = com.operations.Matrix.MatrixOperations.transpose(matrix42);
        matrix43.print();
        com.operations.Matrix.Matrix matrix45 = com.operations.Matrix.MatrixOperations.subtract(matrix39, matrix43);
        // The following exception was thrown during execution in test generation
        try {
            com.operations.Matrix.Matrix matrix46 = com.operations.Matrix.MatrixDecompositions.choleskyDecomposition(matrix39);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Matrix is not positive definite.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(matrix2);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertArrayEquals(doubleArray5, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertArrayEquals(doubleArray8, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertArrayEquals(doubleArray15, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertArrayEquals(doubleArray18, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 2 + "'", int21 == 2);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 2 + "'", int22 == 2);
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertArrayEquals(doubleArray26, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertArrayEquals(doubleArray29, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(matrix34);
        org.junit.Assert.assertNotNull(matrixArray35);
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 2 + "'", int38 == 2);
        org.junit.Assert.assertNotNull(matrix39);
        org.junit.Assert.assertNotNull(matrix42);
        org.junit.Assert.assertNotNull(matrix43);
        org.junit.Assert.assertNotNull(matrix45);
    }

    @Test
    public void test3413() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3413");
        com.operations.Matrix.Matrix matrix2 = new com.operations.Matrix.Matrix(10, 52);
    }

    @Test
    public void test3414() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3414");
        com.operations.Matrix.Matrix matrix2 = com.operations.Matrix.MatrixTransformations.scale2D((double) 1.0f, 4826.701772432185d);
        org.junit.Assert.assertNotNull(matrix2);
    }

    @Test
    public void test3415() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3415");
        com.operations.Matrix.Matrix matrix2 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0L, (double) (byte) 10);
        double[] doubleArray5 = new double[] { 10, 'a' };
        double[] doubleArray8 = new double[] { 10, 'a' };
        double[][] doubleArray9 = new double[][] { doubleArray5, doubleArray8 };
        com.operations.Matrix.Matrix matrix10 = new com.operations.Matrix.Matrix(doubleArray9);
        int int11 = matrix10.getCols();
        int int12 = matrix10.getCols();
        int int13 = matrix10.getCols();
        com.operations.Matrix.Matrix[] matrixArray14 = com.operations.Matrix.MatrixDecompositions.luDecomposition(matrix10);
        com.operations.Matrix.Matrix matrix15 = com.operations.Matrix.MatrixOperations.multiply(matrix2, matrix10);
        com.operations.Matrix.Matrix matrix17 = com.operations.Matrix.MatrixTransformations.rotate2D((double) (short) 100);
        boolean boolean19 = com.operations.Matrix.MatrixUtils.compare(matrix10, matrix17, (double) (byte) 0);
        com.operations.Matrix.Matrix matrix20 = com.operations.Matrix.MatrixOperations.transpose(matrix10);
        com.operations.Matrix.Matrix matrix23 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0L, (double) (byte) 10);
        double[] doubleArray26 = new double[] { 10, 'a' };
        double[] doubleArray29 = new double[] { 10, 'a' };
        double[][] doubleArray30 = new double[][] { doubleArray26, doubleArray29 };
        com.operations.Matrix.Matrix matrix31 = new com.operations.Matrix.Matrix(doubleArray30);
        int int32 = matrix31.getCols();
        int int33 = matrix31.getCols();
        int int34 = matrix31.getCols();
        com.operations.Matrix.Matrix[] matrixArray35 = com.operations.Matrix.MatrixDecompositions.luDecomposition(matrix31);
        com.operations.Matrix.Matrix matrix36 = com.operations.Matrix.MatrixOperations.multiply(matrix23, matrix31);
        com.operations.Matrix.Matrix matrix38 = com.operations.Matrix.MatrixTransformations.rotate2D((double) (short) 100);
        boolean boolean40 = com.operations.Matrix.MatrixUtils.compare(matrix31, matrix38, (double) (byte) 0);
        double[] doubleArray43 = new double[] { 10, 'a' };
        double[] doubleArray46 = new double[] { 10, 'a' };
        double[][] doubleArray47 = new double[][] { doubleArray43, doubleArray46 };
        com.operations.Matrix.Matrix matrix48 = new com.operations.Matrix.Matrix(doubleArray47);
        com.operations.Matrix.Matrix matrix49 = new com.operations.Matrix.Matrix(doubleArray47);
        com.operations.Matrix.Matrix matrix50 = new com.operations.Matrix.Matrix(doubleArray47);
        boolean boolean52 = com.operations.Matrix.MatrixUtils.compare(matrix31, matrix50, (double) (-1));
        com.operations.Matrix.Matrix matrix55 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0L, (double) (byte) 10);
        double[] doubleArray58 = new double[] { 10, 'a' };
        double[] doubleArray61 = new double[] { 10, 'a' };
        double[][] doubleArray62 = new double[][] { doubleArray58, doubleArray61 };
        com.operations.Matrix.Matrix matrix63 = new com.operations.Matrix.Matrix(doubleArray62);
        int int64 = matrix63.getCols();
        int int65 = matrix63.getCols();
        int int66 = matrix63.getCols();
        com.operations.Matrix.Matrix[] matrixArray67 = com.operations.Matrix.MatrixDecompositions.luDecomposition(matrix63);
        com.operations.Matrix.Matrix matrix68 = com.operations.Matrix.MatrixOperations.multiply(matrix55, matrix63);
        boolean boolean70 = com.operations.Matrix.MatrixUtils.compare(matrix50, matrix55, (double) 10L);
        boolean boolean72 = com.operations.Matrix.MatrixUtils.compare(matrix20, matrix50, (double) 100L);
        com.operations.Matrix.Matrix matrix75 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0L, (double) (byte) 10);
        double[] doubleArray78 = new double[] { 10, 'a' };
        double[] doubleArray81 = new double[] { 10, 'a' };
        double[][] doubleArray82 = new double[][] { doubleArray78, doubleArray81 };
        com.operations.Matrix.Matrix matrix83 = new com.operations.Matrix.Matrix(doubleArray82);
        int int84 = matrix83.getCols();
        int int85 = matrix83.getCols();
        int int86 = matrix83.getCols();
        com.operations.Matrix.Matrix[] matrixArray87 = com.operations.Matrix.MatrixDecompositions.luDecomposition(matrix83);
        com.operations.Matrix.Matrix matrix88 = com.operations.Matrix.MatrixOperations.multiply(matrix75, matrix83);
        int int89 = matrix83.getRows();
        int int90 = matrix83.getCols();
        com.operations.Matrix.Matrix matrix91 = com.operations.Matrix.MatrixOperations.subtract(matrix50, matrix83);
        com.operations.Matrix.Matrix matrix94 = com.operations.Matrix.MatrixTransformations.project2D(0.0d, (-0.1736481776669303d));
        com.operations.Matrix.Matrix matrix95 = com.operations.Matrix.MatrixOperations.subtract(matrix91, matrix94);
        java.lang.Class<?> wildcardClass96 = matrix94.getClass();
        org.junit.Assert.assertNotNull(matrix2);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertArrayEquals(doubleArray5, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertArrayEquals(doubleArray8, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 2 + "'", int11 == 2);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 2 + "'", int12 == 2);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 2 + "'", int13 == 2);
        org.junit.Assert.assertNotNull(matrixArray14);
        org.junit.Assert.assertNotNull(matrix15);
        org.junit.Assert.assertNotNull(matrix17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(matrix20);
        org.junit.Assert.assertNotNull(matrix23);
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertArrayEquals(doubleArray26, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertArrayEquals(doubleArray29, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 2 + "'", int32 == 2);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 2 + "'", int33 == 2);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 2 + "'", int34 == 2);
        org.junit.Assert.assertNotNull(matrixArray35);
        org.junit.Assert.assertNotNull(matrix36);
        org.junit.Assert.assertNotNull(matrix38);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertArrayEquals(doubleArray43, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray46);
        org.junit.Assert.assertArrayEquals(doubleArray46, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(matrix55);
        org.junit.Assert.assertNotNull(doubleArray58);
        org.junit.Assert.assertArrayEquals(doubleArray58, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray61);
        org.junit.Assert.assertArrayEquals(doubleArray61, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray62);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 2 + "'", int64 == 2);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 2 + "'", int65 == 2);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 2 + "'", int66 == 2);
        org.junit.Assert.assertNotNull(matrixArray67);
        org.junit.Assert.assertNotNull(matrix68);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + true + "'", boolean72 == true);
        org.junit.Assert.assertNotNull(matrix75);
        org.junit.Assert.assertNotNull(doubleArray78);
        org.junit.Assert.assertArrayEquals(doubleArray78, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray81);
        org.junit.Assert.assertArrayEquals(doubleArray81, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray82);
        org.junit.Assert.assertTrue("'" + int84 + "' != '" + 2 + "'", int84 == 2);
        org.junit.Assert.assertTrue("'" + int85 + "' != '" + 2 + "'", int85 == 2);
        org.junit.Assert.assertTrue("'" + int86 + "' != '" + 2 + "'", int86 == 2);
        org.junit.Assert.assertNotNull(matrixArray87);
        org.junit.Assert.assertNotNull(matrix88);
        org.junit.Assert.assertTrue("'" + int89 + "' != '" + 2 + "'", int89 == 2);
        org.junit.Assert.assertTrue("'" + int90 + "' != '" + 2 + "'", int90 == 2);
        org.junit.Assert.assertNotNull(matrix91);
        org.junit.Assert.assertNotNull(matrix94);
        org.junit.Assert.assertNotNull(matrix95);
        org.junit.Assert.assertNotNull(wildcardClass96);
    }

    @Test
    public void test3416() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3416");
        // The following exception was thrown during execution in test generation
        try {
            com.operations.Matrix.Matrix matrix2 = new com.operations.Matrix.Matrix((-1), (int) (byte) 1);
            org.junit.Assert.fail("Expected exception of type java.lang.NegativeArraySizeException; message: -1");
        } catch (java.lang.NegativeArraySizeException e) {
            // Expected exception.
        }
    }

    @Test
    public void test3417() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3417");
        com.operations.Matrix.Matrix matrix1 = com.operations.Matrix.MatrixTransformations.rotate2D((double) (short) -1);
        double double2 = com.operations.Matrix.MatrixUtils.frobeniusNorm(matrix1);
        com.operations.Matrix.Matrix matrix4 = com.operations.Matrix.MatrixTransformations.rotate2D((double) 32);
        matrix4.print();
        com.operations.Matrix.Matrix matrix6 = com.operations.Matrix.MatrixOperations.multiply(matrix1, matrix4);
        org.junit.Assert.assertNotNull(matrix1);
        org.junit.Assert.assertTrue("'" + double2 + "' != '" + 1.4142135623730951d + "'", double2 == 1.4142135623730951d);
        org.junit.Assert.assertNotNull(matrix4);
        org.junit.Assert.assertNotNull(matrix6);
    }

    @Test
    public void test3418() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3418");
        com.operations.Matrix.Matrix matrix5 = com.operations.Matrix.MatrixUtils.generateRandomMatrix(52, 97, (int) (byte) 100, (int) 'a', 100L);
        // The following exception was thrown during execution in test generation
        try {
            com.operations.Matrix.Matrix[] matrixArray6 = com.operations.Matrix.MatrixDecompositions.luDecomposition(matrix5);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Matrix must be square for LU decomposition.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(matrix5);
    }

    @Test
    public void test3419() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3419");
        // The following exception was thrown during execution in test generation
        try {
            com.operations.Matrix.Matrix matrix4 = com.operations.Matrix.MatrixUtils.generateRandomMatrix((int) (byte) 10, (-1), 35, 52);
            org.junit.Assert.fail("Expected exception of type java.lang.NegativeArraySizeException; message: -1");
        } catch (java.lang.NegativeArraySizeException e) {
            // Expected exception.
        }
    }

    @Test
    public void test3420() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3420");
        com.operations.Matrix.Matrix matrix1 = com.operations.Matrix.MatrixTransformations.rotate2D((double) (short) 100);
        double[] doubleArray4 = new double[] { 137.90576492663388d, (byte) -1 };
        double[] doubleArray5 = com.operations.Matrix.MatrixSolver.solveGaussian(matrix1, doubleArray4);
        com.operations.Matrix.Matrix matrix8 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0L, (double) (byte) 10);
        double[] doubleArray11 = new double[] { 10, 'a' };
        double[] doubleArray14 = new double[] { 10, 'a' };
        double[][] doubleArray15 = new double[][] { doubleArray11, doubleArray14 };
        com.operations.Matrix.Matrix matrix16 = new com.operations.Matrix.Matrix(doubleArray15);
        int int17 = matrix16.getCols();
        int int18 = matrix16.getCols();
        int int19 = matrix16.getCols();
        com.operations.Matrix.Matrix[] matrixArray20 = com.operations.Matrix.MatrixDecompositions.luDecomposition(matrix16);
        com.operations.Matrix.Matrix matrix21 = com.operations.Matrix.MatrixOperations.multiply(matrix8, matrix16);
        boolean boolean23 = com.operations.Matrix.MatrixUtils.compare(matrix1, matrix8, (double) (-1L));
        double[] doubleArray26 = new double[] { 10, 'a' };
        double[] doubleArray29 = new double[] { 10, 'a' };
        double[][] doubleArray30 = new double[][] { doubleArray26, doubleArray29 };
        com.operations.Matrix.Matrix matrix31 = new com.operations.Matrix.Matrix(doubleArray30);
        int int32 = matrix31.getCols();
        int int33 = matrix31.getCols();
        boolean boolean34 = com.operations.Matrix.MatrixUtils.isSquare(matrix31);
        com.operations.Matrix.Matrix matrix35 = com.operations.Matrix.MatrixDecompositions.choleskyDecomposition(matrix31);
        com.operations.Matrix.Matrix matrix38 = com.operations.Matrix.MatrixTransformations.project2D(0.0d, (double) 0);
        com.operations.Matrix.Matrix matrix39 = com.operations.Matrix.MatrixOperations.subtract(matrix35, matrix38);
        com.operations.Matrix.Matrix matrix41 = com.operations.Matrix.MatrixOperations.scalarMultiply(matrix35, (double) 1.0f);
        com.operations.Matrix.Matrix matrix42 = com.operations.Matrix.MatrixOperations.subtract(matrix1, matrix41);
        com.operations.Matrix.Matrix matrix43 = com.operations.Matrix.MatrixOperations.transpose(matrix41);
        int int44 = matrix41.getCols();
        org.junit.Assert.assertNotNull(matrix1);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertArrayEquals(doubleArray4, new double[] { 137.90576492663388d, (-1.0d) }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertArrayEquals(doubleArray5, new double[] { (-24.931892522286255d), (-135.63701830716116d) }, 1.0E-15);
        org.junit.Assert.assertNotNull(matrix8);
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertArrayEquals(doubleArray11, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertArrayEquals(doubleArray14, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 2 + "'", int17 == 2);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 2 + "'", int18 == 2);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 2 + "'", int19 == 2);
        org.junit.Assert.assertNotNull(matrixArray20);
        org.junit.Assert.assertNotNull(matrix21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertArrayEquals(doubleArray26, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertArrayEquals(doubleArray29, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 2 + "'", int32 == 2);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 2 + "'", int33 == 2);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertNotNull(matrix35);
        org.junit.Assert.assertNotNull(matrix38);
        org.junit.Assert.assertNotNull(matrix39);
        org.junit.Assert.assertNotNull(matrix41);
        org.junit.Assert.assertNotNull(matrix42);
        org.junit.Assert.assertNotNull(matrix43);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 2 + "'", int44 == 2);
    }

    @Test
    public void test3421() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3421");
        com.operations.Matrix.Matrix matrix1 = com.operations.Matrix.MatrixTransformations.rotate2D((double) (-1L));
        matrix1.print();
        com.operations.Matrix.Matrix matrix5 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0L, (double) (byte) 10);
        double[] doubleArray8 = new double[] { 10, 'a' };
        double[] doubleArray11 = new double[] { 10, 'a' };
        double[][] doubleArray12 = new double[][] { doubleArray8, doubleArray11 };
        com.operations.Matrix.Matrix matrix13 = new com.operations.Matrix.Matrix(doubleArray12);
        int int14 = matrix13.getCols();
        int int15 = matrix13.getCols();
        int int16 = matrix13.getCols();
        com.operations.Matrix.Matrix[] matrixArray17 = com.operations.Matrix.MatrixDecompositions.luDecomposition(matrix13);
        com.operations.Matrix.Matrix matrix18 = com.operations.Matrix.MatrixOperations.multiply(matrix5, matrix13);
        com.operations.Matrix.Matrix matrix20 = com.operations.Matrix.MatrixTransformations.rotate2D((double) (short) 100);
        boolean boolean22 = com.operations.Matrix.MatrixUtils.compare(matrix13, matrix20, (double) (byte) 0);
        double[] doubleArray25 = new double[] { 10, 'a' };
        double[] doubleArray28 = new double[] { 10, 'a' };
        double[][] doubleArray29 = new double[][] { doubleArray25, doubleArray28 };
        com.operations.Matrix.Matrix matrix30 = new com.operations.Matrix.Matrix(doubleArray29);
        com.operations.Matrix.Matrix matrix31 = new com.operations.Matrix.Matrix(doubleArray29);
        com.operations.Matrix.Matrix matrix32 = new com.operations.Matrix.Matrix(doubleArray29);
        boolean boolean34 = com.operations.Matrix.MatrixUtils.compare(matrix13, matrix32, (double) (-1));
        double[] doubleArray37 = new double[] { 10, 'a' };
        double[] doubleArray40 = new double[] { 10, 'a' };
        double[][] doubleArray41 = new double[][] { doubleArray37, doubleArray40 };
        com.operations.Matrix.Matrix matrix42 = new com.operations.Matrix.Matrix(doubleArray41);
        com.operations.Matrix.Matrix matrix43 = new com.operations.Matrix.Matrix(doubleArray41);
        boolean boolean44 = com.operations.Matrix.MatrixUtils.isSquare(matrix43);
        com.operations.Matrix.Matrix matrix45 = com.operations.Matrix.MatrixOperations.multiply(matrix32, matrix43);
        com.operations.Matrix.Matrix matrix48 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0L, (double) (byte) 10);
        int int49 = matrix48.getRows();
        com.operations.Matrix.Matrix matrix51 = com.operations.Matrix.MatrixOperations.scalarMultiply(matrix48, (double) 2);
        matrix48.print();
        matrix48.print();
        com.operations.Matrix.Matrix matrix54 = com.operations.Matrix.MatrixOperations.multiply(matrix45, matrix48);
        com.operations.Matrix.Matrix matrix55 = com.operations.Matrix.MatrixOperations.subtract(matrix1, matrix48);
        com.operations.Matrix.Matrix matrix56 = com.operations.Matrix.MatrixOperations.transpose(matrix1);
        com.operations.Matrix.Matrix matrix59 = com.operations.Matrix.MatrixTransformations.project2D((double) (byte) 100, (double) 1L);
        com.operations.Matrix.Matrix matrix60 = com.operations.Matrix.MatrixOperations.add(matrix1, matrix59);
        com.operations.Matrix.Matrix matrix61 = null;
        // The following exception was thrown during execution in test generation
        try {
            com.operations.Matrix.Matrix matrix62 = com.operations.Matrix.MatrixOperations.add(matrix60, matrix61);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot invoke \"com.operations.Matrix.Matrix.getRows()\" because \"b\" is null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(matrix1);
        org.junit.Assert.assertNotNull(matrix5);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertArrayEquals(doubleArray8, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertArrayEquals(doubleArray11, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 2 + "'", int14 == 2);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 2 + "'", int15 == 2);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 2 + "'", int16 == 2);
        org.junit.Assert.assertNotNull(matrixArray17);
        org.junit.Assert.assertNotNull(matrix18);
        org.junit.Assert.assertNotNull(matrix20);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertArrayEquals(doubleArray25, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertArrayEquals(doubleArray28, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertArrayEquals(doubleArray37, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertArrayEquals(doubleArray40, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertNotNull(matrix45);
        org.junit.Assert.assertNotNull(matrix48);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 2 + "'", int49 == 2);
        org.junit.Assert.assertNotNull(matrix51);
        org.junit.Assert.assertNotNull(matrix54);
        org.junit.Assert.assertNotNull(matrix55);
        org.junit.Assert.assertNotNull(matrix56);
        org.junit.Assert.assertNotNull(matrix59);
        org.junit.Assert.assertNotNull(matrix60);
    }

    @Test
    public void test3422() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3422");
        com.operations.Matrix.Matrix matrix2 = new com.operations.Matrix.Matrix((int) (short) 0, 35);
        // The following exception was thrown during execution in test generation
        try {
            com.operations.Matrix.Matrix[] matrixArray3 = com.operations.Matrix.MatrixDecompositions.luDecomposition(matrix2);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Matrix must be square for LU decomposition.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test3423() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3423");
        com.operations.Matrix.Matrix matrix0 = null;
        com.operations.Matrix.Matrix matrix3 = com.operations.Matrix.MatrixTransformations.scale2D((double) (byte) 1, (double) 35);
        com.operations.Matrix.Matrix[] matrixArray4 = com.operations.Matrix.MatrixDecompositions.luDecomposition(matrix3);
        com.operations.Matrix.Matrix matrix7 = com.operations.Matrix.MatrixTransformations.scale2D((double) 100.0f, (double) (byte) 1);
        com.operations.Matrix.Matrix matrix10 = com.operations.Matrix.MatrixTransformations.scale2D((double) 1.0f, (double) 1);
        com.operations.Matrix.Matrix matrix12 = com.operations.Matrix.MatrixTransformations.rotate2D((double) 1.0f);
        com.operations.Matrix.Matrix matrix15 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0L, (double) (byte) 10);
        int int16 = matrix15.getRows();
        com.operations.Matrix.Matrix matrix18 = com.operations.Matrix.MatrixOperations.scalarMultiply(matrix15, (double) 2);
        double double19 = com.operations.Matrix.MatrixUtils.frobeniusNorm(matrix15);
        com.operations.Matrix.Matrix matrix22 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0L, (double) (byte) 10);
        int int23 = matrix22.getRows();
        com.operations.Matrix.Matrix matrix25 = com.operations.Matrix.MatrixOperations.scalarMultiply(matrix22, (double) 2);
        com.operations.Matrix.Matrix matrix26 = com.operations.Matrix.MatrixOperations.subtract(matrix15, matrix25);
        com.operations.Matrix.Matrix matrix27 = com.operations.Matrix.MatrixOperations.add(matrix12, matrix25);
        boolean boolean29 = com.operations.Matrix.MatrixUtils.compare(matrix10, matrix12, (double) (byte) -1);
        com.operations.Matrix.Matrix matrix30 = com.operations.Matrix.MatrixOperations.transpose(matrix12);
        com.operations.Matrix.Matrix matrix33 = com.operations.Matrix.MatrixTransformations.project2D((double) 10L, 10.0d);
        com.operations.Matrix.Matrix matrix35 = com.operations.Matrix.MatrixTransformations.rotate2D((double) (short) 100);
        double[] doubleArray38 = new double[] { 137.90576492663388d, (byte) -1 };
        double[] doubleArray39 = com.operations.Matrix.MatrixSolver.solveGaussian(matrix35, doubleArray38);
        com.operations.Matrix.Matrix matrix42 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0L, (double) (byte) 10);
        double[] doubleArray45 = new double[] { 10, 'a' };
        double[] doubleArray48 = new double[] { 10, 'a' };
        double[][] doubleArray49 = new double[][] { doubleArray45, doubleArray48 };
        com.operations.Matrix.Matrix matrix50 = new com.operations.Matrix.Matrix(doubleArray49);
        int int51 = matrix50.getCols();
        int int52 = matrix50.getCols();
        int int53 = matrix50.getCols();
        com.operations.Matrix.Matrix[] matrixArray54 = com.operations.Matrix.MatrixDecompositions.luDecomposition(matrix50);
        com.operations.Matrix.Matrix matrix55 = com.operations.Matrix.MatrixOperations.multiply(matrix42, matrix50);
        boolean boolean57 = com.operations.Matrix.MatrixUtils.compare(matrix35, matrix42, (double) (-1L));
        double[][] doubleArray58 = matrix35.getData();
        com.operations.Matrix.Matrix matrix60 = com.operations.Matrix.MatrixTransformations.rotate2D((double) (short) 100);
        double[] doubleArray63 = new double[] { 137.90576492663388d, (byte) -1 };
        double[] doubleArray64 = com.operations.Matrix.MatrixSolver.solveGaussian(matrix60, doubleArray63);
        double[] doubleArray65 = com.operations.Matrix.MatrixSolver.solveGaussian(matrix35, doubleArray63);
        double[] doubleArray66 = com.operations.Matrix.MatrixSolver.solveGaussian(matrix33, doubleArray65);
        double[] doubleArray67 = com.operations.Matrix.MatrixSolver.solveGaussian(matrix12, doubleArray66);
        double[] doubleArray68 = com.operations.Matrix.MatrixSolver.solveGaussian(matrix7, doubleArray67);
        double[] doubleArray69 = com.operations.Matrix.MatrixSolver.solveGaussian(matrix3, doubleArray68);
        // The following exception was thrown during execution in test generation
        try {
            double[] doubleArray70 = com.operations.Matrix.MatrixSolver.solveGaussian(matrix0, doubleArray69);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(matrix3);
        org.junit.Assert.assertNotNull(matrixArray4);
        org.junit.Assert.assertNotNull(matrix7);
        org.junit.Assert.assertNotNull(matrix10);
        org.junit.Assert.assertNotNull(matrix12);
        org.junit.Assert.assertNotNull(matrix15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 2 + "'", int16 == 2);
        org.junit.Assert.assertNotNull(matrix18);
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 10.0d + "'", double19 == 10.0d);
        org.junit.Assert.assertNotNull(matrix22);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 2 + "'", int23 == 2);
        org.junit.Assert.assertNotNull(matrix25);
        org.junit.Assert.assertNotNull(matrix26);
        org.junit.Assert.assertNotNull(matrix27);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(matrix30);
        org.junit.Assert.assertNotNull(matrix33);
        org.junit.Assert.assertNotNull(matrix35);
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertArrayEquals(doubleArray38, new double[] { 137.90576492663388d, (-1.0d) }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertArrayEquals(doubleArray39, new double[] { (-24.931892522286255d), (-135.63701830716116d) }, 1.0E-15);
        org.junit.Assert.assertNotNull(matrix42);
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertArrayEquals(doubleArray45, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertArrayEquals(doubleArray48, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 2 + "'", int51 == 2);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 2 + "'", int52 == 2);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 2 + "'", int53 == 2);
        org.junit.Assert.assertNotNull(matrixArray54);
        org.junit.Assert.assertNotNull(matrix55);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNotNull(doubleArray58);
        org.junit.Assert.assertNotNull(matrix60);
        org.junit.Assert.assertNotNull(doubleArray63);
        org.junit.Assert.assertArrayEquals(doubleArray63, new double[] { 137.90576492663388d, (-1.0d) }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray64);
        org.junit.Assert.assertArrayEquals(doubleArray64, new double[] { (-24.931892522286255d), (-135.63701830716116d) }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray65);
        org.junit.Assert.assertArrayEquals(doubleArray65, new double[] { (-24.931892522286255d), (-135.63701830716116d) }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray66);
        org.junit.Assert.assertArrayEquals(doubleArray66, new double[] { (-2.4931892522286256d), (-13.563701830716116d) }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray67);
        org.junit.Assert.assertArrayEquals(doubleArray67, new double[] { (-2.7295287645732618d), (-13.518123861075072d) }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray68);
        org.junit.Assert.assertArrayEquals(doubleArray68, new double[] { (-0.027295287645732618d), (-13.518123861075072d) }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray69);
        org.junit.Assert.assertArrayEquals(doubleArray69, new double[] { (-0.027295287645732618d), (-0.3862321103164306d) }, 1.0E-15);
    }

    @Test
    public void test3424() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3424");
        com.operations.Matrix.Matrix matrix1 = com.operations.Matrix.MatrixTransformations.rotate2D((double) 1.0f);
        com.operations.Matrix.Matrix matrix4 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0L, (double) (byte) 10);
        int int5 = matrix4.getRows();
        com.operations.Matrix.Matrix matrix7 = com.operations.Matrix.MatrixOperations.scalarMultiply(matrix4, (double) 2);
        double double8 = com.operations.Matrix.MatrixUtils.frobeniusNorm(matrix4);
        com.operations.Matrix.Matrix matrix11 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0L, (double) (byte) 10);
        int int12 = matrix11.getRows();
        com.operations.Matrix.Matrix matrix14 = com.operations.Matrix.MatrixOperations.scalarMultiply(matrix11, (double) 2);
        com.operations.Matrix.Matrix matrix15 = com.operations.Matrix.MatrixOperations.subtract(matrix4, matrix14);
        com.operations.Matrix.Matrix matrix16 = com.operations.Matrix.MatrixOperations.add(matrix1, matrix14);
        com.operations.Matrix.Matrix[] matrixArray17 = com.operations.Matrix.MatrixDecompositions.luDecomposition(matrix14);
        boolean boolean18 = com.operations.Matrix.MatrixUtils.isSquare(matrix14);
        com.operations.Matrix.Matrix matrix19 = com.operations.Matrix.MatrixOperations.transpose(matrix14);
        com.operations.Matrix.Matrix matrix21 = com.operations.Matrix.MatrixOperations.scalarMultiply(matrix14, (double) ' ');
        com.operations.Matrix.Matrix matrix24 = com.operations.Matrix.MatrixTransformations.project2D(0.0d, (double) 0);
        double[][] doubleArray25 = matrix24.getData();
        com.operations.Matrix.Matrix matrix26 = new com.operations.Matrix.Matrix(doubleArray25);
        com.operations.Matrix.Matrix matrix27 = new com.operations.Matrix.Matrix(doubleArray25);
        com.operations.Matrix.Matrix matrix28 = com.operations.Matrix.MatrixOperations.multiply(matrix14, matrix27);
        com.operations.Matrix.Matrix matrix29 = com.operations.Matrix.MatrixOperations.transpose(matrix28);
        com.operations.Matrix.Matrix[] matrixArray30 = com.operations.Matrix.MatrixDecompositions.luDecomposition(matrix29);
        double double31 = com.operations.Matrix.MatrixUtils.frobeniusNorm(matrix29);
        org.junit.Assert.assertNotNull(matrix1);
        org.junit.Assert.assertNotNull(matrix4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 2 + "'", int5 == 2);
        org.junit.Assert.assertNotNull(matrix7);
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 10.0d + "'", double8 == 10.0d);
        org.junit.Assert.assertNotNull(matrix11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 2 + "'", int12 == 2);
        org.junit.Assert.assertNotNull(matrix14);
        org.junit.Assert.assertNotNull(matrix15);
        org.junit.Assert.assertNotNull(matrix16);
        org.junit.Assert.assertNotNull(matrixArray17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(matrix19);
        org.junit.Assert.assertNotNull(matrix21);
        org.junit.Assert.assertNotNull(matrix24);
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertNotNull(matrix28);
        org.junit.Assert.assertNotNull(matrix29);
        org.junit.Assert.assertNotNull(matrixArray30);
        org.junit.Assert.assertTrue("'" + double31 + "' != '" + 0.0d + "'", double31 == 0.0d);
    }

    @Test
    public void test3425() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3425");
        com.operations.Matrix.Matrix matrix1 = com.operations.Matrix.MatrixTransformations.rotate2D(100.0d);
        int int2 = matrix1.getCols();
        matrix1.print();
        com.operations.Matrix.Matrix matrix5 = com.operations.Matrix.MatrixOperations.scalarMultiply(matrix1, (double) (byte) 1);
        com.operations.Matrix.Matrix matrix8 = com.operations.Matrix.MatrixTransformations.project2D((double) ' ', 0.0d);
        double[] doubleArray11 = new double[] { 10, 'a' };
        double[] doubleArray14 = new double[] { 10, 'a' };
        double[][] doubleArray15 = new double[][] { doubleArray11, doubleArray14 };
        com.operations.Matrix.Matrix matrix16 = new com.operations.Matrix.Matrix(doubleArray15);
        int int17 = matrix16.getCols();
        boolean boolean18 = com.operations.Matrix.MatrixUtils.isSquare(matrix16);
        com.operations.Matrix.Matrix matrix19 = com.operations.Matrix.MatrixOperations.transpose(matrix16);
        int int20 = matrix19.getRows();
        com.operations.Matrix.Matrix matrix23 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0L, (double) (byte) 10);
        double[] doubleArray26 = new double[] { 10, 'a' };
        double[] doubleArray29 = new double[] { 10, 'a' };
        double[][] doubleArray30 = new double[][] { doubleArray26, doubleArray29 };
        com.operations.Matrix.Matrix matrix31 = new com.operations.Matrix.Matrix(doubleArray30);
        int int32 = matrix31.getCols();
        int int33 = matrix31.getCols();
        int int34 = matrix31.getCols();
        com.operations.Matrix.Matrix[] matrixArray35 = com.operations.Matrix.MatrixDecompositions.luDecomposition(matrix31);
        com.operations.Matrix.Matrix matrix36 = com.operations.Matrix.MatrixOperations.multiply(matrix23, matrix31);
        com.operations.Matrix.Matrix matrix38 = com.operations.Matrix.MatrixTransformations.rotate2D((double) (short) 100);
        boolean boolean40 = com.operations.Matrix.MatrixUtils.compare(matrix31, matrix38, (double) (byte) 0);
        com.operations.Matrix.Matrix matrix41 = com.operations.Matrix.MatrixOperations.multiply(matrix19, matrix31);
        com.operations.Matrix.Matrix matrix42 = com.operations.Matrix.MatrixOperations.add(matrix8, matrix31);
        matrix31.print();
        boolean boolean44 = com.operations.Matrix.MatrixUtils.isSquare(matrix31);
        boolean boolean46 = com.operations.Matrix.MatrixUtils.compare(matrix1, matrix31, 1.414213562373095d);
        double[] doubleArray49 = new double[] { 10, 'a' };
        double[] doubleArray52 = new double[] { 10, 'a' };
        double[][] doubleArray53 = new double[][] { doubleArray49, doubleArray52 };
        com.operations.Matrix.Matrix matrix54 = new com.operations.Matrix.Matrix(doubleArray53);
        com.operations.Matrix.Matrix matrix55 = new com.operations.Matrix.Matrix(doubleArray53);
        com.operations.Matrix.Matrix matrix56 = new com.operations.Matrix.Matrix(doubleArray53);
        com.operations.Matrix.Matrix matrix57 = new com.operations.Matrix.Matrix(doubleArray53);
        com.operations.Matrix.Matrix matrix58 = new com.operations.Matrix.Matrix(doubleArray53);
        boolean boolean60 = com.operations.Matrix.MatrixUtils.compare(matrix31, matrix58, 10.344080432788601d);
        com.operations.Matrix.Matrix[] matrixArray61 = com.operations.Matrix.MatrixDecompositions.luDecomposition(matrix31);
        org.junit.Assert.assertNotNull(matrix1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 2 + "'", int2 == 2);
        org.junit.Assert.assertNotNull(matrix5);
        org.junit.Assert.assertNotNull(matrix8);
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertArrayEquals(doubleArray11, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertArrayEquals(doubleArray14, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 2 + "'", int17 == 2);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(matrix19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 2 + "'", int20 == 2);
        org.junit.Assert.assertNotNull(matrix23);
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertArrayEquals(doubleArray26, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertArrayEquals(doubleArray29, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 2 + "'", int32 == 2);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 2 + "'", int33 == 2);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 2 + "'", int34 == 2);
        org.junit.Assert.assertNotNull(matrixArray35);
        org.junit.Assert.assertNotNull(matrix36);
        org.junit.Assert.assertNotNull(matrix38);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(matrix41);
        org.junit.Assert.assertNotNull(matrix42);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertArrayEquals(doubleArray49, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertArrayEquals(doubleArray52, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + true + "'", boolean60 == true);
        org.junit.Assert.assertNotNull(matrixArray61);
    }

    @Test
    public void test3426() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3426");
        com.operations.Matrix.Matrix matrix2 = com.operations.Matrix.MatrixTransformations.project2D(10.0d, (double) 1);
        double[][] doubleArray3 = matrix2.getData();
        com.operations.Matrix.Matrix matrix4 = new com.operations.Matrix.Matrix(doubleArray3);
        com.operations.Matrix.Matrix matrix6 = com.operations.Matrix.MatrixOperations.scalarMultiply(matrix4, (-1.0d));
        com.operations.Matrix.Matrix matrix7 = com.operations.Matrix.MatrixDecompositions.choleskyDecomposition(matrix4);
        com.operations.Matrix.Matrix matrix8 = com.operations.Matrix.MatrixOperations.transpose(matrix4);
        com.operations.Matrix.Matrix matrix9 = null;
        // The following exception was thrown during execution in test generation
        try {
            com.operations.Matrix.Matrix matrix10 = com.operations.Matrix.MatrixOperations.subtract(matrix4, matrix9);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot invoke \"com.operations.Matrix.Matrix.getRows()\" because \"b\" is null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(matrix2);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertNotNull(matrix6);
        org.junit.Assert.assertNotNull(matrix7);
        org.junit.Assert.assertNotNull(matrix8);
    }

    @Test
    public void test3427() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3427");
        com.operations.Matrix.Matrix matrix1 = com.operations.Matrix.MatrixTransformations.rotate2D((double) (short) 100);
        double[] doubleArray4 = new double[] { 10, 'a' };
        double[] doubleArray7 = new double[] { 10, 'a' };
        double[][] doubleArray8 = new double[][] { doubleArray4, doubleArray7 };
        com.operations.Matrix.Matrix matrix9 = new com.operations.Matrix.Matrix(doubleArray8);
        int int10 = matrix9.getCols();
        int int11 = matrix9.getCols();
        matrix9.print();
        double[] doubleArray15 = new double[] { 10, 'a' };
        double[] doubleArray18 = new double[] { 10, 'a' };
        double[][] doubleArray19 = new double[][] { doubleArray15, doubleArray18 };
        com.operations.Matrix.Matrix matrix20 = new com.operations.Matrix.Matrix(doubleArray19);
        boolean boolean22 = com.operations.Matrix.MatrixUtils.compare(matrix9, matrix20, (double) (-1));
        com.operations.Matrix.Matrix matrix23 = com.operations.Matrix.MatrixDecompositions.choleskyDecomposition(matrix20);
        com.operations.Matrix.Matrix[] matrixArray24 = com.operations.Matrix.MatrixDecompositions.luDecomposition(matrix20);
        com.operations.Matrix.Matrix matrix25 = com.operations.Matrix.MatrixDecompositions.choleskyDecomposition(matrix20);
        boolean boolean27 = com.operations.Matrix.MatrixUtils.compare(matrix1, matrix25, 3500.0d);
        boolean boolean28 = com.operations.Matrix.MatrixUtils.isSquare(matrix25);
        org.junit.Assert.assertNotNull(matrix1);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertArrayEquals(doubleArray4, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertArrayEquals(doubleArray7, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 2 + "'", int10 == 2);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 2 + "'", int11 == 2);
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertArrayEquals(doubleArray15, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertArrayEquals(doubleArray18, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(matrix23);
        org.junit.Assert.assertNotNull(matrixArray24);
        org.junit.Assert.assertNotNull(matrix25);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
    }

    @Test
    public void test3428() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3428");
        com.operations.Matrix.Matrix matrix1 = com.operations.Matrix.MatrixTransformations.rotate2D((double) 100.0f);
        int int2 = matrix1.getCols();
        org.junit.Assert.assertNotNull(matrix1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 2 + "'", int2 == 2);
    }

    @Test
    public void test3429() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3429");
        com.operations.Matrix.Matrix matrix5 = com.operations.Matrix.MatrixUtils.generateRandomMatrix((int) (byte) 100, (int) (short) 1, (int) (short) 0, 1, (long) 100);
        boolean boolean6 = com.operations.Matrix.MatrixUtils.isSymmetric(matrix5);
        int int7 = matrix5.getCols();
        int int8 = matrix5.getRows();
        // The following exception was thrown during execution in test generation
        try {
            com.operations.Matrix.Matrix[] matrixArray9 = com.operations.Matrix.MatrixDecompositions.luDecomposition(matrix5);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Matrix must be square for LU decomposition.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(matrix5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1 + "'", int7 == 1);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 100 + "'", int8 == 100);
    }

    @Test
    public void test3430() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3430");
        com.operations.Matrix.Matrix matrix2 = com.operations.Matrix.MatrixTransformations.scale2D(21.023651153076518d, 18.14229652832025d);
        org.junit.Assert.assertNotNull(matrix2);
    }

    @Test
    public void test3431() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3431");
        com.operations.Matrix.Matrix matrix2 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0L, (double) (byte) 10);
        int int3 = matrix2.getRows();
        com.operations.Matrix.Matrix matrix5 = com.operations.Matrix.MatrixOperations.scalarMultiply(matrix2, (double) 2);
        double double6 = com.operations.Matrix.MatrixUtils.frobeniusNorm(matrix2);
        com.operations.Matrix.Matrix matrix9 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0L, (double) (byte) 10);
        int int10 = matrix9.getRows();
        com.operations.Matrix.Matrix matrix12 = com.operations.Matrix.MatrixOperations.scalarMultiply(matrix9, (double) 2);
        com.operations.Matrix.Matrix matrix13 = com.operations.Matrix.MatrixOperations.subtract(matrix2, matrix12);
        double[][] doubleArray14 = matrix12.getData();
        double[][] doubleArray15 = matrix12.getData();
        com.operations.Matrix.Matrix matrix16 = new com.operations.Matrix.Matrix(doubleArray15);
        org.junit.Assert.assertNotNull(matrix2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 2 + "'", int3 == 2);
        org.junit.Assert.assertNotNull(matrix5);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 10.0d + "'", double6 == 10.0d);
        org.junit.Assert.assertNotNull(matrix9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 2 + "'", int10 == 2);
        org.junit.Assert.assertNotNull(matrix12);
        org.junit.Assert.assertNotNull(matrix13);
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertNotNull(doubleArray15);
    }

    @Test
    public void test3432() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3432");
        com.operations.Matrix.Matrix matrix2 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0L, (double) (byte) 10);
        int int3 = matrix2.getRows();
        com.operations.Matrix.Matrix matrix5 = com.operations.Matrix.MatrixOperations.scalarMultiply(matrix2, (double) 2);
        double double6 = com.operations.Matrix.MatrixUtils.frobeniusNorm(matrix2);
        com.operations.Matrix.Matrix matrix9 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0L, (double) (byte) 10);
        int int10 = matrix9.getRows();
        com.operations.Matrix.Matrix matrix12 = com.operations.Matrix.MatrixOperations.scalarMultiply(matrix9, (double) 2);
        com.operations.Matrix.Matrix matrix13 = com.operations.Matrix.MatrixOperations.subtract(matrix2, matrix12);
        double[][] doubleArray14 = matrix12.getData();
        double[][] doubleArray15 = matrix12.getData();
        // The following exception was thrown during execution in test generation
        try {
            matrix12.setValue((int) (short) 10, 10, 19018.0d);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: Index 10 out of bounds for length 2");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(matrix2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 2 + "'", int3 == 2);
        org.junit.Assert.assertNotNull(matrix5);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 10.0d + "'", double6 == 10.0d);
        org.junit.Assert.assertNotNull(matrix9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 2 + "'", int10 == 2);
        org.junit.Assert.assertNotNull(matrix12);
        org.junit.Assert.assertNotNull(matrix13);
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertNotNull(doubleArray15);
    }

    @Test
    public void test3433() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3433");
        com.operations.Matrix.Matrix matrix1 = com.operations.Matrix.MatrixTransformations.rotate2D(1.969615506024416d);
        org.junit.Assert.assertNotNull(matrix1);
    }

    @Test
    public void test3434() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3434");
        com.operations.Matrix.Matrix matrix2 = com.operations.Matrix.MatrixTransformations.scale2D(1.4142135623730951d, 1.7320508075688774d);
        org.junit.Assert.assertNotNull(matrix2);
    }

    @Test
    public void test3435() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3435");
        com.operations.Matrix.Matrix matrix4 = com.operations.Matrix.MatrixUtils.generateRandomMatrix((int) '#', (int) '#', (int) (short) 1, 100);
        int int5 = matrix4.getRows();
        org.junit.Assert.assertNotNull(matrix4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 35 + "'", int5 == 35);
    }

    @Test
    public void test3436() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3436");
        com.operations.Matrix.Matrix matrix2 = com.operations.Matrix.MatrixTransformations.scale2D((double) (byte) 10, (double) 10);
        double[] doubleArray5 = new double[] { 10, 'a' };
        double[] doubleArray8 = new double[] { 10, 'a' };
        double[][] doubleArray9 = new double[][] { doubleArray5, doubleArray8 };
        com.operations.Matrix.Matrix matrix10 = new com.operations.Matrix.Matrix(doubleArray9);
        com.operations.Matrix.Matrix matrix11 = new com.operations.Matrix.Matrix(doubleArray9);
        boolean boolean12 = com.operations.Matrix.MatrixUtils.isSquare(matrix11);
        double[] doubleArray15 = new double[] { 10, 'a' };
        double[] doubleArray18 = new double[] { 10, 'a' };
        double[][] doubleArray19 = new double[][] { doubleArray15, doubleArray18 };
        com.operations.Matrix.Matrix matrix20 = new com.operations.Matrix.Matrix(doubleArray19);
        int int21 = matrix20.getCols();
        int int22 = matrix20.getCols();
        matrix20.print();
        double[] doubleArray26 = new double[] { 10, 'a' };
        double[] doubleArray29 = new double[] { 10, 'a' };
        double[][] doubleArray30 = new double[][] { doubleArray26, doubleArray29 };
        com.operations.Matrix.Matrix matrix31 = new com.operations.Matrix.Matrix(doubleArray30);
        boolean boolean33 = com.operations.Matrix.MatrixUtils.compare(matrix20, matrix31, (double) (-1));
        com.operations.Matrix.Matrix matrix34 = com.operations.Matrix.MatrixOperations.subtract(matrix11, matrix31);
        com.operations.Matrix.Matrix[] matrixArray35 = com.operations.Matrix.MatrixDecompositions.luDecomposition(matrix34);
        double[][] doubleArray36 = matrix34.getData();
        com.operations.Matrix.Matrix matrix37 = new com.operations.Matrix.Matrix(doubleArray36);
        com.operations.Matrix.Matrix matrix38 = com.operations.Matrix.MatrixOperations.multiply(matrix2, matrix37);
        boolean boolean39 = com.operations.Matrix.MatrixUtils.isSymmetric(matrix2);
        com.operations.Matrix.Matrix matrix41 = com.operations.Matrix.MatrixTransformations.rotate2D(350.0d);
        com.operations.Matrix.Matrix matrix42 = com.operations.Matrix.MatrixDecompositions.choleskyDecomposition(matrix41);
        int int43 = matrix41.getRows();
        com.operations.Matrix.Matrix matrix44 = com.operations.Matrix.MatrixOperations.subtract(matrix2, matrix41);
        matrix44.print();
        com.operations.Matrix.Matrix matrix48 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0L, (double) (byte) 10);
        double[] doubleArray51 = new double[] { 10, 'a' };
        double[] doubleArray54 = new double[] { 10, 'a' };
        double[][] doubleArray55 = new double[][] { doubleArray51, doubleArray54 };
        com.operations.Matrix.Matrix matrix56 = new com.operations.Matrix.Matrix(doubleArray55);
        int int57 = matrix56.getCols();
        int int58 = matrix56.getCols();
        int int59 = matrix56.getCols();
        com.operations.Matrix.Matrix[] matrixArray60 = com.operations.Matrix.MatrixDecompositions.luDecomposition(matrix56);
        com.operations.Matrix.Matrix matrix61 = com.operations.Matrix.MatrixOperations.multiply(matrix48, matrix56);
        com.operations.Matrix.Matrix matrix63 = com.operations.Matrix.MatrixTransformations.rotate2D((double) (short) 100);
        boolean boolean65 = com.operations.Matrix.MatrixUtils.compare(matrix56, matrix63, (double) (byte) 0);
        com.operations.Matrix.Matrix[] matrixArray66 = com.operations.Matrix.MatrixDecompositions.luDecomposition(matrix56);
        com.operations.Matrix.Matrix matrix67 = com.operations.Matrix.MatrixOperations.transpose(matrix56);
        com.operations.Matrix.Matrix matrix70 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0L, (double) (byte) 10);
        int int71 = matrix70.getRows();
        com.operations.Matrix.Matrix matrix74 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0L, (double) (byte) 10);
        int int75 = matrix74.getRows();
        com.operations.Matrix.Matrix matrix77 = com.operations.Matrix.MatrixOperations.scalarMultiply(matrix74, (double) 2);
        com.operations.Matrix.Matrix matrix78 = com.operations.Matrix.MatrixOperations.subtract(matrix70, matrix74);
        boolean boolean80 = com.operations.Matrix.MatrixUtils.compare(matrix56, matrix70, (double) ' ');
        com.operations.Matrix.Matrix matrix82 = com.operations.Matrix.MatrixOperations.scalarMultiply(matrix56, 137.90576492663388d);
        boolean boolean84 = com.operations.Matrix.MatrixUtils.compare(matrix44, matrix82, 1.969615506024416d);
        double[][] doubleArray85 = matrix82.getData();
        org.junit.Assert.assertNotNull(matrix2);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertArrayEquals(doubleArray5, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertArrayEquals(doubleArray8, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertArrayEquals(doubleArray15, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertArrayEquals(doubleArray18, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 2 + "'", int21 == 2);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 2 + "'", int22 == 2);
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertArrayEquals(doubleArray26, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertArrayEquals(doubleArray29, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(matrix34);
        org.junit.Assert.assertNotNull(matrixArray35);
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertNotNull(matrix38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertNotNull(matrix41);
        org.junit.Assert.assertNotNull(matrix42);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 2 + "'", int43 == 2);
        org.junit.Assert.assertNotNull(matrix44);
        org.junit.Assert.assertNotNull(matrix48);
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertArrayEquals(doubleArray51, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray54);
        org.junit.Assert.assertArrayEquals(doubleArray54, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 2 + "'", int57 == 2);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 2 + "'", int58 == 2);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 2 + "'", int59 == 2);
        org.junit.Assert.assertNotNull(matrixArray60);
        org.junit.Assert.assertNotNull(matrix61);
        org.junit.Assert.assertNotNull(matrix63);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertNotNull(matrixArray66);
        org.junit.Assert.assertNotNull(matrix67);
        org.junit.Assert.assertNotNull(matrix70);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 2 + "'", int71 == 2);
        org.junit.Assert.assertNotNull(matrix74);
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + 2 + "'", int75 == 2);
        org.junit.Assert.assertNotNull(matrix77);
        org.junit.Assert.assertNotNull(matrix78);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertNotNull(matrix82);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
        org.junit.Assert.assertNotNull(doubleArray85);
    }

    @Test
    public void test3437() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3437");
        com.operations.Matrix.Matrix matrix2 = new com.operations.Matrix.Matrix((int) (short) 100, 1);
        com.operations.Matrix.Matrix matrix3 = com.operations.Matrix.MatrixOperations.transpose(matrix2);
        com.operations.Matrix.Matrix matrix6 = com.operations.Matrix.MatrixTransformations.scale2D((double) (-1L), (double) '4');
        com.operations.Matrix.Matrix matrix7 = com.operations.Matrix.MatrixOperations.transpose(matrix6);
        double[] doubleArray10 = new double[] { 10, 'a' };
        double[] doubleArray13 = new double[] { 10, 'a' };
        double[][] doubleArray14 = new double[][] { doubleArray10, doubleArray13 };
        com.operations.Matrix.Matrix matrix15 = new com.operations.Matrix.Matrix(doubleArray14);
        com.operations.Matrix.Matrix matrix16 = new com.operations.Matrix.Matrix(doubleArray14);
        com.operations.Matrix.Matrix matrix18 = com.operations.Matrix.MatrixTransformations.rotate2D((double) (short) 100);
        double[] doubleArray21 = new double[] { 137.90576492663388d, (byte) -1 };
        double[] doubleArray22 = com.operations.Matrix.MatrixSolver.solveGaussian(matrix18, doubleArray21);
        com.operations.Matrix.Matrix matrix23 = com.operations.Matrix.MatrixOperations.add(matrix16, matrix18);
        com.operations.Matrix.Matrix matrix24 = com.operations.Matrix.MatrixOperations.transpose(matrix18);
        com.operations.Matrix.Matrix matrix25 = com.operations.Matrix.MatrixOperations.multiply(matrix7, matrix18);
        boolean boolean27 = com.operations.Matrix.MatrixUtils.compare(matrix2, matrix7, (double) 10L);
        com.operations.Matrix.Matrix matrix28 = com.operations.Matrix.MatrixOperations.transpose(matrix2);
        matrix28.print();
        org.junit.Assert.assertNotNull(matrix3);
        org.junit.Assert.assertNotNull(matrix6);
        org.junit.Assert.assertNotNull(matrix7);
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertArrayEquals(doubleArray10, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertArrayEquals(doubleArray13, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertNotNull(matrix18);
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertArrayEquals(doubleArray21, new double[] { 137.90576492663388d, (-1.0d) }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertArrayEquals(doubleArray22, new double[] { (-24.931892522286255d), (-135.63701830716116d) }, 1.0E-15);
        org.junit.Assert.assertNotNull(matrix23);
        org.junit.Assert.assertNotNull(matrix24);
        org.junit.Assert.assertNotNull(matrix25);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(matrix28);
    }

    @Test
    public void test3438() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3438");
        com.operations.Matrix.Matrix matrix2 = com.operations.Matrix.MatrixTransformations.project2D((double) 10.0f, (double) (byte) -1);
        double[][] doubleArray3 = matrix2.getData();
        org.junit.Assert.assertNotNull(matrix2);
        org.junit.Assert.assertNotNull(doubleArray3);
    }

    @Test
    public void test3439() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3439");
        com.operations.Matrix.Matrix matrix4 = com.operations.Matrix.MatrixUtils.generateRandomMatrix((int) (short) 10, (int) (short) 0, (int) (short) 100, (int) (byte) 100);
        com.operations.Matrix.Matrix matrix7 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0L, (double) (byte) 10);
        double[] doubleArray10 = new double[] { 10, 'a' };
        double[] doubleArray13 = new double[] { 10, 'a' };
        double[][] doubleArray14 = new double[][] { doubleArray10, doubleArray13 };
        com.operations.Matrix.Matrix matrix15 = new com.operations.Matrix.Matrix(doubleArray14);
        int int16 = matrix15.getCols();
        int int17 = matrix15.getCols();
        int int18 = matrix15.getCols();
        com.operations.Matrix.Matrix[] matrixArray19 = com.operations.Matrix.MatrixDecompositions.luDecomposition(matrix15);
        com.operations.Matrix.Matrix matrix20 = com.operations.Matrix.MatrixOperations.multiply(matrix7, matrix15);
        com.operations.Matrix.Matrix matrix22 = com.operations.Matrix.MatrixTransformations.rotate2D((double) (short) 100);
        boolean boolean24 = com.operations.Matrix.MatrixUtils.compare(matrix15, matrix22, (double) (byte) 0);
        com.operations.Matrix.Matrix matrix26 = com.operations.Matrix.MatrixTransformations.rotate2D((double) 1.0f);
        com.operations.Matrix.Matrix matrix29 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0L, (double) (byte) 10);
        int int30 = matrix29.getRows();
        com.operations.Matrix.Matrix matrix32 = com.operations.Matrix.MatrixOperations.scalarMultiply(matrix29, (double) 2);
        double double33 = com.operations.Matrix.MatrixUtils.frobeniusNorm(matrix29);
        com.operations.Matrix.Matrix matrix36 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0L, (double) (byte) 10);
        int int37 = matrix36.getRows();
        com.operations.Matrix.Matrix matrix39 = com.operations.Matrix.MatrixOperations.scalarMultiply(matrix36, (double) 2);
        com.operations.Matrix.Matrix matrix40 = com.operations.Matrix.MatrixOperations.subtract(matrix29, matrix39);
        com.operations.Matrix.Matrix matrix41 = com.operations.Matrix.MatrixOperations.add(matrix26, matrix39);
        double[] doubleArray44 = new double[] { 10, 'a' };
        double[] doubleArray47 = new double[] { 10, 'a' };
        double[][] doubleArray48 = new double[][] { doubleArray44, doubleArray47 };
        com.operations.Matrix.Matrix matrix49 = new com.operations.Matrix.Matrix(doubleArray48);
        int int50 = matrix49.getCols();
        int int51 = matrix49.getCols();
        int int52 = matrix49.getCols();
        com.operations.Matrix.Matrix matrix58 = com.operations.Matrix.MatrixUtils.generateRandomMatrix(100, (int) (byte) 1, (int) '#', (int) '#', 1L);
        double double61 = matrix58.getValue((int) '4', 0);
        double double62 = com.operations.Matrix.MatrixUtils.frobeniusNorm(matrix58);
        boolean boolean63 = com.operations.Matrix.MatrixUtils.isSquare(matrix58);
        boolean boolean65 = com.operations.Matrix.MatrixUtils.compare(matrix49, matrix58, (double) 100L);
        com.operations.Matrix.Matrix matrix67 = com.operations.Matrix.MatrixTransformations.rotate2D((double) (short) 100);
        double[] doubleArray70 = new double[] { 137.90576492663388d, (byte) -1 };
        double[] doubleArray71 = com.operations.Matrix.MatrixSolver.solveGaussian(matrix67, doubleArray70);
        com.operations.Matrix.Matrix matrix74 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0L, (double) (byte) 10);
        double[] doubleArray77 = new double[] { 10, 'a' };
        double[] doubleArray80 = new double[] { 10, 'a' };
        double[][] doubleArray81 = new double[][] { doubleArray77, doubleArray80 };
        com.operations.Matrix.Matrix matrix82 = new com.operations.Matrix.Matrix(doubleArray81);
        int int83 = matrix82.getCols();
        int int84 = matrix82.getCols();
        int int85 = matrix82.getCols();
        com.operations.Matrix.Matrix[] matrixArray86 = com.operations.Matrix.MatrixDecompositions.luDecomposition(matrix82);
        com.operations.Matrix.Matrix matrix87 = com.operations.Matrix.MatrixOperations.multiply(matrix74, matrix82);
        boolean boolean89 = com.operations.Matrix.MatrixUtils.compare(matrix67, matrix74, (double) (-1L));
        com.operations.Matrix.Matrix matrix90 = com.operations.Matrix.MatrixOperations.subtract(matrix49, matrix74);
        com.operations.Matrix.Matrix matrix91 = com.operations.Matrix.MatrixOperations.add(matrix39, matrix74);
        com.operations.Matrix.Matrix matrix92 = com.operations.Matrix.MatrixOperations.add(matrix22, matrix91);
        com.operations.Matrix.Matrix matrix93 = com.operations.Matrix.MatrixOperations.transpose(matrix91);
        boolean boolean95 = com.operations.Matrix.MatrixUtils.compare(matrix4, matrix91, 98.07140255956371d);
        com.operations.Matrix.Matrix matrix97 = com.operations.Matrix.MatrixOperations.scalarMultiply(matrix91, 391.8840992892044d);
        com.operations.Matrix.Matrix matrix99 = com.operations.Matrix.MatrixOperations.scalarMultiply(matrix97, 32.0d);
        org.junit.Assert.assertNotNull(matrix4);
        org.junit.Assert.assertNotNull(matrix7);
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertArrayEquals(doubleArray10, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertArrayEquals(doubleArray13, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 2 + "'", int16 == 2);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 2 + "'", int17 == 2);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 2 + "'", int18 == 2);
        org.junit.Assert.assertNotNull(matrixArray19);
        org.junit.Assert.assertNotNull(matrix20);
        org.junit.Assert.assertNotNull(matrix22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(matrix26);
        org.junit.Assert.assertNotNull(matrix29);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 2 + "'", int30 == 2);
        org.junit.Assert.assertNotNull(matrix32);
        org.junit.Assert.assertTrue("'" + double33 + "' != '" + 10.0d + "'", double33 == 10.0d);
        org.junit.Assert.assertNotNull(matrix36);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 2 + "'", int37 == 2);
        org.junit.Assert.assertNotNull(matrix39);
        org.junit.Assert.assertNotNull(matrix40);
        org.junit.Assert.assertNotNull(matrix41);
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertArrayEquals(doubleArray44, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertArrayEquals(doubleArray47, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 2 + "'", int50 == 2);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 2 + "'", int51 == 2);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 2 + "'", int52 == 2);
        org.junit.Assert.assertNotNull(matrix58);
        org.junit.Assert.assertTrue("'" + double61 + "' != '" + 35.0d + "'", double61 == 35.0d);
        org.junit.Assert.assertTrue("'" + double62 + "' != '" + 350.0d + "'", double62 == 350.0d);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertNotNull(matrix67);
        org.junit.Assert.assertNotNull(doubleArray70);
        org.junit.Assert.assertArrayEquals(doubleArray70, new double[] { 137.90576492663388d, (-1.0d) }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray71);
        org.junit.Assert.assertArrayEquals(doubleArray71, new double[] { (-24.931892522286255d), (-135.63701830716116d) }, 1.0E-15);
        org.junit.Assert.assertNotNull(matrix74);
        org.junit.Assert.assertNotNull(doubleArray77);
        org.junit.Assert.assertArrayEquals(doubleArray77, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray80);
        org.junit.Assert.assertArrayEquals(doubleArray80, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray81);
        org.junit.Assert.assertTrue("'" + int83 + "' != '" + 2 + "'", int83 == 2);
        org.junit.Assert.assertTrue("'" + int84 + "' != '" + 2 + "'", int84 == 2);
        org.junit.Assert.assertTrue("'" + int85 + "' != '" + 2 + "'", int85 == 2);
        org.junit.Assert.assertNotNull(matrixArray86);
        org.junit.Assert.assertNotNull(matrix87);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + false + "'", boolean89 == false);
        org.junit.Assert.assertNotNull(matrix90);
        org.junit.Assert.assertNotNull(matrix91);
        org.junit.Assert.assertNotNull(matrix92);
        org.junit.Assert.assertNotNull(matrix93);
        org.junit.Assert.assertTrue("'" + boolean95 + "' != '" + false + "'", boolean95 == false);
        org.junit.Assert.assertNotNull(matrix97);
        org.junit.Assert.assertNotNull(matrix99);
    }

    @Test
    public void test3440() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3440");
        double[] doubleArray2 = new double[] { 10, 'a' };
        double[] doubleArray5 = new double[] { 10, 'a' };
        double[][] doubleArray6 = new double[][] { doubleArray2, doubleArray5 };
        com.operations.Matrix.Matrix matrix7 = new com.operations.Matrix.Matrix(doubleArray6);
        com.operations.Matrix.Matrix matrix8 = new com.operations.Matrix.Matrix(doubleArray6);
        com.operations.Matrix.Matrix[] matrixArray9 = com.operations.Matrix.MatrixDecompositions.luDecomposition(matrix8);
        com.operations.Matrix.Matrix matrix12 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0, (double) 100L);
        com.operations.Matrix.Matrix matrix13 = com.operations.Matrix.MatrixOperations.subtract(matrix8, matrix12);
        double[][] doubleArray14 = matrix8.getData();
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertArrayEquals(doubleArray2, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertArrayEquals(doubleArray5, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertNotNull(matrixArray9);
        org.junit.Assert.assertNotNull(matrix12);
        org.junit.Assert.assertNotNull(matrix13);
        org.junit.Assert.assertNotNull(doubleArray14);
    }

    @Test
    public void test3441() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3441");
        com.operations.Matrix.Matrix matrix1 = com.operations.Matrix.MatrixTransformations.rotate2D((double) (-1L));
        matrix1.print();
        com.operations.Matrix.Matrix matrix5 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0L, (double) (byte) 10);
        double[] doubleArray8 = new double[] { 10, 'a' };
        double[] doubleArray11 = new double[] { 10, 'a' };
        double[][] doubleArray12 = new double[][] { doubleArray8, doubleArray11 };
        com.operations.Matrix.Matrix matrix13 = new com.operations.Matrix.Matrix(doubleArray12);
        int int14 = matrix13.getCols();
        int int15 = matrix13.getCols();
        int int16 = matrix13.getCols();
        com.operations.Matrix.Matrix[] matrixArray17 = com.operations.Matrix.MatrixDecompositions.luDecomposition(matrix13);
        com.operations.Matrix.Matrix matrix18 = com.operations.Matrix.MatrixOperations.multiply(matrix5, matrix13);
        com.operations.Matrix.Matrix matrix20 = com.operations.Matrix.MatrixTransformations.rotate2D((double) (short) 100);
        boolean boolean22 = com.operations.Matrix.MatrixUtils.compare(matrix13, matrix20, (double) (byte) 0);
        double[] doubleArray25 = new double[] { 10, 'a' };
        double[] doubleArray28 = new double[] { 10, 'a' };
        double[][] doubleArray29 = new double[][] { doubleArray25, doubleArray28 };
        com.operations.Matrix.Matrix matrix30 = new com.operations.Matrix.Matrix(doubleArray29);
        com.operations.Matrix.Matrix matrix31 = new com.operations.Matrix.Matrix(doubleArray29);
        com.operations.Matrix.Matrix matrix32 = new com.operations.Matrix.Matrix(doubleArray29);
        boolean boolean34 = com.operations.Matrix.MatrixUtils.compare(matrix13, matrix32, (double) (-1));
        double[] doubleArray37 = new double[] { 10, 'a' };
        double[] doubleArray40 = new double[] { 10, 'a' };
        double[][] doubleArray41 = new double[][] { doubleArray37, doubleArray40 };
        com.operations.Matrix.Matrix matrix42 = new com.operations.Matrix.Matrix(doubleArray41);
        com.operations.Matrix.Matrix matrix43 = new com.operations.Matrix.Matrix(doubleArray41);
        boolean boolean44 = com.operations.Matrix.MatrixUtils.isSquare(matrix43);
        com.operations.Matrix.Matrix matrix45 = com.operations.Matrix.MatrixOperations.multiply(matrix32, matrix43);
        com.operations.Matrix.Matrix matrix48 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0L, (double) (byte) 10);
        int int49 = matrix48.getRows();
        com.operations.Matrix.Matrix matrix51 = com.operations.Matrix.MatrixOperations.scalarMultiply(matrix48, (double) 2);
        matrix48.print();
        matrix48.print();
        com.operations.Matrix.Matrix matrix54 = com.operations.Matrix.MatrixOperations.multiply(matrix45, matrix48);
        com.operations.Matrix.Matrix matrix55 = com.operations.Matrix.MatrixOperations.subtract(matrix1, matrix48);
        com.operations.Matrix.Matrix matrix56 = com.operations.Matrix.MatrixOperations.transpose(matrix1);
        com.operations.Matrix.Matrix matrix59 = com.operations.Matrix.MatrixTransformations.project2D((double) (byte) 100, (double) 1L);
        com.operations.Matrix.Matrix matrix60 = com.operations.Matrix.MatrixOperations.add(matrix1, matrix59);
        com.operations.Matrix.Matrix matrix62 = com.operations.Matrix.MatrixTransformations.rotate2D((double) (short) 100);
        double[] doubleArray65 = new double[] { 137.90576492663388d, (byte) -1 };
        double[] doubleArray66 = com.operations.Matrix.MatrixSolver.solveGaussian(matrix62, doubleArray65);
        com.operations.Matrix.Matrix matrix69 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0L, (double) (byte) 10);
        double[] doubleArray72 = new double[] { 10, 'a' };
        double[] doubleArray75 = new double[] { 10, 'a' };
        double[][] doubleArray76 = new double[][] { doubleArray72, doubleArray75 };
        com.operations.Matrix.Matrix matrix77 = new com.operations.Matrix.Matrix(doubleArray76);
        int int78 = matrix77.getCols();
        int int79 = matrix77.getCols();
        int int80 = matrix77.getCols();
        com.operations.Matrix.Matrix[] matrixArray81 = com.operations.Matrix.MatrixDecompositions.luDecomposition(matrix77);
        com.operations.Matrix.Matrix matrix82 = com.operations.Matrix.MatrixOperations.multiply(matrix69, matrix77);
        boolean boolean84 = com.operations.Matrix.MatrixUtils.compare(matrix62, matrix69, (double) (-1L));
        double[][] doubleArray85 = matrix62.getData();
        com.operations.Matrix.Matrix matrix87 = com.operations.Matrix.MatrixTransformations.rotate2D((double) (short) 100);
        double[] doubleArray90 = new double[] { 137.90576492663388d, (byte) -1 };
        double[] doubleArray91 = com.operations.Matrix.MatrixSolver.solveGaussian(matrix87, doubleArray90);
        double[] doubleArray92 = com.operations.Matrix.MatrixSolver.solveGaussian(matrix62, doubleArray90);
        int int93 = matrix62.getRows();
        com.operations.Matrix.Matrix matrix94 = com.operations.Matrix.MatrixOperations.subtract(matrix60, matrix62);
        org.junit.Assert.assertNotNull(matrix1);
        org.junit.Assert.assertNotNull(matrix5);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertArrayEquals(doubleArray8, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertArrayEquals(doubleArray11, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 2 + "'", int14 == 2);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 2 + "'", int15 == 2);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 2 + "'", int16 == 2);
        org.junit.Assert.assertNotNull(matrixArray17);
        org.junit.Assert.assertNotNull(matrix18);
        org.junit.Assert.assertNotNull(matrix20);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertArrayEquals(doubleArray25, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertArrayEquals(doubleArray28, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertArrayEquals(doubleArray37, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertArrayEquals(doubleArray40, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertNotNull(matrix45);
        org.junit.Assert.assertNotNull(matrix48);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 2 + "'", int49 == 2);
        org.junit.Assert.assertNotNull(matrix51);
        org.junit.Assert.assertNotNull(matrix54);
        org.junit.Assert.assertNotNull(matrix55);
        org.junit.Assert.assertNotNull(matrix56);
        org.junit.Assert.assertNotNull(matrix59);
        org.junit.Assert.assertNotNull(matrix60);
        org.junit.Assert.assertNotNull(matrix62);
        org.junit.Assert.assertNotNull(doubleArray65);
        org.junit.Assert.assertArrayEquals(doubleArray65, new double[] { 137.90576492663388d, (-1.0d) }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray66);
        org.junit.Assert.assertArrayEquals(doubleArray66, new double[] { (-24.931892522286255d), (-135.63701830716116d) }, 1.0E-15);
        org.junit.Assert.assertNotNull(matrix69);
        org.junit.Assert.assertNotNull(doubleArray72);
        org.junit.Assert.assertArrayEquals(doubleArray72, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray75);
        org.junit.Assert.assertArrayEquals(doubleArray75, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray76);
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + 2 + "'", int78 == 2);
        org.junit.Assert.assertTrue("'" + int79 + "' != '" + 2 + "'", int79 == 2);
        org.junit.Assert.assertTrue("'" + int80 + "' != '" + 2 + "'", int80 == 2);
        org.junit.Assert.assertNotNull(matrixArray81);
        org.junit.Assert.assertNotNull(matrix82);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
        org.junit.Assert.assertNotNull(doubleArray85);
        org.junit.Assert.assertNotNull(matrix87);
        org.junit.Assert.assertNotNull(doubleArray90);
        org.junit.Assert.assertArrayEquals(doubleArray90, new double[] { 137.90576492663388d, (-1.0d) }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray91);
        org.junit.Assert.assertArrayEquals(doubleArray91, new double[] { (-24.931892522286255d), (-135.63701830716116d) }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray92);
        org.junit.Assert.assertArrayEquals(doubleArray92, new double[] { (-24.931892522286255d), (-135.63701830716116d) }, 1.0E-15);
        org.junit.Assert.assertTrue("'" + int93 + "' != '" + 2 + "'", int93 == 2);
        org.junit.Assert.assertNotNull(matrix94);
    }

    @Test
    public void test3442() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3442");
        com.operations.Matrix.Matrix matrix1 = com.operations.Matrix.MatrixTransformations.rotate2D(33.52610922848042d);
        com.operations.Matrix.Matrix matrix2 = com.operations.Matrix.MatrixOperations.transpose(matrix1);
        org.junit.Assert.assertNotNull(matrix1);
        org.junit.Assert.assertNotNull(matrix2);
    }

    @Test
    public void test3443() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3443");
        com.operations.Matrix.Matrix matrix2 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0L, (double) (byte) 10);
        int int3 = matrix2.getRows();
        com.operations.Matrix.Matrix matrix5 = com.operations.Matrix.MatrixOperations.scalarMultiply(matrix2, (double) 2);
        double double6 = com.operations.Matrix.MatrixUtils.frobeniusNorm(matrix2);
        com.operations.Matrix.Matrix matrix9 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0L, (double) (byte) 10);
        int int10 = matrix9.getRows();
        com.operations.Matrix.Matrix matrix12 = com.operations.Matrix.MatrixOperations.scalarMultiply(matrix9, (double) 2);
        com.operations.Matrix.Matrix matrix13 = com.operations.Matrix.MatrixOperations.subtract(matrix2, matrix12);
        com.operations.Matrix.Matrix matrix15 = com.operations.Matrix.MatrixTransformations.rotate2D((double) (short) 100);
        double[] doubleArray18 = new double[] { 137.90576492663388d, (byte) -1 };
        double[] doubleArray19 = com.operations.Matrix.MatrixSolver.solveGaussian(matrix15, doubleArray18);
        com.operations.Matrix.Matrix matrix22 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0L, (double) (byte) 10);
        double[] doubleArray25 = new double[] { 10, 'a' };
        double[] doubleArray28 = new double[] { 10, 'a' };
        double[][] doubleArray29 = new double[][] { doubleArray25, doubleArray28 };
        com.operations.Matrix.Matrix matrix30 = new com.operations.Matrix.Matrix(doubleArray29);
        int int31 = matrix30.getCols();
        int int32 = matrix30.getCols();
        int int33 = matrix30.getCols();
        com.operations.Matrix.Matrix[] matrixArray34 = com.operations.Matrix.MatrixDecompositions.luDecomposition(matrix30);
        com.operations.Matrix.Matrix matrix35 = com.operations.Matrix.MatrixOperations.multiply(matrix22, matrix30);
        boolean boolean37 = com.operations.Matrix.MatrixUtils.compare(matrix15, matrix22, (double) (-1L));
        double[][] doubleArray38 = matrix15.getData();
        com.operations.Matrix.Matrix matrix41 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0L, (double) 10L);
        boolean boolean43 = com.operations.Matrix.MatrixUtils.compare(matrix15, matrix41, 146.4308710620817d);
        com.operations.Matrix.Matrix matrix44 = com.operations.Matrix.MatrixOperations.subtract(matrix13, matrix41);
        com.operations.Matrix.Matrix matrix47 = com.operations.Matrix.MatrixTransformations.project2D((double) 0L, (double) 0);
        com.operations.Matrix.Matrix[] matrixArray48 = com.operations.Matrix.MatrixDecompositions.luDecomposition(matrix47);
        com.operations.Matrix.Matrix matrix49 = com.operations.Matrix.MatrixOperations.transpose(matrix47);
        com.operations.Matrix.Matrix matrix50 = com.operations.Matrix.MatrixOperations.multiply(matrix41, matrix49);
        com.operations.Matrix.Matrix[] matrixArray51 = com.operations.Matrix.MatrixDecompositions.luDecomposition(matrix41);
        com.operations.Matrix.Matrix matrix54 = com.operations.Matrix.MatrixTransformations.scale2D(0.0d, 0.0d);
        com.operations.Matrix.Matrix matrix57 = com.operations.Matrix.MatrixTransformations.scale2D((double) 1, (-1.0d));
        com.operations.Matrix.Matrix matrix60 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0L, (double) (byte) 10);
        double[] doubleArray63 = new double[] { 10, 'a' };
        double[] doubleArray66 = new double[] { 10, 'a' };
        double[][] doubleArray67 = new double[][] { doubleArray63, doubleArray66 };
        com.operations.Matrix.Matrix matrix68 = new com.operations.Matrix.Matrix(doubleArray67);
        int int69 = matrix68.getCols();
        int int70 = matrix68.getCols();
        int int71 = matrix68.getCols();
        com.operations.Matrix.Matrix[] matrixArray72 = com.operations.Matrix.MatrixDecompositions.luDecomposition(matrix68);
        com.operations.Matrix.Matrix matrix73 = com.operations.Matrix.MatrixOperations.multiply(matrix60, matrix68);
        int int74 = matrix68.getRows();
        int int75 = matrix68.getCols();
        com.operations.Matrix.Matrix matrix78 = com.operations.Matrix.MatrixTransformations.project2D((double) (-1L), (double) (short) 100);
        com.operations.Matrix.Matrix matrix79 = com.operations.Matrix.MatrixOperations.subtract(matrix68, matrix78);
        com.operations.Matrix.Matrix matrix80 = com.operations.Matrix.MatrixOperations.add(matrix57, matrix79);
        com.operations.Matrix.Matrix matrix81 = com.operations.Matrix.MatrixOperations.add(matrix54, matrix57);
        com.operations.Matrix.Matrix matrix83 = com.operations.Matrix.MatrixOperations.scalarMultiply(matrix81, (double) (short) 10);
        boolean boolean85 = com.operations.Matrix.MatrixUtils.compare(matrix41, matrix81, 13376.859197883485d);
        org.junit.Assert.assertNotNull(matrix2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 2 + "'", int3 == 2);
        org.junit.Assert.assertNotNull(matrix5);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 10.0d + "'", double6 == 10.0d);
        org.junit.Assert.assertNotNull(matrix9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 2 + "'", int10 == 2);
        org.junit.Assert.assertNotNull(matrix12);
        org.junit.Assert.assertNotNull(matrix13);
        org.junit.Assert.assertNotNull(matrix15);
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertArrayEquals(doubleArray18, new double[] { 137.90576492663388d, (-1.0d) }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertArrayEquals(doubleArray19, new double[] { (-24.931892522286255d), (-135.63701830716116d) }, 1.0E-15);
        org.junit.Assert.assertNotNull(matrix22);
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertArrayEquals(doubleArray25, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertArrayEquals(doubleArray28, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 2 + "'", int31 == 2);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 2 + "'", int32 == 2);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 2 + "'", int33 == 2);
        org.junit.Assert.assertNotNull(matrixArray34);
        org.junit.Assert.assertNotNull(matrix35);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertNotNull(matrix41);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertNotNull(matrix44);
        org.junit.Assert.assertNotNull(matrix47);
        org.junit.Assert.assertNotNull(matrixArray48);
        org.junit.Assert.assertNotNull(matrix49);
        org.junit.Assert.assertNotNull(matrix50);
        org.junit.Assert.assertNotNull(matrixArray51);
        org.junit.Assert.assertNotNull(matrix54);
        org.junit.Assert.assertNotNull(matrix57);
        org.junit.Assert.assertNotNull(matrix60);
        org.junit.Assert.assertNotNull(doubleArray63);
        org.junit.Assert.assertArrayEquals(doubleArray63, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray66);
        org.junit.Assert.assertArrayEquals(doubleArray66, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray67);
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 2 + "'", int69 == 2);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 2 + "'", int70 == 2);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 2 + "'", int71 == 2);
        org.junit.Assert.assertNotNull(matrixArray72);
        org.junit.Assert.assertNotNull(matrix73);
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 2 + "'", int74 == 2);
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + 2 + "'", int75 == 2);
        org.junit.Assert.assertNotNull(matrix78);
        org.junit.Assert.assertNotNull(matrix79);
        org.junit.Assert.assertNotNull(matrix80);
        org.junit.Assert.assertNotNull(matrix81);
        org.junit.Assert.assertNotNull(matrix83);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + true + "'", boolean85 == true);
    }

    @Test
    public void test3444() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3444");
        com.operations.Matrix.Matrix matrix2 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0L, (double) (byte) 10);
        double[] doubleArray5 = new double[] { 10, 'a' };
        double[] doubleArray8 = new double[] { 10, 'a' };
        double[][] doubleArray9 = new double[][] { doubleArray5, doubleArray8 };
        com.operations.Matrix.Matrix matrix10 = new com.operations.Matrix.Matrix(doubleArray9);
        int int11 = matrix10.getCols();
        int int12 = matrix10.getCols();
        int int13 = matrix10.getCols();
        com.operations.Matrix.Matrix[] matrixArray14 = com.operations.Matrix.MatrixDecompositions.luDecomposition(matrix10);
        com.operations.Matrix.Matrix matrix15 = com.operations.Matrix.MatrixOperations.multiply(matrix2, matrix10);
        com.operations.Matrix.Matrix matrix17 = com.operations.Matrix.MatrixTransformations.rotate2D((double) (short) 100);
        boolean boolean19 = com.operations.Matrix.MatrixUtils.compare(matrix10, matrix17, (double) (byte) 0);
        com.operations.Matrix.Matrix matrix21 = com.operations.Matrix.MatrixTransformations.rotate2D((double) 1.0f);
        com.operations.Matrix.Matrix matrix24 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0L, (double) (byte) 10);
        int int25 = matrix24.getRows();
        com.operations.Matrix.Matrix matrix27 = com.operations.Matrix.MatrixOperations.scalarMultiply(matrix24, (double) 2);
        double double28 = com.operations.Matrix.MatrixUtils.frobeniusNorm(matrix24);
        com.operations.Matrix.Matrix matrix31 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0L, (double) (byte) 10);
        int int32 = matrix31.getRows();
        com.operations.Matrix.Matrix matrix34 = com.operations.Matrix.MatrixOperations.scalarMultiply(matrix31, (double) 2);
        com.operations.Matrix.Matrix matrix35 = com.operations.Matrix.MatrixOperations.subtract(matrix24, matrix34);
        com.operations.Matrix.Matrix matrix36 = com.operations.Matrix.MatrixOperations.add(matrix21, matrix34);
        double[] doubleArray39 = new double[] { 10, 'a' };
        double[] doubleArray42 = new double[] { 10, 'a' };
        double[][] doubleArray43 = new double[][] { doubleArray39, doubleArray42 };
        com.operations.Matrix.Matrix matrix44 = new com.operations.Matrix.Matrix(doubleArray43);
        int int45 = matrix44.getCols();
        int int46 = matrix44.getCols();
        int int47 = matrix44.getCols();
        com.operations.Matrix.Matrix matrix53 = com.operations.Matrix.MatrixUtils.generateRandomMatrix(100, (int) (byte) 1, (int) '#', (int) '#', 1L);
        double double56 = matrix53.getValue((int) '4', 0);
        double double57 = com.operations.Matrix.MatrixUtils.frobeniusNorm(matrix53);
        boolean boolean58 = com.operations.Matrix.MatrixUtils.isSquare(matrix53);
        boolean boolean60 = com.operations.Matrix.MatrixUtils.compare(matrix44, matrix53, (double) 100L);
        com.operations.Matrix.Matrix matrix62 = com.operations.Matrix.MatrixTransformations.rotate2D((double) (short) 100);
        double[] doubleArray65 = new double[] { 137.90576492663388d, (byte) -1 };
        double[] doubleArray66 = com.operations.Matrix.MatrixSolver.solveGaussian(matrix62, doubleArray65);
        com.operations.Matrix.Matrix matrix69 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0L, (double) (byte) 10);
        double[] doubleArray72 = new double[] { 10, 'a' };
        double[] doubleArray75 = new double[] { 10, 'a' };
        double[][] doubleArray76 = new double[][] { doubleArray72, doubleArray75 };
        com.operations.Matrix.Matrix matrix77 = new com.operations.Matrix.Matrix(doubleArray76);
        int int78 = matrix77.getCols();
        int int79 = matrix77.getCols();
        int int80 = matrix77.getCols();
        com.operations.Matrix.Matrix[] matrixArray81 = com.operations.Matrix.MatrixDecompositions.luDecomposition(matrix77);
        com.operations.Matrix.Matrix matrix82 = com.operations.Matrix.MatrixOperations.multiply(matrix69, matrix77);
        boolean boolean84 = com.operations.Matrix.MatrixUtils.compare(matrix62, matrix69, (double) (-1L));
        com.operations.Matrix.Matrix matrix85 = com.operations.Matrix.MatrixOperations.subtract(matrix44, matrix69);
        com.operations.Matrix.Matrix matrix86 = com.operations.Matrix.MatrixOperations.add(matrix34, matrix69);
        com.operations.Matrix.Matrix matrix87 = com.operations.Matrix.MatrixOperations.add(matrix17, matrix86);
        com.operations.Matrix.Matrix matrix88 = com.operations.Matrix.MatrixOperations.transpose(matrix86);
        matrix86.print();
        int int90 = matrix86.getCols();
        org.junit.Assert.assertNotNull(matrix2);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertArrayEquals(doubleArray5, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertArrayEquals(doubleArray8, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 2 + "'", int11 == 2);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 2 + "'", int12 == 2);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 2 + "'", int13 == 2);
        org.junit.Assert.assertNotNull(matrixArray14);
        org.junit.Assert.assertNotNull(matrix15);
        org.junit.Assert.assertNotNull(matrix17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(matrix21);
        org.junit.Assert.assertNotNull(matrix24);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 2 + "'", int25 == 2);
        org.junit.Assert.assertNotNull(matrix27);
        org.junit.Assert.assertTrue("'" + double28 + "' != '" + 10.0d + "'", double28 == 10.0d);
        org.junit.Assert.assertNotNull(matrix31);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 2 + "'", int32 == 2);
        org.junit.Assert.assertNotNull(matrix34);
        org.junit.Assert.assertNotNull(matrix35);
        org.junit.Assert.assertNotNull(matrix36);
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertArrayEquals(doubleArray39, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertArrayEquals(doubleArray42, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 2 + "'", int45 == 2);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 2 + "'", int46 == 2);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 2 + "'", int47 == 2);
        org.junit.Assert.assertNotNull(matrix53);
        org.junit.Assert.assertTrue("'" + double56 + "' != '" + 35.0d + "'", double56 == 35.0d);
        org.junit.Assert.assertTrue("'" + double57 + "' != '" + 350.0d + "'", double57 == 350.0d);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertNotNull(matrix62);
        org.junit.Assert.assertNotNull(doubleArray65);
        org.junit.Assert.assertArrayEquals(doubleArray65, new double[] { 137.90576492663388d, (-1.0d) }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray66);
        org.junit.Assert.assertArrayEquals(doubleArray66, new double[] { (-24.931892522286255d), (-135.63701830716116d) }, 1.0E-15);
        org.junit.Assert.assertNotNull(matrix69);
        org.junit.Assert.assertNotNull(doubleArray72);
        org.junit.Assert.assertArrayEquals(doubleArray72, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray75);
        org.junit.Assert.assertArrayEquals(doubleArray75, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray76);
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + 2 + "'", int78 == 2);
        org.junit.Assert.assertTrue("'" + int79 + "' != '" + 2 + "'", int79 == 2);
        org.junit.Assert.assertTrue("'" + int80 + "' != '" + 2 + "'", int80 == 2);
        org.junit.Assert.assertNotNull(matrixArray81);
        org.junit.Assert.assertNotNull(matrix82);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
        org.junit.Assert.assertNotNull(matrix85);
        org.junit.Assert.assertNotNull(matrix86);
        org.junit.Assert.assertNotNull(matrix87);
        org.junit.Assert.assertNotNull(matrix88);
        org.junit.Assert.assertTrue("'" + int90 + "' != '" + 2 + "'", int90 == 2);
    }

    @Test
    public void test3445() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3445");
        double[] doubleArray2 = new double[] { 10, 'a' };
        double[] doubleArray5 = new double[] { 10, 'a' };
        double[][] doubleArray6 = new double[][] { doubleArray2, doubleArray5 };
        com.operations.Matrix.Matrix matrix7 = new com.operations.Matrix.Matrix(doubleArray6);
        com.operations.Matrix.Matrix matrix8 = new com.operations.Matrix.Matrix(doubleArray6);
        com.operations.Matrix.Matrix matrix10 = com.operations.Matrix.MatrixTransformations.rotate2D((double) (short) 100);
        double[] doubleArray13 = new double[] { 137.90576492663388d, (byte) -1 };
        double[] doubleArray14 = com.operations.Matrix.MatrixSolver.solveGaussian(matrix10, doubleArray13);
        com.operations.Matrix.Matrix matrix15 = com.operations.Matrix.MatrixOperations.add(matrix8, matrix10);
        com.operations.Matrix.Matrix matrix16 = com.operations.Matrix.MatrixDecompositions.choleskyDecomposition(matrix8);
        boolean boolean17 = com.operations.Matrix.MatrixUtils.isSymmetric(matrix8);
        int int18 = matrix8.getRows();
        double double19 = com.operations.Matrix.MatrixUtils.frobeniusNorm(matrix8);
        int int20 = matrix8.getRows();
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertArrayEquals(doubleArray2, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertArrayEquals(doubleArray5, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertNotNull(matrix10);
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertArrayEquals(doubleArray13, new double[] { 137.90576492663388d, (-1.0d) }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertArrayEquals(doubleArray14, new double[] { (-24.931892522286255d), (-135.63701830716116d) }, 1.0E-15);
        org.junit.Assert.assertNotNull(matrix15);
        org.junit.Assert.assertNotNull(matrix16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 2 + "'", int18 == 2);
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 137.90576492663388d + "'", double19 == 137.90576492663388d);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 2 + "'", int20 == 2);
    }

    @Test
    public void test3446() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3446");
        com.operations.Matrix.Matrix matrix1 = com.operations.Matrix.MatrixTransformations.rotate2D(350.0d);
        com.operations.Matrix.Matrix matrix2 = com.operations.Matrix.MatrixDecompositions.choleskyDecomposition(matrix1);
        com.operations.Matrix.Matrix matrix4 = com.operations.Matrix.MatrixTransformations.rotate2D((double) 1.0f);
        com.operations.Matrix.Matrix matrix7 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0L, (double) (byte) 10);
        int int8 = matrix7.getRows();
        com.operations.Matrix.Matrix matrix10 = com.operations.Matrix.MatrixOperations.scalarMultiply(matrix7, (double) 2);
        double double11 = com.operations.Matrix.MatrixUtils.frobeniusNorm(matrix7);
        com.operations.Matrix.Matrix matrix14 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0L, (double) (byte) 10);
        int int15 = matrix14.getRows();
        com.operations.Matrix.Matrix matrix17 = com.operations.Matrix.MatrixOperations.scalarMultiply(matrix14, (double) 2);
        com.operations.Matrix.Matrix matrix18 = com.operations.Matrix.MatrixOperations.subtract(matrix7, matrix17);
        com.operations.Matrix.Matrix matrix19 = com.operations.Matrix.MatrixOperations.add(matrix4, matrix17);
        matrix4.print();
        com.operations.Matrix.Matrix matrix21 = com.operations.Matrix.MatrixDecompositions.choleskyDecomposition(matrix4);
        com.operations.Matrix.Matrix matrix22 = com.operations.Matrix.MatrixOperations.subtract(matrix2, matrix21);
        // The following exception was thrown during execution in test generation
        try {
            double double25 = matrix22.getValue((int) (byte) 10, 10);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(matrix1);
        org.junit.Assert.assertNotNull(matrix2);
        org.junit.Assert.assertNotNull(matrix4);
        org.junit.Assert.assertNotNull(matrix7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 2 + "'", int8 == 2);
        org.junit.Assert.assertNotNull(matrix10);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 10.0d + "'", double11 == 10.0d);
        org.junit.Assert.assertNotNull(matrix14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 2 + "'", int15 == 2);
        org.junit.Assert.assertNotNull(matrix17);
        org.junit.Assert.assertNotNull(matrix18);
        org.junit.Assert.assertNotNull(matrix19);
        org.junit.Assert.assertNotNull(matrix21);
        org.junit.Assert.assertNotNull(matrix22);
    }

    @Test
    public void test3447() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3447");
        com.operations.Matrix.Matrix matrix1 = com.operations.Matrix.MatrixTransformations.rotate2D((double) '4');
        double[] doubleArray4 = new double[] { 10, 'a' };
        double[] doubleArray7 = new double[] { 10, 'a' };
        double[][] doubleArray8 = new double[][] { doubleArray4, doubleArray7 };
        com.operations.Matrix.Matrix matrix9 = new com.operations.Matrix.Matrix(doubleArray8);
        com.operations.Matrix.Matrix matrix10 = new com.operations.Matrix.Matrix(doubleArray8);
        com.operations.Matrix.Matrix matrix12 = com.operations.Matrix.MatrixTransformations.rotate2D((double) (short) 100);
        double[] doubleArray15 = new double[] { 137.90576492663388d, (byte) -1 };
        double[] doubleArray16 = com.operations.Matrix.MatrixSolver.solveGaussian(matrix12, doubleArray15);
        com.operations.Matrix.Matrix matrix17 = com.operations.Matrix.MatrixOperations.add(matrix10, matrix12);
        boolean boolean18 = com.operations.Matrix.MatrixUtils.isSymmetric(matrix17);
        boolean boolean20 = com.operations.Matrix.MatrixUtils.compare(matrix1, matrix17, 364.0054944640259d);
        int int21 = matrix17.getCols();
        com.operations.Matrix.Matrix matrix24 = new com.operations.Matrix.Matrix((int) (short) 1, 0);
        boolean boolean26 = com.operations.Matrix.MatrixUtils.compare(matrix17, matrix24, (double) (byte) 10);
        com.operations.Matrix.Matrix[] matrixArray27 = com.operations.Matrix.MatrixDecompositions.luDecomposition(matrix17);
        com.operations.Matrix.Matrix matrix33 = com.operations.Matrix.MatrixUtils.generateRandomMatrix(35, 32, (-1), 35, (long) '#');
        double[] doubleArray36 = new double[] { 10, 'a' };
        double[] doubleArray39 = new double[] { 10, 'a' };
        double[][] doubleArray40 = new double[][] { doubleArray36, doubleArray39 };
        com.operations.Matrix.Matrix matrix41 = new com.operations.Matrix.Matrix(doubleArray40);
        int int42 = matrix41.getCols();
        int int43 = matrix41.getCols();
        int int44 = matrix41.getCols();
        com.operations.Matrix.Matrix matrix50 = com.operations.Matrix.MatrixUtils.generateRandomMatrix(100, (int) (byte) 1, (int) '#', (int) '#', 1L);
        double double53 = matrix50.getValue((int) '4', 0);
        double double54 = com.operations.Matrix.MatrixUtils.frobeniusNorm(matrix50);
        boolean boolean55 = com.operations.Matrix.MatrixUtils.isSquare(matrix50);
        boolean boolean57 = com.operations.Matrix.MatrixUtils.compare(matrix41, matrix50, (double) 100L);
        com.operations.Matrix.Matrix matrix59 = com.operations.Matrix.MatrixTransformations.rotate2D((double) (short) 100);
        double[] doubleArray62 = new double[] { 137.90576492663388d, (byte) -1 };
        double[] doubleArray63 = com.operations.Matrix.MatrixSolver.solveGaussian(matrix59, doubleArray62);
        com.operations.Matrix.Matrix matrix66 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0L, (double) (byte) 10);
        double[] doubleArray69 = new double[] { 10, 'a' };
        double[] doubleArray72 = new double[] { 10, 'a' };
        double[][] doubleArray73 = new double[][] { doubleArray69, doubleArray72 };
        com.operations.Matrix.Matrix matrix74 = new com.operations.Matrix.Matrix(doubleArray73);
        int int75 = matrix74.getCols();
        int int76 = matrix74.getCols();
        int int77 = matrix74.getCols();
        com.operations.Matrix.Matrix[] matrixArray78 = com.operations.Matrix.MatrixDecompositions.luDecomposition(matrix74);
        com.operations.Matrix.Matrix matrix79 = com.operations.Matrix.MatrixOperations.multiply(matrix66, matrix74);
        boolean boolean81 = com.operations.Matrix.MatrixUtils.compare(matrix59, matrix66, (double) (-1L));
        com.operations.Matrix.Matrix matrix82 = com.operations.Matrix.MatrixOperations.subtract(matrix41, matrix66);
        com.operations.Matrix.Matrix matrix83 = com.operations.Matrix.MatrixOperations.transpose(matrix41);
        matrix83.print();
        boolean boolean86 = com.operations.Matrix.MatrixUtils.compare(matrix33, matrix83, 12.751772028997056d);
        boolean boolean87 = com.operations.Matrix.MatrixUtils.isSymmetric(matrix83);
        com.operations.Matrix.Matrix matrix88 = com.operations.Matrix.MatrixOperations.subtract(matrix17, matrix83);
        // The following exception was thrown during execution in test generation
        try {
            matrix17.setValue((int) (short) -1, 10, 99.83621769912266d);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: Index -1 out of bounds for length 2");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(matrix1);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertArrayEquals(doubleArray4, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertArrayEquals(doubleArray7, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertNotNull(matrix12);
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertArrayEquals(doubleArray15, new double[] { 137.90576492663388d, (-1.0d) }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertArrayEquals(doubleArray16, new double[] { (-24.931892522286255d), (-135.63701830716116d) }, 1.0E-15);
        org.junit.Assert.assertNotNull(matrix17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 2 + "'", int21 == 2);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(matrixArray27);
        org.junit.Assert.assertNotNull(matrix33);
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertArrayEquals(doubleArray36, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertArrayEquals(doubleArray39, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 2 + "'", int42 == 2);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 2 + "'", int43 == 2);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 2 + "'", int44 == 2);
        org.junit.Assert.assertNotNull(matrix50);
        org.junit.Assert.assertTrue("'" + double53 + "' != '" + 35.0d + "'", double53 == 35.0d);
        org.junit.Assert.assertTrue("'" + double54 + "' != '" + 350.0d + "'", double54 == 350.0d);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNotNull(matrix59);
        org.junit.Assert.assertNotNull(doubleArray62);
        org.junit.Assert.assertArrayEquals(doubleArray62, new double[] { 137.90576492663388d, (-1.0d) }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray63);
        org.junit.Assert.assertArrayEquals(doubleArray63, new double[] { (-24.931892522286255d), (-135.63701830716116d) }, 1.0E-15);
        org.junit.Assert.assertNotNull(matrix66);
        org.junit.Assert.assertNotNull(doubleArray69);
        org.junit.Assert.assertArrayEquals(doubleArray69, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray72);
        org.junit.Assert.assertArrayEquals(doubleArray72, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray73);
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + 2 + "'", int75 == 2);
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 2 + "'", int76 == 2);
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + 2 + "'", int77 == 2);
        org.junit.Assert.assertNotNull(matrixArray78);
        org.junit.Assert.assertNotNull(matrix79);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
        org.junit.Assert.assertNotNull(matrix82);
        org.junit.Assert.assertNotNull(matrix83);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + false + "'", boolean87 == false);
        org.junit.Assert.assertNotNull(matrix88);
    }

    @Test
    public void test3448() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3448");
        com.operations.Matrix.Matrix matrix2 = com.operations.Matrix.MatrixTransformations.project2D(1040.0d, (double) (byte) 10);
        matrix2.print();
        int int4 = matrix2.getRows();
        org.junit.Assert.assertNotNull(matrix2);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 2 + "'", int4 == 2);
    }

    @Test
    public void test3449() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3449");
        com.operations.Matrix.Matrix matrix4 = com.operations.Matrix.MatrixUtils.generateRandomMatrix((int) (short) 1, (int) (byte) 100, (int) (short) -1, 52);
        org.junit.Assert.assertNotNull(matrix4);
    }

    @Test
    public void test3450() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3450");
        // The following exception was thrown during execution in test generation
        try {
            com.operations.Matrix.Matrix matrix5 = com.operations.Matrix.MatrixUtils.generateRandomMatrix((int) ' ', (-1), (int) 'a', 100, (long) (byte) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.NegativeArraySizeException; message: -1");
        } catch (java.lang.NegativeArraySizeException e) {
            // Expected exception.
        }
    }

    @Test
    public void test3451() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3451");
        // The following exception was thrown during execution in test generation
        try {
            com.operations.Matrix.Matrix matrix5 = com.operations.Matrix.MatrixUtils.generateRandomMatrix((int) (byte) -1, 2, 100, 0, (long) (byte) 10);
            org.junit.Assert.fail("Expected exception of type java.lang.NegativeArraySizeException; message: -1");
        } catch (java.lang.NegativeArraySizeException e) {
            // Expected exception.
        }
    }

    @Test
    public void test3452() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3452");
        com.operations.Matrix.Matrix matrix2 = com.operations.Matrix.MatrixTransformations.scale2D(100.0d, 0.0d);
        // The following exception was thrown during execution in test generation
        try {
            com.operations.Matrix.Matrix matrix3 = com.operations.Matrix.MatrixDecompositions.choleskyDecomposition(matrix2);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Matrix is not positive definite.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(matrix2);
    }

    @Test
    public void test3453() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3453");
        com.operations.Matrix.Matrix matrix2 = com.operations.Matrix.MatrixTransformations.scale2D(350.0d, (double) ' ');
        boolean boolean3 = com.operations.Matrix.MatrixUtils.isSquare(matrix2);
        // The following exception was thrown during execution in test generation
        try {
            double double6 = matrix2.getValue((int) '#', 10);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(matrix2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
    }

    @Test
    public void test3454() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3454");
        com.operations.Matrix.Matrix matrix2 = com.operations.Matrix.MatrixTransformations.scale2D(10.0d, 0.0d);
        com.operations.Matrix.Matrix matrix5 = new com.operations.Matrix.Matrix(100, 10);
        // The following exception was thrown during execution in test generation
        try {
            com.operations.Matrix.Matrix matrix6 = com.operations.Matrix.MatrixOperations.subtract(matrix2, matrix5);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Matrices must have the same dimensions for subtraction.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(matrix2);
    }

    @Test
    public void test3455() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3455");
        double[] doubleArray2 = new double[] { 10, 'a' };
        double[] doubleArray5 = new double[] { 10, 'a' };
        double[][] doubleArray6 = new double[][] { doubleArray2, doubleArray5 };
        com.operations.Matrix.Matrix matrix7 = new com.operations.Matrix.Matrix(doubleArray6);
        com.operations.Matrix.Matrix matrix8 = new com.operations.Matrix.Matrix(doubleArray6);
        boolean boolean9 = com.operations.Matrix.MatrixUtils.isSquare(matrix8);
        double[] doubleArray12 = new double[] { 10, 'a' };
        double[] doubleArray15 = new double[] { 10, 'a' };
        double[][] doubleArray16 = new double[][] { doubleArray12, doubleArray15 };
        com.operations.Matrix.Matrix matrix17 = new com.operations.Matrix.Matrix(doubleArray16);
        int int18 = matrix17.getCols();
        int int19 = matrix17.getCols();
        matrix17.print();
        double[] doubleArray23 = new double[] { 10, 'a' };
        double[] doubleArray26 = new double[] { 10, 'a' };
        double[][] doubleArray27 = new double[][] { doubleArray23, doubleArray26 };
        com.operations.Matrix.Matrix matrix28 = new com.operations.Matrix.Matrix(doubleArray27);
        boolean boolean30 = com.operations.Matrix.MatrixUtils.compare(matrix17, matrix28, (double) (-1));
        com.operations.Matrix.Matrix matrix31 = com.operations.Matrix.MatrixOperations.subtract(matrix8, matrix28);
        com.operations.Matrix.Matrix matrix33 = com.operations.Matrix.MatrixOperations.scalarMultiply(matrix8, (double) 0.0f);
        int int34 = matrix8.getCols();
        double[] doubleArray37 = new double[] { 10, 'a' };
        double[] doubleArray40 = new double[] { 10, 'a' };
        double[][] doubleArray41 = new double[][] { doubleArray37, doubleArray40 };
        com.operations.Matrix.Matrix matrix42 = new com.operations.Matrix.Matrix(doubleArray41);
        com.operations.Matrix.Matrix matrix43 = new com.operations.Matrix.Matrix(doubleArray41);
        com.operations.Matrix.Matrix matrix44 = new com.operations.Matrix.Matrix(doubleArray41);
        com.operations.Matrix.Matrix matrix45 = com.operations.Matrix.MatrixOperations.multiply(matrix8, matrix44);
        com.operations.Matrix.Matrix matrix46 = com.operations.Matrix.MatrixDecompositions.choleskyDecomposition(matrix44);
        com.operations.Matrix.Matrix matrix52 = com.operations.Matrix.MatrixUtils.generateRandomMatrix(1, (int) ' ', (int) (short) 0, (int) (byte) -1, (long) ' ');
        boolean boolean54 = com.operations.Matrix.MatrixUtils.compare(matrix44, matrix52, 391.8840992892044d);
        int int55 = matrix44.getCols();
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertArrayEquals(doubleArray2, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertArrayEquals(doubleArray5, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertArrayEquals(doubleArray12, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertArrayEquals(doubleArray15, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 2 + "'", int18 == 2);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 2 + "'", int19 == 2);
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertArrayEquals(doubleArray23, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertArrayEquals(doubleArray26, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(matrix31);
        org.junit.Assert.assertNotNull(matrix33);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 2 + "'", int34 == 2);
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertArrayEquals(doubleArray37, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertArrayEquals(doubleArray40, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertNotNull(matrix45);
        org.junit.Assert.assertNotNull(matrix46);
        org.junit.Assert.assertNotNull(matrix52);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 2 + "'", int55 == 2);
    }

    @Test
    public void test3456() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3456");
        // The following exception was thrown during execution in test generation
        try {
            com.operations.Matrix.Matrix matrix4 = com.operations.Matrix.MatrixUtils.generateRandomMatrix(0, 10, (int) (byte) 0, (int) (byte) 10);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
    }

    @Test
    public void test3457() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3457");
        double[] doubleArray2 = new double[] { 10, 'a' };
        double[] doubleArray5 = new double[] { 10, 'a' };
        double[][] doubleArray6 = new double[][] { doubleArray2, doubleArray5 };
        com.operations.Matrix.Matrix matrix7 = new com.operations.Matrix.Matrix(doubleArray6);
        com.operations.Matrix.Matrix matrix8 = new com.operations.Matrix.Matrix(doubleArray6);
        com.operations.Matrix.Matrix matrix10 = com.operations.Matrix.MatrixTransformations.rotate2D((double) (short) 100);
        double[] doubleArray13 = new double[] { 137.90576492663388d, (byte) -1 };
        double[] doubleArray14 = com.operations.Matrix.MatrixSolver.solveGaussian(matrix10, doubleArray13);
        com.operations.Matrix.Matrix matrix15 = com.operations.Matrix.MatrixOperations.add(matrix8, matrix10);
        com.operations.Matrix.Matrix matrix16 = com.operations.Matrix.MatrixOperations.transpose(matrix10);
        int int17 = matrix10.getCols();
        int int18 = matrix10.getRows();
        double[] doubleArray21 = new double[] { 10, 'a' };
        double[] doubleArray24 = new double[] { 10, 'a' };
        double[][] doubleArray25 = new double[][] { doubleArray21, doubleArray24 };
        com.operations.Matrix.Matrix matrix26 = new com.operations.Matrix.Matrix(doubleArray25);
        int int27 = matrix26.getCols();
        int int28 = matrix26.getCols();
        matrix26.print();
        double[] doubleArray32 = new double[] { 10, 'a' };
        double[] doubleArray35 = new double[] { 10, 'a' };
        double[][] doubleArray36 = new double[][] { doubleArray32, doubleArray35 };
        com.operations.Matrix.Matrix matrix37 = new com.operations.Matrix.Matrix(doubleArray36);
        boolean boolean39 = com.operations.Matrix.MatrixUtils.compare(matrix26, matrix37, (double) (-1));
        com.operations.Matrix.Matrix matrix40 = com.operations.Matrix.MatrixOperations.multiply(matrix10, matrix26);
        double double43 = matrix10.getValue((int) (short) 0, 0);
        com.operations.Matrix.Matrix matrix45 = com.operations.Matrix.MatrixOperations.scalarMultiply(matrix10, (double) (short) -1);
        double double46 = com.operations.Matrix.MatrixUtils.frobeniusNorm(matrix45);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertArrayEquals(doubleArray2, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertArrayEquals(doubleArray5, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertNotNull(matrix10);
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertArrayEquals(doubleArray13, new double[] { 137.90576492663388d, (-1.0d) }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertArrayEquals(doubleArray14, new double[] { (-24.931892522286255d), (-135.63701830716116d) }, 1.0E-15);
        org.junit.Assert.assertNotNull(matrix15);
        org.junit.Assert.assertNotNull(matrix16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 2 + "'", int17 == 2);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 2 + "'", int18 == 2);
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertArrayEquals(doubleArray21, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertArrayEquals(doubleArray24, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 2 + "'", int27 == 2);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 2 + "'", int28 == 2);
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertArrayEquals(doubleArray32, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertArrayEquals(doubleArray35, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(matrix40);
        org.junit.Assert.assertTrue("'" + double43 + "' != '" + (-0.1736481776669303d) + "'", double43 == (-0.1736481776669303d));
        org.junit.Assert.assertNotNull(matrix45);
        org.junit.Assert.assertTrue("'" + double46 + "' != '" + 1.414213562373095d + "'", double46 == 1.414213562373095d);
    }

    @Test
    public void test3458() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3458");
        com.operations.Matrix.Matrix matrix2 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0L, (double) (byte) 10);
        double[] doubleArray5 = new double[] { 10, 'a' };
        double[] doubleArray8 = new double[] { 10, 'a' };
        double[][] doubleArray9 = new double[][] { doubleArray5, doubleArray8 };
        com.operations.Matrix.Matrix matrix10 = new com.operations.Matrix.Matrix(doubleArray9);
        int int11 = matrix10.getCols();
        int int12 = matrix10.getCols();
        int int13 = matrix10.getCols();
        com.operations.Matrix.Matrix[] matrixArray14 = com.operations.Matrix.MatrixDecompositions.luDecomposition(matrix10);
        com.operations.Matrix.Matrix matrix15 = com.operations.Matrix.MatrixOperations.multiply(matrix2, matrix10);
        com.operations.Matrix.Matrix matrix17 = com.operations.Matrix.MatrixTransformations.rotate2D((double) (short) 100);
        boolean boolean19 = com.operations.Matrix.MatrixUtils.compare(matrix10, matrix17, (double) (byte) 0);
        double[] doubleArray22 = new double[] { 10, 'a' };
        double[] doubleArray25 = new double[] { 10, 'a' };
        double[][] doubleArray26 = new double[][] { doubleArray22, doubleArray25 };
        com.operations.Matrix.Matrix matrix27 = new com.operations.Matrix.Matrix(doubleArray26);
        com.operations.Matrix.Matrix matrix28 = com.operations.Matrix.MatrixOperations.multiply(matrix10, matrix27);
        com.operations.Matrix.Matrix matrix30 = com.operations.Matrix.MatrixOperations.scalarMultiply(matrix10, 364.0054944640259d);
        int int31 = matrix30.getRows();
        // The following exception was thrown during execution in test generation
        try {
            double double34 = matrix30.getValue(100, 100);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(matrix2);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertArrayEquals(doubleArray5, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertArrayEquals(doubleArray8, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 2 + "'", int11 == 2);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 2 + "'", int12 == 2);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 2 + "'", int13 == 2);
        org.junit.Assert.assertNotNull(matrixArray14);
        org.junit.Assert.assertNotNull(matrix15);
        org.junit.Assert.assertNotNull(matrix17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertArrayEquals(doubleArray22, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertArrayEquals(doubleArray25, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertNotNull(matrix28);
        org.junit.Assert.assertNotNull(matrix30);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 2 + "'", int31 == 2);
    }

    @Test
    public void test3459() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3459");
        com.operations.Matrix.Matrix matrix4 = com.operations.Matrix.MatrixUtils.generateRandomMatrix(100, (int) '#', (int) (short) 0, (int) (short) 1);
        com.operations.Matrix.Matrix matrix5 = com.operations.Matrix.MatrixOperations.transpose(matrix4);
        org.junit.Assert.assertNotNull(matrix4);
        org.junit.Assert.assertNotNull(matrix5);
    }

    @Test
    public void test3460() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3460");
        com.operations.Matrix.Matrix matrix1 = com.operations.Matrix.MatrixTransformations.rotate2D((double) (byte) 100);
        double double2 = com.operations.Matrix.MatrixUtils.frobeniusNorm(matrix1);
        com.operations.Matrix.Matrix matrix5 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0.0f, (double) (-1));
        com.operations.Matrix.Matrix matrix8 = com.operations.Matrix.MatrixTransformations.scale2D(146.4308710620817d, (double) 10L);
        com.operations.Matrix.Matrix matrix9 = com.operations.Matrix.MatrixOperations.multiply(matrix5, matrix8);
        com.operations.Matrix.Matrix matrix11 = com.operations.Matrix.MatrixTransformations.rotate2D((double) 1.0f);
        com.operations.Matrix.Matrix matrix14 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0L, (double) (byte) 10);
        int int15 = matrix14.getRows();
        com.operations.Matrix.Matrix matrix17 = com.operations.Matrix.MatrixOperations.scalarMultiply(matrix14, (double) 2);
        double double18 = com.operations.Matrix.MatrixUtils.frobeniusNorm(matrix14);
        com.operations.Matrix.Matrix matrix21 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0L, (double) (byte) 10);
        int int22 = matrix21.getRows();
        com.operations.Matrix.Matrix matrix24 = com.operations.Matrix.MatrixOperations.scalarMultiply(matrix21, (double) 2);
        com.operations.Matrix.Matrix matrix25 = com.operations.Matrix.MatrixOperations.subtract(matrix14, matrix24);
        com.operations.Matrix.Matrix matrix26 = com.operations.Matrix.MatrixOperations.add(matrix11, matrix24);
        matrix11.print();
        double[] doubleArray30 = new double[] { 10, 'a' };
        double[] doubleArray33 = new double[] { 10, 'a' };
        double[][] doubleArray34 = new double[][] { doubleArray30, doubleArray33 };
        com.operations.Matrix.Matrix matrix35 = new com.operations.Matrix.Matrix(doubleArray34);
        com.operations.Matrix.Matrix matrix36 = com.operations.Matrix.MatrixOperations.transpose(matrix35);
        com.operations.Matrix.Matrix matrix39 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0L, (double) (byte) 10);
        int int40 = matrix39.getRows();
        com.operations.Matrix.Matrix matrix46 = com.operations.Matrix.MatrixUtils.generateRandomMatrix(100, (int) (byte) 1, (int) '#', (int) '#', 1L);
        boolean boolean48 = com.operations.Matrix.MatrixUtils.compare(matrix39, matrix46, (double) 1.0f);
        com.operations.Matrix.Matrix matrix50 = com.operations.Matrix.MatrixOperations.scalarMultiply(matrix39, (double) 1L);
        matrix39.print();
        com.operations.Matrix.Matrix matrix52 = com.operations.Matrix.MatrixOperations.multiply(matrix36, matrix39);
        com.operations.Matrix.Matrix matrix53 = com.operations.Matrix.MatrixOperations.multiply(matrix11, matrix39);
        com.operations.Matrix.Matrix matrix54 = com.operations.Matrix.MatrixOperations.subtract(matrix5, matrix39);
        com.operations.Matrix.Matrix matrix55 = com.operations.Matrix.MatrixOperations.subtract(matrix1, matrix5);
        com.operations.Matrix.Matrix matrix57 = com.operations.Matrix.MatrixTransformations.rotate2D((double) (-1L));
        com.operations.Matrix.Matrix matrix59 = com.operations.Matrix.MatrixTransformations.rotate2D((double) (short) 100);
        double[] doubleArray62 = new double[] { 137.90576492663388d, (byte) -1 };
        double[] doubleArray63 = com.operations.Matrix.MatrixSolver.solveGaussian(matrix59, doubleArray62);
        double[] doubleArray64 = com.operations.Matrix.MatrixSolver.solveGaussian(matrix57, doubleArray62);
        com.operations.Matrix.Matrix matrix65 = com.operations.Matrix.MatrixOperations.add(matrix1, matrix57);
        boolean boolean66 = com.operations.Matrix.MatrixUtils.isSquare(matrix65);
        int int67 = matrix65.getRows();
        com.operations.Matrix.Matrix matrix69 = com.operations.Matrix.MatrixOperations.scalarMultiply(matrix65, (double) (byte) 10);
        com.operations.Matrix.Matrix matrix71 = com.operations.Matrix.MatrixOperations.scalarMultiply(matrix65, 52.009614495783374d);
        // The following exception was thrown during execution in test generation
        try {
            matrix71.setValue(35, (int) '#', 32.524725901652594d);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: Index 35 out of bounds for length 2");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(matrix1);
        org.junit.Assert.assertTrue("'" + double2 + "' != '" + 1.414213562373095d + "'", double2 == 1.414213562373095d);
        org.junit.Assert.assertNotNull(matrix5);
        org.junit.Assert.assertNotNull(matrix8);
        org.junit.Assert.assertNotNull(matrix9);
        org.junit.Assert.assertNotNull(matrix11);
        org.junit.Assert.assertNotNull(matrix14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 2 + "'", int15 == 2);
        org.junit.Assert.assertNotNull(matrix17);
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 10.0d + "'", double18 == 10.0d);
        org.junit.Assert.assertNotNull(matrix21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 2 + "'", int22 == 2);
        org.junit.Assert.assertNotNull(matrix24);
        org.junit.Assert.assertNotNull(matrix25);
        org.junit.Assert.assertNotNull(matrix26);
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertArrayEquals(doubleArray30, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertArrayEquals(doubleArray33, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertNotNull(matrix36);
        org.junit.Assert.assertNotNull(matrix39);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 2 + "'", int40 == 2);
        org.junit.Assert.assertNotNull(matrix46);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(matrix50);
        org.junit.Assert.assertNotNull(matrix52);
        org.junit.Assert.assertNotNull(matrix53);
        org.junit.Assert.assertNotNull(matrix54);
        org.junit.Assert.assertNotNull(matrix55);
        org.junit.Assert.assertNotNull(matrix57);
        org.junit.Assert.assertNotNull(matrix59);
        org.junit.Assert.assertNotNull(doubleArray62);
        org.junit.Assert.assertArrayEquals(doubleArray62, new double[] { 137.90576492663388d, (-1.0d) }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray63);
        org.junit.Assert.assertArrayEquals(doubleArray63, new double[] { (-24.931892522286255d), (-135.63701830716116d) }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray64);
        org.junit.Assert.assertArrayEquals(doubleArray64, new double[] { 137.90221361711127d, 1.4069397643877004d }, 1.0E-15);
        org.junit.Assert.assertNotNull(matrix65);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + true + "'", boolean66 == true);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 2 + "'", int67 == 2);
        org.junit.Assert.assertNotNull(matrix69);
        org.junit.Assert.assertNotNull(matrix71);
    }

    @Test
    public void test3461() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3461");
        com.operations.Matrix.Matrix matrix2 = com.operations.Matrix.MatrixTransformations.scale2D(52.952809179494906d, 1.414213562373095d);
        int int3 = matrix2.getCols();
        org.junit.Assert.assertNotNull(matrix2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 2 + "'", int3 == 2);
    }

    @Test
    public void test3462() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3462");
        com.operations.Matrix.Matrix matrix1 = com.operations.Matrix.MatrixTransformations.rotate2D(350.0d);
        boolean boolean2 = com.operations.Matrix.MatrixUtils.isSquare(matrix1);
        matrix1.print();
        boolean boolean4 = com.operations.Matrix.MatrixUtils.isSquare(matrix1);
        org.junit.Assert.assertNotNull(matrix1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
    }

    @Test
    public void test3463() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3463");
        double[] doubleArray2 = new double[] { 10, 'a' };
        double[] doubleArray5 = new double[] { 10, 'a' };
        double[][] doubleArray6 = new double[][] { doubleArray2, doubleArray5 };
        com.operations.Matrix.Matrix matrix7 = new com.operations.Matrix.Matrix(doubleArray6);
        int int8 = matrix7.getCols();
        int int9 = matrix7.getCols();
        boolean boolean10 = com.operations.Matrix.MatrixUtils.isSquare(matrix7);
        com.operations.Matrix.Matrix matrix11 = com.operations.Matrix.MatrixDecompositions.choleskyDecomposition(matrix7);
        double double12 = com.operations.Matrix.MatrixUtils.frobeniusNorm(matrix11);
        com.operations.Matrix.Matrix[] matrixArray13 = com.operations.Matrix.MatrixDecompositions.luDecomposition(matrix11);
        com.operations.Matrix.Matrix matrix15 = com.operations.Matrix.MatrixOperations.scalarMultiply(matrix11, 263.29311316552224d);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertArrayEquals(doubleArray2, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertArrayEquals(doubleArray5, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 2 + "'", int8 == 2);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 2 + "'", int9 == 2);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(matrix11);
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 10.344080432788601d + "'", double12 == 10.344080432788601d);
        org.junit.Assert.assertNotNull(matrixArray13);
        org.junit.Assert.assertNotNull(matrix15);
    }

    @Test
    public void test3464() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3464");
        com.operations.Matrix.Matrix matrix2 = new com.operations.Matrix.Matrix((int) '4', (int) ' ');
        double[][] doubleArray3 = matrix2.getData();
        com.operations.Matrix.Matrix matrix4 = new com.operations.Matrix.Matrix(doubleArray3);
        org.junit.Assert.assertNotNull(doubleArray3);
    }

    @Test
    public void test3465() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3465");
        com.operations.Matrix.Matrix matrix2 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0L, (double) (byte) 10);
        double[] doubleArray5 = new double[] { 10, 'a' };
        double[] doubleArray8 = new double[] { 10, 'a' };
        double[][] doubleArray9 = new double[][] { doubleArray5, doubleArray8 };
        com.operations.Matrix.Matrix matrix10 = new com.operations.Matrix.Matrix(doubleArray9);
        int int11 = matrix10.getCols();
        int int12 = matrix10.getCols();
        int int13 = matrix10.getCols();
        com.operations.Matrix.Matrix[] matrixArray14 = com.operations.Matrix.MatrixDecompositions.luDecomposition(matrix10);
        com.operations.Matrix.Matrix matrix15 = com.operations.Matrix.MatrixOperations.multiply(matrix2, matrix10);
        com.operations.Matrix.Matrix matrix17 = com.operations.Matrix.MatrixTransformations.rotate2D((double) (short) 100);
        boolean boolean19 = com.operations.Matrix.MatrixUtils.compare(matrix10, matrix17, (double) (byte) 0);
        com.operations.Matrix.Matrix[] matrixArray20 = com.operations.Matrix.MatrixDecompositions.luDecomposition(matrix10);
        com.operations.Matrix.Matrix matrix21 = com.operations.Matrix.MatrixOperations.transpose(matrix10);
        com.operations.Matrix.Matrix matrix23 = com.operations.Matrix.MatrixTransformations.rotate2D(35.0d);
        com.operations.Matrix.Matrix matrix24 = com.operations.Matrix.MatrixOperations.subtract(matrix21, matrix23);
        com.operations.Matrix.Matrix matrix27 = com.operations.Matrix.MatrixTransformations.scale2D((double) (-1L), (double) '4');
        com.operations.Matrix.Matrix matrix28 = com.operations.Matrix.MatrixOperations.transpose(matrix27);
        com.operations.Matrix.Matrix matrix29 = com.operations.Matrix.MatrixOperations.subtract(matrix23, matrix27);
        boolean boolean30 = com.operations.Matrix.MatrixUtils.isSymmetric(matrix29);
        com.operations.Matrix.Matrix matrix33 = com.operations.Matrix.MatrixTransformations.project2D(1363.6076983299943d, (double) 52);
        com.operations.Matrix.Matrix matrix34 = com.operations.Matrix.MatrixDecompositions.choleskyDecomposition(matrix33);
        com.operations.Matrix.Matrix matrix35 = com.operations.Matrix.MatrixOperations.multiply(matrix29, matrix34);
        com.operations.Matrix.Matrix matrix36 = null;
        // The following exception was thrown during execution in test generation
        try {
            com.operations.Matrix.Matrix matrix37 = com.operations.Matrix.MatrixOperations.multiply(matrix35, matrix36);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(matrix2);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertArrayEquals(doubleArray5, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertArrayEquals(doubleArray8, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 2 + "'", int11 == 2);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 2 + "'", int12 == 2);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 2 + "'", int13 == 2);
        org.junit.Assert.assertNotNull(matrixArray14);
        org.junit.Assert.assertNotNull(matrix15);
        org.junit.Assert.assertNotNull(matrix17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(matrixArray20);
        org.junit.Assert.assertNotNull(matrix21);
        org.junit.Assert.assertNotNull(matrix23);
        org.junit.Assert.assertNotNull(matrix24);
        org.junit.Assert.assertNotNull(matrix27);
        org.junit.Assert.assertNotNull(matrix28);
        org.junit.Assert.assertNotNull(matrix29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(matrix33);
        org.junit.Assert.assertNotNull(matrix34);
        org.junit.Assert.assertNotNull(matrix35);
    }

    @Test
    public void test3466() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3466");
        com.operations.Matrix.Matrix matrix2 = new com.operations.Matrix.Matrix((int) '4', 1);
        matrix2.setValue(0, 0, 1.6135503908876414d);
    }

    @Test
    public void test3467() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3467");
        com.operations.Matrix.Matrix matrix2 = new com.operations.Matrix.Matrix(0, 35);
    }

    @Test
    public void test3468() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3468");
        com.operations.Matrix.Matrix matrix2 = com.operations.Matrix.MatrixTransformations.scale2D(1.414213562373095d, (double) 0L);
        com.operations.Matrix.Matrix[] matrixArray3 = com.operations.Matrix.MatrixDecompositions.luDecomposition(matrix2);
        boolean boolean4 = com.operations.Matrix.MatrixUtils.isSquare(matrix2);
        org.junit.Assert.assertNotNull(matrix2);
        org.junit.Assert.assertNotNull(matrixArray3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
    }

    @Test
    public void test3469() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3469");
        com.operations.Matrix.Matrix matrix2 = com.operations.Matrix.MatrixTransformations.scale2D((double) (-1L), 11.489125293076057d);
        org.junit.Assert.assertNotNull(matrix2);
    }

    @Test
    public void test3470() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3470");
        // The following exception was thrown during execution in test generation
        try {
            com.operations.Matrix.Matrix matrix4 = com.operations.Matrix.MatrixUtils.generateRandomMatrix(0, 0, 97, (int) (short) 1);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
    }

    @Test
    public void test3471() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3471");
        com.operations.Matrix.Matrix matrix2 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0L, (double) (byte) 10);
        double[] doubleArray5 = new double[] { 10, 'a' };
        double[] doubleArray8 = new double[] { 10, 'a' };
        double[][] doubleArray9 = new double[][] { doubleArray5, doubleArray8 };
        com.operations.Matrix.Matrix matrix10 = new com.operations.Matrix.Matrix(doubleArray9);
        int int11 = matrix10.getCols();
        int int12 = matrix10.getCols();
        int int13 = matrix10.getCols();
        com.operations.Matrix.Matrix[] matrixArray14 = com.operations.Matrix.MatrixDecompositions.luDecomposition(matrix10);
        com.operations.Matrix.Matrix matrix15 = com.operations.Matrix.MatrixOperations.multiply(matrix2, matrix10);
        com.operations.Matrix.Matrix matrix17 = com.operations.Matrix.MatrixTransformations.rotate2D((double) (short) 100);
        boolean boolean19 = com.operations.Matrix.MatrixUtils.compare(matrix10, matrix17, (double) (byte) 0);
        com.operations.Matrix.Matrix[] matrixArray20 = com.operations.Matrix.MatrixDecompositions.luDecomposition(matrix10);
        com.operations.Matrix.Matrix matrix21 = com.operations.Matrix.MatrixOperations.transpose(matrix10);
        com.operations.Matrix.Matrix matrix24 = com.operations.Matrix.MatrixTransformations.scale2D((double) 1.0f, (double) 1);
        com.operations.Matrix.Matrix matrix26 = com.operations.Matrix.MatrixTransformations.rotate2D((double) 1.0f);
        com.operations.Matrix.Matrix matrix29 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0L, (double) (byte) 10);
        int int30 = matrix29.getRows();
        com.operations.Matrix.Matrix matrix32 = com.operations.Matrix.MatrixOperations.scalarMultiply(matrix29, (double) 2);
        double double33 = com.operations.Matrix.MatrixUtils.frobeniusNorm(matrix29);
        com.operations.Matrix.Matrix matrix36 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0L, (double) (byte) 10);
        int int37 = matrix36.getRows();
        com.operations.Matrix.Matrix matrix39 = com.operations.Matrix.MatrixOperations.scalarMultiply(matrix36, (double) 2);
        com.operations.Matrix.Matrix matrix40 = com.operations.Matrix.MatrixOperations.subtract(matrix29, matrix39);
        com.operations.Matrix.Matrix matrix41 = com.operations.Matrix.MatrixOperations.add(matrix26, matrix39);
        boolean boolean43 = com.operations.Matrix.MatrixUtils.compare(matrix24, matrix26, (double) (byte) -1);
        com.operations.Matrix.Matrix matrix44 = com.operations.Matrix.MatrixOperations.subtract(matrix21, matrix24);
        double double45 = com.operations.Matrix.MatrixUtils.frobeniusNorm(matrix44);
        com.operations.Matrix.Matrix matrix47 = com.operations.Matrix.MatrixTransformations.rotate2D(100.0d);
        int int48 = matrix47.getCols();
        int int49 = matrix47.getRows();
        com.operations.Matrix.Matrix matrix50 = com.operations.Matrix.MatrixOperations.subtract(matrix44, matrix47);
        com.operations.Matrix.Matrix[] matrixArray51 = com.operations.Matrix.MatrixDecompositions.luDecomposition(matrix50);
        com.operations.Matrix.Matrix matrix53 = com.operations.Matrix.MatrixTransformations.rotate2D((double) (-1L));
        com.operations.Matrix.Matrix matrix55 = com.operations.Matrix.MatrixTransformations.rotate2D((double) (short) 100);
        double[] doubleArray58 = new double[] { 137.90576492663388d, (byte) -1 };
        double[] doubleArray59 = com.operations.Matrix.MatrixSolver.solveGaussian(matrix55, doubleArray58);
        double[] doubleArray60 = com.operations.Matrix.MatrixSolver.solveGaussian(matrix53, doubleArray58);
        double[][] doubleArray61 = matrix53.getData();
        boolean boolean62 = com.operations.Matrix.MatrixUtils.isSquare(matrix53);
        com.operations.Matrix.Matrix matrix63 = com.operations.Matrix.MatrixOperations.subtract(matrix50, matrix53);
        // The following exception was thrown during execution in test generation
        try {
            com.operations.Matrix.Matrix matrix64 = com.operations.Matrix.MatrixDecompositions.choleskyDecomposition(matrix50);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Matrix is not positive definite.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(matrix2);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertArrayEquals(doubleArray5, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertArrayEquals(doubleArray8, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 2 + "'", int11 == 2);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 2 + "'", int12 == 2);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 2 + "'", int13 == 2);
        org.junit.Assert.assertNotNull(matrixArray14);
        org.junit.Assert.assertNotNull(matrix15);
        org.junit.Assert.assertNotNull(matrix17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(matrixArray20);
        org.junit.Assert.assertNotNull(matrix21);
        org.junit.Assert.assertNotNull(matrix24);
        org.junit.Assert.assertNotNull(matrix26);
        org.junit.Assert.assertNotNull(matrix29);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 2 + "'", int30 == 2);
        org.junit.Assert.assertNotNull(matrix32);
        org.junit.Assert.assertTrue("'" + double33 + "' != '" + 10.0d + "'", double33 == 10.0d);
        org.junit.Assert.assertNotNull(matrix36);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 2 + "'", int37 == 2);
        org.junit.Assert.assertNotNull(matrix39);
        org.junit.Assert.assertNotNull(matrix40);
        org.junit.Assert.assertNotNull(matrix41);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(matrix44);
        org.junit.Assert.assertTrue("'" + double45 + "' != '" + 137.13497001129946d + "'", double45 == 137.13497001129946d);
        org.junit.Assert.assertNotNull(matrix47);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 2 + "'", int48 == 2);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 2 + "'", int49 == 2);
        org.junit.Assert.assertNotNull(matrix50);
        org.junit.Assert.assertNotNull(matrixArray51);
        org.junit.Assert.assertNotNull(matrix53);
        org.junit.Assert.assertNotNull(matrix55);
        org.junit.Assert.assertNotNull(doubleArray58);
        org.junit.Assert.assertArrayEquals(doubleArray58, new double[] { 137.90576492663388d, (-1.0d) }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray59);
        org.junit.Assert.assertArrayEquals(doubleArray59, new double[] { (-24.931892522286255d), (-135.63701830716116d) }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray60);
        org.junit.Assert.assertArrayEquals(doubleArray60, new double[] { 137.90221361711127d, 1.4069397643877004d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray61);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + true + "'", boolean62 == true);
        org.junit.Assert.assertNotNull(matrix63);
    }

    @Test
    public void test3472() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3472");
        com.operations.Matrix.Matrix matrix2 = new com.operations.Matrix.Matrix((int) (byte) 0, 10);
    }

    @Test
    public void test3473() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3473");
        com.operations.Matrix.Matrix matrix2 = com.operations.Matrix.MatrixTransformations.project2D((double) 1L, (double) (short) -1);
        org.junit.Assert.assertNotNull(matrix2);
    }

    @Test
    public void test3474() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3474");
        com.operations.Matrix.Matrix matrix2 = new com.operations.Matrix.Matrix((int) (short) 10, (int) (byte) 100);
    }

    @Test
    public void test3475() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3475");
        com.operations.Matrix.Matrix matrix1 = com.operations.Matrix.MatrixTransformations.rotate2D(0.984807753012208d);
        com.operations.Matrix.Matrix matrix3 = com.operations.Matrix.MatrixTransformations.rotate2D((double) 1.0f);
        com.operations.Matrix.Matrix matrix6 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0L, (double) (byte) 10);
        int int7 = matrix6.getRows();
        com.operations.Matrix.Matrix matrix9 = com.operations.Matrix.MatrixOperations.scalarMultiply(matrix6, (double) 2);
        double double10 = com.operations.Matrix.MatrixUtils.frobeniusNorm(matrix6);
        com.operations.Matrix.Matrix matrix13 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0L, (double) (byte) 10);
        int int14 = matrix13.getRows();
        com.operations.Matrix.Matrix matrix16 = com.operations.Matrix.MatrixOperations.scalarMultiply(matrix13, (double) 2);
        com.operations.Matrix.Matrix matrix17 = com.operations.Matrix.MatrixOperations.subtract(matrix6, matrix16);
        com.operations.Matrix.Matrix matrix18 = com.operations.Matrix.MatrixOperations.add(matrix3, matrix16);
        matrix3.print();
        double[] doubleArray22 = new double[] { 10, 'a' };
        double[] doubleArray25 = new double[] { 10, 'a' };
        double[][] doubleArray26 = new double[][] { doubleArray22, doubleArray25 };
        com.operations.Matrix.Matrix matrix27 = new com.operations.Matrix.Matrix(doubleArray26);
        com.operations.Matrix.Matrix matrix28 = com.operations.Matrix.MatrixOperations.transpose(matrix27);
        com.operations.Matrix.Matrix matrix31 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0L, (double) (byte) 10);
        int int32 = matrix31.getRows();
        com.operations.Matrix.Matrix matrix38 = com.operations.Matrix.MatrixUtils.generateRandomMatrix(100, (int) (byte) 1, (int) '#', (int) '#', 1L);
        boolean boolean40 = com.operations.Matrix.MatrixUtils.compare(matrix31, matrix38, (double) 1.0f);
        com.operations.Matrix.Matrix matrix42 = com.operations.Matrix.MatrixOperations.scalarMultiply(matrix31, (double) 1L);
        matrix31.print();
        com.operations.Matrix.Matrix matrix44 = com.operations.Matrix.MatrixOperations.multiply(matrix28, matrix31);
        com.operations.Matrix.Matrix matrix45 = com.operations.Matrix.MatrixOperations.multiply(matrix3, matrix31);
        com.operations.Matrix.Matrix matrix46 = com.operations.Matrix.MatrixOperations.add(matrix1, matrix31);
        com.operations.Matrix.Matrix matrix48 = com.operations.Matrix.MatrixTransformations.rotate2D((double) 32);
        com.operations.Matrix.Matrix matrix49 = com.operations.Matrix.MatrixOperations.add(matrix1, matrix48);
        com.operations.Matrix.Matrix matrix50 = com.operations.Matrix.MatrixDecompositions.choleskyDecomposition(matrix48);
        com.operations.Matrix.Matrix matrix52 = com.operations.Matrix.MatrixOperations.scalarMultiply(matrix50, (double) 1L);
        org.junit.Assert.assertNotNull(matrix1);
        org.junit.Assert.assertNotNull(matrix3);
        org.junit.Assert.assertNotNull(matrix6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 2 + "'", int7 == 2);
        org.junit.Assert.assertNotNull(matrix9);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 10.0d + "'", double10 == 10.0d);
        org.junit.Assert.assertNotNull(matrix13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 2 + "'", int14 == 2);
        org.junit.Assert.assertNotNull(matrix16);
        org.junit.Assert.assertNotNull(matrix17);
        org.junit.Assert.assertNotNull(matrix18);
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertArrayEquals(doubleArray22, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertArrayEquals(doubleArray25, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertNotNull(matrix28);
        org.junit.Assert.assertNotNull(matrix31);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 2 + "'", int32 == 2);
        org.junit.Assert.assertNotNull(matrix38);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(matrix42);
        org.junit.Assert.assertNotNull(matrix44);
        org.junit.Assert.assertNotNull(matrix45);
        org.junit.Assert.assertNotNull(matrix46);
        org.junit.Assert.assertNotNull(matrix48);
        org.junit.Assert.assertNotNull(matrix49);
        org.junit.Assert.assertNotNull(matrix50);
        org.junit.Assert.assertNotNull(matrix52);
    }

    @Test
    public void test3476() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3476");
        com.operations.Matrix.Matrix matrix4 = com.operations.Matrix.MatrixUtils.generateRandomMatrix((int) (short) 1, 10, (int) (byte) 0, (int) '#');
        org.junit.Assert.assertNotNull(matrix4);
    }

    @Test
    public void test3477() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3477");
        com.operations.Matrix.Matrix matrix2 = com.operations.Matrix.MatrixTransformations.scale2D(90.28463890218569d, (double) 'a');
        org.junit.Assert.assertNotNull(matrix2);
    }

    @Test
    public void test3478() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3478");
        com.operations.Matrix.Matrix matrix2 = com.operations.Matrix.MatrixTransformations.project2D(10.0d, (double) 1);
        com.operations.Matrix.Matrix matrix4 = com.operations.Matrix.MatrixTransformations.rotate2D(0.984807753012208d);
        double double7 = matrix4.getValue((int) (byte) 0, (int) (byte) 1);
        com.operations.Matrix.Matrix matrix8 = com.operations.Matrix.MatrixOperations.add(matrix2, matrix4);
        org.junit.Assert.assertNotNull(matrix2);
        org.junit.Assert.assertNotNull(matrix4);
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + (-0.017187291480513275d) + "'", double7 == (-0.017187291480513275d));
        org.junit.Assert.assertNotNull(matrix8);
    }

    @Test
    public void test3479() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3479");
        // The following exception was thrown during execution in test generation
        try {
            com.operations.Matrix.Matrix matrix5 = com.operations.Matrix.MatrixUtils.generateRandomMatrix(10, (int) (short) -1, 10, (int) (byte) 1, (long) 2);
            org.junit.Assert.fail("Expected exception of type java.lang.NegativeArraySizeException; message: -1");
        } catch (java.lang.NegativeArraySizeException e) {
            // Expected exception.
        }
    }

    @Test
    public void test3480() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3480");
        com.operations.Matrix.Matrix matrix1 = com.operations.Matrix.MatrixTransformations.rotate2D((double) '4');
        double[] doubleArray4 = new double[] { 10, 'a' };
        double[] doubleArray7 = new double[] { 10, 'a' };
        double[][] doubleArray8 = new double[][] { doubleArray4, doubleArray7 };
        com.operations.Matrix.Matrix matrix9 = new com.operations.Matrix.Matrix(doubleArray8);
        com.operations.Matrix.Matrix matrix10 = new com.operations.Matrix.Matrix(doubleArray8);
        com.operations.Matrix.Matrix matrix12 = com.operations.Matrix.MatrixTransformations.rotate2D((double) (short) 100);
        double[] doubleArray15 = new double[] { 137.90576492663388d, (byte) -1 };
        double[] doubleArray16 = com.operations.Matrix.MatrixSolver.solveGaussian(matrix12, doubleArray15);
        com.operations.Matrix.Matrix matrix17 = com.operations.Matrix.MatrixOperations.add(matrix10, matrix12);
        boolean boolean18 = com.operations.Matrix.MatrixUtils.isSymmetric(matrix17);
        boolean boolean20 = com.operations.Matrix.MatrixUtils.compare(matrix1, matrix17, 364.0054944640259d);
        com.operations.Matrix.Matrix matrix23 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0L, (double) (byte) 10);
        int int24 = matrix23.getRows();
        com.operations.Matrix.Matrix matrix26 = com.operations.Matrix.MatrixOperations.scalarMultiply(matrix23, (double) 2);
        matrix23.print();
        com.operations.Matrix.Matrix matrix28 = com.operations.Matrix.MatrixOperations.multiply(matrix17, matrix23);
        com.operations.Matrix.Matrix matrix29 = com.operations.Matrix.MatrixOperations.transpose(matrix28);
        double double30 = com.operations.Matrix.MatrixUtils.frobeniusNorm(matrix28);
        com.operations.Matrix.Matrix[] matrixArray31 = com.operations.Matrix.MatrixDecompositions.luDecomposition(matrix28);
        int int32 = matrix28.getRows();
        com.operations.Matrix.Matrix matrix34 = com.operations.Matrix.MatrixTransformations.rotate2D((double) 1.0f);
        com.operations.Matrix.Matrix matrix37 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0L, (double) (byte) 10);
        int int38 = matrix37.getRows();
        com.operations.Matrix.Matrix matrix40 = com.operations.Matrix.MatrixOperations.scalarMultiply(matrix37, (double) 2);
        double double41 = com.operations.Matrix.MatrixUtils.frobeniusNorm(matrix37);
        com.operations.Matrix.Matrix matrix44 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0L, (double) (byte) 10);
        int int45 = matrix44.getRows();
        com.operations.Matrix.Matrix matrix47 = com.operations.Matrix.MatrixOperations.scalarMultiply(matrix44, (double) 2);
        com.operations.Matrix.Matrix matrix48 = com.operations.Matrix.MatrixOperations.subtract(matrix37, matrix47);
        com.operations.Matrix.Matrix matrix49 = com.operations.Matrix.MatrixOperations.add(matrix34, matrix47);
        com.operations.Matrix.Matrix[] matrixArray50 = com.operations.Matrix.MatrixDecompositions.luDecomposition(matrix47);
        boolean boolean51 = com.operations.Matrix.MatrixUtils.isSquare(matrix47);
        com.operations.Matrix.Matrix matrix52 = com.operations.Matrix.MatrixOperations.transpose(matrix47);
        com.operations.Matrix.Matrix matrix54 = com.operations.Matrix.MatrixOperations.scalarMultiply(matrix47, (double) ' ');
        com.operations.Matrix.Matrix matrix57 = com.operations.Matrix.MatrixTransformations.project2D(0.0d, (double) 0);
        double[][] doubleArray58 = matrix57.getData();
        com.operations.Matrix.Matrix matrix59 = new com.operations.Matrix.Matrix(doubleArray58);
        com.operations.Matrix.Matrix matrix60 = new com.operations.Matrix.Matrix(doubleArray58);
        com.operations.Matrix.Matrix matrix61 = com.operations.Matrix.MatrixOperations.multiply(matrix47, matrix60);
        com.operations.Matrix.Matrix matrix62 = com.operations.Matrix.MatrixOperations.subtract(matrix28, matrix47);
        org.junit.Assert.assertNotNull(matrix1);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertArrayEquals(doubleArray4, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertArrayEquals(doubleArray7, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertNotNull(matrix12);
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertArrayEquals(doubleArray15, new double[] { 137.90576492663388d, (-1.0d) }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertArrayEquals(doubleArray16, new double[] { (-24.931892522286255d), (-135.63701830716116d) }, 1.0E-15);
        org.junit.Assert.assertNotNull(matrix17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertNotNull(matrix23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 2 + "'", int24 == 2);
        org.junit.Assert.assertNotNull(matrix26);
        org.junit.Assert.assertNotNull(matrix28);
        org.junit.Assert.assertNotNull(matrix29);
        org.junit.Assert.assertTrue("'" + double30 + "' != '" + 1363.6076983299943d + "'", double30 == 1363.6076983299943d);
        org.junit.Assert.assertNotNull(matrixArray31);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 2 + "'", int32 == 2);
        org.junit.Assert.assertNotNull(matrix34);
        org.junit.Assert.assertNotNull(matrix37);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 2 + "'", int38 == 2);
        org.junit.Assert.assertNotNull(matrix40);
        org.junit.Assert.assertTrue("'" + double41 + "' != '" + 10.0d + "'", double41 == 10.0d);
        org.junit.Assert.assertNotNull(matrix44);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 2 + "'", int45 == 2);
        org.junit.Assert.assertNotNull(matrix47);
        org.junit.Assert.assertNotNull(matrix48);
        org.junit.Assert.assertNotNull(matrix49);
        org.junit.Assert.assertNotNull(matrixArray50);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + true + "'", boolean51 == true);
        org.junit.Assert.assertNotNull(matrix52);
        org.junit.Assert.assertNotNull(matrix54);
        org.junit.Assert.assertNotNull(matrix57);
        org.junit.Assert.assertNotNull(doubleArray58);
        org.junit.Assert.assertNotNull(matrix61);
        org.junit.Assert.assertNotNull(matrix62);
    }

    @Test
    public void test3481() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3481");
        com.operations.Matrix.Matrix matrix2 = com.operations.Matrix.MatrixTransformations.project2D(10.344080432788601d, 10.344080432788601d);
        com.operations.Matrix.Matrix matrix8 = com.operations.Matrix.MatrixUtils.generateRandomMatrix(100, (int) (byte) 1, (int) '#', (int) '#', 1L);
        double double11 = matrix8.getValue((int) '4', 0);
        double double12 = com.operations.Matrix.MatrixUtils.frobeniusNorm(matrix8);
        boolean boolean13 = com.operations.Matrix.MatrixUtils.isSquare(matrix8);
        double[][] doubleArray14 = matrix8.getData();
        int int15 = matrix8.getRows();
        double[] doubleArray18 = new double[] { 10, 'a' };
        double[] doubleArray21 = new double[] { 10, 'a' };
        double[][] doubleArray22 = new double[][] { doubleArray18, doubleArray21 };
        com.operations.Matrix.Matrix matrix23 = new com.operations.Matrix.Matrix(doubleArray22);
        int int24 = matrix23.getCols();
        int int25 = matrix23.getCols();
        int int26 = matrix23.getCols();
        com.operations.Matrix.Matrix matrix28 = com.operations.Matrix.MatrixOperations.scalarMultiply(matrix23, (double) 0.0f);
        boolean boolean30 = com.operations.Matrix.MatrixUtils.compare(matrix8, matrix23, (double) 35);
        matrix23.print();
        boolean boolean33 = com.operations.Matrix.MatrixUtils.compare(matrix2, matrix23, (double) '4');
        org.junit.Assert.assertNotNull(matrix2);
        org.junit.Assert.assertNotNull(matrix8);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 35.0d + "'", double11 == 35.0d);
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 350.0d + "'", double12 == 350.0d);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 100 + "'", int15 == 100);
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertArrayEquals(doubleArray18, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertArrayEquals(doubleArray21, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 2 + "'", int24 == 2);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 2 + "'", int25 == 2);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 2 + "'", int26 == 2);
        org.junit.Assert.assertNotNull(matrix28);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
    }

    @Test
    public void test3482() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3482");
        com.operations.Matrix.Matrix matrix2 = com.operations.Matrix.MatrixTransformations.project2D(145.11374848717816d, 310.45666917731234d);
        org.junit.Assert.assertNotNull(matrix2);
    }

    @Test
    public void test3483() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3483");
        com.operations.Matrix.Matrix matrix0 = null;
        com.operations.Matrix.Matrix matrix3 = com.operations.Matrix.MatrixTransformations.scale2D((-0.017187291480513275d), 100.00000152293244d);
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean5 = com.operations.Matrix.MatrixUtils.compare(matrix0, matrix3, 176.5915398536741d);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot invoke \"com.operations.Matrix.Matrix.getRows()\" because \"a\" is null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(matrix3);
    }

    @Test
    public void test3484() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3484");
        double[] doubleArray2 = new double[] { 10, 'a' };
        double[] doubleArray5 = new double[] { 10, 'a' };
        double[][] doubleArray6 = new double[][] { doubleArray2, doubleArray5 };
        com.operations.Matrix.Matrix matrix7 = new com.operations.Matrix.Matrix(doubleArray6);
        com.operations.Matrix.Matrix matrix8 = new com.operations.Matrix.Matrix(doubleArray6);
        boolean boolean9 = com.operations.Matrix.MatrixUtils.isSquare(matrix8);
        double[] doubleArray12 = new double[] { 10, 'a' };
        double[] doubleArray15 = new double[] { 10, 'a' };
        double[][] doubleArray16 = new double[][] { doubleArray12, doubleArray15 };
        com.operations.Matrix.Matrix matrix17 = new com.operations.Matrix.Matrix(doubleArray16);
        int int18 = matrix17.getCols();
        int int19 = matrix17.getCols();
        matrix17.print();
        double[] doubleArray23 = new double[] { 10, 'a' };
        double[] doubleArray26 = new double[] { 10, 'a' };
        double[][] doubleArray27 = new double[][] { doubleArray23, doubleArray26 };
        com.operations.Matrix.Matrix matrix28 = new com.operations.Matrix.Matrix(doubleArray27);
        boolean boolean30 = com.operations.Matrix.MatrixUtils.compare(matrix17, matrix28, (double) (-1));
        com.operations.Matrix.Matrix matrix31 = com.operations.Matrix.MatrixOperations.subtract(matrix8, matrix28);
        com.operations.Matrix.Matrix[] matrixArray32 = com.operations.Matrix.MatrixDecompositions.luDecomposition(matrix31);
        double[][] doubleArray33 = matrix31.getData();
        boolean boolean34 = com.operations.Matrix.MatrixUtils.isSquare(matrix31);
        boolean boolean35 = com.operations.Matrix.MatrixUtils.isSquare(matrix31);
        double double36 = com.operations.Matrix.MatrixUtils.frobeniusNorm(matrix31);
        com.operations.Matrix.Matrix matrix38 = com.operations.Matrix.MatrixTransformations.rotate2D(1.7320508075688774d);
        com.operations.Matrix.Matrix matrix39 = com.operations.Matrix.MatrixOperations.multiply(matrix31, matrix38);
        int int40 = matrix38.getRows();
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertArrayEquals(doubleArray2, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertArrayEquals(doubleArray5, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertArrayEquals(doubleArray12, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertArrayEquals(doubleArray15, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 2 + "'", int18 == 2);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 2 + "'", int19 == 2);
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertArrayEquals(doubleArray23, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertArrayEquals(doubleArray26, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(matrix31);
        org.junit.Assert.assertNotNull(matrixArray32);
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertTrue("'" + double36 + "' != '" + 0.0d + "'", double36 == 0.0d);
        org.junit.Assert.assertNotNull(matrix38);
        org.junit.Assert.assertNotNull(matrix39);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 2 + "'", int40 == 2);
    }

    @Test
    public void test3485() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3485");
        com.operations.Matrix.Matrix matrix2 = com.operations.Matrix.MatrixTransformations.scale2D((double) (byte) 100, 350.0d);
        double double3 = com.operations.Matrix.MatrixUtils.frobeniusNorm(matrix2);
        boolean boolean4 = com.operations.Matrix.MatrixUtils.isSymmetric(matrix2);
        matrix2.print();
        org.junit.Assert.assertNotNull(matrix2);
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + 364.0054944640259d + "'", double3 == 364.0054944640259d);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
    }

    @Test
    public void test3486() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3486");
        com.operations.Matrix.Matrix matrix2 = com.operations.Matrix.MatrixTransformations.project2D((double) 0.0f, 975.1410154434076d);
        double[] doubleArray5 = new double[] { 10, 'a' };
        double[] doubleArray8 = new double[] { 10, 'a' };
        double[][] doubleArray9 = new double[][] { doubleArray5, doubleArray8 };
        com.operations.Matrix.Matrix matrix10 = new com.operations.Matrix.Matrix(doubleArray9);
        int int11 = matrix10.getCols();
        int int12 = matrix10.getCols();
        int int13 = matrix10.getCols();
        com.operations.Matrix.Matrix matrix19 = com.operations.Matrix.MatrixUtils.generateRandomMatrix(100, (int) (byte) 1, (int) '#', (int) '#', 1L);
        double double22 = matrix19.getValue((int) '4', 0);
        double double23 = com.operations.Matrix.MatrixUtils.frobeniusNorm(matrix19);
        boolean boolean24 = com.operations.Matrix.MatrixUtils.isSquare(matrix19);
        boolean boolean26 = com.operations.Matrix.MatrixUtils.compare(matrix10, matrix19, (double) 100L);
        com.operations.Matrix.Matrix matrix28 = com.operations.Matrix.MatrixTransformations.rotate2D((double) (short) 100);
        double[] doubleArray31 = new double[] { 137.90576492663388d, (byte) -1 };
        double[] doubleArray32 = com.operations.Matrix.MatrixSolver.solveGaussian(matrix28, doubleArray31);
        com.operations.Matrix.Matrix matrix35 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0L, (double) (byte) 10);
        double[] doubleArray38 = new double[] { 10, 'a' };
        double[] doubleArray41 = new double[] { 10, 'a' };
        double[][] doubleArray42 = new double[][] { doubleArray38, doubleArray41 };
        com.operations.Matrix.Matrix matrix43 = new com.operations.Matrix.Matrix(doubleArray42);
        int int44 = matrix43.getCols();
        int int45 = matrix43.getCols();
        int int46 = matrix43.getCols();
        com.operations.Matrix.Matrix[] matrixArray47 = com.operations.Matrix.MatrixDecompositions.luDecomposition(matrix43);
        com.operations.Matrix.Matrix matrix48 = com.operations.Matrix.MatrixOperations.multiply(matrix35, matrix43);
        boolean boolean50 = com.operations.Matrix.MatrixUtils.compare(matrix28, matrix35, (double) (-1L));
        com.operations.Matrix.Matrix matrix51 = com.operations.Matrix.MatrixOperations.subtract(matrix10, matrix35);
        com.operations.Matrix.Matrix matrix52 = com.operations.Matrix.MatrixOperations.transpose(matrix10);
        matrix52.print();
        com.operations.Matrix.Matrix matrix55 = com.operations.Matrix.MatrixOperations.scalarMultiply(matrix52, (double) 1L);
        com.operations.Matrix.Matrix matrix56 = com.operations.Matrix.MatrixOperations.subtract(matrix2, matrix55);
        double double57 = com.operations.Matrix.MatrixUtils.frobeniusNorm(matrix2);
        org.junit.Assert.assertNotNull(matrix2);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertArrayEquals(doubleArray5, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertArrayEquals(doubleArray8, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 2 + "'", int11 == 2);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 2 + "'", int12 == 2);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 2 + "'", int13 == 2);
        org.junit.Assert.assertNotNull(matrix19);
        org.junit.Assert.assertTrue("'" + double22 + "' != '" + 35.0d + "'", double22 == 35.0d);
        org.junit.Assert.assertTrue("'" + double23 + "' != '" + 350.0d + "'", double23 == 350.0d);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(matrix28);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertArrayEquals(doubleArray31, new double[] { 137.90576492663388d, (-1.0d) }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertArrayEquals(doubleArray32, new double[] { (-24.931892522286255d), (-135.63701830716116d) }, 1.0E-15);
        org.junit.Assert.assertNotNull(matrix35);
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertArrayEquals(doubleArray38, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertArrayEquals(doubleArray41, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 2 + "'", int44 == 2);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 2 + "'", int45 == 2);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 2 + "'", int46 == 2);
        org.junit.Assert.assertNotNull(matrixArray47);
        org.junit.Assert.assertNotNull(matrix48);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(matrix51);
        org.junit.Assert.assertNotNull(matrix52);
        org.junit.Assert.assertNotNull(matrix55);
        org.junit.Assert.assertNotNull(matrix56);
        org.junit.Assert.assertTrue("'" + double57 + "' != '" + 975.1410154434076d + "'", double57 == 975.1410154434076d);
    }

    @Test
    public void test3487() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3487");
        com.operations.Matrix.Matrix matrix2 = com.operations.Matrix.MatrixTransformations.scale2D(1.414213562373095d, (double) 1);
        com.operations.Matrix.Matrix matrix4 = com.operations.Matrix.MatrixOperations.scalarMultiply(matrix2, 640031.99920004d);
        com.operations.Matrix.Matrix matrix7 = com.operations.Matrix.MatrixTransformations.project2D(400.0d, 36.40054944640259d);
        com.operations.Matrix.Matrix matrix9 = com.operations.Matrix.MatrixTransformations.rotate2D(100.0d);
        int int10 = matrix9.getCols();
        matrix9.print();
        com.operations.Matrix.Matrix matrix13 = com.operations.Matrix.MatrixOperations.scalarMultiply(matrix9, (double) (byte) 1);
        com.operations.Matrix.Matrix matrix15 = com.operations.Matrix.MatrixTransformations.rotate2D(350.0d);
        com.operations.Matrix.Matrix matrix17 = com.operations.Matrix.MatrixTransformations.rotate2D((double) (short) 100);
        double[] doubleArray20 = new double[] { 137.90576492663388d, (byte) -1 };
        double[] doubleArray21 = com.operations.Matrix.MatrixSolver.solveGaussian(matrix17, doubleArray20);
        double[] doubleArray22 = com.operations.Matrix.MatrixSolver.solveGaussian(matrix15, doubleArray21);
        double[] doubleArray23 = com.operations.Matrix.MatrixSolver.solveGaussian(matrix9, doubleArray21);
        double[] doubleArray24 = com.operations.Matrix.MatrixSolver.solveGaussian(matrix7, doubleArray21);
        double[] doubleArray25 = com.operations.Matrix.MatrixSolver.solveGaussian(matrix2, doubleArray24);
        org.junit.Assert.assertNotNull(matrix2);
        org.junit.Assert.assertNotNull(matrix4);
        org.junit.Assert.assertNotNull(matrix7);
        org.junit.Assert.assertNotNull(matrix9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 2 + "'", int10 == 2);
        org.junit.Assert.assertNotNull(matrix13);
        org.junit.Assert.assertNotNull(matrix15);
        org.junit.Assert.assertNotNull(matrix17);
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertArrayEquals(doubleArray20, new double[] { 137.90576492663388d, (-1.0d) }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertArrayEquals(doubleArray21, new double[] { (-24.931892522286255d), (-135.63701830716116d) }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertArrayEquals(doubleArray22, new double[] { (-0.9999999999999858d), (-137.90576492663388d) }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertArrayEquals(doubleArray23, new double[] { (-129.24700952206834d), 48.1062421064292d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertArrayEquals(doubleArray24, new double[] { (-0.06232973130571564d), (-3.7262354653980627d) }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertArrayEquals(doubleArray25, new double[] { (-0.044073775675806975d), (-3.7262354653980627d) }, 1.0E-15);
    }

    @Test
    public void test3488() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3488");
        double[] doubleArray2 = new double[] { 10, 'a' };
        double[] doubleArray5 = new double[] { 10, 'a' };
        double[][] doubleArray6 = new double[][] { doubleArray2, doubleArray5 };
        com.operations.Matrix.Matrix matrix7 = new com.operations.Matrix.Matrix(doubleArray6);
        com.operations.Matrix.Matrix matrix8 = new com.operations.Matrix.Matrix(doubleArray6);
        com.operations.Matrix.Matrix[] matrixArray9 = com.operations.Matrix.MatrixDecompositions.luDecomposition(matrix8);
        double double10 = com.operations.Matrix.MatrixUtils.frobeniusNorm(matrix8);
        double[] doubleArray13 = new double[] { 10, 'a' };
        double[] doubleArray16 = new double[] { 10, 'a' };
        double[][] doubleArray17 = new double[][] { doubleArray13, doubleArray16 };
        com.operations.Matrix.Matrix matrix18 = new com.operations.Matrix.Matrix(doubleArray17);
        com.operations.Matrix.Matrix matrix19 = new com.operations.Matrix.Matrix(doubleArray17);
        boolean boolean20 = com.operations.Matrix.MatrixUtils.isSquare(matrix19);
        double[] doubleArray23 = new double[] { 10, 'a' };
        double[] doubleArray26 = new double[] { 10, 'a' };
        double[][] doubleArray27 = new double[][] { doubleArray23, doubleArray26 };
        com.operations.Matrix.Matrix matrix28 = new com.operations.Matrix.Matrix(doubleArray27);
        int int29 = matrix28.getCols();
        int int30 = matrix28.getCols();
        matrix28.print();
        double[] doubleArray34 = new double[] { 10, 'a' };
        double[] doubleArray37 = new double[] { 10, 'a' };
        double[][] doubleArray38 = new double[][] { doubleArray34, doubleArray37 };
        com.operations.Matrix.Matrix matrix39 = new com.operations.Matrix.Matrix(doubleArray38);
        boolean boolean41 = com.operations.Matrix.MatrixUtils.compare(matrix28, matrix39, (double) (-1));
        com.operations.Matrix.Matrix matrix42 = com.operations.Matrix.MatrixOperations.subtract(matrix19, matrix39);
        com.operations.Matrix.Matrix[] matrixArray43 = com.operations.Matrix.MatrixDecompositions.luDecomposition(matrix42);
        double[][] doubleArray44 = matrix42.getData();
        com.operations.Matrix.Matrix matrix47 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0L, (double) (byte) 10);
        double[] doubleArray50 = new double[] { 10, 'a' };
        double[] doubleArray53 = new double[] { 10, 'a' };
        double[][] doubleArray54 = new double[][] { doubleArray50, doubleArray53 };
        com.operations.Matrix.Matrix matrix55 = new com.operations.Matrix.Matrix(doubleArray54);
        int int56 = matrix55.getCols();
        int int57 = matrix55.getCols();
        int int58 = matrix55.getCols();
        com.operations.Matrix.Matrix[] matrixArray59 = com.operations.Matrix.MatrixDecompositions.luDecomposition(matrix55);
        com.operations.Matrix.Matrix matrix60 = com.operations.Matrix.MatrixOperations.multiply(matrix47, matrix55);
        int int61 = matrix55.getRows();
        com.operations.Matrix.Matrix matrix62 = com.operations.Matrix.MatrixOperations.multiply(matrix42, matrix55);
        boolean boolean64 = com.operations.Matrix.MatrixUtils.compare(matrix8, matrix62, (double) 2);
        com.operations.Matrix.Matrix matrix65 = com.operations.Matrix.MatrixOperations.transpose(matrix62);
        com.operations.Matrix.Matrix matrix68 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0L, (double) (byte) 10);
        double[] doubleArray71 = new double[] { 10, 'a' };
        double[] doubleArray74 = new double[] { 10, 'a' };
        double[][] doubleArray75 = new double[][] { doubleArray71, doubleArray74 };
        com.operations.Matrix.Matrix matrix76 = new com.operations.Matrix.Matrix(doubleArray75);
        int int77 = matrix76.getCols();
        int int78 = matrix76.getCols();
        int int79 = matrix76.getCols();
        com.operations.Matrix.Matrix[] matrixArray80 = com.operations.Matrix.MatrixDecompositions.luDecomposition(matrix76);
        com.operations.Matrix.Matrix matrix81 = com.operations.Matrix.MatrixOperations.multiply(matrix68, matrix76);
        com.operations.Matrix.Matrix matrix83 = com.operations.Matrix.MatrixTransformations.rotate2D((double) (short) 100);
        boolean boolean85 = com.operations.Matrix.MatrixUtils.compare(matrix76, matrix83, (double) (byte) 0);
        boolean boolean86 = com.operations.Matrix.MatrixUtils.isSymmetric(matrix83);
        boolean boolean87 = com.operations.Matrix.MatrixUtils.isSquare(matrix83);
        com.operations.Matrix.Matrix matrix89 = com.operations.Matrix.MatrixTransformations.rotate2D((double) (short) 100);
        boolean boolean91 = com.operations.Matrix.MatrixUtils.compare(matrix83, matrix89, (double) (byte) 100);
        com.operations.Matrix.Matrix matrix92 = com.operations.Matrix.MatrixOperations.subtract(matrix65, matrix89);
        double double93 = com.operations.Matrix.MatrixUtils.frobeniusNorm(matrix65);
        com.operations.Matrix.Matrix matrix94 = com.operations.Matrix.MatrixOperations.transpose(matrix65);
        com.operations.Matrix.Matrix matrix96 = com.operations.Matrix.MatrixOperations.scalarMultiply(matrix65, 59.62334183013888d);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertArrayEquals(doubleArray2, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertArrayEquals(doubleArray5, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertNotNull(matrixArray9);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 137.90576492663388d + "'", double10 == 137.90576492663388d);
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertArrayEquals(doubleArray13, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertArrayEquals(doubleArray16, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertArrayEquals(doubleArray23, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertArrayEquals(doubleArray26, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 2 + "'", int29 == 2);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 2 + "'", int30 == 2);
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertArrayEquals(doubleArray34, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertArrayEquals(doubleArray37, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(matrix42);
        org.junit.Assert.assertNotNull(matrixArray43);
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertNotNull(matrix47);
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertArrayEquals(doubleArray50, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertArrayEquals(doubleArray53, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray54);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 2 + "'", int56 == 2);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 2 + "'", int57 == 2);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 2 + "'", int58 == 2);
        org.junit.Assert.assertNotNull(matrixArray59);
        org.junit.Assert.assertNotNull(matrix60);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 2 + "'", int61 == 2);
        org.junit.Assert.assertNotNull(matrix62);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertNotNull(matrix65);
        org.junit.Assert.assertNotNull(matrix68);
        org.junit.Assert.assertNotNull(doubleArray71);
        org.junit.Assert.assertArrayEquals(doubleArray71, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray74);
        org.junit.Assert.assertArrayEquals(doubleArray74, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray75);
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + 2 + "'", int77 == 2);
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + 2 + "'", int78 == 2);
        org.junit.Assert.assertTrue("'" + int79 + "' != '" + 2 + "'", int79 == 2);
        org.junit.Assert.assertNotNull(matrixArray80);
        org.junit.Assert.assertNotNull(matrix81);
        org.junit.Assert.assertNotNull(matrix83);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + true + "'", boolean87 == true);
        org.junit.Assert.assertNotNull(matrix89);
        org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + true + "'", boolean91 == true);
        org.junit.Assert.assertNotNull(matrix92);
        org.junit.Assert.assertTrue("'" + double93 + "' != '" + 0.0d + "'", double93 == 0.0d);
        org.junit.Assert.assertNotNull(matrix94);
        org.junit.Assert.assertNotNull(matrix96);
    }

    @Test
    public void test3489() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3489");
        com.operations.Matrix.Matrix matrix1 = com.operations.Matrix.MatrixTransformations.rotate2D(1.414213562373095d);
        com.operations.Matrix.Matrix matrix2 = com.operations.Matrix.MatrixOperations.transpose(matrix1);
        com.operations.Matrix.Matrix matrix5 = com.operations.Matrix.MatrixTransformations.project2D((double) ' ', 0.0d);
        double[] doubleArray8 = new double[] { 10, 'a' };
        double[] doubleArray11 = new double[] { 10, 'a' };
        double[][] doubleArray12 = new double[][] { doubleArray8, doubleArray11 };
        com.operations.Matrix.Matrix matrix13 = new com.operations.Matrix.Matrix(doubleArray12);
        int int14 = matrix13.getCols();
        boolean boolean15 = com.operations.Matrix.MatrixUtils.isSquare(matrix13);
        com.operations.Matrix.Matrix matrix16 = com.operations.Matrix.MatrixOperations.transpose(matrix13);
        int int17 = matrix16.getRows();
        com.operations.Matrix.Matrix matrix20 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0L, (double) (byte) 10);
        double[] doubleArray23 = new double[] { 10, 'a' };
        double[] doubleArray26 = new double[] { 10, 'a' };
        double[][] doubleArray27 = new double[][] { doubleArray23, doubleArray26 };
        com.operations.Matrix.Matrix matrix28 = new com.operations.Matrix.Matrix(doubleArray27);
        int int29 = matrix28.getCols();
        int int30 = matrix28.getCols();
        int int31 = matrix28.getCols();
        com.operations.Matrix.Matrix[] matrixArray32 = com.operations.Matrix.MatrixDecompositions.luDecomposition(matrix28);
        com.operations.Matrix.Matrix matrix33 = com.operations.Matrix.MatrixOperations.multiply(matrix20, matrix28);
        com.operations.Matrix.Matrix matrix35 = com.operations.Matrix.MatrixTransformations.rotate2D((double) (short) 100);
        boolean boolean37 = com.operations.Matrix.MatrixUtils.compare(matrix28, matrix35, (double) (byte) 0);
        com.operations.Matrix.Matrix matrix38 = com.operations.Matrix.MatrixOperations.multiply(matrix16, matrix28);
        com.operations.Matrix.Matrix matrix39 = com.operations.Matrix.MatrixOperations.add(matrix5, matrix28);
        matrix28.print();
        com.operations.Matrix.Matrix[] matrixArray41 = com.operations.Matrix.MatrixDecompositions.luDecomposition(matrix28);
        com.operations.Matrix.Matrix matrix42 = com.operations.Matrix.MatrixOperations.add(matrix1, matrix28);
        double double43 = com.operations.Matrix.MatrixUtils.frobeniusNorm(matrix1);
        boolean boolean44 = com.operations.Matrix.MatrixUtils.isSymmetric(matrix1);
        org.junit.Assert.assertNotNull(matrix1);
        org.junit.Assert.assertNotNull(matrix2);
        org.junit.Assert.assertNotNull(matrix5);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertArrayEquals(doubleArray8, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertArrayEquals(doubleArray11, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 2 + "'", int14 == 2);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNotNull(matrix16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 2 + "'", int17 == 2);
        org.junit.Assert.assertNotNull(matrix20);
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertArrayEquals(doubleArray23, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertArrayEquals(doubleArray26, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 2 + "'", int29 == 2);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 2 + "'", int30 == 2);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 2 + "'", int31 == 2);
        org.junit.Assert.assertNotNull(matrixArray32);
        org.junit.Assert.assertNotNull(matrix33);
        org.junit.Assert.assertNotNull(matrix35);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(matrix38);
        org.junit.Assert.assertNotNull(matrix39);
        org.junit.Assert.assertNotNull(matrixArray41);
        org.junit.Assert.assertNotNull(matrix42);
        org.junit.Assert.assertTrue("'" + double43 + "' != '" + 1.414213562373095d + "'", double43 == 1.414213562373095d);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
    }

    @Test
    public void test3490() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3490");
        com.operations.Matrix.Matrix matrix2 = com.operations.Matrix.MatrixTransformations.project2D((double) '4', (double) 'a');
        com.operations.Matrix.Matrix matrix5 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0L, (double) (byte) 10);
        double[] doubleArray8 = new double[] { 10, 'a' };
        double[] doubleArray11 = new double[] { 10, 'a' };
        double[][] doubleArray12 = new double[][] { doubleArray8, doubleArray11 };
        com.operations.Matrix.Matrix matrix13 = new com.operations.Matrix.Matrix(doubleArray12);
        int int14 = matrix13.getCols();
        int int15 = matrix13.getCols();
        int int16 = matrix13.getCols();
        com.operations.Matrix.Matrix[] matrixArray17 = com.operations.Matrix.MatrixDecompositions.luDecomposition(matrix13);
        com.operations.Matrix.Matrix matrix18 = com.operations.Matrix.MatrixOperations.multiply(matrix5, matrix13);
        com.operations.Matrix.Matrix matrix20 = com.operations.Matrix.MatrixTransformations.rotate2D((double) (short) 100);
        boolean boolean22 = com.operations.Matrix.MatrixUtils.compare(matrix13, matrix20, (double) (byte) 0);
        double[] doubleArray25 = new double[] { 10, 'a' };
        double[] doubleArray28 = new double[] { 10, 'a' };
        double[][] doubleArray29 = new double[][] { doubleArray25, doubleArray28 };
        com.operations.Matrix.Matrix matrix30 = new com.operations.Matrix.Matrix(doubleArray29);
        com.operations.Matrix.Matrix matrix31 = new com.operations.Matrix.Matrix(doubleArray29);
        com.operations.Matrix.Matrix matrix32 = new com.operations.Matrix.Matrix(doubleArray29);
        boolean boolean34 = com.operations.Matrix.MatrixUtils.compare(matrix13, matrix32, (double) (-1));
        double[] doubleArray37 = new double[] { 10, 'a' };
        double[] doubleArray40 = new double[] { 10, 'a' };
        double[][] doubleArray41 = new double[][] { doubleArray37, doubleArray40 };
        com.operations.Matrix.Matrix matrix42 = new com.operations.Matrix.Matrix(doubleArray41);
        com.operations.Matrix.Matrix matrix43 = new com.operations.Matrix.Matrix(doubleArray41);
        boolean boolean44 = com.operations.Matrix.MatrixUtils.isSquare(matrix43);
        com.operations.Matrix.Matrix matrix45 = com.operations.Matrix.MatrixOperations.multiply(matrix32, matrix43);
        double[][] doubleArray46 = matrix43.getData();
        com.operations.Matrix.Matrix matrix47 = new com.operations.Matrix.Matrix(doubleArray46);
        com.operations.Matrix.Matrix matrix48 = new com.operations.Matrix.Matrix(doubleArray46);
        boolean boolean50 = com.operations.Matrix.MatrixUtils.compare(matrix2, matrix48, 22.360679774997898d);
        java.lang.Class<?> wildcardClass51 = matrix2.getClass();
        org.junit.Assert.assertNotNull(matrix2);
        org.junit.Assert.assertNotNull(matrix5);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertArrayEquals(doubleArray8, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertArrayEquals(doubleArray11, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 2 + "'", int14 == 2);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 2 + "'", int15 == 2);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 2 + "'", int16 == 2);
        org.junit.Assert.assertNotNull(matrixArray17);
        org.junit.Assert.assertNotNull(matrix18);
        org.junit.Assert.assertNotNull(matrix20);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertArrayEquals(doubleArray25, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertArrayEquals(doubleArray28, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertArrayEquals(doubleArray37, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertArrayEquals(doubleArray40, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertNotNull(matrix45);
        org.junit.Assert.assertNotNull(doubleArray46);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(wildcardClass51);
    }

    @Test
    public void test3491() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3491");
        com.operations.Matrix.Matrix matrix2 = new com.operations.Matrix.Matrix((int) (short) 100, 35);
        int int3 = matrix2.getRows();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 100 + "'", int3 == 100);
    }

    @Test
    public void test3492() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3492");
        com.operations.Matrix.Matrix matrix2 = com.operations.Matrix.MatrixTransformations.project2D((double) 2, (double) 10);
        org.junit.Assert.assertNotNull(matrix2);
    }

    @Test
    public void test3493() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3493");
        com.operations.Matrix.Matrix matrix5 = com.operations.Matrix.MatrixUtils.generateRandomMatrix((int) '4', (int) (short) 1, 35, (int) '4', (long) 32);
        matrix5.print();
        com.operations.Matrix.Matrix matrix9 = com.operations.Matrix.MatrixTransformations.project2D((double) 1L, 0.01745240643728351d);
        com.operations.Matrix.Matrix matrix12 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0L, (double) (byte) 10);
        double[] doubleArray15 = new double[] { 10, 'a' };
        double[] doubleArray18 = new double[] { 10, 'a' };
        double[][] doubleArray19 = new double[][] { doubleArray15, doubleArray18 };
        com.operations.Matrix.Matrix matrix20 = new com.operations.Matrix.Matrix(doubleArray19);
        int int21 = matrix20.getCols();
        int int22 = matrix20.getCols();
        int int23 = matrix20.getCols();
        com.operations.Matrix.Matrix[] matrixArray24 = com.operations.Matrix.MatrixDecompositions.luDecomposition(matrix20);
        com.operations.Matrix.Matrix matrix25 = com.operations.Matrix.MatrixOperations.multiply(matrix12, matrix20);
        com.operations.Matrix.Matrix matrix27 = com.operations.Matrix.MatrixTransformations.rotate2D((double) (short) 100);
        boolean boolean29 = com.operations.Matrix.MatrixUtils.compare(matrix20, matrix27, (double) (byte) 0);
        com.operations.Matrix.Matrix[] matrixArray30 = com.operations.Matrix.MatrixDecompositions.luDecomposition(matrix20);
        com.operations.Matrix.Matrix matrix31 = com.operations.Matrix.MatrixOperations.transpose(matrix20);
        com.operations.Matrix.Matrix matrix34 = com.operations.Matrix.MatrixTransformations.scale2D((double) 1.0f, (double) 1);
        com.operations.Matrix.Matrix matrix36 = com.operations.Matrix.MatrixTransformations.rotate2D((double) 1.0f);
        com.operations.Matrix.Matrix matrix39 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0L, (double) (byte) 10);
        int int40 = matrix39.getRows();
        com.operations.Matrix.Matrix matrix42 = com.operations.Matrix.MatrixOperations.scalarMultiply(matrix39, (double) 2);
        double double43 = com.operations.Matrix.MatrixUtils.frobeniusNorm(matrix39);
        com.operations.Matrix.Matrix matrix46 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0L, (double) (byte) 10);
        int int47 = matrix46.getRows();
        com.operations.Matrix.Matrix matrix49 = com.operations.Matrix.MatrixOperations.scalarMultiply(matrix46, (double) 2);
        com.operations.Matrix.Matrix matrix50 = com.operations.Matrix.MatrixOperations.subtract(matrix39, matrix49);
        com.operations.Matrix.Matrix matrix51 = com.operations.Matrix.MatrixOperations.add(matrix36, matrix49);
        boolean boolean53 = com.operations.Matrix.MatrixUtils.compare(matrix34, matrix36, (double) (byte) -1);
        com.operations.Matrix.Matrix matrix54 = com.operations.Matrix.MatrixOperations.subtract(matrix31, matrix34);
        com.operations.Matrix.Matrix matrix56 = com.operations.Matrix.MatrixTransformations.rotate2D((double) (short) 100);
        double[] doubleArray59 = new double[] { 137.90576492663388d, (byte) -1 };
        double[] doubleArray60 = com.operations.Matrix.MatrixSolver.solveGaussian(matrix56, doubleArray59);
        double[] doubleArray61 = com.operations.Matrix.MatrixSolver.solveGaussian(matrix34, doubleArray59);
        double[] doubleArray62 = com.operations.Matrix.MatrixSolver.solveGaussian(matrix9, doubleArray61);
        // The following exception was thrown during execution in test generation
        try {
            double[] doubleArray63 = com.operations.Matrix.MatrixSolver.solveGaussian(matrix5, doubleArray61);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Matrix must be square to solve equations.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(matrix5);
        org.junit.Assert.assertNotNull(matrix9);
        org.junit.Assert.assertNotNull(matrix12);
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertArrayEquals(doubleArray15, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertArrayEquals(doubleArray18, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 2 + "'", int21 == 2);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 2 + "'", int22 == 2);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 2 + "'", int23 == 2);
        org.junit.Assert.assertNotNull(matrixArray24);
        org.junit.Assert.assertNotNull(matrix25);
        org.junit.Assert.assertNotNull(matrix27);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(matrixArray30);
        org.junit.Assert.assertNotNull(matrix31);
        org.junit.Assert.assertNotNull(matrix34);
        org.junit.Assert.assertNotNull(matrix36);
        org.junit.Assert.assertNotNull(matrix39);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 2 + "'", int40 == 2);
        org.junit.Assert.assertNotNull(matrix42);
        org.junit.Assert.assertTrue("'" + double43 + "' != '" + 10.0d + "'", double43 == 10.0d);
        org.junit.Assert.assertNotNull(matrix46);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 2 + "'", int47 == 2);
        org.junit.Assert.assertNotNull(matrix49);
        org.junit.Assert.assertNotNull(matrix50);
        org.junit.Assert.assertNotNull(matrix51);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(matrix54);
        org.junit.Assert.assertNotNull(matrix56);
        org.junit.Assert.assertNotNull(doubleArray59);
        org.junit.Assert.assertArrayEquals(doubleArray59, new double[] { 137.90576492663388d, (-1.0d) }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray60);
        org.junit.Assert.assertArrayEquals(doubleArray60, new double[] { (-24.931892522286255d), (-135.63701830716116d) }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray61);
        org.junit.Assert.assertArrayEquals(doubleArray61, new double[] { 137.90576492663388d, (-1.0d) }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray62);
        org.junit.Assert.assertArrayEquals(doubleArray62, new double[] { 137.90576492663388d, (-57.298688498550185d) }, 1.0E-15);
    }

    @Test
    public void test3494() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3494");
        com.operations.Matrix.Matrix matrix2 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0L, (double) (byte) 10);
        double[] doubleArray5 = new double[] { 10, 'a' };
        double[] doubleArray8 = new double[] { 10, 'a' };
        double[][] doubleArray9 = new double[][] { doubleArray5, doubleArray8 };
        com.operations.Matrix.Matrix matrix10 = new com.operations.Matrix.Matrix(doubleArray9);
        int int11 = matrix10.getCols();
        int int12 = matrix10.getCols();
        int int13 = matrix10.getCols();
        com.operations.Matrix.Matrix[] matrixArray14 = com.operations.Matrix.MatrixDecompositions.luDecomposition(matrix10);
        com.operations.Matrix.Matrix matrix15 = com.operations.Matrix.MatrixOperations.multiply(matrix2, matrix10);
        com.operations.Matrix.Matrix matrix17 = com.operations.Matrix.MatrixTransformations.rotate2D((double) (short) 100);
        boolean boolean19 = com.operations.Matrix.MatrixUtils.compare(matrix10, matrix17, (double) (byte) 0);
        double[] doubleArray22 = new double[] { 10, 'a' };
        double[] doubleArray25 = new double[] { 10, 'a' };
        double[][] doubleArray26 = new double[][] { doubleArray22, doubleArray25 };
        com.operations.Matrix.Matrix matrix27 = new com.operations.Matrix.Matrix(doubleArray26);
        com.operations.Matrix.Matrix matrix28 = new com.operations.Matrix.Matrix(doubleArray26);
        com.operations.Matrix.Matrix matrix29 = new com.operations.Matrix.Matrix(doubleArray26);
        boolean boolean31 = com.operations.Matrix.MatrixUtils.compare(matrix10, matrix29, (double) (-1));
        com.operations.Matrix.Matrix matrix34 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0L, (double) (byte) 10);
        double[] doubleArray37 = new double[] { 10, 'a' };
        double[] doubleArray40 = new double[] { 10, 'a' };
        double[][] doubleArray41 = new double[][] { doubleArray37, doubleArray40 };
        com.operations.Matrix.Matrix matrix42 = new com.operations.Matrix.Matrix(doubleArray41);
        int int43 = matrix42.getCols();
        int int44 = matrix42.getCols();
        int int45 = matrix42.getCols();
        com.operations.Matrix.Matrix[] matrixArray46 = com.operations.Matrix.MatrixDecompositions.luDecomposition(matrix42);
        com.operations.Matrix.Matrix matrix47 = com.operations.Matrix.MatrixOperations.multiply(matrix34, matrix42);
        boolean boolean49 = com.operations.Matrix.MatrixUtils.compare(matrix29, matrix34, (double) 10L);
        int int50 = matrix29.getRows();
        com.operations.Matrix.Matrix matrix51 = com.operations.Matrix.MatrixDecompositions.choleskyDecomposition(matrix29);
        com.operations.Matrix.Matrix matrix52 = com.operations.Matrix.MatrixDecompositions.choleskyDecomposition(matrix29);
        com.operations.Matrix.Matrix matrix55 = com.operations.Matrix.MatrixTransformations.scale2D(0.0d, (double) 1.0f);
        com.operations.Matrix.Matrix matrix57 = com.operations.Matrix.MatrixTransformations.rotate2D((double) 1.0f);
        com.operations.Matrix.Matrix matrix60 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0L, (double) (byte) 10);
        int int61 = matrix60.getRows();
        com.operations.Matrix.Matrix matrix63 = com.operations.Matrix.MatrixOperations.scalarMultiply(matrix60, (double) 2);
        double double64 = com.operations.Matrix.MatrixUtils.frobeniusNorm(matrix60);
        com.operations.Matrix.Matrix matrix67 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0L, (double) (byte) 10);
        int int68 = matrix67.getRows();
        com.operations.Matrix.Matrix matrix70 = com.operations.Matrix.MatrixOperations.scalarMultiply(matrix67, (double) 2);
        com.operations.Matrix.Matrix matrix71 = com.operations.Matrix.MatrixOperations.subtract(matrix60, matrix70);
        com.operations.Matrix.Matrix matrix72 = com.operations.Matrix.MatrixOperations.add(matrix57, matrix70);
        com.operations.Matrix.Matrix matrix74 = com.operations.Matrix.MatrixOperations.scalarMultiply(matrix72, (double) 0L);
        com.operations.Matrix.Matrix matrix75 = com.operations.Matrix.MatrixOperations.subtract(matrix55, matrix74);
        boolean boolean76 = com.operations.Matrix.MatrixUtils.isSquare(matrix55);
        matrix55.print();
        boolean boolean79 = com.operations.Matrix.MatrixUtils.compare(matrix29, matrix55, 137.90576492663388d);
        org.junit.Assert.assertNotNull(matrix2);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertArrayEquals(doubleArray5, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertArrayEquals(doubleArray8, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 2 + "'", int11 == 2);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 2 + "'", int12 == 2);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 2 + "'", int13 == 2);
        org.junit.Assert.assertNotNull(matrixArray14);
        org.junit.Assert.assertNotNull(matrix15);
        org.junit.Assert.assertNotNull(matrix17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertArrayEquals(doubleArray22, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertArrayEquals(doubleArray25, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(matrix34);
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertArrayEquals(doubleArray37, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertArrayEquals(doubleArray40, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 2 + "'", int43 == 2);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 2 + "'", int44 == 2);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 2 + "'", int45 == 2);
        org.junit.Assert.assertNotNull(matrixArray46);
        org.junit.Assert.assertNotNull(matrix47);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 2 + "'", int50 == 2);
        org.junit.Assert.assertNotNull(matrix51);
        org.junit.Assert.assertNotNull(matrix52);
        org.junit.Assert.assertNotNull(matrix55);
        org.junit.Assert.assertNotNull(matrix57);
        org.junit.Assert.assertNotNull(matrix60);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 2 + "'", int61 == 2);
        org.junit.Assert.assertNotNull(matrix63);
        org.junit.Assert.assertTrue("'" + double64 + "' != '" + 10.0d + "'", double64 == 10.0d);
        org.junit.Assert.assertNotNull(matrix67);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 2 + "'", int68 == 2);
        org.junit.Assert.assertNotNull(matrix70);
        org.junit.Assert.assertNotNull(matrix71);
        org.junit.Assert.assertNotNull(matrix72);
        org.junit.Assert.assertNotNull(matrix74);
        org.junit.Assert.assertNotNull(matrix75);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + true + "'", boolean76 == true);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + true + "'", boolean79 == true);
    }

    @Test
    public void test3495() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3495");
        double[] doubleArray2 = new double[] { 10, 'a' };
        double[] doubleArray5 = new double[] { 10, 'a' };
        double[][] doubleArray6 = new double[][] { doubleArray2, doubleArray5 };
        com.operations.Matrix.Matrix matrix7 = new com.operations.Matrix.Matrix(doubleArray6);
        int int8 = matrix7.getCols();
        int int9 = matrix7.getCols();
        boolean boolean10 = com.operations.Matrix.MatrixUtils.isSquare(matrix7);
        com.operations.Matrix.Matrix matrix11 = com.operations.Matrix.MatrixDecompositions.choleskyDecomposition(matrix7);
        com.operations.Matrix.Matrix matrix14 = com.operations.Matrix.MatrixTransformations.project2D(0.0d, (double) 0);
        com.operations.Matrix.Matrix matrix15 = com.operations.Matrix.MatrixOperations.subtract(matrix11, matrix14);
        com.operations.Matrix.Matrix matrix16 = com.operations.Matrix.MatrixOperations.transpose(matrix14);
        com.operations.Matrix.Matrix matrix17 = com.operations.Matrix.MatrixOperations.transpose(matrix14);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertArrayEquals(doubleArray2, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertArrayEquals(doubleArray5, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 2 + "'", int8 == 2);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 2 + "'", int9 == 2);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(matrix11);
        org.junit.Assert.assertNotNull(matrix14);
        org.junit.Assert.assertNotNull(matrix15);
        org.junit.Assert.assertNotNull(matrix16);
        org.junit.Assert.assertNotNull(matrix17);
    }

    @Test
    public void test3496() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3496");
        com.operations.Matrix.Matrix matrix2 = new com.operations.Matrix.Matrix(1, 32);
        // The following exception was thrown during execution in test generation
        try {
            com.operations.Matrix.Matrix matrix3 = com.operations.Matrix.MatrixDecompositions.choleskyDecomposition(matrix2);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Matrix must be square for Cholesky decomposition.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test3497() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3497");
        com.operations.Matrix.Matrix matrix2 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0L, (double) (byte) 10);
        double[] doubleArray5 = new double[] { 10, 'a' };
        double[] doubleArray8 = new double[] { 10, 'a' };
        double[][] doubleArray9 = new double[][] { doubleArray5, doubleArray8 };
        com.operations.Matrix.Matrix matrix10 = new com.operations.Matrix.Matrix(doubleArray9);
        int int11 = matrix10.getCols();
        int int12 = matrix10.getCols();
        int int13 = matrix10.getCols();
        com.operations.Matrix.Matrix[] matrixArray14 = com.operations.Matrix.MatrixDecompositions.luDecomposition(matrix10);
        com.operations.Matrix.Matrix matrix15 = com.operations.Matrix.MatrixOperations.multiply(matrix2, matrix10);
        com.operations.Matrix.Matrix matrix17 = com.operations.Matrix.MatrixTransformations.rotate2D((double) '4');
        double[] doubleArray20 = new double[] { 10, 'a' };
        double[] doubleArray23 = new double[] { 10, 'a' };
        double[][] doubleArray24 = new double[][] { doubleArray20, doubleArray23 };
        com.operations.Matrix.Matrix matrix25 = new com.operations.Matrix.Matrix(doubleArray24);
        com.operations.Matrix.Matrix matrix26 = new com.operations.Matrix.Matrix(doubleArray24);
        com.operations.Matrix.Matrix matrix28 = com.operations.Matrix.MatrixTransformations.rotate2D((double) (short) 100);
        double[] doubleArray31 = new double[] { 137.90576492663388d, (byte) -1 };
        double[] doubleArray32 = com.operations.Matrix.MatrixSolver.solveGaussian(matrix28, doubleArray31);
        com.operations.Matrix.Matrix matrix33 = com.operations.Matrix.MatrixOperations.add(matrix26, matrix28);
        boolean boolean34 = com.operations.Matrix.MatrixUtils.isSymmetric(matrix33);
        boolean boolean36 = com.operations.Matrix.MatrixUtils.compare(matrix17, matrix33, 364.0054944640259d);
        com.operations.Matrix.Matrix matrix39 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0L, (double) (byte) 10);
        double[] doubleArray42 = new double[] { 10, 'a' };
        double[] doubleArray45 = new double[] { 10, 'a' };
        double[][] doubleArray46 = new double[][] { doubleArray42, doubleArray45 };
        com.operations.Matrix.Matrix matrix47 = new com.operations.Matrix.Matrix(doubleArray46);
        int int48 = matrix47.getCols();
        int int49 = matrix47.getCols();
        int int50 = matrix47.getCols();
        com.operations.Matrix.Matrix[] matrixArray51 = com.operations.Matrix.MatrixDecompositions.luDecomposition(matrix47);
        com.operations.Matrix.Matrix matrix52 = com.operations.Matrix.MatrixOperations.multiply(matrix39, matrix47);
        com.operations.Matrix.Matrix matrix54 = com.operations.Matrix.MatrixTransformations.rotate2D((double) (short) 100);
        boolean boolean56 = com.operations.Matrix.MatrixUtils.compare(matrix47, matrix54, (double) (byte) 0);
        com.operations.Matrix.Matrix[] matrixArray57 = com.operations.Matrix.MatrixDecompositions.luDecomposition(matrix47);
        com.operations.Matrix.Matrix matrix58 = com.operations.Matrix.MatrixOperations.transpose(matrix47);
        com.operations.Matrix.Matrix matrix61 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0L, (double) (byte) 10);
        int int62 = matrix61.getRows();
        com.operations.Matrix.Matrix matrix65 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0L, (double) (byte) 10);
        int int66 = matrix65.getRows();
        com.operations.Matrix.Matrix matrix68 = com.operations.Matrix.MatrixOperations.scalarMultiply(matrix65, (double) 2);
        com.operations.Matrix.Matrix matrix69 = com.operations.Matrix.MatrixOperations.subtract(matrix61, matrix65);
        boolean boolean71 = com.operations.Matrix.MatrixUtils.compare(matrix47, matrix61, (double) ' ');
        boolean boolean73 = com.operations.Matrix.MatrixUtils.compare(matrix33, matrix47, (double) 0L);
        com.operations.Matrix.Matrix matrix74 = com.operations.Matrix.MatrixOperations.add(matrix2, matrix47);
        boolean boolean75 = com.operations.Matrix.MatrixUtils.isSymmetric(matrix47);
        com.operations.Matrix.Matrix matrix77 = com.operations.Matrix.MatrixOperations.scalarMultiply(matrix47, 11.489125293076057d);
        org.junit.Assert.assertNotNull(matrix2);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertArrayEquals(doubleArray5, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertArrayEquals(doubleArray8, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 2 + "'", int11 == 2);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 2 + "'", int12 == 2);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 2 + "'", int13 == 2);
        org.junit.Assert.assertNotNull(matrixArray14);
        org.junit.Assert.assertNotNull(matrix15);
        org.junit.Assert.assertNotNull(matrix17);
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertArrayEquals(doubleArray20, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertArrayEquals(doubleArray23, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertNotNull(matrix28);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertArrayEquals(doubleArray31, new double[] { 137.90576492663388d, (-1.0d) }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertArrayEquals(doubleArray32, new double[] { (-24.931892522286255d), (-135.63701830716116d) }, 1.0E-15);
        org.junit.Assert.assertNotNull(matrix33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertNotNull(matrix39);
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertArrayEquals(doubleArray42, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertArrayEquals(doubleArray45, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray46);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 2 + "'", int48 == 2);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 2 + "'", int49 == 2);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 2 + "'", int50 == 2);
        org.junit.Assert.assertNotNull(matrixArray51);
        org.junit.Assert.assertNotNull(matrix52);
        org.junit.Assert.assertNotNull(matrix54);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(matrixArray57);
        org.junit.Assert.assertNotNull(matrix58);
        org.junit.Assert.assertNotNull(matrix61);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 2 + "'", int62 == 2);
        org.junit.Assert.assertNotNull(matrix65);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 2 + "'", int66 == 2);
        org.junit.Assert.assertNotNull(matrix68);
        org.junit.Assert.assertNotNull(matrix69);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertNotNull(matrix74);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertNotNull(matrix77);
    }

    @Test
    public void test3498() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3498");
        com.operations.Matrix.Matrix matrix2 = new com.operations.Matrix.Matrix((int) (short) 10, (int) (short) 10);
        com.operations.Matrix.Matrix matrix7 = com.operations.Matrix.MatrixUtils.generateRandomMatrix(52, 32, 100, 32);
        boolean boolean9 = com.operations.Matrix.MatrixUtils.compare(matrix2, matrix7, (double) (byte) 1);
        int int10 = matrix2.getRows();
        org.junit.Assert.assertNotNull(matrix7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 10 + "'", int10 == 10);
    }

    @Test
    public void test3499() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3499");
        double[] doubleArray2 = new double[] { 10, 'a' };
        double[] doubleArray5 = new double[] { 10, 'a' };
        double[][] doubleArray6 = new double[][] { doubleArray2, doubleArray5 };
        com.operations.Matrix.Matrix matrix7 = new com.operations.Matrix.Matrix(doubleArray6);
        com.operations.Matrix.Matrix matrix8 = new com.operations.Matrix.Matrix(doubleArray6);
        boolean boolean9 = com.operations.Matrix.MatrixUtils.isSquare(matrix8);
        double[] doubleArray12 = new double[] { 10, 'a' };
        double[] doubleArray15 = new double[] { 10, 'a' };
        double[][] doubleArray16 = new double[][] { doubleArray12, doubleArray15 };
        com.operations.Matrix.Matrix matrix17 = new com.operations.Matrix.Matrix(doubleArray16);
        int int18 = matrix17.getCols();
        int int19 = matrix17.getCols();
        matrix17.print();
        double[] doubleArray23 = new double[] { 10, 'a' };
        double[] doubleArray26 = new double[] { 10, 'a' };
        double[][] doubleArray27 = new double[][] { doubleArray23, doubleArray26 };
        com.operations.Matrix.Matrix matrix28 = new com.operations.Matrix.Matrix(doubleArray27);
        boolean boolean30 = com.operations.Matrix.MatrixUtils.compare(matrix17, matrix28, (double) (-1));
        com.operations.Matrix.Matrix matrix31 = com.operations.Matrix.MatrixOperations.subtract(matrix8, matrix28);
        com.operations.Matrix.Matrix matrix33 = com.operations.Matrix.MatrixOperations.scalarMultiply(matrix8, (double) 0.0f);
        com.operations.Matrix.Matrix matrix34 = com.operations.Matrix.MatrixOperations.transpose(matrix8);
        com.operations.Matrix.Matrix matrix40 = com.operations.Matrix.MatrixUtils.generateRandomMatrix(2, (int) (byte) 10, (int) (byte) -1, 0, (long) (byte) 10);
        matrix40.print();
        boolean boolean43 = com.operations.Matrix.MatrixUtils.compare(matrix34, matrix40, 975.1410154434076d);
        // The following exception was thrown during execution in test generation
        try {
            matrix40.setValue((int) (byte) 0, (int) (short) 10, 32.524725901652594d);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: Index 10 out of bounds for length 10");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertArrayEquals(doubleArray2, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertArrayEquals(doubleArray5, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertArrayEquals(doubleArray12, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertArrayEquals(doubleArray15, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 2 + "'", int18 == 2);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 2 + "'", int19 == 2);
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertArrayEquals(doubleArray23, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertArrayEquals(doubleArray26, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(matrix31);
        org.junit.Assert.assertNotNull(matrix33);
        org.junit.Assert.assertNotNull(matrix34);
        org.junit.Assert.assertNotNull(matrix40);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
    }

    @Test
    public void test3500() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3500");
        com.operations.Matrix.Matrix matrix5 = com.operations.Matrix.MatrixUtils.generateRandomMatrix((int) '4', (int) (short) 0, 52, (int) (short) 1, (long) 52);
        int int6 = matrix5.getRows();
        int int7 = matrix5.getRows();
        org.junit.Assert.assertNotNull(matrix5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 52 + "'", int6 == 52);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 52 + "'", int7 == 52);
    }
}

