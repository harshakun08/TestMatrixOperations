package com.operations.Matrix;
import org.junit.FixMethodOrder;
import org.junit.Test;
import org.junit.runners.MethodSorters;

@FixMethodOrder(MethodSorters.NAME_ASCENDING)
public class RegressionTest9 {

    public static boolean debug = false;

    @Test
    public void test4501() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4501");
        com.operations.Matrix.Matrix matrix1 = com.operations.Matrix.MatrixTransformations.rotate2D((double) (short) 100);
        double[][] doubleArray2 = matrix1.getData();
        com.operations.Matrix.Matrix matrix3 = new com.operations.Matrix.Matrix(doubleArray2);
        boolean boolean4 = com.operations.Matrix.MatrixUtils.isSquare(matrix3);
        com.operations.Matrix.Matrix matrix5 = null;
        // The following exception was thrown during execution in test generation
        try {
            com.operations.Matrix.Matrix matrix6 = com.operations.Matrix.MatrixOperations.subtract(matrix3, matrix5);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(matrix1);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
    }

    @Test
    public void test4502() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4502");
        com.operations.Matrix.Matrix matrix2 = com.operations.Matrix.MatrixTransformations.project2D(1363.6076983299943d, (double) (short) 0);
        org.junit.Assert.assertNotNull(matrix2);
    }

    @Test
    public void test4503() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4503");
        com.operations.Matrix.Matrix matrix2 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0L, (double) (byte) 10);
        double[] doubleArray5 = new double[] { 10, 'a' };
        double[] doubleArray8 = new double[] { 10, 'a' };
        double[][] doubleArray9 = new double[][] { doubleArray5, doubleArray8 };
        com.operations.Matrix.Matrix matrix10 = new com.operations.Matrix.Matrix(doubleArray9);
        int int11 = matrix10.getCols();
        int int12 = matrix10.getCols();
        int int13 = matrix10.getCols();
        com.operations.Matrix.Matrix[] matrixArray14 = com.operations.Matrix.MatrixDecompositions.luDecomposition(matrix10);
        com.operations.Matrix.Matrix matrix15 = com.operations.Matrix.MatrixOperations.multiply(matrix2, matrix10);
        com.operations.Matrix.Matrix matrix17 = com.operations.Matrix.MatrixTransformations.rotate2D((double) (short) 100);
        boolean boolean19 = com.operations.Matrix.MatrixUtils.compare(matrix10, matrix17, (double) (byte) 0);
        com.operations.Matrix.Matrix matrix20 = com.operations.Matrix.MatrixOperations.transpose(matrix10);
        com.operations.Matrix.Matrix matrix23 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0L, (double) (byte) 10);
        double[] doubleArray26 = new double[] { 10, 'a' };
        double[] doubleArray29 = new double[] { 10, 'a' };
        double[][] doubleArray30 = new double[][] { doubleArray26, doubleArray29 };
        com.operations.Matrix.Matrix matrix31 = new com.operations.Matrix.Matrix(doubleArray30);
        int int32 = matrix31.getCols();
        int int33 = matrix31.getCols();
        int int34 = matrix31.getCols();
        com.operations.Matrix.Matrix[] matrixArray35 = com.operations.Matrix.MatrixDecompositions.luDecomposition(matrix31);
        com.operations.Matrix.Matrix matrix36 = com.operations.Matrix.MatrixOperations.multiply(matrix23, matrix31);
        com.operations.Matrix.Matrix matrix38 = com.operations.Matrix.MatrixTransformations.rotate2D((double) (short) 100);
        boolean boolean40 = com.operations.Matrix.MatrixUtils.compare(matrix31, matrix38, (double) (byte) 0);
        double[] doubleArray43 = new double[] { 10, 'a' };
        double[] doubleArray46 = new double[] { 10, 'a' };
        double[][] doubleArray47 = new double[][] { doubleArray43, doubleArray46 };
        com.operations.Matrix.Matrix matrix48 = new com.operations.Matrix.Matrix(doubleArray47);
        com.operations.Matrix.Matrix matrix49 = new com.operations.Matrix.Matrix(doubleArray47);
        com.operations.Matrix.Matrix matrix50 = new com.operations.Matrix.Matrix(doubleArray47);
        boolean boolean52 = com.operations.Matrix.MatrixUtils.compare(matrix31, matrix50, (double) (-1));
        com.operations.Matrix.Matrix matrix55 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0L, (double) (byte) 10);
        double[] doubleArray58 = new double[] { 10, 'a' };
        double[] doubleArray61 = new double[] { 10, 'a' };
        double[][] doubleArray62 = new double[][] { doubleArray58, doubleArray61 };
        com.operations.Matrix.Matrix matrix63 = new com.operations.Matrix.Matrix(doubleArray62);
        int int64 = matrix63.getCols();
        int int65 = matrix63.getCols();
        int int66 = matrix63.getCols();
        com.operations.Matrix.Matrix[] matrixArray67 = com.operations.Matrix.MatrixDecompositions.luDecomposition(matrix63);
        com.operations.Matrix.Matrix matrix68 = com.operations.Matrix.MatrixOperations.multiply(matrix55, matrix63);
        boolean boolean70 = com.operations.Matrix.MatrixUtils.compare(matrix50, matrix55, (double) 10L);
        boolean boolean72 = com.operations.Matrix.MatrixUtils.compare(matrix20, matrix50, (double) 100L);
        boolean boolean73 = com.operations.Matrix.MatrixUtils.isSymmetric(matrix50);
        double[][] doubleArray74 = matrix50.getData();
        com.operations.Matrix.Matrix matrix75 = com.operations.Matrix.MatrixOperations.transpose(matrix50);
        // The following exception was thrown during execution in test generation
        try {
            double double78 = matrix75.getValue(10, (int) (short) 0);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(matrix2);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertArrayEquals(doubleArray5, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertArrayEquals(doubleArray8, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 2 + "'", int11 == 2);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 2 + "'", int12 == 2);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 2 + "'", int13 == 2);
        org.junit.Assert.assertNotNull(matrixArray14);
        org.junit.Assert.assertNotNull(matrix15);
        org.junit.Assert.assertNotNull(matrix17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(matrix20);
        org.junit.Assert.assertNotNull(matrix23);
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertArrayEquals(doubleArray26, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertArrayEquals(doubleArray29, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 2 + "'", int32 == 2);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 2 + "'", int33 == 2);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 2 + "'", int34 == 2);
        org.junit.Assert.assertNotNull(matrixArray35);
        org.junit.Assert.assertNotNull(matrix36);
        org.junit.Assert.assertNotNull(matrix38);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertArrayEquals(doubleArray43, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray46);
        org.junit.Assert.assertArrayEquals(doubleArray46, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(matrix55);
        org.junit.Assert.assertNotNull(doubleArray58);
        org.junit.Assert.assertArrayEquals(doubleArray58, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray61);
        org.junit.Assert.assertArrayEquals(doubleArray61, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray62);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 2 + "'", int64 == 2);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 2 + "'", int65 == 2);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 2 + "'", int66 == 2);
        org.junit.Assert.assertNotNull(matrixArray67);
        org.junit.Assert.assertNotNull(matrix68);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + true + "'", boolean72 == true);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertNotNull(doubleArray74);
        org.junit.Assert.assertNotNull(matrix75);
    }

    @Test
    public void test4504() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4504");
        com.operations.Matrix.Matrix matrix2 = com.operations.Matrix.MatrixTransformations.project2D(147.0076152978997d, (double) (-1L));
        org.junit.Assert.assertNotNull(matrix2);
    }

    @Test
    public void test4505() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4505");
        com.operations.Matrix.Matrix matrix2 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0L, (double) (byte) 10);
        int int3 = matrix2.getRows();
        com.operations.Matrix.Matrix matrix9 = com.operations.Matrix.MatrixUtils.generateRandomMatrix(100, (int) (byte) 1, (int) '#', (int) '#', 1L);
        boolean boolean11 = com.operations.Matrix.MatrixUtils.compare(matrix2, matrix9, (double) 1.0f);
        matrix9.print();
        boolean boolean13 = com.operations.Matrix.MatrixUtils.isSymmetric(matrix9);
        double[][] doubleArray14 = matrix9.getData();
        com.operations.Matrix.Matrix matrix15 = new com.operations.Matrix.Matrix(doubleArray14);
        com.operations.Matrix.Matrix matrix16 = new com.operations.Matrix.Matrix(doubleArray14);
        org.junit.Assert.assertNotNull(matrix2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 2 + "'", int3 == 2);
        org.junit.Assert.assertNotNull(matrix9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(doubleArray14);
    }

    @Test
    public void test4506() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4506");
        com.operations.Matrix.Matrix matrix1 = com.operations.Matrix.MatrixTransformations.rotate2D(41.14922324710797d);
        int int2 = matrix1.getRows();
        org.junit.Assert.assertNotNull(matrix1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 2 + "'", int2 == 2);
    }

    @Test
    public void test4507() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4507");
        com.operations.Matrix.Matrix matrix2 = com.operations.Matrix.MatrixTransformations.project2D(4826.701772432185d, 260.95643973734866d);
        double double3 = com.operations.Matrix.MatrixUtils.frobeniusNorm(matrix2);
        com.operations.Matrix.Matrix matrix4 = com.operations.Matrix.MatrixOperations.transpose(matrix2);
        boolean boolean5 = com.operations.Matrix.MatrixUtils.isSymmetric(matrix4);
        org.junit.Assert.assertNotNull(matrix2);
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + 4833.750951739279d + "'", double3 == 4833.750951739279d);
        org.junit.Assert.assertNotNull(matrix4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
    }

    @Test
    public void test4508() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4508");
        com.operations.Matrix.Matrix matrix2 = com.operations.Matrix.MatrixTransformations.scale2D((double) (byte) 10, (double) 10);
        double[] doubleArray5 = new double[] { 10, 'a' };
        double[] doubleArray8 = new double[] { 10, 'a' };
        double[][] doubleArray9 = new double[][] { doubleArray5, doubleArray8 };
        com.operations.Matrix.Matrix matrix10 = new com.operations.Matrix.Matrix(doubleArray9);
        com.operations.Matrix.Matrix matrix11 = new com.operations.Matrix.Matrix(doubleArray9);
        boolean boolean12 = com.operations.Matrix.MatrixUtils.isSquare(matrix11);
        double[] doubleArray15 = new double[] { 10, 'a' };
        double[] doubleArray18 = new double[] { 10, 'a' };
        double[][] doubleArray19 = new double[][] { doubleArray15, doubleArray18 };
        com.operations.Matrix.Matrix matrix20 = new com.operations.Matrix.Matrix(doubleArray19);
        int int21 = matrix20.getCols();
        int int22 = matrix20.getCols();
        matrix20.print();
        double[] doubleArray26 = new double[] { 10, 'a' };
        double[] doubleArray29 = new double[] { 10, 'a' };
        double[][] doubleArray30 = new double[][] { doubleArray26, doubleArray29 };
        com.operations.Matrix.Matrix matrix31 = new com.operations.Matrix.Matrix(doubleArray30);
        boolean boolean33 = com.operations.Matrix.MatrixUtils.compare(matrix20, matrix31, (double) (-1));
        com.operations.Matrix.Matrix matrix34 = com.operations.Matrix.MatrixOperations.subtract(matrix11, matrix31);
        com.operations.Matrix.Matrix[] matrixArray35 = com.operations.Matrix.MatrixDecompositions.luDecomposition(matrix34);
        double[][] doubleArray36 = matrix34.getData();
        com.operations.Matrix.Matrix matrix37 = new com.operations.Matrix.Matrix(doubleArray36);
        com.operations.Matrix.Matrix matrix38 = com.operations.Matrix.MatrixOperations.multiply(matrix2, matrix37);
        boolean boolean39 = com.operations.Matrix.MatrixUtils.isSymmetric(matrix2);
        com.operations.Matrix.Matrix matrix41 = com.operations.Matrix.MatrixTransformations.rotate2D(350.0d);
        com.operations.Matrix.Matrix matrix42 = com.operations.Matrix.MatrixDecompositions.choleskyDecomposition(matrix41);
        int int43 = matrix41.getRows();
        com.operations.Matrix.Matrix matrix44 = com.operations.Matrix.MatrixOperations.subtract(matrix2, matrix41);
        // The following exception was thrown during execution in test generation
        try {
            double double47 = matrix44.getValue((int) 'a', (int) '#');
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(matrix2);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertArrayEquals(doubleArray5, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertArrayEquals(doubleArray8, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertArrayEquals(doubleArray15, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertArrayEquals(doubleArray18, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 2 + "'", int21 == 2);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 2 + "'", int22 == 2);
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertArrayEquals(doubleArray26, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertArrayEquals(doubleArray29, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(matrix34);
        org.junit.Assert.assertNotNull(matrixArray35);
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertNotNull(matrix38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertNotNull(matrix41);
        org.junit.Assert.assertNotNull(matrix42);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 2 + "'", int43 == 2);
        org.junit.Assert.assertNotNull(matrix44);
    }

    @Test
    public void test4509() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4509");
        com.operations.Matrix.Matrix matrix2 = new com.operations.Matrix.Matrix((int) (short) 100, (int) (short) 0);
        double[][] doubleArray3 = matrix2.getData();
        com.operations.Matrix.Matrix matrix4 = new com.operations.Matrix.Matrix(doubleArray3);
        double[][] doubleArray5 = matrix4.getData();
        com.operations.Matrix.Matrix matrix6 = new com.operations.Matrix.Matrix(doubleArray5);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertNotNull(doubleArray5);
    }

    @Test
    public void test4510() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4510");
        com.operations.Matrix.Matrix matrix2 = new com.operations.Matrix.Matrix((int) (short) 100, 1);
        com.operations.Matrix.Matrix matrix3 = com.operations.Matrix.MatrixOperations.transpose(matrix2);
        int int4 = matrix2.getCols();
        int int5 = matrix2.getRows();
        com.operations.Matrix.Matrix matrix8 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0L, (double) (byte) 10);
        int int9 = matrix8.getRows();
        com.operations.Matrix.Matrix matrix11 = com.operations.Matrix.MatrixOperations.scalarMultiply(matrix8, (double) 2);
        matrix8.print();
        boolean boolean14 = com.operations.Matrix.MatrixUtils.compare(matrix2, matrix8, (double) 0L);
        java.lang.Class<?> wildcardClass15 = matrix8.getClass();
        org.junit.Assert.assertNotNull(matrix3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 1 + "'", int4 == 1);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 100 + "'", int5 == 100);
        org.junit.Assert.assertNotNull(matrix8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 2 + "'", int9 == 2);
        org.junit.Assert.assertNotNull(matrix11);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(wildcardClass15);
    }

    @Test
    public void test4511() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4511");
        com.operations.Matrix.Matrix matrix4 = com.operations.Matrix.MatrixUtils.generateRandomMatrix(32, (int) (byte) 10, (int) (short) 10, 1);
        matrix4.setValue((int) (byte) 1, 1, 641.7761389614766d);
        matrix4.print();
        int int10 = matrix4.getRows();
        org.junit.Assert.assertNotNull(matrix4);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 32 + "'", int10 == 32);
    }

    @Test
    public void test4512() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4512");
        com.operations.Matrix.Matrix matrix2 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0L, (double) (byte) 10);
        int int3 = matrix2.getRows();
        com.operations.Matrix.Matrix matrix6 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0L, (double) (byte) 10);
        int int7 = matrix6.getRows();
        com.operations.Matrix.Matrix matrix9 = com.operations.Matrix.MatrixOperations.scalarMultiply(matrix6, (double) 2);
        com.operations.Matrix.Matrix matrix10 = com.operations.Matrix.MatrixOperations.subtract(matrix2, matrix6);
        com.operations.Matrix.Matrix matrix13 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0L, (double) (byte) 10);
        int int14 = matrix13.getRows();
        com.operations.Matrix.Matrix matrix20 = com.operations.Matrix.MatrixUtils.generateRandomMatrix(100, (int) (byte) 1, (int) '#', (int) '#', 1L);
        boolean boolean22 = com.operations.Matrix.MatrixUtils.compare(matrix13, matrix20, (double) 1.0f);
        com.operations.Matrix.Matrix matrix24 = com.operations.Matrix.MatrixOperations.scalarMultiply(matrix13, (double) 1L);
        boolean boolean26 = com.operations.Matrix.MatrixUtils.compare(matrix10, matrix24, 0.0d);
        com.operations.Matrix.Matrix matrix28 = com.operations.Matrix.MatrixTransformations.rotate2D((double) (short) 100);
        double[][] doubleArray29 = matrix28.getData();
        com.operations.Matrix.Matrix matrix30 = new com.operations.Matrix.Matrix(doubleArray29);
        com.operations.Matrix.Matrix matrix31 = com.operations.Matrix.MatrixOperations.add(matrix24, matrix30);
        com.operations.Matrix.Matrix matrix32 = com.operations.Matrix.MatrixOperations.transpose(matrix30);
        com.operations.Matrix.Matrix matrix35 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0L, (double) (byte) 10);
        double[] doubleArray38 = new double[] { 10, 'a' };
        double[] doubleArray41 = new double[] { 10, 'a' };
        double[][] doubleArray42 = new double[][] { doubleArray38, doubleArray41 };
        com.operations.Matrix.Matrix matrix43 = new com.operations.Matrix.Matrix(doubleArray42);
        int int44 = matrix43.getCols();
        int int45 = matrix43.getCols();
        int int46 = matrix43.getCols();
        com.operations.Matrix.Matrix[] matrixArray47 = com.operations.Matrix.MatrixDecompositions.luDecomposition(matrix43);
        com.operations.Matrix.Matrix matrix48 = com.operations.Matrix.MatrixOperations.multiply(matrix35, matrix43);
        com.operations.Matrix.Matrix matrix50 = com.operations.Matrix.MatrixTransformations.rotate2D((double) (short) 100);
        boolean boolean52 = com.operations.Matrix.MatrixUtils.compare(matrix43, matrix50, (double) (byte) 0);
        com.operations.Matrix.Matrix[] matrixArray53 = com.operations.Matrix.MatrixDecompositions.luDecomposition(matrix43);
        com.operations.Matrix.Matrix matrix54 = com.operations.Matrix.MatrixOperations.transpose(matrix43);
        com.operations.Matrix.Matrix matrix57 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0L, (double) (byte) 10);
        int int58 = matrix57.getRows();
        com.operations.Matrix.Matrix matrix61 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0L, (double) (byte) 10);
        int int62 = matrix61.getRows();
        com.operations.Matrix.Matrix matrix64 = com.operations.Matrix.MatrixOperations.scalarMultiply(matrix61, (double) 2);
        com.operations.Matrix.Matrix matrix65 = com.operations.Matrix.MatrixOperations.subtract(matrix57, matrix61);
        boolean boolean67 = com.operations.Matrix.MatrixUtils.compare(matrix43, matrix57, (double) ' ');
        matrix43.print();
        com.operations.Matrix.Matrix[] matrixArray69 = com.operations.Matrix.MatrixDecompositions.luDecomposition(matrix43);
        com.operations.Matrix.Matrix matrix70 = com.operations.Matrix.MatrixOperations.add(matrix30, matrix43);
        double double71 = com.operations.Matrix.MatrixUtils.frobeniusNorm(matrix43);
        // The following exception was thrown during execution in test generation
        try {
            matrix43.setValue((int) '#', 1, (double) 1L);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: Index 35 out of bounds for length 2");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(matrix2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 2 + "'", int3 == 2);
        org.junit.Assert.assertNotNull(matrix6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 2 + "'", int7 == 2);
        org.junit.Assert.assertNotNull(matrix9);
        org.junit.Assert.assertNotNull(matrix10);
        org.junit.Assert.assertNotNull(matrix13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 2 + "'", int14 == 2);
        org.junit.Assert.assertNotNull(matrix20);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(matrix24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(matrix28);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertNotNull(matrix31);
        org.junit.Assert.assertNotNull(matrix32);
        org.junit.Assert.assertNotNull(matrix35);
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertArrayEquals(doubleArray38, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertArrayEquals(doubleArray41, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 2 + "'", int44 == 2);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 2 + "'", int45 == 2);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 2 + "'", int46 == 2);
        org.junit.Assert.assertNotNull(matrixArray47);
        org.junit.Assert.assertNotNull(matrix48);
        org.junit.Assert.assertNotNull(matrix50);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(matrixArray53);
        org.junit.Assert.assertNotNull(matrix54);
        org.junit.Assert.assertNotNull(matrix57);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 2 + "'", int58 == 2);
        org.junit.Assert.assertNotNull(matrix61);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 2 + "'", int62 == 2);
        org.junit.Assert.assertNotNull(matrix64);
        org.junit.Assert.assertNotNull(matrix65);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertNotNull(matrixArray69);
        org.junit.Assert.assertNotNull(matrix70);
        org.junit.Assert.assertTrue("'" + double71 + "' != '" + 137.90576492663388d + "'", double71 == 137.90576492663388d);
    }

    @Test
    public void test4513() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4513");
        com.operations.Matrix.Matrix matrix2 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0L, (double) (byte) 10);
        double[] doubleArray5 = new double[] { 10, 'a' };
        double[] doubleArray8 = new double[] { 10, 'a' };
        double[][] doubleArray9 = new double[][] { doubleArray5, doubleArray8 };
        com.operations.Matrix.Matrix matrix10 = new com.operations.Matrix.Matrix(doubleArray9);
        int int11 = matrix10.getCols();
        int int12 = matrix10.getCols();
        int int13 = matrix10.getCols();
        com.operations.Matrix.Matrix[] matrixArray14 = com.operations.Matrix.MatrixDecompositions.luDecomposition(matrix10);
        com.operations.Matrix.Matrix matrix15 = com.operations.Matrix.MatrixOperations.multiply(matrix2, matrix10);
        int int16 = matrix15.getRows();
        com.operations.Matrix.Matrix matrix17 = com.operations.Matrix.MatrixOperations.transpose(matrix15);
        com.operations.Matrix.Matrix matrix19 = com.operations.Matrix.MatrixOperations.scalarMultiply(matrix15, 10.344080432788601d);
        org.junit.Assert.assertNotNull(matrix2);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertArrayEquals(doubleArray5, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertArrayEquals(doubleArray8, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 2 + "'", int11 == 2);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 2 + "'", int12 == 2);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 2 + "'", int13 == 2);
        org.junit.Assert.assertNotNull(matrixArray14);
        org.junit.Assert.assertNotNull(matrix15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 2 + "'", int16 == 2);
        org.junit.Assert.assertNotNull(matrix17);
        org.junit.Assert.assertNotNull(matrix19);
    }

    @Test
    public void test4514() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4514");
        com.operations.Matrix.Matrix matrix2 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0L, (double) (byte) 10);
        double[] doubleArray5 = new double[] { 10, 'a' };
        double[] doubleArray8 = new double[] { 10, 'a' };
        double[][] doubleArray9 = new double[][] { doubleArray5, doubleArray8 };
        com.operations.Matrix.Matrix matrix10 = new com.operations.Matrix.Matrix(doubleArray9);
        int int11 = matrix10.getCols();
        int int12 = matrix10.getCols();
        int int13 = matrix10.getCols();
        com.operations.Matrix.Matrix[] matrixArray14 = com.operations.Matrix.MatrixDecompositions.luDecomposition(matrix10);
        com.operations.Matrix.Matrix matrix15 = com.operations.Matrix.MatrixOperations.multiply(matrix2, matrix10);
        com.operations.Matrix.Matrix matrix17 = com.operations.Matrix.MatrixTransformations.rotate2D((double) (short) 100);
        boolean boolean19 = com.operations.Matrix.MatrixUtils.compare(matrix10, matrix17, (double) (byte) 0);
        double[] doubleArray22 = new double[] { 10, 'a' };
        double[] doubleArray25 = new double[] { 10, 'a' };
        double[][] doubleArray26 = new double[][] { doubleArray22, doubleArray25 };
        com.operations.Matrix.Matrix matrix27 = new com.operations.Matrix.Matrix(doubleArray26);
        com.operations.Matrix.Matrix matrix28 = new com.operations.Matrix.Matrix(doubleArray26);
        com.operations.Matrix.Matrix matrix29 = new com.operations.Matrix.Matrix(doubleArray26);
        boolean boolean31 = com.operations.Matrix.MatrixUtils.compare(matrix10, matrix29, (double) (-1));
        com.operations.Matrix.Matrix matrix34 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0L, (double) (byte) 10);
        double[] doubleArray37 = new double[] { 10, 'a' };
        double[] doubleArray40 = new double[] { 10, 'a' };
        double[][] doubleArray41 = new double[][] { doubleArray37, doubleArray40 };
        com.operations.Matrix.Matrix matrix42 = new com.operations.Matrix.Matrix(doubleArray41);
        int int43 = matrix42.getCols();
        int int44 = matrix42.getCols();
        int int45 = matrix42.getCols();
        com.operations.Matrix.Matrix[] matrixArray46 = com.operations.Matrix.MatrixDecompositions.luDecomposition(matrix42);
        com.operations.Matrix.Matrix matrix47 = com.operations.Matrix.MatrixOperations.multiply(matrix34, matrix42);
        boolean boolean49 = com.operations.Matrix.MatrixUtils.compare(matrix29, matrix34, (double) 10L);
        int int50 = matrix29.getRows();
        double double53 = matrix29.getValue((int) (byte) 0, (int) (short) 0);
        double[] doubleArray56 = new double[] { 10, 'a' };
        double[] doubleArray59 = new double[] { 10, 'a' };
        double[][] doubleArray60 = new double[][] { doubleArray56, doubleArray59 };
        com.operations.Matrix.Matrix matrix61 = new com.operations.Matrix.Matrix(doubleArray60);
        com.operations.Matrix.Matrix matrix62 = new com.operations.Matrix.Matrix(doubleArray60);
        com.operations.Matrix.Matrix matrix63 = new com.operations.Matrix.Matrix(doubleArray60);
        com.operations.Matrix.Matrix matrix64 = new com.operations.Matrix.Matrix(doubleArray60);
        com.operations.Matrix.Matrix matrix65 = new com.operations.Matrix.Matrix(doubleArray60);
        com.operations.Matrix.Matrix matrix66 = new com.operations.Matrix.Matrix(doubleArray60);
        com.operations.Matrix.Matrix matrix67 = com.operations.Matrix.MatrixOperations.subtract(matrix29, matrix66);
        double double68 = com.operations.Matrix.MatrixUtils.frobeniusNorm(matrix67);
        org.junit.Assert.assertNotNull(matrix2);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertArrayEquals(doubleArray5, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertArrayEquals(doubleArray8, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 2 + "'", int11 == 2);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 2 + "'", int12 == 2);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 2 + "'", int13 == 2);
        org.junit.Assert.assertNotNull(matrixArray14);
        org.junit.Assert.assertNotNull(matrix15);
        org.junit.Assert.assertNotNull(matrix17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertArrayEquals(doubleArray22, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertArrayEquals(doubleArray25, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(matrix34);
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertArrayEquals(doubleArray37, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertArrayEquals(doubleArray40, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 2 + "'", int43 == 2);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 2 + "'", int44 == 2);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 2 + "'", int45 == 2);
        org.junit.Assert.assertNotNull(matrixArray46);
        org.junit.Assert.assertNotNull(matrix47);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 2 + "'", int50 == 2);
        org.junit.Assert.assertTrue("'" + double53 + "' != '" + 10.0d + "'", double53 == 10.0d);
        org.junit.Assert.assertNotNull(doubleArray56);
        org.junit.Assert.assertArrayEquals(doubleArray56, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray59);
        org.junit.Assert.assertArrayEquals(doubleArray59, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray60);
        org.junit.Assert.assertNotNull(matrix67);
        org.junit.Assert.assertTrue("'" + double68 + "' != '" + 0.0d + "'", double68 == 0.0d);
    }

    @Test
    public void test4515() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4515");
        com.operations.Matrix.Matrix matrix2 = com.operations.Matrix.MatrixTransformations.project2D(145.11374848717816d, 131.06486943494812d);
        org.junit.Assert.assertNotNull(matrix2);
    }

    @Test
    public void test4516() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4516");
        com.operations.Matrix.Matrix matrix1 = com.operations.Matrix.MatrixTransformations.rotate2D(350.0d);
        com.operations.Matrix.Matrix matrix2 = com.operations.Matrix.MatrixDecompositions.choleskyDecomposition(matrix1);
        com.operations.Matrix.Matrix matrix4 = com.operations.Matrix.MatrixTransformations.rotate2D(32.0d);
        com.operations.Matrix.Matrix matrix7 = com.operations.Matrix.MatrixTransformations.scale2D((double) 10L, 35.0d);
        matrix7.print();
        boolean boolean9 = com.operations.Matrix.MatrixUtils.isSquare(matrix7);
        com.operations.Matrix.Matrix matrix11 = com.operations.Matrix.MatrixTransformations.rotate2D((-1.0d));
        com.operations.Matrix.Matrix matrix13 = com.operations.Matrix.MatrixTransformations.rotate2D((double) (-1L));
        com.operations.Matrix.Matrix matrix15 = com.operations.Matrix.MatrixTransformations.rotate2D((double) (short) 100);
        double[] doubleArray18 = new double[] { 137.90576492663388d, (byte) -1 };
        double[] doubleArray19 = com.operations.Matrix.MatrixSolver.solveGaussian(matrix15, doubleArray18);
        double[] doubleArray20 = com.operations.Matrix.MatrixSolver.solveGaussian(matrix13, doubleArray18);
        double[] doubleArray21 = com.operations.Matrix.MatrixSolver.solveGaussian(matrix11, doubleArray18);
        double[] doubleArray22 = com.operations.Matrix.MatrixSolver.solveGaussian(matrix7, doubleArray18);
        double[] doubleArray23 = com.operations.Matrix.MatrixSolver.solveGaussian(matrix4, doubleArray18);
        double[] doubleArray24 = com.operations.Matrix.MatrixSolver.solveGaussian(matrix2, doubleArray18);
        boolean boolean25 = com.operations.Matrix.MatrixUtils.isSquare(matrix2);
        org.junit.Assert.assertNotNull(matrix1);
        org.junit.Assert.assertNotNull(matrix2);
        org.junit.Assert.assertNotNull(matrix4);
        org.junit.Assert.assertNotNull(matrix7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertNotNull(matrix11);
        org.junit.Assert.assertNotNull(matrix13);
        org.junit.Assert.assertNotNull(matrix15);
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertArrayEquals(doubleArray18, new double[] { 137.90576492663388d, (-1.0d) }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertArrayEquals(doubleArray19, new double[] { (-24.931892522286255d), (-135.63701830716116d) }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertArrayEquals(doubleArray20, new double[] { 137.90221361711127d, 1.4069397643877004d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertArrayEquals(doubleArray21, new double[] { 137.90221361711127d, 1.4069397643877004d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertArrayEquals(doubleArray22, new double[] { 13.790576492663387d, (-0.02857142857142857d) }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertArrayEquals(doubleArray23, new double[] { 116.4208021307943d, (-73.92696957959556d) }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertArrayEquals(doubleArray24, new double[] { 138.96540326586003d, 23.86966446838909d }, 1.0E-15);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
    }

    @Test
    public void test4517() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4517");
        com.operations.Matrix.Matrix matrix1 = com.operations.Matrix.MatrixTransformations.rotate2D((double) '4');
        double[] doubleArray4 = new double[] { 10, 'a' };
        double[] doubleArray7 = new double[] { 10, 'a' };
        double[][] doubleArray8 = new double[][] { doubleArray4, doubleArray7 };
        com.operations.Matrix.Matrix matrix9 = new com.operations.Matrix.Matrix(doubleArray8);
        com.operations.Matrix.Matrix matrix10 = new com.operations.Matrix.Matrix(doubleArray8);
        com.operations.Matrix.Matrix matrix12 = com.operations.Matrix.MatrixTransformations.rotate2D((double) (short) 100);
        double[] doubleArray15 = new double[] { 137.90576492663388d, (byte) -1 };
        double[] doubleArray16 = com.operations.Matrix.MatrixSolver.solveGaussian(matrix12, doubleArray15);
        com.operations.Matrix.Matrix matrix17 = com.operations.Matrix.MatrixOperations.add(matrix10, matrix12);
        boolean boolean18 = com.operations.Matrix.MatrixUtils.isSymmetric(matrix17);
        boolean boolean20 = com.operations.Matrix.MatrixUtils.compare(matrix1, matrix17, 364.0054944640259d);
        com.operations.Matrix.Matrix matrix23 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0L, (double) (byte) 10);
        int int24 = matrix23.getRows();
        com.operations.Matrix.Matrix matrix26 = com.operations.Matrix.MatrixOperations.scalarMultiply(matrix23, (double) 2);
        matrix23.print();
        com.operations.Matrix.Matrix matrix28 = com.operations.Matrix.MatrixOperations.multiply(matrix17, matrix23);
        com.operations.Matrix.Matrix matrix31 = com.operations.Matrix.MatrixTransformations.project2D((double) ' ', 0.0d);
        double[] doubleArray34 = new double[] { 10, 'a' };
        double[] doubleArray37 = new double[] { 10, 'a' };
        double[][] doubleArray38 = new double[][] { doubleArray34, doubleArray37 };
        com.operations.Matrix.Matrix matrix39 = new com.operations.Matrix.Matrix(doubleArray38);
        int int40 = matrix39.getCols();
        boolean boolean41 = com.operations.Matrix.MatrixUtils.isSquare(matrix39);
        com.operations.Matrix.Matrix matrix42 = com.operations.Matrix.MatrixOperations.transpose(matrix39);
        int int43 = matrix42.getRows();
        com.operations.Matrix.Matrix matrix46 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0L, (double) (byte) 10);
        double[] doubleArray49 = new double[] { 10, 'a' };
        double[] doubleArray52 = new double[] { 10, 'a' };
        double[][] doubleArray53 = new double[][] { doubleArray49, doubleArray52 };
        com.operations.Matrix.Matrix matrix54 = new com.operations.Matrix.Matrix(doubleArray53);
        int int55 = matrix54.getCols();
        int int56 = matrix54.getCols();
        int int57 = matrix54.getCols();
        com.operations.Matrix.Matrix[] matrixArray58 = com.operations.Matrix.MatrixDecompositions.luDecomposition(matrix54);
        com.operations.Matrix.Matrix matrix59 = com.operations.Matrix.MatrixOperations.multiply(matrix46, matrix54);
        com.operations.Matrix.Matrix matrix61 = com.operations.Matrix.MatrixTransformations.rotate2D((double) (short) 100);
        boolean boolean63 = com.operations.Matrix.MatrixUtils.compare(matrix54, matrix61, (double) (byte) 0);
        com.operations.Matrix.Matrix matrix64 = com.operations.Matrix.MatrixOperations.multiply(matrix42, matrix54);
        com.operations.Matrix.Matrix matrix65 = com.operations.Matrix.MatrixOperations.add(matrix31, matrix54);
        matrix54.print();
        com.operations.Matrix.Matrix matrix67 = com.operations.Matrix.MatrixOperations.add(matrix23, matrix54);
        com.operations.Matrix.Matrix matrix68 = com.operations.Matrix.MatrixOperations.transpose(matrix23);
        boolean boolean69 = com.operations.Matrix.MatrixUtils.isSquare(matrix23);
        com.operations.Matrix.Matrix matrix70 = com.operations.Matrix.MatrixOperations.transpose(matrix23);
        matrix23.print();
        matrix23.print();
        org.junit.Assert.assertNotNull(matrix1);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertArrayEquals(doubleArray4, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertArrayEquals(doubleArray7, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertNotNull(matrix12);
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertArrayEquals(doubleArray15, new double[] { 137.90576492663388d, (-1.0d) }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertArrayEquals(doubleArray16, new double[] { (-24.931892522286255d), (-135.63701830716116d) }, 1.0E-15);
        org.junit.Assert.assertNotNull(matrix17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertNotNull(matrix23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 2 + "'", int24 == 2);
        org.junit.Assert.assertNotNull(matrix26);
        org.junit.Assert.assertNotNull(matrix28);
        org.junit.Assert.assertNotNull(matrix31);
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertArrayEquals(doubleArray34, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertArrayEquals(doubleArray37, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 2 + "'", int40 == 2);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertNotNull(matrix42);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 2 + "'", int43 == 2);
        org.junit.Assert.assertNotNull(matrix46);
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertArrayEquals(doubleArray49, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertArrayEquals(doubleArray52, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 2 + "'", int55 == 2);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 2 + "'", int56 == 2);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 2 + "'", int57 == 2);
        org.junit.Assert.assertNotNull(matrixArray58);
        org.junit.Assert.assertNotNull(matrix59);
        org.junit.Assert.assertNotNull(matrix61);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNotNull(matrix64);
        org.junit.Assert.assertNotNull(matrix65);
        org.junit.Assert.assertNotNull(matrix67);
        org.junit.Assert.assertNotNull(matrix68);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + true + "'", boolean69 == true);
        org.junit.Assert.assertNotNull(matrix70);
    }

    @Test
    public void test4518() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4518");
        com.operations.Matrix.Matrix matrix2 = com.operations.Matrix.MatrixTransformations.project2D(1363.6076983299943d, 137.90576492663388d);
        int int3 = matrix2.getRows();
        org.junit.Assert.assertNotNull(matrix2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 2 + "'", int3 == 2);
    }

    @Test
    public void test4519() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4519");
        com.operations.Matrix.Matrix matrix1 = com.operations.Matrix.MatrixTransformations.rotate2D((double) '4');
        double[] doubleArray4 = new double[] { 10, 'a' };
        double[] doubleArray7 = new double[] { 10, 'a' };
        double[][] doubleArray8 = new double[][] { doubleArray4, doubleArray7 };
        com.operations.Matrix.Matrix matrix9 = new com.operations.Matrix.Matrix(doubleArray8);
        com.operations.Matrix.Matrix matrix10 = new com.operations.Matrix.Matrix(doubleArray8);
        com.operations.Matrix.Matrix matrix12 = com.operations.Matrix.MatrixTransformations.rotate2D((double) (short) 100);
        double[] doubleArray15 = new double[] { 137.90576492663388d, (byte) -1 };
        double[] doubleArray16 = com.operations.Matrix.MatrixSolver.solveGaussian(matrix12, doubleArray15);
        com.operations.Matrix.Matrix matrix17 = com.operations.Matrix.MatrixOperations.add(matrix10, matrix12);
        boolean boolean18 = com.operations.Matrix.MatrixUtils.isSymmetric(matrix17);
        boolean boolean20 = com.operations.Matrix.MatrixUtils.compare(matrix1, matrix17, 364.0054944640259d);
        com.operations.Matrix.Matrix matrix23 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0L, (double) (byte) 10);
        int int24 = matrix23.getRows();
        com.operations.Matrix.Matrix matrix26 = com.operations.Matrix.MatrixOperations.scalarMultiply(matrix23, (double) 2);
        matrix23.print();
        com.operations.Matrix.Matrix matrix28 = com.operations.Matrix.MatrixOperations.multiply(matrix17, matrix23);
        com.operations.Matrix.Matrix matrix29 = com.operations.Matrix.MatrixOperations.transpose(matrix28);
        com.operations.Matrix.Matrix matrix31 = com.operations.Matrix.MatrixTransformations.rotate2D(100.0d);
        int int32 = matrix31.getCols();
        double[][] doubleArray33 = matrix31.getData();
        double[] doubleArray36 = new double[] { 10, 'a' };
        double[] doubleArray39 = new double[] { 10, 'a' };
        double[][] doubleArray40 = new double[][] { doubleArray36, doubleArray39 };
        com.operations.Matrix.Matrix matrix41 = new com.operations.Matrix.Matrix(doubleArray40);
        com.operations.Matrix.Matrix matrix42 = com.operations.Matrix.MatrixOperations.transpose(matrix41);
        com.operations.Matrix.Matrix matrix45 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0L, (double) (byte) 10);
        int int46 = matrix45.getRows();
        com.operations.Matrix.Matrix matrix52 = com.operations.Matrix.MatrixUtils.generateRandomMatrix(100, (int) (byte) 1, (int) '#', (int) '#', 1L);
        boolean boolean54 = com.operations.Matrix.MatrixUtils.compare(matrix45, matrix52, (double) 1.0f);
        com.operations.Matrix.Matrix matrix56 = com.operations.Matrix.MatrixOperations.scalarMultiply(matrix45, (double) 1L);
        matrix45.print();
        com.operations.Matrix.Matrix matrix58 = com.operations.Matrix.MatrixOperations.multiply(matrix42, matrix45);
        boolean boolean60 = com.operations.Matrix.MatrixUtils.compare(matrix31, matrix58, (double) 0.0f);
        boolean boolean61 = com.operations.Matrix.MatrixUtils.isSquare(matrix58);
        double double62 = com.operations.Matrix.MatrixUtils.frobeniusNorm(matrix58);
        com.operations.Matrix.Matrix matrix63 = com.operations.Matrix.MatrixOperations.subtract(matrix28, matrix58);
        boolean boolean64 = com.operations.Matrix.MatrixUtils.isSymmetric(matrix28);
        int int65 = matrix28.getCols();
        double[][] doubleArray66 = matrix28.getData();
        org.junit.Assert.assertNotNull(matrix1);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertArrayEquals(doubleArray4, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertArrayEquals(doubleArray7, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertNotNull(matrix12);
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertArrayEquals(doubleArray15, new double[] { 137.90576492663388d, (-1.0d) }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertArrayEquals(doubleArray16, new double[] { (-24.931892522286255d), (-135.63701830716116d) }, 1.0E-15);
        org.junit.Assert.assertNotNull(matrix17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertNotNull(matrix23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 2 + "'", int24 == 2);
        org.junit.Assert.assertNotNull(matrix26);
        org.junit.Assert.assertNotNull(matrix28);
        org.junit.Assert.assertNotNull(matrix29);
        org.junit.Assert.assertNotNull(matrix31);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 2 + "'", int32 == 2);
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertArrayEquals(doubleArray36, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertArrayEquals(doubleArray39, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertNotNull(matrix42);
        org.junit.Assert.assertNotNull(matrix45);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 2 + "'", int46 == 2);
        org.junit.Assert.assertNotNull(matrix52);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(matrix56);
        org.junit.Assert.assertNotNull(matrix58);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + true + "'", boolean61 == true);
        org.junit.Assert.assertTrue("'" + double62 + "' != '" + 975.1410154434076d + "'", double62 == 975.1410154434076d);
        org.junit.Assert.assertNotNull(matrix63);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 2 + "'", int65 == 2);
        org.junit.Assert.assertNotNull(doubleArray66);
    }

    @Test
    public void test4520() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4520");
        com.operations.Matrix.Matrix matrix2 = com.operations.Matrix.MatrixTransformations.project2D(310.45666917731234d, 18.985133644271098d);
        org.junit.Assert.assertNotNull(matrix2);
    }

    @Test
    public void test4521() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4521");
        com.operations.Matrix.Matrix matrix2 = com.operations.Matrix.MatrixTransformations.project2D(0.0d, 10.0d);
        org.junit.Assert.assertNotNull(matrix2);
    }

    @Test
    public void test4522() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4522");
        com.operations.Matrix.Matrix matrix1 = com.operations.Matrix.MatrixTransformations.rotate2D(101.9803902718557d);
        org.junit.Assert.assertNotNull(matrix1);
    }

    @Test
    public void test4523() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4523");
        com.operations.Matrix.Matrix matrix2 = com.operations.Matrix.MatrixTransformations.project2D(12.790922166892882d, 145.11374848717816d);
        com.operations.Matrix.Matrix matrix4 = com.operations.Matrix.MatrixTransformations.rotate2D((double) 1.0f);
        com.operations.Matrix.Matrix matrix7 = com.operations.Matrix.MatrixTransformations.project2D((double) (byte) 100, 32.0d);
        double[] doubleArray10 = new double[] { 10, 'a' };
        double[] doubleArray13 = new double[] { 10, 'a' };
        double[][] doubleArray14 = new double[][] { doubleArray10, doubleArray13 };
        com.operations.Matrix.Matrix matrix15 = new com.operations.Matrix.Matrix(doubleArray14);
        int int16 = matrix15.getCols();
        int int17 = matrix15.getCols();
        int int18 = matrix15.getCols();
        com.operations.Matrix.Matrix matrix24 = com.operations.Matrix.MatrixUtils.generateRandomMatrix(100, (int) (byte) 1, (int) '#', (int) '#', 1L);
        double double27 = matrix24.getValue((int) '4', 0);
        double double28 = com.operations.Matrix.MatrixUtils.frobeniusNorm(matrix24);
        boolean boolean29 = com.operations.Matrix.MatrixUtils.isSquare(matrix24);
        boolean boolean31 = com.operations.Matrix.MatrixUtils.compare(matrix15, matrix24, (double) 100L);
        int int32 = matrix15.getCols();
        com.operations.Matrix.Matrix matrix33 = com.operations.Matrix.MatrixOperations.transpose(matrix15);
        boolean boolean35 = com.operations.Matrix.MatrixUtils.compare(matrix7, matrix15, 137.15495886388925d);
        boolean boolean36 = com.operations.Matrix.MatrixUtils.isSymmetric(matrix7);
        com.operations.Matrix.Matrix matrix37 = com.operations.Matrix.MatrixOperations.subtract(matrix4, matrix7);
        com.operations.Matrix.Matrix matrix38 = com.operations.Matrix.MatrixOperations.subtract(matrix2, matrix4);
        com.operations.Matrix.Matrix matrix41 = com.operations.Matrix.MatrixTransformations.project2D(0.0d, (double) 0);
        com.operations.Matrix.Matrix[] matrixArray42 = com.operations.Matrix.MatrixDecompositions.luDecomposition(matrix41);
        com.operations.Matrix.Matrix matrix45 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0L, (double) (byte) 10);
        int int46 = matrix45.getRows();
        com.operations.Matrix.Matrix matrix48 = com.operations.Matrix.MatrixOperations.scalarMultiply(matrix45, (double) 2);
        double double49 = com.operations.Matrix.MatrixUtils.frobeniusNorm(matrix45);
        int int50 = matrix45.getRows();
        com.operations.Matrix.Matrix matrix51 = com.operations.Matrix.MatrixOperations.transpose(matrix45);
        com.operations.Matrix.Matrix matrix52 = com.operations.Matrix.MatrixOperations.multiply(matrix41, matrix51);
        double[][] doubleArray53 = matrix41.getData();
        com.operations.Matrix.Matrix matrix56 = com.operations.Matrix.MatrixTransformations.project2D((double) '#', 364.0054944640259d);
        matrix56.print();
        com.operations.Matrix.Matrix[] matrixArray58 = com.operations.Matrix.MatrixDecompositions.luDecomposition(matrix56);
        com.operations.Matrix.Matrix matrix59 = com.operations.Matrix.MatrixOperations.multiply(matrix41, matrix56);
        com.operations.Matrix.Matrix matrix60 = com.operations.Matrix.MatrixOperations.multiply(matrix38, matrix56);
        org.junit.Assert.assertNotNull(matrix2);
        org.junit.Assert.assertNotNull(matrix4);
        org.junit.Assert.assertNotNull(matrix7);
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertArrayEquals(doubleArray10, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertArrayEquals(doubleArray13, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 2 + "'", int16 == 2);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 2 + "'", int17 == 2);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 2 + "'", int18 == 2);
        org.junit.Assert.assertNotNull(matrix24);
        org.junit.Assert.assertTrue("'" + double27 + "' != '" + 35.0d + "'", double27 == 35.0d);
        org.junit.Assert.assertTrue("'" + double28 + "' != '" + 350.0d + "'", double28 == 350.0d);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 2 + "'", int32 == 2);
        org.junit.Assert.assertNotNull(matrix33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertNotNull(matrix37);
        org.junit.Assert.assertNotNull(matrix38);
        org.junit.Assert.assertNotNull(matrix41);
        org.junit.Assert.assertNotNull(matrixArray42);
        org.junit.Assert.assertNotNull(matrix45);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 2 + "'", int46 == 2);
        org.junit.Assert.assertNotNull(matrix48);
        org.junit.Assert.assertTrue("'" + double49 + "' != '" + 10.0d + "'", double49 == 10.0d);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 2 + "'", int50 == 2);
        org.junit.Assert.assertNotNull(matrix51);
        org.junit.Assert.assertNotNull(matrix52);
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertNotNull(matrix56);
        org.junit.Assert.assertNotNull(matrixArray58);
        org.junit.Assert.assertNotNull(matrix59);
        org.junit.Assert.assertNotNull(matrix60);
    }

    @Test
    public void test4524() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4524");
        double[] doubleArray2 = new double[] { 10, 'a' };
        double[] doubleArray5 = new double[] { 10, 'a' };
        double[][] doubleArray6 = new double[][] { doubleArray2, doubleArray5 };
        com.operations.Matrix.Matrix matrix7 = new com.operations.Matrix.Matrix(doubleArray6);
        int int8 = matrix7.getCols();
        int int9 = matrix7.getCols();
        matrix7.print();
        double[] doubleArray13 = new double[] { 10, 'a' };
        double[] doubleArray16 = new double[] { 10, 'a' };
        double[][] doubleArray17 = new double[][] { doubleArray13, doubleArray16 };
        com.operations.Matrix.Matrix matrix18 = new com.operations.Matrix.Matrix(doubleArray17);
        boolean boolean20 = com.operations.Matrix.MatrixUtils.compare(matrix7, matrix18, (double) (-1));
        double[][] doubleArray21 = matrix7.getData();
        int int22 = matrix7.getRows();
        double[][] doubleArray23 = matrix7.getData();
        // The following exception was thrown during execution in test generation
        try {
            matrix7.setValue((int) '#', (int) (short) 100, 11.489125293076057d);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: Index 35 out of bounds for length 2");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertArrayEquals(doubleArray2, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertArrayEquals(doubleArray5, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 2 + "'", int8 == 2);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 2 + "'", int9 == 2);
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertArrayEquals(doubleArray13, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertArrayEquals(doubleArray16, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 2 + "'", int22 == 2);
        org.junit.Assert.assertNotNull(doubleArray23);
    }

    @Test
    public void test4525() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4525");
        com.operations.Matrix.Matrix matrix2 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0L, (double) (byte) 10);
        double[] doubleArray5 = new double[] { 10, 'a' };
        double[] doubleArray8 = new double[] { 10, 'a' };
        double[][] doubleArray9 = new double[][] { doubleArray5, doubleArray8 };
        com.operations.Matrix.Matrix matrix10 = new com.operations.Matrix.Matrix(doubleArray9);
        int int11 = matrix10.getCols();
        int int12 = matrix10.getCols();
        int int13 = matrix10.getCols();
        com.operations.Matrix.Matrix[] matrixArray14 = com.operations.Matrix.MatrixDecompositions.luDecomposition(matrix10);
        com.operations.Matrix.Matrix matrix15 = com.operations.Matrix.MatrixOperations.multiply(matrix2, matrix10);
        com.operations.Matrix.Matrix matrix17 = com.operations.Matrix.MatrixTransformations.rotate2D((double) (short) 100);
        boolean boolean19 = com.operations.Matrix.MatrixUtils.compare(matrix10, matrix17, (double) (byte) 0);
        com.operations.Matrix.Matrix matrix20 = com.operations.Matrix.MatrixOperations.transpose(matrix10);
        com.operations.Matrix.Matrix matrix22 = com.operations.Matrix.MatrixOperations.scalarMultiply(matrix20, (double) 10);
        double[] doubleArray25 = new double[] { 10, 'a' };
        double[] doubleArray28 = new double[] { 10, 'a' };
        double[][] doubleArray29 = new double[][] { doubleArray25, doubleArray28 };
        com.operations.Matrix.Matrix matrix30 = new com.operations.Matrix.Matrix(doubleArray29);
        int int31 = matrix30.getCols();
        int int32 = matrix30.getCols();
        int int33 = matrix30.getCols();
        com.operations.Matrix.Matrix matrix39 = com.operations.Matrix.MatrixUtils.generateRandomMatrix(100, (int) (byte) 1, (int) '#', (int) '#', 1L);
        double double42 = matrix39.getValue((int) '4', 0);
        double double43 = com.operations.Matrix.MatrixUtils.frobeniusNorm(matrix39);
        boolean boolean44 = com.operations.Matrix.MatrixUtils.isSquare(matrix39);
        boolean boolean46 = com.operations.Matrix.MatrixUtils.compare(matrix30, matrix39, (double) 100L);
        com.operations.Matrix.Matrix matrix47 = com.operations.Matrix.MatrixDecompositions.choleskyDecomposition(matrix30);
        boolean boolean49 = com.operations.Matrix.MatrixUtils.compare(matrix20, matrix47, 0.0d);
        int int50 = matrix47.getRows();
        org.junit.Assert.assertNotNull(matrix2);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertArrayEquals(doubleArray5, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertArrayEquals(doubleArray8, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 2 + "'", int11 == 2);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 2 + "'", int12 == 2);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 2 + "'", int13 == 2);
        org.junit.Assert.assertNotNull(matrixArray14);
        org.junit.Assert.assertNotNull(matrix15);
        org.junit.Assert.assertNotNull(matrix17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(matrix20);
        org.junit.Assert.assertNotNull(matrix22);
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertArrayEquals(doubleArray25, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertArrayEquals(doubleArray28, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 2 + "'", int31 == 2);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 2 + "'", int32 == 2);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 2 + "'", int33 == 2);
        org.junit.Assert.assertNotNull(matrix39);
        org.junit.Assert.assertTrue("'" + double42 + "' != '" + 35.0d + "'", double42 == 35.0d);
        org.junit.Assert.assertTrue("'" + double43 + "' != '" + 350.0d + "'", double43 == 350.0d);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(matrix47);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 2 + "'", int50 == 2);
    }

    @Test
    public void test4526() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4526");
        com.operations.Matrix.Matrix matrix1 = com.operations.Matrix.MatrixTransformations.rotate2D((double) (short) 100);
        double[] doubleArray4 = new double[] { 137.90576492663388d, (byte) -1 };
        double[] doubleArray5 = com.operations.Matrix.MatrixSolver.solveGaussian(matrix1, doubleArray4);
        com.operations.Matrix.Matrix matrix8 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0L, (double) (byte) 10);
        double[] doubleArray11 = new double[] { 10, 'a' };
        double[] doubleArray14 = new double[] { 10, 'a' };
        double[][] doubleArray15 = new double[][] { doubleArray11, doubleArray14 };
        com.operations.Matrix.Matrix matrix16 = new com.operations.Matrix.Matrix(doubleArray15);
        int int17 = matrix16.getCols();
        int int18 = matrix16.getCols();
        int int19 = matrix16.getCols();
        com.operations.Matrix.Matrix[] matrixArray20 = com.operations.Matrix.MatrixDecompositions.luDecomposition(matrix16);
        com.operations.Matrix.Matrix matrix21 = com.operations.Matrix.MatrixOperations.multiply(matrix8, matrix16);
        boolean boolean23 = com.operations.Matrix.MatrixUtils.compare(matrix1, matrix8, (double) (-1L));
        com.operations.Matrix.Matrix matrix25 = com.operations.Matrix.MatrixTransformations.rotate2D((-1.0d));
        com.operations.Matrix.Matrix matrix27 = com.operations.Matrix.MatrixTransformations.rotate2D((double) (-1L));
        com.operations.Matrix.Matrix matrix29 = com.operations.Matrix.MatrixTransformations.rotate2D((double) (short) 100);
        double[] doubleArray32 = new double[] { 137.90576492663388d, (byte) -1 };
        double[] doubleArray33 = com.operations.Matrix.MatrixSolver.solveGaussian(matrix29, doubleArray32);
        double[] doubleArray34 = com.operations.Matrix.MatrixSolver.solveGaussian(matrix27, doubleArray32);
        double[] doubleArray35 = com.operations.Matrix.MatrixSolver.solveGaussian(matrix25, doubleArray32);
        boolean boolean37 = com.operations.Matrix.MatrixUtils.compare(matrix8, matrix25, (double) '4');
        double[] doubleArray40 = new double[] { 10, 'a' };
        double[] doubleArray43 = new double[] { 10, 'a' };
        double[][] doubleArray44 = new double[][] { doubleArray40, doubleArray43 };
        com.operations.Matrix.Matrix matrix45 = new com.operations.Matrix.Matrix(doubleArray44);
        com.operations.Matrix.Matrix matrix46 = new com.operations.Matrix.Matrix(doubleArray44);
        com.operations.Matrix.Matrix matrix48 = com.operations.Matrix.MatrixTransformations.rotate2D((double) (short) 100);
        double[] doubleArray51 = new double[] { 137.90576492663388d, (byte) -1 };
        double[] doubleArray52 = com.operations.Matrix.MatrixSolver.solveGaussian(matrix48, doubleArray51);
        com.operations.Matrix.Matrix matrix53 = com.operations.Matrix.MatrixOperations.add(matrix46, matrix48);
        com.operations.Matrix.Matrix matrix54 = com.operations.Matrix.MatrixOperations.transpose(matrix48);
        int int55 = matrix48.getCols();
        com.operations.Matrix.Matrix matrix58 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0L, (double) (byte) 10);
        double[] doubleArray61 = new double[] { 10, 'a' };
        double[] doubleArray64 = new double[] { 10, 'a' };
        double[][] doubleArray65 = new double[][] { doubleArray61, doubleArray64 };
        com.operations.Matrix.Matrix matrix66 = new com.operations.Matrix.Matrix(doubleArray65);
        int int67 = matrix66.getCols();
        int int68 = matrix66.getCols();
        int int69 = matrix66.getCols();
        com.operations.Matrix.Matrix[] matrixArray70 = com.operations.Matrix.MatrixDecompositions.luDecomposition(matrix66);
        com.operations.Matrix.Matrix matrix71 = com.operations.Matrix.MatrixOperations.multiply(matrix58, matrix66);
        com.operations.Matrix.Matrix matrix73 = com.operations.Matrix.MatrixTransformations.rotate2D((double) (short) 100);
        boolean boolean75 = com.operations.Matrix.MatrixUtils.compare(matrix66, matrix73, (double) (byte) 0);
        boolean boolean76 = com.operations.Matrix.MatrixUtils.isSymmetric(matrix73);
        boolean boolean77 = com.operations.Matrix.MatrixUtils.isSquare(matrix73);
        com.operations.Matrix.Matrix matrix79 = com.operations.Matrix.MatrixTransformations.rotate2D((double) (short) 100);
        boolean boolean81 = com.operations.Matrix.MatrixUtils.compare(matrix73, matrix79, (double) (byte) 100);
        matrix79.print();
        com.operations.Matrix.Matrix matrix83 = com.operations.Matrix.MatrixOperations.add(matrix48, matrix79);
        com.operations.Matrix.Matrix matrix84 = com.operations.Matrix.MatrixOperations.subtract(matrix25, matrix79);
        com.operations.Matrix.Matrix matrix85 = com.operations.Matrix.MatrixOperations.transpose(matrix79);
        com.operations.Matrix.Matrix matrix87 = com.operations.Matrix.MatrixTransformations.rotate2D((double) (-1L));
        com.operations.Matrix.Matrix matrix89 = com.operations.Matrix.MatrixTransformations.rotate2D((double) (short) 100);
        double[] doubleArray92 = new double[] { 137.90576492663388d, (byte) -1 };
        double[] doubleArray93 = com.operations.Matrix.MatrixSolver.solveGaussian(matrix89, doubleArray92);
        double[] doubleArray94 = com.operations.Matrix.MatrixSolver.solveGaussian(matrix87, doubleArray92);
        double[] doubleArray95 = com.operations.Matrix.MatrixSolver.solveGaussian(matrix85, doubleArray92);
        org.junit.Assert.assertNotNull(matrix1);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertArrayEquals(doubleArray4, new double[] { 137.90576492663388d, (-1.0d) }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertArrayEquals(doubleArray5, new double[] { (-24.931892522286255d), (-135.63701830716116d) }, 1.0E-15);
        org.junit.Assert.assertNotNull(matrix8);
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertArrayEquals(doubleArray11, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertArrayEquals(doubleArray14, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 2 + "'", int17 == 2);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 2 + "'", int18 == 2);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 2 + "'", int19 == 2);
        org.junit.Assert.assertNotNull(matrixArray20);
        org.junit.Assert.assertNotNull(matrix21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(matrix25);
        org.junit.Assert.assertNotNull(matrix27);
        org.junit.Assert.assertNotNull(matrix29);
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertArrayEquals(doubleArray32, new double[] { 137.90576492663388d, (-1.0d) }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertArrayEquals(doubleArray33, new double[] { (-24.931892522286255d), (-135.63701830716116d) }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertArrayEquals(doubleArray34, new double[] { 137.90221361711127d, 1.4069397643877004d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertArrayEquals(doubleArray35, new double[] { 137.90221361711127d, 1.4069397643877004d }, 1.0E-15);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertArrayEquals(doubleArray40, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertArrayEquals(doubleArray43, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertNotNull(matrix48);
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertArrayEquals(doubleArray51, new double[] { 137.90576492663388d, (-1.0d) }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertArrayEquals(doubleArray52, new double[] { (-24.931892522286255d), (-135.63701830716116d) }, 1.0E-15);
        org.junit.Assert.assertNotNull(matrix53);
        org.junit.Assert.assertNotNull(matrix54);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 2 + "'", int55 == 2);
        org.junit.Assert.assertNotNull(matrix58);
        org.junit.Assert.assertNotNull(doubleArray61);
        org.junit.Assert.assertArrayEquals(doubleArray61, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray64);
        org.junit.Assert.assertArrayEquals(doubleArray64, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray65);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 2 + "'", int67 == 2);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 2 + "'", int68 == 2);
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 2 + "'", int69 == 2);
        org.junit.Assert.assertNotNull(matrixArray70);
        org.junit.Assert.assertNotNull(matrix71);
        org.junit.Assert.assertNotNull(matrix73);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + true + "'", boolean77 == true);
        org.junit.Assert.assertNotNull(matrix79);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + true + "'", boolean81 == true);
        org.junit.Assert.assertNotNull(matrix83);
        org.junit.Assert.assertNotNull(matrix84);
        org.junit.Assert.assertNotNull(matrix85);
        org.junit.Assert.assertNotNull(matrix87);
        org.junit.Assert.assertNotNull(matrix89);
        org.junit.Assert.assertNotNull(doubleArray92);
        org.junit.Assert.assertArrayEquals(doubleArray92, new double[] { 137.90576492663388d, (-1.0d) }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray93);
        org.junit.Assert.assertArrayEquals(doubleArray93, new double[] { (-24.931892522286255d), (-135.63701830716116d) }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray94);
        org.junit.Assert.assertArrayEquals(doubleArray94, new double[] { 137.90221361711127d, 1.4069397643877004d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray95);
        org.junit.Assert.assertArrayEquals(doubleArray95, new double[] { (-22.962277016261844d), 135.98431466249502d }, 1.0E-15);
    }

    @Test
    public void test4527() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4527");
        com.operations.Matrix.Matrix matrix2 = com.operations.Matrix.MatrixTransformations.project2D(3.618031071604718d, 100.0d);
        com.operations.Matrix.Matrix matrix3 = com.operations.Matrix.MatrixDecompositions.choleskyDecomposition(matrix2);
        boolean boolean4 = com.operations.Matrix.MatrixUtils.isSquare(matrix2);
        org.junit.Assert.assertNotNull(matrix2);
        org.junit.Assert.assertNotNull(matrix3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
    }

    @Test
    public void test4528() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4528");
        com.operations.Matrix.Matrix matrix2 = com.operations.Matrix.MatrixTransformations.scale2D((double) ' ', (double) 0L);
        com.operations.Matrix.Matrix matrix4 = com.operations.Matrix.MatrixTransformations.rotate2D((double) (-1L));
        matrix4.print();
        double[][] doubleArray6 = matrix4.getData();
        com.operations.Matrix.Matrix matrix7 = new com.operations.Matrix.Matrix(doubleArray6);
        com.operations.Matrix.Matrix matrix8 = com.operations.Matrix.MatrixOperations.multiply(matrix2, matrix7);
        java.lang.Class<?> wildcardClass9 = matrix8.getClass();
        org.junit.Assert.assertNotNull(matrix2);
        org.junit.Assert.assertNotNull(matrix4);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertNotNull(matrix8);
        org.junit.Assert.assertNotNull(wildcardClass9);
    }

    @Test
    public void test4529() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4529");
        double[] doubleArray2 = new double[] { 10, 'a' };
        double[] doubleArray5 = new double[] { 10, 'a' };
        double[][] doubleArray6 = new double[][] { doubleArray2, doubleArray5 };
        com.operations.Matrix.Matrix matrix7 = new com.operations.Matrix.Matrix(doubleArray6);
        com.operations.Matrix.Matrix matrix8 = new com.operations.Matrix.Matrix(doubleArray6);
        com.operations.Matrix.Matrix[] matrixArray9 = com.operations.Matrix.MatrixDecompositions.luDecomposition(matrix8);
        double double10 = com.operations.Matrix.MatrixUtils.frobeniusNorm(matrix8);
        double[] doubleArray13 = new double[] { 10, 'a' };
        double[] doubleArray16 = new double[] { 10, 'a' };
        double[][] doubleArray17 = new double[][] { doubleArray13, doubleArray16 };
        com.operations.Matrix.Matrix matrix18 = new com.operations.Matrix.Matrix(doubleArray17);
        com.operations.Matrix.Matrix matrix19 = new com.operations.Matrix.Matrix(doubleArray17);
        boolean boolean20 = com.operations.Matrix.MatrixUtils.isSquare(matrix19);
        double[] doubleArray23 = new double[] { 10, 'a' };
        double[] doubleArray26 = new double[] { 10, 'a' };
        double[][] doubleArray27 = new double[][] { doubleArray23, doubleArray26 };
        com.operations.Matrix.Matrix matrix28 = new com.operations.Matrix.Matrix(doubleArray27);
        int int29 = matrix28.getCols();
        int int30 = matrix28.getCols();
        matrix28.print();
        double[] doubleArray34 = new double[] { 10, 'a' };
        double[] doubleArray37 = new double[] { 10, 'a' };
        double[][] doubleArray38 = new double[][] { doubleArray34, doubleArray37 };
        com.operations.Matrix.Matrix matrix39 = new com.operations.Matrix.Matrix(doubleArray38);
        boolean boolean41 = com.operations.Matrix.MatrixUtils.compare(matrix28, matrix39, (double) (-1));
        com.operations.Matrix.Matrix matrix42 = com.operations.Matrix.MatrixOperations.subtract(matrix19, matrix39);
        com.operations.Matrix.Matrix[] matrixArray43 = com.operations.Matrix.MatrixDecompositions.luDecomposition(matrix42);
        double[][] doubleArray44 = matrix42.getData();
        com.operations.Matrix.Matrix matrix47 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0L, (double) (byte) 10);
        double[] doubleArray50 = new double[] { 10, 'a' };
        double[] doubleArray53 = new double[] { 10, 'a' };
        double[][] doubleArray54 = new double[][] { doubleArray50, doubleArray53 };
        com.operations.Matrix.Matrix matrix55 = new com.operations.Matrix.Matrix(doubleArray54);
        int int56 = matrix55.getCols();
        int int57 = matrix55.getCols();
        int int58 = matrix55.getCols();
        com.operations.Matrix.Matrix[] matrixArray59 = com.operations.Matrix.MatrixDecompositions.luDecomposition(matrix55);
        com.operations.Matrix.Matrix matrix60 = com.operations.Matrix.MatrixOperations.multiply(matrix47, matrix55);
        int int61 = matrix55.getRows();
        com.operations.Matrix.Matrix matrix62 = com.operations.Matrix.MatrixOperations.multiply(matrix42, matrix55);
        boolean boolean64 = com.operations.Matrix.MatrixUtils.compare(matrix8, matrix62, (double) 2);
        com.operations.Matrix.Matrix matrix65 = com.operations.Matrix.MatrixOperations.transpose(matrix62);
        matrix65.print();
        java.lang.Class<?> wildcardClass67 = matrix65.getClass();
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertArrayEquals(doubleArray2, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertArrayEquals(doubleArray5, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertNotNull(matrixArray9);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 137.90576492663388d + "'", double10 == 137.90576492663388d);
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertArrayEquals(doubleArray13, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertArrayEquals(doubleArray16, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertArrayEquals(doubleArray23, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertArrayEquals(doubleArray26, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 2 + "'", int29 == 2);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 2 + "'", int30 == 2);
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertArrayEquals(doubleArray34, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertArrayEquals(doubleArray37, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(matrix42);
        org.junit.Assert.assertNotNull(matrixArray43);
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertNotNull(matrix47);
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertArrayEquals(doubleArray50, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertArrayEquals(doubleArray53, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray54);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 2 + "'", int56 == 2);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 2 + "'", int57 == 2);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 2 + "'", int58 == 2);
        org.junit.Assert.assertNotNull(matrixArray59);
        org.junit.Assert.assertNotNull(matrix60);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 2 + "'", int61 == 2);
        org.junit.Assert.assertNotNull(matrix62);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertNotNull(matrix65);
        org.junit.Assert.assertNotNull(wildcardClass67);
    }

    @Test
    public void test4530() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4530");
        com.operations.Matrix.Matrix matrix4 = com.operations.Matrix.MatrixUtils.generateRandomMatrix(2, (int) (short) 1, (int) (short) 100, 0);
        com.operations.Matrix.Matrix matrix6 = com.operations.Matrix.MatrixOperations.scalarMultiply(matrix4, (double) 'a');
        org.junit.Assert.assertNotNull(matrix4);
        org.junit.Assert.assertNotNull(matrix6);
    }

    @Test
    public void test4531() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4531");
        com.operations.Matrix.Matrix matrix2 = com.operations.Matrix.MatrixTransformations.project2D((double) (short) 1, (double) 10L);
        // The following exception was thrown during execution in test generation
        try {
            matrix2.setValue(1, (int) '4', (double) '#');
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: Index 52 out of bounds for length 2");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(matrix2);
    }

    @Test
    public void test4532() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4532");
        com.operations.Matrix.Matrix matrix2 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0L, (double) (byte) 10);
        int int3 = matrix2.getRows();
        com.operations.Matrix.Matrix matrix5 = com.operations.Matrix.MatrixOperations.scalarMultiply(matrix2, (double) 2);
        double double6 = com.operations.Matrix.MatrixUtils.frobeniusNorm(matrix2);
        com.operations.Matrix.Matrix matrix9 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0L, (double) (byte) 10);
        int int10 = matrix9.getRows();
        com.operations.Matrix.Matrix matrix12 = com.operations.Matrix.MatrixOperations.scalarMultiply(matrix9, (double) 2);
        com.operations.Matrix.Matrix matrix13 = com.operations.Matrix.MatrixOperations.subtract(matrix2, matrix12);
        com.operations.Matrix.Matrix matrix15 = com.operations.Matrix.MatrixTransformations.rotate2D((double) (short) 100);
        double[] doubleArray18 = new double[] { 137.90576492663388d, (byte) -1 };
        double[] doubleArray19 = com.operations.Matrix.MatrixSolver.solveGaussian(matrix15, doubleArray18);
        com.operations.Matrix.Matrix matrix22 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0L, (double) (byte) 10);
        double[] doubleArray25 = new double[] { 10, 'a' };
        double[] doubleArray28 = new double[] { 10, 'a' };
        double[][] doubleArray29 = new double[][] { doubleArray25, doubleArray28 };
        com.operations.Matrix.Matrix matrix30 = new com.operations.Matrix.Matrix(doubleArray29);
        int int31 = matrix30.getCols();
        int int32 = matrix30.getCols();
        int int33 = matrix30.getCols();
        com.operations.Matrix.Matrix[] matrixArray34 = com.operations.Matrix.MatrixDecompositions.luDecomposition(matrix30);
        com.operations.Matrix.Matrix matrix35 = com.operations.Matrix.MatrixOperations.multiply(matrix22, matrix30);
        boolean boolean37 = com.operations.Matrix.MatrixUtils.compare(matrix15, matrix22, (double) (-1L));
        double[][] doubleArray38 = matrix15.getData();
        com.operations.Matrix.Matrix matrix41 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0L, (double) 10L);
        boolean boolean43 = com.operations.Matrix.MatrixUtils.compare(matrix15, matrix41, 146.4308710620817d);
        com.operations.Matrix.Matrix matrix44 = com.operations.Matrix.MatrixOperations.subtract(matrix13, matrix41);
        com.operations.Matrix.Matrix matrix47 = com.operations.Matrix.MatrixTransformations.project2D((double) 0L, (double) 0);
        com.operations.Matrix.Matrix[] matrixArray48 = com.operations.Matrix.MatrixDecompositions.luDecomposition(matrix47);
        com.operations.Matrix.Matrix matrix49 = com.operations.Matrix.MatrixOperations.transpose(matrix47);
        com.operations.Matrix.Matrix matrix50 = com.operations.Matrix.MatrixOperations.multiply(matrix41, matrix49);
        com.operations.Matrix.Matrix matrix53 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0.0f, (double) (-1.0f));
        boolean boolean55 = com.operations.Matrix.MatrixUtils.compare(matrix50, matrix53, 0.9998476951563913d);
        org.junit.Assert.assertNotNull(matrix2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 2 + "'", int3 == 2);
        org.junit.Assert.assertNotNull(matrix5);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 10.0d + "'", double6 == 10.0d);
        org.junit.Assert.assertNotNull(matrix9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 2 + "'", int10 == 2);
        org.junit.Assert.assertNotNull(matrix12);
        org.junit.Assert.assertNotNull(matrix13);
        org.junit.Assert.assertNotNull(matrix15);
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertArrayEquals(doubleArray18, new double[] { 137.90576492663388d, (-1.0d) }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertArrayEquals(doubleArray19, new double[] { (-24.931892522286255d), (-135.63701830716116d) }, 1.0E-15);
        org.junit.Assert.assertNotNull(matrix22);
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertArrayEquals(doubleArray25, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertArrayEquals(doubleArray28, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 2 + "'", int31 == 2);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 2 + "'", int32 == 2);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 2 + "'", int33 == 2);
        org.junit.Assert.assertNotNull(matrixArray34);
        org.junit.Assert.assertNotNull(matrix35);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertNotNull(matrix41);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertNotNull(matrix44);
        org.junit.Assert.assertNotNull(matrix47);
        org.junit.Assert.assertNotNull(matrixArray48);
        org.junit.Assert.assertNotNull(matrix49);
        org.junit.Assert.assertNotNull(matrix50);
        org.junit.Assert.assertNotNull(matrix53);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
    }

    @Test
    public void test4533() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4533");
        com.operations.Matrix.Matrix matrix2 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0L, (double) (byte) 10);
        int int3 = matrix2.getRows();
        com.operations.Matrix.Matrix matrix6 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0L, (double) (byte) 10);
        int int7 = matrix6.getRows();
        com.operations.Matrix.Matrix matrix9 = com.operations.Matrix.MatrixOperations.scalarMultiply(matrix6, (double) 2);
        com.operations.Matrix.Matrix matrix10 = com.operations.Matrix.MatrixOperations.subtract(matrix2, matrix6);
        com.operations.Matrix.Matrix matrix13 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0L, (double) (byte) 10);
        int int14 = matrix13.getRows();
        com.operations.Matrix.Matrix matrix20 = com.operations.Matrix.MatrixUtils.generateRandomMatrix(100, (int) (byte) 1, (int) '#', (int) '#', 1L);
        boolean boolean22 = com.operations.Matrix.MatrixUtils.compare(matrix13, matrix20, (double) 1.0f);
        com.operations.Matrix.Matrix matrix24 = com.operations.Matrix.MatrixOperations.scalarMultiply(matrix13, (double) 1L);
        boolean boolean26 = com.operations.Matrix.MatrixUtils.compare(matrix10, matrix24, 0.0d);
        com.operations.Matrix.Matrix matrix28 = com.operations.Matrix.MatrixTransformations.rotate2D((double) (short) 100);
        double[][] doubleArray29 = matrix28.getData();
        com.operations.Matrix.Matrix matrix30 = new com.operations.Matrix.Matrix(doubleArray29);
        com.operations.Matrix.Matrix matrix31 = com.operations.Matrix.MatrixOperations.add(matrix24, matrix30);
        com.operations.Matrix.Matrix matrix32 = com.operations.Matrix.MatrixOperations.transpose(matrix30);
        com.operations.Matrix.Matrix matrix35 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0L, (double) (byte) 10);
        double[] doubleArray38 = new double[] { 10, 'a' };
        double[] doubleArray41 = new double[] { 10, 'a' };
        double[][] doubleArray42 = new double[][] { doubleArray38, doubleArray41 };
        com.operations.Matrix.Matrix matrix43 = new com.operations.Matrix.Matrix(doubleArray42);
        int int44 = matrix43.getCols();
        int int45 = matrix43.getCols();
        int int46 = matrix43.getCols();
        com.operations.Matrix.Matrix[] matrixArray47 = com.operations.Matrix.MatrixDecompositions.luDecomposition(matrix43);
        com.operations.Matrix.Matrix matrix48 = com.operations.Matrix.MatrixOperations.multiply(matrix35, matrix43);
        com.operations.Matrix.Matrix matrix50 = com.operations.Matrix.MatrixTransformations.rotate2D((double) (short) 100);
        boolean boolean52 = com.operations.Matrix.MatrixUtils.compare(matrix43, matrix50, (double) (byte) 0);
        double[] doubleArray55 = new double[] { 10, 'a' };
        double[] doubleArray58 = new double[] { 10, 'a' };
        double[][] doubleArray59 = new double[][] { doubleArray55, doubleArray58 };
        com.operations.Matrix.Matrix matrix60 = new com.operations.Matrix.Matrix(doubleArray59);
        com.operations.Matrix.Matrix matrix61 = new com.operations.Matrix.Matrix(doubleArray59);
        com.operations.Matrix.Matrix matrix62 = new com.operations.Matrix.Matrix(doubleArray59);
        boolean boolean64 = com.operations.Matrix.MatrixUtils.compare(matrix43, matrix62, (double) (-1));
        int int65 = matrix43.getRows();
        boolean boolean67 = com.operations.Matrix.MatrixUtils.compare(matrix32, matrix43, 146.4308710620817d);
        double double68 = com.operations.Matrix.MatrixUtils.frobeniusNorm(matrix32);
        matrix32.print();
        org.junit.Assert.assertNotNull(matrix2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 2 + "'", int3 == 2);
        org.junit.Assert.assertNotNull(matrix6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 2 + "'", int7 == 2);
        org.junit.Assert.assertNotNull(matrix9);
        org.junit.Assert.assertNotNull(matrix10);
        org.junit.Assert.assertNotNull(matrix13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 2 + "'", int14 == 2);
        org.junit.Assert.assertNotNull(matrix20);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(matrix24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(matrix28);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertNotNull(matrix31);
        org.junit.Assert.assertNotNull(matrix32);
        org.junit.Assert.assertNotNull(matrix35);
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertArrayEquals(doubleArray38, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertArrayEquals(doubleArray41, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 2 + "'", int44 == 2);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 2 + "'", int45 == 2);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 2 + "'", int46 == 2);
        org.junit.Assert.assertNotNull(matrixArray47);
        org.junit.Assert.assertNotNull(matrix48);
        org.junit.Assert.assertNotNull(matrix50);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertArrayEquals(doubleArray55, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray58);
        org.junit.Assert.assertArrayEquals(doubleArray58, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray59);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 2 + "'", int65 == 2);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + true + "'", boolean67 == true);
        org.junit.Assert.assertTrue("'" + double68 + "' != '" + 1.414213562373095d + "'", double68 == 1.414213562373095d);
    }

    @Test
    public void test4534() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4534");
        // The following exception was thrown during execution in test generation
        try {
            com.operations.Matrix.Matrix matrix5 = com.operations.Matrix.MatrixUtils.generateRandomMatrix((int) (byte) 0, (int) (byte) 100, 0, (int) (byte) 0, (long) '#');
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
    }

    @Test
    public void test4535() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4535");
        com.operations.Matrix.Matrix matrix2 = new com.operations.Matrix.Matrix((int) (short) 100, 1);
        com.operations.Matrix.Matrix matrix3 = com.operations.Matrix.MatrixOperations.transpose(matrix2);
        com.operations.Matrix.Matrix matrix6 = com.operations.Matrix.MatrixTransformations.scale2D((double) (-1L), (double) '4');
        com.operations.Matrix.Matrix matrix7 = com.operations.Matrix.MatrixOperations.transpose(matrix6);
        double[] doubleArray10 = new double[] { 10, 'a' };
        double[] doubleArray13 = new double[] { 10, 'a' };
        double[][] doubleArray14 = new double[][] { doubleArray10, doubleArray13 };
        com.operations.Matrix.Matrix matrix15 = new com.operations.Matrix.Matrix(doubleArray14);
        com.operations.Matrix.Matrix matrix16 = new com.operations.Matrix.Matrix(doubleArray14);
        com.operations.Matrix.Matrix matrix18 = com.operations.Matrix.MatrixTransformations.rotate2D((double) (short) 100);
        double[] doubleArray21 = new double[] { 137.90576492663388d, (byte) -1 };
        double[] doubleArray22 = com.operations.Matrix.MatrixSolver.solveGaussian(matrix18, doubleArray21);
        com.operations.Matrix.Matrix matrix23 = com.operations.Matrix.MatrixOperations.add(matrix16, matrix18);
        com.operations.Matrix.Matrix matrix24 = com.operations.Matrix.MatrixOperations.transpose(matrix18);
        com.operations.Matrix.Matrix matrix25 = com.operations.Matrix.MatrixOperations.multiply(matrix7, matrix18);
        boolean boolean27 = com.operations.Matrix.MatrixUtils.compare(matrix2, matrix7, (double) 10L);
        matrix7.setValue(0, (int) (short) 1, (-0.017187291480513275d));
        boolean boolean32 = com.operations.Matrix.MatrixUtils.isSquare(matrix7);
        org.junit.Assert.assertNotNull(matrix3);
        org.junit.Assert.assertNotNull(matrix6);
        org.junit.Assert.assertNotNull(matrix7);
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertArrayEquals(doubleArray10, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertArrayEquals(doubleArray13, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertNotNull(matrix18);
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertArrayEquals(doubleArray21, new double[] { 137.90576492663388d, (-1.0d) }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertArrayEquals(doubleArray22, new double[] { (-24.931892522286255d), (-135.63701830716116d) }, 1.0E-15);
        org.junit.Assert.assertNotNull(matrix23);
        org.junit.Assert.assertNotNull(matrix24);
        org.junit.Assert.assertNotNull(matrix25);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
    }

    @Test
    public void test4536() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4536");
        // The following exception was thrown during execution in test generation
        try {
            com.operations.Matrix.Matrix matrix4 = com.operations.Matrix.MatrixUtils.generateRandomMatrix(97, (int) (byte) -1, 97, (int) ' ');
            org.junit.Assert.fail("Expected exception of type java.lang.NegativeArraySizeException; message: -1");
        } catch (java.lang.NegativeArraySizeException e) {
            // Expected exception.
        }
    }

    @Test
    public void test4537() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4537");
        com.operations.Matrix.Matrix matrix2 = com.operations.Matrix.MatrixTransformations.scale2D(33.52610922848042d, 3.618031071604718d);
        org.junit.Assert.assertNotNull(matrix2);
    }

    @Test
    public void test4538() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4538");
        com.operations.Matrix.Matrix matrix2 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0L, (double) (byte) 10);
        double[] doubleArray5 = new double[] { 10, 'a' };
        double[] doubleArray8 = new double[] { 10, 'a' };
        double[][] doubleArray9 = new double[][] { doubleArray5, doubleArray8 };
        com.operations.Matrix.Matrix matrix10 = new com.operations.Matrix.Matrix(doubleArray9);
        int int11 = matrix10.getCols();
        int int12 = matrix10.getCols();
        int int13 = matrix10.getCols();
        com.operations.Matrix.Matrix[] matrixArray14 = com.operations.Matrix.MatrixDecompositions.luDecomposition(matrix10);
        com.operations.Matrix.Matrix matrix15 = com.operations.Matrix.MatrixOperations.multiply(matrix2, matrix10);
        com.operations.Matrix.Matrix matrix17 = com.operations.Matrix.MatrixTransformations.rotate2D((double) (short) 100);
        boolean boolean19 = com.operations.Matrix.MatrixUtils.compare(matrix10, matrix17, (double) (byte) 0);
        double[] doubleArray22 = new double[] { 10, 'a' };
        double[] doubleArray25 = new double[] { 10, 'a' };
        double[][] doubleArray26 = new double[][] { doubleArray22, doubleArray25 };
        com.operations.Matrix.Matrix matrix27 = new com.operations.Matrix.Matrix(doubleArray26);
        com.operations.Matrix.Matrix matrix28 = new com.operations.Matrix.Matrix(doubleArray26);
        com.operations.Matrix.Matrix matrix29 = new com.operations.Matrix.Matrix(doubleArray26);
        boolean boolean31 = com.operations.Matrix.MatrixUtils.compare(matrix10, matrix29, (double) (-1));
        double[][] doubleArray32 = matrix29.getData();
        int int33 = matrix29.getRows();
        org.junit.Assert.assertNotNull(matrix2);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertArrayEquals(doubleArray5, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertArrayEquals(doubleArray8, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 2 + "'", int11 == 2);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 2 + "'", int12 == 2);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 2 + "'", int13 == 2);
        org.junit.Assert.assertNotNull(matrixArray14);
        org.junit.Assert.assertNotNull(matrix15);
        org.junit.Assert.assertNotNull(matrix17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertArrayEquals(doubleArray22, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertArrayEquals(doubleArray25, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 2 + "'", int33 == 2);
    }

    @Test
    public void test4539() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4539");
        com.operations.Matrix.Matrix matrix2 = com.operations.Matrix.MatrixTransformations.scale2D(0.0d, 65.19779036970327d);
        int int3 = matrix2.getRows();
        com.operations.Matrix.Matrix matrix6 = com.operations.Matrix.MatrixTransformations.project2D(3500.0d, 0.9998476951563913d);
        com.operations.Matrix.Matrix matrix9 = com.operations.Matrix.MatrixTransformations.project2D((double) (-1L), (-1.0d));
        com.operations.Matrix.Matrix matrix12 = com.operations.Matrix.MatrixTransformations.scale2D((double) 1.0f, (double) 1);
        com.operations.Matrix.Matrix matrix14 = com.operations.Matrix.MatrixTransformations.rotate2D((double) 1.0f);
        com.operations.Matrix.Matrix matrix17 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0L, (double) (byte) 10);
        int int18 = matrix17.getRows();
        com.operations.Matrix.Matrix matrix20 = com.operations.Matrix.MatrixOperations.scalarMultiply(matrix17, (double) 2);
        double double21 = com.operations.Matrix.MatrixUtils.frobeniusNorm(matrix17);
        com.operations.Matrix.Matrix matrix24 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0L, (double) (byte) 10);
        int int25 = matrix24.getRows();
        com.operations.Matrix.Matrix matrix27 = com.operations.Matrix.MatrixOperations.scalarMultiply(matrix24, (double) 2);
        com.operations.Matrix.Matrix matrix28 = com.operations.Matrix.MatrixOperations.subtract(matrix17, matrix27);
        com.operations.Matrix.Matrix matrix29 = com.operations.Matrix.MatrixOperations.add(matrix14, matrix27);
        boolean boolean31 = com.operations.Matrix.MatrixUtils.compare(matrix12, matrix14, (double) (byte) -1);
        com.operations.Matrix.Matrix matrix32 = com.operations.Matrix.MatrixOperations.transpose(matrix14);
        com.operations.Matrix.Matrix matrix35 = com.operations.Matrix.MatrixTransformations.project2D((double) 10L, 10.0d);
        com.operations.Matrix.Matrix matrix37 = com.operations.Matrix.MatrixTransformations.rotate2D((double) (short) 100);
        double[] doubleArray40 = new double[] { 137.90576492663388d, (byte) -1 };
        double[] doubleArray41 = com.operations.Matrix.MatrixSolver.solveGaussian(matrix37, doubleArray40);
        com.operations.Matrix.Matrix matrix44 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0L, (double) (byte) 10);
        double[] doubleArray47 = new double[] { 10, 'a' };
        double[] doubleArray50 = new double[] { 10, 'a' };
        double[][] doubleArray51 = new double[][] { doubleArray47, doubleArray50 };
        com.operations.Matrix.Matrix matrix52 = new com.operations.Matrix.Matrix(doubleArray51);
        int int53 = matrix52.getCols();
        int int54 = matrix52.getCols();
        int int55 = matrix52.getCols();
        com.operations.Matrix.Matrix[] matrixArray56 = com.operations.Matrix.MatrixDecompositions.luDecomposition(matrix52);
        com.operations.Matrix.Matrix matrix57 = com.operations.Matrix.MatrixOperations.multiply(matrix44, matrix52);
        boolean boolean59 = com.operations.Matrix.MatrixUtils.compare(matrix37, matrix44, (double) (-1L));
        double[][] doubleArray60 = matrix37.getData();
        com.operations.Matrix.Matrix matrix62 = com.operations.Matrix.MatrixTransformations.rotate2D((double) (short) 100);
        double[] doubleArray65 = new double[] { 137.90576492663388d, (byte) -1 };
        double[] doubleArray66 = com.operations.Matrix.MatrixSolver.solveGaussian(matrix62, doubleArray65);
        double[] doubleArray67 = com.operations.Matrix.MatrixSolver.solveGaussian(matrix37, doubleArray65);
        double[] doubleArray68 = com.operations.Matrix.MatrixSolver.solveGaussian(matrix35, doubleArray67);
        double[] doubleArray69 = com.operations.Matrix.MatrixSolver.solveGaussian(matrix14, doubleArray68);
        double[] doubleArray70 = com.operations.Matrix.MatrixSolver.solveGaussian(matrix9, doubleArray68);
        double[] doubleArray71 = com.operations.Matrix.MatrixSolver.solveGaussian(matrix6, doubleArray68);
        com.operations.Matrix.Matrix matrix72 = com.operations.Matrix.MatrixDecompositions.choleskyDecomposition(matrix6);
        com.operations.Matrix.Matrix matrix73 = com.operations.Matrix.MatrixOperations.multiply(matrix2, matrix72);
        org.junit.Assert.assertNotNull(matrix2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 2 + "'", int3 == 2);
        org.junit.Assert.assertNotNull(matrix6);
        org.junit.Assert.assertNotNull(matrix9);
        org.junit.Assert.assertNotNull(matrix12);
        org.junit.Assert.assertNotNull(matrix14);
        org.junit.Assert.assertNotNull(matrix17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 2 + "'", int18 == 2);
        org.junit.Assert.assertNotNull(matrix20);
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 10.0d + "'", double21 == 10.0d);
        org.junit.Assert.assertNotNull(matrix24);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 2 + "'", int25 == 2);
        org.junit.Assert.assertNotNull(matrix27);
        org.junit.Assert.assertNotNull(matrix28);
        org.junit.Assert.assertNotNull(matrix29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(matrix32);
        org.junit.Assert.assertNotNull(matrix35);
        org.junit.Assert.assertNotNull(matrix37);
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertArrayEquals(doubleArray40, new double[] { 137.90576492663388d, (-1.0d) }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertArrayEquals(doubleArray41, new double[] { (-24.931892522286255d), (-135.63701830716116d) }, 1.0E-15);
        org.junit.Assert.assertNotNull(matrix44);
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertArrayEquals(doubleArray47, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertArrayEquals(doubleArray50, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 2 + "'", int53 == 2);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 2 + "'", int54 == 2);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 2 + "'", int55 == 2);
        org.junit.Assert.assertNotNull(matrixArray56);
        org.junit.Assert.assertNotNull(matrix57);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNotNull(doubleArray60);
        org.junit.Assert.assertNotNull(matrix62);
        org.junit.Assert.assertNotNull(doubleArray65);
        org.junit.Assert.assertArrayEquals(doubleArray65, new double[] { 137.90576492663388d, (-1.0d) }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray66);
        org.junit.Assert.assertArrayEquals(doubleArray66, new double[] { (-24.931892522286255d), (-135.63701830716116d) }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray67);
        org.junit.Assert.assertArrayEquals(doubleArray67, new double[] { (-24.931892522286255d), (-135.63701830716116d) }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray68);
        org.junit.Assert.assertArrayEquals(doubleArray68, new double[] { (-2.4931892522286256d), (-13.563701830716116d) }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray69);
        org.junit.Assert.assertArrayEquals(doubleArray69, new double[] { (-2.7295287645732618d), (-13.518123861075072d) }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray70);
        org.junit.Assert.assertArrayEquals(doubleArray70, new double[] { 2.4931892522286256d, 13.563701830716116d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray71);
        org.junit.Assert.assertArrayEquals(doubleArray71, new double[] { (-7.123397863510359E-4d), (-13.565767962884136d) }, 1.0E-15);
        org.junit.Assert.assertNotNull(matrix72);
        org.junit.Assert.assertNotNull(matrix73);
    }

    @Test
    public void test4540() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4540");
        com.operations.Matrix.Matrix matrix2 = com.operations.Matrix.MatrixTransformations.project2D(3200.015624961853d, (double) 1.0f);
        org.junit.Assert.assertNotNull(matrix2);
    }

    @Test
    public void test4541() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4541");
        com.operations.Matrix.Matrix matrix2 = com.operations.Matrix.MatrixTransformations.scale2D(0.0d, 0.0d);
        com.operations.Matrix.Matrix matrix5 = com.operations.Matrix.MatrixTransformations.scale2D((double) 1, (-1.0d));
        com.operations.Matrix.Matrix matrix8 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0L, (double) (byte) 10);
        double[] doubleArray11 = new double[] { 10, 'a' };
        double[] doubleArray14 = new double[] { 10, 'a' };
        double[][] doubleArray15 = new double[][] { doubleArray11, doubleArray14 };
        com.operations.Matrix.Matrix matrix16 = new com.operations.Matrix.Matrix(doubleArray15);
        int int17 = matrix16.getCols();
        int int18 = matrix16.getCols();
        int int19 = matrix16.getCols();
        com.operations.Matrix.Matrix[] matrixArray20 = com.operations.Matrix.MatrixDecompositions.luDecomposition(matrix16);
        com.operations.Matrix.Matrix matrix21 = com.operations.Matrix.MatrixOperations.multiply(matrix8, matrix16);
        int int22 = matrix16.getRows();
        int int23 = matrix16.getCols();
        com.operations.Matrix.Matrix matrix26 = com.operations.Matrix.MatrixTransformations.project2D((double) (-1L), (double) (short) 100);
        com.operations.Matrix.Matrix matrix27 = com.operations.Matrix.MatrixOperations.subtract(matrix16, matrix26);
        com.operations.Matrix.Matrix matrix28 = com.operations.Matrix.MatrixOperations.add(matrix5, matrix27);
        com.operations.Matrix.Matrix matrix29 = com.operations.Matrix.MatrixOperations.add(matrix2, matrix5);
        com.operations.Matrix.Matrix matrix31 = com.operations.Matrix.MatrixOperations.scalarMultiply(matrix29, (double) (short) 10);
        // The following exception was thrown during execution in test generation
        try {
            matrix31.setValue((int) (short) -1, 0, 1.7320508075688774d);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: Index -1 out of bounds for length 2");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(matrix2);
        org.junit.Assert.assertNotNull(matrix5);
        org.junit.Assert.assertNotNull(matrix8);
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertArrayEquals(doubleArray11, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertArrayEquals(doubleArray14, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 2 + "'", int17 == 2);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 2 + "'", int18 == 2);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 2 + "'", int19 == 2);
        org.junit.Assert.assertNotNull(matrixArray20);
        org.junit.Assert.assertNotNull(matrix21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 2 + "'", int22 == 2);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 2 + "'", int23 == 2);
        org.junit.Assert.assertNotNull(matrix26);
        org.junit.Assert.assertNotNull(matrix27);
        org.junit.Assert.assertNotNull(matrix28);
        org.junit.Assert.assertNotNull(matrix29);
        org.junit.Assert.assertNotNull(matrix31);
    }

    @Test
    public void test4542() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4542");
        com.operations.Matrix.Matrix matrix5 = com.operations.Matrix.MatrixUtils.generateRandomMatrix((int) 'a', 52, 2, (int) (short) 100, (long) 0);
        org.junit.Assert.assertNotNull(matrix5);
    }

    @Test
    public void test4543() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4543");
        double[] doubleArray2 = new double[] { 10, 'a' };
        double[] doubleArray5 = new double[] { 10, 'a' };
        double[][] doubleArray6 = new double[][] { doubleArray2, doubleArray5 };
        com.operations.Matrix.Matrix matrix7 = new com.operations.Matrix.Matrix(doubleArray6);
        com.operations.Matrix.Matrix matrix8 = new com.operations.Matrix.Matrix(doubleArray6);
        boolean boolean9 = com.operations.Matrix.MatrixUtils.isSquare(matrix8);
        double[] doubleArray12 = new double[] { 10, 'a' };
        double[] doubleArray15 = new double[] { 10, 'a' };
        double[][] doubleArray16 = new double[][] { doubleArray12, doubleArray15 };
        com.operations.Matrix.Matrix matrix17 = new com.operations.Matrix.Matrix(doubleArray16);
        int int18 = matrix17.getCols();
        int int19 = matrix17.getCols();
        matrix17.print();
        double[] doubleArray23 = new double[] { 10, 'a' };
        double[] doubleArray26 = new double[] { 10, 'a' };
        double[][] doubleArray27 = new double[][] { doubleArray23, doubleArray26 };
        com.operations.Matrix.Matrix matrix28 = new com.operations.Matrix.Matrix(doubleArray27);
        boolean boolean30 = com.operations.Matrix.MatrixUtils.compare(matrix17, matrix28, (double) (-1));
        com.operations.Matrix.Matrix matrix31 = com.operations.Matrix.MatrixOperations.subtract(matrix8, matrix28);
        com.operations.Matrix.Matrix matrix33 = com.operations.Matrix.MatrixOperations.scalarMultiply(matrix8, (double) 0.0f);
        com.operations.Matrix.Matrix matrix35 = com.operations.Matrix.MatrixTransformations.rotate2D((double) 100L);
        com.operations.Matrix.Matrix matrix37 = com.operations.Matrix.MatrixOperations.scalarMultiply(matrix35, (double) ' ');
        boolean boolean39 = com.operations.Matrix.MatrixUtils.compare(matrix33, matrix35, (double) 2);
        com.operations.Matrix.Matrix matrix41 = com.operations.Matrix.MatrixOperations.scalarMultiply(matrix35, 36.45545226711637d);
        double[] doubleArray44 = new double[] { 10, 'a' };
        double[] doubleArray47 = new double[] { 10, 'a' };
        double[][] doubleArray48 = new double[][] { doubleArray44, doubleArray47 };
        com.operations.Matrix.Matrix matrix49 = new com.operations.Matrix.Matrix(doubleArray48);
        com.operations.Matrix.Matrix matrix50 = new com.operations.Matrix.Matrix(doubleArray48);
        boolean boolean51 = com.operations.Matrix.MatrixUtils.isSquare(matrix50);
        double[][] doubleArray52 = matrix50.getData();
        com.operations.Matrix.Matrix matrix53 = com.operations.Matrix.MatrixOperations.multiply(matrix35, matrix50);
        com.operations.Matrix.Matrix matrix56 = new com.operations.Matrix.Matrix(1, 10);
        // The following exception was thrown during execution in test generation
        try {
            com.operations.Matrix.Matrix matrix57 = com.operations.Matrix.MatrixOperations.multiply(matrix53, matrix56);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Matrix A's columns must match Matrix B's rows for multiplication.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertArrayEquals(doubleArray2, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertArrayEquals(doubleArray5, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertArrayEquals(doubleArray12, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertArrayEquals(doubleArray15, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 2 + "'", int18 == 2);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 2 + "'", int19 == 2);
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertArrayEquals(doubleArray23, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertArrayEquals(doubleArray26, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(matrix31);
        org.junit.Assert.assertNotNull(matrix33);
        org.junit.Assert.assertNotNull(matrix35);
        org.junit.Assert.assertNotNull(matrix37);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertNotNull(matrix41);
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertArrayEquals(doubleArray44, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertArrayEquals(doubleArray47, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + true + "'", boolean51 == true);
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertNotNull(matrix53);
    }

    @Test
    public void test4544() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4544");
        double[] doubleArray2 = new double[] { 10, 'a' };
        double[] doubleArray5 = new double[] { 10, 'a' };
        double[][] doubleArray6 = new double[][] { doubleArray2, doubleArray5 };
        com.operations.Matrix.Matrix matrix7 = new com.operations.Matrix.Matrix(doubleArray6);
        int int8 = matrix7.getCols();
        int int9 = matrix7.getCols();
        matrix7.print();
        double[] doubleArray13 = new double[] { 10, 'a' };
        double[] doubleArray16 = new double[] { 10, 'a' };
        double[][] doubleArray17 = new double[][] { doubleArray13, doubleArray16 };
        com.operations.Matrix.Matrix matrix18 = new com.operations.Matrix.Matrix(doubleArray17);
        boolean boolean20 = com.operations.Matrix.MatrixUtils.compare(matrix7, matrix18, (double) (-1));
        com.operations.Matrix.Matrix matrix21 = com.operations.Matrix.MatrixDecompositions.choleskyDecomposition(matrix18);
        com.operations.Matrix.Matrix matrix23 = com.operations.Matrix.MatrixOperations.scalarMultiply(matrix21, 32.0d);
        com.operations.Matrix.Matrix matrix24 = com.operations.Matrix.MatrixDecompositions.choleskyDecomposition(matrix21);
        int int25 = matrix21.getRows();
        com.operations.Matrix.Matrix matrix27 = com.operations.Matrix.MatrixOperations.scalarMultiply(matrix21, (double) 10L);
        com.operations.Matrix.Matrix matrix28 = com.operations.Matrix.MatrixDecompositions.choleskyDecomposition(matrix21);
        com.operations.Matrix.Matrix matrix31 = com.operations.Matrix.MatrixTransformations.project2D(100.0d, (double) (byte) 10);
        int int32 = matrix31.getCols();
        com.operations.Matrix.Matrix[] matrixArray33 = com.operations.Matrix.MatrixDecompositions.luDecomposition(matrix31);
        boolean boolean35 = com.operations.Matrix.MatrixUtils.compare(matrix21, matrix31, 10.344080432788601d);
        java.lang.Class<?> wildcardClass36 = matrix21.getClass();
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertArrayEquals(doubleArray2, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertArrayEquals(doubleArray5, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 2 + "'", int8 == 2);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 2 + "'", int9 == 2);
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertArrayEquals(doubleArray13, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertArrayEquals(doubleArray16, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(matrix21);
        org.junit.Assert.assertNotNull(matrix23);
        org.junit.Assert.assertNotNull(matrix24);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 2 + "'", int25 == 2);
        org.junit.Assert.assertNotNull(matrix27);
        org.junit.Assert.assertNotNull(matrix28);
        org.junit.Assert.assertNotNull(matrix31);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 2 + "'", int32 == 2);
        org.junit.Assert.assertNotNull(matrixArray33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(wildcardClass36);
    }

    @Test
    public void test4545() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4545");
        com.operations.Matrix.Matrix matrix2 = com.operations.Matrix.MatrixTransformations.scale2D(30.0d, (double) (-1));
        double double3 = com.operations.Matrix.MatrixUtils.frobeniusNorm(matrix2);
        org.junit.Assert.assertNotNull(matrix2);
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + 30.01666203960727d + "'", double3 == 30.01666203960727d);
    }

    @Test
    public void test4546() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4546");
        com.operations.Matrix.Matrix matrix1 = com.operations.Matrix.MatrixTransformations.rotate2D((double) 1.0f);
        com.operations.Matrix.Matrix matrix4 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0L, (double) (byte) 10);
        int int5 = matrix4.getRows();
        com.operations.Matrix.Matrix matrix7 = com.operations.Matrix.MatrixOperations.scalarMultiply(matrix4, (double) 2);
        double double8 = com.operations.Matrix.MatrixUtils.frobeniusNorm(matrix4);
        com.operations.Matrix.Matrix matrix11 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0L, (double) (byte) 10);
        int int12 = matrix11.getRows();
        com.operations.Matrix.Matrix matrix14 = com.operations.Matrix.MatrixOperations.scalarMultiply(matrix11, (double) 2);
        com.operations.Matrix.Matrix matrix15 = com.operations.Matrix.MatrixOperations.subtract(matrix4, matrix14);
        com.operations.Matrix.Matrix matrix16 = com.operations.Matrix.MatrixOperations.add(matrix1, matrix14);
        com.operations.Matrix.Matrix[] matrixArray17 = com.operations.Matrix.MatrixDecompositions.luDecomposition(matrix14);
        boolean boolean18 = com.operations.Matrix.MatrixUtils.isSquare(matrix14);
        com.operations.Matrix.Matrix matrix19 = com.operations.Matrix.MatrixOperations.transpose(matrix14);
        java.lang.Class<?> wildcardClass20 = matrix14.getClass();
        org.junit.Assert.assertNotNull(matrix1);
        org.junit.Assert.assertNotNull(matrix4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 2 + "'", int5 == 2);
        org.junit.Assert.assertNotNull(matrix7);
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 10.0d + "'", double8 == 10.0d);
        org.junit.Assert.assertNotNull(matrix11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 2 + "'", int12 == 2);
        org.junit.Assert.assertNotNull(matrix14);
        org.junit.Assert.assertNotNull(matrix15);
        org.junit.Assert.assertNotNull(matrix16);
        org.junit.Assert.assertNotNull(matrixArray17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(matrix19);
        org.junit.Assert.assertNotNull(wildcardClass20);
    }

    @Test
    public void test4547() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4547");
        // The following exception was thrown during execution in test generation
        try {
            com.operations.Matrix.Matrix matrix5 = com.operations.Matrix.MatrixUtils.generateRandomMatrix((int) (short) 0, 35, 0, (int) '#', (long) (short) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
    }

    @Test
    public void test4548() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4548");
        com.operations.Matrix.Matrix matrix2 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0L, (double) (byte) 10);
        double[] doubleArray5 = new double[] { 10, 'a' };
        double[] doubleArray8 = new double[] { 10, 'a' };
        double[][] doubleArray9 = new double[][] { doubleArray5, doubleArray8 };
        com.operations.Matrix.Matrix matrix10 = new com.operations.Matrix.Matrix(doubleArray9);
        int int11 = matrix10.getCols();
        int int12 = matrix10.getCols();
        int int13 = matrix10.getCols();
        com.operations.Matrix.Matrix[] matrixArray14 = com.operations.Matrix.MatrixDecompositions.luDecomposition(matrix10);
        com.operations.Matrix.Matrix matrix15 = com.operations.Matrix.MatrixOperations.multiply(matrix2, matrix10);
        com.operations.Matrix.Matrix matrix17 = com.operations.Matrix.MatrixTransformations.rotate2D((double) (short) 100);
        boolean boolean19 = com.operations.Matrix.MatrixUtils.compare(matrix10, matrix17, (double) (byte) 0);
        boolean boolean20 = com.operations.Matrix.MatrixUtils.isSymmetric(matrix17);
        com.operations.Matrix.Matrix matrix21 = com.operations.Matrix.MatrixOperations.transpose(matrix17);
        com.operations.Matrix.Matrix matrix24 = com.operations.Matrix.MatrixTransformations.project2D(20.0d, 0.0d);
        boolean boolean25 = com.operations.Matrix.MatrixUtils.isSymmetric(matrix24);
        com.operations.Matrix.Matrix matrix26 = com.operations.Matrix.MatrixOperations.subtract(matrix21, matrix24);
        double double27 = com.operations.Matrix.MatrixUtils.frobeniusNorm(matrix21);
        org.junit.Assert.assertNotNull(matrix2);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertArrayEquals(doubleArray5, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertArrayEquals(doubleArray8, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 2 + "'", int11 == 2);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 2 + "'", int12 == 2);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 2 + "'", int13 == 2);
        org.junit.Assert.assertNotNull(matrixArray14);
        org.junit.Assert.assertNotNull(matrix15);
        org.junit.Assert.assertNotNull(matrix17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(matrix21);
        org.junit.Assert.assertNotNull(matrix24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertNotNull(matrix26);
        org.junit.Assert.assertTrue("'" + double27 + "' != '" + 1.414213562373095d + "'", double27 == 1.414213562373095d);
    }

    @Test
    public void test4549() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4549");
        com.operations.Matrix.Matrix matrix2 = com.operations.Matrix.MatrixTransformations.scale2D((double) (byte) 10, (double) 10);
        double[] doubleArray5 = new double[] { 10, 'a' };
        double[] doubleArray8 = new double[] { 10, 'a' };
        double[][] doubleArray9 = new double[][] { doubleArray5, doubleArray8 };
        com.operations.Matrix.Matrix matrix10 = new com.operations.Matrix.Matrix(doubleArray9);
        com.operations.Matrix.Matrix matrix11 = new com.operations.Matrix.Matrix(doubleArray9);
        boolean boolean12 = com.operations.Matrix.MatrixUtils.isSquare(matrix11);
        double[] doubleArray15 = new double[] { 10, 'a' };
        double[] doubleArray18 = new double[] { 10, 'a' };
        double[][] doubleArray19 = new double[][] { doubleArray15, doubleArray18 };
        com.operations.Matrix.Matrix matrix20 = new com.operations.Matrix.Matrix(doubleArray19);
        int int21 = matrix20.getCols();
        int int22 = matrix20.getCols();
        matrix20.print();
        double[] doubleArray26 = new double[] { 10, 'a' };
        double[] doubleArray29 = new double[] { 10, 'a' };
        double[][] doubleArray30 = new double[][] { doubleArray26, doubleArray29 };
        com.operations.Matrix.Matrix matrix31 = new com.operations.Matrix.Matrix(doubleArray30);
        boolean boolean33 = com.operations.Matrix.MatrixUtils.compare(matrix20, matrix31, (double) (-1));
        com.operations.Matrix.Matrix matrix34 = com.operations.Matrix.MatrixOperations.subtract(matrix11, matrix31);
        com.operations.Matrix.Matrix[] matrixArray35 = com.operations.Matrix.MatrixDecompositions.luDecomposition(matrix34);
        double[][] doubleArray36 = matrix34.getData();
        com.operations.Matrix.Matrix matrix37 = new com.operations.Matrix.Matrix(doubleArray36);
        com.operations.Matrix.Matrix matrix38 = com.operations.Matrix.MatrixOperations.multiply(matrix2, matrix37);
        double[][] doubleArray39 = matrix2.getData();
        com.operations.Matrix.Matrix matrix42 = com.operations.Matrix.MatrixTransformations.project2D((double) ' ', 36.40054944640259d);
        com.operations.Matrix.Matrix matrix44 = com.operations.Matrix.MatrixOperations.scalarMultiply(matrix42, (double) (byte) 1);
        com.operations.Matrix.Matrix matrix47 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0L, (double) (byte) 10);
        double[] doubleArray50 = new double[] { 10, 'a' };
        double[] doubleArray53 = new double[] { 10, 'a' };
        double[][] doubleArray54 = new double[][] { doubleArray50, doubleArray53 };
        com.operations.Matrix.Matrix matrix55 = new com.operations.Matrix.Matrix(doubleArray54);
        int int56 = matrix55.getCols();
        int int57 = matrix55.getCols();
        int int58 = matrix55.getCols();
        com.operations.Matrix.Matrix[] matrixArray59 = com.operations.Matrix.MatrixDecompositions.luDecomposition(matrix55);
        com.operations.Matrix.Matrix matrix60 = com.operations.Matrix.MatrixOperations.multiply(matrix47, matrix55);
        com.operations.Matrix.Matrix matrix62 = com.operations.Matrix.MatrixTransformations.rotate2D((double) (short) 100);
        boolean boolean64 = com.operations.Matrix.MatrixUtils.compare(matrix55, matrix62, (double) (byte) 0);
        com.operations.Matrix.Matrix[] matrixArray65 = com.operations.Matrix.MatrixDecompositions.luDecomposition(matrix55);
        com.operations.Matrix.Matrix matrix66 = com.operations.Matrix.MatrixDecompositions.choleskyDecomposition(matrix55);
        com.operations.Matrix.Matrix matrix67 = com.operations.Matrix.MatrixOperations.transpose(matrix66);
        com.operations.Matrix.Matrix matrix69 = com.operations.Matrix.MatrixOperations.scalarMultiply(matrix66, 0.984807753012208d);
        com.operations.Matrix.Matrix matrix70 = com.operations.Matrix.MatrixOperations.multiply(matrix44, matrix69);
        boolean boolean72 = com.operations.Matrix.MatrixUtils.compare(matrix2, matrix69, (double) 35);
        org.junit.Assert.assertNotNull(matrix2);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertArrayEquals(doubleArray5, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertArrayEquals(doubleArray8, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertArrayEquals(doubleArray15, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertArrayEquals(doubleArray18, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 2 + "'", int21 == 2);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 2 + "'", int22 == 2);
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertArrayEquals(doubleArray26, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertArrayEquals(doubleArray29, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(matrix34);
        org.junit.Assert.assertNotNull(matrixArray35);
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertNotNull(matrix38);
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertNotNull(matrix42);
        org.junit.Assert.assertNotNull(matrix44);
        org.junit.Assert.assertNotNull(matrix47);
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertArrayEquals(doubleArray50, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertArrayEquals(doubleArray53, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray54);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 2 + "'", int56 == 2);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 2 + "'", int57 == 2);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 2 + "'", int58 == 2);
        org.junit.Assert.assertNotNull(matrixArray59);
        org.junit.Assert.assertNotNull(matrix60);
        org.junit.Assert.assertNotNull(matrix62);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertNotNull(matrixArray65);
        org.junit.Assert.assertNotNull(matrix66);
        org.junit.Assert.assertNotNull(matrix67);
        org.junit.Assert.assertNotNull(matrix69);
        org.junit.Assert.assertNotNull(matrix70);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + true + "'", boolean72 == true);
    }

    @Test
    public void test4550() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4550");
        com.operations.Matrix.Matrix matrix2 = com.operations.Matrix.MatrixTransformations.project2D((double) (short) 1, 100.0d);
        com.operations.Matrix.Matrix matrix5 = com.operations.Matrix.MatrixTransformations.project2D((double) 100.0f, (double) 1);
        double double6 = com.operations.Matrix.MatrixUtils.frobeniusNorm(matrix5);
        com.operations.Matrix.Matrix matrix8 = com.operations.Matrix.MatrixTransformations.rotate2D(100.0d);
        int int9 = matrix8.getCols();
        matrix8.print();
        com.operations.Matrix.Matrix matrix12 = com.operations.Matrix.MatrixOperations.scalarMultiply(matrix8, (double) (byte) 1);
        boolean boolean13 = com.operations.Matrix.MatrixUtils.isSymmetric(matrix8);
        com.operations.Matrix.Matrix matrix15 = com.operations.Matrix.MatrixTransformations.rotate2D((-1.0d));
        com.operations.Matrix.Matrix matrix17 = com.operations.Matrix.MatrixTransformations.rotate2D((double) (-1L));
        com.operations.Matrix.Matrix matrix19 = com.operations.Matrix.MatrixTransformations.rotate2D((double) (short) 100);
        double[] doubleArray22 = new double[] { 137.90576492663388d, (byte) -1 };
        double[] doubleArray23 = com.operations.Matrix.MatrixSolver.solveGaussian(matrix19, doubleArray22);
        double[] doubleArray24 = com.operations.Matrix.MatrixSolver.solveGaussian(matrix17, doubleArray22);
        double[] doubleArray25 = com.operations.Matrix.MatrixSolver.solveGaussian(matrix15, doubleArray22);
        double[] doubleArray26 = com.operations.Matrix.MatrixSolver.solveGaussian(matrix8, doubleArray25);
        double[] doubleArray27 = com.operations.Matrix.MatrixSolver.solveGaussian(matrix5, doubleArray25);
        double[] doubleArray28 = com.operations.Matrix.MatrixSolver.solveGaussian(matrix2, doubleArray27);
        com.operations.Matrix.Matrix[] matrixArray29 = com.operations.Matrix.MatrixDecompositions.luDecomposition(matrix2);
        org.junit.Assert.assertNotNull(matrix2);
        org.junit.Assert.assertNotNull(matrix5);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 100.00499987500625d + "'", double6 == 100.00499987500625d);
        org.junit.Assert.assertNotNull(matrix8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 2 + "'", int9 == 2);
        org.junit.Assert.assertNotNull(matrix12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(matrix15);
        org.junit.Assert.assertNotNull(matrix17);
        org.junit.Assert.assertNotNull(matrix19);
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertArrayEquals(doubleArray22, new double[] { 137.90576492663388d, (-1.0d) }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertArrayEquals(doubleArray23, new double[] { (-24.931892522286255d), (-135.63701830716116d) }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertArrayEquals(doubleArray24, new double[] { 137.90221361711127d, 1.4069397643877004d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertArrayEquals(doubleArray25, new double[] { 137.90221361711127d, 1.4069397643877004d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertArrayEquals(doubleArray26, new double[] { (-22.56090290285694d), (-136.05148165384995d) }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertArrayEquals(doubleArray27, new double[] { 1.3790221361711128d, 1.4069397643877004d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertArrayEquals(doubleArray28, new double[] { 1.3790221361711128d, 0.014069397643877005d }, 1.0E-15);
        org.junit.Assert.assertNotNull(matrixArray29);
    }

    @Test
    public void test4551() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4551");
        com.operations.Matrix.Matrix matrix2 = com.operations.Matrix.MatrixTransformations.project2D(43.079766291379094d, 43.079766291379094d);
        org.junit.Assert.assertNotNull(matrix2);
    }

    @Test
    public void test4552() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4552");
        com.operations.Matrix.Matrix matrix2 = new com.operations.Matrix.Matrix(100, 100);
        int int3 = matrix2.getCols();
        com.operations.Matrix.Matrix matrix6 = com.operations.Matrix.MatrixTransformations.project2D(10.0d, (double) 1);
        double[][] doubleArray7 = matrix6.getData();
        boolean boolean9 = com.operations.Matrix.MatrixUtils.compare(matrix2, matrix6, (double) (byte) 1);
        // The following exception was thrown during execution in test generation
        try {
            matrix6.setValue((int) (byte) 10, (int) (byte) 10, 65.19779036970327d);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: Index 10 out of bounds for length 2");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 100 + "'", int3 == 100);
        org.junit.Assert.assertNotNull(matrix6);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
    }

    @Test
    public void test4553() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4553");
        double[] doubleArray2 = new double[] { 10, 'a' };
        double[] doubleArray5 = new double[] { 10, 'a' };
        double[][] doubleArray6 = new double[][] { doubleArray2, doubleArray5 };
        com.operations.Matrix.Matrix matrix7 = new com.operations.Matrix.Matrix(doubleArray6);
        com.operations.Matrix.Matrix matrix8 = new com.operations.Matrix.Matrix(doubleArray6);
        com.operations.Matrix.Matrix matrix10 = com.operations.Matrix.MatrixTransformations.rotate2D((double) (short) 100);
        double[] doubleArray13 = new double[] { 137.90576492663388d, (byte) -1 };
        double[] doubleArray14 = com.operations.Matrix.MatrixSolver.solveGaussian(matrix10, doubleArray13);
        com.operations.Matrix.Matrix matrix15 = com.operations.Matrix.MatrixOperations.add(matrix8, matrix10);
        com.operations.Matrix.Matrix matrix16 = com.operations.Matrix.MatrixOperations.transpose(matrix10);
        int int17 = matrix10.getCols();
        com.operations.Matrix.Matrix matrix20 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0L, (double) (byte) 10);
        double[] doubleArray23 = new double[] { 10, 'a' };
        double[] doubleArray26 = new double[] { 10, 'a' };
        double[][] doubleArray27 = new double[][] { doubleArray23, doubleArray26 };
        com.operations.Matrix.Matrix matrix28 = new com.operations.Matrix.Matrix(doubleArray27);
        int int29 = matrix28.getCols();
        int int30 = matrix28.getCols();
        int int31 = matrix28.getCols();
        com.operations.Matrix.Matrix[] matrixArray32 = com.operations.Matrix.MatrixDecompositions.luDecomposition(matrix28);
        com.operations.Matrix.Matrix matrix33 = com.operations.Matrix.MatrixOperations.multiply(matrix20, matrix28);
        com.operations.Matrix.Matrix matrix35 = com.operations.Matrix.MatrixTransformations.rotate2D((double) (short) 100);
        boolean boolean37 = com.operations.Matrix.MatrixUtils.compare(matrix28, matrix35, (double) (byte) 0);
        boolean boolean38 = com.operations.Matrix.MatrixUtils.isSymmetric(matrix35);
        boolean boolean39 = com.operations.Matrix.MatrixUtils.isSquare(matrix35);
        com.operations.Matrix.Matrix matrix41 = com.operations.Matrix.MatrixTransformations.rotate2D((double) (short) 100);
        boolean boolean43 = com.operations.Matrix.MatrixUtils.compare(matrix35, matrix41, (double) (byte) 100);
        matrix41.print();
        com.operations.Matrix.Matrix matrix45 = com.operations.Matrix.MatrixOperations.add(matrix10, matrix41);
        int int46 = matrix45.getCols();
        double double49 = matrix45.getValue(1, 0);
        matrix45.setValue(0, (int) (byte) 1, 104.9952379872535d);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertArrayEquals(doubleArray2, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertArrayEquals(doubleArray5, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertNotNull(matrix10);
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertArrayEquals(doubleArray13, new double[] { 137.90576492663388d, (-1.0d) }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertArrayEquals(doubleArray14, new double[] { (-24.931892522286255d), (-135.63701830716116d) }, 1.0E-15);
        org.junit.Assert.assertNotNull(matrix15);
        org.junit.Assert.assertNotNull(matrix16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 2 + "'", int17 == 2);
        org.junit.Assert.assertNotNull(matrix20);
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertArrayEquals(doubleArray23, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertArrayEquals(doubleArray26, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 2 + "'", int29 == 2);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 2 + "'", int30 == 2);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 2 + "'", int31 == 2);
        org.junit.Assert.assertNotNull(matrixArray32);
        org.junit.Assert.assertNotNull(matrix33);
        org.junit.Assert.assertNotNull(matrix35);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertNotNull(matrix41);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertNotNull(matrix45);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 2 + "'", int46 == 2);
        org.junit.Assert.assertTrue("'" + double49 + "' != '" + 1.969615506024416d + "'", double49 == 1.969615506024416d);
    }

    @Test
    public void test4554() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4554");
        com.operations.Matrix.Matrix matrix2 = com.operations.Matrix.MatrixTransformations.scale2D(32.0d, (double) 1);
        // The following exception was thrown during execution in test generation
        try {
            double double5 = matrix2.getValue(2, (int) (short) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(matrix2);
    }

    @Test
    public void test4555() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4555");
        com.operations.Matrix.Matrix matrix2 = com.operations.Matrix.MatrixTransformations.project2D(0.0d, (double) 0);
        com.operations.Matrix.Matrix[] matrixArray3 = com.operations.Matrix.MatrixDecompositions.luDecomposition(matrix2);
        com.operations.Matrix.Matrix matrix6 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0L, (double) (byte) 10);
        int int7 = matrix6.getRows();
        com.operations.Matrix.Matrix matrix9 = com.operations.Matrix.MatrixOperations.scalarMultiply(matrix6, (double) 2);
        double double10 = com.operations.Matrix.MatrixUtils.frobeniusNorm(matrix6);
        int int11 = matrix6.getRows();
        com.operations.Matrix.Matrix matrix12 = com.operations.Matrix.MatrixOperations.transpose(matrix6);
        com.operations.Matrix.Matrix matrix13 = com.operations.Matrix.MatrixOperations.multiply(matrix2, matrix12);
        boolean boolean14 = com.operations.Matrix.MatrixUtils.isSymmetric(matrix13);
        int int15 = matrix13.getRows();
        org.junit.Assert.assertNotNull(matrix2);
        org.junit.Assert.assertNotNull(matrixArray3);
        org.junit.Assert.assertNotNull(matrix6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 2 + "'", int7 == 2);
        org.junit.Assert.assertNotNull(matrix9);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 10.0d + "'", double10 == 10.0d);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 2 + "'", int11 == 2);
        org.junit.Assert.assertNotNull(matrix12);
        org.junit.Assert.assertNotNull(matrix13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 2 + "'", int15 == 2);
    }

    @Test
    public void test4556() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4556");
        com.operations.Matrix.Matrix matrix4 = com.operations.Matrix.MatrixUtils.generateRandomMatrix((int) '4', 10, (int) (byte) 100, (int) (byte) 1);
        boolean boolean5 = com.operations.Matrix.MatrixUtils.isSymmetric(matrix4);
        org.junit.Assert.assertNotNull(matrix4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
    }

    @Test
    public void test4557() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4557");
        com.operations.Matrix.Matrix matrix2 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0L, (double) (byte) 10);
        double[] doubleArray5 = new double[] { 10, 'a' };
        double[] doubleArray8 = new double[] { 10, 'a' };
        double[][] doubleArray9 = new double[][] { doubleArray5, doubleArray8 };
        com.operations.Matrix.Matrix matrix10 = new com.operations.Matrix.Matrix(doubleArray9);
        int int11 = matrix10.getCols();
        int int12 = matrix10.getCols();
        int int13 = matrix10.getCols();
        com.operations.Matrix.Matrix[] matrixArray14 = com.operations.Matrix.MatrixDecompositions.luDecomposition(matrix10);
        com.operations.Matrix.Matrix matrix15 = com.operations.Matrix.MatrixOperations.multiply(matrix2, matrix10);
        com.operations.Matrix.Matrix matrix17 = com.operations.Matrix.MatrixTransformations.rotate2D((double) (short) 100);
        boolean boolean19 = com.operations.Matrix.MatrixUtils.compare(matrix10, matrix17, (double) (byte) 0);
        double[] doubleArray22 = new double[] { 10, 'a' };
        double[] doubleArray25 = new double[] { 10, 'a' };
        double[][] doubleArray26 = new double[][] { doubleArray22, doubleArray25 };
        com.operations.Matrix.Matrix matrix27 = new com.operations.Matrix.Matrix(doubleArray26);
        com.operations.Matrix.Matrix matrix28 = new com.operations.Matrix.Matrix(doubleArray26);
        com.operations.Matrix.Matrix matrix29 = new com.operations.Matrix.Matrix(doubleArray26);
        boolean boolean31 = com.operations.Matrix.MatrixUtils.compare(matrix10, matrix29, (double) (-1));
        double[] doubleArray34 = new double[] { 10, 'a' };
        double[] doubleArray37 = new double[] { 10, 'a' };
        double[][] doubleArray38 = new double[][] { doubleArray34, doubleArray37 };
        com.operations.Matrix.Matrix matrix39 = new com.operations.Matrix.Matrix(doubleArray38);
        com.operations.Matrix.Matrix matrix40 = new com.operations.Matrix.Matrix(doubleArray38);
        boolean boolean41 = com.operations.Matrix.MatrixUtils.isSquare(matrix40);
        com.operations.Matrix.Matrix matrix42 = com.operations.Matrix.MatrixOperations.multiply(matrix29, matrix40);
        double[][] doubleArray43 = matrix40.getData();
        com.operations.Matrix.Matrix matrix44 = new com.operations.Matrix.Matrix(doubleArray43);
        com.operations.Matrix.Matrix matrix45 = com.operations.Matrix.MatrixOperations.transpose(matrix44);
        boolean boolean46 = com.operations.Matrix.MatrixUtils.isSymmetric(matrix44);
        com.operations.Matrix.Matrix matrix48 = com.operations.Matrix.MatrixOperations.scalarMultiply(matrix44, (double) 2);
        matrix48.print();
        boolean boolean50 = com.operations.Matrix.MatrixUtils.isSquare(matrix48);
        org.junit.Assert.assertNotNull(matrix2);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertArrayEquals(doubleArray5, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertArrayEquals(doubleArray8, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 2 + "'", int11 == 2);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 2 + "'", int12 == 2);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 2 + "'", int13 == 2);
        org.junit.Assert.assertNotNull(matrixArray14);
        org.junit.Assert.assertNotNull(matrix15);
        org.junit.Assert.assertNotNull(matrix17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertArrayEquals(doubleArray22, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertArrayEquals(doubleArray25, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertArrayEquals(doubleArray34, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertArrayEquals(doubleArray37, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertNotNull(matrix42);
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertNotNull(matrix45);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(matrix48);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
    }

    @Test
    public void test4558() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4558");
        com.operations.Matrix.Matrix matrix2 = com.operations.Matrix.MatrixTransformations.scale2D(10.0d, 0.0d);
        com.operations.Matrix.Matrix matrix3 = com.operations.Matrix.MatrixOperations.transpose(matrix2);
        com.operations.Matrix.Matrix matrix4 = com.operations.Matrix.MatrixOperations.transpose(matrix3);
        com.operations.Matrix.Matrix matrix6 = com.operations.Matrix.MatrixTransformations.rotate2D(0.984807753012208d);
        boolean boolean8 = com.operations.Matrix.MatrixUtils.compare(matrix3, matrix6, 137.90576492663385d);
        java.lang.Class<?> wildcardClass9 = matrix6.getClass();
        org.junit.Assert.assertNotNull(matrix2);
        org.junit.Assert.assertNotNull(matrix3);
        org.junit.Assert.assertNotNull(matrix4);
        org.junit.Assert.assertNotNull(matrix6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNotNull(wildcardClass9);
    }

    @Test
    public void test4559() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4559");
        // The following exception was thrown during execution in test generation
        try {
            com.operations.Matrix.Matrix matrix4 = com.operations.Matrix.MatrixUtils.generateRandomMatrix(0, 100, 1, 0);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
    }

    @Test
    public void test4560() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4560");
        double[] doubleArray2 = new double[] { 10, 'a' };
        double[] doubleArray5 = new double[] { 10, 'a' };
        double[][] doubleArray6 = new double[][] { doubleArray2, doubleArray5 };
        com.operations.Matrix.Matrix matrix7 = new com.operations.Matrix.Matrix(doubleArray6);
        com.operations.Matrix.Matrix matrix8 = new com.operations.Matrix.Matrix(doubleArray6);
        boolean boolean9 = com.operations.Matrix.MatrixUtils.isSquare(matrix8);
        int int10 = matrix8.getCols();
        double double11 = com.operations.Matrix.MatrixUtils.frobeniusNorm(matrix8);
        double[] doubleArray14 = new double[] { 10, 'a' };
        double[] doubleArray17 = new double[] { 10, 'a' };
        double[][] doubleArray18 = new double[][] { doubleArray14, doubleArray17 };
        com.operations.Matrix.Matrix matrix19 = new com.operations.Matrix.Matrix(doubleArray18);
        com.operations.Matrix.Matrix matrix20 = new com.operations.Matrix.Matrix(doubleArray18);
        boolean boolean21 = com.operations.Matrix.MatrixUtils.isSquare(matrix20);
        double[] doubleArray24 = new double[] { 10, 'a' };
        double[] doubleArray27 = new double[] { 10, 'a' };
        double[][] doubleArray28 = new double[][] { doubleArray24, doubleArray27 };
        com.operations.Matrix.Matrix matrix29 = new com.operations.Matrix.Matrix(doubleArray28);
        int int30 = matrix29.getCols();
        int int31 = matrix29.getCols();
        matrix29.print();
        double[] doubleArray35 = new double[] { 10, 'a' };
        double[] doubleArray38 = new double[] { 10, 'a' };
        double[][] doubleArray39 = new double[][] { doubleArray35, doubleArray38 };
        com.operations.Matrix.Matrix matrix40 = new com.operations.Matrix.Matrix(doubleArray39);
        boolean boolean42 = com.operations.Matrix.MatrixUtils.compare(matrix29, matrix40, (double) (-1));
        com.operations.Matrix.Matrix matrix43 = com.operations.Matrix.MatrixOperations.subtract(matrix20, matrix40);
        com.operations.Matrix.Matrix matrix45 = com.operations.Matrix.MatrixOperations.scalarMultiply(matrix20, (double) 0.0f);
        double[] doubleArray48 = new double[] { 10, 'a' };
        double[] doubleArray51 = new double[] { 10, 'a' };
        double[][] doubleArray52 = new double[][] { doubleArray48, doubleArray51 };
        com.operations.Matrix.Matrix matrix53 = new com.operations.Matrix.Matrix(doubleArray52);
        com.operations.Matrix.Matrix matrix54 = new com.operations.Matrix.Matrix(doubleArray52);
        com.operations.Matrix.Matrix[] matrixArray55 = com.operations.Matrix.MatrixDecompositions.luDecomposition(matrix54);
        com.operations.Matrix.Matrix matrix56 = com.operations.Matrix.MatrixDecompositions.choleskyDecomposition(matrix54);
        int int57 = matrix56.getRows();
        com.operations.Matrix.Matrix matrix58 = com.operations.Matrix.MatrixOperations.subtract(matrix20, matrix56);
        boolean boolean60 = com.operations.Matrix.MatrixUtils.compare(matrix8, matrix20, 10.344080432788601d);
        com.operations.Matrix.Matrix matrix61 = com.operations.Matrix.MatrixDecompositions.choleskyDecomposition(matrix20);
        java.lang.Class<?> wildcardClass62 = matrix61.getClass();
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertArrayEquals(doubleArray2, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertArrayEquals(doubleArray5, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 2 + "'", int10 == 2);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 137.90576492663388d + "'", double11 == 137.90576492663388d);
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertArrayEquals(doubleArray14, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertArrayEquals(doubleArray17, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertArrayEquals(doubleArray24, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertArrayEquals(doubleArray27, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 2 + "'", int30 == 2);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 2 + "'", int31 == 2);
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertArrayEquals(doubleArray35, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertArrayEquals(doubleArray38, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(matrix43);
        org.junit.Assert.assertNotNull(matrix45);
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertArrayEquals(doubleArray48, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertArrayEquals(doubleArray51, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertNotNull(matrixArray55);
        org.junit.Assert.assertNotNull(matrix56);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 2 + "'", int57 == 2);
        org.junit.Assert.assertNotNull(matrix58);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + true + "'", boolean60 == true);
        org.junit.Assert.assertNotNull(matrix61);
        org.junit.Assert.assertNotNull(wildcardClass62);
    }

    @Test
    public void test4561() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4561");
        com.operations.Matrix.Matrix matrix1 = com.operations.Matrix.MatrixTransformations.rotate2D((double) '4');
        double[] doubleArray4 = new double[] { 10, 'a' };
        double[] doubleArray7 = new double[] { 10, 'a' };
        double[][] doubleArray8 = new double[][] { doubleArray4, doubleArray7 };
        com.operations.Matrix.Matrix matrix9 = new com.operations.Matrix.Matrix(doubleArray8);
        com.operations.Matrix.Matrix matrix10 = new com.operations.Matrix.Matrix(doubleArray8);
        com.operations.Matrix.Matrix matrix12 = com.operations.Matrix.MatrixTransformations.rotate2D((double) (short) 100);
        double[] doubleArray15 = new double[] { 137.90576492663388d, (byte) -1 };
        double[] doubleArray16 = com.operations.Matrix.MatrixSolver.solveGaussian(matrix12, doubleArray15);
        com.operations.Matrix.Matrix matrix17 = com.operations.Matrix.MatrixOperations.add(matrix10, matrix12);
        boolean boolean18 = com.operations.Matrix.MatrixUtils.isSymmetric(matrix17);
        boolean boolean20 = com.operations.Matrix.MatrixUtils.compare(matrix1, matrix17, 364.0054944640259d);
        com.operations.Matrix.Matrix matrix23 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0L, (double) (byte) 10);
        int int24 = matrix23.getRows();
        com.operations.Matrix.Matrix matrix26 = com.operations.Matrix.MatrixOperations.scalarMultiply(matrix23, (double) 2);
        matrix23.print();
        com.operations.Matrix.Matrix matrix28 = com.operations.Matrix.MatrixOperations.multiply(matrix17, matrix23);
        int int29 = matrix28.getRows();
        com.operations.Matrix.Matrix matrix32 = com.operations.Matrix.MatrixTransformations.scale2D(1.414213562373095d, 36.40054944640259d);
        com.operations.Matrix.Matrix matrix33 = com.operations.Matrix.MatrixOperations.transpose(matrix32);
        com.operations.Matrix.Matrix matrix34 = com.operations.Matrix.MatrixOperations.multiply(matrix28, matrix33);
        com.operations.Matrix.Matrix matrix37 = com.operations.Matrix.MatrixTransformations.project2D(0.0d, (double) (-1L));
        com.operations.Matrix.Matrix matrix38 = com.operations.Matrix.MatrixOperations.multiply(matrix28, matrix37);
        com.operations.Matrix.Matrix matrix40 = com.operations.Matrix.MatrixTransformations.rotate2D((double) (short) 100);
        double[] doubleArray43 = new double[] { 137.90576492663388d, (byte) -1 };
        double[] doubleArray44 = com.operations.Matrix.MatrixSolver.solveGaussian(matrix40, doubleArray43);
        com.operations.Matrix.Matrix matrix47 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0L, (double) (byte) 10);
        double[] doubleArray50 = new double[] { 10, 'a' };
        double[] doubleArray53 = new double[] { 10, 'a' };
        double[][] doubleArray54 = new double[][] { doubleArray50, doubleArray53 };
        com.operations.Matrix.Matrix matrix55 = new com.operations.Matrix.Matrix(doubleArray54);
        int int56 = matrix55.getCols();
        int int57 = matrix55.getCols();
        int int58 = matrix55.getCols();
        com.operations.Matrix.Matrix[] matrixArray59 = com.operations.Matrix.MatrixDecompositions.luDecomposition(matrix55);
        com.operations.Matrix.Matrix matrix60 = com.operations.Matrix.MatrixOperations.multiply(matrix47, matrix55);
        boolean boolean62 = com.operations.Matrix.MatrixUtils.compare(matrix40, matrix47, (double) (-1L));
        boolean boolean63 = com.operations.Matrix.MatrixUtils.isSymmetric(matrix40);
        int int64 = matrix40.getCols();
        com.operations.Matrix.Matrix[] matrixArray65 = com.operations.Matrix.MatrixDecompositions.luDecomposition(matrix40);
        double double66 = com.operations.Matrix.MatrixUtils.frobeniusNorm(matrix40);
        double double67 = com.operations.Matrix.MatrixUtils.frobeniusNorm(matrix40);
        double[][] doubleArray68 = matrix40.getData();
        com.operations.Matrix.Matrix matrix69 = new com.operations.Matrix.Matrix(doubleArray68);
        com.operations.Matrix.Matrix matrix70 = new com.operations.Matrix.Matrix(doubleArray68);
        boolean boolean72 = com.operations.Matrix.MatrixUtils.compare(matrix37, matrix70, 146.4308710620817d);
        boolean boolean73 = com.operations.Matrix.MatrixUtils.isSquare(matrix37);
        int int74 = matrix37.getCols();
        org.junit.Assert.assertNotNull(matrix1);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertArrayEquals(doubleArray4, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertArrayEquals(doubleArray7, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertNotNull(matrix12);
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertArrayEquals(doubleArray15, new double[] { 137.90576492663388d, (-1.0d) }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertArrayEquals(doubleArray16, new double[] { (-24.931892522286255d), (-135.63701830716116d) }, 1.0E-15);
        org.junit.Assert.assertNotNull(matrix17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertNotNull(matrix23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 2 + "'", int24 == 2);
        org.junit.Assert.assertNotNull(matrix26);
        org.junit.Assert.assertNotNull(matrix28);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 2 + "'", int29 == 2);
        org.junit.Assert.assertNotNull(matrix32);
        org.junit.Assert.assertNotNull(matrix33);
        org.junit.Assert.assertNotNull(matrix34);
        org.junit.Assert.assertNotNull(matrix37);
        org.junit.Assert.assertNotNull(matrix38);
        org.junit.Assert.assertNotNull(matrix40);
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertArrayEquals(doubleArray43, new double[] { 137.90576492663388d, (-1.0d) }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertArrayEquals(doubleArray44, new double[] { (-24.931892522286255d), (-135.63701830716116d) }, 1.0E-15);
        org.junit.Assert.assertNotNull(matrix47);
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertArrayEquals(doubleArray50, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertArrayEquals(doubleArray53, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray54);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 2 + "'", int56 == 2);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 2 + "'", int57 == 2);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 2 + "'", int58 == 2);
        org.junit.Assert.assertNotNull(matrixArray59);
        org.junit.Assert.assertNotNull(matrix60);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 2 + "'", int64 == 2);
        org.junit.Assert.assertNotNull(matrixArray65);
        org.junit.Assert.assertTrue("'" + double66 + "' != '" + 1.414213562373095d + "'", double66 == 1.414213562373095d);
        org.junit.Assert.assertTrue("'" + double67 + "' != '" + 1.414213562373095d + "'", double67 == 1.414213562373095d);
        org.junit.Assert.assertNotNull(doubleArray68);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + true + "'", boolean72 == true);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + true + "'", boolean73 == true);
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 2 + "'", int74 == 2);
    }

    @Test
    public void test4562() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4562");
        com.operations.Matrix.Matrix matrix2 = com.operations.Matrix.MatrixTransformations.project2D(100.00499987500625d, 146781.22563870353d);
        com.operations.Matrix.Matrix matrix7 = com.operations.Matrix.MatrixUtils.generateRandomMatrix(1, 0, 0, (int) ' ');
        // The following exception was thrown during execution in test generation
        try {
            com.operations.Matrix.Matrix matrix8 = com.operations.Matrix.MatrixOperations.add(matrix2, matrix7);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Matrices must have the same dimensions for addition.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(matrix2);
        org.junit.Assert.assertNotNull(matrix7);
    }

    @Test
    public void test4563() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4563");
        double[] doubleArray2 = new double[] { 10, 'a' };
        double[] doubleArray5 = new double[] { 10, 'a' };
        double[][] doubleArray6 = new double[][] { doubleArray2, doubleArray5 };
        com.operations.Matrix.Matrix matrix7 = new com.operations.Matrix.Matrix(doubleArray6);
        int int8 = matrix7.getCols();
        int int9 = matrix7.getCols();
        int int10 = matrix7.getCols();
        com.operations.Matrix.Matrix matrix16 = com.operations.Matrix.MatrixUtils.generateRandomMatrix(100, (int) (byte) 1, (int) '#', (int) '#', 1L);
        double double19 = matrix16.getValue((int) '4', 0);
        double double20 = com.operations.Matrix.MatrixUtils.frobeniusNorm(matrix16);
        boolean boolean21 = com.operations.Matrix.MatrixUtils.isSquare(matrix16);
        boolean boolean23 = com.operations.Matrix.MatrixUtils.compare(matrix7, matrix16, (double) 100L);
        com.operations.Matrix.Matrix matrix25 = com.operations.Matrix.MatrixTransformations.rotate2D((double) (short) 100);
        double[] doubleArray28 = new double[] { 137.90576492663388d, (byte) -1 };
        double[] doubleArray29 = com.operations.Matrix.MatrixSolver.solveGaussian(matrix25, doubleArray28);
        com.operations.Matrix.Matrix matrix32 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0L, (double) (byte) 10);
        double[] doubleArray35 = new double[] { 10, 'a' };
        double[] doubleArray38 = new double[] { 10, 'a' };
        double[][] doubleArray39 = new double[][] { doubleArray35, doubleArray38 };
        com.operations.Matrix.Matrix matrix40 = new com.operations.Matrix.Matrix(doubleArray39);
        int int41 = matrix40.getCols();
        int int42 = matrix40.getCols();
        int int43 = matrix40.getCols();
        com.operations.Matrix.Matrix[] matrixArray44 = com.operations.Matrix.MatrixDecompositions.luDecomposition(matrix40);
        com.operations.Matrix.Matrix matrix45 = com.operations.Matrix.MatrixOperations.multiply(matrix32, matrix40);
        boolean boolean47 = com.operations.Matrix.MatrixUtils.compare(matrix25, matrix32, (double) (-1L));
        com.operations.Matrix.Matrix matrix48 = com.operations.Matrix.MatrixOperations.subtract(matrix7, matrix32);
        double[] doubleArray51 = new double[] { 10, 'a' };
        double[] doubleArray54 = new double[] { 10, 'a' };
        double[][] doubleArray55 = new double[][] { doubleArray51, doubleArray54 };
        com.operations.Matrix.Matrix matrix56 = new com.operations.Matrix.Matrix(doubleArray55);
        com.operations.Matrix.Matrix matrix57 = new com.operations.Matrix.Matrix(doubleArray55);
        com.operations.Matrix.Matrix[] matrixArray58 = com.operations.Matrix.MatrixDecompositions.luDecomposition(matrix57);
        com.operations.Matrix.Matrix matrix59 = com.operations.Matrix.MatrixDecompositions.choleskyDecomposition(matrix57);
        boolean boolean61 = com.operations.Matrix.MatrixUtils.compare(matrix48, matrix59, (double) 0);
        boolean boolean62 = com.operations.Matrix.MatrixUtils.isSymmetric(matrix59);
        double[][] doubleArray63 = matrix59.getData();
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertArrayEquals(doubleArray2, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertArrayEquals(doubleArray5, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 2 + "'", int8 == 2);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 2 + "'", int9 == 2);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 2 + "'", int10 == 2);
        org.junit.Assert.assertNotNull(matrix16);
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 35.0d + "'", double19 == 35.0d);
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 350.0d + "'", double20 == 350.0d);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(matrix25);
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertArrayEquals(doubleArray28, new double[] { 137.90576492663388d, (-1.0d) }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertArrayEquals(doubleArray29, new double[] { (-24.931892522286255d), (-135.63701830716116d) }, 1.0E-15);
        org.junit.Assert.assertNotNull(matrix32);
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertArrayEquals(doubleArray35, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertArrayEquals(doubleArray38, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 2 + "'", int41 == 2);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 2 + "'", int42 == 2);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 2 + "'", int43 == 2);
        org.junit.Assert.assertNotNull(matrixArray44);
        org.junit.Assert.assertNotNull(matrix45);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(matrix48);
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertArrayEquals(doubleArray51, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray54);
        org.junit.Assert.assertArrayEquals(doubleArray54, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertNotNull(matrixArray58);
        org.junit.Assert.assertNotNull(matrix59);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertNotNull(doubleArray63);
    }

    @Test
    public void test4564() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4564");
        com.operations.Matrix.Matrix matrix2 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0.0f, (double) (-1));
        com.operations.Matrix.Matrix matrix5 = com.operations.Matrix.MatrixTransformations.scale2D(146.4308710620817d, (double) 10L);
        com.operations.Matrix.Matrix matrix6 = com.operations.Matrix.MatrixOperations.multiply(matrix2, matrix5);
        com.operations.Matrix.Matrix matrix8 = com.operations.Matrix.MatrixTransformations.rotate2D((double) 1.0f);
        com.operations.Matrix.Matrix matrix11 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0L, (double) (byte) 10);
        int int12 = matrix11.getRows();
        com.operations.Matrix.Matrix matrix14 = com.operations.Matrix.MatrixOperations.scalarMultiply(matrix11, (double) 2);
        double double15 = com.operations.Matrix.MatrixUtils.frobeniusNorm(matrix11);
        com.operations.Matrix.Matrix matrix18 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0L, (double) (byte) 10);
        int int19 = matrix18.getRows();
        com.operations.Matrix.Matrix matrix21 = com.operations.Matrix.MatrixOperations.scalarMultiply(matrix18, (double) 2);
        com.operations.Matrix.Matrix matrix22 = com.operations.Matrix.MatrixOperations.subtract(matrix11, matrix21);
        com.operations.Matrix.Matrix matrix23 = com.operations.Matrix.MatrixOperations.add(matrix8, matrix21);
        matrix8.print();
        double[] doubleArray27 = new double[] { 10, 'a' };
        double[] doubleArray30 = new double[] { 10, 'a' };
        double[][] doubleArray31 = new double[][] { doubleArray27, doubleArray30 };
        com.operations.Matrix.Matrix matrix32 = new com.operations.Matrix.Matrix(doubleArray31);
        com.operations.Matrix.Matrix matrix33 = com.operations.Matrix.MatrixOperations.transpose(matrix32);
        com.operations.Matrix.Matrix matrix36 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0L, (double) (byte) 10);
        int int37 = matrix36.getRows();
        com.operations.Matrix.Matrix matrix43 = com.operations.Matrix.MatrixUtils.generateRandomMatrix(100, (int) (byte) 1, (int) '#', (int) '#', 1L);
        boolean boolean45 = com.operations.Matrix.MatrixUtils.compare(matrix36, matrix43, (double) 1.0f);
        com.operations.Matrix.Matrix matrix47 = com.operations.Matrix.MatrixOperations.scalarMultiply(matrix36, (double) 1L);
        matrix36.print();
        com.operations.Matrix.Matrix matrix49 = com.operations.Matrix.MatrixOperations.multiply(matrix33, matrix36);
        com.operations.Matrix.Matrix matrix50 = com.operations.Matrix.MatrixOperations.multiply(matrix8, matrix36);
        com.operations.Matrix.Matrix matrix51 = com.operations.Matrix.MatrixOperations.subtract(matrix2, matrix36);
        matrix2.print();
        com.operations.Matrix.Matrix matrix55 = com.operations.Matrix.MatrixTransformations.project2D((double) (short) 0, (double) 1);
        com.operations.Matrix.Matrix matrix56 = com.operations.Matrix.MatrixOperations.multiply(matrix2, matrix55);
        com.operations.Matrix.Matrix matrix59 = new com.operations.Matrix.Matrix((int) '4', 10);
        boolean boolean61 = com.operations.Matrix.MatrixUtils.compare(matrix2, matrix59, (double) (short) 1);
        org.junit.Assert.assertNotNull(matrix2);
        org.junit.Assert.assertNotNull(matrix5);
        org.junit.Assert.assertNotNull(matrix6);
        org.junit.Assert.assertNotNull(matrix8);
        org.junit.Assert.assertNotNull(matrix11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 2 + "'", int12 == 2);
        org.junit.Assert.assertNotNull(matrix14);
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 10.0d + "'", double15 == 10.0d);
        org.junit.Assert.assertNotNull(matrix18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 2 + "'", int19 == 2);
        org.junit.Assert.assertNotNull(matrix21);
        org.junit.Assert.assertNotNull(matrix22);
        org.junit.Assert.assertNotNull(matrix23);
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertArrayEquals(doubleArray27, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertArrayEquals(doubleArray30, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertNotNull(matrix33);
        org.junit.Assert.assertNotNull(matrix36);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 2 + "'", int37 == 2);
        org.junit.Assert.assertNotNull(matrix43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(matrix47);
        org.junit.Assert.assertNotNull(matrix49);
        org.junit.Assert.assertNotNull(matrix50);
        org.junit.Assert.assertNotNull(matrix51);
        org.junit.Assert.assertNotNull(matrix55);
        org.junit.Assert.assertNotNull(matrix56);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
    }

    @Test
    public void test4565() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4565");
        com.operations.Matrix.Matrix matrix4 = com.operations.Matrix.MatrixUtils.generateRandomMatrix((int) ' ', (int) ' ', (int) (byte) 10, (int) (byte) 1);
        int int5 = matrix4.getCols();
        org.junit.Assert.assertNotNull(matrix4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 32 + "'", int5 == 32);
    }

    @Test
    public void test4566() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4566");
        double[] doubleArray2 = new double[] { 10, 'a' };
        double[] doubleArray5 = new double[] { 10, 'a' };
        double[][] doubleArray6 = new double[][] { doubleArray2, doubleArray5 };
        com.operations.Matrix.Matrix matrix7 = new com.operations.Matrix.Matrix(doubleArray6);
        com.operations.Matrix.Matrix matrix8 = com.operations.Matrix.MatrixOperations.transpose(matrix7);
        com.operations.Matrix.Matrix matrix11 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0L, (double) (byte) 10);
        int int12 = matrix11.getRows();
        com.operations.Matrix.Matrix matrix18 = com.operations.Matrix.MatrixUtils.generateRandomMatrix(100, (int) (byte) 1, (int) '#', (int) '#', 1L);
        boolean boolean20 = com.operations.Matrix.MatrixUtils.compare(matrix11, matrix18, (double) 1.0f);
        com.operations.Matrix.Matrix matrix22 = com.operations.Matrix.MatrixOperations.scalarMultiply(matrix11, (double) 1L);
        matrix11.print();
        com.operations.Matrix.Matrix matrix24 = com.operations.Matrix.MatrixOperations.multiply(matrix8, matrix11);
        com.operations.Matrix.Matrix matrix26 = com.operations.Matrix.MatrixTransformations.rotate2D((double) '4');
        int int27 = matrix26.getRows();
        com.operations.Matrix.Matrix matrix28 = com.operations.Matrix.MatrixOperations.add(matrix24, matrix26);
        int int29 = matrix26.getCols();
        boolean boolean30 = com.operations.Matrix.MatrixUtils.isSymmetric(matrix26);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertArrayEquals(doubleArray2, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertArrayEquals(doubleArray5, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertNotNull(matrix8);
        org.junit.Assert.assertNotNull(matrix11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 2 + "'", int12 == 2);
        org.junit.Assert.assertNotNull(matrix18);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(matrix22);
        org.junit.Assert.assertNotNull(matrix24);
        org.junit.Assert.assertNotNull(matrix26);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 2 + "'", int27 == 2);
        org.junit.Assert.assertNotNull(matrix28);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 2 + "'", int29 == 2);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
    }

    @Test
    public void test4567() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4567");
        com.operations.Matrix.Matrix matrix2 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0L, (double) 10L);
        com.operations.Matrix.Matrix matrix5 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0L, (double) (byte) 10);
        double[] doubleArray8 = new double[] { 10, 'a' };
        double[] doubleArray11 = new double[] { 10, 'a' };
        double[][] doubleArray12 = new double[][] { doubleArray8, doubleArray11 };
        com.operations.Matrix.Matrix matrix13 = new com.operations.Matrix.Matrix(doubleArray12);
        int int14 = matrix13.getCols();
        int int15 = matrix13.getCols();
        int int16 = matrix13.getCols();
        com.operations.Matrix.Matrix[] matrixArray17 = com.operations.Matrix.MatrixDecompositions.luDecomposition(matrix13);
        com.operations.Matrix.Matrix matrix18 = com.operations.Matrix.MatrixOperations.multiply(matrix5, matrix13);
        com.operations.Matrix.Matrix matrix20 = com.operations.Matrix.MatrixTransformations.rotate2D((double) (short) 100);
        boolean boolean22 = com.operations.Matrix.MatrixUtils.compare(matrix13, matrix20, (double) (byte) 0);
        double[] doubleArray25 = new double[] { 10, 'a' };
        double[] doubleArray28 = new double[] { 10, 'a' };
        double[][] doubleArray29 = new double[][] { doubleArray25, doubleArray28 };
        com.operations.Matrix.Matrix matrix30 = new com.operations.Matrix.Matrix(doubleArray29);
        com.operations.Matrix.Matrix matrix31 = new com.operations.Matrix.Matrix(doubleArray29);
        com.operations.Matrix.Matrix matrix32 = new com.operations.Matrix.Matrix(doubleArray29);
        boolean boolean34 = com.operations.Matrix.MatrixUtils.compare(matrix13, matrix32, (double) (-1));
        com.operations.Matrix.Matrix matrix36 = com.operations.Matrix.MatrixTransformations.rotate2D((double) (short) 100);
        double[] doubleArray39 = new double[] { 137.90576492663388d, (byte) -1 };
        double[] doubleArray40 = com.operations.Matrix.MatrixSolver.solveGaussian(matrix36, doubleArray39);
        com.operations.Matrix.Matrix matrix43 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0L, (double) (byte) 10);
        double[] doubleArray46 = new double[] { 10, 'a' };
        double[] doubleArray49 = new double[] { 10, 'a' };
        double[][] doubleArray50 = new double[][] { doubleArray46, doubleArray49 };
        com.operations.Matrix.Matrix matrix51 = new com.operations.Matrix.Matrix(doubleArray50);
        int int52 = matrix51.getCols();
        int int53 = matrix51.getCols();
        int int54 = matrix51.getCols();
        com.operations.Matrix.Matrix[] matrixArray55 = com.operations.Matrix.MatrixDecompositions.luDecomposition(matrix51);
        com.operations.Matrix.Matrix matrix56 = com.operations.Matrix.MatrixOperations.multiply(matrix43, matrix51);
        boolean boolean58 = com.operations.Matrix.MatrixUtils.compare(matrix36, matrix43, (double) (-1L));
        com.operations.Matrix.Matrix matrix59 = com.operations.Matrix.MatrixOperations.add(matrix32, matrix43);
        boolean boolean61 = com.operations.Matrix.MatrixUtils.compare(matrix2, matrix59, 146.4308710620817d);
        com.operations.Matrix.Matrix matrix63 = com.operations.Matrix.MatrixOperations.scalarMultiply(matrix59, (double) 100L);
        com.operations.Matrix.Matrix matrix64 = com.operations.Matrix.MatrixDecompositions.choleskyDecomposition(matrix59);
        matrix64.setValue(0, (int) (byte) 1, 131.06486943494812d);
        org.junit.Assert.assertNotNull(matrix2);
        org.junit.Assert.assertNotNull(matrix5);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertArrayEquals(doubleArray8, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertArrayEquals(doubleArray11, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 2 + "'", int14 == 2);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 2 + "'", int15 == 2);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 2 + "'", int16 == 2);
        org.junit.Assert.assertNotNull(matrixArray17);
        org.junit.Assert.assertNotNull(matrix18);
        org.junit.Assert.assertNotNull(matrix20);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertArrayEquals(doubleArray25, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertArrayEquals(doubleArray28, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(matrix36);
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertArrayEquals(doubleArray39, new double[] { 137.90576492663388d, (-1.0d) }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertArrayEquals(doubleArray40, new double[] { (-24.931892522286255d), (-135.63701830716116d) }, 1.0E-15);
        org.junit.Assert.assertNotNull(matrix43);
        org.junit.Assert.assertNotNull(doubleArray46);
        org.junit.Assert.assertArrayEquals(doubleArray46, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertArrayEquals(doubleArray49, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 2 + "'", int52 == 2);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 2 + "'", int53 == 2);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 2 + "'", int54 == 2);
        org.junit.Assert.assertNotNull(matrixArray55);
        org.junit.Assert.assertNotNull(matrix56);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(matrix59);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + true + "'", boolean61 == true);
        org.junit.Assert.assertNotNull(matrix63);
        org.junit.Assert.assertNotNull(matrix64);
    }

    @Test
    public void test4568() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4568");
        com.operations.Matrix.Matrix matrix2 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0L, (double) (byte) 10);
        int int3 = matrix2.getRows();
        com.operations.Matrix.Matrix matrix5 = com.operations.Matrix.MatrixOperations.scalarMultiply(matrix2, (double) 2);
        double double6 = com.operations.Matrix.MatrixUtils.frobeniusNorm(matrix2);
        com.operations.Matrix.Matrix matrix9 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0L, (double) (byte) 10);
        int int10 = matrix9.getRows();
        com.operations.Matrix.Matrix matrix12 = com.operations.Matrix.MatrixOperations.scalarMultiply(matrix9, (double) 2);
        com.operations.Matrix.Matrix matrix13 = com.operations.Matrix.MatrixOperations.subtract(matrix2, matrix12);
        com.operations.Matrix.Matrix matrix15 = com.operations.Matrix.MatrixTransformations.rotate2D((double) (short) 100);
        double[] doubleArray18 = new double[] { 137.90576492663388d, (byte) -1 };
        double[] doubleArray19 = com.operations.Matrix.MatrixSolver.solveGaussian(matrix15, doubleArray18);
        com.operations.Matrix.Matrix matrix22 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0L, (double) (byte) 10);
        double[] doubleArray25 = new double[] { 10, 'a' };
        double[] doubleArray28 = new double[] { 10, 'a' };
        double[][] doubleArray29 = new double[][] { doubleArray25, doubleArray28 };
        com.operations.Matrix.Matrix matrix30 = new com.operations.Matrix.Matrix(doubleArray29);
        int int31 = matrix30.getCols();
        int int32 = matrix30.getCols();
        int int33 = matrix30.getCols();
        com.operations.Matrix.Matrix[] matrixArray34 = com.operations.Matrix.MatrixDecompositions.luDecomposition(matrix30);
        com.operations.Matrix.Matrix matrix35 = com.operations.Matrix.MatrixOperations.multiply(matrix22, matrix30);
        boolean boolean37 = com.operations.Matrix.MatrixUtils.compare(matrix15, matrix22, (double) (-1L));
        double[][] doubleArray38 = matrix15.getData();
        com.operations.Matrix.Matrix matrix41 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0L, (double) 10L);
        boolean boolean43 = com.operations.Matrix.MatrixUtils.compare(matrix15, matrix41, 146.4308710620817d);
        com.operations.Matrix.Matrix matrix44 = com.operations.Matrix.MatrixOperations.subtract(matrix13, matrix41);
        com.operations.Matrix.Matrix matrix47 = com.operations.Matrix.MatrixTransformations.project2D((double) 0L, (double) 0);
        com.operations.Matrix.Matrix[] matrixArray48 = com.operations.Matrix.MatrixDecompositions.luDecomposition(matrix47);
        com.operations.Matrix.Matrix matrix49 = com.operations.Matrix.MatrixOperations.transpose(matrix47);
        com.operations.Matrix.Matrix matrix50 = com.operations.Matrix.MatrixOperations.multiply(matrix41, matrix49);
        double double51 = com.operations.Matrix.MatrixUtils.frobeniusNorm(matrix49);
        org.junit.Assert.assertNotNull(matrix2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 2 + "'", int3 == 2);
        org.junit.Assert.assertNotNull(matrix5);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 10.0d + "'", double6 == 10.0d);
        org.junit.Assert.assertNotNull(matrix9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 2 + "'", int10 == 2);
        org.junit.Assert.assertNotNull(matrix12);
        org.junit.Assert.assertNotNull(matrix13);
        org.junit.Assert.assertNotNull(matrix15);
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertArrayEquals(doubleArray18, new double[] { 137.90576492663388d, (-1.0d) }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertArrayEquals(doubleArray19, new double[] { (-24.931892522286255d), (-135.63701830716116d) }, 1.0E-15);
        org.junit.Assert.assertNotNull(matrix22);
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertArrayEquals(doubleArray25, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertArrayEquals(doubleArray28, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 2 + "'", int31 == 2);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 2 + "'", int32 == 2);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 2 + "'", int33 == 2);
        org.junit.Assert.assertNotNull(matrixArray34);
        org.junit.Assert.assertNotNull(matrix35);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertNotNull(matrix41);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertNotNull(matrix44);
        org.junit.Assert.assertNotNull(matrix47);
        org.junit.Assert.assertNotNull(matrixArray48);
        org.junit.Assert.assertNotNull(matrix49);
        org.junit.Assert.assertNotNull(matrix50);
        org.junit.Assert.assertTrue("'" + double51 + "' != '" + 0.0d + "'", double51 == 0.0d);
    }

    @Test
    public void test4569() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4569");
        com.operations.Matrix.Matrix matrix2 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0.0f, 350.0d);
        com.operations.Matrix.Matrix matrix5 = com.operations.Matrix.MatrixTransformations.project2D(0.0d, (double) 0);
        com.operations.Matrix.Matrix[] matrixArray6 = com.operations.Matrix.MatrixDecompositions.luDecomposition(matrix5);
        com.operations.Matrix.Matrix matrix9 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0L, (double) (byte) 10);
        int int10 = matrix9.getRows();
        com.operations.Matrix.Matrix matrix12 = com.operations.Matrix.MatrixOperations.scalarMultiply(matrix9, (double) 2);
        double double13 = com.operations.Matrix.MatrixUtils.frobeniusNorm(matrix9);
        int int14 = matrix9.getRows();
        com.operations.Matrix.Matrix matrix15 = com.operations.Matrix.MatrixOperations.transpose(matrix9);
        com.operations.Matrix.Matrix matrix16 = com.operations.Matrix.MatrixOperations.multiply(matrix5, matrix15);
        com.operations.Matrix.Matrix matrix17 = com.operations.Matrix.MatrixOperations.multiply(matrix2, matrix15);
        double double18 = com.operations.Matrix.MatrixUtils.frobeniusNorm(matrix17);
        org.junit.Assert.assertNotNull(matrix2);
        org.junit.Assert.assertNotNull(matrix5);
        org.junit.Assert.assertNotNull(matrixArray6);
        org.junit.Assert.assertNotNull(matrix9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 2 + "'", int10 == 2);
        org.junit.Assert.assertNotNull(matrix12);
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 10.0d + "'", double13 == 10.0d);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 2 + "'", int14 == 2);
        org.junit.Assert.assertNotNull(matrix15);
        org.junit.Assert.assertNotNull(matrix16);
        org.junit.Assert.assertNotNull(matrix17);
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 3500.0d + "'", double18 == 3500.0d);
    }

    @Test
    public void test4570() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4570");
        // The following exception was thrown during execution in test generation
        try {
            com.operations.Matrix.Matrix matrix5 = com.operations.Matrix.MatrixUtils.generateRandomMatrix((int) (short) -1, (int) '4', 100, (int) (short) 10, (-1L));
            org.junit.Assert.fail("Expected exception of type java.lang.NegativeArraySizeException; message: -1");
        } catch (java.lang.NegativeArraySizeException e) {
            // Expected exception.
        }
    }

    @Test
    public void test4571() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4571");
        com.operations.Matrix.Matrix matrix2 = com.operations.Matrix.MatrixTransformations.scale2D((double) 10L, 35.0d);
        matrix2.print();
        boolean boolean4 = com.operations.Matrix.MatrixUtils.isSymmetric(matrix2);
        org.junit.Assert.assertNotNull(matrix2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
    }

    @Test
    public void test4572() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4572");
        // The following exception was thrown during execution in test generation
        try {
            com.operations.Matrix.Matrix matrix4 = com.operations.Matrix.MatrixUtils.generateRandomMatrix((int) (short) 0, (int) (byte) -1, 100, (int) (byte) 0);
            org.junit.Assert.fail("Expected exception of type java.lang.NegativeArraySizeException; message: -1");
        } catch (java.lang.NegativeArraySizeException e) {
            // Expected exception.
        }
    }

    @Test
    public void test4573() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4573");
        com.operations.Matrix.Matrix matrix2 = com.operations.Matrix.MatrixTransformations.project2D(4833.750951739279d, (double) (-1));
        org.junit.Assert.assertNotNull(matrix2);
    }

    @Test
    public void test4574() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4574");
        com.operations.Matrix.Matrix matrix1 = com.operations.Matrix.MatrixTransformations.rotate2D((double) '4');
        com.operations.Matrix.Matrix matrix4 = com.operations.Matrix.MatrixTransformations.project2D((double) ' ', 0.0d);
        boolean boolean5 = com.operations.Matrix.MatrixUtils.isSymmetric(matrix4);
        boolean boolean7 = com.operations.Matrix.MatrixUtils.compare(matrix1, matrix4, 1.4142135623730951d);
        boolean boolean8 = com.operations.Matrix.MatrixUtils.isSquare(matrix4);
        com.operations.Matrix.Matrix matrix11 = com.operations.Matrix.MatrixTransformations.scale2D((double) (byte) 100, 350.0d);
        com.operations.Matrix.Matrix matrix14 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0L, (double) (byte) 10);
        double[] doubleArray17 = new double[] { 10, 'a' };
        double[] doubleArray20 = new double[] { 10, 'a' };
        double[][] doubleArray21 = new double[][] { doubleArray17, doubleArray20 };
        com.operations.Matrix.Matrix matrix22 = new com.operations.Matrix.Matrix(doubleArray21);
        int int23 = matrix22.getCols();
        int int24 = matrix22.getCols();
        int int25 = matrix22.getCols();
        com.operations.Matrix.Matrix[] matrixArray26 = com.operations.Matrix.MatrixDecompositions.luDecomposition(matrix22);
        com.operations.Matrix.Matrix matrix27 = com.operations.Matrix.MatrixOperations.multiply(matrix14, matrix22);
        com.operations.Matrix.Matrix matrix29 = com.operations.Matrix.MatrixTransformations.rotate2D((double) (short) 100);
        boolean boolean31 = com.operations.Matrix.MatrixUtils.compare(matrix22, matrix29, (double) (byte) 0);
        double[] doubleArray34 = new double[] { 10, 'a' };
        double[] doubleArray37 = new double[] { 10, 'a' };
        double[][] doubleArray38 = new double[][] { doubleArray34, doubleArray37 };
        com.operations.Matrix.Matrix matrix39 = new com.operations.Matrix.Matrix(doubleArray38);
        com.operations.Matrix.Matrix matrix40 = com.operations.Matrix.MatrixOperations.multiply(matrix22, matrix39);
        com.operations.Matrix.Matrix matrix41 = com.operations.Matrix.MatrixOperations.multiply(matrix11, matrix40);
        int int42 = matrix41.getRows();
        com.operations.Matrix.Matrix matrix47 = com.operations.Matrix.MatrixUtils.generateRandomMatrix((int) '#', (int) (byte) 0, 10, (int) (short) -1);
        com.operations.Matrix.Matrix matrix49 = com.operations.Matrix.MatrixOperations.scalarMultiply(matrix47, (double) 100L);
        com.operations.Matrix.Matrix matrix52 = com.operations.Matrix.MatrixTransformations.project2D(0.0d, (double) 0);
        com.operations.Matrix.Matrix[] matrixArray53 = com.operations.Matrix.MatrixDecompositions.luDecomposition(matrix52);
        com.operations.Matrix.Matrix matrix56 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0L, (double) (byte) 10);
        int int57 = matrix56.getRows();
        com.operations.Matrix.Matrix matrix59 = com.operations.Matrix.MatrixOperations.scalarMultiply(matrix56, (double) 2);
        double double60 = com.operations.Matrix.MatrixUtils.frobeniusNorm(matrix56);
        int int61 = matrix56.getRows();
        com.operations.Matrix.Matrix matrix62 = com.operations.Matrix.MatrixOperations.transpose(matrix56);
        com.operations.Matrix.Matrix matrix63 = com.operations.Matrix.MatrixOperations.multiply(matrix52, matrix62);
        double[] doubleArray66 = new double[] { 10, 'a' };
        double[] doubleArray69 = new double[] { 10, 'a' };
        double[][] doubleArray70 = new double[][] { doubleArray66, doubleArray69 };
        com.operations.Matrix.Matrix matrix71 = new com.operations.Matrix.Matrix(doubleArray70);
        com.operations.Matrix.Matrix matrix72 = new com.operations.Matrix.Matrix(doubleArray70);
        com.operations.Matrix.Matrix[] matrixArray73 = com.operations.Matrix.MatrixDecompositions.luDecomposition(matrix72);
        com.operations.Matrix.Matrix matrix76 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0, (double) 100L);
        com.operations.Matrix.Matrix matrix77 = com.operations.Matrix.MatrixOperations.subtract(matrix72, matrix76);
        double[][] doubleArray78 = matrix77.getData();
        com.operations.Matrix.Matrix matrix79 = new com.operations.Matrix.Matrix(doubleArray78);
        boolean boolean81 = com.operations.Matrix.MatrixUtils.compare(matrix62, matrix79, 32.0d);
        boolean boolean83 = com.operations.Matrix.MatrixUtils.compare(matrix47, matrix62, 146781.22563870353d);
        com.operations.Matrix.Matrix matrix84 = com.operations.Matrix.MatrixOperations.add(matrix41, matrix62);
        boolean boolean86 = com.operations.Matrix.MatrixUtils.compare(matrix4, matrix62, 400.0d);
        com.operations.Matrix.Matrix matrix88 = com.operations.Matrix.MatrixOperations.scalarMultiply(matrix4, 975.1410154434076d);
        matrix4.print();
        org.junit.Assert.assertNotNull(matrix1);
        org.junit.Assert.assertNotNull(matrix4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNotNull(matrix11);
        org.junit.Assert.assertNotNull(matrix14);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertArrayEquals(doubleArray17, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertArrayEquals(doubleArray20, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 2 + "'", int23 == 2);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 2 + "'", int24 == 2);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 2 + "'", int25 == 2);
        org.junit.Assert.assertNotNull(matrixArray26);
        org.junit.Assert.assertNotNull(matrix27);
        org.junit.Assert.assertNotNull(matrix29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertArrayEquals(doubleArray34, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertArrayEquals(doubleArray37, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertNotNull(matrix40);
        org.junit.Assert.assertNotNull(matrix41);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 2 + "'", int42 == 2);
        org.junit.Assert.assertNotNull(matrix47);
        org.junit.Assert.assertNotNull(matrix49);
        org.junit.Assert.assertNotNull(matrix52);
        org.junit.Assert.assertNotNull(matrixArray53);
        org.junit.Assert.assertNotNull(matrix56);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 2 + "'", int57 == 2);
        org.junit.Assert.assertNotNull(matrix59);
        org.junit.Assert.assertTrue("'" + double60 + "' != '" + 10.0d + "'", double60 == 10.0d);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 2 + "'", int61 == 2);
        org.junit.Assert.assertNotNull(matrix62);
        org.junit.Assert.assertNotNull(matrix63);
        org.junit.Assert.assertNotNull(doubleArray66);
        org.junit.Assert.assertArrayEquals(doubleArray66, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray69);
        org.junit.Assert.assertArrayEquals(doubleArray69, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray70);
        org.junit.Assert.assertNotNull(matrixArray73);
        org.junit.Assert.assertNotNull(matrix76);
        org.junit.Assert.assertNotNull(matrix77);
        org.junit.Assert.assertNotNull(doubleArray78);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertNotNull(matrix84);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + true + "'", boolean86 == true);
        org.junit.Assert.assertNotNull(matrix88);
    }

    @Test
    public void test4575() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4575");
        com.operations.Matrix.Matrix matrix2 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0L, (double) (byte) 10);
        int int3 = matrix2.getRows();
        com.operations.Matrix.Matrix matrix9 = com.operations.Matrix.MatrixUtils.generateRandomMatrix(100, (int) (byte) 1, (int) '#', (int) '#', 1L);
        boolean boolean11 = com.operations.Matrix.MatrixUtils.compare(matrix2, matrix9, (double) 1.0f);
        matrix9.print();
        double[][] doubleArray13 = matrix9.getData();
        com.operations.Matrix.Matrix matrix14 = new com.operations.Matrix.Matrix(doubleArray13);
        com.operations.Matrix.Matrix matrix16 = com.operations.Matrix.MatrixTransformations.rotate2D(12.751772028997056d);
        boolean boolean18 = com.operations.Matrix.MatrixUtils.compare(matrix14, matrix16, 18.985133644271098d);
        com.operations.Matrix.Matrix matrix19 = com.operations.Matrix.MatrixOperations.transpose(matrix16);
        com.operations.Matrix.Matrix[] matrixArray20 = com.operations.Matrix.MatrixDecompositions.luDecomposition(matrix19);
        org.junit.Assert.assertNotNull(matrix2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 2 + "'", int3 == 2);
        org.junit.Assert.assertNotNull(matrix9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertNotNull(matrix16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(matrix19);
        org.junit.Assert.assertNotNull(matrixArray20);
    }

    @Test
    public void test4576() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4576");
        com.operations.Matrix.Matrix matrix2 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0L, (double) (byte) 10);
        int int3 = matrix2.getRows();
        com.operations.Matrix.Matrix matrix5 = com.operations.Matrix.MatrixOperations.scalarMultiply(matrix2, (double) 2);
        double double6 = com.operations.Matrix.MatrixUtils.frobeniusNorm(matrix2);
        com.operations.Matrix.Matrix matrix9 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0L, (double) (byte) 10);
        int int10 = matrix9.getRows();
        com.operations.Matrix.Matrix matrix12 = com.operations.Matrix.MatrixOperations.scalarMultiply(matrix9, (double) 2);
        com.operations.Matrix.Matrix matrix13 = com.operations.Matrix.MatrixOperations.subtract(matrix2, matrix12);
        com.operations.Matrix.Matrix matrix15 = com.operations.Matrix.MatrixTransformations.rotate2D((double) (short) 100);
        double[] doubleArray18 = new double[] { 137.90576492663388d, (byte) -1 };
        double[] doubleArray19 = com.operations.Matrix.MatrixSolver.solveGaussian(matrix15, doubleArray18);
        com.operations.Matrix.Matrix matrix22 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0L, (double) (byte) 10);
        double[] doubleArray25 = new double[] { 10, 'a' };
        double[] doubleArray28 = new double[] { 10, 'a' };
        double[][] doubleArray29 = new double[][] { doubleArray25, doubleArray28 };
        com.operations.Matrix.Matrix matrix30 = new com.operations.Matrix.Matrix(doubleArray29);
        int int31 = matrix30.getCols();
        int int32 = matrix30.getCols();
        int int33 = matrix30.getCols();
        com.operations.Matrix.Matrix[] matrixArray34 = com.operations.Matrix.MatrixDecompositions.luDecomposition(matrix30);
        com.operations.Matrix.Matrix matrix35 = com.operations.Matrix.MatrixOperations.multiply(matrix22, matrix30);
        boolean boolean37 = com.operations.Matrix.MatrixUtils.compare(matrix15, matrix22, (double) (-1L));
        double[][] doubleArray38 = matrix15.getData();
        com.operations.Matrix.Matrix matrix41 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0L, (double) 10L);
        boolean boolean43 = com.operations.Matrix.MatrixUtils.compare(matrix15, matrix41, 146.4308710620817d);
        com.operations.Matrix.Matrix matrix44 = com.operations.Matrix.MatrixOperations.subtract(matrix13, matrix41);
        com.operations.Matrix.Matrix matrix45 = com.operations.Matrix.MatrixOperations.transpose(matrix13);
        // The following exception was thrown during execution in test generation
        try {
            matrix13.setValue((int) (short) 10, (int) 'a', 260.95643973734866d);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: Index 10 out of bounds for length 2");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(matrix2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 2 + "'", int3 == 2);
        org.junit.Assert.assertNotNull(matrix5);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 10.0d + "'", double6 == 10.0d);
        org.junit.Assert.assertNotNull(matrix9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 2 + "'", int10 == 2);
        org.junit.Assert.assertNotNull(matrix12);
        org.junit.Assert.assertNotNull(matrix13);
        org.junit.Assert.assertNotNull(matrix15);
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertArrayEquals(doubleArray18, new double[] { 137.90576492663388d, (-1.0d) }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertArrayEquals(doubleArray19, new double[] { (-24.931892522286255d), (-135.63701830716116d) }, 1.0E-15);
        org.junit.Assert.assertNotNull(matrix22);
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertArrayEquals(doubleArray25, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertArrayEquals(doubleArray28, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 2 + "'", int31 == 2);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 2 + "'", int32 == 2);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 2 + "'", int33 == 2);
        org.junit.Assert.assertNotNull(matrixArray34);
        org.junit.Assert.assertNotNull(matrix35);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertNotNull(matrix41);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertNotNull(matrix44);
        org.junit.Assert.assertNotNull(matrix45);
    }

    @Test
    public void test4577() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4577");
        com.operations.Matrix.Matrix matrix2 = com.operations.Matrix.MatrixTransformations.project2D((double) (short) 100, (double) 0L);
        boolean boolean3 = com.operations.Matrix.MatrixUtils.isSquare(matrix2);
        double[] doubleArray6 = new double[] { 10, 'a' };
        double[] doubleArray9 = new double[] { 10, 'a' };
        double[][] doubleArray10 = new double[][] { doubleArray6, doubleArray9 };
        com.operations.Matrix.Matrix matrix11 = new com.operations.Matrix.Matrix(doubleArray10);
        com.operations.Matrix.Matrix matrix12 = new com.operations.Matrix.Matrix(doubleArray10);
        com.operations.Matrix.Matrix matrix14 = com.operations.Matrix.MatrixTransformations.rotate2D((double) (short) 100);
        double[] doubleArray17 = new double[] { 137.90576492663388d, (byte) -1 };
        double[] doubleArray18 = com.operations.Matrix.MatrixSolver.solveGaussian(matrix14, doubleArray17);
        com.operations.Matrix.Matrix matrix19 = com.operations.Matrix.MatrixOperations.add(matrix12, matrix14);
        com.operations.Matrix.Matrix matrix20 = com.operations.Matrix.MatrixOperations.transpose(matrix14);
        int int21 = matrix14.getCols();
        int int22 = matrix14.getRows();
        double[] doubleArray25 = new double[] { 10, 'a' };
        double[] doubleArray28 = new double[] { 10, 'a' };
        double[][] doubleArray29 = new double[][] { doubleArray25, doubleArray28 };
        com.operations.Matrix.Matrix matrix30 = new com.operations.Matrix.Matrix(doubleArray29);
        int int31 = matrix30.getCols();
        int int32 = matrix30.getCols();
        matrix30.print();
        double[] doubleArray36 = new double[] { 10, 'a' };
        double[] doubleArray39 = new double[] { 10, 'a' };
        double[][] doubleArray40 = new double[][] { doubleArray36, doubleArray39 };
        com.operations.Matrix.Matrix matrix41 = new com.operations.Matrix.Matrix(doubleArray40);
        boolean boolean43 = com.operations.Matrix.MatrixUtils.compare(matrix30, matrix41, (double) (-1));
        com.operations.Matrix.Matrix matrix44 = com.operations.Matrix.MatrixOperations.multiply(matrix14, matrix30);
        double double47 = matrix14.getValue((int) (short) 0, 0);
        com.operations.Matrix.Matrix matrix48 = com.operations.Matrix.MatrixOperations.add(matrix2, matrix14);
        com.operations.Matrix.Matrix matrix50 = com.operations.Matrix.MatrixOperations.scalarMultiply(matrix48, 0.0d);
        com.operations.Matrix.Matrix matrix52 = com.operations.Matrix.MatrixTransformations.rotate2D((double) (short) 100);
        double[] doubleArray55 = new double[] { 137.90576492663388d, (byte) -1 };
        double[] doubleArray56 = com.operations.Matrix.MatrixSolver.solveGaussian(matrix52, doubleArray55);
        com.operations.Matrix.Matrix matrix59 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0L, (double) (byte) 10);
        double[] doubleArray62 = new double[] { 10, 'a' };
        double[] doubleArray65 = new double[] { 10, 'a' };
        double[][] doubleArray66 = new double[][] { doubleArray62, doubleArray65 };
        com.operations.Matrix.Matrix matrix67 = new com.operations.Matrix.Matrix(doubleArray66);
        int int68 = matrix67.getCols();
        int int69 = matrix67.getCols();
        int int70 = matrix67.getCols();
        com.operations.Matrix.Matrix[] matrixArray71 = com.operations.Matrix.MatrixDecompositions.luDecomposition(matrix67);
        com.operations.Matrix.Matrix matrix72 = com.operations.Matrix.MatrixOperations.multiply(matrix59, matrix67);
        boolean boolean74 = com.operations.Matrix.MatrixUtils.compare(matrix52, matrix59, (double) (-1L));
        com.operations.Matrix.Matrix matrix76 = com.operations.Matrix.MatrixTransformations.rotate2D((-1.0d));
        com.operations.Matrix.Matrix matrix78 = com.operations.Matrix.MatrixTransformations.rotate2D((double) (-1L));
        com.operations.Matrix.Matrix matrix80 = com.operations.Matrix.MatrixTransformations.rotate2D((double) (short) 100);
        double[] doubleArray83 = new double[] { 137.90576492663388d, (byte) -1 };
        double[] doubleArray84 = com.operations.Matrix.MatrixSolver.solveGaussian(matrix80, doubleArray83);
        double[] doubleArray85 = com.operations.Matrix.MatrixSolver.solveGaussian(matrix78, doubleArray83);
        double[] doubleArray86 = com.operations.Matrix.MatrixSolver.solveGaussian(matrix76, doubleArray83);
        boolean boolean88 = com.operations.Matrix.MatrixUtils.compare(matrix59, matrix76, (double) '4');
        com.operations.Matrix.Matrix matrix89 = com.operations.Matrix.MatrixOperations.subtract(matrix48, matrix76);
        com.operations.Matrix.Matrix matrix90 = com.operations.Matrix.MatrixOperations.transpose(matrix48);
        com.operations.Matrix.Matrix matrix91 = com.operations.Matrix.MatrixOperations.transpose(matrix90);
        org.junit.Assert.assertNotNull(matrix2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertArrayEquals(doubleArray6, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertArrayEquals(doubleArray9, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertNotNull(matrix14);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertArrayEquals(doubleArray17, new double[] { 137.90576492663388d, (-1.0d) }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertArrayEquals(doubleArray18, new double[] { (-24.931892522286255d), (-135.63701830716116d) }, 1.0E-15);
        org.junit.Assert.assertNotNull(matrix19);
        org.junit.Assert.assertNotNull(matrix20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 2 + "'", int21 == 2);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 2 + "'", int22 == 2);
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertArrayEquals(doubleArray25, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertArrayEquals(doubleArray28, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 2 + "'", int31 == 2);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 2 + "'", int32 == 2);
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertArrayEquals(doubleArray36, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertArrayEquals(doubleArray39, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(matrix44);
        org.junit.Assert.assertTrue("'" + double47 + "' != '" + (-0.1736481776669303d) + "'", double47 == (-0.1736481776669303d));
        org.junit.Assert.assertNotNull(matrix48);
        org.junit.Assert.assertNotNull(matrix50);
        org.junit.Assert.assertNotNull(matrix52);
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertArrayEquals(doubleArray55, new double[] { 137.90576492663388d, (-1.0d) }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray56);
        org.junit.Assert.assertArrayEquals(doubleArray56, new double[] { (-24.931892522286255d), (-135.63701830716116d) }, 1.0E-15);
        org.junit.Assert.assertNotNull(matrix59);
        org.junit.Assert.assertNotNull(doubleArray62);
        org.junit.Assert.assertArrayEquals(doubleArray62, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray65);
        org.junit.Assert.assertArrayEquals(doubleArray65, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray66);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 2 + "'", int68 == 2);
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 2 + "'", int69 == 2);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 2 + "'", int70 == 2);
        org.junit.Assert.assertNotNull(matrixArray71);
        org.junit.Assert.assertNotNull(matrix72);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertNotNull(matrix76);
        org.junit.Assert.assertNotNull(matrix78);
        org.junit.Assert.assertNotNull(matrix80);
        org.junit.Assert.assertNotNull(doubleArray83);
        org.junit.Assert.assertArrayEquals(doubleArray83, new double[] { 137.90576492663388d, (-1.0d) }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray84);
        org.junit.Assert.assertArrayEquals(doubleArray84, new double[] { (-24.931892522286255d), (-135.63701830716116d) }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray85);
        org.junit.Assert.assertArrayEquals(doubleArray85, new double[] { 137.90221361711127d, 1.4069397643877004d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray86);
        org.junit.Assert.assertArrayEquals(doubleArray86, new double[] { 137.90221361711127d, 1.4069397643877004d }, 1.0E-15);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + true + "'", boolean88 == true);
        org.junit.Assert.assertNotNull(matrix89);
        org.junit.Assert.assertNotNull(matrix90);
        org.junit.Assert.assertNotNull(matrix91);
    }

    @Test
    public void test4578() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4578");
        com.operations.Matrix.Matrix matrix2 = com.operations.Matrix.MatrixTransformations.project2D(0.0d, (double) 0);
        com.operations.Matrix.Matrix[] matrixArray3 = com.operations.Matrix.MatrixDecompositions.luDecomposition(matrix2);
        com.operations.Matrix.Matrix matrix5 = com.operations.Matrix.MatrixTransformations.rotate2D(0.01745240643728351d);
        com.operations.Matrix.Matrix matrix6 = com.operations.Matrix.MatrixOperations.multiply(matrix2, matrix5);
        boolean boolean7 = com.operations.Matrix.MatrixUtils.isSymmetric(matrix5);
        org.junit.Assert.assertNotNull(matrix2);
        org.junit.Assert.assertNotNull(matrixArray3);
        org.junit.Assert.assertNotNull(matrix5);
        org.junit.Assert.assertNotNull(matrix6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
    }

    @Test
    public void test4579() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4579");
        com.operations.Matrix.Matrix matrix1 = com.operations.Matrix.MatrixTransformations.rotate2D(100.0d);
        int int2 = matrix1.getCols();
        int int3 = matrix1.getRows();
        com.operations.Matrix.Matrix matrix6 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0L, (double) (byte) 10);
        int int7 = matrix6.getRows();
        com.operations.Matrix.Matrix matrix9 = com.operations.Matrix.MatrixOperations.scalarMultiply(matrix6, (double) 2);
        double double10 = com.operations.Matrix.MatrixUtils.frobeniusNorm(matrix6);
        com.operations.Matrix.Matrix matrix11 = com.operations.Matrix.MatrixOperations.add(matrix1, matrix6);
        double[] doubleArray14 = new double[] { 10, 'a' };
        double[] doubleArray17 = new double[] { 10, 'a' };
        double[][] doubleArray18 = new double[][] { doubleArray14, doubleArray17 };
        com.operations.Matrix.Matrix matrix19 = new com.operations.Matrix.Matrix(doubleArray18);
        com.operations.Matrix.Matrix matrix20 = new com.operations.Matrix.Matrix(doubleArray18);
        com.operations.Matrix.Matrix matrix22 = com.operations.Matrix.MatrixTransformations.rotate2D((double) (short) 100);
        double[] doubleArray25 = new double[] { 137.90576492663388d, (byte) -1 };
        double[] doubleArray26 = com.operations.Matrix.MatrixSolver.solveGaussian(matrix22, doubleArray25);
        com.operations.Matrix.Matrix matrix27 = com.operations.Matrix.MatrixOperations.add(matrix20, matrix22);
        com.operations.Matrix.Matrix matrix28 = com.operations.Matrix.MatrixOperations.transpose(matrix22);
        com.operations.Matrix.Matrix matrix30 = com.operations.Matrix.MatrixTransformations.rotate2D((double) (short) 100);
        com.operations.Matrix.Matrix matrix31 = com.operations.Matrix.MatrixOperations.subtract(matrix22, matrix30);
        com.operations.Matrix.Matrix matrix32 = com.operations.Matrix.MatrixOperations.multiply(matrix1, matrix30);
        com.operations.Matrix.Matrix matrix35 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0L, (double) (byte) 10);
        double[] doubleArray38 = new double[] { 10, 'a' };
        double[] doubleArray41 = new double[] { 10, 'a' };
        double[][] doubleArray42 = new double[][] { doubleArray38, doubleArray41 };
        com.operations.Matrix.Matrix matrix43 = new com.operations.Matrix.Matrix(doubleArray42);
        int int44 = matrix43.getCols();
        int int45 = matrix43.getCols();
        int int46 = matrix43.getCols();
        com.operations.Matrix.Matrix[] matrixArray47 = com.operations.Matrix.MatrixDecompositions.luDecomposition(matrix43);
        com.operations.Matrix.Matrix matrix48 = com.operations.Matrix.MatrixOperations.multiply(matrix35, matrix43);
        com.operations.Matrix.Matrix matrix50 = com.operations.Matrix.MatrixTransformations.rotate2D((double) (short) 100);
        boolean boolean52 = com.operations.Matrix.MatrixUtils.compare(matrix43, matrix50, (double) (byte) 0);
        double[] doubleArray55 = new double[] { 10, 'a' };
        double[] doubleArray58 = new double[] { 10, 'a' };
        double[][] doubleArray59 = new double[][] { doubleArray55, doubleArray58 };
        com.operations.Matrix.Matrix matrix60 = new com.operations.Matrix.Matrix(doubleArray59);
        com.operations.Matrix.Matrix matrix61 = com.operations.Matrix.MatrixOperations.multiply(matrix43, matrix60);
        com.operations.Matrix.Matrix matrix62 = com.operations.Matrix.MatrixOperations.subtract(matrix1, matrix60);
        // The following exception was thrown during execution in test generation
        try {
            double double65 = matrix60.getValue((int) ' ', 1);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(matrix1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 2 + "'", int2 == 2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 2 + "'", int3 == 2);
        org.junit.Assert.assertNotNull(matrix6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 2 + "'", int7 == 2);
        org.junit.Assert.assertNotNull(matrix9);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 10.0d + "'", double10 == 10.0d);
        org.junit.Assert.assertNotNull(matrix11);
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertArrayEquals(doubleArray14, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertArrayEquals(doubleArray17, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertNotNull(matrix22);
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertArrayEquals(doubleArray25, new double[] { 137.90576492663388d, (-1.0d) }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertArrayEquals(doubleArray26, new double[] { (-24.931892522286255d), (-135.63701830716116d) }, 1.0E-15);
        org.junit.Assert.assertNotNull(matrix27);
        org.junit.Assert.assertNotNull(matrix28);
        org.junit.Assert.assertNotNull(matrix30);
        org.junit.Assert.assertNotNull(matrix31);
        org.junit.Assert.assertNotNull(matrix32);
        org.junit.Assert.assertNotNull(matrix35);
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertArrayEquals(doubleArray38, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertArrayEquals(doubleArray41, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 2 + "'", int44 == 2);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 2 + "'", int45 == 2);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 2 + "'", int46 == 2);
        org.junit.Assert.assertNotNull(matrixArray47);
        org.junit.Assert.assertNotNull(matrix48);
        org.junit.Assert.assertNotNull(matrix50);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertArrayEquals(doubleArray55, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray58);
        org.junit.Assert.assertArrayEquals(doubleArray58, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray59);
        org.junit.Assert.assertNotNull(matrix61);
        org.junit.Assert.assertNotNull(matrix62);
    }

    @Test
    public void test4580() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4580");
        com.operations.Matrix.Matrix matrix4 = com.operations.Matrix.MatrixUtils.generateRandomMatrix(35, (int) (byte) 100, (int) (short) 10, 97);
        org.junit.Assert.assertNotNull(matrix4);
    }

    @Test
    public void test4581() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4581");
        com.operations.Matrix.Matrix matrix2 = new com.operations.Matrix.Matrix((int) (short) 100, (int) (short) 1);
    }

    @Test
    public void test4582() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4582");
        com.operations.Matrix.Matrix matrix2 = com.operations.Matrix.MatrixTransformations.project2D((double) ' ', 36.40054944640259d);
        com.operations.Matrix.Matrix matrix4 = com.operations.Matrix.MatrixOperations.scalarMultiply(matrix2, (double) (byte) 1);
        com.operations.Matrix.Matrix matrix7 = com.operations.Matrix.MatrixTransformations.project2D(10.0d, 1.4142135623730951d);
        int int8 = matrix7.getRows();
        com.operations.Matrix.Matrix matrix11 = com.operations.Matrix.MatrixTransformations.project2D((double) (short) 100, 35.0d);
        com.operations.Matrix.Matrix matrix13 = com.operations.Matrix.MatrixTransformations.rotate2D((double) (-1L));
        com.operations.Matrix.Matrix matrix15 = com.operations.Matrix.MatrixTransformations.rotate2D((double) (short) 100);
        double[] doubleArray18 = new double[] { 137.90576492663388d, (byte) -1 };
        double[] doubleArray19 = com.operations.Matrix.MatrixSolver.solveGaussian(matrix15, doubleArray18);
        double[] doubleArray20 = com.operations.Matrix.MatrixSolver.solveGaussian(matrix13, doubleArray18);
        double[] doubleArray21 = com.operations.Matrix.MatrixSolver.solveGaussian(matrix11, doubleArray20);
        double[] doubleArray22 = com.operations.Matrix.MatrixSolver.solveGaussian(matrix7, doubleArray20);
        double[] doubleArray23 = com.operations.Matrix.MatrixSolver.solveGaussian(matrix4, doubleArray22);
        com.operations.Matrix.Matrix matrix26 = com.operations.Matrix.MatrixTransformations.project2D(10.0d, 1.4142135623730951d);
        int int27 = matrix26.getRows();
        com.operations.Matrix.Matrix matrix30 = com.operations.Matrix.MatrixTransformations.project2D((double) (short) 100, 35.0d);
        com.operations.Matrix.Matrix matrix32 = com.operations.Matrix.MatrixTransformations.rotate2D((double) (-1L));
        com.operations.Matrix.Matrix matrix34 = com.operations.Matrix.MatrixTransformations.rotate2D((double) (short) 100);
        double[] doubleArray37 = new double[] { 137.90576492663388d, (byte) -1 };
        double[] doubleArray38 = com.operations.Matrix.MatrixSolver.solveGaussian(matrix34, doubleArray37);
        double[] doubleArray39 = com.operations.Matrix.MatrixSolver.solveGaussian(matrix32, doubleArray37);
        double[] doubleArray40 = com.operations.Matrix.MatrixSolver.solveGaussian(matrix30, doubleArray39);
        double[] doubleArray41 = com.operations.Matrix.MatrixSolver.solveGaussian(matrix26, doubleArray39);
        double[] doubleArray42 = com.operations.Matrix.MatrixSolver.solveGaussian(matrix4, doubleArray39);
        com.operations.Matrix.Matrix matrix45 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0L, (double) (byte) 10);
        int int46 = matrix45.getRows();
        com.operations.Matrix.Matrix matrix48 = com.operations.Matrix.MatrixOperations.scalarMultiply(matrix45, (double) 2);
        matrix45.print();
        matrix45.print();
        int int51 = matrix45.getRows();
        com.operations.Matrix.Matrix matrix52 = com.operations.Matrix.MatrixOperations.add(matrix4, matrix45);
        com.operations.Matrix.Matrix matrix54 = com.operations.Matrix.MatrixOperations.scalarMultiply(matrix4, 0.0d);
        org.junit.Assert.assertNotNull(matrix2);
        org.junit.Assert.assertNotNull(matrix4);
        org.junit.Assert.assertNotNull(matrix7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 2 + "'", int8 == 2);
        org.junit.Assert.assertNotNull(matrix11);
        org.junit.Assert.assertNotNull(matrix13);
        org.junit.Assert.assertNotNull(matrix15);
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertArrayEquals(doubleArray18, new double[] { 137.90576492663388d, (-1.0d) }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertArrayEquals(doubleArray19, new double[] { (-24.931892522286255d), (-135.63701830716116d) }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertArrayEquals(doubleArray20, new double[] { 137.90221361711127d, 1.4069397643877004d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertArrayEquals(doubleArray21, new double[] { 1.3790221361711128d, 0.04019827898250573d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertArrayEquals(doubleArray22, new double[] { 13.790221361711128d, 0.9948566481195463d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertArrayEquals(doubleArray23, new double[] { 0.43094441755347274d, 0.02733081404676067d }, 1.0E-15);
        org.junit.Assert.assertNotNull(matrix26);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 2 + "'", int27 == 2);
        org.junit.Assert.assertNotNull(matrix30);
        org.junit.Assert.assertNotNull(matrix32);
        org.junit.Assert.assertNotNull(matrix34);
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertArrayEquals(doubleArray37, new double[] { 137.90576492663388d, (-1.0d) }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertArrayEquals(doubleArray38, new double[] { (-24.931892522286255d), (-135.63701830716116d) }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertArrayEquals(doubleArray39, new double[] { 137.90221361711127d, 1.4069397643877004d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertArrayEquals(doubleArray40, new double[] { 1.3790221361711128d, 0.04019827898250573d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertArrayEquals(doubleArray41, new double[] { 13.790221361711128d, 0.9948566481195463d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertArrayEquals(doubleArray42, new double[] { 4.309444175534727d, 0.038651607895626036d }, 1.0E-15);
        org.junit.Assert.assertNotNull(matrix45);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 2 + "'", int46 == 2);
        org.junit.Assert.assertNotNull(matrix48);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 2 + "'", int51 == 2);
        org.junit.Assert.assertNotNull(matrix52);
        org.junit.Assert.assertNotNull(matrix54);
    }

    @Test
    public void test4583() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4583");
        com.operations.Matrix.Matrix matrix5 = com.operations.Matrix.MatrixUtils.generateRandomMatrix(1, 32, (int) '#', (int) 'a', 10L);
        org.junit.Assert.assertNotNull(matrix5);
    }

    @Test
    public void test4584() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4584");
        com.operations.Matrix.Matrix matrix2 = new com.operations.Matrix.Matrix(10, (int) ' ');
    }

    @Test
    public void test4585() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4585");
        com.operations.Matrix.Matrix matrix1 = com.operations.Matrix.MatrixTransformations.rotate2D(1.414213562373095d);
        com.operations.Matrix.Matrix matrix3 = com.operations.Matrix.MatrixOperations.scalarMultiply(matrix1, 21.023651153076518d);
        com.operations.Matrix.Matrix matrix6 = com.operations.Matrix.MatrixTransformations.scale2D((double) (byte) 10, (double) 10);
        double[] doubleArray9 = new double[] { 10, 'a' };
        double[] doubleArray12 = new double[] { 10, 'a' };
        double[][] doubleArray13 = new double[][] { doubleArray9, doubleArray12 };
        com.operations.Matrix.Matrix matrix14 = new com.operations.Matrix.Matrix(doubleArray13);
        com.operations.Matrix.Matrix matrix15 = new com.operations.Matrix.Matrix(doubleArray13);
        boolean boolean16 = com.operations.Matrix.MatrixUtils.isSquare(matrix15);
        double[] doubleArray19 = new double[] { 10, 'a' };
        double[] doubleArray22 = new double[] { 10, 'a' };
        double[][] doubleArray23 = new double[][] { doubleArray19, doubleArray22 };
        com.operations.Matrix.Matrix matrix24 = new com.operations.Matrix.Matrix(doubleArray23);
        int int25 = matrix24.getCols();
        int int26 = matrix24.getCols();
        matrix24.print();
        double[] doubleArray30 = new double[] { 10, 'a' };
        double[] doubleArray33 = new double[] { 10, 'a' };
        double[][] doubleArray34 = new double[][] { doubleArray30, doubleArray33 };
        com.operations.Matrix.Matrix matrix35 = new com.operations.Matrix.Matrix(doubleArray34);
        boolean boolean37 = com.operations.Matrix.MatrixUtils.compare(matrix24, matrix35, (double) (-1));
        com.operations.Matrix.Matrix matrix38 = com.operations.Matrix.MatrixOperations.subtract(matrix15, matrix35);
        com.operations.Matrix.Matrix[] matrixArray39 = com.operations.Matrix.MatrixDecompositions.luDecomposition(matrix38);
        double[][] doubleArray40 = matrix38.getData();
        com.operations.Matrix.Matrix matrix41 = new com.operations.Matrix.Matrix(doubleArray40);
        com.operations.Matrix.Matrix matrix42 = com.operations.Matrix.MatrixOperations.multiply(matrix6, matrix41);
        boolean boolean43 = com.operations.Matrix.MatrixUtils.isSymmetric(matrix6);
        com.operations.Matrix.Matrix matrix45 = com.operations.Matrix.MatrixTransformations.rotate2D(350.0d);
        com.operations.Matrix.Matrix matrix46 = com.operations.Matrix.MatrixDecompositions.choleskyDecomposition(matrix45);
        int int47 = matrix45.getRows();
        com.operations.Matrix.Matrix matrix48 = com.operations.Matrix.MatrixOperations.subtract(matrix6, matrix45);
        com.operations.Matrix.Matrix matrix49 = com.operations.Matrix.MatrixOperations.multiply(matrix3, matrix6);
        double double52 = matrix6.getValue((int) (byte) 1, 0);
        double[][] doubleArray53 = matrix6.getData();
        org.junit.Assert.assertNotNull(matrix1);
        org.junit.Assert.assertNotNull(matrix3);
        org.junit.Assert.assertNotNull(matrix6);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertArrayEquals(doubleArray9, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertArrayEquals(doubleArray12, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertArrayEquals(doubleArray19, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertArrayEquals(doubleArray22, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 2 + "'", int25 == 2);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 2 + "'", int26 == 2);
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertArrayEquals(doubleArray30, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertArrayEquals(doubleArray33, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(matrix38);
        org.junit.Assert.assertNotNull(matrixArray39);
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertNotNull(matrix42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertNotNull(matrix45);
        org.junit.Assert.assertNotNull(matrix46);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 2 + "'", int47 == 2);
        org.junit.Assert.assertNotNull(matrix48);
        org.junit.Assert.assertNotNull(matrix49);
        org.junit.Assert.assertTrue("'" + double52 + "' != '" + 0.0d + "'", double52 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray53);
    }

    @Test
    public void test4586() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4586");
        com.operations.Matrix.Matrix matrix2 = com.operations.Matrix.MatrixTransformations.scale2D(0.0d, 0.0d);
        int int3 = matrix2.getRows();
        com.operations.Matrix.Matrix[] matrixArray4 = com.operations.Matrix.MatrixDecompositions.luDecomposition(matrix2);
        com.operations.Matrix.Matrix[] matrixArray5 = com.operations.Matrix.MatrixDecompositions.luDecomposition(matrix2);
        // The following exception was thrown during execution in test generation
        try {
            com.operations.Matrix.Matrix matrix6 = com.operations.Matrix.MatrixDecompositions.choleskyDecomposition(matrix2);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Matrix is not positive definite.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(matrix2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 2 + "'", int3 == 2);
        org.junit.Assert.assertNotNull(matrixArray4);
        org.junit.Assert.assertNotNull(matrixArray5);
    }

    @Test
    public void test4587() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4587");
        com.operations.Matrix.Matrix matrix2 = com.operations.Matrix.MatrixTransformations.scale2D(260.95643973734866d, 641.7761389614766d);
        org.junit.Assert.assertNotNull(matrix2);
    }

    @Test
    public void test4588() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4588");
        com.operations.Matrix.Matrix matrix2 = com.operations.Matrix.MatrixTransformations.project2D(800.0d, 4826.701772432185d);
        org.junit.Assert.assertNotNull(matrix2);
    }

    @Test
    public void test4589() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4589");
        double[] doubleArray2 = new double[] { 10, 'a' };
        double[] doubleArray5 = new double[] { 10, 'a' };
        double[][] doubleArray6 = new double[][] { doubleArray2, doubleArray5 };
        com.operations.Matrix.Matrix matrix7 = new com.operations.Matrix.Matrix(doubleArray6);
        com.operations.Matrix.Matrix matrix8 = new com.operations.Matrix.Matrix(doubleArray6);
        com.operations.Matrix.Matrix matrix10 = com.operations.Matrix.MatrixTransformations.rotate2D((double) (short) 100);
        double[] doubleArray13 = new double[] { 137.90576492663388d, (byte) -1 };
        double[] doubleArray14 = com.operations.Matrix.MatrixSolver.solveGaussian(matrix10, doubleArray13);
        com.operations.Matrix.Matrix matrix15 = com.operations.Matrix.MatrixOperations.add(matrix8, matrix10);
        com.operations.Matrix.Matrix matrix16 = com.operations.Matrix.MatrixOperations.transpose(matrix10);
        com.operations.Matrix.Matrix matrix19 = com.operations.Matrix.MatrixTransformations.scale2D(131.06486943494812d, (double) (byte) 100);
        com.operations.Matrix.Matrix matrix22 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0.0f, (double) (-1));
        com.operations.Matrix.Matrix matrix25 = com.operations.Matrix.MatrixTransformations.scale2D(146.4308710620817d, (double) 10L);
        com.operations.Matrix.Matrix matrix26 = com.operations.Matrix.MatrixOperations.multiply(matrix22, matrix25);
        com.operations.Matrix.Matrix matrix28 = com.operations.Matrix.MatrixTransformations.rotate2D((double) 1.0f);
        com.operations.Matrix.Matrix matrix31 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0L, (double) (byte) 10);
        int int32 = matrix31.getRows();
        com.operations.Matrix.Matrix matrix34 = com.operations.Matrix.MatrixOperations.scalarMultiply(matrix31, (double) 2);
        double double35 = com.operations.Matrix.MatrixUtils.frobeniusNorm(matrix31);
        com.operations.Matrix.Matrix matrix38 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0L, (double) (byte) 10);
        int int39 = matrix38.getRows();
        com.operations.Matrix.Matrix matrix41 = com.operations.Matrix.MatrixOperations.scalarMultiply(matrix38, (double) 2);
        com.operations.Matrix.Matrix matrix42 = com.operations.Matrix.MatrixOperations.subtract(matrix31, matrix41);
        com.operations.Matrix.Matrix matrix43 = com.operations.Matrix.MatrixOperations.add(matrix28, matrix41);
        matrix28.print();
        double[] doubleArray47 = new double[] { 10, 'a' };
        double[] doubleArray50 = new double[] { 10, 'a' };
        double[][] doubleArray51 = new double[][] { doubleArray47, doubleArray50 };
        com.operations.Matrix.Matrix matrix52 = new com.operations.Matrix.Matrix(doubleArray51);
        com.operations.Matrix.Matrix matrix53 = com.operations.Matrix.MatrixOperations.transpose(matrix52);
        com.operations.Matrix.Matrix matrix56 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0L, (double) (byte) 10);
        int int57 = matrix56.getRows();
        com.operations.Matrix.Matrix matrix63 = com.operations.Matrix.MatrixUtils.generateRandomMatrix(100, (int) (byte) 1, (int) '#', (int) '#', 1L);
        boolean boolean65 = com.operations.Matrix.MatrixUtils.compare(matrix56, matrix63, (double) 1.0f);
        com.operations.Matrix.Matrix matrix67 = com.operations.Matrix.MatrixOperations.scalarMultiply(matrix56, (double) 1L);
        matrix56.print();
        com.operations.Matrix.Matrix matrix69 = com.operations.Matrix.MatrixOperations.multiply(matrix53, matrix56);
        com.operations.Matrix.Matrix matrix70 = com.operations.Matrix.MatrixOperations.multiply(matrix28, matrix56);
        com.operations.Matrix.Matrix matrix71 = com.operations.Matrix.MatrixOperations.subtract(matrix22, matrix56);
        com.operations.Matrix.Matrix matrix72 = com.operations.Matrix.MatrixOperations.transpose(matrix56);
        com.operations.Matrix.Matrix matrix73 = com.operations.Matrix.MatrixOperations.multiply(matrix19, matrix56);
        com.operations.Matrix.Matrix matrix74 = com.operations.Matrix.MatrixOperations.subtract(matrix16, matrix73);
        int int75 = matrix16.getCols();
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertArrayEquals(doubleArray2, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertArrayEquals(doubleArray5, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertNotNull(matrix10);
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertArrayEquals(doubleArray13, new double[] { 137.90576492663388d, (-1.0d) }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertArrayEquals(doubleArray14, new double[] { (-24.931892522286255d), (-135.63701830716116d) }, 1.0E-15);
        org.junit.Assert.assertNotNull(matrix15);
        org.junit.Assert.assertNotNull(matrix16);
        org.junit.Assert.assertNotNull(matrix19);
        org.junit.Assert.assertNotNull(matrix22);
        org.junit.Assert.assertNotNull(matrix25);
        org.junit.Assert.assertNotNull(matrix26);
        org.junit.Assert.assertNotNull(matrix28);
        org.junit.Assert.assertNotNull(matrix31);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 2 + "'", int32 == 2);
        org.junit.Assert.assertNotNull(matrix34);
        org.junit.Assert.assertTrue("'" + double35 + "' != '" + 10.0d + "'", double35 == 10.0d);
        org.junit.Assert.assertNotNull(matrix38);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 2 + "'", int39 == 2);
        org.junit.Assert.assertNotNull(matrix41);
        org.junit.Assert.assertNotNull(matrix42);
        org.junit.Assert.assertNotNull(matrix43);
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertArrayEquals(doubleArray47, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertArrayEquals(doubleArray50, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertNotNull(matrix53);
        org.junit.Assert.assertNotNull(matrix56);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 2 + "'", int57 == 2);
        org.junit.Assert.assertNotNull(matrix63);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertNotNull(matrix67);
        org.junit.Assert.assertNotNull(matrix69);
        org.junit.Assert.assertNotNull(matrix70);
        org.junit.Assert.assertNotNull(matrix71);
        org.junit.Assert.assertNotNull(matrix72);
        org.junit.Assert.assertNotNull(matrix73);
        org.junit.Assert.assertNotNull(matrix74);
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + 2 + "'", int75 == 2);
    }

    @Test
    public void test4590() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4590");
        com.operations.Matrix.Matrix matrix2 = com.operations.Matrix.MatrixTransformations.scale2D(35.02855977627399d, 14.142135623730951d);
        org.junit.Assert.assertNotNull(matrix2);
    }

    @Test
    public void test4591() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4591");
        com.operations.Matrix.Matrix matrix2 = com.operations.Matrix.MatrixTransformations.scale2D(364.0054944640259d, (-1.0d));
        com.operations.Matrix.Matrix matrix5 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0L, (double) (byte) 10);
        double[] doubleArray8 = new double[] { 10, 'a' };
        double[] doubleArray11 = new double[] { 10, 'a' };
        double[][] doubleArray12 = new double[][] { doubleArray8, doubleArray11 };
        com.operations.Matrix.Matrix matrix13 = new com.operations.Matrix.Matrix(doubleArray12);
        int int14 = matrix13.getCols();
        int int15 = matrix13.getCols();
        int int16 = matrix13.getCols();
        com.operations.Matrix.Matrix[] matrixArray17 = com.operations.Matrix.MatrixDecompositions.luDecomposition(matrix13);
        com.operations.Matrix.Matrix matrix18 = com.operations.Matrix.MatrixOperations.multiply(matrix5, matrix13);
        com.operations.Matrix.Matrix matrix20 = com.operations.Matrix.MatrixTransformations.rotate2D((double) (short) 100);
        boolean boolean22 = com.operations.Matrix.MatrixUtils.compare(matrix13, matrix20, (double) (byte) 0);
        double[] doubleArray25 = new double[] { 10, 'a' };
        double[] doubleArray28 = new double[] { 10, 'a' };
        double[][] doubleArray29 = new double[][] { doubleArray25, doubleArray28 };
        com.operations.Matrix.Matrix matrix30 = new com.operations.Matrix.Matrix(doubleArray29);
        com.operations.Matrix.Matrix matrix31 = new com.operations.Matrix.Matrix(doubleArray29);
        com.operations.Matrix.Matrix matrix32 = new com.operations.Matrix.Matrix(doubleArray29);
        boolean boolean34 = com.operations.Matrix.MatrixUtils.compare(matrix13, matrix32, (double) (-1));
        double double35 = com.operations.Matrix.MatrixUtils.frobeniusNorm(matrix13);
        com.operations.Matrix.Matrix matrix36 = com.operations.Matrix.MatrixDecompositions.choleskyDecomposition(matrix13);
        com.operations.Matrix.Matrix matrix39 = com.operations.Matrix.MatrixTransformations.project2D((double) (short) 0, 10.0d);
        com.operations.Matrix.Matrix matrix40 = com.operations.Matrix.MatrixOperations.multiply(matrix13, matrix39);
        double[] doubleArray43 = new double[] { 10, 'a' };
        double[] doubleArray46 = new double[] { 10, 'a' };
        double[][] doubleArray47 = new double[][] { doubleArray43, doubleArray46 };
        com.operations.Matrix.Matrix matrix48 = new com.operations.Matrix.Matrix(doubleArray47);
        com.operations.Matrix.Matrix matrix49 = new com.operations.Matrix.Matrix(doubleArray47);
        com.operations.Matrix.Matrix matrix51 = com.operations.Matrix.MatrixTransformations.rotate2D((double) (short) 100);
        double[] doubleArray54 = new double[] { 137.90576492663388d, (byte) -1 };
        double[] doubleArray55 = com.operations.Matrix.MatrixSolver.solveGaussian(matrix51, doubleArray54);
        com.operations.Matrix.Matrix matrix56 = com.operations.Matrix.MatrixOperations.add(matrix49, matrix51);
        boolean boolean57 = com.operations.Matrix.MatrixUtils.isSymmetric(matrix56);
        com.operations.Matrix.Matrix matrix58 = com.operations.Matrix.MatrixOperations.multiply(matrix13, matrix56);
        boolean boolean60 = com.operations.Matrix.MatrixUtils.compare(matrix2, matrix13, 12.751772028997056d);
        double[][] doubleArray61 = matrix13.getData();
        boolean boolean62 = com.operations.Matrix.MatrixUtils.isSquare(matrix13);
        org.junit.Assert.assertNotNull(matrix2);
        org.junit.Assert.assertNotNull(matrix5);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertArrayEquals(doubleArray8, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertArrayEquals(doubleArray11, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 2 + "'", int14 == 2);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 2 + "'", int15 == 2);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 2 + "'", int16 == 2);
        org.junit.Assert.assertNotNull(matrixArray17);
        org.junit.Assert.assertNotNull(matrix18);
        org.junit.Assert.assertNotNull(matrix20);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertArrayEquals(doubleArray25, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertArrayEquals(doubleArray28, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + double35 + "' != '" + 137.90576492663388d + "'", double35 == 137.90576492663388d);
        org.junit.Assert.assertNotNull(matrix36);
        org.junit.Assert.assertNotNull(matrix39);
        org.junit.Assert.assertNotNull(matrix40);
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertArrayEquals(doubleArray43, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray46);
        org.junit.Assert.assertArrayEquals(doubleArray46, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertNotNull(matrix51);
        org.junit.Assert.assertNotNull(doubleArray54);
        org.junit.Assert.assertArrayEquals(doubleArray54, new double[] { 137.90576492663388d, (-1.0d) }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertArrayEquals(doubleArray55, new double[] { (-24.931892522286255d), (-135.63701830716116d) }, 1.0E-15);
        org.junit.Assert.assertNotNull(matrix56);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNotNull(matrix58);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertNotNull(doubleArray61);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + true + "'", boolean62 == true);
    }

    @Test
    public void test4592() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4592");
        com.operations.Matrix.Matrix matrix2 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0L, (double) (byte) 10);
        int int3 = matrix2.getRows();
        com.operations.Matrix.Matrix matrix9 = com.operations.Matrix.MatrixUtils.generateRandomMatrix(100, (int) (byte) 1, (int) '#', (int) '#', 1L);
        boolean boolean11 = com.operations.Matrix.MatrixUtils.compare(matrix2, matrix9, (double) 1.0f);
        int int12 = matrix2.getCols();
        com.operations.Matrix.Matrix matrix14 = com.operations.Matrix.MatrixTransformations.rotate2D((double) (short) 100);
        double[] doubleArray17 = new double[] { 137.90576492663388d, (byte) -1 };
        double[] doubleArray18 = com.operations.Matrix.MatrixSolver.solveGaussian(matrix14, doubleArray17);
        com.operations.Matrix.Matrix matrix21 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0L, (double) (byte) 10);
        double[] doubleArray24 = new double[] { 10, 'a' };
        double[] doubleArray27 = new double[] { 10, 'a' };
        double[][] doubleArray28 = new double[][] { doubleArray24, doubleArray27 };
        com.operations.Matrix.Matrix matrix29 = new com.operations.Matrix.Matrix(doubleArray28);
        int int30 = matrix29.getCols();
        int int31 = matrix29.getCols();
        int int32 = matrix29.getCols();
        com.operations.Matrix.Matrix[] matrixArray33 = com.operations.Matrix.MatrixDecompositions.luDecomposition(matrix29);
        com.operations.Matrix.Matrix matrix34 = com.operations.Matrix.MatrixOperations.multiply(matrix21, matrix29);
        boolean boolean36 = com.operations.Matrix.MatrixUtils.compare(matrix14, matrix21, (double) (-1L));
        boolean boolean38 = com.operations.Matrix.MatrixUtils.compare(matrix2, matrix14, (double) 'a');
        int int39 = matrix2.getCols();
        com.operations.Matrix.Matrix matrix40 = com.operations.Matrix.MatrixOperations.transpose(matrix2);
        int int41 = matrix2.getCols();
        org.junit.Assert.assertNotNull(matrix2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 2 + "'", int3 == 2);
        org.junit.Assert.assertNotNull(matrix9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 2 + "'", int12 == 2);
        org.junit.Assert.assertNotNull(matrix14);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertArrayEquals(doubleArray17, new double[] { 137.90576492663388d, (-1.0d) }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertArrayEquals(doubleArray18, new double[] { (-24.931892522286255d), (-135.63701830716116d) }, 1.0E-15);
        org.junit.Assert.assertNotNull(matrix21);
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertArrayEquals(doubleArray24, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertArrayEquals(doubleArray27, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 2 + "'", int30 == 2);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 2 + "'", int31 == 2);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 2 + "'", int32 == 2);
        org.junit.Assert.assertNotNull(matrixArray33);
        org.junit.Assert.assertNotNull(matrix34);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 2 + "'", int39 == 2);
        org.junit.Assert.assertNotNull(matrix40);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 2 + "'", int41 == 2);
    }

    @Test
    public void test4593() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4593");
        com.operations.Matrix.Matrix matrix2 = com.operations.Matrix.MatrixTransformations.project2D(1.414213562373095d, 400.0d);
        // The following exception was thrown during execution in test generation
        try {
            matrix2.setValue(0, 97, 1363.6076983299943d);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: Index 97 out of bounds for length 2");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(matrix2);
    }

    @Test
    public void test4594() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4594");
        com.operations.Matrix.Matrix matrix1 = com.operations.Matrix.MatrixTransformations.rotate2D(350.0d);
        com.operations.Matrix.Matrix matrix3 = com.operations.Matrix.MatrixTransformations.rotate2D((double) (short) 100);
        double[] doubleArray6 = new double[] { 137.90576492663388d, (byte) -1 };
        double[] doubleArray7 = com.operations.Matrix.MatrixSolver.solveGaussian(matrix3, doubleArray6);
        double[] doubleArray8 = com.operations.Matrix.MatrixSolver.solveGaussian(matrix1, doubleArray7);
        com.operations.Matrix.Matrix matrix11 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0L, (double) (byte) 10);
        double[] doubleArray14 = new double[] { 10, 'a' };
        double[] doubleArray17 = new double[] { 10, 'a' };
        double[][] doubleArray18 = new double[][] { doubleArray14, doubleArray17 };
        com.operations.Matrix.Matrix matrix19 = new com.operations.Matrix.Matrix(doubleArray18);
        int int20 = matrix19.getCols();
        int int21 = matrix19.getCols();
        int int22 = matrix19.getCols();
        com.operations.Matrix.Matrix[] matrixArray23 = com.operations.Matrix.MatrixDecompositions.luDecomposition(matrix19);
        com.operations.Matrix.Matrix matrix24 = com.operations.Matrix.MatrixOperations.multiply(matrix11, matrix19);
        com.operations.Matrix.Matrix matrix26 = com.operations.Matrix.MatrixTransformations.rotate2D((double) (short) 100);
        boolean boolean28 = com.operations.Matrix.MatrixUtils.compare(matrix19, matrix26, (double) (byte) 0);
        double[] doubleArray31 = new double[] { 10, 'a' };
        double[] doubleArray34 = new double[] { 10, 'a' };
        double[][] doubleArray35 = new double[][] { doubleArray31, doubleArray34 };
        com.operations.Matrix.Matrix matrix36 = new com.operations.Matrix.Matrix(doubleArray35);
        com.operations.Matrix.Matrix matrix37 = new com.operations.Matrix.Matrix(doubleArray35);
        com.operations.Matrix.Matrix matrix38 = new com.operations.Matrix.Matrix(doubleArray35);
        boolean boolean40 = com.operations.Matrix.MatrixUtils.compare(matrix19, matrix38, (double) (-1));
        double[] doubleArray43 = new double[] { 10, 'a' };
        double[] doubleArray46 = new double[] { 10, 'a' };
        double[][] doubleArray47 = new double[][] { doubleArray43, doubleArray46 };
        com.operations.Matrix.Matrix matrix48 = new com.operations.Matrix.Matrix(doubleArray47);
        com.operations.Matrix.Matrix matrix49 = new com.operations.Matrix.Matrix(doubleArray47);
        boolean boolean50 = com.operations.Matrix.MatrixUtils.isSquare(matrix49);
        com.operations.Matrix.Matrix matrix51 = com.operations.Matrix.MatrixOperations.multiply(matrix38, matrix49);
        double[][] doubleArray52 = matrix49.getData();
        com.operations.Matrix.Matrix matrix53 = new com.operations.Matrix.Matrix(doubleArray52);
        com.operations.Matrix.Matrix matrix54 = new com.operations.Matrix.Matrix(doubleArray52);
        boolean boolean55 = com.operations.Matrix.MatrixUtils.isSymmetric(matrix54);
        com.operations.Matrix.Matrix matrix56 = com.operations.Matrix.MatrixOperations.subtract(matrix1, matrix54);
        int int57 = matrix54.getRows();
        double[] doubleArray60 = new double[] { 10, 'a' };
        double[] doubleArray63 = new double[] { 10, 'a' };
        double[][] doubleArray64 = new double[][] { doubleArray60, doubleArray63 };
        com.operations.Matrix.Matrix matrix65 = new com.operations.Matrix.Matrix(doubleArray64);
        com.operations.Matrix.Matrix matrix66 = new com.operations.Matrix.Matrix(doubleArray64);
        boolean boolean67 = com.operations.Matrix.MatrixUtils.isSquare(matrix66);
        double[] doubleArray70 = new double[] { 10, 'a' };
        double[] doubleArray73 = new double[] { 10, 'a' };
        double[][] doubleArray74 = new double[][] { doubleArray70, doubleArray73 };
        com.operations.Matrix.Matrix matrix75 = new com.operations.Matrix.Matrix(doubleArray74);
        int int76 = matrix75.getCols();
        int int77 = matrix75.getCols();
        matrix75.print();
        double[] doubleArray81 = new double[] { 10, 'a' };
        double[] doubleArray84 = new double[] { 10, 'a' };
        double[][] doubleArray85 = new double[][] { doubleArray81, doubleArray84 };
        com.operations.Matrix.Matrix matrix86 = new com.operations.Matrix.Matrix(doubleArray85);
        boolean boolean88 = com.operations.Matrix.MatrixUtils.compare(matrix75, matrix86, (double) (-1));
        com.operations.Matrix.Matrix matrix89 = com.operations.Matrix.MatrixOperations.subtract(matrix66, matrix86);
        com.operations.Matrix.Matrix matrix91 = com.operations.Matrix.MatrixOperations.scalarMultiply(matrix66, (double) 0.0f);
        com.operations.Matrix.Matrix matrix92 = com.operations.Matrix.MatrixOperations.transpose(matrix66);
        com.operations.Matrix.Matrix matrix93 = com.operations.Matrix.MatrixOperations.multiply(matrix54, matrix66);
        com.operations.Matrix.Matrix matrix95 = com.operations.Matrix.MatrixTransformations.rotate2D((double) (short) -1);
        com.operations.Matrix.Matrix[] matrixArray96 = com.operations.Matrix.MatrixDecompositions.luDecomposition(matrix95);
        boolean boolean98 = com.operations.Matrix.MatrixUtils.compare(matrix66, matrix95, 0.0d);
        java.lang.Class<?> wildcardClass99 = matrix66.getClass();
        org.junit.Assert.assertNotNull(matrix1);
        org.junit.Assert.assertNotNull(matrix3);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertArrayEquals(doubleArray6, new double[] { 137.90576492663388d, (-1.0d) }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertArrayEquals(doubleArray7, new double[] { (-24.931892522286255d), (-135.63701830716116d) }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertArrayEquals(doubleArray8, new double[] { (-0.9999999999999858d), (-137.90576492663388d) }, 1.0E-15);
        org.junit.Assert.assertNotNull(matrix11);
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertArrayEquals(doubleArray14, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertArrayEquals(doubleArray17, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 2 + "'", int20 == 2);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 2 + "'", int21 == 2);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 2 + "'", int22 == 2);
        org.junit.Assert.assertNotNull(matrixArray23);
        org.junit.Assert.assertNotNull(matrix24);
        org.junit.Assert.assertNotNull(matrix26);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertArrayEquals(doubleArray31, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertArrayEquals(doubleArray34, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertArrayEquals(doubleArray43, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray46);
        org.junit.Assert.assertArrayEquals(doubleArray46, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
        org.junit.Assert.assertNotNull(matrix51);
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNotNull(matrix56);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 2 + "'", int57 == 2);
        org.junit.Assert.assertNotNull(doubleArray60);
        org.junit.Assert.assertArrayEquals(doubleArray60, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray63);
        org.junit.Assert.assertArrayEquals(doubleArray63, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray64);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + true + "'", boolean67 == true);
        org.junit.Assert.assertNotNull(doubleArray70);
        org.junit.Assert.assertArrayEquals(doubleArray70, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray73);
        org.junit.Assert.assertArrayEquals(doubleArray73, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray74);
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 2 + "'", int76 == 2);
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + 2 + "'", int77 == 2);
        org.junit.Assert.assertNotNull(doubleArray81);
        org.junit.Assert.assertArrayEquals(doubleArray81, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray84);
        org.junit.Assert.assertArrayEquals(doubleArray84, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray85);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
        org.junit.Assert.assertNotNull(matrix89);
        org.junit.Assert.assertNotNull(matrix91);
        org.junit.Assert.assertNotNull(matrix92);
        org.junit.Assert.assertNotNull(matrix93);
        org.junit.Assert.assertNotNull(matrix95);
        org.junit.Assert.assertNotNull(matrixArray96);
        org.junit.Assert.assertTrue("'" + boolean98 + "' != '" + false + "'", boolean98 == false);
        org.junit.Assert.assertNotNull(wildcardClass99);
    }

    @Test
    public void test4595() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4595");
        com.operations.Matrix.Matrix matrix0 = null;
        com.operations.Matrix.Matrix matrix3 = com.operations.Matrix.MatrixTransformations.scale2D(99.83621769912266d, (double) 100.0f);
        // The following exception was thrown during execution in test generation
        try {
            com.operations.Matrix.Matrix matrix4 = com.operations.Matrix.MatrixOperations.add(matrix0, matrix3);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(matrix3);
    }

    @Test
    public void test4596() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4596");
        // The following exception was thrown during execution in test generation
        try {
            com.operations.Matrix.Matrix matrix5 = com.operations.Matrix.MatrixUtils.generateRandomMatrix((int) (short) -1, (int) ' ', (int) '4', 1, (long) (short) 1);
            org.junit.Assert.fail("Expected exception of type java.lang.NegativeArraySizeException; message: -1");
        } catch (java.lang.NegativeArraySizeException e) {
            // Expected exception.
        }
    }

    @Test
    public void test4597() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4597");
        com.operations.Matrix.Matrix matrix2 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0.0f, (double) (-1));
        com.operations.Matrix.Matrix matrix5 = com.operations.Matrix.MatrixTransformations.scale2D(146.4308710620817d, (double) 10L);
        com.operations.Matrix.Matrix matrix6 = com.operations.Matrix.MatrixOperations.multiply(matrix2, matrix5);
        int int7 = matrix6.getCols();
        com.operations.Matrix.Matrix matrix10 = com.operations.Matrix.MatrixTransformations.project2D((double) (short) 100, (double) 0L);
        boolean boolean11 = com.operations.Matrix.MatrixUtils.isSquare(matrix10);
        double[] doubleArray14 = new double[] { 10, 'a' };
        double[] doubleArray17 = new double[] { 10, 'a' };
        double[][] doubleArray18 = new double[][] { doubleArray14, doubleArray17 };
        com.operations.Matrix.Matrix matrix19 = new com.operations.Matrix.Matrix(doubleArray18);
        com.operations.Matrix.Matrix matrix20 = new com.operations.Matrix.Matrix(doubleArray18);
        com.operations.Matrix.Matrix matrix22 = com.operations.Matrix.MatrixTransformations.rotate2D((double) (short) 100);
        double[] doubleArray25 = new double[] { 137.90576492663388d, (byte) -1 };
        double[] doubleArray26 = com.operations.Matrix.MatrixSolver.solveGaussian(matrix22, doubleArray25);
        com.operations.Matrix.Matrix matrix27 = com.operations.Matrix.MatrixOperations.add(matrix20, matrix22);
        com.operations.Matrix.Matrix matrix28 = com.operations.Matrix.MatrixOperations.transpose(matrix22);
        int int29 = matrix22.getCols();
        int int30 = matrix22.getRows();
        double[] doubleArray33 = new double[] { 10, 'a' };
        double[] doubleArray36 = new double[] { 10, 'a' };
        double[][] doubleArray37 = new double[][] { doubleArray33, doubleArray36 };
        com.operations.Matrix.Matrix matrix38 = new com.operations.Matrix.Matrix(doubleArray37);
        int int39 = matrix38.getCols();
        int int40 = matrix38.getCols();
        matrix38.print();
        double[] doubleArray44 = new double[] { 10, 'a' };
        double[] doubleArray47 = new double[] { 10, 'a' };
        double[][] doubleArray48 = new double[][] { doubleArray44, doubleArray47 };
        com.operations.Matrix.Matrix matrix49 = new com.operations.Matrix.Matrix(doubleArray48);
        boolean boolean51 = com.operations.Matrix.MatrixUtils.compare(matrix38, matrix49, (double) (-1));
        com.operations.Matrix.Matrix matrix52 = com.operations.Matrix.MatrixOperations.multiply(matrix22, matrix38);
        double double55 = matrix22.getValue((int) (short) 0, 0);
        com.operations.Matrix.Matrix matrix56 = com.operations.Matrix.MatrixOperations.add(matrix10, matrix22);
        com.operations.Matrix.Matrix matrix57 = com.operations.Matrix.MatrixOperations.multiply(matrix6, matrix10);
        com.operations.Matrix.Matrix matrix60 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0L, (double) (byte) 10);
        double[] doubleArray63 = new double[] { 10, 'a' };
        double[] doubleArray66 = new double[] { 10, 'a' };
        double[][] doubleArray67 = new double[][] { doubleArray63, doubleArray66 };
        com.operations.Matrix.Matrix matrix68 = new com.operations.Matrix.Matrix(doubleArray67);
        int int69 = matrix68.getCols();
        int int70 = matrix68.getCols();
        int int71 = matrix68.getCols();
        com.operations.Matrix.Matrix[] matrixArray72 = com.operations.Matrix.MatrixDecompositions.luDecomposition(matrix68);
        com.operations.Matrix.Matrix matrix73 = com.operations.Matrix.MatrixOperations.multiply(matrix60, matrix68);
        com.operations.Matrix.Matrix matrix75 = com.operations.Matrix.MatrixTransformations.rotate2D((double) (short) 100);
        boolean boolean77 = com.operations.Matrix.MatrixUtils.compare(matrix68, matrix75, (double) (byte) 0);
        com.operations.Matrix.Matrix[] matrixArray78 = com.operations.Matrix.MatrixDecompositions.luDecomposition(matrix68);
        com.operations.Matrix.Matrix matrix79 = com.operations.Matrix.MatrixOperations.transpose(matrix68);
        com.operations.Matrix.Matrix matrix82 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0L, (double) (byte) 10);
        int int83 = matrix82.getRows();
        com.operations.Matrix.Matrix matrix86 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0L, (double) (byte) 10);
        int int87 = matrix86.getRows();
        com.operations.Matrix.Matrix matrix89 = com.operations.Matrix.MatrixOperations.scalarMultiply(matrix86, (double) 2);
        com.operations.Matrix.Matrix matrix90 = com.operations.Matrix.MatrixOperations.subtract(matrix82, matrix86);
        boolean boolean92 = com.operations.Matrix.MatrixUtils.compare(matrix68, matrix82, (double) ' ');
        com.operations.Matrix.Matrix matrix94 = com.operations.Matrix.MatrixOperations.scalarMultiply(matrix68, 137.90576492663388d);
        matrix94.print();
        com.operations.Matrix.Matrix matrix96 = com.operations.Matrix.MatrixOperations.add(matrix10, matrix94);
        boolean boolean97 = com.operations.Matrix.MatrixUtils.isSquare(matrix94);
        org.junit.Assert.assertNotNull(matrix2);
        org.junit.Assert.assertNotNull(matrix5);
        org.junit.Assert.assertNotNull(matrix6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 2 + "'", int7 == 2);
        org.junit.Assert.assertNotNull(matrix10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertArrayEquals(doubleArray14, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertArrayEquals(doubleArray17, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertNotNull(matrix22);
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertArrayEquals(doubleArray25, new double[] { 137.90576492663388d, (-1.0d) }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertArrayEquals(doubleArray26, new double[] { (-24.931892522286255d), (-135.63701830716116d) }, 1.0E-15);
        org.junit.Assert.assertNotNull(matrix27);
        org.junit.Assert.assertNotNull(matrix28);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 2 + "'", int29 == 2);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 2 + "'", int30 == 2);
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertArrayEquals(doubleArray33, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertArrayEquals(doubleArray36, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 2 + "'", int39 == 2);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 2 + "'", int40 == 2);
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertArrayEquals(doubleArray44, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertArrayEquals(doubleArray47, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(matrix52);
        org.junit.Assert.assertTrue("'" + double55 + "' != '" + (-0.1736481776669303d) + "'", double55 == (-0.1736481776669303d));
        org.junit.Assert.assertNotNull(matrix56);
        org.junit.Assert.assertNotNull(matrix57);
        org.junit.Assert.assertNotNull(matrix60);
        org.junit.Assert.assertNotNull(doubleArray63);
        org.junit.Assert.assertArrayEquals(doubleArray63, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray66);
        org.junit.Assert.assertArrayEquals(doubleArray66, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray67);
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 2 + "'", int69 == 2);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 2 + "'", int70 == 2);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 2 + "'", int71 == 2);
        org.junit.Assert.assertNotNull(matrixArray72);
        org.junit.Assert.assertNotNull(matrix73);
        org.junit.Assert.assertNotNull(matrix75);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertNotNull(matrixArray78);
        org.junit.Assert.assertNotNull(matrix79);
        org.junit.Assert.assertNotNull(matrix82);
        org.junit.Assert.assertTrue("'" + int83 + "' != '" + 2 + "'", int83 == 2);
        org.junit.Assert.assertNotNull(matrix86);
        org.junit.Assert.assertTrue("'" + int87 + "' != '" + 2 + "'", int87 == 2);
        org.junit.Assert.assertNotNull(matrix89);
        org.junit.Assert.assertNotNull(matrix90);
        org.junit.Assert.assertTrue("'" + boolean92 + "' != '" + false + "'", boolean92 == false);
        org.junit.Assert.assertNotNull(matrix94);
        org.junit.Assert.assertNotNull(matrix96);
        org.junit.Assert.assertTrue("'" + boolean97 + "' != '" + true + "'", boolean97 == true);
    }

    @Test
    public void test4598() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4598");
        com.operations.Matrix.Matrix matrix2 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0L, (double) (byte) 10);
        double[] doubleArray5 = new double[] { 10, 'a' };
        double[] doubleArray8 = new double[] { 10, 'a' };
        double[][] doubleArray9 = new double[][] { doubleArray5, doubleArray8 };
        com.operations.Matrix.Matrix matrix10 = new com.operations.Matrix.Matrix(doubleArray9);
        int int11 = matrix10.getCols();
        int int12 = matrix10.getCols();
        int int13 = matrix10.getCols();
        com.operations.Matrix.Matrix[] matrixArray14 = com.operations.Matrix.MatrixDecompositions.luDecomposition(matrix10);
        com.operations.Matrix.Matrix matrix15 = com.operations.Matrix.MatrixOperations.multiply(matrix2, matrix10);
        com.operations.Matrix.Matrix matrix17 = com.operations.Matrix.MatrixTransformations.rotate2D((double) (short) 100);
        boolean boolean19 = com.operations.Matrix.MatrixUtils.compare(matrix10, matrix17, (double) (byte) 0);
        double[] doubleArray22 = new double[] { 10, 'a' };
        double[] doubleArray25 = new double[] { 10, 'a' };
        double[][] doubleArray26 = new double[][] { doubleArray22, doubleArray25 };
        com.operations.Matrix.Matrix matrix27 = new com.operations.Matrix.Matrix(doubleArray26);
        com.operations.Matrix.Matrix matrix28 = new com.operations.Matrix.Matrix(doubleArray26);
        com.operations.Matrix.Matrix matrix29 = new com.operations.Matrix.Matrix(doubleArray26);
        boolean boolean31 = com.operations.Matrix.MatrixUtils.compare(matrix10, matrix29, (double) (-1));
        double[] doubleArray34 = new double[] { 10, 'a' };
        double[] doubleArray37 = new double[] { 10, 'a' };
        double[][] doubleArray38 = new double[][] { doubleArray34, doubleArray37 };
        com.operations.Matrix.Matrix matrix39 = new com.operations.Matrix.Matrix(doubleArray38);
        com.operations.Matrix.Matrix matrix40 = new com.operations.Matrix.Matrix(doubleArray38);
        boolean boolean41 = com.operations.Matrix.MatrixUtils.isSquare(matrix40);
        com.operations.Matrix.Matrix matrix42 = com.operations.Matrix.MatrixOperations.multiply(matrix29, matrix40);
        com.operations.Matrix.Matrix matrix45 = com.operations.Matrix.MatrixTransformations.project2D((double) ' ', 0.0d);
        double[] doubleArray48 = new double[] { 10, 'a' };
        double[] doubleArray51 = new double[] { 10, 'a' };
        double[][] doubleArray52 = new double[][] { doubleArray48, doubleArray51 };
        com.operations.Matrix.Matrix matrix53 = new com.operations.Matrix.Matrix(doubleArray52);
        int int54 = matrix53.getCols();
        boolean boolean55 = com.operations.Matrix.MatrixUtils.isSquare(matrix53);
        com.operations.Matrix.Matrix matrix56 = com.operations.Matrix.MatrixOperations.transpose(matrix53);
        int int57 = matrix56.getRows();
        com.operations.Matrix.Matrix matrix60 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0L, (double) (byte) 10);
        double[] doubleArray63 = new double[] { 10, 'a' };
        double[] doubleArray66 = new double[] { 10, 'a' };
        double[][] doubleArray67 = new double[][] { doubleArray63, doubleArray66 };
        com.operations.Matrix.Matrix matrix68 = new com.operations.Matrix.Matrix(doubleArray67);
        int int69 = matrix68.getCols();
        int int70 = matrix68.getCols();
        int int71 = matrix68.getCols();
        com.operations.Matrix.Matrix[] matrixArray72 = com.operations.Matrix.MatrixDecompositions.luDecomposition(matrix68);
        com.operations.Matrix.Matrix matrix73 = com.operations.Matrix.MatrixOperations.multiply(matrix60, matrix68);
        com.operations.Matrix.Matrix matrix75 = com.operations.Matrix.MatrixTransformations.rotate2D((double) (short) 100);
        boolean boolean77 = com.operations.Matrix.MatrixUtils.compare(matrix68, matrix75, (double) (byte) 0);
        com.operations.Matrix.Matrix matrix78 = com.operations.Matrix.MatrixOperations.multiply(matrix56, matrix68);
        com.operations.Matrix.Matrix matrix79 = com.operations.Matrix.MatrixOperations.add(matrix45, matrix68);
        com.operations.Matrix.Matrix matrix80 = com.operations.Matrix.MatrixOperations.transpose(matrix45);
        com.operations.Matrix.Matrix matrix83 = com.operations.Matrix.MatrixTransformations.scale2D((double) (byte) 100, 350.0d);
        double double84 = com.operations.Matrix.MatrixUtils.frobeniusNorm(matrix83);
        int int85 = matrix83.getCols();
        com.operations.Matrix.Matrix matrix86 = com.operations.Matrix.MatrixOperations.multiply(matrix45, matrix83);
        int int87 = matrix45.getRows();
        com.operations.Matrix.Matrix matrix88 = com.operations.Matrix.MatrixOperations.multiply(matrix42, matrix45);
        int int89 = matrix45.getCols();
        int int90 = matrix45.getCols();
        boolean boolean91 = com.operations.Matrix.MatrixUtils.isSquare(matrix45);
        boolean boolean92 = com.operations.Matrix.MatrixUtils.isSquare(matrix45);
        org.junit.Assert.assertNotNull(matrix2);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertArrayEquals(doubleArray5, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertArrayEquals(doubleArray8, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 2 + "'", int11 == 2);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 2 + "'", int12 == 2);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 2 + "'", int13 == 2);
        org.junit.Assert.assertNotNull(matrixArray14);
        org.junit.Assert.assertNotNull(matrix15);
        org.junit.Assert.assertNotNull(matrix17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertArrayEquals(doubleArray22, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertArrayEquals(doubleArray25, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertArrayEquals(doubleArray34, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertArrayEquals(doubleArray37, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertNotNull(matrix42);
        org.junit.Assert.assertNotNull(matrix45);
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertArrayEquals(doubleArray48, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertArrayEquals(doubleArray51, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 2 + "'", int54 == 2);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + true + "'", boolean55 == true);
        org.junit.Assert.assertNotNull(matrix56);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 2 + "'", int57 == 2);
        org.junit.Assert.assertNotNull(matrix60);
        org.junit.Assert.assertNotNull(doubleArray63);
        org.junit.Assert.assertArrayEquals(doubleArray63, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray66);
        org.junit.Assert.assertArrayEquals(doubleArray66, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray67);
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 2 + "'", int69 == 2);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 2 + "'", int70 == 2);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 2 + "'", int71 == 2);
        org.junit.Assert.assertNotNull(matrixArray72);
        org.junit.Assert.assertNotNull(matrix73);
        org.junit.Assert.assertNotNull(matrix75);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertNotNull(matrix78);
        org.junit.Assert.assertNotNull(matrix79);
        org.junit.Assert.assertNotNull(matrix80);
        org.junit.Assert.assertNotNull(matrix83);
        org.junit.Assert.assertTrue("'" + double84 + "' != '" + 364.0054944640259d + "'", double84 == 364.0054944640259d);
        org.junit.Assert.assertTrue("'" + int85 + "' != '" + 2 + "'", int85 == 2);
        org.junit.Assert.assertNotNull(matrix86);
        org.junit.Assert.assertTrue("'" + int87 + "' != '" + 2 + "'", int87 == 2);
        org.junit.Assert.assertNotNull(matrix88);
        org.junit.Assert.assertTrue("'" + int89 + "' != '" + 2 + "'", int89 == 2);
        org.junit.Assert.assertTrue("'" + int90 + "' != '" + 2 + "'", int90 == 2);
        org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + true + "'", boolean91 == true);
        org.junit.Assert.assertTrue("'" + boolean92 + "' != '" + true + "'", boolean92 == true);
    }

    @Test
    public void test4599() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4599");
        com.operations.Matrix.Matrix matrix2 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0L, (double) (byte) 10);
        int int3 = matrix2.getRows();
        com.operations.Matrix.Matrix matrix9 = com.operations.Matrix.MatrixUtils.generateRandomMatrix(100, (int) (byte) 1, (int) '#', (int) '#', 1L);
        boolean boolean11 = com.operations.Matrix.MatrixUtils.compare(matrix2, matrix9, (double) 1.0f);
        double[] doubleArray14 = new double[] { 10, 'a' };
        double[] doubleArray17 = new double[] { 10, 'a' };
        double[][] doubleArray18 = new double[][] { doubleArray14, doubleArray17 };
        com.operations.Matrix.Matrix matrix19 = new com.operations.Matrix.Matrix(doubleArray18);
        int int20 = matrix19.getCols();
        int int21 = matrix19.getCols();
        int int22 = matrix19.getCols();
        com.operations.Matrix.Matrix matrix28 = com.operations.Matrix.MatrixUtils.generateRandomMatrix(100, (int) (byte) 1, (int) '#', (int) '#', 1L);
        double double31 = matrix28.getValue((int) '4', 0);
        double double32 = com.operations.Matrix.MatrixUtils.frobeniusNorm(matrix28);
        boolean boolean33 = com.operations.Matrix.MatrixUtils.isSquare(matrix28);
        boolean boolean35 = com.operations.Matrix.MatrixUtils.compare(matrix19, matrix28, (double) 100L);
        com.operations.Matrix.Matrix matrix36 = com.operations.Matrix.MatrixDecompositions.choleskyDecomposition(matrix19);
        double[] doubleArray39 = new double[] { 10, 'a' };
        double[] doubleArray42 = new double[] { 10, 'a' };
        double[][] doubleArray43 = new double[][] { doubleArray39, doubleArray42 };
        com.operations.Matrix.Matrix matrix44 = new com.operations.Matrix.Matrix(doubleArray43);
        int int45 = matrix44.getCols();
        int int46 = matrix44.getCols();
        int int47 = matrix44.getCols();
        com.operations.Matrix.Matrix matrix49 = com.operations.Matrix.MatrixOperations.scalarMultiply(matrix44, (double) 0.0f);
        boolean boolean51 = com.operations.Matrix.MatrixUtils.compare(matrix36, matrix44, (double) '4');
        matrix44.print();
        boolean boolean54 = com.operations.Matrix.MatrixUtils.compare(matrix9, matrix44, 137.90576492663388d);
        double[][] doubleArray55 = matrix44.getData();
        matrix44.print();
        org.junit.Assert.assertNotNull(matrix2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 2 + "'", int3 == 2);
        org.junit.Assert.assertNotNull(matrix9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertArrayEquals(doubleArray14, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertArrayEquals(doubleArray17, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 2 + "'", int20 == 2);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 2 + "'", int21 == 2);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 2 + "'", int22 == 2);
        org.junit.Assert.assertNotNull(matrix28);
        org.junit.Assert.assertTrue("'" + double31 + "' != '" + 35.0d + "'", double31 == 35.0d);
        org.junit.Assert.assertTrue("'" + double32 + "' != '" + 350.0d + "'", double32 == 350.0d);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(matrix36);
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertArrayEquals(doubleArray39, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertArrayEquals(doubleArray42, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 2 + "'", int45 == 2);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 2 + "'", int46 == 2);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 2 + "'", int47 == 2);
        org.junit.Assert.assertNotNull(matrix49);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(doubleArray55);
    }

    @Test
    public void test4600() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4600");
        com.operations.Matrix.Matrix matrix1 = com.operations.Matrix.MatrixTransformations.rotate2D((-0.017187291480513275d));
        org.junit.Assert.assertNotNull(matrix1);
    }

    @Test
    public void test4601() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4601");
        com.operations.Matrix.Matrix matrix2 = new com.operations.Matrix.Matrix((int) (short) 100, (int) (short) 0);
        int int3 = matrix2.getRows();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 100 + "'", int3 == 100);
    }

    @Test
    public void test4602() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4602");
        com.operations.Matrix.Matrix matrix2 = com.operations.Matrix.MatrixTransformations.project2D((double) (byte) 100, 32.0d);
        boolean boolean3 = com.operations.Matrix.MatrixUtils.isSquare(matrix2);
        com.operations.Matrix.Matrix matrix4 = com.operations.Matrix.MatrixDecompositions.choleskyDecomposition(matrix2);
        com.operations.Matrix.Matrix matrix7 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0L, (double) (byte) 10);
        int int8 = matrix7.getRows();
        com.operations.Matrix.Matrix matrix11 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0L, (double) (byte) 10);
        int int12 = matrix11.getRows();
        com.operations.Matrix.Matrix matrix14 = com.operations.Matrix.MatrixOperations.scalarMultiply(matrix11, (double) 2);
        com.operations.Matrix.Matrix matrix15 = com.operations.Matrix.MatrixOperations.subtract(matrix7, matrix11);
        com.operations.Matrix.Matrix matrix18 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0L, (double) (byte) 10);
        int int19 = matrix18.getRows();
        com.operations.Matrix.Matrix matrix25 = com.operations.Matrix.MatrixUtils.generateRandomMatrix(100, (int) (byte) 1, (int) '#', (int) '#', 1L);
        boolean boolean27 = com.operations.Matrix.MatrixUtils.compare(matrix18, matrix25, (double) 1.0f);
        com.operations.Matrix.Matrix matrix29 = com.operations.Matrix.MatrixOperations.scalarMultiply(matrix18, (double) 1L);
        boolean boolean31 = com.operations.Matrix.MatrixUtils.compare(matrix15, matrix29, 0.0d);
        com.operations.Matrix.Matrix matrix32 = com.operations.Matrix.MatrixOperations.add(matrix2, matrix15);
        com.operations.Matrix.Matrix matrix35 = com.operations.Matrix.MatrixTransformations.scale2D(1.414213562373095d, (double) 1);
        boolean boolean37 = com.operations.Matrix.MatrixUtils.compare(matrix32, matrix35, 0.0d);
        boolean boolean38 = com.operations.Matrix.MatrixUtils.isSquare(matrix35);
        // The following exception was thrown during execution in test generation
        try {
            matrix35.setValue(0, 10, 13376.859197883485d);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: Index 10 out of bounds for length 2");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(matrix2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNotNull(matrix4);
        org.junit.Assert.assertNotNull(matrix7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 2 + "'", int8 == 2);
        org.junit.Assert.assertNotNull(matrix11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 2 + "'", int12 == 2);
        org.junit.Assert.assertNotNull(matrix14);
        org.junit.Assert.assertNotNull(matrix15);
        org.junit.Assert.assertNotNull(matrix18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 2 + "'", int19 == 2);
        org.junit.Assert.assertNotNull(matrix25);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(matrix29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(matrix32);
        org.junit.Assert.assertNotNull(matrix35);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
    }

    @Test
    public void test4603() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4603");
        double[] doubleArray2 = new double[] { 10, 'a' };
        double[] doubleArray5 = new double[] { 10, 'a' };
        double[][] doubleArray6 = new double[][] { doubleArray2, doubleArray5 };
        com.operations.Matrix.Matrix matrix7 = new com.operations.Matrix.Matrix(doubleArray6);
        com.operations.Matrix.Matrix matrix8 = new com.operations.Matrix.Matrix(doubleArray6);
        boolean boolean9 = com.operations.Matrix.MatrixUtils.isSquare(matrix8);
        double[] doubleArray12 = new double[] { 10, 'a' };
        double[] doubleArray15 = new double[] { 10, 'a' };
        double[][] doubleArray16 = new double[][] { doubleArray12, doubleArray15 };
        com.operations.Matrix.Matrix matrix17 = new com.operations.Matrix.Matrix(doubleArray16);
        int int18 = matrix17.getCols();
        int int19 = matrix17.getCols();
        matrix17.print();
        double[] doubleArray23 = new double[] { 10, 'a' };
        double[] doubleArray26 = new double[] { 10, 'a' };
        double[][] doubleArray27 = new double[][] { doubleArray23, doubleArray26 };
        com.operations.Matrix.Matrix matrix28 = new com.operations.Matrix.Matrix(doubleArray27);
        boolean boolean30 = com.operations.Matrix.MatrixUtils.compare(matrix17, matrix28, (double) (-1));
        com.operations.Matrix.Matrix matrix31 = com.operations.Matrix.MatrixOperations.subtract(matrix8, matrix28);
        double[] doubleArray34 = new double[] { 10, 'a' };
        double[] doubleArray37 = new double[] { 10, 'a' };
        double[][] doubleArray38 = new double[][] { doubleArray34, doubleArray37 };
        com.operations.Matrix.Matrix matrix39 = new com.operations.Matrix.Matrix(doubleArray38);
        com.operations.Matrix.Matrix matrix40 = new com.operations.Matrix.Matrix(doubleArray38);
        boolean boolean41 = com.operations.Matrix.MatrixUtils.isSquare(matrix40);
        double[] doubleArray44 = new double[] { 10, 'a' };
        double[] doubleArray47 = new double[] { 10, 'a' };
        double[][] doubleArray48 = new double[][] { doubleArray44, doubleArray47 };
        com.operations.Matrix.Matrix matrix49 = new com.operations.Matrix.Matrix(doubleArray48);
        int int50 = matrix49.getCols();
        int int51 = matrix49.getCols();
        matrix49.print();
        double[] doubleArray55 = new double[] { 10, 'a' };
        double[] doubleArray58 = new double[] { 10, 'a' };
        double[][] doubleArray59 = new double[][] { doubleArray55, doubleArray58 };
        com.operations.Matrix.Matrix matrix60 = new com.operations.Matrix.Matrix(doubleArray59);
        boolean boolean62 = com.operations.Matrix.MatrixUtils.compare(matrix49, matrix60, (double) (-1));
        com.operations.Matrix.Matrix matrix63 = com.operations.Matrix.MatrixOperations.subtract(matrix40, matrix60);
        com.operations.Matrix.Matrix matrix64 = com.operations.Matrix.MatrixOperations.add(matrix8, matrix63);
        com.operations.Matrix.Matrix matrix66 = com.operations.Matrix.MatrixTransformations.rotate2D((double) 100L);
        com.operations.Matrix.Matrix matrix68 = com.operations.Matrix.MatrixOperations.scalarMultiply(matrix66, (double) ' ');
        com.operations.Matrix.Matrix[] matrixArray69 = com.operations.Matrix.MatrixDecompositions.luDecomposition(matrix68);
        com.operations.Matrix.Matrix matrix70 = com.operations.Matrix.MatrixOperations.add(matrix63, matrix68);
        int int71 = matrix70.getCols();
        com.operations.Matrix.Matrix matrix72 = null;
        // The following exception was thrown during execution in test generation
        try {
            com.operations.Matrix.Matrix matrix73 = com.operations.Matrix.MatrixOperations.add(matrix70, matrix72);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertArrayEquals(doubleArray2, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertArrayEquals(doubleArray5, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertArrayEquals(doubleArray12, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertArrayEquals(doubleArray15, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 2 + "'", int18 == 2);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 2 + "'", int19 == 2);
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertArrayEquals(doubleArray23, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertArrayEquals(doubleArray26, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(matrix31);
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertArrayEquals(doubleArray34, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertArrayEquals(doubleArray37, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertArrayEquals(doubleArray44, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertArrayEquals(doubleArray47, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 2 + "'", int50 == 2);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 2 + "'", int51 == 2);
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertArrayEquals(doubleArray55, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray58);
        org.junit.Assert.assertArrayEquals(doubleArray58, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray59);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertNotNull(matrix63);
        org.junit.Assert.assertNotNull(matrix64);
        org.junit.Assert.assertNotNull(matrix66);
        org.junit.Assert.assertNotNull(matrix68);
        org.junit.Assert.assertNotNull(matrixArray69);
        org.junit.Assert.assertNotNull(matrix70);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 2 + "'", int71 == 2);
    }

    @Test
    public void test4604() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4604");
        double[] doubleArray2 = new double[] { 10, 'a' };
        double[] doubleArray5 = new double[] { 10, 'a' };
        double[][] doubleArray6 = new double[][] { doubleArray2, doubleArray5 };
        com.operations.Matrix.Matrix matrix7 = new com.operations.Matrix.Matrix(doubleArray6);
        int int8 = matrix7.getCols();
        int int9 = matrix7.getCols();
        int int10 = matrix7.getCols();
        double[] doubleArray13 = new double[] { 10, 'a' };
        double[] doubleArray16 = new double[] { 10, 'a' };
        double[][] doubleArray17 = new double[][] { doubleArray13, doubleArray16 };
        com.operations.Matrix.Matrix matrix18 = new com.operations.Matrix.Matrix(doubleArray17);
        com.operations.Matrix.Matrix matrix19 = new com.operations.Matrix.Matrix(doubleArray17);
        com.operations.Matrix.Matrix matrix21 = com.operations.Matrix.MatrixTransformations.rotate2D((double) (short) 100);
        double[] doubleArray24 = new double[] { 137.90576492663388d, (byte) -1 };
        double[] doubleArray25 = com.operations.Matrix.MatrixSolver.solveGaussian(matrix21, doubleArray24);
        com.operations.Matrix.Matrix matrix26 = com.operations.Matrix.MatrixOperations.add(matrix19, matrix21);
        boolean boolean27 = com.operations.Matrix.MatrixUtils.isSymmetric(matrix21);
        boolean boolean29 = com.operations.Matrix.MatrixUtils.compare(matrix7, matrix21, 36.40054944640259d);
        com.operations.Matrix.Matrix matrix31 = com.operations.Matrix.MatrixOperations.scalarMultiply(matrix7, 12.790922166892882d);
        int int32 = matrix7.getCols();
        int int33 = matrix7.getRows();
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertArrayEquals(doubleArray2, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertArrayEquals(doubleArray5, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 2 + "'", int8 == 2);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 2 + "'", int9 == 2);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 2 + "'", int10 == 2);
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertArrayEquals(doubleArray13, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertArrayEquals(doubleArray16, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertNotNull(matrix21);
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertArrayEquals(doubleArray24, new double[] { 137.90576492663388d, (-1.0d) }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertArrayEquals(doubleArray25, new double[] { (-24.931892522286255d), (-135.63701830716116d) }, 1.0E-15);
        org.junit.Assert.assertNotNull(matrix26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(matrix31);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 2 + "'", int32 == 2);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 2 + "'", int33 == 2);
    }

    @Test
    public void test4605() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4605");
        com.operations.Matrix.Matrix matrix2 = com.operations.Matrix.MatrixTransformations.project2D((double) ' ', 0.0d);
        double[] doubleArray5 = new double[] { 10, 'a' };
        double[] doubleArray8 = new double[] { 10, 'a' };
        double[][] doubleArray9 = new double[][] { doubleArray5, doubleArray8 };
        com.operations.Matrix.Matrix matrix10 = new com.operations.Matrix.Matrix(doubleArray9);
        int int11 = matrix10.getCols();
        boolean boolean12 = com.operations.Matrix.MatrixUtils.isSquare(matrix10);
        com.operations.Matrix.Matrix matrix13 = com.operations.Matrix.MatrixOperations.transpose(matrix10);
        int int14 = matrix13.getRows();
        com.operations.Matrix.Matrix matrix17 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0L, (double) (byte) 10);
        double[] doubleArray20 = new double[] { 10, 'a' };
        double[] doubleArray23 = new double[] { 10, 'a' };
        double[][] doubleArray24 = new double[][] { doubleArray20, doubleArray23 };
        com.operations.Matrix.Matrix matrix25 = new com.operations.Matrix.Matrix(doubleArray24);
        int int26 = matrix25.getCols();
        int int27 = matrix25.getCols();
        int int28 = matrix25.getCols();
        com.operations.Matrix.Matrix[] matrixArray29 = com.operations.Matrix.MatrixDecompositions.luDecomposition(matrix25);
        com.operations.Matrix.Matrix matrix30 = com.operations.Matrix.MatrixOperations.multiply(matrix17, matrix25);
        com.operations.Matrix.Matrix matrix32 = com.operations.Matrix.MatrixTransformations.rotate2D((double) (short) 100);
        boolean boolean34 = com.operations.Matrix.MatrixUtils.compare(matrix25, matrix32, (double) (byte) 0);
        com.operations.Matrix.Matrix matrix35 = com.operations.Matrix.MatrixOperations.multiply(matrix13, matrix25);
        com.operations.Matrix.Matrix matrix36 = com.operations.Matrix.MatrixOperations.add(matrix2, matrix25);
        matrix25.print();
        boolean boolean38 = com.operations.Matrix.MatrixUtils.isSquare(matrix25);
        com.operations.Matrix.Matrix matrix39 = com.operations.Matrix.MatrixDecompositions.choleskyDecomposition(matrix25);
        double double40 = com.operations.Matrix.MatrixUtils.frobeniusNorm(matrix25);
        org.junit.Assert.assertNotNull(matrix2);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertArrayEquals(doubleArray5, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertArrayEquals(doubleArray8, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 2 + "'", int11 == 2);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(matrix13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 2 + "'", int14 == 2);
        org.junit.Assert.assertNotNull(matrix17);
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertArrayEquals(doubleArray20, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertArrayEquals(doubleArray23, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 2 + "'", int26 == 2);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 2 + "'", int27 == 2);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 2 + "'", int28 == 2);
        org.junit.Assert.assertNotNull(matrixArray29);
        org.junit.Assert.assertNotNull(matrix30);
        org.junit.Assert.assertNotNull(matrix32);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(matrix35);
        org.junit.Assert.assertNotNull(matrix36);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertNotNull(matrix39);
        org.junit.Assert.assertTrue("'" + double40 + "' != '" + 137.90576492663388d + "'", double40 == 137.90576492663388d);
    }

    @Test
    public void test4606() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4606");
        com.operations.Matrix.Matrix matrix2 = com.operations.Matrix.MatrixTransformations.scale2D(975.1410154434076d, (double) (short) 10);
        com.operations.Matrix.Matrix matrix5 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0L, (double) (byte) 10);
        int int6 = matrix5.getRows();
        com.operations.Matrix.Matrix matrix8 = com.operations.Matrix.MatrixOperations.scalarMultiply(matrix5, (double) 2);
        double double9 = com.operations.Matrix.MatrixUtils.frobeniusNorm(matrix5);
        com.operations.Matrix.Matrix matrix12 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0L, (double) (byte) 10);
        int int13 = matrix12.getRows();
        com.operations.Matrix.Matrix matrix15 = com.operations.Matrix.MatrixOperations.scalarMultiply(matrix12, (double) 2);
        com.operations.Matrix.Matrix matrix16 = com.operations.Matrix.MatrixOperations.subtract(matrix5, matrix15);
        com.operations.Matrix.Matrix matrix18 = com.operations.Matrix.MatrixOperations.scalarMultiply(matrix16, (double) 1);
        double[][] doubleArray19 = matrix18.getData();
        com.operations.Matrix.Matrix matrix20 = new com.operations.Matrix.Matrix(doubleArray19);
        com.operations.Matrix.Matrix matrix21 = com.operations.Matrix.MatrixOperations.add(matrix2, matrix20);
        com.operations.Matrix.Matrix matrix23 = com.operations.Matrix.MatrixTransformations.rotate2D((double) (short) 100);
        double[] doubleArray26 = new double[] { 137.90576492663388d, (byte) -1 };
        double[] doubleArray27 = com.operations.Matrix.MatrixSolver.solveGaussian(matrix23, doubleArray26);
        com.operations.Matrix.Matrix matrix30 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0L, (double) (byte) 10);
        double[] doubleArray33 = new double[] { 10, 'a' };
        double[] doubleArray36 = new double[] { 10, 'a' };
        double[][] doubleArray37 = new double[][] { doubleArray33, doubleArray36 };
        com.operations.Matrix.Matrix matrix38 = new com.operations.Matrix.Matrix(doubleArray37);
        int int39 = matrix38.getCols();
        int int40 = matrix38.getCols();
        int int41 = matrix38.getCols();
        com.operations.Matrix.Matrix[] matrixArray42 = com.operations.Matrix.MatrixDecompositions.luDecomposition(matrix38);
        com.operations.Matrix.Matrix matrix43 = com.operations.Matrix.MatrixOperations.multiply(matrix30, matrix38);
        boolean boolean45 = com.operations.Matrix.MatrixUtils.compare(matrix23, matrix30, (double) (-1L));
        double[][] doubleArray46 = matrix23.getData();
        com.operations.Matrix.Matrix matrix49 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0L, (double) 10L);
        boolean boolean51 = com.operations.Matrix.MatrixUtils.compare(matrix23, matrix49, 146.4308710620817d);
        com.operations.Matrix.Matrix matrix53 = com.operations.Matrix.MatrixOperations.scalarMultiply(matrix49, 1.4142135623730951d);
        com.operations.Matrix.Matrix matrix55 = com.operations.Matrix.MatrixTransformations.rotate2D((-0.1736481776669303d));
        int int56 = matrix55.getRows();
        com.operations.Matrix.Matrix matrix57 = com.operations.Matrix.MatrixOperations.subtract(matrix49, matrix55);
        com.operations.Matrix.Matrix matrix58 = com.operations.Matrix.MatrixOperations.add(matrix2, matrix49);
        org.junit.Assert.assertNotNull(matrix2);
        org.junit.Assert.assertNotNull(matrix5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 2 + "'", int6 == 2);
        org.junit.Assert.assertNotNull(matrix8);
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 10.0d + "'", double9 == 10.0d);
        org.junit.Assert.assertNotNull(matrix12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 2 + "'", int13 == 2);
        org.junit.Assert.assertNotNull(matrix15);
        org.junit.Assert.assertNotNull(matrix16);
        org.junit.Assert.assertNotNull(matrix18);
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertNotNull(matrix21);
        org.junit.Assert.assertNotNull(matrix23);
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertArrayEquals(doubleArray26, new double[] { 137.90576492663388d, (-1.0d) }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertArrayEquals(doubleArray27, new double[] { (-24.931892522286255d), (-135.63701830716116d) }, 1.0E-15);
        org.junit.Assert.assertNotNull(matrix30);
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertArrayEquals(doubleArray33, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertArrayEquals(doubleArray36, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 2 + "'", int39 == 2);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 2 + "'", int40 == 2);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 2 + "'", int41 == 2);
        org.junit.Assert.assertNotNull(matrixArray42);
        org.junit.Assert.assertNotNull(matrix43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(doubleArray46);
        org.junit.Assert.assertNotNull(matrix49);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + true + "'", boolean51 == true);
        org.junit.Assert.assertNotNull(matrix53);
        org.junit.Assert.assertNotNull(matrix55);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 2 + "'", int56 == 2);
        org.junit.Assert.assertNotNull(matrix57);
        org.junit.Assert.assertNotNull(matrix58);
    }

    @Test
    public void test4607() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4607");
        double[] doubleArray2 = new double[] { 10, 'a' };
        double[] doubleArray5 = new double[] { 10, 'a' };
        double[][] doubleArray6 = new double[][] { doubleArray2, doubleArray5 };
        com.operations.Matrix.Matrix matrix7 = new com.operations.Matrix.Matrix(doubleArray6);
        int int8 = matrix7.getCols();
        int int9 = matrix7.getCols();
        matrix7.print();
        boolean boolean11 = com.operations.Matrix.MatrixUtils.isSymmetric(matrix7);
        com.operations.Matrix.Matrix matrix13 = com.operations.Matrix.MatrixTransformations.rotate2D((double) 1.0f);
        int int14 = matrix13.getRows();
        com.operations.Matrix.Matrix matrix15 = com.operations.Matrix.MatrixOperations.add(matrix7, matrix13);
        com.operations.Matrix.Matrix matrix16 = com.operations.Matrix.MatrixOperations.transpose(matrix7);
        int int17 = matrix7.getCols();
        double double18 = com.operations.Matrix.MatrixUtils.frobeniusNorm(matrix7);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertArrayEquals(doubleArray2, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertArrayEquals(doubleArray5, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 2 + "'", int8 == 2);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 2 + "'", int9 == 2);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(matrix13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 2 + "'", int14 == 2);
        org.junit.Assert.assertNotNull(matrix15);
        org.junit.Assert.assertNotNull(matrix16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 2 + "'", int17 == 2);
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 137.90576492663388d + "'", double18 == 137.90576492663388d);
    }

    @Test
    public void test4608() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4608");
        com.operations.Matrix.Matrix matrix2 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0L, (double) (byte) 10);
        double[] doubleArray5 = new double[] { 10, 'a' };
        double[] doubleArray8 = new double[] { 10, 'a' };
        double[][] doubleArray9 = new double[][] { doubleArray5, doubleArray8 };
        com.operations.Matrix.Matrix matrix10 = new com.operations.Matrix.Matrix(doubleArray9);
        int int11 = matrix10.getCols();
        int int12 = matrix10.getCols();
        int int13 = matrix10.getCols();
        com.operations.Matrix.Matrix[] matrixArray14 = com.operations.Matrix.MatrixDecompositions.luDecomposition(matrix10);
        com.operations.Matrix.Matrix matrix15 = com.operations.Matrix.MatrixOperations.multiply(matrix2, matrix10);
        com.operations.Matrix.Matrix matrix17 = com.operations.Matrix.MatrixTransformations.rotate2D((double) (short) 100);
        boolean boolean19 = com.operations.Matrix.MatrixUtils.compare(matrix10, matrix17, (double) (byte) 0);
        boolean boolean20 = com.operations.Matrix.MatrixUtils.isSymmetric(matrix17);
        int int21 = matrix17.getRows();
        org.junit.Assert.assertNotNull(matrix2);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertArrayEquals(doubleArray5, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertArrayEquals(doubleArray8, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 2 + "'", int11 == 2);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 2 + "'", int12 == 2);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 2 + "'", int13 == 2);
        org.junit.Assert.assertNotNull(matrixArray14);
        org.junit.Assert.assertNotNull(matrix15);
        org.junit.Assert.assertNotNull(matrix17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 2 + "'", int21 == 2);
    }

    @Test
    public void test4609() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4609");
        double[] doubleArray2 = new double[] { 10, 'a' };
        double[] doubleArray5 = new double[] { 10, 'a' };
        double[][] doubleArray6 = new double[][] { doubleArray2, doubleArray5 };
        com.operations.Matrix.Matrix matrix7 = new com.operations.Matrix.Matrix(doubleArray6);
        com.operations.Matrix.Matrix matrix8 = com.operations.Matrix.MatrixOperations.transpose(matrix7);
        com.operations.Matrix.Matrix matrix11 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0L, (double) (byte) 10);
        int int12 = matrix11.getRows();
        com.operations.Matrix.Matrix matrix18 = com.operations.Matrix.MatrixUtils.generateRandomMatrix(100, (int) (byte) 1, (int) '#', (int) '#', 1L);
        boolean boolean20 = com.operations.Matrix.MatrixUtils.compare(matrix11, matrix18, (double) 1.0f);
        com.operations.Matrix.Matrix matrix22 = com.operations.Matrix.MatrixOperations.scalarMultiply(matrix11, (double) 1L);
        matrix11.print();
        com.operations.Matrix.Matrix matrix24 = com.operations.Matrix.MatrixOperations.multiply(matrix8, matrix11);
        com.operations.Matrix.Matrix matrix27 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0L, (double) (byte) 10);
        double[] doubleArray30 = new double[] { 10, 'a' };
        double[] doubleArray33 = new double[] { 10, 'a' };
        double[][] doubleArray34 = new double[][] { doubleArray30, doubleArray33 };
        com.operations.Matrix.Matrix matrix35 = new com.operations.Matrix.Matrix(doubleArray34);
        int int36 = matrix35.getCols();
        int int37 = matrix35.getCols();
        int int38 = matrix35.getCols();
        com.operations.Matrix.Matrix[] matrixArray39 = com.operations.Matrix.MatrixDecompositions.luDecomposition(matrix35);
        com.operations.Matrix.Matrix matrix40 = com.operations.Matrix.MatrixOperations.multiply(matrix27, matrix35);
        com.operations.Matrix.Matrix matrix42 = com.operations.Matrix.MatrixTransformations.rotate2D((double) (short) 100);
        boolean boolean44 = com.operations.Matrix.MatrixUtils.compare(matrix35, matrix42, (double) (byte) 0);
        double[] doubleArray47 = new double[] { 10, 'a' };
        double[] doubleArray50 = new double[] { 10, 'a' };
        double[][] doubleArray51 = new double[][] { doubleArray47, doubleArray50 };
        com.operations.Matrix.Matrix matrix52 = new com.operations.Matrix.Matrix(doubleArray51);
        com.operations.Matrix.Matrix matrix53 = new com.operations.Matrix.Matrix(doubleArray51);
        com.operations.Matrix.Matrix matrix54 = new com.operations.Matrix.Matrix(doubleArray51);
        boolean boolean56 = com.operations.Matrix.MatrixUtils.compare(matrix35, matrix54, (double) (-1));
        double[] doubleArray59 = new double[] { 10, 'a' };
        double[] doubleArray62 = new double[] { 10, 'a' };
        double[][] doubleArray63 = new double[][] { doubleArray59, doubleArray62 };
        com.operations.Matrix.Matrix matrix64 = new com.operations.Matrix.Matrix(doubleArray63);
        com.operations.Matrix.Matrix matrix65 = new com.operations.Matrix.Matrix(doubleArray63);
        boolean boolean66 = com.operations.Matrix.MatrixUtils.isSquare(matrix65);
        com.operations.Matrix.Matrix matrix67 = com.operations.Matrix.MatrixOperations.multiply(matrix54, matrix65);
        com.operations.Matrix.Matrix matrix68 = com.operations.Matrix.MatrixDecompositions.choleskyDecomposition(matrix54);
        com.operations.Matrix.Matrix matrix71 = com.operations.Matrix.MatrixTransformations.project2D(1363.6076983299943d, (double) 52);
        com.operations.Matrix.Matrix matrix72 = com.operations.Matrix.MatrixOperations.multiply(matrix68, matrix71);
        com.operations.Matrix.Matrix matrix73 = com.operations.Matrix.MatrixOperations.add(matrix8, matrix71);
        com.operations.Matrix.Matrix[] matrixArray74 = com.operations.Matrix.MatrixDecompositions.luDecomposition(matrix8);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertArrayEquals(doubleArray2, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertArrayEquals(doubleArray5, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertNotNull(matrix8);
        org.junit.Assert.assertNotNull(matrix11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 2 + "'", int12 == 2);
        org.junit.Assert.assertNotNull(matrix18);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(matrix22);
        org.junit.Assert.assertNotNull(matrix24);
        org.junit.Assert.assertNotNull(matrix27);
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertArrayEquals(doubleArray30, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertArrayEquals(doubleArray33, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 2 + "'", int36 == 2);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 2 + "'", int37 == 2);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 2 + "'", int38 == 2);
        org.junit.Assert.assertNotNull(matrixArray39);
        org.junit.Assert.assertNotNull(matrix40);
        org.junit.Assert.assertNotNull(matrix42);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertArrayEquals(doubleArray47, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertArrayEquals(doubleArray50, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(doubleArray59);
        org.junit.Assert.assertArrayEquals(doubleArray59, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray62);
        org.junit.Assert.assertArrayEquals(doubleArray62, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray63);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + true + "'", boolean66 == true);
        org.junit.Assert.assertNotNull(matrix67);
        org.junit.Assert.assertNotNull(matrix68);
        org.junit.Assert.assertNotNull(matrix71);
        org.junit.Assert.assertNotNull(matrix72);
        org.junit.Assert.assertNotNull(matrix73);
        org.junit.Assert.assertNotNull(matrixArray74);
    }

    @Test
    public void test4610() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4610");
        com.operations.Matrix.Matrix matrix2 = com.operations.Matrix.MatrixTransformations.project2D(10.0d, (double) 1);
        double[][] doubleArray3 = matrix2.getData();
        com.operations.Matrix.Matrix matrix4 = new com.operations.Matrix.Matrix(doubleArray3);
        com.operations.Matrix.Matrix matrix6 = com.operations.Matrix.MatrixTransformations.rotate2D((double) 1.0f);
        com.operations.Matrix.Matrix matrix9 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0L, (double) (byte) 10);
        int int10 = matrix9.getRows();
        com.operations.Matrix.Matrix matrix12 = com.operations.Matrix.MatrixOperations.scalarMultiply(matrix9, (double) 2);
        boolean boolean14 = com.operations.Matrix.MatrixUtils.compare(matrix6, matrix12, (double) 10.0f);
        double[] doubleArray17 = new double[] { 10, 'a' };
        double[] doubleArray20 = new double[] { 10, 'a' };
        double[][] doubleArray21 = new double[][] { doubleArray17, doubleArray20 };
        com.operations.Matrix.Matrix matrix22 = new com.operations.Matrix.Matrix(doubleArray21);
        com.operations.Matrix.Matrix matrix23 = new com.operations.Matrix.Matrix(doubleArray21);
        boolean boolean24 = com.operations.Matrix.MatrixUtils.isSquare(matrix23);
        double[] doubleArray27 = new double[] { 10, 'a' };
        double[] doubleArray30 = new double[] { 10, 'a' };
        double[][] doubleArray31 = new double[][] { doubleArray27, doubleArray30 };
        com.operations.Matrix.Matrix matrix32 = new com.operations.Matrix.Matrix(doubleArray31);
        int int33 = matrix32.getCols();
        int int34 = matrix32.getCols();
        matrix32.print();
        double[] doubleArray38 = new double[] { 10, 'a' };
        double[] doubleArray41 = new double[] { 10, 'a' };
        double[][] doubleArray42 = new double[][] { doubleArray38, doubleArray41 };
        com.operations.Matrix.Matrix matrix43 = new com.operations.Matrix.Matrix(doubleArray42);
        boolean boolean45 = com.operations.Matrix.MatrixUtils.compare(matrix32, matrix43, (double) (-1));
        com.operations.Matrix.Matrix matrix46 = com.operations.Matrix.MatrixOperations.subtract(matrix23, matrix43);
        com.operations.Matrix.Matrix matrix48 = com.operations.Matrix.MatrixOperations.scalarMultiply(matrix23, (double) 0.0f);
        com.operations.Matrix.Matrix matrix49 = com.operations.Matrix.MatrixOperations.transpose(matrix23);
        com.operations.Matrix.Matrix matrix50 = com.operations.Matrix.MatrixOperations.transpose(matrix49);
        com.operations.Matrix.Matrix matrix51 = com.operations.Matrix.MatrixOperations.multiply(matrix12, matrix50);
        com.operations.Matrix.Matrix matrix52 = com.operations.Matrix.MatrixOperations.multiply(matrix4, matrix12);
        org.junit.Assert.assertNotNull(matrix2);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertNotNull(matrix6);
        org.junit.Assert.assertNotNull(matrix9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 2 + "'", int10 == 2);
        org.junit.Assert.assertNotNull(matrix12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertArrayEquals(doubleArray17, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertArrayEquals(doubleArray20, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertArrayEquals(doubleArray27, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertArrayEquals(doubleArray30, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 2 + "'", int33 == 2);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 2 + "'", int34 == 2);
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertArrayEquals(doubleArray38, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertArrayEquals(doubleArray41, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(matrix46);
        org.junit.Assert.assertNotNull(matrix48);
        org.junit.Assert.assertNotNull(matrix49);
        org.junit.Assert.assertNotNull(matrix50);
        org.junit.Assert.assertNotNull(matrix51);
        org.junit.Assert.assertNotNull(matrix52);
    }

    @Test
    public void test4611() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4611");
        com.operations.Matrix.Matrix matrix2 = com.operations.Matrix.MatrixTransformations.scale2D((double) (byte) 100, 350.0d);
        double double3 = com.operations.Matrix.MatrixUtils.frobeniusNorm(matrix2);
        com.operations.Matrix.Matrix matrix6 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0L, (double) (byte) 10);
        double[] doubleArray9 = new double[] { 10, 'a' };
        double[] doubleArray12 = new double[] { 10, 'a' };
        double[][] doubleArray13 = new double[][] { doubleArray9, doubleArray12 };
        com.operations.Matrix.Matrix matrix14 = new com.operations.Matrix.Matrix(doubleArray13);
        int int15 = matrix14.getCols();
        int int16 = matrix14.getCols();
        int int17 = matrix14.getCols();
        com.operations.Matrix.Matrix[] matrixArray18 = com.operations.Matrix.MatrixDecompositions.luDecomposition(matrix14);
        com.operations.Matrix.Matrix matrix19 = com.operations.Matrix.MatrixOperations.multiply(matrix6, matrix14);
        com.operations.Matrix.Matrix matrix21 = com.operations.Matrix.MatrixTransformations.rotate2D((double) (short) 100);
        boolean boolean23 = com.operations.Matrix.MatrixUtils.compare(matrix14, matrix21, (double) (byte) 0);
        double[] doubleArray26 = new double[] { 10, 'a' };
        double[] doubleArray29 = new double[] { 10, 'a' };
        double[][] doubleArray30 = new double[][] { doubleArray26, doubleArray29 };
        com.operations.Matrix.Matrix matrix31 = new com.operations.Matrix.Matrix(doubleArray30);
        com.operations.Matrix.Matrix matrix32 = new com.operations.Matrix.Matrix(doubleArray30);
        com.operations.Matrix.Matrix matrix33 = new com.operations.Matrix.Matrix(doubleArray30);
        boolean boolean35 = com.operations.Matrix.MatrixUtils.compare(matrix14, matrix33, (double) (-1));
        double[] doubleArray38 = new double[] { 10, 'a' };
        double[] doubleArray41 = new double[] { 10, 'a' };
        double[][] doubleArray42 = new double[][] { doubleArray38, doubleArray41 };
        com.operations.Matrix.Matrix matrix43 = new com.operations.Matrix.Matrix(doubleArray42);
        com.operations.Matrix.Matrix matrix44 = new com.operations.Matrix.Matrix(doubleArray42);
        boolean boolean45 = com.operations.Matrix.MatrixUtils.isSquare(matrix44);
        com.operations.Matrix.Matrix matrix46 = com.operations.Matrix.MatrixOperations.multiply(matrix33, matrix44);
        double[][] doubleArray47 = matrix44.getData();
        com.operations.Matrix.Matrix matrix48 = new com.operations.Matrix.Matrix(doubleArray47);
        com.operations.Matrix.Matrix matrix49 = com.operations.Matrix.MatrixOperations.transpose(matrix48);
        boolean boolean50 = com.operations.Matrix.MatrixUtils.isSymmetric(matrix48);
        com.operations.Matrix.Matrix matrix52 = com.operations.Matrix.MatrixOperations.scalarMultiply(matrix48, (double) 2);
        double[] doubleArray55 = new double[] { 10, 'a' };
        double[] doubleArray58 = new double[] { 10, 'a' };
        double[][] doubleArray59 = new double[][] { doubleArray55, doubleArray58 };
        com.operations.Matrix.Matrix matrix60 = new com.operations.Matrix.Matrix(doubleArray59);
        com.operations.Matrix.Matrix matrix61 = new com.operations.Matrix.Matrix(doubleArray59);
        com.operations.Matrix.Matrix[] matrixArray62 = com.operations.Matrix.MatrixDecompositions.luDecomposition(matrix61);
        com.operations.Matrix.Matrix matrix65 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0, (double) 100L);
        com.operations.Matrix.Matrix matrix66 = com.operations.Matrix.MatrixOperations.subtract(matrix61, matrix65);
        com.operations.Matrix.Matrix matrix67 = com.operations.Matrix.MatrixOperations.multiply(matrix48, matrix65);
        com.operations.Matrix.Matrix matrix68 = com.operations.Matrix.MatrixOperations.subtract(matrix2, matrix65);
        matrix65.print();
        com.operations.Matrix.Matrix matrix70 = com.operations.Matrix.MatrixOperations.transpose(matrix65);
        com.operations.Matrix.Matrix matrix71 = com.operations.Matrix.MatrixOperations.transpose(matrix70);
        org.junit.Assert.assertNotNull(matrix2);
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + 364.0054944640259d + "'", double3 == 364.0054944640259d);
        org.junit.Assert.assertNotNull(matrix6);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertArrayEquals(doubleArray9, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertArrayEquals(doubleArray12, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 2 + "'", int15 == 2);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 2 + "'", int16 == 2);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 2 + "'", int17 == 2);
        org.junit.Assert.assertNotNull(matrixArray18);
        org.junit.Assert.assertNotNull(matrix19);
        org.junit.Assert.assertNotNull(matrix21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertArrayEquals(doubleArray26, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertArrayEquals(doubleArray29, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertArrayEquals(doubleArray38, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertArrayEquals(doubleArray41, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertNotNull(matrix46);
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertNotNull(matrix49);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(matrix52);
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertArrayEquals(doubleArray55, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray58);
        org.junit.Assert.assertArrayEquals(doubleArray58, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray59);
        org.junit.Assert.assertNotNull(matrixArray62);
        org.junit.Assert.assertNotNull(matrix65);
        org.junit.Assert.assertNotNull(matrix66);
        org.junit.Assert.assertNotNull(matrix67);
        org.junit.Assert.assertNotNull(matrix68);
        org.junit.Assert.assertNotNull(matrix70);
        org.junit.Assert.assertNotNull(matrix71);
    }

    @Test
    public void test4612() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4612");
        com.operations.Matrix.Matrix matrix2 = com.operations.Matrix.MatrixTransformations.project2D((double) ' ', 0.0d);
        double[] doubleArray5 = new double[] { 10, 'a' };
        double[] doubleArray8 = new double[] { 10, 'a' };
        double[][] doubleArray9 = new double[][] { doubleArray5, doubleArray8 };
        com.operations.Matrix.Matrix matrix10 = new com.operations.Matrix.Matrix(doubleArray9);
        int int11 = matrix10.getCols();
        boolean boolean12 = com.operations.Matrix.MatrixUtils.isSquare(matrix10);
        com.operations.Matrix.Matrix matrix13 = com.operations.Matrix.MatrixOperations.transpose(matrix10);
        int int14 = matrix13.getRows();
        com.operations.Matrix.Matrix matrix17 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0L, (double) (byte) 10);
        double[] doubleArray20 = new double[] { 10, 'a' };
        double[] doubleArray23 = new double[] { 10, 'a' };
        double[][] doubleArray24 = new double[][] { doubleArray20, doubleArray23 };
        com.operations.Matrix.Matrix matrix25 = new com.operations.Matrix.Matrix(doubleArray24);
        int int26 = matrix25.getCols();
        int int27 = matrix25.getCols();
        int int28 = matrix25.getCols();
        com.operations.Matrix.Matrix[] matrixArray29 = com.operations.Matrix.MatrixDecompositions.luDecomposition(matrix25);
        com.operations.Matrix.Matrix matrix30 = com.operations.Matrix.MatrixOperations.multiply(matrix17, matrix25);
        com.operations.Matrix.Matrix matrix32 = com.operations.Matrix.MatrixTransformations.rotate2D((double) (short) 100);
        boolean boolean34 = com.operations.Matrix.MatrixUtils.compare(matrix25, matrix32, (double) (byte) 0);
        com.operations.Matrix.Matrix matrix35 = com.operations.Matrix.MatrixOperations.multiply(matrix13, matrix25);
        com.operations.Matrix.Matrix matrix36 = com.operations.Matrix.MatrixOperations.add(matrix2, matrix25);
        com.operations.Matrix.Matrix matrix37 = com.operations.Matrix.MatrixOperations.transpose(matrix2);
        com.operations.Matrix.Matrix matrix40 = com.operations.Matrix.MatrixTransformations.scale2D((double) (byte) 100, 350.0d);
        double double41 = com.operations.Matrix.MatrixUtils.frobeniusNorm(matrix40);
        int int42 = matrix40.getCols();
        com.operations.Matrix.Matrix matrix43 = com.operations.Matrix.MatrixOperations.multiply(matrix2, matrix40);
        int int44 = matrix40.getRows();
        double[][] doubleArray45 = matrix40.getData();
        matrix40.print();
        double double47 = com.operations.Matrix.MatrixUtils.frobeniusNorm(matrix40);
        org.junit.Assert.assertNotNull(matrix2);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertArrayEquals(doubleArray5, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertArrayEquals(doubleArray8, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 2 + "'", int11 == 2);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(matrix13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 2 + "'", int14 == 2);
        org.junit.Assert.assertNotNull(matrix17);
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertArrayEquals(doubleArray20, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertArrayEquals(doubleArray23, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 2 + "'", int26 == 2);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 2 + "'", int27 == 2);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 2 + "'", int28 == 2);
        org.junit.Assert.assertNotNull(matrixArray29);
        org.junit.Assert.assertNotNull(matrix30);
        org.junit.Assert.assertNotNull(matrix32);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(matrix35);
        org.junit.Assert.assertNotNull(matrix36);
        org.junit.Assert.assertNotNull(matrix37);
        org.junit.Assert.assertNotNull(matrix40);
        org.junit.Assert.assertTrue("'" + double41 + "' != '" + 364.0054944640259d + "'", double41 == 364.0054944640259d);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 2 + "'", int42 == 2);
        org.junit.Assert.assertNotNull(matrix43);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 2 + "'", int44 == 2);
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertTrue("'" + double47 + "' != '" + 364.0054944640259d + "'", double47 == 364.0054944640259d);
    }

    @Test
    public void test4613() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4613");
        com.operations.Matrix.Matrix matrix1 = com.operations.Matrix.MatrixTransformations.rotate2D((double) 1.0f);
        com.operations.Matrix.Matrix matrix4 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0L, (double) (byte) 10);
        int int5 = matrix4.getRows();
        com.operations.Matrix.Matrix matrix7 = com.operations.Matrix.MatrixOperations.scalarMultiply(matrix4, (double) 2);
        boolean boolean9 = com.operations.Matrix.MatrixUtils.compare(matrix1, matrix7, (double) 10.0f);
        double[] doubleArray12 = new double[] { 10, 'a' };
        double[] doubleArray15 = new double[] { 10, 'a' };
        double[][] doubleArray16 = new double[][] { doubleArray12, doubleArray15 };
        com.operations.Matrix.Matrix matrix17 = new com.operations.Matrix.Matrix(doubleArray16);
        com.operations.Matrix.Matrix matrix18 = new com.operations.Matrix.Matrix(doubleArray16);
        boolean boolean19 = com.operations.Matrix.MatrixUtils.isSquare(matrix18);
        double[] doubleArray22 = new double[] { 10, 'a' };
        double[] doubleArray25 = new double[] { 10, 'a' };
        double[][] doubleArray26 = new double[][] { doubleArray22, doubleArray25 };
        com.operations.Matrix.Matrix matrix27 = new com.operations.Matrix.Matrix(doubleArray26);
        int int28 = matrix27.getCols();
        int int29 = matrix27.getCols();
        matrix27.print();
        double[] doubleArray33 = new double[] { 10, 'a' };
        double[] doubleArray36 = new double[] { 10, 'a' };
        double[][] doubleArray37 = new double[][] { doubleArray33, doubleArray36 };
        com.operations.Matrix.Matrix matrix38 = new com.operations.Matrix.Matrix(doubleArray37);
        boolean boolean40 = com.operations.Matrix.MatrixUtils.compare(matrix27, matrix38, (double) (-1));
        com.operations.Matrix.Matrix matrix41 = com.operations.Matrix.MatrixOperations.subtract(matrix18, matrix38);
        com.operations.Matrix.Matrix matrix43 = com.operations.Matrix.MatrixOperations.scalarMultiply(matrix18, (double) 0.0f);
        com.operations.Matrix.Matrix matrix44 = com.operations.Matrix.MatrixOperations.transpose(matrix18);
        com.operations.Matrix.Matrix matrix45 = com.operations.Matrix.MatrixOperations.transpose(matrix44);
        com.operations.Matrix.Matrix matrix46 = com.operations.Matrix.MatrixOperations.multiply(matrix7, matrix45);
        com.operations.Matrix.Matrix matrix48 = com.operations.Matrix.MatrixTransformations.rotate2D((double) (short) 100);
        double[] doubleArray51 = new double[] { 137.90576492663388d, (byte) -1 };
        double[] doubleArray52 = com.operations.Matrix.MatrixSolver.solveGaussian(matrix48, doubleArray51);
        com.operations.Matrix.Matrix matrix55 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0L, (double) (byte) 10);
        double[] doubleArray58 = new double[] { 10, 'a' };
        double[] doubleArray61 = new double[] { 10, 'a' };
        double[][] doubleArray62 = new double[][] { doubleArray58, doubleArray61 };
        com.operations.Matrix.Matrix matrix63 = new com.operations.Matrix.Matrix(doubleArray62);
        int int64 = matrix63.getCols();
        int int65 = matrix63.getCols();
        int int66 = matrix63.getCols();
        com.operations.Matrix.Matrix[] matrixArray67 = com.operations.Matrix.MatrixDecompositions.luDecomposition(matrix63);
        com.operations.Matrix.Matrix matrix68 = com.operations.Matrix.MatrixOperations.multiply(matrix55, matrix63);
        boolean boolean70 = com.operations.Matrix.MatrixUtils.compare(matrix48, matrix55, (double) (-1L));
        double[][] doubleArray71 = matrix48.getData();
        com.operations.Matrix.Matrix matrix74 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0L, (double) 10L);
        boolean boolean76 = com.operations.Matrix.MatrixUtils.compare(matrix48, matrix74, 146.4308710620817d);
        com.operations.Matrix.Matrix matrix77 = com.operations.Matrix.MatrixOperations.subtract(matrix45, matrix74);
        com.operations.Matrix.Matrix matrix78 = com.operations.Matrix.MatrixOperations.transpose(matrix45);
        // The following exception was thrown during execution in test generation
        try {
            double double81 = matrix78.getValue(32, 32);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(matrix1);
        org.junit.Assert.assertNotNull(matrix4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 2 + "'", int5 == 2);
        org.junit.Assert.assertNotNull(matrix7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertArrayEquals(doubleArray12, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertArrayEquals(doubleArray15, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertArrayEquals(doubleArray22, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertArrayEquals(doubleArray25, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 2 + "'", int28 == 2);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 2 + "'", int29 == 2);
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertArrayEquals(doubleArray33, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertArrayEquals(doubleArray36, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(matrix41);
        org.junit.Assert.assertNotNull(matrix43);
        org.junit.Assert.assertNotNull(matrix44);
        org.junit.Assert.assertNotNull(matrix45);
        org.junit.Assert.assertNotNull(matrix46);
        org.junit.Assert.assertNotNull(matrix48);
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertArrayEquals(doubleArray51, new double[] { 137.90576492663388d, (-1.0d) }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertArrayEquals(doubleArray52, new double[] { (-24.931892522286255d), (-135.63701830716116d) }, 1.0E-15);
        org.junit.Assert.assertNotNull(matrix55);
        org.junit.Assert.assertNotNull(doubleArray58);
        org.junit.Assert.assertArrayEquals(doubleArray58, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray61);
        org.junit.Assert.assertArrayEquals(doubleArray61, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray62);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 2 + "'", int64 == 2);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 2 + "'", int65 == 2);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 2 + "'", int66 == 2);
        org.junit.Assert.assertNotNull(matrixArray67);
        org.junit.Assert.assertNotNull(matrix68);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertNotNull(doubleArray71);
        org.junit.Assert.assertNotNull(matrix74);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + true + "'", boolean76 == true);
        org.junit.Assert.assertNotNull(matrix77);
        org.junit.Assert.assertNotNull(matrix78);
    }

    @Test
    public void test4614() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4614");
        com.operations.Matrix.Matrix matrix2 = new com.operations.Matrix.Matrix(100, 100);
        int int3 = matrix2.getCols();
        int int4 = matrix2.getCols();
        java.lang.Class<?> wildcardClass5 = matrix2.getClass();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 100 + "'", int3 == 100);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 100 + "'", int4 == 100);
        org.junit.Assert.assertNotNull(wildcardClass5);
    }

    @Test
    public void test4615() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4615");
        com.operations.Matrix.Matrix matrix2 = com.operations.Matrix.MatrixTransformations.project2D(0.984807753012208d, 10.0d);
        com.operations.Matrix.Matrix[] matrixArray3 = com.operations.Matrix.MatrixDecompositions.luDecomposition(matrix2);
        double[][] doubleArray4 = matrix2.getData();
        com.operations.Matrix.Matrix matrix5 = com.operations.Matrix.MatrixOperations.transpose(matrix2);
        com.operations.Matrix.Matrix matrix6 = com.operations.Matrix.MatrixDecompositions.choleskyDecomposition(matrix5);
        org.junit.Assert.assertNotNull(matrix2);
        org.junit.Assert.assertNotNull(matrixArray3);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertNotNull(matrix5);
        org.junit.Assert.assertNotNull(matrix6);
    }

    @Test
    public void test4616() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4616");
        com.operations.Matrix.Matrix matrix2 = com.operations.Matrix.MatrixTransformations.scale2D(576.1705606798018d, 1.472965077159101d);
        org.junit.Assert.assertNotNull(matrix2);
    }

    @Test
    public void test4617() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4617");
        com.operations.Matrix.Matrix matrix1 = com.operations.Matrix.MatrixTransformations.rotate2D(350.0d);
        com.operations.Matrix.Matrix matrix2 = com.operations.Matrix.MatrixDecompositions.choleskyDecomposition(matrix1);
        com.operations.Matrix.Matrix matrix4 = com.operations.Matrix.MatrixTransformations.rotate2D((double) 1.0f);
        com.operations.Matrix.Matrix matrix7 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0L, (double) (byte) 10);
        int int8 = matrix7.getRows();
        com.operations.Matrix.Matrix matrix10 = com.operations.Matrix.MatrixOperations.scalarMultiply(matrix7, (double) 2);
        double double11 = com.operations.Matrix.MatrixUtils.frobeniusNorm(matrix7);
        com.operations.Matrix.Matrix matrix14 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0L, (double) (byte) 10);
        int int15 = matrix14.getRows();
        com.operations.Matrix.Matrix matrix17 = com.operations.Matrix.MatrixOperations.scalarMultiply(matrix14, (double) 2);
        com.operations.Matrix.Matrix matrix18 = com.operations.Matrix.MatrixOperations.subtract(matrix7, matrix17);
        com.operations.Matrix.Matrix matrix19 = com.operations.Matrix.MatrixOperations.add(matrix4, matrix17);
        matrix4.print();
        com.operations.Matrix.Matrix matrix21 = com.operations.Matrix.MatrixDecompositions.choleskyDecomposition(matrix4);
        com.operations.Matrix.Matrix matrix22 = com.operations.Matrix.MatrixOperations.subtract(matrix2, matrix21);
        com.operations.Matrix.Matrix matrix28 = com.operations.Matrix.MatrixUtils.generateRandomMatrix((int) '4', (int) ' ', (int) (byte) 0, 1, (long) '4');
        // The following exception was thrown during execution in test generation
        try {
            com.operations.Matrix.Matrix matrix29 = com.operations.Matrix.MatrixOperations.multiply(matrix22, matrix28);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Matrix A's columns must match Matrix B's rows for multiplication.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(matrix1);
        org.junit.Assert.assertNotNull(matrix2);
        org.junit.Assert.assertNotNull(matrix4);
        org.junit.Assert.assertNotNull(matrix7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 2 + "'", int8 == 2);
        org.junit.Assert.assertNotNull(matrix10);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 10.0d + "'", double11 == 10.0d);
        org.junit.Assert.assertNotNull(matrix14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 2 + "'", int15 == 2);
        org.junit.Assert.assertNotNull(matrix17);
        org.junit.Assert.assertNotNull(matrix18);
        org.junit.Assert.assertNotNull(matrix19);
        org.junit.Assert.assertNotNull(matrix21);
        org.junit.Assert.assertNotNull(matrix22);
        org.junit.Assert.assertNotNull(matrix28);
    }

    @Test
    public void test4618() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4618");
        double[] doubleArray2 = new double[] { 10, 'a' };
        double[] doubleArray5 = new double[] { 10, 'a' };
        double[][] doubleArray6 = new double[][] { doubleArray2, doubleArray5 };
        com.operations.Matrix.Matrix matrix7 = new com.operations.Matrix.Matrix(doubleArray6);
        int int8 = matrix7.getCols();
        int int9 = matrix7.getCols();
        int int10 = matrix7.getCols();
        com.operations.Matrix.Matrix matrix16 = com.operations.Matrix.MatrixUtils.generateRandomMatrix(100, (int) (byte) 1, (int) '#', (int) '#', 1L);
        double double19 = matrix16.getValue((int) '4', 0);
        double double20 = com.operations.Matrix.MatrixUtils.frobeniusNorm(matrix16);
        boolean boolean21 = com.operations.Matrix.MatrixUtils.isSquare(matrix16);
        boolean boolean23 = com.operations.Matrix.MatrixUtils.compare(matrix7, matrix16, (double) 100L);
        com.operations.Matrix.Matrix matrix24 = com.operations.Matrix.MatrixDecompositions.choleskyDecomposition(matrix7);
        double[] doubleArray27 = new double[] { 10, 'a' };
        double[] doubleArray30 = new double[] { 10, 'a' };
        double[][] doubleArray31 = new double[][] { doubleArray27, doubleArray30 };
        com.operations.Matrix.Matrix matrix32 = new com.operations.Matrix.Matrix(doubleArray31);
        int int33 = matrix32.getCols();
        int int34 = matrix32.getCols();
        int int35 = matrix32.getCols();
        com.operations.Matrix.Matrix matrix37 = com.operations.Matrix.MatrixOperations.scalarMultiply(matrix32, (double) 0.0f);
        boolean boolean39 = com.operations.Matrix.MatrixUtils.compare(matrix24, matrix32, (double) '4');
        com.operations.Matrix.Matrix matrix42 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0L, (double) 10L);
        double[][] doubleArray43 = matrix42.getData();
        com.operations.Matrix.Matrix matrix44 = com.operations.Matrix.MatrixOperations.add(matrix32, matrix42);
        com.operations.Matrix.Matrix matrix46 = com.operations.Matrix.MatrixTransformations.rotate2D((double) '4');
        double[] doubleArray49 = new double[] { 10, 'a' };
        double[] doubleArray52 = new double[] { 10, 'a' };
        double[][] doubleArray53 = new double[][] { doubleArray49, doubleArray52 };
        com.operations.Matrix.Matrix matrix54 = new com.operations.Matrix.Matrix(doubleArray53);
        com.operations.Matrix.Matrix matrix55 = new com.operations.Matrix.Matrix(doubleArray53);
        com.operations.Matrix.Matrix matrix57 = com.operations.Matrix.MatrixTransformations.rotate2D((double) (short) 100);
        double[] doubleArray60 = new double[] { 137.90576492663388d, (byte) -1 };
        double[] doubleArray61 = com.operations.Matrix.MatrixSolver.solveGaussian(matrix57, doubleArray60);
        com.operations.Matrix.Matrix matrix62 = com.operations.Matrix.MatrixOperations.add(matrix55, matrix57);
        boolean boolean63 = com.operations.Matrix.MatrixUtils.isSymmetric(matrix62);
        boolean boolean65 = com.operations.Matrix.MatrixUtils.compare(matrix46, matrix62, 364.0054944640259d);
        com.operations.Matrix.Matrix matrix68 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0L, (double) (byte) 10);
        int int69 = matrix68.getRows();
        com.operations.Matrix.Matrix matrix71 = com.operations.Matrix.MatrixOperations.scalarMultiply(matrix68, (double) 2);
        matrix68.print();
        com.operations.Matrix.Matrix matrix73 = com.operations.Matrix.MatrixOperations.multiply(matrix62, matrix68);
        com.operations.Matrix.Matrix matrix74 = com.operations.Matrix.MatrixOperations.multiply(matrix42, matrix62);
        double[][] doubleArray75 = matrix62.getData();
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertArrayEquals(doubleArray2, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertArrayEquals(doubleArray5, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 2 + "'", int8 == 2);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 2 + "'", int9 == 2);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 2 + "'", int10 == 2);
        org.junit.Assert.assertNotNull(matrix16);
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 35.0d + "'", double19 == 35.0d);
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 350.0d + "'", double20 == 350.0d);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(matrix24);
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertArrayEquals(doubleArray27, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertArrayEquals(doubleArray30, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 2 + "'", int33 == 2);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 2 + "'", int34 == 2);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 2 + "'", int35 == 2);
        org.junit.Assert.assertNotNull(matrix37);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(matrix42);
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertNotNull(matrix44);
        org.junit.Assert.assertNotNull(matrix46);
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertArrayEquals(doubleArray49, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertArrayEquals(doubleArray52, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertNotNull(matrix57);
        org.junit.Assert.assertNotNull(doubleArray60);
        org.junit.Assert.assertArrayEquals(doubleArray60, new double[] { 137.90576492663388d, (-1.0d) }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray61);
        org.junit.Assert.assertArrayEquals(doubleArray61, new double[] { (-24.931892522286255d), (-135.63701830716116d) }, 1.0E-15);
        org.junit.Assert.assertNotNull(matrix62);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + true + "'", boolean65 == true);
        org.junit.Assert.assertNotNull(matrix68);
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 2 + "'", int69 == 2);
        org.junit.Assert.assertNotNull(matrix71);
        org.junit.Assert.assertNotNull(matrix73);
        org.junit.Assert.assertNotNull(matrix74);
        org.junit.Assert.assertNotNull(doubleArray75);
    }

    @Test
    public void test4619() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4619");
        double[] doubleArray2 = new double[] { 10, 'a' };
        double[] doubleArray5 = new double[] { 10, 'a' };
        double[][] doubleArray6 = new double[][] { doubleArray2, doubleArray5 };
        com.operations.Matrix.Matrix matrix7 = new com.operations.Matrix.Matrix(doubleArray6);
        int int8 = matrix7.getCols();
        int int9 = matrix7.getCols();
        matrix7.print();
        double[] doubleArray13 = new double[] { 10, 'a' };
        double[] doubleArray16 = new double[] { 10, 'a' };
        double[][] doubleArray17 = new double[][] { doubleArray13, doubleArray16 };
        com.operations.Matrix.Matrix matrix18 = new com.operations.Matrix.Matrix(doubleArray17);
        boolean boolean20 = com.operations.Matrix.MatrixUtils.compare(matrix7, matrix18, (double) (-1));
        boolean boolean21 = com.operations.Matrix.MatrixUtils.isSymmetric(matrix7);
        // The following exception was thrown during execution in test generation
        try {
            double double24 = matrix7.getValue((int) 'a', 0);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertArrayEquals(doubleArray2, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertArrayEquals(doubleArray5, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 2 + "'", int8 == 2);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 2 + "'", int9 == 2);
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertArrayEquals(doubleArray13, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertArrayEquals(doubleArray16, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
    }

    @Test
    public void test4620() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4620");
        // The following exception was thrown during execution in test generation
        try {
            com.operations.Matrix.Matrix matrix5 = com.operations.Matrix.MatrixUtils.generateRandomMatrix((int) (byte) -1, 32, (int) (short) 10, 0, 0L);
            org.junit.Assert.fail("Expected exception of type java.lang.NegativeArraySizeException; message: -1");
        } catch (java.lang.NegativeArraySizeException e) {
            // Expected exception.
        }
    }

    @Test
    public void test4621() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4621");
        com.operations.Matrix.Matrix matrix5 = com.operations.Matrix.MatrixUtils.generateRandomMatrix(10, 1, (int) (byte) 10, 35, 0L);
        com.operations.Matrix.Matrix matrix7 = com.operations.Matrix.MatrixTransformations.rotate2D(1.414213562373095d);
        com.operations.Matrix.Matrix matrix9 = com.operations.Matrix.MatrixOperations.scalarMultiply(matrix7, 21.023651153076518d);
        matrix7.print();
        boolean boolean12 = com.operations.Matrix.MatrixUtils.compare(matrix5, matrix7, (double) 1L);
        // The following exception was thrown during execution in test generation
        try {
            com.operations.Matrix.Matrix matrix13 = com.operations.Matrix.MatrixDecompositions.choleskyDecomposition(matrix5);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Matrix must be square for Cholesky decomposition.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(matrix5);
        org.junit.Assert.assertNotNull(matrix7);
        org.junit.Assert.assertNotNull(matrix9);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
    }

    @Test
    public void test4622() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4622");
        com.operations.Matrix.Matrix matrix5 = com.operations.Matrix.MatrixUtils.generateRandomMatrix(32, 97, (int) ' ', (int) (byte) 100, (long) (short) 1);
        int int6 = matrix5.getCols();
        org.junit.Assert.assertNotNull(matrix5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 97 + "'", int6 == 97);
    }

    @Test
    public void test4623() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4623");
        com.operations.Matrix.Matrix matrix4 = com.operations.Matrix.MatrixUtils.generateRandomMatrix(35, (int) '4', (int) 'a', (int) (short) 100);
        org.junit.Assert.assertNotNull(matrix4);
    }

    @Test
    public void test4624() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4624");
        double[] doubleArray2 = new double[] { 10, 'a' };
        double[] doubleArray5 = new double[] { 10, 'a' };
        double[][] doubleArray6 = new double[][] { doubleArray2, doubleArray5 };
        com.operations.Matrix.Matrix matrix7 = new com.operations.Matrix.Matrix(doubleArray6);
        int int8 = matrix7.getCols();
        int int9 = matrix7.getCols();
        int int10 = matrix7.getCols();
        com.operations.Matrix.Matrix matrix16 = com.operations.Matrix.MatrixUtils.generateRandomMatrix(100, (int) (byte) 1, (int) '#', (int) '#', 1L);
        double double19 = matrix16.getValue((int) '4', 0);
        double double20 = com.operations.Matrix.MatrixUtils.frobeniusNorm(matrix16);
        boolean boolean21 = com.operations.Matrix.MatrixUtils.isSquare(matrix16);
        boolean boolean23 = com.operations.Matrix.MatrixUtils.compare(matrix7, matrix16, (double) 100L);
        com.operations.Matrix.Matrix[] matrixArray24 = com.operations.Matrix.MatrixDecompositions.luDecomposition(matrix7);
        com.operations.Matrix.Matrix matrix25 = com.operations.Matrix.MatrixOperations.transpose(matrix7);
        // The following exception was thrown during execution in test generation
        try {
            double double28 = matrix7.getValue((int) '4', (int) (short) 1);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertArrayEquals(doubleArray2, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertArrayEquals(doubleArray5, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 2 + "'", int8 == 2);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 2 + "'", int9 == 2);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 2 + "'", int10 == 2);
        org.junit.Assert.assertNotNull(matrix16);
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 35.0d + "'", double19 == 35.0d);
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 350.0d + "'", double20 == 350.0d);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(matrixArray24);
        org.junit.Assert.assertNotNull(matrix25);
    }

    @Test
    public void test4625() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4625");
        com.operations.Matrix.Matrix matrix0 = null;
        com.operations.Matrix.Matrix matrix2 = com.operations.Matrix.MatrixTransformations.rotate2D(100.0d);
        int int3 = matrix2.getCols();
        com.operations.Matrix.Matrix matrix5 = com.operations.Matrix.MatrixOperations.scalarMultiply(matrix2, (double) ' ');
        com.operations.Matrix.Matrix matrix8 = com.operations.Matrix.MatrixTransformations.scale2D((double) 100.0f, (double) (byte) 1);
        com.operations.Matrix.Matrix matrix11 = com.operations.Matrix.MatrixTransformations.scale2D((double) 1.0f, (double) 1);
        com.operations.Matrix.Matrix matrix13 = com.operations.Matrix.MatrixTransformations.rotate2D((double) 1.0f);
        com.operations.Matrix.Matrix matrix16 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0L, (double) (byte) 10);
        int int17 = matrix16.getRows();
        com.operations.Matrix.Matrix matrix19 = com.operations.Matrix.MatrixOperations.scalarMultiply(matrix16, (double) 2);
        double double20 = com.operations.Matrix.MatrixUtils.frobeniusNorm(matrix16);
        com.operations.Matrix.Matrix matrix23 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0L, (double) (byte) 10);
        int int24 = matrix23.getRows();
        com.operations.Matrix.Matrix matrix26 = com.operations.Matrix.MatrixOperations.scalarMultiply(matrix23, (double) 2);
        com.operations.Matrix.Matrix matrix27 = com.operations.Matrix.MatrixOperations.subtract(matrix16, matrix26);
        com.operations.Matrix.Matrix matrix28 = com.operations.Matrix.MatrixOperations.add(matrix13, matrix26);
        boolean boolean30 = com.operations.Matrix.MatrixUtils.compare(matrix11, matrix13, (double) (byte) -1);
        com.operations.Matrix.Matrix matrix31 = com.operations.Matrix.MatrixOperations.transpose(matrix13);
        com.operations.Matrix.Matrix matrix34 = com.operations.Matrix.MatrixTransformations.project2D((double) 10L, 10.0d);
        com.operations.Matrix.Matrix matrix36 = com.operations.Matrix.MatrixTransformations.rotate2D((double) (short) 100);
        double[] doubleArray39 = new double[] { 137.90576492663388d, (byte) -1 };
        double[] doubleArray40 = com.operations.Matrix.MatrixSolver.solveGaussian(matrix36, doubleArray39);
        com.operations.Matrix.Matrix matrix43 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0L, (double) (byte) 10);
        double[] doubleArray46 = new double[] { 10, 'a' };
        double[] doubleArray49 = new double[] { 10, 'a' };
        double[][] doubleArray50 = new double[][] { doubleArray46, doubleArray49 };
        com.operations.Matrix.Matrix matrix51 = new com.operations.Matrix.Matrix(doubleArray50);
        int int52 = matrix51.getCols();
        int int53 = matrix51.getCols();
        int int54 = matrix51.getCols();
        com.operations.Matrix.Matrix[] matrixArray55 = com.operations.Matrix.MatrixDecompositions.luDecomposition(matrix51);
        com.operations.Matrix.Matrix matrix56 = com.operations.Matrix.MatrixOperations.multiply(matrix43, matrix51);
        boolean boolean58 = com.operations.Matrix.MatrixUtils.compare(matrix36, matrix43, (double) (-1L));
        double[][] doubleArray59 = matrix36.getData();
        com.operations.Matrix.Matrix matrix61 = com.operations.Matrix.MatrixTransformations.rotate2D((double) (short) 100);
        double[] doubleArray64 = new double[] { 137.90576492663388d, (byte) -1 };
        double[] doubleArray65 = com.operations.Matrix.MatrixSolver.solveGaussian(matrix61, doubleArray64);
        double[] doubleArray66 = com.operations.Matrix.MatrixSolver.solveGaussian(matrix36, doubleArray64);
        double[] doubleArray67 = com.operations.Matrix.MatrixSolver.solveGaussian(matrix34, doubleArray66);
        double[] doubleArray68 = com.operations.Matrix.MatrixSolver.solveGaussian(matrix13, doubleArray67);
        double[] doubleArray69 = com.operations.Matrix.MatrixSolver.solveGaussian(matrix8, doubleArray68);
        double[] doubleArray70 = com.operations.Matrix.MatrixSolver.solveGaussian(matrix2, doubleArray68);
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean72 = com.operations.Matrix.MatrixUtils.compare(matrix0, matrix2, 0.0d);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(matrix2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 2 + "'", int3 == 2);
        org.junit.Assert.assertNotNull(matrix5);
        org.junit.Assert.assertNotNull(matrix8);
        org.junit.Assert.assertNotNull(matrix11);
        org.junit.Assert.assertNotNull(matrix13);
        org.junit.Assert.assertNotNull(matrix16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 2 + "'", int17 == 2);
        org.junit.Assert.assertNotNull(matrix19);
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 10.0d + "'", double20 == 10.0d);
        org.junit.Assert.assertNotNull(matrix23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 2 + "'", int24 == 2);
        org.junit.Assert.assertNotNull(matrix26);
        org.junit.Assert.assertNotNull(matrix27);
        org.junit.Assert.assertNotNull(matrix28);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(matrix31);
        org.junit.Assert.assertNotNull(matrix34);
        org.junit.Assert.assertNotNull(matrix36);
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertArrayEquals(doubleArray39, new double[] { 137.90576492663388d, (-1.0d) }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertArrayEquals(doubleArray40, new double[] { (-24.931892522286255d), (-135.63701830716116d) }, 1.0E-15);
        org.junit.Assert.assertNotNull(matrix43);
        org.junit.Assert.assertNotNull(doubleArray46);
        org.junit.Assert.assertArrayEquals(doubleArray46, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertArrayEquals(doubleArray49, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 2 + "'", int52 == 2);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 2 + "'", int53 == 2);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 2 + "'", int54 == 2);
        org.junit.Assert.assertNotNull(matrixArray55);
        org.junit.Assert.assertNotNull(matrix56);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(doubleArray59);
        org.junit.Assert.assertNotNull(matrix61);
        org.junit.Assert.assertNotNull(doubleArray64);
        org.junit.Assert.assertArrayEquals(doubleArray64, new double[] { 137.90576492663388d, (-1.0d) }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray65);
        org.junit.Assert.assertArrayEquals(doubleArray65, new double[] { (-24.931892522286255d), (-135.63701830716116d) }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray66);
        org.junit.Assert.assertArrayEquals(doubleArray66, new double[] { (-24.931892522286255d), (-135.63701830716116d) }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray67);
        org.junit.Assert.assertArrayEquals(doubleArray67, new double[] { (-2.4931892522286256d), (-13.563701830716116d) }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray68);
        org.junit.Assert.assertArrayEquals(doubleArray68, new double[] { (-2.7295287645732618d), (-13.518123861075072d) }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray69);
        org.junit.Assert.assertArrayEquals(doubleArray69, new double[] { (-0.027295287645732618d), (-13.518123861075072d) }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray70);
        org.junit.Assert.assertArrayEquals(doubleArray70, new double[] { (-12.83877548870844d), 5.035458663373116d }, 1.0E-15);
    }

    @Test
    public void test4626() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4626");
        com.operations.Matrix.Matrix matrix2 = com.operations.Matrix.MatrixTransformations.project2D(138.5659917737053d, 146.46842663181715d);
        org.junit.Assert.assertNotNull(matrix2);
    }

    @Test
    public void test4627() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4627");
        double[] doubleArray2 = new double[] { 10, 'a' };
        double[] doubleArray5 = new double[] { 10, 'a' };
        double[][] doubleArray6 = new double[][] { doubleArray2, doubleArray5 };
        com.operations.Matrix.Matrix matrix7 = new com.operations.Matrix.Matrix(doubleArray6);
        com.operations.Matrix.Matrix matrix8 = com.operations.Matrix.MatrixOperations.transpose(matrix7);
        com.operations.Matrix.Matrix matrix11 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0L, (double) (byte) 10);
        int int12 = matrix11.getRows();
        com.operations.Matrix.Matrix matrix18 = com.operations.Matrix.MatrixUtils.generateRandomMatrix(100, (int) (byte) 1, (int) '#', (int) '#', 1L);
        boolean boolean20 = com.operations.Matrix.MatrixUtils.compare(matrix11, matrix18, (double) 1.0f);
        com.operations.Matrix.Matrix matrix22 = com.operations.Matrix.MatrixOperations.scalarMultiply(matrix11, (double) 1L);
        matrix11.print();
        com.operations.Matrix.Matrix matrix24 = com.operations.Matrix.MatrixOperations.multiply(matrix8, matrix11);
        matrix24.print();
        double double26 = com.operations.Matrix.MatrixUtils.frobeniusNorm(matrix24);
        com.operations.Matrix.Matrix matrix29 = com.operations.Matrix.MatrixTransformations.scale2D(41.14922324710797d, 12.751772028997056d);
        com.operations.Matrix.Matrix matrix30 = com.operations.Matrix.MatrixOperations.multiply(matrix24, matrix29);
        com.operations.Matrix.Matrix[] matrixArray31 = com.operations.Matrix.MatrixDecompositions.luDecomposition(matrix29);
        com.operations.Matrix.Matrix matrix33 = com.operations.Matrix.MatrixOperations.scalarMultiply(matrix29, 11.489125293076057d);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertArrayEquals(doubleArray2, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertArrayEquals(doubleArray5, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertNotNull(matrix8);
        org.junit.Assert.assertNotNull(matrix11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 2 + "'", int12 == 2);
        org.junit.Assert.assertNotNull(matrix18);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(matrix22);
        org.junit.Assert.assertNotNull(matrix24);
        org.junit.Assert.assertTrue("'" + double26 + "' != '" + 975.1410154434076d + "'", double26 == 975.1410154434076d);
        org.junit.Assert.assertNotNull(matrix29);
        org.junit.Assert.assertNotNull(matrix30);
        org.junit.Assert.assertNotNull(matrixArray31);
        org.junit.Assert.assertNotNull(matrix33);
    }

    @Test
    public void test4628() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4628");
        com.operations.Matrix.Matrix matrix2 = com.operations.Matrix.MatrixTransformations.project2D((double) 10.0f, 1950.2820308868152d);
        org.junit.Assert.assertNotNull(matrix2);
    }

    @Test
    public void test4629() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4629");
        // The following exception was thrown during execution in test generation
        try {
            com.operations.Matrix.Matrix matrix4 = com.operations.Matrix.MatrixUtils.generateRandomMatrix((int) (byte) -1, (int) (short) 100, (int) (byte) 100, 35);
            org.junit.Assert.fail("Expected exception of type java.lang.NegativeArraySizeException; message: -1");
        } catch (java.lang.NegativeArraySizeException e) {
            // Expected exception.
        }
    }

    @Test
    public void test4630() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4630");
        com.operations.Matrix.Matrix matrix1 = com.operations.Matrix.MatrixTransformations.rotate2D(350.0d);
        com.operations.Matrix.Matrix matrix3 = com.operations.Matrix.MatrixTransformations.rotate2D((double) (short) 100);
        double[] doubleArray6 = new double[] { 137.90576492663388d, (byte) -1 };
        double[] doubleArray7 = com.operations.Matrix.MatrixSolver.solveGaussian(matrix3, doubleArray6);
        double[] doubleArray8 = com.operations.Matrix.MatrixSolver.solveGaussian(matrix1, doubleArray7);
        com.operations.Matrix.Matrix matrix11 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0L, (double) (byte) 10);
        double[] doubleArray14 = new double[] { 10, 'a' };
        double[] doubleArray17 = new double[] { 10, 'a' };
        double[][] doubleArray18 = new double[][] { doubleArray14, doubleArray17 };
        com.operations.Matrix.Matrix matrix19 = new com.operations.Matrix.Matrix(doubleArray18);
        int int20 = matrix19.getCols();
        int int21 = matrix19.getCols();
        int int22 = matrix19.getCols();
        com.operations.Matrix.Matrix[] matrixArray23 = com.operations.Matrix.MatrixDecompositions.luDecomposition(matrix19);
        com.operations.Matrix.Matrix matrix24 = com.operations.Matrix.MatrixOperations.multiply(matrix11, matrix19);
        com.operations.Matrix.Matrix matrix26 = com.operations.Matrix.MatrixTransformations.rotate2D((double) (short) 100);
        boolean boolean28 = com.operations.Matrix.MatrixUtils.compare(matrix19, matrix26, (double) (byte) 0);
        double[] doubleArray31 = new double[] { 10, 'a' };
        double[] doubleArray34 = new double[] { 10, 'a' };
        double[][] doubleArray35 = new double[][] { doubleArray31, doubleArray34 };
        com.operations.Matrix.Matrix matrix36 = new com.operations.Matrix.Matrix(doubleArray35);
        com.operations.Matrix.Matrix matrix37 = new com.operations.Matrix.Matrix(doubleArray35);
        com.operations.Matrix.Matrix matrix38 = new com.operations.Matrix.Matrix(doubleArray35);
        boolean boolean40 = com.operations.Matrix.MatrixUtils.compare(matrix19, matrix38, (double) (-1));
        double[] doubleArray43 = new double[] { 10, 'a' };
        double[] doubleArray46 = new double[] { 10, 'a' };
        double[][] doubleArray47 = new double[][] { doubleArray43, doubleArray46 };
        com.operations.Matrix.Matrix matrix48 = new com.operations.Matrix.Matrix(doubleArray47);
        com.operations.Matrix.Matrix matrix49 = new com.operations.Matrix.Matrix(doubleArray47);
        boolean boolean50 = com.operations.Matrix.MatrixUtils.isSquare(matrix49);
        com.operations.Matrix.Matrix matrix51 = com.operations.Matrix.MatrixOperations.multiply(matrix38, matrix49);
        double[][] doubleArray52 = matrix49.getData();
        com.operations.Matrix.Matrix matrix53 = new com.operations.Matrix.Matrix(doubleArray52);
        com.operations.Matrix.Matrix matrix54 = new com.operations.Matrix.Matrix(doubleArray52);
        boolean boolean55 = com.operations.Matrix.MatrixUtils.isSymmetric(matrix54);
        com.operations.Matrix.Matrix matrix56 = com.operations.Matrix.MatrixOperations.subtract(matrix1, matrix54);
        int int57 = matrix1.getRows();
        int int58 = matrix1.getRows();
        org.junit.Assert.assertNotNull(matrix1);
        org.junit.Assert.assertNotNull(matrix3);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertArrayEquals(doubleArray6, new double[] { 137.90576492663388d, (-1.0d) }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertArrayEquals(doubleArray7, new double[] { (-24.931892522286255d), (-135.63701830716116d) }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertArrayEquals(doubleArray8, new double[] { (-0.9999999999999858d), (-137.90576492663388d) }, 1.0E-15);
        org.junit.Assert.assertNotNull(matrix11);
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertArrayEquals(doubleArray14, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertArrayEquals(doubleArray17, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 2 + "'", int20 == 2);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 2 + "'", int21 == 2);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 2 + "'", int22 == 2);
        org.junit.Assert.assertNotNull(matrixArray23);
        org.junit.Assert.assertNotNull(matrix24);
        org.junit.Assert.assertNotNull(matrix26);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertArrayEquals(doubleArray31, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertArrayEquals(doubleArray34, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertArrayEquals(doubleArray43, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray46);
        org.junit.Assert.assertArrayEquals(doubleArray46, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
        org.junit.Assert.assertNotNull(matrix51);
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNotNull(matrix56);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 2 + "'", int57 == 2);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 2 + "'", int58 == 2);
    }

    @Test
    public void test4631() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4631");
        com.operations.Matrix.Matrix matrix2 = new com.operations.Matrix.Matrix(10, 0);
        matrix2.print();
        boolean boolean4 = com.operations.Matrix.MatrixUtils.isSquare(matrix2);
        int int5 = matrix2.getCols();
        com.operations.Matrix.Matrix matrix8 = new com.operations.Matrix.Matrix(97, (int) (short) 100);
        com.operations.Matrix.Matrix matrix10 = com.operations.Matrix.MatrixOperations.scalarMultiply(matrix8, 22.360679774997898d);
        // The following exception was thrown during execution in test generation
        try {
            com.operations.Matrix.Matrix matrix11 = com.operations.Matrix.MatrixOperations.subtract(matrix2, matrix8);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Matrices must have the same dimensions for subtraction.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(matrix10);
    }

    @Test
    public void test4632() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4632");
        com.operations.Matrix.Matrix matrix0 = null;
        // The following exception was thrown during execution in test generation
        try {
            com.operations.Matrix.Matrix matrix2 = com.operations.Matrix.MatrixOperations.scalarMultiply(matrix0, (double) (short) 0);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test4633() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4633");
        com.operations.Matrix.Matrix matrix1 = com.operations.Matrix.MatrixTransformations.rotate2D(108225.86824260534d);
        org.junit.Assert.assertNotNull(matrix1);
    }

    @Test
    public void test4634() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4634");
        com.operations.Matrix.Matrix matrix1 = com.operations.Matrix.MatrixTransformations.rotate2D(137.90576492663385d);
        int int2 = matrix1.getRows();
        org.junit.Assert.assertNotNull(matrix1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 2 + "'", int2 == 2);
    }

    @Test
    public void test4635() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4635");
        com.operations.Matrix.Matrix matrix2 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0L, (double) (byte) 10);
        double[] doubleArray5 = new double[] { 10, 'a' };
        double[] doubleArray8 = new double[] { 10, 'a' };
        double[][] doubleArray9 = new double[][] { doubleArray5, doubleArray8 };
        com.operations.Matrix.Matrix matrix10 = new com.operations.Matrix.Matrix(doubleArray9);
        int int11 = matrix10.getCols();
        int int12 = matrix10.getCols();
        int int13 = matrix10.getCols();
        com.operations.Matrix.Matrix[] matrixArray14 = com.operations.Matrix.MatrixDecompositions.luDecomposition(matrix10);
        com.operations.Matrix.Matrix matrix15 = com.operations.Matrix.MatrixOperations.multiply(matrix2, matrix10);
        com.operations.Matrix.Matrix matrix17 = com.operations.Matrix.MatrixTransformations.rotate2D((double) (short) 100);
        boolean boolean19 = com.operations.Matrix.MatrixUtils.compare(matrix10, matrix17, (double) (byte) 0);
        double[] doubleArray22 = new double[] { 10, 'a' };
        double[] doubleArray25 = new double[] { 10, 'a' };
        double[][] doubleArray26 = new double[][] { doubleArray22, doubleArray25 };
        com.operations.Matrix.Matrix matrix27 = new com.operations.Matrix.Matrix(doubleArray26);
        com.operations.Matrix.Matrix matrix28 = new com.operations.Matrix.Matrix(doubleArray26);
        com.operations.Matrix.Matrix matrix29 = new com.operations.Matrix.Matrix(doubleArray26);
        boolean boolean31 = com.operations.Matrix.MatrixUtils.compare(matrix10, matrix29, (double) (-1));
        double[][] doubleArray32 = matrix29.getData();
        com.operations.Matrix.Matrix[] matrixArray33 = com.operations.Matrix.MatrixDecompositions.luDecomposition(matrix29);
        com.operations.Matrix.Matrix matrix35 = com.operations.Matrix.MatrixTransformations.rotate2D((double) '4');
        double[] doubleArray38 = new double[] { 10, 'a' };
        double[] doubleArray41 = new double[] { 10, 'a' };
        double[][] doubleArray42 = new double[][] { doubleArray38, doubleArray41 };
        com.operations.Matrix.Matrix matrix43 = new com.operations.Matrix.Matrix(doubleArray42);
        com.operations.Matrix.Matrix matrix44 = new com.operations.Matrix.Matrix(doubleArray42);
        com.operations.Matrix.Matrix matrix46 = com.operations.Matrix.MatrixTransformations.rotate2D((double) (short) 100);
        double[] doubleArray49 = new double[] { 137.90576492663388d, (byte) -1 };
        double[] doubleArray50 = com.operations.Matrix.MatrixSolver.solveGaussian(matrix46, doubleArray49);
        com.operations.Matrix.Matrix matrix51 = com.operations.Matrix.MatrixOperations.add(matrix44, matrix46);
        boolean boolean52 = com.operations.Matrix.MatrixUtils.isSymmetric(matrix51);
        boolean boolean54 = com.operations.Matrix.MatrixUtils.compare(matrix35, matrix51, 364.0054944640259d);
        com.operations.Matrix.Matrix[] matrixArray55 = com.operations.Matrix.MatrixDecompositions.luDecomposition(matrix51);
        com.operations.Matrix.Matrix matrix56 = com.operations.Matrix.MatrixOperations.add(matrix29, matrix51);
        boolean boolean57 = com.operations.Matrix.MatrixUtils.isSquare(matrix51);
        org.junit.Assert.assertNotNull(matrix2);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertArrayEquals(doubleArray5, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertArrayEquals(doubleArray8, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 2 + "'", int11 == 2);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 2 + "'", int12 == 2);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 2 + "'", int13 == 2);
        org.junit.Assert.assertNotNull(matrixArray14);
        org.junit.Assert.assertNotNull(matrix15);
        org.junit.Assert.assertNotNull(matrix17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertArrayEquals(doubleArray22, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertArrayEquals(doubleArray25, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertNotNull(matrixArray33);
        org.junit.Assert.assertNotNull(matrix35);
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertArrayEquals(doubleArray38, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertArrayEquals(doubleArray41, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertNotNull(matrix46);
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertArrayEquals(doubleArray49, new double[] { 137.90576492663388d, (-1.0d) }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertArrayEquals(doubleArray50, new double[] { (-24.931892522286255d), (-135.63701830716116d) }, 1.0E-15);
        org.junit.Assert.assertNotNull(matrix51);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + true + "'", boolean54 == true);
        org.junit.Assert.assertNotNull(matrixArray55);
        org.junit.Assert.assertNotNull(matrix56);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + true + "'", boolean57 == true);
    }

    @Test
    public void test4636() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4636");
        double[] doubleArray2 = new double[] { 10, 'a' };
        double[] doubleArray5 = new double[] { 10, 'a' };
        double[][] doubleArray6 = new double[][] { doubleArray2, doubleArray5 };
        com.operations.Matrix.Matrix matrix7 = new com.operations.Matrix.Matrix(doubleArray6);
        int int8 = matrix7.getCols();
        int int9 = matrix7.getCols();
        boolean boolean10 = com.operations.Matrix.MatrixUtils.isSquare(matrix7);
        com.operations.Matrix.Matrix matrix11 = com.operations.Matrix.MatrixDecompositions.choleskyDecomposition(matrix7);
        com.operations.Matrix.Matrix matrix14 = com.operations.Matrix.MatrixTransformations.project2D(0.0d, (double) 0);
        com.operations.Matrix.Matrix matrix15 = com.operations.Matrix.MatrixOperations.subtract(matrix11, matrix14);
        com.operations.Matrix.Matrix matrix16 = com.operations.Matrix.MatrixOperations.transpose(matrix14);
        int int17 = matrix16.getRows();
        com.operations.Matrix.Matrix[] matrixArray18 = com.operations.Matrix.MatrixDecompositions.luDecomposition(matrix16);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertArrayEquals(doubleArray2, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertArrayEquals(doubleArray5, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 2 + "'", int8 == 2);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 2 + "'", int9 == 2);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(matrix11);
        org.junit.Assert.assertNotNull(matrix14);
        org.junit.Assert.assertNotNull(matrix15);
        org.junit.Assert.assertNotNull(matrix16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 2 + "'", int17 == 2);
        org.junit.Assert.assertNotNull(matrixArray18);
    }

    @Test
    public void test4637() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4637");
        com.operations.Matrix.Matrix matrix4 = com.operations.Matrix.MatrixUtils.generateRandomMatrix(2, (int) ' ', (int) (short) 100, (int) (short) 100);
        com.operations.Matrix.Matrix matrix5 = com.operations.Matrix.MatrixOperations.transpose(matrix4);
        int int6 = matrix5.getRows();
        boolean boolean7 = com.operations.Matrix.MatrixUtils.isSymmetric(matrix5);
        com.operations.Matrix.Matrix matrix9 = com.operations.Matrix.MatrixOperations.scalarMultiply(matrix5, 104.9952379872535d);
        org.junit.Assert.assertNotNull(matrix4);
        org.junit.Assert.assertNotNull(matrix5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 32 + "'", int6 == 32);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(matrix9);
    }

    @Test
    public void test4638() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4638");
        com.operations.Matrix.Matrix matrix5 = com.operations.Matrix.MatrixUtils.generateRandomMatrix(2, (int) (byte) 10, (int) (byte) -1, 0, (long) (byte) 10);
        matrix5.print();
        int int7 = matrix5.getRows();
        org.junit.Assert.assertNotNull(matrix5);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 2 + "'", int7 == 2);
    }

    @Test
    public void test4639() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4639");
        com.operations.Matrix.Matrix matrix2 = com.operations.Matrix.MatrixTransformations.scale2D((double) 1.0f, (double) 1);
        com.operations.Matrix.Matrix matrix4 = com.operations.Matrix.MatrixTransformations.rotate2D((double) 1.0f);
        com.operations.Matrix.Matrix matrix7 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0L, (double) (byte) 10);
        int int8 = matrix7.getRows();
        com.operations.Matrix.Matrix matrix10 = com.operations.Matrix.MatrixOperations.scalarMultiply(matrix7, (double) 2);
        double double11 = com.operations.Matrix.MatrixUtils.frobeniusNorm(matrix7);
        com.operations.Matrix.Matrix matrix14 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0L, (double) (byte) 10);
        int int15 = matrix14.getRows();
        com.operations.Matrix.Matrix matrix17 = com.operations.Matrix.MatrixOperations.scalarMultiply(matrix14, (double) 2);
        com.operations.Matrix.Matrix matrix18 = com.operations.Matrix.MatrixOperations.subtract(matrix7, matrix17);
        com.operations.Matrix.Matrix matrix19 = com.operations.Matrix.MatrixOperations.add(matrix4, matrix17);
        boolean boolean21 = com.operations.Matrix.MatrixUtils.compare(matrix2, matrix4, (double) (byte) -1);
        com.operations.Matrix.Matrix matrix22 = com.operations.Matrix.MatrixOperations.transpose(matrix4);
        int int23 = matrix4.getCols();
        org.junit.Assert.assertNotNull(matrix2);
        org.junit.Assert.assertNotNull(matrix4);
        org.junit.Assert.assertNotNull(matrix7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 2 + "'", int8 == 2);
        org.junit.Assert.assertNotNull(matrix10);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 10.0d + "'", double11 == 10.0d);
        org.junit.Assert.assertNotNull(matrix14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 2 + "'", int15 == 2);
        org.junit.Assert.assertNotNull(matrix17);
        org.junit.Assert.assertNotNull(matrix18);
        org.junit.Assert.assertNotNull(matrix19);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(matrix22);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 2 + "'", int23 == 2);
    }

    @Test
    public void test4640() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4640");
        double[] doubleArray2 = new double[] { 10, 'a' };
        double[] doubleArray5 = new double[] { 10, 'a' };
        double[][] doubleArray6 = new double[][] { doubleArray2, doubleArray5 };
        com.operations.Matrix.Matrix matrix7 = new com.operations.Matrix.Matrix(doubleArray6);
        com.operations.Matrix.Matrix matrix8 = new com.operations.Matrix.Matrix(doubleArray6);
        com.operations.Matrix.Matrix[] matrixArray9 = com.operations.Matrix.MatrixDecompositions.luDecomposition(matrix8);
        double double10 = com.operations.Matrix.MatrixUtils.frobeniusNorm(matrix8);
        double[] doubleArray13 = new double[] { 10, 'a' };
        double[] doubleArray16 = new double[] { 10, 'a' };
        double[][] doubleArray17 = new double[][] { doubleArray13, doubleArray16 };
        com.operations.Matrix.Matrix matrix18 = new com.operations.Matrix.Matrix(doubleArray17);
        com.operations.Matrix.Matrix matrix19 = new com.operations.Matrix.Matrix(doubleArray17);
        boolean boolean20 = com.operations.Matrix.MatrixUtils.isSquare(matrix19);
        double[] doubleArray23 = new double[] { 10, 'a' };
        double[] doubleArray26 = new double[] { 10, 'a' };
        double[][] doubleArray27 = new double[][] { doubleArray23, doubleArray26 };
        com.operations.Matrix.Matrix matrix28 = new com.operations.Matrix.Matrix(doubleArray27);
        int int29 = matrix28.getCols();
        int int30 = matrix28.getCols();
        matrix28.print();
        double[] doubleArray34 = new double[] { 10, 'a' };
        double[] doubleArray37 = new double[] { 10, 'a' };
        double[][] doubleArray38 = new double[][] { doubleArray34, doubleArray37 };
        com.operations.Matrix.Matrix matrix39 = new com.operations.Matrix.Matrix(doubleArray38);
        boolean boolean41 = com.operations.Matrix.MatrixUtils.compare(matrix28, matrix39, (double) (-1));
        com.operations.Matrix.Matrix matrix42 = com.operations.Matrix.MatrixOperations.subtract(matrix19, matrix39);
        com.operations.Matrix.Matrix[] matrixArray43 = com.operations.Matrix.MatrixDecompositions.luDecomposition(matrix42);
        double[][] doubleArray44 = matrix42.getData();
        com.operations.Matrix.Matrix matrix47 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0L, (double) (byte) 10);
        double[] doubleArray50 = new double[] { 10, 'a' };
        double[] doubleArray53 = new double[] { 10, 'a' };
        double[][] doubleArray54 = new double[][] { doubleArray50, doubleArray53 };
        com.operations.Matrix.Matrix matrix55 = new com.operations.Matrix.Matrix(doubleArray54);
        int int56 = matrix55.getCols();
        int int57 = matrix55.getCols();
        int int58 = matrix55.getCols();
        com.operations.Matrix.Matrix[] matrixArray59 = com.operations.Matrix.MatrixDecompositions.luDecomposition(matrix55);
        com.operations.Matrix.Matrix matrix60 = com.operations.Matrix.MatrixOperations.multiply(matrix47, matrix55);
        int int61 = matrix55.getRows();
        com.operations.Matrix.Matrix matrix62 = com.operations.Matrix.MatrixOperations.multiply(matrix42, matrix55);
        boolean boolean64 = com.operations.Matrix.MatrixUtils.compare(matrix8, matrix62, (double) 2);
        com.operations.Matrix.Matrix matrix65 = com.operations.Matrix.MatrixOperations.transpose(matrix62);
        double[] doubleArray68 = new double[] { 10, 'a' };
        double[] doubleArray71 = new double[] { 10, 'a' };
        double[][] doubleArray72 = new double[][] { doubleArray68, doubleArray71 };
        com.operations.Matrix.Matrix matrix73 = new com.operations.Matrix.Matrix(doubleArray72);
        int int74 = matrix73.getCols();
        int int75 = matrix73.getCols();
        int int76 = matrix73.getCols();
        com.operations.Matrix.Matrix matrix82 = com.operations.Matrix.MatrixUtils.generateRandomMatrix(100, (int) (byte) 1, (int) '#', (int) '#', 1L);
        double double85 = matrix82.getValue((int) '4', 0);
        double double86 = com.operations.Matrix.MatrixUtils.frobeniusNorm(matrix82);
        boolean boolean87 = com.operations.Matrix.MatrixUtils.isSquare(matrix82);
        boolean boolean89 = com.operations.Matrix.MatrixUtils.compare(matrix73, matrix82, (double) 100L);
        double[][] doubleArray90 = matrix73.getData();
        com.operations.Matrix.Matrix matrix91 = com.operations.Matrix.MatrixDecompositions.choleskyDecomposition(matrix73);
        com.operations.Matrix.Matrix matrix92 = com.operations.Matrix.MatrixOperations.subtract(matrix62, matrix73);
        boolean boolean93 = com.operations.Matrix.MatrixUtils.isSymmetric(matrix62);
        com.operations.Matrix.Matrix matrix94 = com.operations.Matrix.MatrixOperations.transpose(matrix62);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertArrayEquals(doubleArray2, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertArrayEquals(doubleArray5, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertNotNull(matrixArray9);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 137.90576492663388d + "'", double10 == 137.90576492663388d);
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertArrayEquals(doubleArray13, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertArrayEquals(doubleArray16, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertArrayEquals(doubleArray23, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertArrayEquals(doubleArray26, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 2 + "'", int29 == 2);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 2 + "'", int30 == 2);
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertArrayEquals(doubleArray34, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertArrayEquals(doubleArray37, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(matrix42);
        org.junit.Assert.assertNotNull(matrixArray43);
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertNotNull(matrix47);
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertArrayEquals(doubleArray50, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertArrayEquals(doubleArray53, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray54);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 2 + "'", int56 == 2);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 2 + "'", int57 == 2);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 2 + "'", int58 == 2);
        org.junit.Assert.assertNotNull(matrixArray59);
        org.junit.Assert.assertNotNull(matrix60);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 2 + "'", int61 == 2);
        org.junit.Assert.assertNotNull(matrix62);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertNotNull(matrix65);
        org.junit.Assert.assertNotNull(doubleArray68);
        org.junit.Assert.assertArrayEquals(doubleArray68, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray71);
        org.junit.Assert.assertArrayEquals(doubleArray71, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray72);
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 2 + "'", int74 == 2);
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + 2 + "'", int75 == 2);
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 2 + "'", int76 == 2);
        org.junit.Assert.assertNotNull(matrix82);
        org.junit.Assert.assertTrue("'" + double85 + "' != '" + 35.0d + "'", double85 == 35.0d);
        org.junit.Assert.assertTrue("'" + double86 + "' != '" + 350.0d + "'", double86 == 350.0d);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + false + "'", boolean87 == false);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + false + "'", boolean89 == false);
        org.junit.Assert.assertNotNull(doubleArray90);
        org.junit.Assert.assertNotNull(matrix91);
        org.junit.Assert.assertNotNull(matrix92);
        org.junit.Assert.assertTrue("'" + boolean93 + "' != '" + true + "'", boolean93 == true);
        org.junit.Assert.assertNotNull(matrix94);
    }

    @Test
    public void test4641() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4641");
        com.operations.Matrix.Matrix matrix1 = com.operations.Matrix.MatrixTransformations.rotate2D(100.0d);
        int int2 = matrix1.getCols();
        int int3 = matrix1.getRows();
        com.operations.Matrix.Matrix matrix6 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0L, (double) (byte) 10);
        int int7 = matrix6.getRows();
        com.operations.Matrix.Matrix matrix9 = com.operations.Matrix.MatrixOperations.scalarMultiply(matrix6, (double) 2);
        double double10 = com.operations.Matrix.MatrixUtils.frobeniusNorm(matrix6);
        com.operations.Matrix.Matrix matrix11 = com.operations.Matrix.MatrixOperations.add(matrix1, matrix6);
        int int12 = matrix1.getRows();
        com.operations.Matrix.Matrix matrix14 = com.operations.Matrix.MatrixTransformations.rotate2D(1.414213562373095d);
        com.operations.Matrix.Matrix matrix16 = com.operations.Matrix.MatrixOperations.scalarMultiply(matrix14, 21.023651153076518d);
        com.operations.Matrix.Matrix matrix19 = com.operations.Matrix.MatrixTransformations.scale2D((double) (byte) 10, (double) 10);
        double[] doubleArray22 = new double[] { 10, 'a' };
        double[] doubleArray25 = new double[] { 10, 'a' };
        double[][] doubleArray26 = new double[][] { doubleArray22, doubleArray25 };
        com.operations.Matrix.Matrix matrix27 = new com.operations.Matrix.Matrix(doubleArray26);
        com.operations.Matrix.Matrix matrix28 = new com.operations.Matrix.Matrix(doubleArray26);
        boolean boolean29 = com.operations.Matrix.MatrixUtils.isSquare(matrix28);
        double[] doubleArray32 = new double[] { 10, 'a' };
        double[] doubleArray35 = new double[] { 10, 'a' };
        double[][] doubleArray36 = new double[][] { doubleArray32, doubleArray35 };
        com.operations.Matrix.Matrix matrix37 = new com.operations.Matrix.Matrix(doubleArray36);
        int int38 = matrix37.getCols();
        int int39 = matrix37.getCols();
        matrix37.print();
        double[] doubleArray43 = new double[] { 10, 'a' };
        double[] doubleArray46 = new double[] { 10, 'a' };
        double[][] doubleArray47 = new double[][] { doubleArray43, doubleArray46 };
        com.operations.Matrix.Matrix matrix48 = new com.operations.Matrix.Matrix(doubleArray47);
        boolean boolean50 = com.operations.Matrix.MatrixUtils.compare(matrix37, matrix48, (double) (-1));
        com.operations.Matrix.Matrix matrix51 = com.operations.Matrix.MatrixOperations.subtract(matrix28, matrix48);
        com.operations.Matrix.Matrix[] matrixArray52 = com.operations.Matrix.MatrixDecompositions.luDecomposition(matrix51);
        double[][] doubleArray53 = matrix51.getData();
        com.operations.Matrix.Matrix matrix54 = new com.operations.Matrix.Matrix(doubleArray53);
        com.operations.Matrix.Matrix matrix55 = com.operations.Matrix.MatrixOperations.multiply(matrix19, matrix54);
        boolean boolean56 = com.operations.Matrix.MatrixUtils.isSymmetric(matrix19);
        com.operations.Matrix.Matrix matrix58 = com.operations.Matrix.MatrixTransformations.rotate2D(350.0d);
        com.operations.Matrix.Matrix matrix59 = com.operations.Matrix.MatrixDecompositions.choleskyDecomposition(matrix58);
        int int60 = matrix58.getRows();
        com.operations.Matrix.Matrix matrix61 = com.operations.Matrix.MatrixOperations.subtract(matrix19, matrix58);
        com.operations.Matrix.Matrix matrix62 = com.operations.Matrix.MatrixOperations.multiply(matrix16, matrix19);
        double double63 = com.operations.Matrix.MatrixUtils.frobeniusNorm(matrix19);
        com.operations.Matrix.Matrix matrix64 = com.operations.Matrix.MatrixOperations.multiply(matrix1, matrix19);
        double double65 = com.operations.Matrix.MatrixUtils.frobeniusNorm(matrix19);
        org.junit.Assert.assertNotNull(matrix1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 2 + "'", int2 == 2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 2 + "'", int3 == 2);
        org.junit.Assert.assertNotNull(matrix6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 2 + "'", int7 == 2);
        org.junit.Assert.assertNotNull(matrix9);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 10.0d + "'", double10 == 10.0d);
        org.junit.Assert.assertNotNull(matrix11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 2 + "'", int12 == 2);
        org.junit.Assert.assertNotNull(matrix14);
        org.junit.Assert.assertNotNull(matrix16);
        org.junit.Assert.assertNotNull(matrix19);
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertArrayEquals(doubleArray22, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertArrayEquals(doubleArray25, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertArrayEquals(doubleArray32, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertArrayEquals(doubleArray35, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 2 + "'", int38 == 2);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 2 + "'", int39 == 2);
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertArrayEquals(doubleArray43, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray46);
        org.junit.Assert.assertArrayEquals(doubleArray46, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(matrix51);
        org.junit.Assert.assertNotNull(matrixArray52);
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertNotNull(matrix55);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + true + "'", boolean56 == true);
        org.junit.Assert.assertNotNull(matrix58);
        org.junit.Assert.assertNotNull(matrix59);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 2 + "'", int60 == 2);
        org.junit.Assert.assertNotNull(matrix61);
        org.junit.Assert.assertNotNull(matrix62);
        org.junit.Assert.assertTrue("'" + double63 + "' != '" + 14.142135623730951d + "'", double63 == 14.142135623730951d);
        org.junit.Assert.assertNotNull(matrix64);
        org.junit.Assert.assertTrue("'" + double65 + "' != '" + 14.142135623730951d + "'", double65 == 14.142135623730951d);
    }

    @Test
    public void test4642() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4642");
        com.operations.Matrix.Matrix matrix2 = com.operations.Matrix.MatrixTransformations.project2D(0.0d, (double) 0);
        com.operations.Matrix.Matrix[] matrixArray3 = com.operations.Matrix.MatrixDecompositions.luDecomposition(matrix2);
        com.operations.Matrix.Matrix matrix6 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0L, (double) (byte) 10);
        int int7 = matrix6.getRows();
        com.operations.Matrix.Matrix matrix9 = com.operations.Matrix.MatrixOperations.scalarMultiply(matrix6, (double) 2);
        double double10 = com.operations.Matrix.MatrixUtils.frobeniusNorm(matrix6);
        int int11 = matrix6.getRows();
        com.operations.Matrix.Matrix matrix12 = com.operations.Matrix.MatrixOperations.transpose(matrix6);
        com.operations.Matrix.Matrix matrix13 = com.operations.Matrix.MatrixOperations.multiply(matrix2, matrix12);
        boolean boolean14 = com.operations.Matrix.MatrixUtils.isSymmetric(matrix13);
        boolean boolean15 = com.operations.Matrix.MatrixUtils.isSquare(matrix13);
        org.junit.Assert.assertNotNull(matrix2);
        org.junit.Assert.assertNotNull(matrixArray3);
        org.junit.Assert.assertNotNull(matrix6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 2 + "'", int7 == 2);
        org.junit.Assert.assertNotNull(matrix9);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 10.0d + "'", double10 == 10.0d);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 2 + "'", int11 == 2);
        org.junit.Assert.assertNotNull(matrix12);
        org.junit.Assert.assertNotNull(matrix13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
    }

    @Test
    public void test4643() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4643");
        com.operations.Matrix.Matrix matrix2 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0.0f, 350.0d);
        com.operations.Matrix.Matrix matrix3 = com.operations.Matrix.MatrixOperations.transpose(matrix2);
        com.operations.Matrix.Matrix matrix6 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0L, (double) (byte) 10);
        int int7 = matrix6.getRows();
        com.operations.Matrix.Matrix matrix9 = com.operations.Matrix.MatrixOperations.scalarMultiply(matrix6, (double) 2);
        matrix6.print();
        com.operations.Matrix.Matrix matrix16 = com.operations.Matrix.MatrixUtils.generateRandomMatrix((int) (short) 10, (int) (short) 100, (int) (byte) -1, (-1), (long) (byte) 10);
        boolean boolean18 = com.operations.Matrix.MatrixUtils.compare(matrix6, matrix16, (double) (short) 10);
        double[] doubleArray21 = new double[] { 10, 'a' };
        double[] doubleArray24 = new double[] { 10, 'a' };
        double[][] doubleArray25 = new double[][] { doubleArray21, doubleArray24 };
        com.operations.Matrix.Matrix matrix26 = new com.operations.Matrix.Matrix(doubleArray25);
        com.operations.Matrix.Matrix matrix27 = new com.operations.Matrix.Matrix(doubleArray25);
        com.operations.Matrix.Matrix matrix29 = com.operations.Matrix.MatrixTransformations.rotate2D((double) (short) 100);
        double[] doubleArray32 = new double[] { 137.90576492663388d, (byte) -1 };
        double[] doubleArray33 = com.operations.Matrix.MatrixSolver.solveGaussian(matrix29, doubleArray32);
        com.operations.Matrix.Matrix matrix34 = com.operations.Matrix.MatrixOperations.add(matrix27, matrix29);
        com.operations.Matrix.Matrix matrix35 = com.operations.Matrix.MatrixDecompositions.choleskyDecomposition(matrix27);
        com.operations.Matrix.Matrix matrix38 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0L, (double) (byte) 10);
        double[] doubleArray41 = new double[] { 10, 'a' };
        double[] doubleArray44 = new double[] { 10, 'a' };
        double[][] doubleArray45 = new double[][] { doubleArray41, doubleArray44 };
        com.operations.Matrix.Matrix matrix46 = new com.operations.Matrix.Matrix(doubleArray45);
        int int47 = matrix46.getCols();
        int int48 = matrix46.getCols();
        int int49 = matrix46.getCols();
        com.operations.Matrix.Matrix[] matrixArray50 = com.operations.Matrix.MatrixDecompositions.luDecomposition(matrix46);
        com.operations.Matrix.Matrix matrix51 = com.operations.Matrix.MatrixOperations.multiply(matrix38, matrix46);
        com.operations.Matrix.Matrix matrix53 = com.operations.Matrix.MatrixTransformations.rotate2D((double) (short) 100);
        boolean boolean55 = com.operations.Matrix.MatrixUtils.compare(matrix46, matrix53, (double) (byte) 0);
        com.operations.Matrix.Matrix matrix56 = com.operations.Matrix.MatrixOperations.transpose(matrix46);
        com.operations.Matrix.Matrix matrix58 = com.operations.Matrix.MatrixOperations.scalarMultiply(matrix56, (double) 10);
        com.operations.Matrix.Matrix matrix59 = com.operations.Matrix.MatrixOperations.add(matrix35, matrix56);
        com.operations.Matrix.Matrix matrix61 = com.operations.Matrix.MatrixOperations.scalarMultiply(matrix59, 137.90576492663388d);
        com.operations.Matrix.Matrix matrix62 = com.operations.Matrix.MatrixOperations.multiply(matrix6, matrix59);
        boolean boolean64 = com.operations.Matrix.MatrixUtils.compare(matrix2, matrix62, (double) (byte) 0);
        matrix2.print();
        org.junit.Assert.assertNotNull(matrix2);
        org.junit.Assert.assertNotNull(matrix3);
        org.junit.Assert.assertNotNull(matrix6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 2 + "'", int7 == 2);
        org.junit.Assert.assertNotNull(matrix9);
        org.junit.Assert.assertNotNull(matrix16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertArrayEquals(doubleArray21, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertArrayEquals(doubleArray24, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertNotNull(matrix29);
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertArrayEquals(doubleArray32, new double[] { 137.90576492663388d, (-1.0d) }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertArrayEquals(doubleArray33, new double[] { (-24.931892522286255d), (-135.63701830716116d) }, 1.0E-15);
        org.junit.Assert.assertNotNull(matrix34);
        org.junit.Assert.assertNotNull(matrix35);
        org.junit.Assert.assertNotNull(matrix38);
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertArrayEquals(doubleArray41, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertArrayEquals(doubleArray44, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 2 + "'", int47 == 2);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 2 + "'", int48 == 2);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 2 + "'", int49 == 2);
        org.junit.Assert.assertNotNull(matrixArray50);
        org.junit.Assert.assertNotNull(matrix51);
        org.junit.Assert.assertNotNull(matrix53);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNotNull(matrix56);
        org.junit.Assert.assertNotNull(matrix58);
        org.junit.Assert.assertNotNull(matrix59);
        org.junit.Assert.assertNotNull(matrix61);
        org.junit.Assert.assertNotNull(matrix62);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
    }

    @Test
    public void test4644() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4644");
        com.operations.Matrix.Matrix matrix2 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0L, (double) (byte) 10);
        int int3 = matrix2.getRows();
        com.operations.Matrix.Matrix matrix5 = com.operations.Matrix.MatrixOperations.scalarMultiply(matrix2, (double) 2);
        double double6 = com.operations.Matrix.MatrixUtils.frobeniusNorm(matrix2);
        com.operations.Matrix.Matrix matrix9 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0L, (double) (byte) 10);
        int int10 = matrix9.getRows();
        com.operations.Matrix.Matrix matrix12 = com.operations.Matrix.MatrixOperations.scalarMultiply(matrix9, (double) 2);
        com.operations.Matrix.Matrix matrix13 = com.operations.Matrix.MatrixOperations.subtract(matrix2, matrix12);
        com.operations.Matrix.Matrix matrix15 = com.operations.Matrix.MatrixOperations.scalarMultiply(matrix13, (double) 1);
        double[][] doubleArray16 = matrix15.getData();
        boolean boolean17 = com.operations.Matrix.MatrixUtils.isSquare(matrix15);
        org.junit.Assert.assertNotNull(matrix2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 2 + "'", int3 == 2);
        org.junit.Assert.assertNotNull(matrix5);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 10.0d + "'", double6 == 10.0d);
        org.junit.Assert.assertNotNull(matrix9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 2 + "'", int10 == 2);
        org.junit.Assert.assertNotNull(matrix12);
        org.junit.Assert.assertNotNull(matrix13);
        org.junit.Assert.assertNotNull(matrix15);
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
    }

    @Test
    public void test4645() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4645");
        com.operations.Matrix.Matrix matrix2 = com.operations.Matrix.MatrixTransformations.scale2D(30.0d, (double) (-1));
        int int3 = matrix2.getRows();
        // The following exception was thrown during execution in test generation
        try {
            double double6 = matrix2.getValue(0, 10);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(matrix2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 2 + "'", int3 == 2);
    }

    @Test
    public void test4646() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4646");
        double[] doubleArray2 = new double[] { 10, 'a' };
        double[] doubleArray5 = new double[] { 10, 'a' };
        double[][] doubleArray6 = new double[][] { doubleArray2, doubleArray5 };
        com.operations.Matrix.Matrix matrix7 = new com.operations.Matrix.Matrix(doubleArray6);
        com.operations.Matrix.Matrix matrix8 = com.operations.Matrix.MatrixOperations.transpose(matrix7);
        com.operations.Matrix.Matrix matrix11 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0L, (double) (byte) 10);
        int int12 = matrix11.getRows();
        com.operations.Matrix.Matrix matrix18 = com.operations.Matrix.MatrixUtils.generateRandomMatrix(100, (int) (byte) 1, (int) '#', (int) '#', 1L);
        boolean boolean20 = com.operations.Matrix.MatrixUtils.compare(matrix11, matrix18, (double) 1.0f);
        com.operations.Matrix.Matrix matrix22 = com.operations.Matrix.MatrixOperations.scalarMultiply(matrix11, (double) 1L);
        matrix11.print();
        com.operations.Matrix.Matrix matrix24 = com.operations.Matrix.MatrixOperations.multiply(matrix8, matrix11);
        java.lang.Class<?> wildcardClass25 = matrix24.getClass();
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertArrayEquals(doubleArray2, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertArrayEquals(doubleArray5, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertNotNull(matrix8);
        org.junit.Assert.assertNotNull(matrix11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 2 + "'", int12 == 2);
        org.junit.Assert.assertNotNull(matrix18);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(matrix22);
        org.junit.Assert.assertNotNull(matrix24);
        org.junit.Assert.assertNotNull(wildcardClass25);
    }

    @Test
    public void test4647() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4647");
        double[] doubleArray2 = new double[] { 10, 'a' };
        double[] doubleArray5 = new double[] { 10, 'a' };
        double[][] doubleArray6 = new double[][] { doubleArray2, doubleArray5 };
        com.operations.Matrix.Matrix matrix7 = new com.operations.Matrix.Matrix(doubleArray6);
        com.operations.Matrix.Matrix matrix8 = new com.operations.Matrix.Matrix(doubleArray6);
        com.operations.Matrix.Matrix[] matrixArray9 = com.operations.Matrix.MatrixDecompositions.luDecomposition(matrix8);
        double double10 = com.operations.Matrix.MatrixUtils.frobeniusNorm(matrix8);
        double[] doubleArray13 = new double[] { 10, 'a' };
        double[] doubleArray16 = new double[] { 10, 'a' };
        double[][] doubleArray17 = new double[][] { doubleArray13, doubleArray16 };
        com.operations.Matrix.Matrix matrix18 = new com.operations.Matrix.Matrix(doubleArray17);
        com.operations.Matrix.Matrix matrix19 = new com.operations.Matrix.Matrix(doubleArray17);
        boolean boolean20 = com.operations.Matrix.MatrixUtils.isSquare(matrix19);
        double[] doubleArray23 = new double[] { 10, 'a' };
        double[] doubleArray26 = new double[] { 10, 'a' };
        double[][] doubleArray27 = new double[][] { doubleArray23, doubleArray26 };
        com.operations.Matrix.Matrix matrix28 = new com.operations.Matrix.Matrix(doubleArray27);
        int int29 = matrix28.getCols();
        int int30 = matrix28.getCols();
        matrix28.print();
        double[] doubleArray34 = new double[] { 10, 'a' };
        double[] doubleArray37 = new double[] { 10, 'a' };
        double[][] doubleArray38 = new double[][] { doubleArray34, doubleArray37 };
        com.operations.Matrix.Matrix matrix39 = new com.operations.Matrix.Matrix(doubleArray38);
        boolean boolean41 = com.operations.Matrix.MatrixUtils.compare(matrix28, matrix39, (double) (-1));
        com.operations.Matrix.Matrix matrix42 = com.operations.Matrix.MatrixOperations.subtract(matrix19, matrix39);
        com.operations.Matrix.Matrix[] matrixArray43 = com.operations.Matrix.MatrixDecompositions.luDecomposition(matrix42);
        double[][] doubleArray44 = matrix42.getData();
        com.operations.Matrix.Matrix matrix47 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0L, (double) (byte) 10);
        double[] doubleArray50 = new double[] { 10, 'a' };
        double[] doubleArray53 = new double[] { 10, 'a' };
        double[][] doubleArray54 = new double[][] { doubleArray50, doubleArray53 };
        com.operations.Matrix.Matrix matrix55 = new com.operations.Matrix.Matrix(doubleArray54);
        int int56 = matrix55.getCols();
        int int57 = matrix55.getCols();
        int int58 = matrix55.getCols();
        com.operations.Matrix.Matrix[] matrixArray59 = com.operations.Matrix.MatrixDecompositions.luDecomposition(matrix55);
        com.operations.Matrix.Matrix matrix60 = com.operations.Matrix.MatrixOperations.multiply(matrix47, matrix55);
        int int61 = matrix55.getRows();
        com.operations.Matrix.Matrix matrix62 = com.operations.Matrix.MatrixOperations.multiply(matrix42, matrix55);
        boolean boolean64 = com.operations.Matrix.MatrixUtils.compare(matrix8, matrix62, (double) 2);
        com.operations.Matrix.Matrix matrix65 = com.operations.Matrix.MatrixOperations.transpose(matrix62);
        matrix65.print();
        boolean boolean67 = com.operations.Matrix.MatrixUtils.isSymmetric(matrix65);
        int int68 = matrix65.getCols();
        double double69 = com.operations.Matrix.MatrixUtils.frobeniusNorm(matrix65);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertArrayEquals(doubleArray2, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertArrayEquals(doubleArray5, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertNotNull(matrixArray9);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 137.90576492663388d + "'", double10 == 137.90576492663388d);
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertArrayEquals(doubleArray13, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertArrayEquals(doubleArray16, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertArrayEquals(doubleArray23, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertArrayEquals(doubleArray26, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 2 + "'", int29 == 2);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 2 + "'", int30 == 2);
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertArrayEquals(doubleArray34, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertArrayEquals(doubleArray37, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(matrix42);
        org.junit.Assert.assertNotNull(matrixArray43);
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertNotNull(matrix47);
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertArrayEquals(doubleArray50, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertArrayEquals(doubleArray53, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray54);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 2 + "'", int56 == 2);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 2 + "'", int57 == 2);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 2 + "'", int58 == 2);
        org.junit.Assert.assertNotNull(matrixArray59);
        org.junit.Assert.assertNotNull(matrix60);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 2 + "'", int61 == 2);
        org.junit.Assert.assertNotNull(matrix62);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertNotNull(matrix65);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + true + "'", boolean67 == true);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 2 + "'", int68 == 2);
        org.junit.Assert.assertTrue("'" + double69 + "' != '" + 0.0d + "'", double69 == 0.0d);
    }

    @Test
    public void test4648() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4648");
        com.operations.Matrix.Matrix matrix2 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0L, (double) (byte) 10);
        double[] doubleArray5 = new double[] { 10, 'a' };
        double[] doubleArray8 = new double[] { 10, 'a' };
        double[][] doubleArray9 = new double[][] { doubleArray5, doubleArray8 };
        com.operations.Matrix.Matrix matrix10 = new com.operations.Matrix.Matrix(doubleArray9);
        int int11 = matrix10.getCols();
        int int12 = matrix10.getCols();
        int int13 = matrix10.getCols();
        com.operations.Matrix.Matrix[] matrixArray14 = com.operations.Matrix.MatrixDecompositions.luDecomposition(matrix10);
        com.operations.Matrix.Matrix matrix15 = com.operations.Matrix.MatrixOperations.multiply(matrix2, matrix10);
        com.operations.Matrix.Matrix matrix17 = com.operations.Matrix.MatrixTransformations.rotate2D((double) (short) 100);
        boolean boolean19 = com.operations.Matrix.MatrixUtils.compare(matrix10, matrix17, (double) (byte) 0);
        boolean boolean20 = com.operations.Matrix.MatrixUtils.isSymmetric(matrix17);
        boolean boolean21 = com.operations.Matrix.MatrixUtils.isSquare(matrix17);
        com.operations.Matrix.Matrix matrix23 = com.operations.Matrix.MatrixOperations.scalarMultiply(matrix17, (double) 2);
        com.operations.Matrix.Matrix matrix24 = com.operations.Matrix.MatrixOperations.transpose(matrix23);
        com.operations.Matrix.Matrix matrix26 = com.operations.Matrix.MatrixOperations.scalarMultiply(matrix23, 137.90576492663385d);
        com.operations.Matrix.Matrix matrix28 = com.operations.Matrix.MatrixOperations.scalarMultiply(matrix23, (double) (short) 0);
        double[] doubleArray31 = new double[] { 10, 'a' };
        double[] doubleArray34 = new double[] { 10, 'a' };
        double[][] doubleArray35 = new double[][] { doubleArray31, doubleArray34 };
        com.operations.Matrix.Matrix matrix36 = new com.operations.Matrix.Matrix(doubleArray35);
        com.operations.Matrix.Matrix matrix37 = new com.operations.Matrix.Matrix(doubleArray35);
        boolean boolean38 = com.operations.Matrix.MatrixUtils.isSquare(matrix37);
        com.operations.Matrix.Matrix matrix43 = com.operations.Matrix.MatrixUtils.generateRandomMatrix(100, 0, (int) ' ', (int) (byte) 1);
        matrix43.print();
        boolean boolean45 = com.operations.Matrix.MatrixUtils.isSymmetric(matrix43);
        boolean boolean47 = com.operations.Matrix.MatrixUtils.compare(matrix37, matrix43, 0.01745240643728351d);
        // The following exception was thrown during execution in test generation
        try {
            com.operations.Matrix.Matrix matrix48 = com.operations.Matrix.MatrixOperations.add(matrix28, matrix43);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Matrices must have the same dimensions for addition.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(matrix2);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertArrayEquals(doubleArray5, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertArrayEquals(doubleArray8, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 2 + "'", int11 == 2);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 2 + "'", int12 == 2);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 2 + "'", int13 == 2);
        org.junit.Assert.assertNotNull(matrixArray14);
        org.junit.Assert.assertNotNull(matrix15);
        org.junit.Assert.assertNotNull(matrix17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertNotNull(matrix23);
        org.junit.Assert.assertNotNull(matrix24);
        org.junit.Assert.assertNotNull(matrix26);
        org.junit.Assert.assertNotNull(matrix28);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertArrayEquals(doubleArray31, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertArrayEquals(doubleArray34, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertNotNull(matrix43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
    }

    @Test
    public void test4649() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4649");
        com.operations.Matrix.Matrix matrix2 = com.operations.Matrix.MatrixTransformations.project2D(59.62334183013888d, 0.01745240643728351d);
        org.junit.Assert.assertNotNull(matrix2);
    }

    @Test
    public void test4650() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4650");
        // The following exception was thrown during execution in test generation
        try {
            com.operations.Matrix.Matrix matrix4 = com.operations.Matrix.MatrixUtils.generateRandomMatrix(0, 1, 0, (int) (byte) 0);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
    }

    @Test
    public void test4651() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4651");
        com.operations.Matrix.Matrix matrix2 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0L, (double) (byte) 10);
        double[] doubleArray5 = new double[] { 10, 'a' };
        double[] doubleArray8 = new double[] { 10, 'a' };
        double[][] doubleArray9 = new double[][] { doubleArray5, doubleArray8 };
        com.operations.Matrix.Matrix matrix10 = new com.operations.Matrix.Matrix(doubleArray9);
        int int11 = matrix10.getCols();
        int int12 = matrix10.getCols();
        int int13 = matrix10.getCols();
        com.operations.Matrix.Matrix[] matrixArray14 = com.operations.Matrix.MatrixDecompositions.luDecomposition(matrix10);
        com.operations.Matrix.Matrix matrix15 = com.operations.Matrix.MatrixOperations.multiply(matrix2, matrix10);
        com.operations.Matrix.Matrix matrix17 = com.operations.Matrix.MatrixTransformations.rotate2D((double) (short) 100);
        boolean boolean19 = com.operations.Matrix.MatrixUtils.compare(matrix10, matrix17, (double) (byte) 0);
        double[] doubleArray22 = new double[] { 10, 'a' };
        double[] doubleArray25 = new double[] { 10, 'a' };
        double[][] doubleArray26 = new double[][] { doubleArray22, doubleArray25 };
        com.operations.Matrix.Matrix matrix27 = new com.operations.Matrix.Matrix(doubleArray26);
        com.operations.Matrix.Matrix matrix28 = com.operations.Matrix.MatrixOperations.multiply(matrix10, matrix27);
        com.operations.Matrix.Matrix matrix30 = com.operations.Matrix.MatrixOperations.scalarMultiply(matrix10, 364.0054944640259d);
        com.operations.Matrix.Matrix matrix33 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0L, (double) (byte) 10);
        int int34 = matrix33.getRows();
        com.operations.Matrix.Matrix matrix36 = com.operations.Matrix.MatrixOperations.scalarMultiply(matrix33, (double) 2);
        matrix33.print();
        matrix33.print();
        com.operations.Matrix.Matrix matrix39 = com.operations.Matrix.MatrixOperations.multiply(matrix10, matrix33);
        com.operations.Matrix.Matrix matrix40 = com.operations.Matrix.MatrixOperations.transpose(matrix33);
        int int41 = matrix33.getRows();
        double[] doubleArray44 = new double[] { 10, 'a' };
        double[] doubleArray47 = new double[] { 10, 'a' };
        double[][] doubleArray48 = new double[][] { doubleArray44, doubleArray47 };
        com.operations.Matrix.Matrix matrix49 = new com.operations.Matrix.Matrix(doubleArray48);
        com.operations.Matrix.Matrix matrix50 = new com.operations.Matrix.Matrix(doubleArray48);
        com.operations.Matrix.Matrix matrix52 = com.operations.Matrix.MatrixTransformations.rotate2D((double) (short) 100);
        double[] doubleArray55 = new double[] { 137.90576492663388d, (byte) -1 };
        double[] doubleArray56 = com.operations.Matrix.MatrixSolver.solveGaussian(matrix52, doubleArray55);
        com.operations.Matrix.Matrix matrix57 = com.operations.Matrix.MatrixOperations.add(matrix50, matrix52);
        com.operations.Matrix.Matrix matrix58 = com.operations.Matrix.MatrixOperations.transpose(matrix52);
        double double59 = com.operations.Matrix.MatrixUtils.frobeniusNorm(matrix58);
        double[][] doubleArray60 = matrix58.getData();
        com.operations.Matrix.Matrix matrix61 = new com.operations.Matrix.Matrix(doubleArray60);
        com.operations.Matrix.Matrix matrix62 = com.operations.Matrix.MatrixOperations.multiply(matrix33, matrix61);
        boolean boolean63 = com.operations.Matrix.MatrixUtils.isSquare(matrix33);
        org.junit.Assert.assertNotNull(matrix2);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertArrayEquals(doubleArray5, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertArrayEquals(doubleArray8, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 2 + "'", int11 == 2);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 2 + "'", int12 == 2);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 2 + "'", int13 == 2);
        org.junit.Assert.assertNotNull(matrixArray14);
        org.junit.Assert.assertNotNull(matrix15);
        org.junit.Assert.assertNotNull(matrix17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertArrayEquals(doubleArray22, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertArrayEquals(doubleArray25, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertNotNull(matrix28);
        org.junit.Assert.assertNotNull(matrix30);
        org.junit.Assert.assertNotNull(matrix33);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 2 + "'", int34 == 2);
        org.junit.Assert.assertNotNull(matrix36);
        org.junit.Assert.assertNotNull(matrix39);
        org.junit.Assert.assertNotNull(matrix40);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 2 + "'", int41 == 2);
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertArrayEquals(doubleArray44, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertArrayEquals(doubleArray47, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertNotNull(matrix52);
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertArrayEquals(doubleArray55, new double[] { 137.90576492663388d, (-1.0d) }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray56);
        org.junit.Assert.assertArrayEquals(doubleArray56, new double[] { (-24.931892522286255d), (-135.63701830716116d) }, 1.0E-15);
        org.junit.Assert.assertNotNull(matrix57);
        org.junit.Assert.assertNotNull(matrix58);
        org.junit.Assert.assertTrue("'" + double59 + "' != '" + 1.414213562373095d + "'", double59 == 1.414213562373095d);
        org.junit.Assert.assertNotNull(doubleArray60);
        org.junit.Assert.assertNotNull(matrix62);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + true + "'", boolean63 == true);
    }

    @Test
    public void test4652() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4652");
        com.operations.Matrix.Matrix matrix2 = com.operations.Matrix.MatrixTransformations.project2D(0.0d, 9.06897090016818d);
        // The following exception was thrown during execution in test generation
        try {
            com.operations.Matrix.Matrix matrix3 = com.operations.Matrix.MatrixDecompositions.choleskyDecomposition(matrix2);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Matrix is not positive definite.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(matrix2);
    }

    @Test
    public void test4653() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4653");
        com.operations.Matrix.Matrix matrix2 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0L, (double) (byte) 10);
        double[] doubleArray5 = new double[] { 10, 'a' };
        double[] doubleArray8 = new double[] { 10, 'a' };
        double[][] doubleArray9 = new double[][] { doubleArray5, doubleArray8 };
        com.operations.Matrix.Matrix matrix10 = new com.operations.Matrix.Matrix(doubleArray9);
        int int11 = matrix10.getCols();
        int int12 = matrix10.getCols();
        int int13 = matrix10.getCols();
        com.operations.Matrix.Matrix[] matrixArray14 = com.operations.Matrix.MatrixDecompositions.luDecomposition(matrix10);
        com.operations.Matrix.Matrix matrix15 = com.operations.Matrix.MatrixOperations.multiply(matrix2, matrix10);
        com.operations.Matrix.Matrix matrix17 = com.operations.Matrix.MatrixTransformations.rotate2D((double) (short) 100);
        boolean boolean19 = com.operations.Matrix.MatrixUtils.compare(matrix10, matrix17, (double) (byte) 0);
        double[] doubleArray22 = new double[] { 10, 'a' };
        double[] doubleArray25 = new double[] { 10, 'a' };
        double[][] doubleArray26 = new double[][] { doubleArray22, doubleArray25 };
        com.operations.Matrix.Matrix matrix27 = new com.operations.Matrix.Matrix(doubleArray26);
        com.operations.Matrix.Matrix matrix28 = new com.operations.Matrix.Matrix(doubleArray26);
        com.operations.Matrix.Matrix matrix29 = new com.operations.Matrix.Matrix(doubleArray26);
        boolean boolean31 = com.operations.Matrix.MatrixUtils.compare(matrix10, matrix29, (double) (-1));
        com.operations.Matrix.Matrix matrix34 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0L, (double) (byte) 10);
        double[] doubleArray37 = new double[] { 10, 'a' };
        double[] doubleArray40 = new double[] { 10, 'a' };
        double[][] doubleArray41 = new double[][] { doubleArray37, doubleArray40 };
        com.operations.Matrix.Matrix matrix42 = new com.operations.Matrix.Matrix(doubleArray41);
        int int43 = matrix42.getCols();
        int int44 = matrix42.getCols();
        int int45 = matrix42.getCols();
        com.operations.Matrix.Matrix[] matrixArray46 = com.operations.Matrix.MatrixDecompositions.luDecomposition(matrix42);
        com.operations.Matrix.Matrix matrix47 = com.operations.Matrix.MatrixOperations.multiply(matrix34, matrix42);
        boolean boolean49 = com.operations.Matrix.MatrixUtils.compare(matrix29, matrix34, (double) 10L);
        int int50 = matrix29.getRows();
        double double53 = matrix29.getValue((int) (byte) 0, (int) (short) 0);
        double[] doubleArray56 = new double[] { 10, 'a' };
        double[] doubleArray59 = new double[] { 10, 'a' };
        double[][] doubleArray60 = new double[][] { doubleArray56, doubleArray59 };
        com.operations.Matrix.Matrix matrix61 = new com.operations.Matrix.Matrix(doubleArray60);
        com.operations.Matrix.Matrix matrix62 = new com.operations.Matrix.Matrix(doubleArray60);
        com.operations.Matrix.Matrix matrix63 = new com.operations.Matrix.Matrix(doubleArray60);
        com.operations.Matrix.Matrix matrix64 = new com.operations.Matrix.Matrix(doubleArray60);
        com.operations.Matrix.Matrix matrix65 = new com.operations.Matrix.Matrix(doubleArray60);
        com.operations.Matrix.Matrix matrix66 = new com.operations.Matrix.Matrix(doubleArray60);
        com.operations.Matrix.Matrix matrix67 = com.operations.Matrix.MatrixOperations.subtract(matrix29, matrix66);
        int int68 = matrix66.getCols();
        org.junit.Assert.assertNotNull(matrix2);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertArrayEquals(doubleArray5, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertArrayEquals(doubleArray8, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 2 + "'", int11 == 2);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 2 + "'", int12 == 2);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 2 + "'", int13 == 2);
        org.junit.Assert.assertNotNull(matrixArray14);
        org.junit.Assert.assertNotNull(matrix15);
        org.junit.Assert.assertNotNull(matrix17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertArrayEquals(doubleArray22, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertArrayEquals(doubleArray25, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(matrix34);
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertArrayEquals(doubleArray37, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertArrayEquals(doubleArray40, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 2 + "'", int43 == 2);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 2 + "'", int44 == 2);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 2 + "'", int45 == 2);
        org.junit.Assert.assertNotNull(matrixArray46);
        org.junit.Assert.assertNotNull(matrix47);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 2 + "'", int50 == 2);
        org.junit.Assert.assertTrue("'" + double53 + "' != '" + 10.0d + "'", double53 == 10.0d);
        org.junit.Assert.assertNotNull(doubleArray56);
        org.junit.Assert.assertArrayEquals(doubleArray56, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray59);
        org.junit.Assert.assertArrayEquals(doubleArray59, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray60);
        org.junit.Assert.assertNotNull(matrix67);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 2 + "'", int68 == 2);
    }

    @Test
    public void test4654() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4654");
        com.operations.Matrix.Matrix matrix2 = com.operations.Matrix.MatrixTransformations.project2D(1.4142135623730951d, 0.01745240643728351d);
        double[] doubleArray5 = new double[] { 10, 'a' };
        double[] doubleArray8 = new double[] { 10, 'a' };
        double[][] doubleArray9 = new double[][] { doubleArray5, doubleArray8 };
        com.operations.Matrix.Matrix matrix10 = new com.operations.Matrix.Matrix(doubleArray9);
        com.operations.Matrix.Matrix matrix11 = new com.operations.Matrix.Matrix(doubleArray9);
        com.operations.Matrix.Matrix[] matrixArray12 = com.operations.Matrix.MatrixDecompositions.luDecomposition(matrix11);
        double double13 = com.operations.Matrix.MatrixUtils.frobeniusNorm(matrix11);
        double[] doubleArray16 = new double[] { 10, 'a' };
        double[] doubleArray19 = new double[] { 10, 'a' };
        double[][] doubleArray20 = new double[][] { doubleArray16, doubleArray19 };
        com.operations.Matrix.Matrix matrix21 = new com.operations.Matrix.Matrix(doubleArray20);
        com.operations.Matrix.Matrix matrix22 = new com.operations.Matrix.Matrix(doubleArray20);
        boolean boolean23 = com.operations.Matrix.MatrixUtils.isSquare(matrix22);
        double[] doubleArray26 = new double[] { 10, 'a' };
        double[] doubleArray29 = new double[] { 10, 'a' };
        double[][] doubleArray30 = new double[][] { doubleArray26, doubleArray29 };
        com.operations.Matrix.Matrix matrix31 = new com.operations.Matrix.Matrix(doubleArray30);
        int int32 = matrix31.getCols();
        int int33 = matrix31.getCols();
        matrix31.print();
        double[] doubleArray37 = new double[] { 10, 'a' };
        double[] doubleArray40 = new double[] { 10, 'a' };
        double[][] doubleArray41 = new double[][] { doubleArray37, doubleArray40 };
        com.operations.Matrix.Matrix matrix42 = new com.operations.Matrix.Matrix(doubleArray41);
        boolean boolean44 = com.operations.Matrix.MatrixUtils.compare(matrix31, matrix42, (double) (-1));
        com.operations.Matrix.Matrix matrix45 = com.operations.Matrix.MatrixOperations.subtract(matrix22, matrix42);
        com.operations.Matrix.Matrix[] matrixArray46 = com.operations.Matrix.MatrixDecompositions.luDecomposition(matrix45);
        double[][] doubleArray47 = matrix45.getData();
        com.operations.Matrix.Matrix matrix50 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0L, (double) (byte) 10);
        double[] doubleArray53 = new double[] { 10, 'a' };
        double[] doubleArray56 = new double[] { 10, 'a' };
        double[][] doubleArray57 = new double[][] { doubleArray53, doubleArray56 };
        com.operations.Matrix.Matrix matrix58 = new com.operations.Matrix.Matrix(doubleArray57);
        int int59 = matrix58.getCols();
        int int60 = matrix58.getCols();
        int int61 = matrix58.getCols();
        com.operations.Matrix.Matrix[] matrixArray62 = com.operations.Matrix.MatrixDecompositions.luDecomposition(matrix58);
        com.operations.Matrix.Matrix matrix63 = com.operations.Matrix.MatrixOperations.multiply(matrix50, matrix58);
        int int64 = matrix58.getRows();
        com.operations.Matrix.Matrix matrix65 = com.operations.Matrix.MatrixOperations.multiply(matrix45, matrix58);
        boolean boolean67 = com.operations.Matrix.MatrixUtils.compare(matrix11, matrix65, (double) 2);
        com.operations.Matrix.Matrix matrix68 = com.operations.Matrix.MatrixOperations.transpose(matrix65);
        com.operations.Matrix.Matrix matrix71 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0L, (double) (byte) 10);
        double[] doubleArray74 = new double[] { 10, 'a' };
        double[] doubleArray77 = new double[] { 10, 'a' };
        double[][] doubleArray78 = new double[][] { doubleArray74, doubleArray77 };
        com.operations.Matrix.Matrix matrix79 = new com.operations.Matrix.Matrix(doubleArray78);
        int int80 = matrix79.getCols();
        int int81 = matrix79.getCols();
        int int82 = matrix79.getCols();
        com.operations.Matrix.Matrix[] matrixArray83 = com.operations.Matrix.MatrixDecompositions.luDecomposition(matrix79);
        com.operations.Matrix.Matrix matrix84 = com.operations.Matrix.MatrixOperations.multiply(matrix71, matrix79);
        com.operations.Matrix.Matrix matrix86 = com.operations.Matrix.MatrixTransformations.rotate2D((double) (short) 100);
        boolean boolean88 = com.operations.Matrix.MatrixUtils.compare(matrix79, matrix86, (double) (byte) 0);
        boolean boolean89 = com.operations.Matrix.MatrixUtils.isSymmetric(matrix86);
        boolean boolean90 = com.operations.Matrix.MatrixUtils.isSquare(matrix86);
        com.operations.Matrix.Matrix matrix92 = com.operations.Matrix.MatrixTransformations.rotate2D((double) (short) 100);
        boolean boolean94 = com.operations.Matrix.MatrixUtils.compare(matrix86, matrix92, (double) (byte) 100);
        com.operations.Matrix.Matrix matrix95 = com.operations.Matrix.MatrixOperations.subtract(matrix68, matrix92);
        double double96 = com.operations.Matrix.MatrixUtils.frobeniusNorm(matrix68);
        com.operations.Matrix.Matrix matrix97 = com.operations.Matrix.MatrixOperations.add(matrix2, matrix68);
        boolean boolean98 = com.operations.Matrix.MatrixUtils.isSymmetric(matrix97);
        org.junit.Assert.assertNotNull(matrix2);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertArrayEquals(doubleArray5, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertArrayEquals(doubleArray8, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertNotNull(matrixArray12);
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 137.90576492663388d + "'", double13 == 137.90576492663388d);
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertArrayEquals(doubleArray16, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertArrayEquals(doubleArray19, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertArrayEquals(doubleArray26, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertArrayEquals(doubleArray29, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 2 + "'", int32 == 2);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 2 + "'", int33 == 2);
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertArrayEquals(doubleArray37, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertArrayEquals(doubleArray40, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(matrix45);
        org.junit.Assert.assertNotNull(matrixArray46);
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertNotNull(matrix50);
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertArrayEquals(doubleArray53, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray56);
        org.junit.Assert.assertArrayEquals(doubleArray56, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray57);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 2 + "'", int59 == 2);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 2 + "'", int60 == 2);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 2 + "'", int61 == 2);
        org.junit.Assert.assertNotNull(matrixArray62);
        org.junit.Assert.assertNotNull(matrix63);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 2 + "'", int64 == 2);
        org.junit.Assert.assertNotNull(matrix65);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertNotNull(matrix68);
        org.junit.Assert.assertNotNull(matrix71);
        org.junit.Assert.assertNotNull(doubleArray74);
        org.junit.Assert.assertArrayEquals(doubleArray74, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray77);
        org.junit.Assert.assertArrayEquals(doubleArray77, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray78);
        org.junit.Assert.assertTrue("'" + int80 + "' != '" + 2 + "'", int80 == 2);
        org.junit.Assert.assertTrue("'" + int81 + "' != '" + 2 + "'", int81 == 2);
        org.junit.Assert.assertTrue("'" + int82 + "' != '" + 2 + "'", int82 == 2);
        org.junit.Assert.assertNotNull(matrixArray83);
        org.junit.Assert.assertNotNull(matrix84);
        org.junit.Assert.assertNotNull(matrix86);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + false + "'", boolean89 == false);
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + true + "'", boolean90 == true);
        org.junit.Assert.assertNotNull(matrix92);
        org.junit.Assert.assertTrue("'" + boolean94 + "' != '" + true + "'", boolean94 == true);
        org.junit.Assert.assertNotNull(matrix95);
        org.junit.Assert.assertTrue("'" + double96 + "' != '" + 0.0d + "'", double96 == 0.0d);
        org.junit.Assert.assertNotNull(matrix97);
        org.junit.Assert.assertTrue("'" + boolean98 + "' != '" + true + "'", boolean98 == true);
    }

    @Test
    public void test4655() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4655");
        double[] doubleArray2 = new double[] { 10, 'a' };
        double[] doubleArray5 = new double[] { 10, 'a' };
        double[][] doubleArray6 = new double[][] { doubleArray2, doubleArray5 };
        com.operations.Matrix.Matrix matrix7 = new com.operations.Matrix.Matrix(doubleArray6);
        int int8 = matrix7.getCols();
        int int9 = matrix7.getCols();
        int int10 = matrix7.getCols();
        com.operations.Matrix.Matrix matrix16 = com.operations.Matrix.MatrixUtils.generateRandomMatrix(100, (int) (byte) 1, (int) '#', (int) '#', 1L);
        double double19 = matrix16.getValue((int) '4', 0);
        double double20 = com.operations.Matrix.MatrixUtils.frobeniusNorm(matrix16);
        boolean boolean21 = com.operations.Matrix.MatrixUtils.isSquare(matrix16);
        boolean boolean23 = com.operations.Matrix.MatrixUtils.compare(matrix7, matrix16, (double) 100L);
        double[][] doubleArray24 = matrix7.getData();
        com.operations.Matrix.Matrix matrix26 = com.operations.Matrix.MatrixOperations.scalarMultiply(matrix7, (double) 100);
        com.operations.Matrix.Matrix[] matrixArray27 = com.operations.Matrix.MatrixDecompositions.luDecomposition(matrix26);
        com.operations.Matrix.Matrix matrix30 = com.operations.Matrix.MatrixTransformations.project2D((-1.0d), (double) 1L);
        double double31 = com.operations.Matrix.MatrixUtils.frobeniusNorm(matrix30);
        com.operations.Matrix.Matrix matrix34 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0L, (double) (byte) 10);
        double[] doubleArray37 = new double[] { 10, 'a' };
        double[] doubleArray40 = new double[] { 10, 'a' };
        double[][] doubleArray41 = new double[][] { doubleArray37, doubleArray40 };
        com.operations.Matrix.Matrix matrix42 = new com.operations.Matrix.Matrix(doubleArray41);
        int int43 = matrix42.getCols();
        int int44 = matrix42.getCols();
        int int45 = matrix42.getCols();
        com.operations.Matrix.Matrix[] matrixArray46 = com.operations.Matrix.MatrixDecompositions.luDecomposition(matrix42);
        com.operations.Matrix.Matrix matrix47 = com.operations.Matrix.MatrixOperations.multiply(matrix34, matrix42);
        com.operations.Matrix.Matrix matrix49 = com.operations.Matrix.MatrixTransformations.rotate2D((double) (short) 100);
        boolean boolean51 = com.operations.Matrix.MatrixUtils.compare(matrix42, matrix49, (double) (byte) 0);
        com.operations.Matrix.Matrix[] matrixArray52 = com.operations.Matrix.MatrixDecompositions.luDecomposition(matrix42);
        com.operations.Matrix.Matrix matrix53 = com.operations.Matrix.MatrixOperations.transpose(matrix42);
        com.operations.Matrix.Matrix matrix56 = com.operations.Matrix.MatrixTransformations.scale2D((double) 1.0f, (double) 1);
        com.operations.Matrix.Matrix matrix58 = com.operations.Matrix.MatrixTransformations.rotate2D((double) 1.0f);
        com.operations.Matrix.Matrix matrix61 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0L, (double) (byte) 10);
        int int62 = matrix61.getRows();
        com.operations.Matrix.Matrix matrix64 = com.operations.Matrix.MatrixOperations.scalarMultiply(matrix61, (double) 2);
        double double65 = com.operations.Matrix.MatrixUtils.frobeniusNorm(matrix61);
        com.operations.Matrix.Matrix matrix68 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0L, (double) (byte) 10);
        int int69 = matrix68.getRows();
        com.operations.Matrix.Matrix matrix71 = com.operations.Matrix.MatrixOperations.scalarMultiply(matrix68, (double) 2);
        com.operations.Matrix.Matrix matrix72 = com.operations.Matrix.MatrixOperations.subtract(matrix61, matrix71);
        com.operations.Matrix.Matrix matrix73 = com.operations.Matrix.MatrixOperations.add(matrix58, matrix71);
        boolean boolean75 = com.operations.Matrix.MatrixUtils.compare(matrix56, matrix58, (double) (byte) -1);
        com.operations.Matrix.Matrix matrix76 = com.operations.Matrix.MatrixOperations.subtract(matrix53, matrix56);
        com.operations.Matrix.Matrix matrix77 = com.operations.Matrix.MatrixOperations.multiply(matrix30, matrix56);
        com.operations.Matrix.Matrix matrix79 = com.operations.Matrix.MatrixTransformations.rotate2D((double) (-1L));
        com.operations.Matrix.Matrix matrix81 = com.operations.Matrix.MatrixTransformations.rotate2D((double) (short) 100);
        double[] doubleArray84 = new double[] { 137.90576492663388d, (byte) -1 };
        double[] doubleArray85 = com.operations.Matrix.MatrixSolver.solveGaussian(matrix81, doubleArray84);
        double[] doubleArray86 = com.operations.Matrix.MatrixSolver.solveGaussian(matrix79, doubleArray84);
        double[] doubleArray87 = com.operations.Matrix.MatrixSolver.solveGaussian(matrix77, doubleArray84);
        // The following exception was thrown during execution in test generation
        try {
            double[] doubleArray88 = com.operations.Matrix.MatrixSolver.solveGaussian(matrix26, doubleArray87);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Matrix is singular or nearly singular.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertArrayEquals(doubleArray2, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertArrayEquals(doubleArray5, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 2 + "'", int8 == 2);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 2 + "'", int9 == 2);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 2 + "'", int10 == 2);
        org.junit.Assert.assertNotNull(matrix16);
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 35.0d + "'", double19 == 35.0d);
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 350.0d + "'", double20 == 350.0d);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertNotNull(matrix26);
        org.junit.Assert.assertNotNull(matrixArray27);
        org.junit.Assert.assertNotNull(matrix30);
        org.junit.Assert.assertTrue("'" + double31 + "' != '" + 1.4142135623730951d + "'", double31 == 1.4142135623730951d);
        org.junit.Assert.assertNotNull(matrix34);
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertArrayEquals(doubleArray37, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertArrayEquals(doubleArray40, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 2 + "'", int43 == 2);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 2 + "'", int44 == 2);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 2 + "'", int45 == 2);
        org.junit.Assert.assertNotNull(matrixArray46);
        org.junit.Assert.assertNotNull(matrix47);
        org.junit.Assert.assertNotNull(matrix49);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(matrixArray52);
        org.junit.Assert.assertNotNull(matrix53);
        org.junit.Assert.assertNotNull(matrix56);
        org.junit.Assert.assertNotNull(matrix58);
        org.junit.Assert.assertNotNull(matrix61);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 2 + "'", int62 == 2);
        org.junit.Assert.assertNotNull(matrix64);
        org.junit.Assert.assertTrue("'" + double65 + "' != '" + 10.0d + "'", double65 == 10.0d);
        org.junit.Assert.assertNotNull(matrix68);
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 2 + "'", int69 == 2);
        org.junit.Assert.assertNotNull(matrix71);
        org.junit.Assert.assertNotNull(matrix72);
        org.junit.Assert.assertNotNull(matrix73);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertNotNull(matrix76);
        org.junit.Assert.assertNotNull(matrix77);
        org.junit.Assert.assertNotNull(matrix79);
        org.junit.Assert.assertNotNull(matrix81);
        org.junit.Assert.assertNotNull(doubleArray84);
        org.junit.Assert.assertArrayEquals(doubleArray84, new double[] { 137.90576492663388d, (-1.0d) }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray85);
        org.junit.Assert.assertArrayEquals(doubleArray85, new double[] { (-24.931892522286255d), (-135.63701830716116d) }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray86);
        org.junit.Assert.assertArrayEquals(doubleArray86, new double[] { 137.90221361711127d, 1.4069397643877004d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray87);
        org.junit.Assert.assertArrayEquals(doubleArray87, new double[] { (-137.90576492663388d), (-1.0d) }, 1.0E-15);
    }

    @Test
    public void test4656() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4656");
        com.operations.Matrix.Matrix matrix2 = com.operations.Matrix.MatrixTransformations.project2D((double) ' ', 0.0d);
        boolean boolean3 = com.operations.Matrix.MatrixUtils.isSymmetric(matrix2);
        com.operations.Matrix.Matrix matrix4 = com.operations.Matrix.MatrixOperations.transpose(matrix2);
        com.operations.Matrix.Matrix matrix6 = com.operations.Matrix.MatrixOperations.scalarMultiply(matrix2, 3500.0d);
        com.operations.Matrix.Matrix[] matrixArray7 = com.operations.Matrix.MatrixDecompositions.luDecomposition(matrix2);
        org.junit.Assert.assertNotNull(matrix2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNotNull(matrix4);
        org.junit.Assert.assertNotNull(matrix6);
        org.junit.Assert.assertNotNull(matrixArray7);
    }

    @Test
    public void test4657() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4657");
        com.operations.Matrix.Matrix matrix2 = com.operations.Matrix.MatrixTransformations.scale2D(2.82842712474619d, 626.0990336999411d);
        org.junit.Assert.assertNotNull(matrix2);
    }

    @Test
    public void test4658() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4658");
        com.operations.Matrix.Matrix matrix2 = com.operations.Matrix.MatrixTransformations.scale2D((double) (byte) 10, (double) 10);
        double[] doubleArray5 = new double[] { 10, 'a' };
        double[] doubleArray8 = new double[] { 10, 'a' };
        double[][] doubleArray9 = new double[][] { doubleArray5, doubleArray8 };
        com.operations.Matrix.Matrix matrix10 = new com.operations.Matrix.Matrix(doubleArray9);
        com.operations.Matrix.Matrix matrix11 = new com.operations.Matrix.Matrix(doubleArray9);
        boolean boolean12 = com.operations.Matrix.MatrixUtils.isSquare(matrix11);
        double[] doubleArray15 = new double[] { 10, 'a' };
        double[] doubleArray18 = new double[] { 10, 'a' };
        double[][] doubleArray19 = new double[][] { doubleArray15, doubleArray18 };
        com.operations.Matrix.Matrix matrix20 = new com.operations.Matrix.Matrix(doubleArray19);
        int int21 = matrix20.getCols();
        int int22 = matrix20.getCols();
        matrix20.print();
        double[] doubleArray26 = new double[] { 10, 'a' };
        double[] doubleArray29 = new double[] { 10, 'a' };
        double[][] doubleArray30 = new double[][] { doubleArray26, doubleArray29 };
        com.operations.Matrix.Matrix matrix31 = new com.operations.Matrix.Matrix(doubleArray30);
        boolean boolean33 = com.operations.Matrix.MatrixUtils.compare(matrix20, matrix31, (double) (-1));
        com.operations.Matrix.Matrix matrix34 = com.operations.Matrix.MatrixOperations.subtract(matrix11, matrix31);
        com.operations.Matrix.Matrix[] matrixArray35 = com.operations.Matrix.MatrixDecompositions.luDecomposition(matrix34);
        double[][] doubleArray36 = matrix34.getData();
        com.operations.Matrix.Matrix matrix37 = new com.operations.Matrix.Matrix(doubleArray36);
        com.operations.Matrix.Matrix matrix38 = com.operations.Matrix.MatrixOperations.multiply(matrix2, matrix37);
        boolean boolean39 = com.operations.Matrix.MatrixUtils.isSymmetric(matrix2);
        com.operations.Matrix.Matrix matrix41 = com.operations.Matrix.MatrixTransformations.rotate2D(350.0d);
        com.operations.Matrix.Matrix matrix42 = com.operations.Matrix.MatrixDecompositions.choleskyDecomposition(matrix41);
        int int43 = matrix41.getRows();
        com.operations.Matrix.Matrix matrix44 = com.operations.Matrix.MatrixOperations.subtract(matrix2, matrix41);
        double[] doubleArray47 = new double[] { 10, 'a' };
        double[] doubleArray50 = new double[] { 10, 'a' };
        double[][] doubleArray51 = new double[][] { doubleArray47, doubleArray50 };
        com.operations.Matrix.Matrix matrix52 = new com.operations.Matrix.Matrix(doubleArray51);
        int int53 = matrix52.getCols();
        int int54 = matrix52.getCols();
        boolean boolean55 = com.operations.Matrix.MatrixUtils.isSquare(matrix52);
        com.operations.Matrix.Matrix matrix56 = com.operations.Matrix.MatrixDecompositions.choleskyDecomposition(matrix52);
        com.operations.Matrix.Matrix matrix59 = com.operations.Matrix.MatrixTransformations.project2D(0.0d, (double) 0);
        com.operations.Matrix.Matrix matrix60 = com.operations.Matrix.MatrixOperations.subtract(matrix56, matrix59);
        com.operations.Matrix.Matrix matrix61 = com.operations.Matrix.MatrixOperations.transpose(matrix59);
        com.operations.Matrix.Matrix matrix62 = com.operations.Matrix.MatrixOperations.subtract(matrix2, matrix61);
        double[] doubleArray67 = new double[] { 108225.86824260534d, (short) 1, 364.0054944640259d, 4833.750951739279d };
        // The following exception was thrown during execution in test generation
        try {
            double[] doubleArray68 = com.operations.Matrix.MatrixSolver.solveGaussian(matrix61, doubleArray67);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Constant vector size must match matrix size.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(matrix2);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertArrayEquals(doubleArray5, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertArrayEquals(doubleArray8, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertArrayEquals(doubleArray15, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertArrayEquals(doubleArray18, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 2 + "'", int21 == 2);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 2 + "'", int22 == 2);
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertArrayEquals(doubleArray26, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertArrayEquals(doubleArray29, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(matrix34);
        org.junit.Assert.assertNotNull(matrixArray35);
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertNotNull(matrix38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertNotNull(matrix41);
        org.junit.Assert.assertNotNull(matrix42);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 2 + "'", int43 == 2);
        org.junit.Assert.assertNotNull(matrix44);
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertArrayEquals(doubleArray47, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertArrayEquals(doubleArray50, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 2 + "'", int53 == 2);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 2 + "'", int54 == 2);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + true + "'", boolean55 == true);
        org.junit.Assert.assertNotNull(matrix56);
        org.junit.Assert.assertNotNull(matrix59);
        org.junit.Assert.assertNotNull(matrix60);
        org.junit.Assert.assertNotNull(matrix61);
        org.junit.Assert.assertNotNull(matrix62);
        org.junit.Assert.assertNotNull(doubleArray67);
        org.junit.Assert.assertArrayEquals(doubleArray67, new double[] { 108225.86824260534d, 1.0d, 364.0054944640259d, 4833.750951739279d }, 1.0E-15);
    }

    @Test
    public void test4659() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4659");
        com.operations.Matrix.Matrix matrix2 = com.operations.Matrix.MatrixTransformations.project2D(4826.701772432185d, (double) 97);
        org.junit.Assert.assertNotNull(matrix2);
    }

    @Test
    public void test4660() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4660");
        double[] doubleArray2 = new double[] { 10, 'a' };
        double[] doubleArray5 = new double[] { 10, 'a' };
        double[][] doubleArray6 = new double[][] { doubleArray2, doubleArray5 };
        com.operations.Matrix.Matrix matrix7 = new com.operations.Matrix.Matrix(doubleArray6);
        com.operations.Matrix.Matrix matrix8 = com.operations.Matrix.MatrixOperations.transpose(matrix7);
        com.operations.Matrix.Matrix matrix9 = com.operations.Matrix.MatrixOperations.transpose(matrix8);
        com.operations.Matrix.Matrix[] matrixArray10 = com.operations.Matrix.MatrixDecompositions.luDecomposition(matrix8);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertArrayEquals(doubleArray2, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertArrayEquals(doubleArray5, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertNotNull(matrix8);
        org.junit.Assert.assertNotNull(matrix9);
        org.junit.Assert.assertNotNull(matrixArray10);
    }

    @Test
    public void test4661() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4661");
        com.operations.Matrix.Matrix matrix4 = com.operations.Matrix.MatrixUtils.generateRandomMatrix((int) 'a', (int) (short) 0, (int) '4', (int) (byte) 10);
        org.junit.Assert.assertNotNull(matrix4);
    }

    @Test
    public void test4662() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4662");
        com.operations.Matrix.Matrix matrix2 = com.operations.Matrix.MatrixTransformations.project2D(36.40054944640259d, (double) 2);
        com.operations.Matrix.Matrix matrix3 = com.operations.Matrix.MatrixOperations.transpose(matrix2);
        org.junit.Assert.assertNotNull(matrix2);
        org.junit.Assert.assertNotNull(matrix3);
    }

    @Test
    public void test4663() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4663");
        com.operations.Matrix.Matrix matrix2 = new com.operations.Matrix.Matrix(1, (int) (byte) 0);
    }

    @Test
    public void test4664() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4664");
        double[] doubleArray2 = new double[] { 10, 'a' };
        double[] doubleArray5 = new double[] { 10, 'a' };
        double[][] doubleArray6 = new double[][] { doubleArray2, doubleArray5 };
        com.operations.Matrix.Matrix matrix7 = new com.operations.Matrix.Matrix(doubleArray6);
        com.operations.Matrix.Matrix matrix8 = new com.operations.Matrix.Matrix(doubleArray6);
        com.operations.Matrix.Matrix[] matrixArray9 = com.operations.Matrix.MatrixDecompositions.luDecomposition(matrix8);
        double double10 = com.operations.Matrix.MatrixUtils.frobeniusNorm(matrix8);
        double[] doubleArray13 = new double[] { 10, 'a' };
        double[] doubleArray16 = new double[] { 10, 'a' };
        double[][] doubleArray17 = new double[][] { doubleArray13, doubleArray16 };
        com.operations.Matrix.Matrix matrix18 = new com.operations.Matrix.Matrix(doubleArray17);
        com.operations.Matrix.Matrix matrix19 = new com.operations.Matrix.Matrix(doubleArray17);
        boolean boolean20 = com.operations.Matrix.MatrixUtils.isSquare(matrix19);
        double[] doubleArray23 = new double[] { 10, 'a' };
        double[] doubleArray26 = new double[] { 10, 'a' };
        double[][] doubleArray27 = new double[][] { doubleArray23, doubleArray26 };
        com.operations.Matrix.Matrix matrix28 = new com.operations.Matrix.Matrix(doubleArray27);
        int int29 = matrix28.getCols();
        int int30 = matrix28.getCols();
        matrix28.print();
        double[] doubleArray34 = new double[] { 10, 'a' };
        double[] doubleArray37 = new double[] { 10, 'a' };
        double[][] doubleArray38 = new double[][] { doubleArray34, doubleArray37 };
        com.operations.Matrix.Matrix matrix39 = new com.operations.Matrix.Matrix(doubleArray38);
        boolean boolean41 = com.operations.Matrix.MatrixUtils.compare(matrix28, matrix39, (double) (-1));
        com.operations.Matrix.Matrix matrix42 = com.operations.Matrix.MatrixOperations.subtract(matrix19, matrix39);
        com.operations.Matrix.Matrix[] matrixArray43 = com.operations.Matrix.MatrixDecompositions.luDecomposition(matrix42);
        double[][] doubleArray44 = matrix42.getData();
        com.operations.Matrix.Matrix matrix47 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0L, (double) (byte) 10);
        double[] doubleArray50 = new double[] { 10, 'a' };
        double[] doubleArray53 = new double[] { 10, 'a' };
        double[][] doubleArray54 = new double[][] { doubleArray50, doubleArray53 };
        com.operations.Matrix.Matrix matrix55 = new com.operations.Matrix.Matrix(doubleArray54);
        int int56 = matrix55.getCols();
        int int57 = matrix55.getCols();
        int int58 = matrix55.getCols();
        com.operations.Matrix.Matrix[] matrixArray59 = com.operations.Matrix.MatrixDecompositions.luDecomposition(matrix55);
        com.operations.Matrix.Matrix matrix60 = com.operations.Matrix.MatrixOperations.multiply(matrix47, matrix55);
        int int61 = matrix55.getRows();
        com.operations.Matrix.Matrix matrix62 = com.operations.Matrix.MatrixOperations.multiply(matrix42, matrix55);
        boolean boolean64 = com.operations.Matrix.MatrixUtils.compare(matrix8, matrix62, (double) 2);
        com.operations.Matrix.Matrix matrix65 = com.operations.Matrix.MatrixOperations.transpose(matrix62);
        com.operations.Matrix.Matrix matrix68 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0L, (double) (byte) 10);
        double[] doubleArray71 = new double[] { 10, 'a' };
        double[] doubleArray74 = new double[] { 10, 'a' };
        double[][] doubleArray75 = new double[][] { doubleArray71, doubleArray74 };
        com.operations.Matrix.Matrix matrix76 = new com.operations.Matrix.Matrix(doubleArray75);
        int int77 = matrix76.getCols();
        int int78 = matrix76.getCols();
        int int79 = matrix76.getCols();
        com.operations.Matrix.Matrix[] matrixArray80 = com.operations.Matrix.MatrixDecompositions.luDecomposition(matrix76);
        com.operations.Matrix.Matrix matrix81 = com.operations.Matrix.MatrixOperations.multiply(matrix68, matrix76);
        com.operations.Matrix.Matrix matrix83 = com.operations.Matrix.MatrixTransformations.rotate2D((double) (short) 100);
        boolean boolean85 = com.operations.Matrix.MatrixUtils.compare(matrix76, matrix83, (double) (byte) 0);
        boolean boolean86 = com.operations.Matrix.MatrixUtils.isSymmetric(matrix83);
        boolean boolean87 = com.operations.Matrix.MatrixUtils.isSquare(matrix83);
        com.operations.Matrix.Matrix matrix89 = com.operations.Matrix.MatrixTransformations.rotate2D((double) (short) 100);
        boolean boolean91 = com.operations.Matrix.MatrixUtils.compare(matrix83, matrix89, (double) (byte) 100);
        com.operations.Matrix.Matrix matrix92 = com.operations.Matrix.MatrixOperations.subtract(matrix65, matrix89);
        com.operations.Matrix.Matrix matrix93 = com.operations.Matrix.MatrixOperations.transpose(matrix92);
        // The following exception was thrown during execution in test generation
        try {
            double double96 = matrix93.getValue((int) (byte) 0, 2);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertArrayEquals(doubleArray2, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertArrayEquals(doubleArray5, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertNotNull(matrixArray9);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 137.90576492663388d + "'", double10 == 137.90576492663388d);
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertArrayEquals(doubleArray13, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertArrayEquals(doubleArray16, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertArrayEquals(doubleArray23, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertArrayEquals(doubleArray26, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 2 + "'", int29 == 2);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 2 + "'", int30 == 2);
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertArrayEquals(doubleArray34, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertArrayEquals(doubleArray37, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(matrix42);
        org.junit.Assert.assertNotNull(matrixArray43);
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertNotNull(matrix47);
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertArrayEquals(doubleArray50, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertArrayEquals(doubleArray53, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray54);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 2 + "'", int56 == 2);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 2 + "'", int57 == 2);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 2 + "'", int58 == 2);
        org.junit.Assert.assertNotNull(matrixArray59);
        org.junit.Assert.assertNotNull(matrix60);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 2 + "'", int61 == 2);
        org.junit.Assert.assertNotNull(matrix62);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertNotNull(matrix65);
        org.junit.Assert.assertNotNull(matrix68);
        org.junit.Assert.assertNotNull(doubleArray71);
        org.junit.Assert.assertArrayEquals(doubleArray71, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray74);
        org.junit.Assert.assertArrayEquals(doubleArray74, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray75);
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + 2 + "'", int77 == 2);
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + 2 + "'", int78 == 2);
        org.junit.Assert.assertTrue("'" + int79 + "' != '" + 2 + "'", int79 == 2);
        org.junit.Assert.assertNotNull(matrixArray80);
        org.junit.Assert.assertNotNull(matrix81);
        org.junit.Assert.assertNotNull(matrix83);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + true + "'", boolean87 == true);
        org.junit.Assert.assertNotNull(matrix89);
        org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + true + "'", boolean91 == true);
        org.junit.Assert.assertNotNull(matrix92);
        org.junit.Assert.assertNotNull(matrix93);
    }

    @Test
    public void test4665() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4665");
        com.operations.Matrix.Matrix matrix2 = com.operations.Matrix.MatrixTransformations.project2D((double) 1, 364.0054944640259d);
        com.operations.Matrix.Matrix matrix4 = com.operations.Matrix.MatrixOperations.scalarMultiply(matrix2, (double) (-1));
        com.operations.Matrix.Matrix matrix6 = com.operations.Matrix.MatrixOperations.scalarMultiply(matrix2, 69377.65132237368d);
        org.junit.Assert.assertNotNull(matrix2);
        org.junit.Assert.assertNotNull(matrix4);
        org.junit.Assert.assertNotNull(matrix6);
    }

    @Test
    public void test4666() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4666");
        com.operations.Matrix.Matrix matrix2 = com.operations.Matrix.MatrixTransformations.scale2D(0.0d, 0.0d);
        com.operations.Matrix.Matrix matrix5 = com.operations.Matrix.MatrixTransformations.scale2D((double) 1, (-1.0d));
        com.operations.Matrix.Matrix matrix8 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0L, (double) (byte) 10);
        double[] doubleArray11 = new double[] { 10, 'a' };
        double[] doubleArray14 = new double[] { 10, 'a' };
        double[][] doubleArray15 = new double[][] { doubleArray11, doubleArray14 };
        com.operations.Matrix.Matrix matrix16 = new com.operations.Matrix.Matrix(doubleArray15);
        int int17 = matrix16.getCols();
        int int18 = matrix16.getCols();
        int int19 = matrix16.getCols();
        com.operations.Matrix.Matrix[] matrixArray20 = com.operations.Matrix.MatrixDecompositions.luDecomposition(matrix16);
        com.operations.Matrix.Matrix matrix21 = com.operations.Matrix.MatrixOperations.multiply(matrix8, matrix16);
        int int22 = matrix16.getRows();
        int int23 = matrix16.getCols();
        com.operations.Matrix.Matrix matrix26 = com.operations.Matrix.MatrixTransformations.project2D((double) (-1L), (double) (short) 100);
        com.operations.Matrix.Matrix matrix27 = com.operations.Matrix.MatrixOperations.subtract(matrix16, matrix26);
        com.operations.Matrix.Matrix matrix28 = com.operations.Matrix.MatrixOperations.add(matrix5, matrix27);
        com.operations.Matrix.Matrix matrix29 = com.operations.Matrix.MatrixOperations.add(matrix2, matrix5);
        double[] doubleArray32 = new double[] { 10, 'a' };
        double[] doubleArray35 = new double[] { 10, 'a' };
        double[][] doubleArray36 = new double[][] { doubleArray32, doubleArray35 };
        com.operations.Matrix.Matrix matrix37 = new com.operations.Matrix.Matrix(doubleArray36);
        com.operations.Matrix.Matrix matrix38 = new com.operations.Matrix.Matrix(doubleArray36);
        com.operations.Matrix.Matrix matrix40 = com.operations.Matrix.MatrixTransformations.rotate2D((double) (short) 100);
        double[] doubleArray43 = new double[] { 137.90576492663388d, (byte) -1 };
        double[] doubleArray44 = com.operations.Matrix.MatrixSolver.solveGaussian(matrix40, doubleArray43);
        com.operations.Matrix.Matrix matrix45 = com.operations.Matrix.MatrixOperations.add(matrix38, matrix40);
        com.operations.Matrix.Matrix matrix46 = com.operations.Matrix.MatrixOperations.transpose(matrix40);
        int int47 = matrix40.getCols();
        com.operations.Matrix.Matrix matrix50 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0L, (double) (byte) 10);
        double[] doubleArray53 = new double[] { 10, 'a' };
        double[] doubleArray56 = new double[] { 10, 'a' };
        double[][] doubleArray57 = new double[][] { doubleArray53, doubleArray56 };
        com.operations.Matrix.Matrix matrix58 = new com.operations.Matrix.Matrix(doubleArray57);
        int int59 = matrix58.getCols();
        int int60 = matrix58.getCols();
        int int61 = matrix58.getCols();
        com.operations.Matrix.Matrix[] matrixArray62 = com.operations.Matrix.MatrixDecompositions.luDecomposition(matrix58);
        com.operations.Matrix.Matrix matrix63 = com.operations.Matrix.MatrixOperations.multiply(matrix50, matrix58);
        com.operations.Matrix.Matrix matrix65 = com.operations.Matrix.MatrixTransformations.rotate2D((double) (short) 100);
        boolean boolean67 = com.operations.Matrix.MatrixUtils.compare(matrix58, matrix65, (double) (byte) 0);
        boolean boolean68 = com.operations.Matrix.MatrixUtils.isSymmetric(matrix65);
        boolean boolean69 = com.operations.Matrix.MatrixUtils.isSquare(matrix65);
        com.operations.Matrix.Matrix matrix71 = com.operations.Matrix.MatrixTransformations.rotate2D((double) (short) 100);
        boolean boolean73 = com.operations.Matrix.MatrixUtils.compare(matrix65, matrix71, (double) (byte) 100);
        matrix71.print();
        com.operations.Matrix.Matrix matrix75 = com.operations.Matrix.MatrixOperations.add(matrix40, matrix71);
        com.operations.Matrix.Matrix matrix76 = com.operations.Matrix.MatrixOperations.subtract(matrix2, matrix40);
        com.operations.Matrix.Matrix matrix78 = com.operations.Matrix.MatrixTransformations.rotate2D((double) (short) -1);
        boolean boolean79 = com.operations.Matrix.MatrixUtils.isSquare(matrix78);
        boolean boolean81 = com.operations.Matrix.MatrixUtils.compare(matrix40, matrix78, 10.04987562112089d);
        com.operations.Matrix.Matrix[] matrixArray82 = com.operations.Matrix.MatrixDecompositions.luDecomposition(matrix78);
        org.junit.Assert.assertNotNull(matrix2);
        org.junit.Assert.assertNotNull(matrix5);
        org.junit.Assert.assertNotNull(matrix8);
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertArrayEquals(doubleArray11, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertArrayEquals(doubleArray14, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 2 + "'", int17 == 2);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 2 + "'", int18 == 2);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 2 + "'", int19 == 2);
        org.junit.Assert.assertNotNull(matrixArray20);
        org.junit.Assert.assertNotNull(matrix21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 2 + "'", int22 == 2);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 2 + "'", int23 == 2);
        org.junit.Assert.assertNotNull(matrix26);
        org.junit.Assert.assertNotNull(matrix27);
        org.junit.Assert.assertNotNull(matrix28);
        org.junit.Assert.assertNotNull(matrix29);
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertArrayEquals(doubleArray32, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertArrayEquals(doubleArray35, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertNotNull(matrix40);
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertArrayEquals(doubleArray43, new double[] { 137.90576492663388d, (-1.0d) }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertArrayEquals(doubleArray44, new double[] { (-24.931892522286255d), (-135.63701830716116d) }, 1.0E-15);
        org.junit.Assert.assertNotNull(matrix45);
        org.junit.Assert.assertNotNull(matrix46);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 2 + "'", int47 == 2);
        org.junit.Assert.assertNotNull(matrix50);
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertArrayEquals(doubleArray53, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray56);
        org.junit.Assert.assertArrayEquals(doubleArray56, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray57);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 2 + "'", int59 == 2);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 2 + "'", int60 == 2);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 2 + "'", int61 == 2);
        org.junit.Assert.assertNotNull(matrixArray62);
        org.junit.Assert.assertNotNull(matrix63);
        org.junit.Assert.assertNotNull(matrix65);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + true + "'", boolean69 == true);
        org.junit.Assert.assertNotNull(matrix71);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + true + "'", boolean73 == true);
        org.junit.Assert.assertNotNull(matrix75);
        org.junit.Assert.assertNotNull(matrix76);
        org.junit.Assert.assertNotNull(matrix78);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + true + "'", boolean79 == true);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + true + "'", boolean81 == true);
        org.junit.Assert.assertNotNull(matrixArray82);
    }

    @Test
    public void test4667() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4667");
        com.operations.Matrix.Matrix matrix0 = null;
        // The following exception was thrown during execution in test generation
        try {
            com.operations.Matrix.Matrix matrix2 = com.operations.Matrix.MatrixOperations.scalarMultiply(matrix0, 98.07140255956371d);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test4668() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4668");
        com.operations.Matrix.Matrix matrix5 = com.operations.Matrix.MatrixUtils.generateRandomMatrix(32, (int) 'a', 100, 52, 0L);
        org.junit.Assert.assertNotNull(matrix5);
    }

    @Test
    public void test4669() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4669");
        com.operations.Matrix.Matrix matrix2 = com.operations.Matrix.MatrixTransformations.project2D(0.0d, (double) 0);
        com.operations.Matrix.Matrix[] matrixArray3 = com.operations.Matrix.MatrixDecompositions.luDecomposition(matrix2);
        com.operations.Matrix.Matrix matrix6 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0L, (double) (byte) 10);
        int int7 = matrix6.getRows();
        com.operations.Matrix.Matrix matrix9 = com.operations.Matrix.MatrixOperations.scalarMultiply(matrix6, (double) 2);
        double double10 = com.operations.Matrix.MatrixUtils.frobeniusNorm(matrix6);
        int int11 = matrix6.getRows();
        com.operations.Matrix.Matrix matrix12 = com.operations.Matrix.MatrixOperations.transpose(matrix6);
        com.operations.Matrix.Matrix matrix13 = com.operations.Matrix.MatrixOperations.multiply(matrix2, matrix12);
        double[][] doubleArray14 = matrix2.getData();
        com.operations.Matrix.Matrix matrix15 = new com.operations.Matrix.Matrix(doubleArray14);
        com.operations.Matrix.Matrix matrix16 = new com.operations.Matrix.Matrix(doubleArray14);
        com.operations.Matrix.Matrix[] matrixArray17 = com.operations.Matrix.MatrixDecompositions.luDecomposition(matrix16);
        org.junit.Assert.assertNotNull(matrix2);
        org.junit.Assert.assertNotNull(matrixArray3);
        org.junit.Assert.assertNotNull(matrix6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 2 + "'", int7 == 2);
        org.junit.Assert.assertNotNull(matrix9);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 10.0d + "'", double10 == 10.0d);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 2 + "'", int11 == 2);
        org.junit.Assert.assertNotNull(matrix12);
        org.junit.Assert.assertNotNull(matrix13);
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertNotNull(matrixArray17);
    }

    @Test
    public void test4670() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4670");
        com.operations.Matrix.Matrix matrix1 = com.operations.Matrix.MatrixTransformations.rotate2D(1.414213562373095d);
        com.operations.Matrix.Matrix matrix3 = com.operations.Matrix.MatrixTransformations.rotate2D((double) (short) 100);
        double[] doubleArray6 = new double[] { 137.90576492663388d, (byte) -1 };
        double[] doubleArray7 = com.operations.Matrix.MatrixSolver.solveGaussian(matrix3, doubleArray6);
        com.operations.Matrix.Matrix matrix10 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0L, (double) (byte) 10);
        double[] doubleArray13 = new double[] { 10, 'a' };
        double[] doubleArray16 = new double[] { 10, 'a' };
        double[][] doubleArray17 = new double[][] { doubleArray13, doubleArray16 };
        com.operations.Matrix.Matrix matrix18 = new com.operations.Matrix.Matrix(doubleArray17);
        int int19 = matrix18.getCols();
        int int20 = matrix18.getCols();
        int int21 = matrix18.getCols();
        com.operations.Matrix.Matrix[] matrixArray22 = com.operations.Matrix.MatrixDecompositions.luDecomposition(matrix18);
        com.operations.Matrix.Matrix matrix23 = com.operations.Matrix.MatrixOperations.multiply(matrix10, matrix18);
        boolean boolean25 = com.operations.Matrix.MatrixUtils.compare(matrix3, matrix10, (double) (-1L));
        com.operations.Matrix.Matrix matrix27 = com.operations.Matrix.MatrixTransformations.rotate2D((-1.0d));
        com.operations.Matrix.Matrix matrix29 = com.operations.Matrix.MatrixTransformations.rotate2D((double) (-1L));
        com.operations.Matrix.Matrix matrix31 = com.operations.Matrix.MatrixTransformations.rotate2D((double) (short) 100);
        double[] doubleArray34 = new double[] { 137.90576492663388d, (byte) -1 };
        double[] doubleArray35 = com.operations.Matrix.MatrixSolver.solveGaussian(matrix31, doubleArray34);
        double[] doubleArray36 = com.operations.Matrix.MatrixSolver.solveGaussian(matrix29, doubleArray34);
        double[] doubleArray37 = com.operations.Matrix.MatrixSolver.solveGaussian(matrix27, doubleArray34);
        boolean boolean39 = com.operations.Matrix.MatrixUtils.compare(matrix10, matrix27, (double) '4');
        double[] doubleArray42 = new double[] { 10, 'a' };
        double[] doubleArray45 = new double[] { 10, 'a' };
        double[][] doubleArray46 = new double[][] { doubleArray42, doubleArray45 };
        com.operations.Matrix.Matrix matrix47 = new com.operations.Matrix.Matrix(doubleArray46);
        com.operations.Matrix.Matrix matrix48 = new com.operations.Matrix.Matrix(doubleArray46);
        com.operations.Matrix.Matrix matrix50 = com.operations.Matrix.MatrixTransformations.rotate2D((double) (short) 100);
        double[] doubleArray53 = new double[] { 137.90576492663388d, (byte) -1 };
        double[] doubleArray54 = com.operations.Matrix.MatrixSolver.solveGaussian(matrix50, doubleArray53);
        com.operations.Matrix.Matrix matrix55 = com.operations.Matrix.MatrixOperations.add(matrix48, matrix50);
        com.operations.Matrix.Matrix matrix56 = com.operations.Matrix.MatrixOperations.transpose(matrix50);
        int int57 = matrix50.getCols();
        com.operations.Matrix.Matrix matrix60 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0L, (double) (byte) 10);
        double[] doubleArray63 = new double[] { 10, 'a' };
        double[] doubleArray66 = new double[] { 10, 'a' };
        double[][] doubleArray67 = new double[][] { doubleArray63, doubleArray66 };
        com.operations.Matrix.Matrix matrix68 = new com.operations.Matrix.Matrix(doubleArray67);
        int int69 = matrix68.getCols();
        int int70 = matrix68.getCols();
        int int71 = matrix68.getCols();
        com.operations.Matrix.Matrix[] matrixArray72 = com.operations.Matrix.MatrixDecompositions.luDecomposition(matrix68);
        com.operations.Matrix.Matrix matrix73 = com.operations.Matrix.MatrixOperations.multiply(matrix60, matrix68);
        com.operations.Matrix.Matrix matrix75 = com.operations.Matrix.MatrixTransformations.rotate2D((double) (short) 100);
        boolean boolean77 = com.operations.Matrix.MatrixUtils.compare(matrix68, matrix75, (double) (byte) 0);
        boolean boolean78 = com.operations.Matrix.MatrixUtils.isSymmetric(matrix75);
        boolean boolean79 = com.operations.Matrix.MatrixUtils.isSquare(matrix75);
        com.operations.Matrix.Matrix matrix81 = com.operations.Matrix.MatrixTransformations.rotate2D((double) (short) 100);
        boolean boolean83 = com.operations.Matrix.MatrixUtils.compare(matrix75, matrix81, (double) (byte) 100);
        matrix81.print();
        com.operations.Matrix.Matrix matrix85 = com.operations.Matrix.MatrixOperations.add(matrix50, matrix81);
        com.operations.Matrix.Matrix matrix86 = com.operations.Matrix.MatrixOperations.subtract(matrix27, matrix81);
        com.operations.Matrix.Matrix matrix87 = com.operations.Matrix.MatrixOperations.subtract(matrix1, matrix86);
        java.lang.Class<?> wildcardClass88 = matrix1.getClass();
        org.junit.Assert.assertNotNull(matrix1);
        org.junit.Assert.assertNotNull(matrix3);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertArrayEquals(doubleArray6, new double[] { 137.90576492663388d, (-1.0d) }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertArrayEquals(doubleArray7, new double[] { (-24.931892522286255d), (-135.63701830716116d) }, 1.0E-15);
        org.junit.Assert.assertNotNull(matrix10);
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertArrayEquals(doubleArray13, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertArrayEquals(doubleArray16, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 2 + "'", int19 == 2);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 2 + "'", int20 == 2);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 2 + "'", int21 == 2);
        org.junit.Assert.assertNotNull(matrixArray22);
        org.junit.Assert.assertNotNull(matrix23);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(matrix27);
        org.junit.Assert.assertNotNull(matrix29);
        org.junit.Assert.assertNotNull(matrix31);
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertArrayEquals(doubleArray34, new double[] { 137.90576492663388d, (-1.0d) }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertArrayEquals(doubleArray35, new double[] { (-24.931892522286255d), (-135.63701830716116d) }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertArrayEquals(doubleArray36, new double[] { 137.90221361711127d, 1.4069397643877004d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertArrayEquals(doubleArray37, new double[] { 137.90221361711127d, 1.4069397643877004d }, 1.0E-15);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertArrayEquals(doubleArray42, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertArrayEquals(doubleArray45, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray46);
        org.junit.Assert.assertNotNull(matrix50);
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertArrayEquals(doubleArray53, new double[] { 137.90576492663388d, (-1.0d) }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray54);
        org.junit.Assert.assertArrayEquals(doubleArray54, new double[] { (-24.931892522286255d), (-135.63701830716116d) }, 1.0E-15);
        org.junit.Assert.assertNotNull(matrix55);
        org.junit.Assert.assertNotNull(matrix56);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 2 + "'", int57 == 2);
        org.junit.Assert.assertNotNull(matrix60);
        org.junit.Assert.assertNotNull(doubleArray63);
        org.junit.Assert.assertArrayEquals(doubleArray63, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray66);
        org.junit.Assert.assertArrayEquals(doubleArray66, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray67);
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 2 + "'", int69 == 2);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 2 + "'", int70 == 2);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 2 + "'", int71 == 2);
        org.junit.Assert.assertNotNull(matrixArray72);
        org.junit.Assert.assertNotNull(matrix73);
        org.junit.Assert.assertNotNull(matrix75);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + true + "'", boolean79 == true);
        org.junit.Assert.assertNotNull(matrix81);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + true + "'", boolean83 == true);
        org.junit.Assert.assertNotNull(matrix85);
        org.junit.Assert.assertNotNull(matrix86);
        org.junit.Assert.assertNotNull(matrix87);
        org.junit.Assert.assertNotNull(wildcardClass88);
    }

    @Test
    public void test4671() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4671");
        com.operations.Matrix.Matrix matrix5 = com.operations.Matrix.MatrixUtils.generateRandomMatrix((int) (short) 100, 0, 0, 2, (long) (short) 1);
        int int6 = matrix5.getRows();
        org.junit.Assert.assertNotNull(matrix5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 100 + "'", int6 == 100);
    }

    @Test
    public void test4672() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4672");
        com.operations.Matrix.Matrix matrix1 = com.operations.Matrix.MatrixTransformations.rotate2D((double) 10);
        com.operations.Matrix.Matrix matrix3 = com.operations.Matrix.MatrixTransformations.rotate2D((double) 1.0f);
        com.operations.Matrix.Matrix matrix6 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0L, (double) (byte) 10);
        int int7 = matrix6.getRows();
        com.operations.Matrix.Matrix matrix9 = com.operations.Matrix.MatrixOperations.scalarMultiply(matrix6, (double) 2);
        double double10 = com.operations.Matrix.MatrixUtils.frobeniusNorm(matrix6);
        com.operations.Matrix.Matrix matrix13 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0L, (double) (byte) 10);
        int int14 = matrix13.getRows();
        com.operations.Matrix.Matrix matrix16 = com.operations.Matrix.MatrixOperations.scalarMultiply(matrix13, (double) 2);
        com.operations.Matrix.Matrix matrix17 = com.operations.Matrix.MatrixOperations.subtract(matrix6, matrix16);
        com.operations.Matrix.Matrix matrix18 = com.operations.Matrix.MatrixOperations.add(matrix3, matrix16);
        matrix3.print();
        double[] doubleArray22 = new double[] { 10, 'a' };
        double[] doubleArray25 = new double[] { 10, 'a' };
        double[][] doubleArray26 = new double[][] { doubleArray22, doubleArray25 };
        com.operations.Matrix.Matrix matrix27 = new com.operations.Matrix.Matrix(doubleArray26);
        com.operations.Matrix.Matrix matrix28 = com.operations.Matrix.MatrixOperations.transpose(matrix27);
        com.operations.Matrix.Matrix matrix31 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0L, (double) (byte) 10);
        int int32 = matrix31.getRows();
        com.operations.Matrix.Matrix matrix38 = com.operations.Matrix.MatrixUtils.generateRandomMatrix(100, (int) (byte) 1, (int) '#', (int) '#', 1L);
        boolean boolean40 = com.operations.Matrix.MatrixUtils.compare(matrix31, matrix38, (double) 1.0f);
        com.operations.Matrix.Matrix matrix42 = com.operations.Matrix.MatrixOperations.scalarMultiply(matrix31, (double) 1L);
        matrix31.print();
        com.operations.Matrix.Matrix matrix44 = com.operations.Matrix.MatrixOperations.multiply(matrix28, matrix31);
        com.operations.Matrix.Matrix matrix45 = com.operations.Matrix.MatrixOperations.multiply(matrix3, matrix31);
        com.operations.Matrix.Matrix matrix46 = com.operations.Matrix.MatrixOperations.subtract(matrix1, matrix45);
        int int47 = matrix46.getCols();
        com.operations.Matrix.Matrix matrix50 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0L, (double) (byte) 10);
        int int51 = matrix50.getRows();
        com.operations.Matrix.Matrix matrix54 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0L, (double) (byte) 10);
        int int55 = matrix54.getRows();
        com.operations.Matrix.Matrix matrix57 = com.operations.Matrix.MatrixOperations.scalarMultiply(matrix54, (double) 2);
        com.operations.Matrix.Matrix matrix58 = com.operations.Matrix.MatrixOperations.subtract(matrix50, matrix54);
        com.operations.Matrix.Matrix matrix61 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0L, (double) (byte) 10);
        int int62 = matrix61.getRows();
        com.operations.Matrix.Matrix matrix68 = com.operations.Matrix.MatrixUtils.generateRandomMatrix(100, (int) (byte) 1, (int) '#', (int) '#', 1L);
        boolean boolean70 = com.operations.Matrix.MatrixUtils.compare(matrix61, matrix68, (double) 1.0f);
        com.operations.Matrix.Matrix matrix72 = com.operations.Matrix.MatrixOperations.scalarMultiply(matrix61, (double) 1L);
        boolean boolean74 = com.operations.Matrix.MatrixUtils.compare(matrix58, matrix72, 0.0d);
        com.operations.Matrix.Matrix matrix76 = com.operations.Matrix.MatrixOperations.scalarMultiply(matrix58, 10.0d);
        com.operations.Matrix.Matrix matrix77 = com.operations.Matrix.MatrixOperations.add(matrix46, matrix58);
        boolean boolean78 = com.operations.Matrix.MatrixUtils.isSymmetric(matrix77);
        org.junit.Assert.assertNotNull(matrix1);
        org.junit.Assert.assertNotNull(matrix3);
        org.junit.Assert.assertNotNull(matrix6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 2 + "'", int7 == 2);
        org.junit.Assert.assertNotNull(matrix9);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 10.0d + "'", double10 == 10.0d);
        org.junit.Assert.assertNotNull(matrix13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 2 + "'", int14 == 2);
        org.junit.Assert.assertNotNull(matrix16);
        org.junit.Assert.assertNotNull(matrix17);
        org.junit.Assert.assertNotNull(matrix18);
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertArrayEquals(doubleArray22, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertArrayEquals(doubleArray25, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertNotNull(matrix28);
        org.junit.Assert.assertNotNull(matrix31);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 2 + "'", int32 == 2);
        org.junit.Assert.assertNotNull(matrix38);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(matrix42);
        org.junit.Assert.assertNotNull(matrix44);
        org.junit.Assert.assertNotNull(matrix45);
        org.junit.Assert.assertNotNull(matrix46);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 2 + "'", int47 == 2);
        org.junit.Assert.assertNotNull(matrix50);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 2 + "'", int51 == 2);
        org.junit.Assert.assertNotNull(matrix54);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 2 + "'", int55 == 2);
        org.junit.Assert.assertNotNull(matrix57);
        org.junit.Assert.assertNotNull(matrix58);
        org.junit.Assert.assertNotNull(matrix61);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 2 + "'", int62 == 2);
        org.junit.Assert.assertNotNull(matrix68);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertNotNull(matrix72);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertNotNull(matrix76);
        org.junit.Assert.assertNotNull(matrix77);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
    }

    @Test
    public void test4673() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4673");
        com.operations.Matrix.Matrix matrix1 = com.operations.Matrix.MatrixTransformations.rotate2D(100.0d);
        int int2 = matrix1.getCols();
        com.operations.Matrix.Matrix matrix5 = com.operations.Matrix.MatrixTransformations.project2D((double) 1, 364.0054944640259d);
        com.operations.Matrix.Matrix matrix6 = com.operations.Matrix.MatrixOperations.multiply(matrix1, matrix5);
        java.lang.Class<?> wildcardClass7 = matrix1.getClass();
        org.junit.Assert.assertNotNull(matrix1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 2 + "'", int2 == 2);
        org.junit.Assert.assertNotNull(matrix5);
        org.junit.Assert.assertNotNull(matrix6);
        org.junit.Assert.assertNotNull(wildcardClass7);
    }

    @Test
    public void test4674() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4674");
        com.operations.Matrix.Matrix matrix2 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0L, (double) 10L);
        com.operations.Matrix.Matrix matrix5 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0L, (double) (byte) 10);
        double[] doubleArray8 = new double[] { 10, 'a' };
        double[] doubleArray11 = new double[] { 10, 'a' };
        double[][] doubleArray12 = new double[][] { doubleArray8, doubleArray11 };
        com.operations.Matrix.Matrix matrix13 = new com.operations.Matrix.Matrix(doubleArray12);
        int int14 = matrix13.getCols();
        int int15 = matrix13.getCols();
        int int16 = matrix13.getCols();
        com.operations.Matrix.Matrix[] matrixArray17 = com.operations.Matrix.MatrixDecompositions.luDecomposition(matrix13);
        com.operations.Matrix.Matrix matrix18 = com.operations.Matrix.MatrixOperations.multiply(matrix5, matrix13);
        com.operations.Matrix.Matrix matrix20 = com.operations.Matrix.MatrixTransformations.rotate2D((double) (short) 100);
        boolean boolean22 = com.operations.Matrix.MatrixUtils.compare(matrix13, matrix20, (double) (byte) 0);
        double[] doubleArray25 = new double[] { 10, 'a' };
        double[] doubleArray28 = new double[] { 10, 'a' };
        double[][] doubleArray29 = new double[][] { doubleArray25, doubleArray28 };
        com.operations.Matrix.Matrix matrix30 = new com.operations.Matrix.Matrix(doubleArray29);
        com.operations.Matrix.Matrix matrix31 = new com.operations.Matrix.Matrix(doubleArray29);
        com.operations.Matrix.Matrix matrix32 = new com.operations.Matrix.Matrix(doubleArray29);
        boolean boolean34 = com.operations.Matrix.MatrixUtils.compare(matrix13, matrix32, (double) (-1));
        com.operations.Matrix.Matrix matrix36 = com.operations.Matrix.MatrixTransformations.rotate2D((double) (short) 100);
        double[] doubleArray39 = new double[] { 137.90576492663388d, (byte) -1 };
        double[] doubleArray40 = com.operations.Matrix.MatrixSolver.solveGaussian(matrix36, doubleArray39);
        com.operations.Matrix.Matrix matrix43 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0L, (double) (byte) 10);
        double[] doubleArray46 = new double[] { 10, 'a' };
        double[] doubleArray49 = new double[] { 10, 'a' };
        double[][] doubleArray50 = new double[][] { doubleArray46, doubleArray49 };
        com.operations.Matrix.Matrix matrix51 = new com.operations.Matrix.Matrix(doubleArray50);
        int int52 = matrix51.getCols();
        int int53 = matrix51.getCols();
        int int54 = matrix51.getCols();
        com.operations.Matrix.Matrix[] matrixArray55 = com.operations.Matrix.MatrixDecompositions.luDecomposition(matrix51);
        com.operations.Matrix.Matrix matrix56 = com.operations.Matrix.MatrixOperations.multiply(matrix43, matrix51);
        boolean boolean58 = com.operations.Matrix.MatrixUtils.compare(matrix36, matrix43, (double) (-1L));
        com.operations.Matrix.Matrix matrix59 = com.operations.Matrix.MatrixOperations.add(matrix32, matrix43);
        boolean boolean61 = com.operations.Matrix.MatrixUtils.compare(matrix2, matrix59, 146.4308710620817d);
        matrix59.print();
        com.operations.Matrix.Matrix matrix63 = com.operations.Matrix.MatrixOperations.transpose(matrix59);
        org.junit.Assert.assertNotNull(matrix2);
        org.junit.Assert.assertNotNull(matrix5);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertArrayEquals(doubleArray8, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertArrayEquals(doubleArray11, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 2 + "'", int14 == 2);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 2 + "'", int15 == 2);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 2 + "'", int16 == 2);
        org.junit.Assert.assertNotNull(matrixArray17);
        org.junit.Assert.assertNotNull(matrix18);
        org.junit.Assert.assertNotNull(matrix20);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertArrayEquals(doubleArray25, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertArrayEquals(doubleArray28, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(matrix36);
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertArrayEquals(doubleArray39, new double[] { 137.90576492663388d, (-1.0d) }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertArrayEquals(doubleArray40, new double[] { (-24.931892522286255d), (-135.63701830716116d) }, 1.0E-15);
        org.junit.Assert.assertNotNull(matrix43);
        org.junit.Assert.assertNotNull(doubleArray46);
        org.junit.Assert.assertArrayEquals(doubleArray46, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertArrayEquals(doubleArray49, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 2 + "'", int52 == 2);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 2 + "'", int53 == 2);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 2 + "'", int54 == 2);
        org.junit.Assert.assertNotNull(matrixArray55);
        org.junit.Assert.assertNotNull(matrix56);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(matrix59);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + true + "'", boolean61 == true);
        org.junit.Assert.assertNotNull(matrix63);
    }

    @Test
    public void test4675() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4675");
        com.operations.Matrix.Matrix matrix2 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0L, (double) 10L);
        com.operations.Matrix.Matrix matrix5 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0L, (double) (byte) 10);
        double[] doubleArray8 = new double[] { 10, 'a' };
        double[] doubleArray11 = new double[] { 10, 'a' };
        double[][] doubleArray12 = new double[][] { doubleArray8, doubleArray11 };
        com.operations.Matrix.Matrix matrix13 = new com.operations.Matrix.Matrix(doubleArray12);
        int int14 = matrix13.getCols();
        int int15 = matrix13.getCols();
        int int16 = matrix13.getCols();
        com.operations.Matrix.Matrix[] matrixArray17 = com.operations.Matrix.MatrixDecompositions.luDecomposition(matrix13);
        com.operations.Matrix.Matrix matrix18 = com.operations.Matrix.MatrixOperations.multiply(matrix5, matrix13);
        com.operations.Matrix.Matrix matrix20 = com.operations.Matrix.MatrixTransformations.rotate2D((double) (short) 100);
        boolean boolean22 = com.operations.Matrix.MatrixUtils.compare(matrix13, matrix20, (double) (byte) 0);
        double[] doubleArray25 = new double[] { 10, 'a' };
        double[] doubleArray28 = new double[] { 10, 'a' };
        double[][] doubleArray29 = new double[][] { doubleArray25, doubleArray28 };
        com.operations.Matrix.Matrix matrix30 = new com.operations.Matrix.Matrix(doubleArray29);
        com.operations.Matrix.Matrix matrix31 = new com.operations.Matrix.Matrix(doubleArray29);
        com.operations.Matrix.Matrix matrix32 = new com.operations.Matrix.Matrix(doubleArray29);
        boolean boolean34 = com.operations.Matrix.MatrixUtils.compare(matrix13, matrix32, (double) (-1));
        com.operations.Matrix.Matrix matrix36 = com.operations.Matrix.MatrixTransformations.rotate2D((double) (short) 100);
        double[] doubleArray39 = new double[] { 137.90576492663388d, (byte) -1 };
        double[] doubleArray40 = com.operations.Matrix.MatrixSolver.solveGaussian(matrix36, doubleArray39);
        com.operations.Matrix.Matrix matrix43 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0L, (double) (byte) 10);
        double[] doubleArray46 = new double[] { 10, 'a' };
        double[] doubleArray49 = new double[] { 10, 'a' };
        double[][] doubleArray50 = new double[][] { doubleArray46, doubleArray49 };
        com.operations.Matrix.Matrix matrix51 = new com.operations.Matrix.Matrix(doubleArray50);
        int int52 = matrix51.getCols();
        int int53 = matrix51.getCols();
        int int54 = matrix51.getCols();
        com.operations.Matrix.Matrix[] matrixArray55 = com.operations.Matrix.MatrixDecompositions.luDecomposition(matrix51);
        com.operations.Matrix.Matrix matrix56 = com.operations.Matrix.MatrixOperations.multiply(matrix43, matrix51);
        boolean boolean58 = com.operations.Matrix.MatrixUtils.compare(matrix36, matrix43, (double) (-1L));
        com.operations.Matrix.Matrix matrix59 = com.operations.Matrix.MatrixOperations.add(matrix32, matrix43);
        boolean boolean61 = com.operations.Matrix.MatrixUtils.compare(matrix2, matrix59, 146.4308710620817d);
        com.operations.Matrix.Matrix matrix63 = com.operations.Matrix.MatrixOperations.scalarMultiply(matrix59, (double) 100L);
        com.operations.Matrix.Matrix matrix64 = com.operations.Matrix.MatrixDecompositions.choleskyDecomposition(matrix59);
        boolean boolean65 = com.operations.Matrix.MatrixUtils.isSymmetric(matrix64);
        com.operations.Matrix.Matrix matrix66 = com.operations.Matrix.MatrixOperations.transpose(matrix64);
        com.operations.Matrix.Matrix[] matrixArray67 = com.operations.Matrix.MatrixDecompositions.luDecomposition(matrix64);
        double[] doubleArray68 = null;
        // The following exception was thrown during execution in test generation
        try {
            double[] doubleArray69 = com.operations.Matrix.MatrixSolver.solveGaussian(matrix64, doubleArray68);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(matrix2);
        org.junit.Assert.assertNotNull(matrix5);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertArrayEquals(doubleArray8, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertArrayEquals(doubleArray11, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 2 + "'", int14 == 2);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 2 + "'", int15 == 2);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 2 + "'", int16 == 2);
        org.junit.Assert.assertNotNull(matrixArray17);
        org.junit.Assert.assertNotNull(matrix18);
        org.junit.Assert.assertNotNull(matrix20);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertArrayEquals(doubleArray25, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertArrayEquals(doubleArray28, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(matrix36);
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertArrayEquals(doubleArray39, new double[] { 137.90576492663388d, (-1.0d) }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertArrayEquals(doubleArray40, new double[] { (-24.931892522286255d), (-135.63701830716116d) }, 1.0E-15);
        org.junit.Assert.assertNotNull(matrix43);
        org.junit.Assert.assertNotNull(doubleArray46);
        org.junit.Assert.assertArrayEquals(doubleArray46, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertArrayEquals(doubleArray49, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 2 + "'", int52 == 2);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 2 + "'", int53 == 2);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 2 + "'", int54 == 2);
        org.junit.Assert.assertNotNull(matrixArray55);
        org.junit.Assert.assertNotNull(matrix56);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(matrix59);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + true + "'", boolean61 == true);
        org.junit.Assert.assertNotNull(matrix63);
        org.junit.Assert.assertNotNull(matrix64);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertNotNull(matrix66);
        org.junit.Assert.assertNotNull(matrixArray67);
    }

    @Test
    public void test4676() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4676");
        double[] doubleArray2 = new double[] { 10, 'a' };
        double[] doubleArray5 = new double[] { 10, 'a' };
        double[][] doubleArray6 = new double[][] { doubleArray2, doubleArray5 };
        com.operations.Matrix.Matrix matrix7 = new com.operations.Matrix.Matrix(doubleArray6);
        com.operations.Matrix.Matrix matrix8 = new com.operations.Matrix.Matrix(doubleArray6);
        int int9 = matrix8.getCols();
        int int10 = matrix8.getCols();
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertArrayEquals(doubleArray2, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertArrayEquals(doubleArray5, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 2 + "'", int9 == 2);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 2 + "'", int10 == 2);
    }

    @Test
    public void test4677() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4677");
        com.operations.Matrix.Matrix matrix2 = com.operations.Matrix.MatrixTransformations.scale2D(51.2195908953061d, 24.03204160570106d);
        org.junit.Assert.assertNotNull(matrix2);
    }

    @Test
    public void test4678() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4678");
        com.operations.Matrix.Matrix matrix4 = com.operations.Matrix.MatrixUtils.generateRandomMatrix((int) '#', 2, (int) '#', 0);
        org.junit.Assert.assertNotNull(matrix4);
    }

    @Test
    public void test4679() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4679");
        com.operations.Matrix.Matrix matrix2 = com.operations.Matrix.MatrixTransformations.scale2D(1954.3118651623454d, 22.360679774997898d);
        org.junit.Assert.assertNotNull(matrix2);
    }

    @Test
    public void test4680() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4680");
        com.operations.Matrix.Matrix matrix2 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0L, (double) (byte) 10);
        int int3 = matrix2.getRows();
        com.operations.Matrix.Matrix matrix9 = com.operations.Matrix.MatrixUtils.generateRandomMatrix(100, (int) (byte) 1, (int) '#', (int) '#', 1L);
        boolean boolean11 = com.operations.Matrix.MatrixUtils.compare(matrix2, matrix9, (double) 1.0f);
        matrix9.print();
        com.operations.Matrix.Matrix matrix13 = com.operations.Matrix.MatrixOperations.transpose(matrix9);
        com.operations.Matrix.Matrix matrix14 = com.operations.Matrix.MatrixOperations.transpose(matrix9);
        double double15 = com.operations.Matrix.MatrixUtils.frobeniusNorm(matrix9);
        com.operations.Matrix.Matrix matrix21 = com.operations.Matrix.MatrixUtils.generateRandomMatrix(100, 1, (-1), (int) (byte) -1, (long) (short) 1);
        com.operations.Matrix.Matrix matrix23 = com.operations.Matrix.MatrixOperations.scalarMultiply(matrix21, (double) (byte) -1);
        com.operations.Matrix.Matrix matrix24 = com.operations.Matrix.MatrixOperations.subtract(matrix9, matrix23);
        com.operations.Matrix.Matrix matrix26 = com.operations.Matrix.MatrixOperations.scalarMultiply(matrix24, 137.90576492663385d);
        boolean boolean27 = com.operations.Matrix.MatrixUtils.isSquare(matrix24);
        org.junit.Assert.assertNotNull(matrix2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 2 + "'", int3 == 2);
        org.junit.Assert.assertNotNull(matrix9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(matrix13);
        org.junit.Assert.assertNotNull(matrix14);
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 350.0d + "'", double15 == 350.0d);
        org.junit.Assert.assertNotNull(matrix21);
        org.junit.Assert.assertNotNull(matrix23);
        org.junit.Assert.assertNotNull(matrix24);
        org.junit.Assert.assertNotNull(matrix26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
    }

    @Test
    public void test4681() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4681");
        com.operations.Matrix.Matrix matrix2 = com.operations.Matrix.MatrixTransformations.scale2D(193631.07560651962d, (double) (-1L));
        org.junit.Assert.assertNotNull(matrix2);
    }

    @Test
    public void test4682() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4682");
        double[] doubleArray2 = new double[] { 10, 'a' };
        double[] doubleArray5 = new double[] { 10, 'a' };
        double[][] doubleArray6 = new double[][] { doubleArray2, doubleArray5 };
        com.operations.Matrix.Matrix matrix7 = new com.operations.Matrix.Matrix(doubleArray6);
        int int8 = matrix7.getCols();
        int int9 = matrix7.getCols();
        boolean boolean10 = com.operations.Matrix.MatrixUtils.isSquare(matrix7);
        com.operations.Matrix.Matrix matrix11 = com.operations.Matrix.MatrixDecompositions.choleskyDecomposition(matrix7);
        com.operations.Matrix.Matrix matrix14 = com.operations.Matrix.MatrixTransformations.project2D(0.0d, (double) 0);
        com.operations.Matrix.Matrix matrix15 = com.operations.Matrix.MatrixOperations.subtract(matrix11, matrix14);
        double[] doubleArray18 = new double[] { 10, 'a' };
        double[] doubleArray21 = new double[] { 10, 'a' };
        double[][] doubleArray22 = new double[][] { doubleArray18, doubleArray21 };
        com.operations.Matrix.Matrix matrix23 = new com.operations.Matrix.Matrix(doubleArray22);
        com.operations.Matrix.Matrix matrix24 = new com.operations.Matrix.Matrix(doubleArray22);
        com.operations.Matrix.Matrix matrix26 = com.operations.Matrix.MatrixTransformations.rotate2D((double) (short) 100);
        double[] doubleArray29 = new double[] { 137.90576492663388d, (byte) -1 };
        double[] doubleArray30 = com.operations.Matrix.MatrixSolver.solveGaussian(matrix26, doubleArray29);
        com.operations.Matrix.Matrix matrix31 = com.operations.Matrix.MatrixOperations.add(matrix24, matrix26);
        com.operations.Matrix.Matrix matrix32 = com.operations.Matrix.MatrixOperations.transpose(matrix26);
        int int33 = matrix26.getCols();
        int int34 = matrix26.getRows();
        com.operations.Matrix.Matrix matrix35 = com.operations.Matrix.MatrixOperations.subtract(matrix15, matrix26);
        com.operations.Matrix.Matrix matrix36 = com.operations.Matrix.MatrixOperations.transpose(matrix35);
        double[] doubleArray39 = new double[] { 10, 'a' };
        double[] doubleArray42 = new double[] { 10, 'a' };
        double[][] doubleArray43 = new double[][] { doubleArray39, doubleArray42 };
        com.operations.Matrix.Matrix matrix44 = new com.operations.Matrix.Matrix(doubleArray43);
        com.operations.Matrix.Matrix matrix45 = new com.operations.Matrix.Matrix(doubleArray43);
        com.operations.Matrix.Matrix[] matrixArray46 = com.operations.Matrix.MatrixDecompositions.luDecomposition(matrix45);
        com.operations.Matrix.Matrix matrix47 = com.operations.Matrix.MatrixDecompositions.choleskyDecomposition(matrix45);
        com.operations.Matrix.Matrix matrix49 = com.operations.Matrix.MatrixOperations.scalarMultiply(matrix45, (double) (byte) 0);
        com.operations.Matrix.Matrix matrix50 = com.operations.Matrix.MatrixOperations.subtract(matrix36, matrix45);
        com.operations.Matrix.Matrix[] matrixArray51 = com.operations.Matrix.MatrixDecompositions.luDecomposition(matrix45);
        // The following exception was thrown during execution in test generation
        try {
            double double54 = matrix45.getValue((int) (byte) 1, 97);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertArrayEquals(doubleArray2, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertArrayEquals(doubleArray5, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 2 + "'", int8 == 2);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 2 + "'", int9 == 2);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(matrix11);
        org.junit.Assert.assertNotNull(matrix14);
        org.junit.Assert.assertNotNull(matrix15);
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertArrayEquals(doubleArray18, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertArrayEquals(doubleArray21, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertNotNull(matrix26);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertArrayEquals(doubleArray29, new double[] { 137.90576492663388d, (-1.0d) }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertArrayEquals(doubleArray30, new double[] { (-24.931892522286255d), (-135.63701830716116d) }, 1.0E-15);
        org.junit.Assert.assertNotNull(matrix31);
        org.junit.Assert.assertNotNull(matrix32);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 2 + "'", int33 == 2);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 2 + "'", int34 == 2);
        org.junit.Assert.assertNotNull(matrix35);
        org.junit.Assert.assertNotNull(matrix36);
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertArrayEquals(doubleArray39, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertArrayEquals(doubleArray42, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertNotNull(matrixArray46);
        org.junit.Assert.assertNotNull(matrix47);
        org.junit.Assert.assertNotNull(matrix49);
        org.junit.Assert.assertNotNull(matrix50);
        org.junit.Assert.assertNotNull(matrixArray51);
    }

    @Test
    public void test4683() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4683");
        com.operations.Matrix.Matrix matrix1 = com.operations.Matrix.MatrixTransformations.rotate2D((double) (short) 100);
        double[] doubleArray4 = new double[] { 137.90576492663388d, (byte) -1 };
        double[] doubleArray5 = com.operations.Matrix.MatrixSolver.solveGaussian(matrix1, doubleArray4);
        com.operations.Matrix.Matrix matrix8 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0L, (double) (byte) 10);
        double[] doubleArray11 = new double[] { 10, 'a' };
        double[] doubleArray14 = new double[] { 10, 'a' };
        double[][] doubleArray15 = new double[][] { doubleArray11, doubleArray14 };
        com.operations.Matrix.Matrix matrix16 = new com.operations.Matrix.Matrix(doubleArray15);
        int int17 = matrix16.getCols();
        int int18 = matrix16.getCols();
        int int19 = matrix16.getCols();
        com.operations.Matrix.Matrix[] matrixArray20 = com.operations.Matrix.MatrixDecompositions.luDecomposition(matrix16);
        com.operations.Matrix.Matrix matrix21 = com.operations.Matrix.MatrixOperations.multiply(matrix8, matrix16);
        boolean boolean23 = com.operations.Matrix.MatrixUtils.compare(matrix1, matrix8, (double) (-1L));
        boolean boolean24 = com.operations.Matrix.MatrixUtils.isSymmetric(matrix1);
        com.operations.Matrix.Matrix matrix27 = com.operations.Matrix.MatrixTransformations.scale2D((double) (-1L), (double) '4');
        double[][] doubleArray28 = matrix27.getData();
        com.operations.Matrix.Matrix matrix29 = com.operations.Matrix.MatrixOperations.multiply(matrix1, matrix27);
        double double30 = com.operations.Matrix.MatrixUtils.frobeniusNorm(matrix29);
        int int31 = matrix29.getCols();
        // The following exception was thrown during execution in test generation
        try {
            double double34 = matrix29.getValue((int) (short) 100, (int) (byte) 10);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(matrix1);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertArrayEquals(doubleArray4, new double[] { 137.90576492663388d, (-1.0d) }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertArrayEquals(doubleArray5, new double[] { (-24.931892522286255d), (-135.63701830716116d) }, 1.0E-15);
        org.junit.Assert.assertNotNull(matrix8);
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertArrayEquals(doubleArray11, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertArrayEquals(doubleArray14, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 2 + "'", int17 == 2);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 2 + "'", int18 == 2);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 2 + "'", int19 == 2);
        org.junit.Assert.assertNotNull(matrixArray20);
        org.junit.Assert.assertNotNull(matrix21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(matrix27);
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertNotNull(matrix29);
        org.junit.Assert.assertTrue("'" + double30 + "' != '" + 52.009614495783374d + "'", double30 == 52.009614495783374d);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 2 + "'", int31 == 2);
    }

    @Test
    public void test4684() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4684");
        com.operations.Matrix.Matrix matrix2 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0L, (double) (byte) 10);
        int int3 = matrix2.getRows();
        com.operations.Matrix.Matrix matrix5 = com.operations.Matrix.MatrixOperations.scalarMultiply(matrix2, (double) 2);
        double double6 = com.operations.Matrix.MatrixUtils.frobeniusNorm(matrix2);
        double[][] doubleArray7 = matrix2.getData();
        com.operations.Matrix.Matrix matrix8 = new com.operations.Matrix.Matrix(doubleArray7);
        int int9 = matrix8.getRows();
        boolean boolean10 = com.operations.Matrix.MatrixUtils.isSymmetric(matrix8);
        com.operations.Matrix.Matrix matrix13 = com.operations.Matrix.MatrixTransformations.project2D(10.0d, (double) 1);
        double[][] doubleArray14 = matrix13.getData();
        com.operations.Matrix.Matrix matrix15 = new com.operations.Matrix.Matrix(doubleArray14);
        com.operations.Matrix.Matrix matrix17 = com.operations.Matrix.MatrixOperations.scalarMultiply(matrix15, (-1.0d));
        com.operations.Matrix.Matrix matrix20 = com.operations.Matrix.MatrixTransformations.project2D(3500.0d, 0.9998476951563913d);
        com.operations.Matrix.Matrix matrix23 = com.operations.Matrix.MatrixTransformations.project2D((double) (-1L), (-1.0d));
        com.operations.Matrix.Matrix matrix26 = com.operations.Matrix.MatrixTransformations.scale2D((double) 1.0f, (double) 1);
        com.operations.Matrix.Matrix matrix28 = com.operations.Matrix.MatrixTransformations.rotate2D((double) 1.0f);
        com.operations.Matrix.Matrix matrix31 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0L, (double) (byte) 10);
        int int32 = matrix31.getRows();
        com.operations.Matrix.Matrix matrix34 = com.operations.Matrix.MatrixOperations.scalarMultiply(matrix31, (double) 2);
        double double35 = com.operations.Matrix.MatrixUtils.frobeniusNorm(matrix31);
        com.operations.Matrix.Matrix matrix38 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0L, (double) (byte) 10);
        int int39 = matrix38.getRows();
        com.operations.Matrix.Matrix matrix41 = com.operations.Matrix.MatrixOperations.scalarMultiply(matrix38, (double) 2);
        com.operations.Matrix.Matrix matrix42 = com.operations.Matrix.MatrixOperations.subtract(matrix31, matrix41);
        com.operations.Matrix.Matrix matrix43 = com.operations.Matrix.MatrixOperations.add(matrix28, matrix41);
        boolean boolean45 = com.operations.Matrix.MatrixUtils.compare(matrix26, matrix28, (double) (byte) -1);
        com.operations.Matrix.Matrix matrix46 = com.operations.Matrix.MatrixOperations.transpose(matrix28);
        com.operations.Matrix.Matrix matrix49 = com.operations.Matrix.MatrixTransformations.project2D((double) 10L, 10.0d);
        com.operations.Matrix.Matrix matrix51 = com.operations.Matrix.MatrixTransformations.rotate2D((double) (short) 100);
        double[] doubleArray54 = new double[] { 137.90576492663388d, (byte) -1 };
        double[] doubleArray55 = com.operations.Matrix.MatrixSolver.solveGaussian(matrix51, doubleArray54);
        com.operations.Matrix.Matrix matrix58 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0L, (double) (byte) 10);
        double[] doubleArray61 = new double[] { 10, 'a' };
        double[] doubleArray64 = new double[] { 10, 'a' };
        double[][] doubleArray65 = new double[][] { doubleArray61, doubleArray64 };
        com.operations.Matrix.Matrix matrix66 = new com.operations.Matrix.Matrix(doubleArray65);
        int int67 = matrix66.getCols();
        int int68 = matrix66.getCols();
        int int69 = matrix66.getCols();
        com.operations.Matrix.Matrix[] matrixArray70 = com.operations.Matrix.MatrixDecompositions.luDecomposition(matrix66);
        com.operations.Matrix.Matrix matrix71 = com.operations.Matrix.MatrixOperations.multiply(matrix58, matrix66);
        boolean boolean73 = com.operations.Matrix.MatrixUtils.compare(matrix51, matrix58, (double) (-1L));
        double[][] doubleArray74 = matrix51.getData();
        com.operations.Matrix.Matrix matrix76 = com.operations.Matrix.MatrixTransformations.rotate2D((double) (short) 100);
        double[] doubleArray79 = new double[] { 137.90576492663388d, (byte) -1 };
        double[] doubleArray80 = com.operations.Matrix.MatrixSolver.solveGaussian(matrix76, doubleArray79);
        double[] doubleArray81 = com.operations.Matrix.MatrixSolver.solveGaussian(matrix51, doubleArray79);
        double[] doubleArray82 = com.operations.Matrix.MatrixSolver.solveGaussian(matrix49, doubleArray81);
        double[] doubleArray83 = com.operations.Matrix.MatrixSolver.solveGaussian(matrix28, doubleArray82);
        double[] doubleArray84 = com.operations.Matrix.MatrixSolver.solveGaussian(matrix23, doubleArray82);
        double[] doubleArray85 = com.operations.Matrix.MatrixSolver.solveGaussian(matrix20, doubleArray82);
        double[] doubleArray86 = com.operations.Matrix.MatrixSolver.solveGaussian(matrix17, doubleArray82);
        // The following exception was thrown during execution in test generation
        try {
            double[] doubleArray87 = com.operations.Matrix.MatrixSolver.solveGaussian(matrix8, doubleArray82);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Matrix is singular or nearly singular.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(matrix2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 2 + "'", int3 == 2);
        org.junit.Assert.assertNotNull(matrix5);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 10.0d + "'", double6 == 10.0d);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 2 + "'", int9 == 2);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(matrix13);
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertNotNull(matrix17);
        org.junit.Assert.assertNotNull(matrix20);
        org.junit.Assert.assertNotNull(matrix23);
        org.junit.Assert.assertNotNull(matrix26);
        org.junit.Assert.assertNotNull(matrix28);
        org.junit.Assert.assertNotNull(matrix31);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 2 + "'", int32 == 2);
        org.junit.Assert.assertNotNull(matrix34);
        org.junit.Assert.assertTrue("'" + double35 + "' != '" + 10.0d + "'", double35 == 10.0d);
        org.junit.Assert.assertNotNull(matrix38);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 2 + "'", int39 == 2);
        org.junit.Assert.assertNotNull(matrix41);
        org.junit.Assert.assertNotNull(matrix42);
        org.junit.Assert.assertNotNull(matrix43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(matrix46);
        org.junit.Assert.assertNotNull(matrix49);
        org.junit.Assert.assertNotNull(matrix51);
        org.junit.Assert.assertNotNull(doubleArray54);
        org.junit.Assert.assertArrayEquals(doubleArray54, new double[] { 137.90576492663388d, (-1.0d) }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertArrayEquals(doubleArray55, new double[] { (-24.931892522286255d), (-135.63701830716116d) }, 1.0E-15);
        org.junit.Assert.assertNotNull(matrix58);
        org.junit.Assert.assertNotNull(doubleArray61);
        org.junit.Assert.assertArrayEquals(doubleArray61, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray64);
        org.junit.Assert.assertArrayEquals(doubleArray64, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray65);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 2 + "'", int67 == 2);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 2 + "'", int68 == 2);
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 2 + "'", int69 == 2);
        org.junit.Assert.assertNotNull(matrixArray70);
        org.junit.Assert.assertNotNull(matrix71);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertNotNull(doubleArray74);
        org.junit.Assert.assertNotNull(matrix76);
        org.junit.Assert.assertNotNull(doubleArray79);
        org.junit.Assert.assertArrayEquals(doubleArray79, new double[] { 137.90576492663388d, (-1.0d) }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray80);
        org.junit.Assert.assertArrayEquals(doubleArray80, new double[] { (-24.931892522286255d), (-135.63701830716116d) }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray81);
        org.junit.Assert.assertArrayEquals(doubleArray81, new double[] { (-24.931892522286255d), (-135.63701830716116d) }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray82);
        org.junit.Assert.assertArrayEquals(doubleArray82, new double[] { (-2.4931892522286256d), (-13.563701830716116d) }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray83);
        org.junit.Assert.assertArrayEquals(doubleArray83, new double[] { (-2.7295287645732618d), (-13.518123861075072d) }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray84);
        org.junit.Assert.assertArrayEquals(doubleArray84, new double[] { 2.4931892522286256d, 13.563701830716116d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray85);
        org.junit.Assert.assertArrayEquals(doubleArray85, new double[] { (-7.123397863510359E-4d), (-13.565767962884136d) }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray86);
        org.junit.Assert.assertArrayEquals(doubleArray86, new double[] { 0.24931892522286256d, 13.563701830716116d }, 1.0E-15);
    }

    @Test
    public void test4685() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4685");
        com.operations.Matrix.Matrix matrix2 = com.operations.Matrix.MatrixTransformations.scale2D((double) 10L, 975.1410154434076d);
        org.junit.Assert.assertNotNull(matrix2);
    }

    @Test
    public void test4686() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4686");
        com.operations.Matrix.Matrix matrix2 = new com.operations.Matrix.Matrix(100, (int) ' ');
        boolean boolean3 = com.operations.Matrix.MatrixUtils.isSymmetric(matrix2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
    }

    @Test
    public void test4687() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4687");
        com.operations.Matrix.Matrix matrix1 = com.operations.Matrix.MatrixTransformations.rotate2D(147.0076152978997d);
        com.operations.Matrix.Matrix matrix3 = com.operations.Matrix.MatrixTransformations.rotate2D((double) (short) 100);
        double[] doubleArray6 = new double[] { 137.90576492663388d, (byte) -1 };
        double[] doubleArray7 = com.operations.Matrix.MatrixSolver.solveGaussian(matrix3, doubleArray6);
        com.operations.Matrix.Matrix matrix10 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0L, (double) (byte) 10);
        double[] doubleArray13 = new double[] { 10, 'a' };
        double[] doubleArray16 = new double[] { 10, 'a' };
        double[][] doubleArray17 = new double[][] { doubleArray13, doubleArray16 };
        com.operations.Matrix.Matrix matrix18 = new com.operations.Matrix.Matrix(doubleArray17);
        int int19 = matrix18.getCols();
        int int20 = matrix18.getCols();
        int int21 = matrix18.getCols();
        com.operations.Matrix.Matrix[] matrixArray22 = com.operations.Matrix.MatrixDecompositions.luDecomposition(matrix18);
        com.operations.Matrix.Matrix matrix23 = com.operations.Matrix.MatrixOperations.multiply(matrix10, matrix18);
        boolean boolean25 = com.operations.Matrix.MatrixUtils.compare(matrix3, matrix10, (double) (-1L));
        boolean boolean26 = com.operations.Matrix.MatrixUtils.isSymmetric(matrix3);
        com.operations.Matrix.Matrix matrix29 = com.operations.Matrix.MatrixTransformations.project2D(21.023651153076518d, 14.142135623730951d);
        boolean boolean31 = com.operations.Matrix.MatrixUtils.compare(matrix3, matrix29, (double) 10);
        double double32 = com.operations.Matrix.MatrixUtils.frobeniusNorm(matrix3);
        com.operations.Matrix.Matrix matrix33 = com.operations.Matrix.MatrixOperations.subtract(matrix1, matrix3);
        int int34 = matrix1.getCols();
        org.junit.Assert.assertNotNull(matrix1);
        org.junit.Assert.assertNotNull(matrix3);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertArrayEquals(doubleArray6, new double[] { 137.90576492663388d, (-1.0d) }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertArrayEquals(doubleArray7, new double[] { (-24.931892522286255d), (-135.63701830716116d) }, 1.0E-15);
        org.junit.Assert.assertNotNull(matrix10);
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertArrayEquals(doubleArray13, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertArrayEquals(doubleArray16, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 2 + "'", int19 == 2);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 2 + "'", int20 == 2);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 2 + "'", int21 == 2);
        org.junit.Assert.assertNotNull(matrixArray22);
        org.junit.Assert.assertNotNull(matrix23);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(matrix29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + double32 + "' != '" + 1.414213562373095d + "'", double32 == 1.414213562373095d);
        org.junit.Assert.assertNotNull(matrix33);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 2 + "'", int34 == 2);
    }

    @Test
    public void test4688() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4688");
        double[] doubleArray2 = new double[] { 10, 'a' };
        double[] doubleArray5 = new double[] { 10, 'a' };
        double[][] doubleArray6 = new double[][] { doubleArray2, doubleArray5 };
        com.operations.Matrix.Matrix matrix7 = new com.operations.Matrix.Matrix(doubleArray6);
        int int8 = matrix7.getCols();
        int int9 = matrix7.getCols();
        matrix7.print();
        double[] doubleArray13 = new double[] { 10, 'a' };
        double[] doubleArray16 = new double[] { 10, 'a' };
        double[][] doubleArray17 = new double[][] { doubleArray13, doubleArray16 };
        com.operations.Matrix.Matrix matrix18 = new com.operations.Matrix.Matrix(doubleArray17);
        boolean boolean20 = com.operations.Matrix.MatrixUtils.compare(matrix7, matrix18, (double) (-1));
        com.operations.Matrix.Matrix matrix21 = com.operations.Matrix.MatrixDecompositions.choleskyDecomposition(matrix18);
        com.operations.Matrix.Matrix matrix23 = com.operations.Matrix.MatrixOperations.scalarMultiply(matrix21, 32.0d);
        com.operations.Matrix.Matrix matrix24 = com.operations.Matrix.MatrixDecompositions.choleskyDecomposition(matrix21);
        // The following exception was thrown during execution in test generation
        try {
            matrix21.setValue((int) (short) -1, (int) (byte) -1, 4362.86355112226d);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: Index -1 out of bounds for length 2");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertArrayEquals(doubleArray2, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertArrayEquals(doubleArray5, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 2 + "'", int8 == 2);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 2 + "'", int9 == 2);
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertArrayEquals(doubleArray13, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertArrayEquals(doubleArray16, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(matrix21);
        org.junit.Assert.assertNotNull(matrix23);
        org.junit.Assert.assertNotNull(matrix24);
    }

    @Test
    public void test4689() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4689");
        com.operations.Matrix.Matrix matrix2 = com.operations.Matrix.MatrixTransformations.scale2D(100.0d, 98.07140255956371d);
        com.operations.Matrix.Matrix matrix4 = com.operations.Matrix.MatrixTransformations.rotate2D(350.0d);
        com.operations.Matrix.Matrix matrix5 = com.operations.Matrix.MatrixDecompositions.choleskyDecomposition(matrix4);
        com.operations.Matrix.Matrix matrix7 = com.operations.Matrix.MatrixTransformations.rotate2D(32.0d);
        com.operations.Matrix.Matrix matrix10 = com.operations.Matrix.MatrixTransformations.scale2D((double) 10L, 35.0d);
        matrix10.print();
        boolean boolean12 = com.operations.Matrix.MatrixUtils.isSquare(matrix10);
        com.operations.Matrix.Matrix matrix14 = com.operations.Matrix.MatrixTransformations.rotate2D((-1.0d));
        com.operations.Matrix.Matrix matrix16 = com.operations.Matrix.MatrixTransformations.rotate2D((double) (-1L));
        com.operations.Matrix.Matrix matrix18 = com.operations.Matrix.MatrixTransformations.rotate2D((double) (short) 100);
        double[] doubleArray21 = new double[] { 137.90576492663388d, (byte) -1 };
        double[] doubleArray22 = com.operations.Matrix.MatrixSolver.solveGaussian(matrix18, doubleArray21);
        double[] doubleArray23 = com.operations.Matrix.MatrixSolver.solveGaussian(matrix16, doubleArray21);
        double[] doubleArray24 = com.operations.Matrix.MatrixSolver.solveGaussian(matrix14, doubleArray21);
        double[] doubleArray25 = com.operations.Matrix.MatrixSolver.solveGaussian(matrix10, doubleArray21);
        double[] doubleArray26 = com.operations.Matrix.MatrixSolver.solveGaussian(matrix7, doubleArray21);
        double[] doubleArray27 = com.operations.Matrix.MatrixSolver.solveGaussian(matrix5, doubleArray21);
        double[] doubleArray28 = com.operations.Matrix.MatrixSolver.solveGaussian(matrix2, doubleArray27);
        // The following exception was thrown during execution in test generation
        try {
            double double31 = matrix2.getValue((int) (byte) 10, 1);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(matrix2);
        org.junit.Assert.assertNotNull(matrix4);
        org.junit.Assert.assertNotNull(matrix5);
        org.junit.Assert.assertNotNull(matrix7);
        org.junit.Assert.assertNotNull(matrix10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(matrix14);
        org.junit.Assert.assertNotNull(matrix16);
        org.junit.Assert.assertNotNull(matrix18);
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertArrayEquals(doubleArray21, new double[] { 137.90576492663388d, (-1.0d) }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertArrayEquals(doubleArray22, new double[] { (-24.931892522286255d), (-135.63701830716116d) }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertArrayEquals(doubleArray23, new double[] { 137.90221361711127d, 1.4069397643877004d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertArrayEquals(doubleArray24, new double[] { 137.90221361711127d, 1.4069397643877004d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertArrayEquals(doubleArray25, new double[] { 13.790576492663387d, (-0.02857142857142857d) }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertArrayEquals(doubleArray26, new double[] { 116.4208021307943d, (-73.92696957959556d) }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertArrayEquals(doubleArray27, new double[] { 138.96540326586003d, 23.86966446838909d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertArrayEquals(doubleArray28, new double[] { 1.3896540326586004d, 0.2433906709337805d }, 1.0E-15);
    }

    @Test
    public void test4690() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4690");
        com.operations.Matrix.Matrix matrix1 = com.operations.Matrix.MatrixTransformations.rotate2D((double) (byte) 0);
        com.operations.Matrix.Matrix matrix4 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0L, (double) (byte) 10);
        int int5 = matrix4.getRows();
        com.operations.Matrix.Matrix matrix7 = com.operations.Matrix.MatrixOperations.scalarMultiply(matrix4, (double) 2);
        double double8 = com.operations.Matrix.MatrixUtils.frobeniusNorm(matrix4);
        com.operations.Matrix.Matrix matrix11 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0L, (double) (byte) 10);
        int int12 = matrix11.getRows();
        com.operations.Matrix.Matrix matrix14 = com.operations.Matrix.MatrixOperations.scalarMultiply(matrix11, (double) 2);
        com.operations.Matrix.Matrix matrix15 = com.operations.Matrix.MatrixOperations.subtract(matrix4, matrix14);
        com.operations.Matrix.Matrix matrix17 = com.operations.Matrix.MatrixTransformations.rotate2D((double) (short) 100);
        double[] doubleArray20 = new double[] { 137.90576492663388d, (byte) -1 };
        double[] doubleArray21 = com.operations.Matrix.MatrixSolver.solveGaussian(matrix17, doubleArray20);
        com.operations.Matrix.Matrix matrix24 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0L, (double) (byte) 10);
        double[] doubleArray27 = new double[] { 10, 'a' };
        double[] doubleArray30 = new double[] { 10, 'a' };
        double[][] doubleArray31 = new double[][] { doubleArray27, doubleArray30 };
        com.operations.Matrix.Matrix matrix32 = new com.operations.Matrix.Matrix(doubleArray31);
        int int33 = matrix32.getCols();
        int int34 = matrix32.getCols();
        int int35 = matrix32.getCols();
        com.operations.Matrix.Matrix[] matrixArray36 = com.operations.Matrix.MatrixDecompositions.luDecomposition(matrix32);
        com.operations.Matrix.Matrix matrix37 = com.operations.Matrix.MatrixOperations.multiply(matrix24, matrix32);
        boolean boolean39 = com.operations.Matrix.MatrixUtils.compare(matrix17, matrix24, (double) (-1L));
        double[][] doubleArray40 = matrix17.getData();
        com.operations.Matrix.Matrix matrix43 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0L, (double) 10L);
        boolean boolean45 = com.operations.Matrix.MatrixUtils.compare(matrix17, matrix43, 146.4308710620817d);
        com.operations.Matrix.Matrix matrix46 = com.operations.Matrix.MatrixOperations.subtract(matrix15, matrix43);
        com.operations.Matrix.Matrix matrix49 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0L, (double) (byte) 10);
        double[] doubleArray52 = new double[] { 10, 'a' };
        double[] doubleArray55 = new double[] { 10, 'a' };
        double[][] doubleArray56 = new double[][] { doubleArray52, doubleArray55 };
        com.operations.Matrix.Matrix matrix57 = new com.operations.Matrix.Matrix(doubleArray56);
        int int58 = matrix57.getCols();
        int int59 = matrix57.getCols();
        int int60 = matrix57.getCols();
        com.operations.Matrix.Matrix[] matrixArray61 = com.operations.Matrix.MatrixDecompositions.luDecomposition(matrix57);
        com.operations.Matrix.Matrix matrix62 = com.operations.Matrix.MatrixOperations.multiply(matrix49, matrix57);
        com.operations.Matrix.Matrix matrix64 = com.operations.Matrix.MatrixTransformations.rotate2D((double) (short) 100);
        boolean boolean66 = com.operations.Matrix.MatrixUtils.compare(matrix57, matrix64, (double) (byte) 0);
        com.operations.Matrix.Matrix[] matrixArray67 = com.operations.Matrix.MatrixDecompositions.luDecomposition(matrix57);
        com.operations.Matrix.Matrix matrix68 = com.operations.Matrix.MatrixOperations.transpose(matrix57);
        com.operations.Matrix.Matrix matrix71 = com.operations.Matrix.MatrixTransformations.scale2D((double) 1.0f, (double) 1);
        com.operations.Matrix.Matrix matrix73 = com.operations.Matrix.MatrixTransformations.rotate2D((double) 1.0f);
        com.operations.Matrix.Matrix matrix76 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0L, (double) (byte) 10);
        int int77 = matrix76.getRows();
        com.operations.Matrix.Matrix matrix79 = com.operations.Matrix.MatrixOperations.scalarMultiply(matrix76, (double) 2);
        double double80 = com.operations.Matrix.MatrixUtils.frobeniusNorm(matrix76);
        com.operations.Matrix.Matrix matrix83 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0L, (double) (byte) 10);
        int int84 = matrix83.getRows();
        com.operations.Matrix.Matrix matrix86 = com.operations.Matrix.MatrixOperations.scalarMultiply(matrix83, (double) 2);
        com.operations.Matrix.Matrix matrix87 = com.operations.Matrix.MatrixOperations.subtract(matrix76, matrix86);
        com.operations.Matrix.Matrix matrix88 = com.operations.Matrix.MatrixOperations.add(matrix73, matrix86);
        boolean boolean90 = com.operations.Matrix.MatrixUtils.compare(matrix71, matrix73, (double) (byte) -1);
        com.operations.Matrix.Matrix matrix91 = com.operations.Matrix.MatrixOperations.subtract(matrix68, matrix71);
        matrix68.print();
        com.operations.Matrix.Matrix matrix93 = com.operations.Matrix.MatrixOperations.add(matrix43, matrix68);
        int int94 = matrix68.getCols();
        com.operations.Matrix.Matrix matrix95 = com.operations.Matrix.MatrixOperations.subtract(matrix1, matrix68);
        int int96 = matrix68.getCols();
        org.junit.Assert.assertNotNull(matrix1);
        org.junit.Assert.assertNotNull(matrix4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 2 + "'", int5 == 2);
        org.junit.Assert.assertNotNull(matrix7);
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 10.0d + "'", double8 == 10.0d);
        org.junit.Assert.assertNotNull(matrix11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 2 + "'", int12 == 2);
        org.junit.Assert.assertNotNull(matrix14);
        org.junit.Assert.assertNotNull(matrix15);
        org.junit.Assert.assertNotNull(matrix17);
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertArrayEquals(doubleArray20, new double[] { 137.90576492663388d, (-1.0d) }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertArrayEquals(doubleArray21, new double[] { (-24.931892522286255d), (-135.63701830716116d) }, 1.0E-15);
        org.junit.Assert.assertNotNull(matrix24);
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertArrayEquals(doubleArray27, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertArrayEquals(doubleArray30, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 2 + "'", int33 == 2);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 2 + "'", int34 == 2);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 2 + "'", int35 == 2);
        org.junit.Assert.assertNotNull(matrixArray36);
        org.junit.Assert.assertNotNull(matrix37);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertNotNull(matrix43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertNotNull(matrix46);
        org.junit.Assert.assertNotNull(matrix49);
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertArrayEquals(doubleArray52, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertArrayEquals(doubleArray55, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray56);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 2 + "'", int58 == 2);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 2 + "'", int59 == 2);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 2 + "'", int60 == 2);
        org.junit.Assert.assertNotNull(matrixArray61);
        org.junit.Assert.assertNotNull(matrix62);
        org.junit.Assert.assertNotNull(matrix64);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertNotNull(matrixArray67);
        org.junit.Assert.assertNotNull(matrix68);
        org.junit.Assert.assertNotNull(matrix71);
        org.junit.Assert.assertNotNull(matrix73);
        org.junit.Assert.assertNotNull(matrix76);
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + 2 + "'", int77 == 2);
        org.junit.Assert.assertNotNull(matrix79);
        org.junit.Assert.assertTrue("'" + double80 + "' != '" + 10.0d + "'", double80 == 10.0d);
        org.junit.Assert.assertNotNull(matrix83);
        org.junit.Assert.assertTrue("'" + int84 + "' != '" + 2 + "'", int84 == 2);
        org.junit.Assert.assertNotNull(matrix86);
        org.junit.Assert.assertNotNull(matrix87);
        org.junit.Assert.assertNotNull(matrix88);
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + false + "'", boolean90 == false);
        org.junit.Assert.assertNotNull(matrix91);
        org.junit.Assert.assertNotNull(matrix93);
        org.junit.Assert.assertTrue("'" + int94 + "' != '" + 2 + "'", int94 == 2);
        org.junit.Assert.assertNotNull(matrix95);
        org.junit.Assert.assertTrue("'" + int96 + "' != '" + 2 + "'", int96 == 2);
    }

    @Test
    public void test4691() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4691");
        com.operations.Matrix.Matrix matrix1 = com.operations.Matrix.MatrixTransformations.rotate2D(100.0d);
        int int2 = matrix1.getCols();
        matrix1.print();
        com.operations.Matrix.Matrix matrix5 = com.operations.Matrix.MatrixOperations.scalarMultiply(matrix1, (double) (byte) 1);
        com.operations.Matrix.Matrix[] matrixArray6 = com.operations.Matrix.MatrixDecompositions.luDecomposition(matrix1);
        com.operations.Matrix.Matrix matrix7 = com.operations.Matrix.MatrixOperations.transpose(matrix1);
        double[][] doubleArray8 = matrix7.getData();
        com.operations.Matrix.Matrix matrix9 = com.operations.Matrix.MatrixOperations.transpose(matrix7);
        com.operations.Matrix.Matrix[] matrixArray10 = com.operations.Matrix.MatrixDecompositions.luDecomposition(matrix7);
        int int11 = matrix7.getRows();
        java.lang.Class<?> wildcardClass12 = matrix7.getClass();
        org.junit.Assert.assertNotNull(matrix1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 2 + "'", int2 == 2);
        org.junit.Assert.assertNotNull(matrix5);
        org.junit.Assert.assertNotNull(matrixArray6);
        org.junit.Assert.assertNotNull(matrix7);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertNotNull(matrix9);
        org.junit.Assert.assertNotNull(matrixArray10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 2 + "'", int11 == 2);
        org.junit.Assert.assertNotNull(wildcardClass12);
    }

    @Test
    public void test4692() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4692");
        double[] doubleArray2 = new double[] { 10, 'a' };
        double[] doubleArray5 = new double[] { 10, 'a' };
        double[][] doubleArray6 = new double[][] { doubleArray2, doubleArray5 };
        com.operations.Matrix.Matrix matrix7 = new com.operations.Matrix.Matrix(doubleArray6);
        int int8 = matrix7.getCols();
        int int9 = matrix7.getCols();
        com.operations.Matrix.Matrix[] matrixArray10 = com.operations.Matrix.MatrixDecompositions.luDecomposition(matrix7);
        com.operations.Matrix.Matrix matrix12 = com.operations.Matrix.MatrixTransformations.rotate2D((double) '4');
        double[] doubleArray15 = new double[] { 10, 'a' };
        double[] doubleArray18 = new double[] { 10, 'a' };
        double[][] doubleArray19 = new double[][] { doubleArray15, doubleArray18 };
        com.operations.Matrix.Matrix matrix20 = new com.operations.Matrix.Matrix(doubleArray19);
        com.operations.Matrix.Matrix matrix21 = new com.operations.Matrix.Matrix(doubleArray19);
        com.operations.Matrix.Matrix matrix23 = com.operations.Matrix.MatrixTransformations.rotate2D((double) (short) 100);
        double[] doubleArray26 = new double[] { 137.90576492663388d, (byte) -1 };
        double[] doubleArray27 = com.operations.Matrix.MatrixSolver.solveGaussian(matrix23, doubleArray26);
        com.operations.Matrix.Matrix matrix28 = com.operations.Matrix.MatrixOperations.add(matrix21, matrix23);
        boolean boolean29 = com.operations.Matrix.MatrixUtils.isSymmetric(matrix28);
        boolean boolean31 = com.operations.Matrix.MatrixUtils.compare(matrix12, matrix28, 364.0054944640259d);
        com.operations.Matrix.Matrix matrix34 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0L, (double) (byte) 10);
        int int35 = matrix34.getRows();
        com.operations.Matrix.Matrix matrix37 = com.operations.Matrix.MatrixOperations.scalarMultiply(matrix34, (double) 2);
        matrix34.print();
        com.operations.Matrix.Matrix matrix39 = com.operations.Matrix.MatrixOperations.multiply(matrix28, matrix34);
        com.operations.Matrix.Matrix matrix40 = com.operations.Matrix.MatrixOperations.transpose(matrix39);
        double double41 = com.operations.Matrix.MatrixUtils.frobeniusNorm(matrix39);
        boolean boolean43 = com.operations.Matrix.MatrixUtils.compare(matrix7, matrix39, 3500.0d);
        // The following exception was thrown during execution in test generation
        try {
            double double46 = matrix7.getValue(1, (-1));
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertArrayEquals(doubleArray2, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertArrayEquals(doubleArray5, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 2 + "'", int8 == 2);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 2 + "'", int9 == 2);
        org.junit.Assert.assertNotNull(matrixArray10);
        org.junit.Assert.assertNotNull(matrix12);
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertArrayEquals(doubleArray15, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertArrayEquals(doubleArray18, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertNotNull(matrix23);
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertArrayEquals(doubleArray26, new double[] { 137.90576492663388d, (-1.0d) }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertArrayEquals(doubleArray27, new double[] { (-24.931892522286255d), (-135.63701830716116d) }, 1.0E-15);
        org.junit.Assert.assertNotNull(matrix28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertNotNull(matrix34);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 2 + "'", int35 == 2);
        org.junit.Assert.assertNotNull(matrix37);
        org.junit.Assert.assertNotNull(matrix39);
        org.junit.Assert.assertNotNull(matrix40);
        org.junit.Assert.assertTrue("'" + double41 + "' != '" + 1363.6076983299943d + "'", double41 == 1363.6076983299943d);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
    }

    @Test
    public void test4693() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4693");
        com.operations.Matrix.Matrix matrix1 = com.operations.Matrix.MatrixTransformations.rotate2D((double) '4');
        double[] doubleArray4 = new double[] { 10, 'a' };
        double[] doubleArray7 = new double[] { 10, 'a' };
        double[][] doubleArray8 = new double[][] { doubleArray4, doubleArray7 };
        com.operations.Matrix.Matrix matrix9 = new com.operations.Matrix.Matrix(doubleArray8);
        com.operations.Matrix.Matrix matrix10 = new com.operations.Matrix.Matrix(doubleArray8);
        com.operations.Matrix.Matrix matrix12 = com.operations.Matrix.MatrixTransformations.rotate2D((double) (short) 100);
        double[] doubleArray15 = new double[] { 137.90576492663388d, (byte) -1 };
        double[] doubleArray16 = com.operations.Matrix.MatrixSolver.solveGaussian(matrix12, doubleArray15);
        com.operations.Matrix.Matrix matrix17 = com.operations.Matrix.MatrixOperations.add(matrix10, matrix12);
        boolean boolean18 = com.operations.Matrix.MatrixUtils.isSymmetric(matrix17);
        boolean boolean20 = com.operations.Matrix.MatrixUtils.compare(matrix1, matrix17, 364.0054944640259d);
        com.operations.Matrix.Matrix matrix23 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0L, (double) (byte) 10);
        int int24 = matrix23.getRows();
        com.operations.Matrix.Matrix matrix26 = com.operations.Matrix.MatrixOperations.scalarMultiply(matrix23, (double) 2);
        matrix23.print();
        com.operations.Matrix.Matrix matrix28 = com.operations.Matrix.MatrixOperations.multiply(matrix17, matrix23);
        com.operations.Matrix.Matrix[] matrixArray29 = com.operations.Matrix.MatrixDecompositions.luDecomposition(matrix17);
        double double30 = com.operations.Matrix.MatrixUtils.frobeniusNorm(matrix17);
        boolean boolean31 = com.operations.Matrix.MatrixUtils.isSquare(matrix17);
        // The following exception was thrown during execution in test generation
        try {
            matrix17.setValue((int) (byte) -1, 32, (double) 100.0f);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: Index -1 out of bounds for length 2");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(matrix1);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertArrayEquals(doubleArray4, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertArrayEquals(doubleArray7, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertNotNull(matrix12);
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertArrayEquals(doubleArray15, new double[] { 137.90576492663388d, (-1.0d) }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertArrayEquals(doubleArray16, new double[] { (-24.931892522286255d), (-135.63701830716116d) }, 1.0E-15);
        org.junit.Assert.assertNotNull(matrix17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertNotNull(matrix23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 2 + "'", int24 == 2);
        org.junit.Assert.assertNotNull(matrix26);
        org.junit.Assert.assertNotNull(matrix28);
        org.junit.Assert.assertNotNull(matrixArray29);
        org.junit.Assert.assertTrue("'" + double30 + "' != '" + 137.15495886388925d + "'", double30 == 137.15495886388925d);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
    }

    @Test
    public void test4694() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4694");
        com.operations.Matrix.Matrix matrix4 = com.operations.Matrix.MatrixUtils.generateRandomMatrix((int) '4', (int) (byte) 0, 1, 32);
        org.junit.Assert.assertNotNull(matrix4);
    }

    @Test
    public void test4695() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4695");
        com.operations.Matrix.Matrix matrix5 = com.operations.Matrix.MatrixUtils.generateRandomMatrix(1, (int) ' ', (int) (short) 0, (int) (byte) -1, (long) ' ');
        double[] doubleArray8 = new double[] { 10, 'a' };
        double[] doubleArray11 = new double[] { 10, 'a' };
        double[][] doubleArray12 = new double[][] { doubleArray8, doubleArray11 };
        com.operations.Matrix.Matrix matrix13 = new com.operations.Matrix.Matrix(doubleArray12);
        com.operations.Matrix.Matrix matrix14 = new com.operations.Matrix.Matrix(doubleArray12);
        boolean boolean15 = com.operations.Matrix.MatrixUtils.isSquare(matrix14);
        double[] doubleArray18 = new double[] { 10, 'a' };
        double[] doubleArray21 = new double[] { 10, 'a' };
        double[][] doubleArray22 = new double[][] { doubleArray18, doubleArray21 };
        com.operations.Matrix.Matrix matrix23 = new com.operations.Matrix.Matrix(doubleArray22);
        int int24 = matrix23.getCols();
        int int25 = matrix23.getCols();
        matrix23.print();
        double[] doubleArray29 = new double[] { 10, 'a' };
        double[] doubleArray32 = new double[] { 10, 'a' };
        double[][] doubleArray33 = new double[][] { doubleArray29, doubleArray32 };
        com.operations.Matrix.Matrix matrix34 = new com.operations.Matrix.Matrix(doubleArray33);
        boolean boolean36 = com.operations.Matrix.MatrixUtils.compare(matrix23, matrix34, (double) (-1));
        com.operations.Matrix.Matrix matrix37 = com.operations.Matrix.MatrixOperations.subtract(matrix14, matrix34);
        com.operations.Matrix.Matrix matrix39 = com.operations.Matrix.MatrixOperations.scalarMultiply(matrix14, (double) 0.0f);
        int int40 = matrix14.getCols();
        com.operations.Matrix.Matrix matrix41 = com.operations.Matrix.MatrixDecompositions.choleskyDecomposition(matrix14);
        com.operations.Matrix.Matrix matrix44 = com.operations.Matrix.MatrixTransformations.scale2D((double) 100L, 1.0d);
        com.operations.Matrix.Matrix matrix45 = com.operations.Matrix.MatrixOperations.transpose(matrix44);
        com.operations.Matrix.Matrix matrix46 = com.operations.Matrix.MatrixOperations.add(matrix41, matrix45);
        com.operations.Matrix.Matrix matrix48 = com.operations.Matrix.MatrixOperations.scalarMultiply(matrix41, 33.52610922848042d);
        com.operations.Matrix.Matrix matrix50 = com.operations.Matrix.MatrixOperations.scalarMultiply(matrix48, 137.13497001129946d);
        matrix50.print();
        // The following exception was thrown during execution in test generation
        try {
            com.operations.Matrix.Matrix matrix52 = com.operations.Matrix.MatrixOperations.multiply(matrix5, matrix50);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Matrix A's columns must match Matrix B's rows for multiplication.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(matrix5);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertArrayEquals(doubleArray8, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertArrayEquals(doubleArray11, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertArrayEquals(doubleArray18, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertArrayEquals(doubleArray21, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 2 + "'", int24 == 2);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 2 + "'", int25 == 2);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertArrayEquals(doubleArray29, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertArrayEquals(doubleArray32, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(matrix37);
        org.junit.Assert.assertNotNull(matrix39);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 2 + "'", int40 == 2);
        org.junit.Assert.assertNotNull(matrix41);
        org.junit.Assert.assertNotNull(matrix44);
        org.junit.Assert.assertNotNull(matrix45);
        org.junit.Assert.assertNotNull(matrix46);
        org.junit.Assert.assertNotNull(matrix48);
        org.junit.Assert.assertNotNull(matrix50);
    }

    @Test
    public void test4696() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4696");
        com.operations.Matrix.Matrix matrix1 = com.operations.Matrix.MatrixTransformations.rotate2D((double) 0.0f);
        com.operations.Matrix.Matrix matrix2 = com.operations.Matrix.MatrixOperations.transpose(matrix1);
        org.junit.Assert.assertNotNull(matrix1);
        org.junit.Assert.assertNotNull(matrix2);
    }

    @Test
    public void test4697() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4697");
        double[] doubleArray2 = new double[] { 10, 'a' };
        double[] doubleArray5 = new double[] { 10, 'a' };
        double[][] doubleArray6 = new double[][] { doubleArray2, doubleArray5 };
        com.operations.Matrix.Matrix matrix7 = new com.operations.Matrix.Matrix(doubleArray6);
        com.operations.Matrix.Matrix matrix8 = new com.operations.Matrix.Matrix(doubleArray6);
        com.operations.Matrix.Matrix matrix10 = com.operations.Matrix.MatrixTransformations.rotate2D((double) (short) 100);
        double[] doubleArray13 = new double[] { 137.90576492663388d, (byte) -1 };
        double[] doubleArray14 = com.operations.Matrix.MatrixSolver.solveGaussian(matrix10, doubleArray13);
        com.operations.Matrix.Matrix matrix15 = com.operations.Matrix.MatrixOperations.add(matrix8, matrix10);
        com.operations.Matrix.Matrix matrix16 = com.operations.Matrix.MatrixOperations.transpose(matrix10);
        int int17 = matrix10.getCols();
        int int18 = matrix10.getRows();
        com.operations.Matrix.Matrix matrix21 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0L, (double) (byte) 10);
        double[] doubleArray24 = new double[] { 10, 'a' };
        double[] doubleArray27 = new double[] { 10, 'a' };
        double[][] doubleArray28 = new double[][] { doubleArray24, doubleArray27 };
        com.operations.Matrix.Matrix matrix29 = new com.operations.Matrix.Matrix(doubleArray28);
        int int30 = matrix29.getCols();
        int int31 = matrix29.getCols();
        int int32 = matrix29.getCols();
        com.operations.Matrix.Matrix[] matrixArray33 = com.operations.Matrix.MatrixDecompositions.luDecomposition(matrix29);
        com.operations.Matrix.Matrix matrix34 = com.operations.Matrix.MatrixOperations.multiply(matrix21, matrix29);
        com.operations.Matrix.Matrix matrix36 = com.operations.Matrix.MatrixTransformations.rotate2D((double) (short) 100);
        boolean boolean38 = com.operations.Matrix.MatrixUtils.compare(matrix29, matrix36, (double) (byte) 0);
        double[] doubleArray41 = new double[] { 10, 'a' };
        double[] doubleArray44 = new double[] { 10, 'a' };
        double[][] doubleArray45 = new double[][] { doubleArray41, doubleArray44 };
        com.operations.Matrix.Matrix matrix46 = new com.operations.Matrix.Matrix(doubleArray45);
        com.operations.Matrix.Matrix matrix47 = new com.operations.Matrix.Matrix(doubleArray45);
        com.operations.Matrix.Matrix matrix48 = new com.operations.Matrix.Matrix(doubleArray45);
        boolean boolean50 = com.operations.Matrix.MatrixUtils.compare(matrix29, matrix48, (double) (-1));
        double[] doubleArray53 = new double[] { 10, 'a' };
        double[] doubleArray56 = new double[] { 10, 'a' };
        double[][] doubleArray57 = new double[][] { doubleArray53, doubleArray56 };
        com.operations.Matrix.Matrix matrix58 = new com.operations.Matrix.Matrix(doubleArray57);
        com.operations.Matrix.Matrix matrix59 = new com.operations.Matrix.Matrix(doubleArray57);
        boolean boolean60 = com.operations.Matrix.MatrixUtils.isSquare(matrix59);
        com.operations.Matrix.Matrix matrix61 = com.operations.Matrix.MatrixOperations.multiply(matrix48, matrix59);
        com.operations.Matrix.Matrix matrix64 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0L, (double) (byte) 10);
        int int65 = matrix64.getRows();
        com.operations.Matrix.Matrix matrix67 = com.operations.Matrix.MatrixOperations.scalarMultiply(matrix64, (double) 2);
        matrix64.print();
        matrix64.print();
        com.operations.Matrix.Matrix matrix70 = com.operations.Matrix.MatrixOperations.multiply(matrix61, matrix64);
        com.operations.Matrix.Matrix matrix73 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0.0f, 350.0d);
        com.operations.Matrix.Matrix matrix76 = com.operations.Matrix.MatrixTransformations.project2D(0.0d, (double) 0);
        com.operations.Matrix.Matrix[] matrixArray77 = com.operations.Matrix.MatrixDecompositions.luDecomposition(matrix76);
        com.operations.Matrix.Matrix matrix80 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0L, (double) (byte) 10);
        int int81 = matrix80.getRows();
        com.operations.Matrix.Matrix matrix83 = com.operations.Matrix.MatrixOperations.scalarMultiply(matrix80, (double) 2);
        double double84 = com.operations.Matrix.MatrixUtils.frobeniusNorm(matrix80);
        int int85 = matrix80.getRows();
        com.operations.Matrix.Matrix matrix86 = com.operations.Matrix.MatrixOperations.transpose(matrix80);
        com.operations.Matrix.Matrix matrix87 = com.operations.Matrix.MatrixOperations.multiply(matrix76, matrix86);
        com.operations.Matrix.Matrix matrix88 = com.operations.Matrix.MatrixOperations.multiply(matrix73, matrix86);
        com.operations.Matrix.Matrix matrix89 = com.operations.Matrix.MatrixOperations.transpose(matrix88);
        double double90 = com.operations.Matrix.MatrixUtils.frobeniusNorm(matrix89);
        boolean boolean91 = com.operations.Matrix.MatrixUtils.isSymmetric(matrix89);
        com.operations.Matrix.Matrix matrix92 = com.operations.Matrix.MatrixOperations.add(matrix70, matrix89);
        com.operations.Matrix.Matrix matrix93 = com.operations.Matrix.MatrixOperations.multiply(matrix10, matrix89);
        int int94 = matrix93.getCols();
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertArrayEquals(doubleArray2, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertArrayEquals(doubleArray5, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertNotNull(matrix10);
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertArrayEquals(doubleArray13, new double[] { 137.90576492663388d, (-1.0d) }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertArrayEquals(doubleArray14, new double[] { (-24.931892522286255d), (-135.63701830716116d) }, 1.0E-15);
        org.junit.Assert.assertNotNull(matrix15);
        org.junit.Assert.assertNotNull(matrix16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 2 + "'", int17 == 2);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 2 + "'", int18 == 2);
        org.junit.Assert.assertNotNull(matrix21);
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertArrayEquals(doubleArray24, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertArrayEquals(doubleArray27, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 2 + "'", int30 == 2);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 2 + "'", int31 == 2);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 2 + "'", int32 == 2);
        org.junit.Assert.assertNotNull(matrixArray33);
        org.junit.Assert.assertNotNull(matrix34);
        org.junit.Assert.assertNotNull(matrix36);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertArrayEquals(doubleArray41, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertArrayEquals(doubleArray44, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertArrayEquals(doubleArray53, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray56);
        org.junit.Assert.assertArrayEquals(doubleArray56, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray57);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + true + "'", boolean60 == true);
        org.junit.Assert.assertNotNull(matrix61);
        org.junit.Assert.assertNotNull(matrix64);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 2 + "'", int65 == 2);
        org.junit.Assert.assertNotNull(matrix67);
        org.junit.Assert.assertNotNull(matrix70);
        org.junit.Assert.assertNotNull(matrix73);
        org.junit.Assert.assertNotNull(matrix76);
        org.junit.Assert.assertNotNull(matrixArray77);
        org.junit.Assert.assertNotNull(matrix80);
        org.junit.Assert.assertTrue("'" + int81 + "' != '" + 2 + "'", int81 == 2);
        org.junit.Assert.assertNotNull(matrix83);
        org.junit.Assert.assertTrue("'" + double84 + "' != '" + 10.0d + "'", double84 == 10.0d);
        org.junit.Assert.assertTrue("'" + int85 + "' != '" + 2 + "'", int85 == 2);
        org.junit.Assert.assertNotNull(matrix86);
        org.junit.Assert.assertNotNull(matrix87);
        org.junit.Assert.assertNotNull(matrix88);
        org.junit.Assert.assertNotNull(matrix89);
        org.junit.Assert.assertTrue("'" + double90 + "' != '" + 3500.0d + "'", double90 == 3500.0d);
        org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + true + "'", boolean91 == true);
        org.junit.Assert.assertNotNull(matrix92);
        org.junit.Assert.assertNotNull(matrix93);
        org.junit.Assert.assertTrue("'" + int94 + "' != '" + 2 + "'", int94 == 2);
    }

    @Test
    public void test4698() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4698");
        com.operations.Matrix.Matrix matrix1 = com.operations.Matrix.MatrixTransformations.rotate2D(263.4829471529277d);
        org.junit.Assert.assertNotNull(matrix1);
    }

    @Test
    public void test4699() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4699");
        com.operations.Matrix.Matrix matrix2 = com.operations.Matrix.MatrixTransformations.project2D((double) (short) 100, (double) 0L);
        boolean boolean3 = com.operations.Matrix.MatrixUtils.isSquare(matrix2);
        double[] doubleArray6 = new double[] { 10, 'a' };
        double[] doubleArray9 = new double[] { 10, 'a' };
        double[][] doubleArray10 = new double[][] { doubleArray6, doubleArray9 };
        com.operations.Matrix.Matrix matrix11 = new com.operations.Matrix.Matrix(doubleArray10);
        com.operations.Matrix.Matrix matrix12 = new com.operations.Matrix.Matrix(doubleArray10);
        com.operations.Matrix.Matrix matrix14 = com.operations.Matrix.MatrixTransformations.rotate2D((double) (short) 100);
        double[] doubleArray17 = new double[] { 137.90576492663388d, (byte) -1 };
        double[] doubleArray18 = com.operations.Matrix.MatrixSolver.solveGaussian(matrix14, doubleArray17);
        com.operations.Matrix.Matrix matrix19 = com.operations.Matrix.MatrixOperations.add(matrix12, matrix14);
        com.operations.Matrix.Matrix matrix20 = com.operations.Matrix.MatrixOperations.transpose(matrix14);
        int int21 = matrix14.getCols();
        int int22 = matrix14.getRows();
        double[] doubleArray25 = new double[] { 10, 'a' };
        double[] doubleArray28 = new double[] { 10, 'a' };
        double[][] doubleArray29 = new double[][] { doubleArray25, doubleArray28 };
        com.operations.Matrix.Matrix matrix30 = new com.operations.Matrix.Matrix(doubleArray29);
        int int31 = matrix30.getCols();
        int int32 = matrix30.getCols();
        matrix30.print();
        double[] doubleArray36 = new double[] { 10, 'a' };
        double[] doubleArray39 = new double[] { 10, 'a' };
        double[][] doubleArray40 = new double[][] { doubleArray36, doubleArray39 };
        com.operations.Matrix.Matrix matrix41 = new com.operations.Matrix.Matrix(doubleArray40);
        boolean boolean43 = com.operations.Matrix.MatrixUtils.compare(matrix30, matrix41, (double) (-1));
        com.operations.Matrix.Matrix matrix44 = com.operations.Matrix.MatrixOperations.multiply(matrix14, matrix30);
        double double47 = matrix14.getValue((int) (short) 0, 0);
        com.operations.Matrix.Matrix matrix48 = com.operations.Matrix.MatrixOperations.add(matrix2, matrix14);
        com.operations.Matrix.Matrix matrix50 = com.operations.Matrix.MatrixOperations.scalarMultiply(matrix48, 0.0d);
        com.operations.Matrix.Matrix matrix52 = com.operations.Matrix.MatrixTransformations.rotate2D((double) (short) 100);
        double[] doubleArray55 = new double[] { 137.90576492663388d, (byte) -1 };
        double[] doubleArray56 = com.operations.Matrix.MatrixSolver.solveGaussian(matrix52, doubleArray55);
        com.operations.Matrix.Matrix matrix59 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0L, (double) (byte) 10);
        double[] doubleArray62 = new double[] { 10, 'a' };
        double[] doubleArray65 = new double[] { 10, 'a' };
        double[][] doubleArray66 = new double[][] { doubleArray62, doubleArray65 };
        com.operations.Matrix.Matrix matrix67 = new com.operations.Matrix.Matrix(doubleArray66);
        int int68 = matrix67.getCols();
        int int69 = matrix67.getCols();
        int int70 = matrix67.getCols();
        com.operations.Matrix.Matrix[] matrixArray71 = com.operations.Matrix.MatrixDecompositions.luDecomposition(matrix67);
        com.operations.Matrix.Matrix matrix72 = com.operations.Matrix.MatrixOperations.multiply(matrix59, matrix67);
        boolean boolean74 = com.operations.Matrix.MatrixUtils.compare(matrix52, matrix59, (double) (-1L));
        com.operations.Matrix.Matrix matrix76 = com.operations.Matrix.MatrixTransformations.rotate2D((-1.0d));
        com.operations.Matrix.Matrix matrix78 = com.operations.Matrix.MatrixTransformations.rotate2D((double) (-1L));
        com.operations.Matrix.Matrix matrix80 = com.operations.Matrix.MatrixTransformations.rotate2D((double) (short) 100);
        double[] doubleArray83 = new double[] { 137.90576492663388d, (byte) -1 };
        double[] doubleArray84 = com.operations.Matrix.MatrixSolver.solveGaussian(matrix80, doubleArray83);
        double[] doubleArray85 = com.operations.Matrix.MatrixSolver.solveGaussian(matrix78, doubleArray83);
        double[] doubleArray86 = com.operations.Matrix.MatrixSolver.solveGaussian(matrix76, doubleArray83);
        boolean boolean88 = com.operations.Matrix.MatrixUtils.compare(matrix59, matrix76, (double) '4');
        com.operations.Matrix.Matrix matrix89 = com.operations.Matrix.MatrixOperations.subtract(matrix48, matrix76);
        int int90 = matrix89.getCols();
        matrix89.print();
        org.junit.Assert.assertNotNull(matrix2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertArrayEquals(doubleArray6, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertArrayEquals(doubleArray9, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertNotNull(matrix14);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertArrayEquals(doubleArray17, new double[] { 137.90576492663388d, (-1.0d) }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertArrayEquals(doubleArray18, new double[] { (-24.931892522286255d), (-135.63701830716116d) }, 1.0E-15);
        org.junit.Assert.assertNotNull(matrix19);
        org.junit.Assert.assertNotNull(matrix20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 2 + "'", int21 == 2);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 2 + "'", int22 == 2);
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertArrayEquals(doubleArray25, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertArrayEquals(doubleArray28, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 2 + "'", int31 == 2);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 2 + "'", int32 == 2);
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertArrayEquals(doubleArray36, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertArrayEquals(doubleArray39, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(matrix44);
        org.junit.Assert.assertTrue("'" + double47 + "' != '" + (-0.1736481776669303d) + "'", double47 == (-0.1736481776669303d));
        org.junit.Assert.assertNotNull(matrix48);
        org.junit.Assert.assertNotNull(matrix50);
        org.junit.Assert.assertNotNull(matrix52);
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertArrayEquals(doubleArray55, new double[] { 137.90576492663388d, (-1.0d) }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray56);
        org.junit.Assert.assertArrayEquals(doubleArray56, new double[] { (-24.931892522286255d), (-135.63701830716116d) }, 1.0E-15);
        org.junit.Assert.assertNotNull(matrix59);
        org.junit.Assert.assertNotNull(doubleArray62);
        org.junit.Assert.assertArrayEquals(doubleArray62, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray65);
        org.junit.Assert.assertArrayEquals(doubleArray65, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray66);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 2 + "'", int68 == 2);
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 2 + "'", int69 == 2);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 2 + "'", int70 == 2);
        org.junit.Assert.assertNotNull(matrixArray71);
        org.junit.Assert.assertNotNull(matrix72);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertNotNull(matrix76);
        org.junit.Assert.assertNotNull(matrix78);
        org.junit.Assert.assertNotNull(matrix80);
        org.junit.Assert.assertNotNull(doubleArray83);
        org.junit.Assert.assertArrayEquals(doubleArray83, new double[] { 137.90576492663388d, (-1.0d) }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray84);
        org.junit.Assert.assertArrayEquals(doubleArray84, new double[] { (-24.931892522286255d), (-135.63701830716116d) }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray85);
        org.junit.Assert.assertArrayEquals(doubleArray85, new double[] { 137.90221361711127d, 1.4069397643877004d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray86);
        org.junit.Assert.assertArrayEquals(doubleArray86, new double[] { 137.90221361711127d, 1.4069397643877004d }, 1.0E-15);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + true + "'", boolean88 == true);
        org.junit.Assert.assertNotNull(matrix89);
        org.junit.Assert.assertTrue("'" + int90 + "' != '" + 2 + "'", int90 == 2);
    }

    @Test
    public void test4700() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4700");
        com.operations.Matrix.Matrix matrix1 = com.operations.Matrix.MatrixTransformations.rotate2D(35.0d);
        com.operations.Matrix.Matrix matrix2 = com.operations.Matrix.MatrixOperations.transpose(matrix1);
        org.junit.Assert.assertNotNull(matrix1);
        org.junit.Assert.assertNotNull(matrix2);
    }

    @Test
    public void test4701() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4701");
        com.operations.Matrix.Matrix matrix2 = com.operations.Matrix.MatrixTransformations.project2D(0.0d, (double) 0);
        com.operations.Matrix.Matrix[] matrixArray3 = com.operations.Matrix.MatrixDecompositions.luDecomposition(matrix2);
        com.operations.Matrix.Matrix matrix6 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0L, (double) (byte) 10);
        int int7 = matrix6.getRows();
        com.operations.Matrix.Matrix matrix9 = com.operations.Matrix.MatrixOperations.scalarMultiply(matrix6, (double) 2);
        double double10 = com.operations.Matrix.MatrixUtils.frobeniusNorm(matrix6);
        int int11 = matrix6.getRows();
        com.operations.Matrix.Matrix matrix12 = com.operations.Matrix.MatrixOperations.transpose(matrix6);
        com.operations.Matrix.Matrix matrix13 = com.operations.Matrix.MatrixOperations.multiply(matrix2, matrix12);
        double[][] doubleArray14 = matrix2.getData();
        com.operations.Matrix.Matrix matrix15 = new com.operations.Matrix.Matrix(doubleArray14);
        com.operations.Matrix.Matrix matrix16 = new com.operations.Matrix.Matrix(doubleArray14);
        com.operations.Matrix.Matrix matrix19 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0L, (double) (byte) 10);
        int int20 = matrix19.getRows();
        com.operations.Matrix.Matrix matrix23 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0L, (double) (byte) 10);
        int int24 = matrix23.getRows();
        com.operations.Matrix.Matrix matrix26 = com.operations.Matrix.MatrixOperations.scalarMultiply(matrix23, (double) 2);
        com.operations.Matrix.Matrix matrix27 = com.operations.Matrix.MatrixOperations.subtract(matrix19, matrix23);
        com.operations.Matrix.Matrix matrix30 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0L, (double) (byte) 10);
        int int31 = matrix30.getRows();
        com.operations.Matrix.Matrix matrix37 = com.operations.Matrix.MatrixUtils.generateRandomMatrix(100, (int) (byte) 1, (int) '#', (int) '#', 1L);
        boolean boolean39 = com.operations.Matrix.MatrixUtils.compare(matrix30, matrix37, (double) 1.0f);
        com.operations.Matrix.Matrix matrix41 = com.operations.Matrix.MatrixOperations.scalarMultiply(matrix30, (double) 1L);
        boolean boolean43 = com.operations.Matrix.MatrixUtils.compare(matrix27, matrix41, 0.0d);
        int int44 = matrix41.getCols();
        com.operations.Matrix.Matrix matrix45 = com.operations.Matrix.MatrixOperations.transpose(matrix41);
        double double46 = com.operations.Matrix.MatrixUtils.frobeniusNorm(matrix45);
        com.operations.Matrix.Matrix matrix47 = com.operations.Matrix.MatrixOperations.add(matrix16, matrix45);
        com.operations.Matrix.Matrix[] matrixArray48 = com.operations.Matrix.MatrixDecompositions.luDecomposition(matrix16);
        double[][] doubleArray49 = matrix16.getData();
        org.junit.Assert.assertNotNull(matrix2);
        org.junit.Assert.assertNotNull(matrixArray3);
        org.junit.Assert.assertNotNull(matrix6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 2 + "'", int7 == 2);
        org.junit.Assert.assertNotNull(matrix9);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 10.0d + "'", double10 == 10.0d);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 2 + "'", int11 == 2);
        org.junit.Assert.assertNotNull(matrix12);
        org.junit.Assert.assertNotNull(matrix13);
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertNotNull(matrix19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 2 + "'", int20 == 2);
        org.junit.Assert.assertNotNull(matrix23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 2 + "'", int24 == 2);
        org.junit.Assert.assertNotNull(matrix26);
        org.junit.Assert.assertNotNull(matrix27);
        org.junit.Assert.assertNotNull(matrix30);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 2 + "'", int31 == 2);
        org.junit.Assert.assertNotNull(matrix37);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(matrix41);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 2 + "'", int44 == 2);
        org.junit.Assert.assertNotNull(matrix45);
        org.junit.Assert.assertTrue("'" + double46 + "' != '" + 10.0d + "'", double46 == 10.0d);
        org.junit.Assert.assertNotNull(matrix47);
        org.junit.Assert.assertNotNull(matrixArray48);
        org.junit.Assert.assertNotNull(doubleArray49);
    }

    @Test
    public void test4702() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4702");
        com.operations.Matrix.Matrix matrix2 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0L, (double) (byte) 10);
        int int3 = matrix2.getRows();
        com.operations.Matrix.Matrix matrix5 = com.operations.Matrix.MatrixOperations.scalarMultiply(matrix2, (double) 2);
        matrix2.print();
        com.operations.Matrix.Matrix matrix8 = com.operations.Matrix.MatrixOperations.scalarMultiply(matrix2, 100.00499987500625d);
        int int9 = matrix8.getRows();
        com.operations.Matrix.Matrix matrix11 = com.operations.Matrix.MatrixTransformations.rotate2D((double) 1.0f);
        com.operations.Matrix.Matrix matrix14 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0L, (double) (byte) 10);
        int int15 = matrix14.getRows();
        com.operations.Matrix.Matrix matrix17 = com.operations.Matrix.MatrixOperations.scalarMultiply(matrix14, (double) 2);
        double double18 = com.operations.Matrix.MatrixUtils.frobeniusNorm(matrix14);
        com.operations.Matrix.Matrix matrix21 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0L, (double) (byte) 10);
        int int22 = matrix21.getRows();
        com.operations.Matrix.Matrix matrix24 = com.operations.Matrix.MatrixOperations.scalarMultiply(matrix21, (double) 2);
        com.operations.Matrix.Matrix matrix25 = com.operations.Matrix.MatrixOperations.subtract(matrix14, matrix24);
        com.operations.Matrix.Matrix matrix26 = com.operations.Matrix.MatrixOperations.add(matrix11, matrix24);
        com.operations.Matrix.Matrix[] matrixArray27 = com.operations.Matrix.MatrixDecompositions.luDecomposition(matrix24);
        boolean boolean28 = com.operations.Matrix.MatrixUtils.isSquare(matrix24);
        com.operations.Matrix.Matrix matrix29 = com.operations.Matrix.MatrixOperations.transpose(matrix24);
        com.operations.Matrix.Matrix matrix31 = com.operations.Matrix.MatrixOperations.scalarMultiply(matrix24, (double) ' ');
        com.operations.Matrix.Matrix matrix32 = com.operations.Matrix.MatrixOperations.multiply(matrix8, matrix31);
        int int33 = matrix31.getRows();
        org.junit.Assert.assertNotNull(matrix2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 2 + "'", int3 == 2);
        org.junit.Assert.assertNotNull(matrix5);
        org.junit.Assert.assertNotNull(matrix8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 2 + "'", int9 == 2);
        org.junit.Assert.assertNotNull(matrix11);
        org.junit.Assert.assertNotNull(matrix14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 2 + "'", int15 == 2);
        org.junit.Assert.assertNotNull(matrix17);
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 10.0d + "'", double18 == 10.0d);
        org.junit.Assert.assertNotNull(matrix21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 2 + "'", int22 == 2);
        org.junit.Assert.assertNotNull(matrix24);
        org.junit.Assert.assertNotNull(matrix25);
        org.junit.Assert.assertNotNull(matrix26);
        org.junit.Assert.assertNotNull(matrixArray27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertNotNull(matrix29);
        org.junit.Assert.assertNotNull(matrix31);
        org.junit.Assert.assertNotNull(matrix32);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 2 + "'", int33 == 2);
    }

    @Test
    public void test4703() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4703");
        com.operations.Matrix.Matrix matrix5 = com.operations.Matrix.MatrixUtils.generateRandomMatrix(10, 1, 35, (int) (short) 1, (long) '4');
        com.operations.Matrix.Matrix matrix8 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0L, (double) (byte) 10);
        int int9 = matrix8.getRows();
        com.operations.Matrix.Matrix matrix12 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0L, (double) (byte) 10);
        int int13 = matrix12.getRows();
        com.operations.Matrix.Matrix matrix15 = com.operations.Matrix.MatrixOperations.scalarMultiply(matrix12, (double) 2);
        com.operations.Matrix.Matrix matrix16 = com.operations.Matrix.MatrixOperations.subtract(matrix8, matrix12);
        com.operations.Matrix.Matrix matrix19 = com.operations.Matrix.MatrixTransformations.scale2D(146.4308710620817d, (double) 10L);
        boolean boolean21 = com.operations.Matrix.MatrixUtils.compare(matrix12, matrix19, (double) (byte) 1);
        com.operations.Matrix.Matrix[] matrixArray22 = com.operations.Matrix.MatrixDecompositions.luDecomposition(matrix19);
        // The following exception was thrown during execution in test generation
        try {
            com.operations.Matrix.Matrix matrix23 = com.operations.Matrix.MatrixOperations.subtract(matrix5, matrix19);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Matrices must have the same dimensions for subtraction.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(matrix5);
        org.junit.Assert.assertNotNull(matrix8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 2 + "'", int9 == 2);
        org.junit.Assert.assertNotNull(matrix12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 2 + "'", int13 == 2);
        org.junit.Assert.assertNotNull(matrix15);
        org.junit.Assert.assertNotNull(matrix16);
        org.junit.Assert.assertNotNull(matrix19);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(matrixArray22);
    }

    @Test
    public void test4704() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4704");
        com.operations.Matrix.Matrix matrix4 = com.operations.Matrix.MatrixUtils.generateRandomMatrix(10, (int) (byte) 100, (int) (short) 10, 52);
        // The following exception was thrown during execution in test generation
        try {
            com.operations.Matrix.Matrix matrix5 = com.operations.Matrix.MatrixDecompositions.choleskyDecomposition(matrix4);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Matrix must be square for Cholesky decomposition.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(matrix4);
    }

    @Test
    public void test4705() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4705");
        com.operations.Matrix.Matrix matrix4 = com.operations.Matrix.MatrixUtils.generateRandomMatrix(35, 2, 0, (int) (byte) 10);
        double double5 = com.operations.Matrix.MatrixUtils.frobeniusNorm(matrix4);
        org.junit.Assert.assertNotNull(matrix4);
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 45.499967200078125d + "'", double5 == 45.499967200078125d);
    }

    @Test
    public void test4706() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4706");
        com.operations.Matrix.Matrix matrix2 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0L, (double) (byte) 10);
        double[] doubleArray5 = new double[] { 10, 'a' };
        double[] doubleArray8 = new double[] { 10, 'a' };
        double[][] doubleArray9 = new double[][] { doubleArray5, doubleArray8 };
        com.operations.Matrix.Matrix matrix10 = new com.operations.Matrix.Matrix(doubleArray9);
        int int11 = matrix10.getCols();
        int int12 = matrix10.getCols();
        int int13 = matrix10.getCols();
        com.operations.Matrix.Matrix[] matrixArray14 = com.operations.Matrix.MatrixDecompositions.luDecomposition(matrix10);
        com.operations.Matrix.Matrix matrix15 = com.operations.Matrix.MatrixOperations.multiply(matrix2, matrix10);
        com.operations.Matrix.Matrix matrix17 = com.operations.Matrix.MatrixTransformations.rotate2D((double) (short) 100);
        boolean boolean19 = com.operations.Matrix.MatrixUtils.compare(matrix10, matrix17, (double) (byte) 0);
        com.operations.Matrix.Matrix[] matrixArray20 = com.operations.Matrix.MatrixDecompositions.luDecomposition(matrix10);
        com.operations.Matrix.Matrix matrix21 = com.operations.Matrix.MatrixDecompositions.choleskyDecomposition(matrix10);
        com.operations.Matrix.Matrix matrix22 = com.operations.Matrix.MatrixOperations.transpose(matrix21);
        com.operations.Matrix.Matrix matrix23 = com.operations.Matrix.MatrixDecompositions.choleskyDecomposition(matrix22);
        double[][] doubleArray24 = matrix22.getData();
        com.operations.Matrix.Matrix matrix25 = new com.operations.Matrix.Matrix(doubleArray24);
        com.operations.Matrix.Matrix matrix26 = com.operations.Matrix.MatrixOperations.transpose(matrix25);
        com.operations.Matrix.Matrix matrix28 = com.operations.Matrix.MatrixTransformations.rotate2D(100.0d);
        int int29 = matrix28.getCols();
        double[][] doubleArray30 = matrix28.getData();
        double[] doubleArray33 = new double[] { 10, 'a' };
        double[] doubleArray36 = new double[] { 10, 'a' };
        double[][] doubleArray37 = new double[][] { doubleArray33, doubleArray36 };
        com.operations.Matrix.Matrix matrix38 = new com.operations.Matrix.Matrix(doubleArray37);
        com.operations.Matrix.Matrix matrix39 = com.operations.Matrix.MatrixOperations.transpose(matrix38);
        com.operations.Matrix.Matrix matrix42 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0L, (double) (byte) 10);
        int int43 = matrix42.getRows();
        com.operations.Matrix.Matrix matrix49 = com.operations.Matrix.MatrixUtils.generateRandomMatrix(100, (int) (byte) 1, (int) '#', (int) '#', 1L);
        boolean boolean51 = com.operations.Matrix.MatrixUtils.compare(matrix42, matrix49, (double) 1.0f);
        com.operations.Matrix.Matrix matrix53 = com.operations.Matrix.MatrixOperations.scalarMultiply(matrix42, (double) 1L);
        matrix42.print();
        com.operations.Matrix.Matrix matrix55 = com.operations.Matrix.MatrixOperations.multiply(matrix39, matrix42);
        boolean boolean57 = com.operations.Matrix.MatrixUtils.compare(matrix28, matrix55, (double) 0.0f);
        boolean boolean58 = com.operations.Matrix.MatrixUtils.isSquare(matrix55);
        com.operations.Matrix.Matrix matrix59 = com.operations.Matrix.MatrixOperations.multiply(matrix26, matrix55);
        double double60 = com.operations.Matrix.MatrixUtils.frobeniusNorm(matrix55);
        com.operations.Matrix.Matrix matrix63 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0L, (double) (byte) 10);
        double[] doubleArray66 = new double[] { 10, 'a' };
        double[] doubleArray69 = new double[] { 10, 'a' };
        double[][] doubleArray70 = new double[][] { doubleArray66, doubleArray69 };
        com.operations.Matrix.Matrix matrix71 = new com.operations.Matrix.Matrix(doubleArray70);
        int int72 = matrix71.getCols();
        int int73 = matrix71.getCols();
        int int74 = matrix71.getCols();
        com.operations.Matrix.Matrix[] matrixArray75 = com.operations.Matrix.MatrixDecompositions.luDecomposition(matrix71);
        com.operations.Matrix.Matrix matrix76 = com.operations.Matrix.MatrixOperations.multiply(matrix63, matrix71);
        com.operations.Matrix.Matrix matrix78 = com.operations.Matrix.MatrixTransformations.rotate2D((double) (short) 100);
        boolean boolean80 = com.operations.Matrix.MatrixUtils.compare(matrix71, matrix78, (double) (byte) 0);
        double[] doubleArray83 = new double[] { 10, 'a' };
        double[] doubleArray86 = new double[] { 10, 'a' };
        double[][] doubleArray87 = new double[][] { doubleArray83, doubleArray86 };
        com.operations.Matrix.Matrix matrix88 = new com.operations.Matrix.Matrix(doubleArray87);
        com.operations.Matrix.Matrix matrix89 = new com.operations.Matrix.Matrix(doubleArray87);
        com.operations.Matrix.Matrix matrix90 = new com.operations.Matrix.Matrix(doubleArray87);
        boolean boolean92 = com.operations.Matrix.MatrixUtils.compare(matrix71, matrix90, (double) (-1));
        double double93 = com.operations.Matrix.MatrixUtils.frobeniusNorm(matrix71);
        com.operations.Matrix.Matrix matrix94 = com.operations.Matrix.MatrixDecompositions.choleskyDecomposition(matrix71);
        matrix94.print();
        boolean boolean97 = com.operations.Matrix.MatrixUtils.compare(matrix55, matrix94, 340.0d);
        double double98 = com.operations.Matrix.MatrixUtils.frobeniusNorm(matrix55);
        matrix55.print();
        org.junit.Assert.assertNotNull(matrix2);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertArrayEquals(doubleArray5, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertArrayEquals(doubleArray8, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 2 + "'", int11 == 2);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 2 + "'", int12 == 2);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 2 + "'", int13 == 2);
        org.junit.Assert.assertNotNull(matrixArray14);
        org.junit.Assert.assertNotNull(matrix15);
        org.junit.Assert.assertNotNull(matrix17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(matrixArray20);
        org.junit.Assert.assertNotNull(matrix21);
        org.junit.Assert.assertNotNull(matrix22);
        org.junit.Assert.assertNotNull(matrix23);
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertNotNull(matrix26);
        org.junit.Assert.assertNotNull(matrix28);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 2 + "'", int29 == 2);
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertArrayEquals(doubleArray33, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertArrayEquals(doubleArray36, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertNotNull(matrix39);
        org.junit.Assert.assertNotNull(matrix42);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 2 + "'", int43 == 2);
        org.junit.Assert.assertNotNull(matrix49);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(matrix53);
        org.junit.Assert.assertNotNull(matrix55);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + true + "'", boolean58 == true);
        org.junit.Assert.assertNotNull(matrix59);
        org.junit.Assert.assertTrue("'" + double60 + "' != '" + 975.1410154434076d + "'", double60 == 975.1410154434076d);
        org.junit.Assert.assertNotNull(matrix63);
        org.junit.Assert.assertNotNull(doubleArray66);
        org.junit.Assert.assertArrayEquals(doubleArray66, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray69);
        org.junit.Assert.assertArrayEquals(doubleArray69, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray70);
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 2 + "'", int72 == 2);
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + 2 + "'", int73 == 2);
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 2 + "'", int74 == 2);
        org.junit.Assert.assertNotNull(matrixArray75);
        org.junit.Assert.assertNotNull(matrix76);
        org.junit.Assert.assertNotNull(matrix78);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertNotNull(doubleArray83);
        org.junit.Assert.assertArrayEquals(doubleArray83, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray86);
        org.junit.Assert.assertArrayEquals(doubleArray86, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray87);
        org.junit.Assert.assertTrue("'" + boolean92 + "' != '" + false + "'", boolean92 == false);
        org.junit.Assert.assertTrue("'" + double93 + "' != '" + 137.90576492663388d + "'", double93 == 137.90576492663388d);
        org.junit.Assert.assertNotNull(matrix94);
        org.junit.Assert.assertTrue("'" + boolean97 + "' != '" + false + "'", boolean97 == false);
        org.junit.Assert.assertTrue("'" + double98 + "' != '" + 975.1410154434076d + "'", double98 == 975.1410154434076d);
    }

    @Test
    public void test4707() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4707");
        com.operations.Matrix.Matrix matrix2 = com.operations.Matrix.MatrixTransformations.project2D((double) ' ', 0.0d);
        boolean boolean3 = com.operations.Matrix.MatrixUtils.isSymmetric(matrix2);
        int int4 = matrix2.getRows();
        com.operations.Matrix.Matrix matrix6 = com.operations.Matrix.MatrixOperations.scalarMultiply(matrix2, (double) 10);
        int int7 = matrix6.getRows();
        org.junit.Assert.assertNotNull(matrix2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 2 + "'", int4 == 2);
        org.junit.Assert.assertNotNull(matrix6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 2 + "'", int7 == 2);
    }

    @Test
    public void test4708() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4708");
        com.operations.Matrix.Matrix matrix2 = com.operations.Matrix.MatrixTransformations.project2D(1.6135503908876414d, 0.0d);
        org.junit.Assert.assertNotNull(matrix2);
    }

    @Test
    public void test4709() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4709");
        com.operations.Matrix.Matrix matrix2 = com.operations.Matrix.MatrixTransformations.project2D(30.01666203960727d, (double) (-1L));
        // The following exception was thrown during execution in test generation
        try {
            com.operations.Matrix.Matrix matrix3 = com.operations.Matrix.MatrixDecompositions.choleskyDecomposition(matrix2);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Matrix is not positive definite.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(matrix2);
    }

    @Test
    public void test4710() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4710");
        com.operations.Matrix.Matrix matrix2 = com.operations.Matrix.MatrixTransformations.project2D((double) 1L, 0.01745240643728351d);
        com.operations.Matrix.Matrix matrix5 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0L, (double) (byte) 10);
        double[] doubleArray8 = new double[] { 10, 'a' };
        double[] doubleArray11 = new double[] { 10, 'a' };
        double[][] doubleArray12 = new double[][] { doubleArray8, doubleArray11 };
        com.operations.Matrix.Matrix matrix13 = new com.operations.Matrix.Matrix(doubleArray12);
        int int14 = matrix13.getCols();
        int int15 = matrix13.getCols();
        int int16 = matrix13.getCols();
        com.operations.Matrix.Matrix[] matrixArray17 = com.operations.Matrix.MatrixDecompositions.luDecomposition(matrix13);
        com.operations.Matrix.Matrix matrix18 = com.operations.Matrix.MatrixOperations.multiply(matrix5, matrix13);
        com.operations.Matrix.Matrix matrix20 = com.operations.Matrix.MatrixTransformations.rotate2D((double) (short) 100);
        boolean boolean22 = com.operations.Matrix.MatrixUtils.compare(matrix13, matrix20, (double) (byte) 0);
        com.operations.Matrix.Matrix[] matrixArray23 = com.operations.Matrix.MatrixDecompositions.luDecomposition(matrix13);
        com.operations.Matrix.Matrix matrix24 = com.operations.Matrix.MatrixOperations.transpose(matrix13);
        com.operations.Matrix.Matrix matrix27 = com.operations.Matrix.MatrixTransformations.scale2D((double) 1.0f, (double) 1);
        com.operations.Matrix.Matrix matrix29 = com.operations.Matrix.MatrixTransformations.rotate2D((double) 1.0f);
        com.operations.Matrix.Matrix matrix32 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0L, (double) (byte) 10);
        int int33 = matrix32.getRows();
        com.operations.Matrix.Matrix matrix35 = com.operations.Matrix.MatrixOperations.scalarMultiply(matrix32, (double) 2);
        double double36 = com.operations.Matrix.MatrixUtils.frobeniusNorm(matrix32);
        com.operations.Matrix.Matrix matrix39 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0L, (double) (byte) 10);
        int int40 = matrix39.getRows();
        com.operations.Matrix.Matrix matrix42 = com.operations.Matrix.MatrixOperations.scalarMultiply(matrix39, (double) 2);
        com.operations.Matrix.Matrix matrix43 = com.operations.Matrix.MatrixOperations.subtract(matrix32, matrix42);
        com.operations.Matrix.Matrix matrix44 = com.operations.Matrix.MatrixOperations.add(matrix29, matrix42);
        boolean boolean46 = com.operations.Matrix.MatrixUtils.compare(matrix27, matrix29, (double) (byte) -1);
        com.operations.Matrix.Matrix matrix47 = com.operations.Matrix.MatrixOperations.subtract(matrix24, matrix27);
        com.operations.Matrix.Matrix matrix49 = com.operations.Matrix.MatrixTransformations.rotate2D((double) (short) 100);
        double[] doubleArray52 = new double[] { 137.90576492663388d, (byte) -1 };
        double[] doubleArray53 = com.operations.Matrix.MatrixSolver.solveGaussian(matrix49, doubleArray52);
        double[] doubleArray54 = com.operations.Matrix.MatrixSolver.solveGaussian(matrix27, doubleArray52);
        double[] doubleArray55 = com.operations.Matrix.MatrixSolver.solveGaussian(matrix2, doubleArray54);
        com.operations.Matrix.Matrix[] matrixArray56 = com.operations.Matrix.MatrixDecompositions.luDecomposition(matrix2);
        int int57 = matrix2.getRows();
        org.junit.Assert.assertNotNull(matrix2);
        org.junit.Assert.assertNotNull(matrix5);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertArrayEquals(doubleArray8, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertArrayEquals(doubleArray11, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 2 + "'", int14 == 2);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 2 + "'", int15 == 2);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 2 + "'", int16 == 2);
        org.junit.Assert.assertNotNull(matrixArray17);
        org.junit.Assert.assertNotNull(matrix18);
        org.junit.Assert.assertNotNull(matrix20);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(matrixArray23);
        org.junit.Assert.assertNotNull(matrix24);
        org.junit.Assert.assertNotNull(matrix27);
        org.junit.Assert.assertNotNull(matrix29);
        org.junit.Assert.assertNotNull(matrix32);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 2 + "'", int33 == 2);
        org.junit.Assert.assertNotNull(matrix35);
        org.junit.Assert.assertTrue("'" + double36 + "' != '" + 10.0d + "'", double36 == 10.0d);
        org.junit.Assert.assertNotNull(matrix39);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 2 + "'", int40 == 2);
        org.junit.Assert.assertNotNull(matrix42);
        org.junit.Assert.assertNotNull(matrix43);
        org.junit.Assert.assertNotNull(matrix44);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(matrix47);
        org.junit.Assert.assertNotNull(matrix49);
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertArrayEquals(doubleArray52, new double[] { 137.90576492663388d, (-1.0d) }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertArrayEquals(doubleArray53, new double[] { (-24.931892522286255d), (-135.63701830716116d) }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray54);
        org.junit.Assert.assertArrayEquals(doubleArray54, new double[] { 137.90576492663388d, (-1.0d) }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertArrayEquals(doubleArray55, new double[] { 137.90576492663388d, (-57.298688498550185d) }, 1.0E-15);
        org.junit.Assert.assertNotNull(matrixArray56);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 2 + "'", int57 == 2);
    }

    @Test
    public void test4711() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4711");
        // The following exception was thrown during execution in test generation
        try {
            com.operations.Matrix.Matrix matrix4 = com.operations.Matrix.MatrixUtils.generateRandomMatrix(0, 32, (int) (byte) 100, 35);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
    }

    @Test
    public void test4712() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4712");
        com.operations.Matrix.Matrix matrix1 = com.operations.Matrix.MatrixTransformations.rotate2D((double) (short) 100);
        double[][] doubleArray2 = matrix1.getData();
        com.operations.Matrix.Matrix matrix3 = new com.operations.Matrix.Matrix(doubleArray2);
        int int4 = matrix3.getCols();
        int int5 = matrix3.getCols();
        com.operations.Matrix.Matrix matrix8 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0L, (double) (byte) 10);
        double[] doubleArray11 = new double[] { 10, 'a' };
        double[] doubleArray14 = new double[] { 10, 'a' };
        double[][] doubleArray15 = new double[][] { doubleArray11, doubleArray14 };
        com.operations.Matrix.Matrix matrix16 = new com.operations.Matrix.Matrix(doubleArray15);
        int int17 = matrix16.getCols();
        int int18 = matrix16.getCols();
        int int19 = matrix16.getCols();
        com.operations.Matrix.Matrix[] matrixArray20 = com.operations.Matrix.MatrixDecompositions.luDecomposition(matrix16);
        com.operations.Matrix.Matrix matrix21 = com.operations.Matrix.MatrixOperations.multiply(matrix8, matrix16);
        com.operations.Matrix.Matrix matrix23 = com.operations.Matrix.MatrixTransformations.rotate2D((double) (short) 100);
        boolean boolean25 = com.operations.Matrix.MatrixUtils.compare(matrix16, matrix23, (double) (byte) 0);
        com.operations.Matrix.Matrix[] matrixArray26 = com.operations.Matrix.MatrixDecompositions.luDecomposition(matrix16);
        com.operations.Matrix.Matrix matrix27 = com.operations.Matrix.MatrixOperations.transpose(matrix16);
        com.operations.Matrix.Matrix matrix30 = com.operations.Matrix.MatrixTransformations.scale2D((double) 1.0f, (double) 1);
        com.operations.Matrix.Matrix matrix32 = com.operations.Matrix.MatrixTransformations.rotate2D((double) 1.0f);
        com.operations.Matrix.Matrix matrix35 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0L, (double) (byte) 10);
        int int36 = matrix35.getRows();
        com.operations.Matrix.Matrix matrix38 = com.operations.Matrix.MatrixOperations.scalarMultiply(matrix35, (double) 2);
        double double39 = com.operations.Matrix.MatrixUtils.frobeniusNorm(matrix35);
        com.operations.Matrix.Matrix matrix42 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0L, (double) (byte) 10);
        int int43 = matrix42.getRows();
        com.operations.Matrix.Matrix matrix45 = com.operations.Matrix.MatrixOperations.scalarMultiply(matrix42, (double) 2);
        com.operations.Matrix.Matrix matrix46 = com.operations.Matrix.MatrixOperations.subtract(matrix35, matrix45);
        com.operations.Matrix.Matrix matrix47 = com.operations.Matrix.MatrixOperations.add(matrix32, matrix45);
        boolean boolean49 = com.operations.Matrix.MatrixUtils.compare(matrix30, matrix32, (double) (byte) -1);
        com.operations.Matrix.Matrix matrix50 = com.operations.Matrix.MatrixOperations.subtract(matrix27, matrix30);
        double double51 = com.operations.Matrix.MatrixUtils.frobeniusNorm(matrix50);
        com.operations.Matrix.Matrix matrix53 = com.operations.Matrix.MatrixTransformations.rotate2D(100.0d);
        int int54 = matrix53.getCols();
        int int55 = matrix53.getRows();
        com.operations.Matrix.Matrix matrix56 = com.operations.Matrix.MatrixOperations.subtract(matrix50, matrix53);
        com.operations.Matrix.Matrix[] matrixArray57 = com.operations.Matrix.MatrixDecompositions.luDecomposition(matrix56);
        com.operations.Matrix.Matrix matrix59 = com.operations.Matrix.MatrixTransformations.rotate2D((double) (-1L));
        com.operations.Matrix.Matrix matrix61 = com.operations.Matrix.MatrixTransformations.rotate2D((double) (short) 100);
        double[] doubleArray64 = new double[] { 137.90576492663388d, (byte) -1 };
        double[] doubleArray65 = com.operations.Matrix.MatrixSolver.solveGaussian(matrix61, doubleArray64);
        double[] doubleArray66 = com.operations.Matrix.MatrixSolver.solveGaussian(matrix59, doubleArray64);
        double[][] doubleArray67 = matrix59.getData();
        boolean boolean68 = com.operations.Matrix.MatrixUtils.isSquare(matrix59);
        com.operations.Matrix.Matrix matrix69 = com.operations.Matrix.MatrixOperations.subtract(matrix56, matrix59);
        com.operations.Matrix.Matrix matrix70 = com.operations.Matrix.MatrixOperations.add(matrix3, matrix59);
        com.operations.Matrix.Matrix matrix72 = com.operations.Matrix.MatrixOperations.scalarMultiply(matrix70, (double) 35);
        org.junit.Assert.assertNotNull(matrix1);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 2 + "'", int4 == 2);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 2 + "'", int5 == 2);
        org.junit.Assert.assertNotNull(matrix8);
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertArrayEquals(doubleArray11, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertArrayEquals(doubleArray14, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 2 + "'", int17 == 2);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 2 + "'", int18 == 2);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 2 + "'", int19 == 2);
        org.junit.Assert.assertNotNull(matrixArray20);
        org.junit.Assert.assertNotNull(matrix21);
        org.junit.Assert.assertNotNull(matrix23);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(matrixArray26);
        org.junit.Assert.assertNotNull(matrix27);
        org.junit.Assert.assertNotNull(matrix30);
        org.junit.Assert.assertNotNull(matrix32);
        org.junit.Assert.assertNotNull(matrix35);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 2 + "'", int36 == 2);
        org.junit.Assert.assertNotNull(matrix38);
        org.junit.Assert.assertTrue("'" + double39 + "' != '" + 10.0d + "'", double39 == 10.0d);
        org.junit.Assert.assertNotNull(matrix42);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 2 + "'", int43 == 2);
        org.junit.Assert.assertNotNull(matrix45);
        org.junit.Assert.assertNotNull(matrix46);
        org.junit.Assert.assertNotNull(matrix47);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(matrix50);
        org.junit.Assert.assertTrue("'" + double51 + "' != '" + 137.13497001129946d + "'", double51 == 137.13497001129946d);
        org.junit.Assert.assertNotNull(matrix53);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 2 + "'", int54 == 2);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 2 + "'", int55 == 2);
        org.junit.Assert.assertNotNull(matrix56);
        org.junit.Assert.assertNotNull(matrixArray57);
        org.junit.Assert.assertNotNull(matrix59);
        org.junit.Assert.assertNotNull(matrix61);
        org.junit.Assert.assertNotNull(doubleArray64);
        org.junit.Assert.assertArrayEquals(doubleArray64, new double[] { 137.90576492663388d, (-1.0d) }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray65);
        org.junit.Assert.assertArrayEquals(doubleArray65, new double[] { (-24.931892522286255d), (-135.63701830716116d) }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray66);
        org.junit.Assert.assertArrayEquals(doubleArray66, new double[] { 137.90221361711127d, 1.4069397643877004d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray67);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + true + "'", boolean68 == true);
        org.junit.Assert.assertNotNull(matrix69);
        org.junit.Assert.assertNotNull(matrix70);
        org.junit.Assert.assertNotNull(matrix72);
    }

    @Test
    public void test4713() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4713");
        com.operations.Matrix.Matrix matrix1 = com.operations.Matrix.MatrixTransformations.rotate2D(100.0d);
        int int2 = matrix1.getCols();
        int int3 = matrix1.getRows();
        com.operations.Matrix.Matrix matrix6 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0L, (double) (byte) 10);
        int int7 = matrix6.getRows();
        com.operations.Matrix.Matrix matrix9 = com.operations.Matrix.MatrixOperations.scalarMultiply(matrix6, (double) 2);
        double double10 = com.operations.Matrix.MatrixUtils.frobeniusNorm(matrix6);
        com.operations.Matrix.Matrix matrix11 = com.operations.Matrix.MatrixOperations.add(matrix1, matrix6);
        double[] doubleArray14 = new double[] { 10, 'a' };
        double[] doubleArray17 = new double[] { 10, 'a' };
        double[][] doubleArray18 = new double[][] { doubleArray14, doubleArray17 };
        com.operations.Matrix.Matrix matrix19 = new com.operations.Matrix.Matrix(doubleArray18);
        com.operations.Matrix.Matrix matrix20 = new com.operations.Matrix.Matrix(doubleArray18);
        com.operations.Matrix.Matrix matrix22 = com.operations.Matrix.MatrixTransformations.rotate2D((double) (short) 100);
        double[] doubleArray25 = new double[] { 137.90576492663388d, (byte) -1 };
        double[] doubleArray26 = com.operations.Matrix.MatrixSolver.solveGaussian(matrix22, doubleArray25);
        com.operations.Matrix.Matrix matrix27 = com.operations.Matrix.MatrixOperations.add(matrix20, matrix22);
        com.operations.Matrix.Matrix matrix28 = com.operations.Matrix.MatrixOperations.transpose(matrix22);
        com.operations.Matrix.Matrix matrix30 = com.operations.Matrix.MatrixTransformations.rotate2D((double) (short) 100);
        com.operations.Matrix.Matrix matrix31 = com.operations.Matrix.MatrixOperations.subtract(matrix22, matrix30);
        com.operations.Matrix.Matrix matrix32 = com.operations.Matrix.MatrixOperations.multiply(matrix1, matrix30);
        com.operations.Matrix.Matrix matrix34 = com.operations.Matrix.MatrixOperations.scalarMultiply(matrix1, 146.4308710620817d);
        com.operations.Matrix.Matrix matrix36 = com.operations.Matrix.MatrixTransformations.rotate2D((double) 1.0f);
        com.operations.Matrix.Matrix matrix39 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0L, (double) (byte) 10);
        int int40 = matrix39.getRows();
        com.operations.Matrix.Matrix matrix42 = com.operations.Matrix.MatrixOperations.scalarMultiply(matrix39, (double) 2);
        double double43 = com.operations.Matrix.MatrixUtils.frobeniusNorm(matrix39);
        com.operations.Matrix.Matrix matrix46 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0L, (double) (byte) 10);
        int int47 = matrix46.getRows();
        com.operations.Matrix.Matrix matrix49 = com.operations.Matrix.MatrixOperations.scalarMultiply(matrix46, (double) 2);
        com.operations.Matrix.Matrix matrix50 = com.operations.Matrix.MatrixOperations.subtract(matrix39, matrix49);
        com.operations.Matrix.Matrix matrix51 = com.operations.Matrix.MatrixOperations.add(matrix36, matrix49);
        com.operations.Matrix.Matrix[] matrixArray52 = com.operations.Matrix.MatrixDecompositions.luDecomposition(matrix49);
        boolean boolean53 = com.operations.Matrix.MatrixUtils.isSquare(matrix49);
        com.operations.Matrix.Matrix matrix54 = com.operations.Matrix.MatrixOperations.transpose(matrix49);
        com.operations.Matrix.Matrix matrix56 = com.operations.Matrix.MatrixOperations.scalarMultiply(matrix49, (double) ' ');
        matrix49.print();
        com.operations.Matrix.Matrix matrix58 = com.operations.Matrix.MatrixOperations.subtract(matrix34, matrix49);
        boolean boolean59 = com.operations.Matrix.MatrixUtils.isSymmetric(matrix58);
        org.junit.Assert.assertNotNull(matrix1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 2 + "'", int2 == 2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 2 + "'", int3 == 2);
        org.junit.Assert.assertNotNull(matrix6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 2 + "'", int7 == 2);
        org.junit.Assert.assertNotNull(matrix9);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 10.0d + "'", double10 == 10.0d);
        org.junit.Assert.assertNotNull(matrix11);
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertArrayEquals(doubleArray14, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertArrayEquals(doubleArray17, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertNotNull(matrix22);
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertArrayEquals(doubleArray25, new double[] { 137.90576492663388d, (-1.0d) }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertArrayEquals(doubleArray26, new double[] { (-24.931892522286255d), (-135.63701830716116d) }, 1.0E-15);
        org.junit.Assert.assertNotNull(matrix27);
        org.junit.Assert.assertNotNull(matrix28);
        org.junit.Assert.assertNotNull(matrix30);
        org.junit.Assert.assertNotNull(matrix31);
        org.junit.Assert.assertNotNull(matrix32);
        org.junit.Assert.assertNotNull(matrix34);
        org.junit.Assert.assertNotNull(matrix36);
        org.junit.Assert.assertNotNull(matrix39);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 2 + "'", int40 == 2);
        org.junit.Assert.assertNotNull(matrix42);
        org.junit.Assert.assertTrue("'" + double43 + "' != '" + 10.0d + "'", double43 == 10.0d);
        org.junit.Assert.assertNotNull(matrix46);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 2 + "'", int47 == 2);
        org.junit.Assert.assertNotNull(matrix49);
        org.junit.Assert.assertNotNull(matrix50);
        org.junit.Assert.assertNotNull(matrix51);
        org.junit.Assert.assertNotNull(matrixArray52);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true);
        org.junit.Assert.assertNotNull(matrix54);
        org.junit.Assert.assertNotNull(matrix56);
        org.junit.Assert.assertNotNull(matrix58);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
    }

    @Test
    public void test4714() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4714");
        double[] doubleArray2 = new double[] { 10, 'a' };
        double[] doubleArray5 = new double[] { 10, 'a' };
        double[][] doubleArray6 = new double[][] { doubleArray2, doubleArray5 };
        com.operations.Matrix.Matrix matrix7 = new com.operations.Matrix.Matrix(doubleArray6);
        int int8 = matrix7.getCols();
        boolean boolean9 = com.operations.Matrix.MatrixUtils.isSquare(matrix7);
        com.operations.Matrix.Matrix matrix10 = com.operations.Matrix.MatrixOperations.transpose(matrix7);
        int int11 = matrix10.getRows();
        double double12 = com.operations.Matrix.MatrixUtils.frobeniusNorm(matrix10);
        com.operations.Matrix.Matrix matrix15 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0L, (double) (byte) 10);
        double[] doubleArray18 = new double[] { 10, 'a' };
        double[] doubleArray21 = new double[] { 10, 'a' };
        double[][] doubleArray22 = new double[][] { doubleArray18, doubleArray21 };
        com.operations.Matrix.Matrix matrix23 = new com.operations.Matrix.Matrix(doubleArray22);
        int int24 = matrix23.getCols();
        int int25 = matrix23.getCols();
        int int26 = matrix23.getCols();
        com.operations.Matrix.Matrix[] matrixArray27 = com.operations.Matrix.MatrixDecompositions.luDecomposition(matrix23);
        com.operations.Matrix.Matrix matrix28 = com.operations.Matrix.MatrixOperations.multiply(matrix15, matrix23);
        com.operations.Matrix.Matrix matrix30 = com.operations.Matrix.MatrixTransformations.rotate2D((double) (short) 100);
        boolean boolean32 = com.operations.Matrix.MatrixUtils.compare(matrix23, matrix30, (double) (byte) 0);
        boolean boolean33 = com.operations.Matrix.MatrixUtils.isSymmetric(matrix30);
        boolean boolean34 = com.operations.Matrix.MatrixUtils.isSquare(matrix30);
        com.operations.Matrix.Matrix matrix36 = com.operations.Matrix.MatrixOperations.scalarMultiply(matrix30, (double) 2);
        com.operations.Matrix.Matrix matrix37 = com.operations.Matrix.MatrixOperations.transpose(matrix36);
        com.operations.Matrix.Matrix matrix40 = com.operations.Matrix.MatrixTransformations.project2D(137.90576492663388d, (double) (byte) 0);
        com.operations.Matrix.Matrix matrix41 = com.operations.Matrix.MatrixOperations.multiply(matrix36, matrix40);
        com.operations.Matrix.Matrix matrix42 = com.operations.Matrix.MatrixOperations.multiply(matrix10, matrix36);
        com.operations.Matrix.Matrix matrix43 = com.operations.Matrix.MatrixOperations.transpose(matrix36);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertArrayEquals(doubleArray2, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertArrayEquals(doubleArray5, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 2 + "'", int8 == 2);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertNotNull(matrix10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 2 + "'", int11 == 2);
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 137.90576492663388d + "'", double12 == 137.90576492663388d);
        org.junit.Assert.assertNotNull(matrix15);
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertArrayEquals(doubleArray18, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertArrayEquals(doubleArray21, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 2 + "'", int24 == 2);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 2 + "'", int25 == 2);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 2 + "'", int26 == 2);
        org.junit.Assert.assertNotNull(matrixArray27);
        org.junit.Assert.assertNotNull(matrix28);
        org.junit.Assert.assertNotNull(matrix30);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertNotNull(matrix36);
        org.junit.Assert.assertNotNull(matrix37);
        org.junit.Assert.assertNotNull(matrix40);
        org.junit.Assert.assertNotNull(matrix41);
        org.junit.Assert.assertNotNull(matrix42);
        org.junit.Assert.assertNotNull(matrix43);
    }

    @Test
    public void test4715() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4715");
        com.operations.Matrix.Matrix matrix1 = com.operations.Matrix.MatrixTransformations.rotate2D((double) 1.0f);
        com.operations.Matrix.Matrix matrix4 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0L, (double) (byte) 10);
        int int5 = matrix4.getRows();
        com.operations.Matrix.Matrix matrix7 = com.operations.Matrix.MatrixOperations.scalarMultiply(matrix4, (double) 2);
        double double8 = com.operations.Matrix.MatrixUtils.frobeniusNorm(matrix4);
        com.operations.Matrix.Matrix matrix11 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0L, (double) (byte) 10);
        int int12 = matrix11.getRows();
        com.operations.Matrix.Matrix matrix14 = com.operations.Matrix.MatrixOperations.scalarMultiply(matrix11, (double) 2);
        com.operations.Matrix.Matrix matrix15 = com.operations.Matrix.MatrixOperations.subtract(matrix4, matrix14);
        com.operations.Matrix.Matrix matrix16 = com.operations.Matrix.MatrixOperations.add(matrix1, matrix14);
        double[] doubleArray19 = new double[] { 10, 'a' };
        double[] doubleArray22 = new double[] { 10, 'a' };
        double[][] doubleArray23 = new double[][] { doubleArray19, doubleArray22 };
        com.operations.Matrix.Matrix matrix24 = new com.operations.Matrix.Matrix(doubleArray23);
        int int25 = matrix24.getCols();
        int int26 = matrix24.getCols();
        int int27 = matrix24.getCols();
        com.operations.Matrix.Matrix matrix33 = com.operations.Matrix.MatrixUtils.generateRandomMatrix(100, (int) (byte) 1, (int) '#', (int) '#', 1L);
        double double36 = matrix33.getValue((int) '4', 0);
        double double37 = com.operations.Matrix.MatrixUtils.frobeniusNorm(matrix33);
        boolean boolean38 = com.operations.Matrix.MatrixUtils.isSquare(matrix33);
        boolean boolean40 = com.operations.Matrix.MatrixUtils.compare(matrix24, matrix33, (double) 100L);
        com.operations.Matrix.Matrix matrix42 = com.operations.Matrix.MatrixTransformations.rotate2D((double) (short) 100);
        double[] doubleArray45 = new double[] { 137.90576492663388d, (byte) -1 };
        double[] doubleArray46 = com.operations.Matrix.MatrixSolver.solveGaussian(matrix42, doubleArray45);
        com.operations.Matrix.Matrix matrix49 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0L, (double) (byte) 10);
        double[] doubleArray52 = new double[] { 10, 'a' };
        double[] doubleArray55 = new double[] { 10, 'a' };
        double[][] doubleArray56 = new double[][] { doubleArray52, doubleArray55 };
        com.operations.Matrix.Matrix matrix57 = new com.operations.Matrix.Matrix(doubleArray56);
        int int58 = matrix57.getCols();
        int int59 = matrix57.getCols();
        int int60 = matrix57.getCols();
        com.operations.Matrix.Matrix[] matrixArray61 = com.operations.Matrix.MatrixDecompositions.luDecomposition(matrix57);
        com.operations.Matrix.Matrix matrix62 = com.operations.Matrix.MatrixOperations.multiply(matrix49, matrix57);
        boolean boolean64 = com.operations.Matrix.MatrixUtils.compare(matrix42, matrix49, (double) (-1L));
        com.operations.Matrix.Matrix matrix65 = com.operations.Matrix.MatrixOperations.subtract(matrix24, matrix49);
        com.operations.Matrix.Matrix matrix66 = com.operations.Matrix.MatrixOperations.add(matrix14, matrix49);
        com.operations.Matrix.Matrix matrix69 = com.operations.Matrix.MatrixTransformations.project2D((double) 2, 22.360679774997898d);
        com.operations.Matrix.Matrix matrix70 = com.operations.Matrix.MatrixOperations.add(matrix49, matrix69);
        int int71 = matrix70.getRows();
        com.operations.Matrix.Matrix matrix76 = com.operations.Matrix.MatrixUtils.generateRandomMatrix((int) (byte) 1, (int) ' ', (int) (short) 100, (int) (short) 100);
        // The following exception was thrown during execution in test generation
        try {
            com.operations.Matrix.Matrix matrix77 = com.operations.Matrix.MatrixOperations.subtract(matrix70, matrix76);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Matrices must have the same dimensions for subtraction.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(matrix1);
        org.junit.Assert.assertNotNull(matrix4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 2 + "'", int5 == 2);
        org.junit.Assert.assertNotNull(matrix7);
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 10.0d + "'", double8 == 10.0d);
        org.junit.Assert.assertNotNull(matrix11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 2 + "'", int12 == 2);
        org.junit.Assert.assertNotNull(matrix14);
        org.junit.Assert.assertNotNull(matrix15);
        org.junit.Assert.assertNotNull(matrix16);
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertArrayEquals(doubleArray19, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertArrayEquals(doubleArray22, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 2 + "'", int25 == 2);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 2 + "'", int26 == 2);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 2 + "'", int27 == 2);
        org.junit.Assert.assertNotNull(matrix33);
        org.junit.Assert.assertTrue("'" + double36 + "' != '" + 35.0d + "'", double36 == 35.0d);
        org.junit.Assert.assertTrue("'" + double37 + "' != '" + 350.0d + "'", double37 == 350.0d);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(matrix42);
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertArrayEquals(doubleArray45, new double[] { 137.90576492663388d, (-1.0d) }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray46);
        org.junit.Assert.assertArrayEquals(doubleArray46, new double[] { (-24.931892522286255d), (-135.63701830716116d) }, 1.0E-15);
        org.junit.Assert.assertNotNull(matrix49);
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertArrayEquals(doubleArray52, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertArrayEquals(doubleArray55, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray56);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 2 + "'", int58 == 2);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 2 + "'", int59 == 2);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 2 + "'", int60 == 2);
        org.junit.Assert.assertNotNull(matrixArray61);
        org.junit.Assert.assertNotNull(matrix62);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertNotNull(matrix65);
        org.junit.Assert.assertNotNull(matrix66);
        org.junit.Assert.assertNotNull(matrix69);
        org.junit.Assert.assertNotNull(matrix70);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 2 + "'", int71 == 2);
        org.junit.Assert.assertNotNull(matrix76);
    }

    @Test
    public void test4716() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4716");
        com.operations.Matrix.Matrix matrix4 = com.operations.Matrix.MatrixUtils.generateRandomMatrix(100, (int) '#', (-1), (int) '#');
        com.operations.Matrix.Matrix matrix7 = com.operations.Matrix.MatrixTransformations.scale2D(364.0054944640259d, (double) 100);
        double[][] doubleArray8 = matrix7.getData();
        com.operations.Matrix.Matrix matrix9 = new com.operations.Matrix.Matrix(doubleArray8);
        com.operations.Matrix.Matrix matrix11 = com.operations.Matrix.MatrixTransformations.rotate2D(32.0d);
        com.operations.Matrix.Matrix matrix14 = com.operations.Matrix.MatrixTransformations.scale2D((double) 10L, 35.0d);
        matrix14.print();
        boolean boolean16 = com.operations.Matrix.MatrixUtils.isSquare(matrix14);
        com.operations.Matrix.Matrix matrix18 = com.operations.Matrix.MatrixTransformations.rotate2D((-1.0d));
        com.operations.Matrix.Matrix matrix20 = com.operations.Matrix.MatrixTransformations.rotate2D((double) (-1L));
        com.operations.Matrix.Matrix matrix22 = com.operations.Matrix.MatrixTransformations.rotate2D((double) (short) 100);
        double[] doubleArray25 = new double[] { 137.90576492663388d, (byte) -1 };
        double[] doubleArray26 = com.operations.Matrix.MatrixSolver.solveGaussian(matrix22, doubleArray25);
        double[] doubleArray27 = com.operations.Matrix.MatrixSolver.solveGaussian(matrix20, doubleArray25);
        double[] doubleArray28 = com.operations.Matrix.MatrixSolver.solveGaussian(matrix18, doubleArray25);
        double[] doubleArray29 = com.operations.Matrix.MatrixSolver.solveGaussian(matrix14, doubleArray25);
        double[] doubleArray30 = com.operations.Matrix.MatrixSolver.solveGaussian(matrix11, doubleArray25);
        double[] doubleArray31 = com.operations.Matrix.MatrixSolver.solveGaussian(matrix9, doubleArray30);
        // The following exception was thrown during execution in test generation
        try {
            double[] doubleArray32 = com.operations.Matrix.MatrixSolver.solveGaussian(matrix4, doubleArray31);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Matrix must be square to solve equations.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(matrix4);
        org.junit.Assert.assertNotNull(matrix7);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertNotNull(matrix11);
        org.junit.Assert.assertNotNull(matrix14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertNotNull(matrix18);
        org.junit.Assert.assertNotNull(matrix20);
        org.junit.Assert.assertNotNull(matrix22);
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertArrayEquals(doubleArray25, new double[] { 137.90576492663388d, (-1.0d) }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertArrayEquals(doubleArray26, new double[] { (-24.931892522286255d), (-135.63701830716116d) }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertArrayEquals(doubleArray27, new double[] { 137.90221361711127d, 1.4069397643877004d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertArrayEquals(doubleArray28, new double[] { 137.90221361711127d, 1.4069397643877004d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertArrayEquals(doubleArray29, new double[] { 13.790576492663387d, (-0.02857142857142857d) }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertArrayEquals(doubleArray30, new double[] { 116.4208021307943d, (-73.92696957959556d) }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertArrayEquals(doubleArray31, new double[] { 0.31983254072089284d, (-0.7392696957959557d) }, 1.0E-15);
    }

    @Test
    public void test4717() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4717");
        com.operations.Matrix.Matrix matrix2 = com.operations.Matrix.MatrixTransformations.scale2D(146.4308710620817d, (double) 0);
        org.junit.Assert.assertNotNull(matrix2);
    }

    @Test
    public void test4718() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4718");
        com.operations.Matrix.Matrix matrix2 = com.operations.Matrix.MatrixTransformations.project2D((double) ' ', 0.0d);
        double[] doubleArray5 = new double[] { 10, 'a' };
        double[] doubleArray8 = new double[] { 10, 'a' };
        double[][] doubleArray9 = new double[][] { doubleArray5, doubleArray8 };
        com.operations.Matrix.Matrix matrix10 = new com.operations.Matrix.Matrix(doubleArray9);
        int int11 = matrix10.getCols();
        boolean boolean12 = com.operations.Matrix.MatrixUtils.isSquare(matrix10);
        com.operations.Matrix.Matrix matrix13 = com.operations.Matrix.MatrixOperations.transpose(matrix10);
        int int14 = matrix13.getRows();
        com.operations.Matrix.Matrix matrix17 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0L, (double) (byte) 10);
        double[] doubleArray20 = new double[] { 10, 'a' };
        double[] doubleArray23 = new double[] { 10, 'a' };
        double[][] doubleArray24 = new double[][] { doubleArray20, doubleArray23 };
        com.operations.Matrix.Matrix matrix25 = new com.operations.Matrix.Matrix(doubleArray24);
        int int26 = matrix25.getCols();
        int int27 = matrix25.getCols();
        int int28 = matrix25.getCols();
        com.operations.Matrix.Matrix[] matrixArray29 = com.operations.Matrix.MatrixDecompositions.luDecomposition(matrix25);
        com.operations.Matrix.Matrix matrix30 = com.operations.Matrix.MatrixOperations.multiply(matrix17, matrix25);
        com.operations.Matrix.Matrix matrix32 = com.operations.Matrix.MatrixTransformations.rotate2D((double) (short) 100);
        boolean boolean34 = com.operations.Matrix.MatrixUtils.compare(matrix25, matrix32, (double) (byte) 0);
        com.operations.Matrix.Matrix matrix35 = com.operations.Matrix.MatrixOperations.multiply(matrix13, matrix25);
        com.operations.Matrix.Matrix matrix36 = com.operations.Matrix.MatrixOperations.add(matrix2, matrix25);
        matrix25.print();
        com.operations.Matrix.Matrix[] matrixArray38 = com.operations.Matrix.MatrixDecompositions.luDecomposition(matrix25);
        int int39 = matrix25.getCols();
        double[][] doubleArray40 = matrix25.getData();
        int int41 = matrix25.getRows();
        org.junit.Assert.assertNotNull(matrix2);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertArrayEquals(doubleArray5, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertArrayEquals(doubleArray8, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 2 + "'", int11 == 2);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(matrix13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 2 + "'", int14 == 2);
        org.junit.Assert.assertNotNull(matrix17);
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertArrayEquals(doubleArray20, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertArrayEquals(doubleArray23, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 2 + "'", int26 == 2);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 2 + "'", int27 == 2);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 2 + "'", int28 == 2);
        org.junit.Assert.assertNotNull(matrixArray29);
        org.junit.Assert.assertNotNull(matrix30);
        org.junit.Assert.assertNotNull(matrix32);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(matrix35);
        org.junit.Assert.assertNotNull(matrix36);
        org.junit.Assert.assertNotNull(matrixArray38);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 2 + "'", int39 == 2);
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 2 + "'", int41 == 2);
    }

    @Test
    public void test4719() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4719");
        com.operations.Matrix.Matrix matrix2 = com.operations.Matrix.MatrixTransformations.project2D(30.0d, 400.0d);
        com.operations.Matrix.Matrix matrix3 = com.operations.Matrix.MatrixDecompositions.choleskyDecomposition(matrix2);
        org.junit.Assert.assertNotNull(matrix2);
        org.junit.Assert.assertNotNull(matrix3);
    }

    @Test
    public void test4720() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4720");
        com.operations.Matrix.Matrix matrix2 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0L, (double) (byte) 10);
        double[] doubleArray5 = new double[] { 10, 'a' };
        double[] doubleArray8 = new double[] { 10, 'a' };
        double[][] doubleArray9 = new double[][] { doubleArray5, doubleArray8 };
        com.operations.Matrix.Matrix matrix10 = new com.operations.Matrix.Matrix(doubleArray9);
        int int11 = matrix10.getCols();
        int int12 = matrix10.getCols();
        int int13 = matrix10.getCols();
        com.operations.Matrix.Matrix[] matrixArray14 = com.operations.Matrix.MatrixDecompositions.luDecomposition(matrix10);
        com.operations.Matrix.Matrix matrix15 = com.operations.Matrix.MatrixOperations.multiply(matrix2, matrix10);
        com.operations.Matrix.Matrix matrix17 = com.operations.Matrix.MatrixTransformations.rotate2D((double) (short) 100);
        boolean boolean19 = com.operations.Matrix.MatrixUtils.compare(matrix10, matrix17, (double) (byte) 0);
        com.operations.Matrix.Matrix matrix20 = com.operations.Matrix.MatrixOperations.transpose(matrix10);
        com.operations.Matrix.Matrix matrix23 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0L, (double) (byte) 10);
        double[] doubleArray26 = new double[] { 10, 'a' };
        double[] doubleArray29 = new double[] { 10, 'a' };
        double[][] doubleArray30 = new double[][] { doubleArray26, doubleArray29 };
        com.operations.Matrix.Matrix matrix31 = new com.operations.Matrix.Matrix(doubleArray30);
        int int32 = matrix31.getCols();
        int int33 = matrix31.getCols();
        int int34 = matrix31.getCols();
        com.operations.Matrix.Matrix[] matrixArray35 = com.operations.Matrix.MatrixDecompositions.luDecomposition(matrix31);
        com.operations.Matrix.Matrix matrix36 = com.operations.Matrix.MatrixOperations.multiply(matrix23, matrix31);
        com.operations.Matrix.Matrix matrix38 = com.operations.Matrix.MatrixTransformations.rotate2D((double) (short) 100);
        boolean boolean40 = com.operations.Matrix.MatrixUtils.compare(matrix31, matrix38, (double) (byte) 0);
        double[] doubleArray43 = new double[] { 10, 'a' };
        double[] doubleArray46 = new double[] { 10, 'a' };
        double[][] doubleArray47 = new double[][] { doubleArray43, doubleArray46 };
        com.operations.Matrix.Matrix matrix48 = new com.operations.Matrix.Matrix(doubleArray47);
        com.operations.Matrix.Matrix matrix49 = new com.operations.Matrix.Matrix(doubleArray47);
        com.operations.Matrix.Matrix matrix50 = new com.operations.Matrix.Matrix(doubleArray47);
        boolean boolean52 = com.operations.Matrix.MatrixUtils.compare(matrix31, matrix50, (double) (-1));
        com.operations.Matrix.Matrix matrix55 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0L, (double) (byte) 10);
        double[] doubleArray58 = new double[] { 10, 'a' };
        double[] doubleArray61 = new double[] { 10, 'a' };
        double[][] doubleArray62 = new double[][] { doubleArray58, doubleArray61 };
        com.operations.Matrix.Matrix matrix63 = new com.operations.Matrix.Matrix(doubleArray62);
        int int64 = matrix63.getCols();
        int int65 = matrix63.getCols();
        int int66 = matrix63.getCols();
        com.operations.Matrix.Matrix[] matrixArray67 = com.operations.Matrix.MatrixDecompositions.luDecomposition(matrix63);
        com.operations.Matrix.Matrix matrix68 = com.operations.Matrix.MatrixOperations.multiply(matrix55, matrix63);
        boolean boolean70 = com.operations.Matrix.MatrixUtils.compare(matrix50, matrix55, (double) 10L);
        boolean boolean72 = com.operations.Matrix.MatrixUtils.compare(matrix20, matrix50, (double) 100L);
        com.operations.Matrix.Matrix matrix75 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0L, (double) (byte) 10);
        double[] doubleArray78 = new double[] { 10, 'a' };
        double[] doubleArray81 = new double[] { 10, 'a' };
        double[][] doubleArray82 = new double[][] { doubleArray78, doubleArray81 };
        com.operations.Matrix.Matrix matrix83 = new com.operations.Matrix.Matrix(doubleArray82);
        int int84 = matrix83.getCols();
        int int85 = matrix83.getCols();
        int int86 = matrix83.getCols();
        com.operations.Matrix.Matrix[] matrixArray87 = com.operations.Matrix.MatrixDecompositions.luDecomposition(matrix83);
        com.operations.Matrix.Matrix matrix88 = com.operations.Matrix.MatrixOperations.multiply(matrix75, matrix83);
        int int89 = matrix83.getRows();
        int int90 = matrix83.getCols();
        com.operations.Matrix.Matrix matrix91 = com.operations.Matrix.MatrixOperations.subtract(matrix50, matrix83);
        com.operations.Matrix.Matrix matrix94 = com.operations.Matrix.MatrixTransformations.project2D(0.0d, (-0.1736481776669303d));
        com.operations.Matrix.Matrix matrix95 = com.operations.Matrix.MatrixOperations.subtract(matrix91, matrix94);
        int int96 = matrix94.getRows();
        org.junit.Assert.assertNotNull(matrix2);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertArrayEquals(doubleArray5, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertArrayEquals(doubleArray8, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 2 + "'", int11 == 2);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 2 + "'", int12 == 2);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 2 + "'", int13 == 2);
        org.junit.Assert.assertNotNull(matrixArray14);
        org.junit.Assert.assertNotNull(matrix15);
        org.junit.Assert.assertNotNull(matrix17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(matrix20);
        org.junit.Assert.assertNotNull(matrix23);
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertArrayEquals(doubleArray26, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertArrayEquals(doubleArray29, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 2 + "'", int32 == 2);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 2 + "'", int33 == 2);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 2 + "'", int34 == 2);
        org.junit.Assert.assertNotNull(matrixArray35);
        org.junit.Assert.assertNotNull(matrix36);
        org.junit.Assert.assertNotNull(matrix38);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertArrayEquals(doubleArray43, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray46);
        org.junit.Assert.assertArrayEquals(doubleArray46, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(matrix55);
        org.junit.Assert.assertNotNull(doubleArray58);
        org.junit.Assert.assertArrayEquals(doubleArray58, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray61);
        org.junit.Assert.assertArrayEquals(doubleArray61, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray62);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 2 + "'", int64 == 2);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 2 + "'", int65 == 2);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 2 + "'", int66 == 2);
        org.junit.Assert.assertNotNull(matrixArray67);
        org.junit.Assert.assertNotNull(matrix68);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + true + "'", boolean72 == true);
        org.junit.Assert.assertNotNull(matrix75);
        org.junit.Assert.assertNotNull(doubleArray78);
        org.junit.Assert.assertArrayEquals(doubleArray78, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray81);
        org.junit.Assert.assertArrayEquals(doubleArray81, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray82);
        org.junit.Assert.assertTrue("'" + int84 + "' != '" + 2 + "'", int84 == 2);
        org.junit.Assert.assertTrue("'" + int85 + "' != '" + 2 + "'", int85 == 2);
        org.junit.Assert.assertTrue("'" + int86 + "' != '" + 2 + "'", int86 == 2);
        org.junit.Assert.assertNotNull(matrixArray87);
        org.junit.Assert.assertNotNull(matrix88);
        org.junit.Assert.assertTrue("'" + int89 + "' != '" + 2 + "'", int89 == 2);
        org.junit.Assert.assertTrue("'" + int90 + "' != '" + 2 + "'", int90 == 2);
        org.junit.Assert.assertNotNull(matrix91);
        org.junit.Assert.assertNotNull(matrix94);
        org.junit.Assert.assertNotNull(matrix95);
        org.junit.Assert.assertTrue("'" + int96 + "' != '" + 2 + "'", int96 == 2);
    }

    @Test
    public void test4721() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4721");
        com.operations.Matrix.Matrix matrix5 = com.operations.Matrix.MatrixUtils.generateRandomMatrix((int) (byte) 100, (int) 'a', (int) '4', (int) (short) 100, (long) (byte) 0);
        double double8 = matrix5.getValue(0, 10);
        java.lang.Class<?> wildcardClass9 = matrix5.getClass();
        org.junit.Assert.assertNotNull(matrix5);
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 65.19779036970327d + "'", double8 == 65.19779036970327d);
        org.junit.Assert.assertNotNull(wildcardClass9);
    }

    @Test
    public void test4722() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4722");
        com.operations.Matrix.Matrix matrix1 = com.operations.Matrix.MatrixTransformations.rotate2D(1.414213562373095d);
        com.operations.Matrix.Matrix matrix2 = com.operations.Matrix.MatrixOperations.transpose(matrix1);
        com.operations.Matrix.Matrix matrix5 = com.operations.Matrix.MatrixTransformations.project2D((double) ' ', 0.0d);
        double[] doubleArray8 = new double[] { 10, 'a' };
        double[] doubleArray11 = new double[] { 10, 'a' };
        double[][] doubleArray12 = new double[][] { doubleArray8, doubleArray11 };
        com.operations.Matrix.Matrix matrix13 = new com.operations.Matrix.Matrix(doubleArray12);
        int int14 = matrix13.getCols();
        boolean boolean15 = com.operations.Matrix.MatrixUtils.isSquare(matrix13);
        com.operations.Matrix.Matrix matrix16 = com.operations.Matrix.MatrixOperations.transpose(matrix13);
        int int17 = matrix16.getRows();
        com.operations.Matrix.Matrix matrix20 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0L, (double) (byte) 10);
        double[] doubleArray23 = new double[] { 10, 'a' };
        double[] doubleArray26 = new double[] { 10, 'a' };
        double[][] doubleArray27 = new double[][] { doubleArray23, doubleArray26 };
        com.operations.Matrix.Matrix matrix28 = new com.operations.Matrix.Matrix(doubleArray27);
        int int29 = matrix28.getCols();
        int int30 = matrix28.getCols();
        int int31 = matrix28.getCols();
        com.operations.Matrix.Matrix[] matrixArray32 = com.operations.Matrix.MatrixDecompositions.luDecomposition(matrix28);
        com.operations.Matrix.Matrix matrix33 = com.operations.Matrix.MatrixOperations.multiply(matrix20, matrix28);
        com.operations.Matrix.Matrix matrix35 = com.operations.Matrix.MatrixTransformations.rotate2D((double) (short) 100);
        boolean boolean37 = com.operations.Matrix.MatrixUtils.compare(matrix28, matrix35, (double) (byte) 0);
        com.operations.Matrix.Matrix matrix38 = com.operations.Matrix.MatrixOperations.multiply(matrix16, matrix28);
        com.operations.Matrix.Matrix matrix39 = com.operations.Matrix.MatrixOperations.add(matrix5, matrix28);
        matrix28.print();
        com.operations.Matrix.Matrix[] matrixArray41 = com.operations.Matrix.MatrixDecompositions.luDecomposition(matrix28);
        com.operations.Matrix.Matrix matrix42 = com.operations.Matrix.MatrixOperations.add(matrix1, matrix28);
        // The following exception was thrown during execution in test generation
        try {
            matrix42.setValue((int) ' ', 0, 90.28463890218569d);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: Index 32 out of bounds for length 2");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(matrix1);
        org.junit.Assert.assertNotNull(matrix2);
        org.junit.Assert.assertNotNull(matrix5);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertArrayEquals(doubleArray8, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertArrayEquals(doubleArray11, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 2 + "'", int14 == 2);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNotNull(matrix16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 2 + "'", int17 == 2);
        org.junit.Assert.assertNotNull(matrix20);
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertArrayEquals(doubleArray23, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertArrayEquals(doubleArray26, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 2 + "'", int29 == 2);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 2 + "'", int30 == 2);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 2 + "'", int31 == 2);
        org.junit.Assert.assertNotNull(matrixArray32);
        org.junit.Assert.assertNotNull(matrix33);
        org.junit.Assert.assertNotNull(matrix35);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(matrix38);
        org.junit.Assert.assertNotNull(matrix39);
        org.junit.Assert.assertNotNull(matrixArray41);
        org.junit.Assert.assertNotNull(matrix42);
    }

    @Test
    public void test4723() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4723");
        com.operations.Matrix.Matrix matrix1 = com.operations.Matrix.MatrixTransformations.rotate2D((double) '4');
        double[] doubleArray4 = new double[] { 10, 'a' };
        double[] doubleArray7 = new double[] { 10, 'a' };
        double[][] doubleArray8 = new double[][] { doubleArray4, doubleArray7 };
        com.operations.Matrix.Matrix matrix9 = new com.operations.Matrix.Matrix(doubleArray8);
        com.operations.Matrix.Matrix matrix10 = new com.operations.Matrix.Matrix(doubleArray8);
        com.operations.Matrix.Matrix matrix12 = com.operations.Matrix.MatrixTransformations.rotate2D((double) (short) 100);
        double[] doubleArray15 = new double[] { 137.90576492663388d, (byte) -1 };
        double[] doubleArray16 = com.operations.Matrix.MatrixSolver.solveGaussian(matrix12, doubleArray15);
        com.operations.Matrix.Matrix matrix17 = com.operations.Matrix.MatrixOperations.add(matrix10, matrix12);
        boolean boolean18 = com.operations.Matrix.MatrixUtils.isSymmetric(matrix17);
        boolean boolean20 = com.operations.Matrix.MatrixUtils.compare(matrix1, matrix17, 364.0054944640259d);
        com.operations.Matrix.Matrix matrix23 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0L, (double) (byte) 10);
        int int24 = matrix23.getRows();
        com.operations.Matrix.Matrix matrix26 = com.operations.Matrix.MatrixOperations.scalarMultiply(matrix23, (double) 2);
        matrix23.print();
        com.operations.Matrix.Matrix matrix28 = com.operations.Matrix.MatrixOperations.multiply(matrix17, matrix23);
        com.operations.Matrix.Matrix[] matrixArray29 = com.operations.Matrix.MatrixDecompositions.luDecomposition(matrix17);
        // The following exception was thrown during execution in test generation
        try {
            matrix17.setValue((int) (byte) 100, (int) (short) 10, 1.969615506024416d);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: Index 100 out of bounds for length 2");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(matrix1);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertArrayEquals(doubleArray4, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertArrayEquals(doubleArray7, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertNotNull(matrix12);
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertArrayEquals(doubleArray15, new double[] { 137.90576492663388d, (-1.0d) }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertArrayEquals(doubleArray16, new double[] { (-24.931892522286255d), (-135.63701830716116d) }, 1.0E-15);
        org.junit.Assert.assertNotNull(matrix17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertNotNull(matrix23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 2 + "'", int24 == 2);
        org.junit.Assert.assertNotNull(matrix26);
        org.junit.Assert.assertNotNull(matrix28);
        org.junit.Assert.assertNotNull(matrixArray29);
    }

    @Test
    public void test4724() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4724");
        com.operations.Matrix.Matrix matrix2 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0L, (double) (byte) 10);
        double[] doubleArray5 = new double[] { 10, 'a' };
        double[] doubleArray8 = new double[] { 10, 'a' };
        double[][] doubleArray9 = new double[][] { doubleArray5, doubleArray8 };
        com.operations.Matrix.Matrix matrix10 = new com.operations.Matrix.Matrix(doubleArray9);
        int int11 = matrix10.getCols();
        int int12 = matrix10.getCols();
        int int13 = matrix10.getCols();
        com.operations.Matrix.Matrix[] matrixArray14 = com.operations.Matrix.MatrixDecompositions.luDecomposition(matrix10);
        com.operations.Matrix.Matrix matrix15 = com.operations.Matrix.MatrixOperations.multiply(matrix2, matrix10);
        com.operations.Matrix.Matrix matrix17 = com.operations.Matrix.MatrixTransformations.rotate2D((double) (short) 100);
        boolean boolean19 = com.operations.Matrix.MatrixUtils.compare(matrix10, matrix17, (double) (byte) 0);
        double[] doubleArray22 = new double[] { 10, 'a' };
        double[] doubleArray25 = new double[] { 10, 'a' };
        double[][] doubleArray26 = new double[][] { doubleArray22, doubleArray25 };
        com.operations.Matrix.Matrix matrix27 = new com.operations.Matrix.Matrix(doubleArray26);
        com.operations.Matrix.Matrix matrix28 = new com.operations.Matrix.Matrix(doubleArray26);
        com.operations.Matrix.Matrix matrix29 = new com.operations.Matrix.Matrix(doubleArray26);
        boolean boolean31 = com.operations.Matrix.MatrixUtils.compare(matrix10, matrix29, (double) (-1));
        com.operations.Matrix.Matrix matrix34 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0L, (double) (byte) 10);
        double[] doubleArray37 = new double[] { 10, 'a' };
        double[] doubleArray40 = new double[] { 10, 'a' };
        double[][] doubleArray41 = new double[][] { doubleArray37, doubleArray40 };
        com.operations.Matrix.Matrix matrix42 = new com.operations.Matrix.Matrix(doubleArray41);
        int int43 = matrix42.getCols();
        int int44 = matrix42.getCols();
        int int45 = matrix42.getCols();
        com.operations.Matrix.Matrix[] matrixArray46 = com.operations.Matrix.MatrixDecompositions.luDecomposition(matrix42);
        com.operations.Matrix.Matrix matrix47 = com.operations.Matrix.MatrixOperations.multiply(matrix34, matrix42);
        boolean boolean49 = com.operations.Matrix.MatrixUtils.compare(matrix29, matrix34, (double) 10L);
        double double50 = com.operations.Matrix.MatrixUtils.frobeniusNorm(matrix29);
        matrix29.setValue(1, (int) (short) 1, (double) 10L);
        org.junit.Assert.assertNotNull(matrix2);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertArrayEquals(doubleArray5, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertArrayEquals(doubleArray8, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 2 + "'", int11 == 2);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 2 + "'", int12 == 2);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 2 + "'", int13 == 2);
        org.junit.Assert.assertNotNull(matrixArray14);
        org.junit.Assert.assertNotNull(matrix15);
        org.junit.Assert.assertNotNull(matrix17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertArrayEquals(doubleArray22, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertArrayEquals(doubleArray25, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(matrix34);
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertArrayEquals(doubleArray37, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertArrayEquals(doubleArray40, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 2 + "'", int43 == 2);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 2 + "'", int44 == 2);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 2 + "'", int45 == 2);
        org.junit.Assert.assertNotNull(matrixArray46);
        org.junit.Assert.assertNotNull(matrix47);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + double50 + "' != '" + 137.90576492663388d + "'", double50 == 137.90576492663388d);
    }

    @Test
    public void test4725() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4725");
        com.operations.Matrix.Matrix matrix2 = com.operations.Matrix.MatrixTransformations.scale2D((double) (byte) 10, (double) 10);
        double[] doubleArray5 = new double[] { 10, 'a' };
        double[] doubleArray8 = new double[] { 10, 'a' };
        double[][] doubleArray9 = new double[][] { doubleArray5, doubleArray8 };
        com.operations.Matrix.Matrix matrix10 = new com.operations.Matrix.Matrix(doubleArray9);
        com.operations.Matrix.Matrix matrix11 = new com.operations.Matrix.Matrix(doubleArray9);
        boolean boolean12 = com.operations.Matrix.MatrixUtils.isSquare(matrix11);
        double[] doubleArray15 = new double[] { 10, 'a' };
        double[] doubleArray18 = new double[] { 10, 'a' };
        double[][] doubleArray19 = new double[][] { doubleArray15, doubleArray18 };
        com.operations.Matrix.Matrix matrix20 = new com.operations.Matrix.Matrix(doubleArray19);
        int int21 = matrix20.getCols();
        int int22 = matrix20.getCols();
        matrix20.print();
        double[] doubleArray26 = new double[] { 10, 'a' };
        double[] doubleArray29 = new double[] { 10, 'a' };
        double[][] doubleArray30 = new double[][] { doubleArray26, doubleArray29 };
        com.operations.Matrix.Matrix matrix31 = new com.operations.Matrix.Matrix(doubleArray30);
        boolean boolean33 = com.operations.Matrix.MatrixUtils.compare(matrix20, matrix31, (double) (-1));
        com.operations.Matrix.Matrix matrix34 = com.operations.Matrix.MatrixOperations.subtract(matrix11, matrix31);
        com.operations.Matrix.Matrix[] matrixArray35 = com.operations.Matrix.MatrixDecompositions.luDecomposition(matrix34);
        double[][] doubleArray36 = matrix34.getData();
        com.operations.Matrix.Matrix matrix37 = new com.operations.Matrix.Matrix(doubleArray36);
        com.operations.Matrix.Matrix matrix38 = com.operations.Matrix.MatrixOperations.multiply(matrix2, matrix37);
        boolean boolean39 = com.operations.Matrix.MatrixUtils.isSymmetric(matrix2);
        com.operations.Matrix.Matrix matrix41 = com.operations.Matrix.MatrixTransformations.rotate2D(350.0d);
        com.operations.Matrix.Matrix matrix42 = com.operations.Matrix.MatrixDecompositions.choleskyDecomposition(matrix41);
        int int43 = matrix41.getRows();
        com.operations.Matrix.Matrix matrix44 = com.operations.Matrix.MatrixOperations.subtract(matrix2, matrix41);
        matrix44.print();
        com.operations.Matrix.Matrix matrix48 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0L, (double) (byte) 10);
        double[] doubleArray51 = new double[] { 10, 'a' };
        double[] doubleArray54 = new double[] { 10, 'a' };
        double[][] doubleArray55 = new double[][] { doubleArray51, doubleArray54 };
        com.operations.Matrix.Matrix matrix56 = new com.operations.Matrix.Matrix(doubleArray55);
        int int57 = matrix56.getCols();
        int int58 = matrix56.getCols();
        int int59 = matrix56.getCols();
        com.operations.Matrix.Matrix[] matrixArray60 = com.operations.Matrix.MatrixDecompositions.luDecomposition(matrix56);
        com.operations.Matrix.Matrix matrix61 = com.operations.Matrix.MatrixOperations.multiply(matrix48, matrix56);
        com.operations.Matrix.Matrix matrix63 = com.operations.Matrix.MatrixTransformations.rotate2D((double) (short) 100);
        boolean boolean65 = com.operations.Matrix.MatrixUtils.compare(matrix56, matrix63, (double) (byte) 0);
        com.operations.Matrix.Matrix[] matrixArray66 = com.operations.Matrix.MatrixDecompositions.luDecomposition(matrix56);
        com.operations.Matrix.Matrix matrix67 = com.operations.Matrix.MatrixOperations.transpose(matrix56);
        com.operations.Matrix.Matrix matrix70 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0L, (double) (byte) 10);
        int int71 = matrix70.getRows();
        com.operations.Matrix.Matrix matrix74 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0L, (double) (byte) 10);
        int int75 = matrix74.getRows();
        com.operations.Matrix.Matrix matrix77 = com.operations.Matrix.MatrixOperations.scalarMultiply(matrix74, (double) 2);
        com.operations.Matrix.Matrix matrix78 = com.operations.Matrix.MatrixOperations.subtract(matrix70, matrix74);
        boolean boolean80 = com.operations.Matrix.MatrixUtils.compare(matrix56, matrix70, (double) ' ');
        com.operations.Matrix.Matrix matrix82 = com.operations.Matrix.MatrixOperations.scalarMultiply(matrix56, 137.90576492663388d);
        boolean boolean84 = com.operations.Matrix.MatrixUtils.compare(matrix44, matrix82, 1.969615506024416d);
        matrix44.print();
        com.operations.Matrix.Matrix matrix86 = com.operations.Matrix.MatrixDecompositions.choleskyDecomposition(matrix44);
        java.lang.Class<?> wildcardClass87 = matrix44.getClass();
        org.junit.Assert.assertNotNull(matrix2);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertArrayEquals(doubleArray5, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertArrayEquals(doubleArray8, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertArrayEquals(doubleArray15, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertArrayEquals(doubleArray18, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 2 + "'", int21 == 2);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 2 + "'", int22 == 2);
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertArrayEquals(doubleArray26, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertArrayEquals(doubleArray29, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(matrix34);
        org.junit.Assert.assertNotNull(matrixArray35);
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertNotNull(matrix38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertNotNull(matrix41);
        org.junit.Assert.assertNotNull(matrix42);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 2 + "'", int43 == 2);
        org.junit.Assert.assertNotNull(matrix44);
        org.junit.Assert.assertNotNull(matrix48);
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertArrayEquals(doubleArray51, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray54);
        org.junit.Assert.assertArrayEquals(doubleArray54, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 2 + "'", int57 == 2);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 2 + "'", int58 == 2);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 2 + "'", int59 == 2);
        org.junit.Assert.assertNotNull(matrixArray60);
        org.junit.Assert.assertNotNull(matrix61);
        org.junit.Assert.assertNotNull(matrix63);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertNotNull(matrixArray66);
        org.junit.Assert.assertNotNull(matrix67);
        org.junit.Assert.assertNotNull(matrix70);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 2 + "'", int71 == 2);
        org.junit.Assert.assertNotNull(matrix74);
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + 2 + "'", int75 == 2);
        org.junit.Assert.assertNotNull(matrix77);
        org.junit.Assert.assertNotNull(matrix78);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertNotNull(matrix82);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
        org.junit.Assert.assertNotNull(matrix86);
        org.junit.Assert.assertNotNull(wildcardClass87);
    }

    @Test
    public void test4726() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4726");
        com.operations.Matrix.Matrix matrix2 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0.0f, 350.0d);
        com.operations.Matrix.Matrix matrix5 = com.operations.Matrix.MatrixTransformations.project2D(0.0d, (double) 0);
        com.operations.Matrix.Matrix[] matrixArray6 = com.operations.Matrix.MatrixDecompositions.luDecomposition(matrix5);
        com.operations.Matrix.Matrix matrix9 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0L, (double) (byte) 10);
        int int10 = matrix9.getRows();
        com.operations.Matrix.Matrix matrix12 = com.operations.Matrix.MatrixOperations.scalarMultiply(matrix9, (double) 2);
        double double13 = com.operations.Matrix.MatrixUtils.frobeniusNorm(matrix9);
        int int14 = matrix9.getRows();
        com.operations.Matrix.Matrix matrix15 = com.operations.Matrix.MatrixOperations.transpose(matrix9);
        com.operations.Matrix.Matrix matrix16 = com.operations.Matrix.MatrixOperations.multiply(matrix5, matrix15);
        com.operations.Matrix.Matrix matrix17 = com.operations.Matrix.MatrixOperations.multiply(matrix2, matrix15);
        com.operations.Matrix.Matrix matrix18 = com.operations.Matrix.MatrixOperations.transpose(matrix17);
        matrix17.print();
        com.operations.Matrix.Matrix matrix22 = com.operations.Matrix.MatrixTransformations.scale2D(400.0d, 146.4308710620817d);
        matrix22.print();
        com.operations.Matrix.Matrix matrix24 = com.operations.Matrix.MatrixOperations.subtract(matrix17, matrix22);
        // The following exception was thrown during execution in test generation
        try {
            com.operations.Matrix.Matrix matrix25 = com.operations.Matrix.MatrixDecompositions.choleskyDecomposition(matrix24);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Matrix is not positive definite.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(matrix2);
        org.junit.Assert.assertNotNull(matrix5);
        org.junit.Assert.assertNotNull(matrixArray6);
        org.junit.Assert.assertNotNull(matrix9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 2 + "'", int10 == 2);
        org.junit.Assert.assertNotNull(matrix12);
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 10.0d + "'", double13 == 10.0d);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 2 + "'", int14 == 2);
        org.junit.Assert.assertNotNull(matrix15);
        org.junit.Assert.assertNotNull(matrix16);
        org.junit.Assert.assertNotNull(matrix17);
        org.junit.Assert.assertNotNull(matrix18);
        org.junit.Assert.assertNotNull(matrix22);
        org.junit.Assert.assertNotNull(matrix24);
    }

    @Test
    public void test4727() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4727");
        com.operations.Matrix.Matrix matrix5 = com.operations.Matrix.MatrixUtils.generateRandomMatrix((int) (byte) 100, (int) '#', (-1), 1, (long) 'a');
        org.junit.Assert.assertNotNull(matrix5);
    }

    @Test
    public void test4728() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4728");
        com.operations.Matrix.Matrix matrix4 = com.operations.Matrix.MatrixUtils.generateRandomMatrix((int) (short) 10, 97, 1, (int) (short) 0);
        com.operations.Matrix.Matrix matrix6 = com.operations.Matrix.MatrixTransformations.rotate2D(350.0d);
        com.operations.Matrix.Matrix matrix8 = com.operations.Matrix.MatrixTransformations.rotate2D((double) (short) 100);
        double[] doubleArray11 = new double[] { 137.90576492663388d, (byte) -1 };
        double[] doubleArray12 = com.operations.Matrix.MatrixSolver.solveGaussian(matrix8, doubleArray11);
        double[] doubleArray13 = com.operations.Matrix.MatrixSolver.solveGaussian(matrix6, doubleArray12);
        com.operations.Matrix.Matrix matrix16 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0L, (double) (byte) 10);
        double[] doubleArray19 = new double[] { 10, 'a' };
        double[] doubleArray22 = new double[] { 10, 'a' };
        double[][] doubleArray23 = new double[][] { doubleArray19, doubleArray22 };
        com.operations.Matrix.Matrix matrix24 = new com.operations.Matrix.Matrix(doubleArray23);
        int int25 = matrix24.getCols();
        int int26 = matrix24.getCols();
        int int27 = matrix24.getCols();
        com.operations.Matrix.Matrix[] matrixArray28 = com.operations.Matrix.MatrixDecompositions.luDecomposition(matrix24);
        com.operations.Matrix.Matrix matrix29 = com.operations.Matrix.MatrixOperations.multiply(matrix16, matrix24);
        com.operations.Matrix.Matrix matrix31 = com.operations.Matrix.MatrixTransformations.rotate2D((double) (short) 100);
        boolean boolean33 = com.operations.Matrix.MatrixUtils.compare(matrix24, matrix31, (double) (byte) 0);
        double[] doubleArray36 = new double[] { 10, 'a' };
        double[] doubleArray39 = new double[] { 10, 'a' };
        double[][] doubleArray40 = new double[][] { doubleArray36, doubleArray39 };
        com.operations.Matrix.Matrix matrix41 = new com.operations.Matrix.Matrix(doubleArray40);
        com.operations.Matrix.Matrix matrix42 = new com.operations.Matrix.Matrix(doubleArray40);
        com.operations.Matrix.Matrix matrix43 = new com.operations.Matrix.Matrix(doubleArray40);
        boolean boolean45 = com.operations.Matrix.MatrixUtils.compare(matrix24, matrix43, (double) (-1));
        int int46 = matrix24.getRows();
        com.operations.Matrix.Matrix matrix47 = com.operations.Matrix.MatrixOperations.add(matrix6, matrix24);
        int int48 = matrix6.getRows();
        double[] doubleArray51 = new double[] { 10, 'a' };
        double[] doubleArray54 = new double[] { 10, 'a' };
        double[][] doubleArray55 = new double[][] { doubleArray51, doubleArray54 };
        com.operations.Matrix.Matrix matrix56 = new com.operations.Matrix.Matrix(doubleArray55);
        com.operations.Matrix.Matrix matrix57 = new com.operations.Matrix.Matrix(doubleArray55);
        boolean boolean58 = com.operations.Matrix.MatrixUtils.isSquare(matrix57);
        double[] doubleArray61 = new double[] { 10, 'a' };
        double[] doubleArray64 = new double[] { 10, 'a' };
        double[][] doubleArray65 = new double[][] { doubleArray61, doubleArray64 };
        com.operations.Matrix.Matrix matrix66 = new com.operations.Matrix.Matrix(doubleArray65);
        int int67 = matrix66.getCols();
        int int68 = matrix66.getCols();
        matrix66.print();
        double[] doubleArray72 = new double[] { 10, 'a' };
        double[] doubleArray75 = new double[] { 10, 'a' };
        double[][] doubleArray76 = new double[][] { doubleArray72, doubleArray75 };
        com.operations.Matrix.Matrix matrix77 = new com.operations.Matrix.Matrix(doubleArray76);
        boolean boolean79 = com.operations.Matrix.MatrixUtils.compare(matrix66, matrix77, (double) (-1));
        com.operations.Matrix.Matrix matrix80 = com.operations.Matrix.MatrixOperations.subtract(matrix57, matrix77);
        com.operations.Matrix.Matrix matrix82 = com.operations.Matrix.MatrixOperations.scalarMultiply(matrix57, (double) 0.0f);
        com.operations.Matrix.Matrix matrix83 = com.operations.Matrix.MatrixOperations.transpose(matrix57);
        double[][] doubleArray84 = matrix57.getData();
        matrix57.print();
        matrix57.print();
        com.operations.Matrix.Matrix matrix87 = com.operations.Matrix.MatrixOperations.transpose(matrix57);
        com.operations.Matrix.Matrix matrix88 = com.operations.Matrix.MatrixOperations.add(matrix6, matrix87);
        boolean boolean90 = com.operations.Matrix.MatrixUtils.compare(matrix4, matrix88, 52.009614495783374d);
        org.junit.Assert.assertNotNull(matrix4);
        org.junit.Assert.assertNotNull(matrix6);
        org.junit.Assert.assertNotNull(matrix8);
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertArrayEquals(doubleArray11, new double[] { 137.90576492663388d, (-1.0d) }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertArrayEquals(doubleArray12, new double[] { (-24.931892522286255d), (-135.63701830716116d) }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertArrayEquals(doubleArray13, new double[] { (-0.9999999999999858d), (-137.90576492663388d) }, 1.0E-15);
        org.junit.Assert.assertNotNull(matrix16);
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertArrayEquals(doubleArray19, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertArrayEquals(doubleArray22, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 2 + "'", int25 == 2);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 2 + "'", int26 == 2);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 2 + "'", int27 == 2);
        org.junit.Assert.assertNotNull(matrixArray28);
        org.junit.Assert.assertNotNull(matrix29);
        org.junit.Assert.assertNotNull(matrix31);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertArrayEquals(doubleArray36, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertArrayEquals(doubleArray39, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 2 + "'", int46 == 2);
        org.junit.Assert.assertNotNull(matrix47);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 2 + "'", int48 == 2);
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertArrayEquals(doubleArray51, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray54);
        org.junit.Assert.assertArrayEquals(doubleArray54, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + true + "'", boolean58 == true);
        org.junit.Assert.assertNotNull(doubleArray61);
        org.junit.Assert.assertArrayEquals(doubleArray61, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray64);
        org.junit.Assert.assertArrayEquals(doubleArray64, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray65);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 2 + "'", int67 == 2);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 2 + "'", int68 == 2);
        org.junit.Assert.assertNotNull(doubleArray72);
        org.junit.Assert.assertArrayEquals(doubleArray72, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray75);
        org.junit.Assert.assertArrayEquals(doubleArray75, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray76);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertNotNull(matrix80);
        org.junit.Assert.assertNotNull(matrix82);
        org.junit.Assert.assertNotNull(matrix83);
        org.junit.Assert.assertNotNull(doubleArray84);
        org.junit.Assert.assertNotNull(matrix87);
        org.junit.Assert.assertNotNull(matrix88);
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + false + "'", boolean90 == false);
    }

    @Test
    public void test4729() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4729");
        com.operations.Matrix.Matrix matrix2 = com.operations.Matrix.MatrixTransformations.scale2D(1.969615506024416d, 52.009614495783374d);
        org.junit.Assert.assertNotNull(matrix2);
    }

    @Test
    public void test4730() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4730");
        com.operations.Matrix.Matrix matrix2 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0L, (double) (byte) 10);
        double[] doubleArray5 = new double[] { 10, 'a' };
        double[] doubleArray8 = new double[] { 10, 'a' };
        double[][] doubleArray9 = new double[][] { doubleArray5, doubleArray8 };
        com.operations.Matrix.Matrix matrix10 = new com.operations.Matrix.Matrix(doubleArray9);
        int int11 = matrix10.getCols();
        int int12 = matrix10.getCols();
        int int13 = matrix10.getCols();
        com.operations.Matrix.Matrix[] matrixArray14 = com.operations.Matrix.MatrixDecompositions.luDecomposition(matrix10);
        com.operations.Matrix.Matrix matrix15 = com.operations.Matrix.MatrixOperations.multiply(matrix2, matrix10);
        com.operations.Matrix.Matrix matrix17 = com.operations.Matrix.MatrixTransformations.rotate2D((double) (short) 100);
        boolean boolean19 = com.operations.Matrix.MatrixUtils.compare(matrix10, matrix17, (double) (byte) 0);
        boolean boolean20 = com.operations.Matrix.MatrixUtils.isSymmetric(matrix17);
        boolean boolean21 = com.operations.Matrix.MatrixUtils.isSquare(matrix17);
        com.operations.Matrix.Matrix matrix23 = com.operations.Matrix.MatrixOperations.scalarMultiply(matrix17, (double) 2);
        com.operations.Matrix.Matrix matrix26 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0L, (double) (byte) 10);
        double[] doubleArray29 = new double[] { 10, 'a' };
        double[] doubleArray32 = new double[] { 10, 'a' };
        double[][] doubleArray33 = new double[][] { doubleArray29, doubleArray32 };
        com.operations.Matrix.Matrix matrix34 = new com.operations.Matrix.Matrix(doubleArray33);
        int int35 = matrix34.getCols();
        int int36 = matrix34.getCols();
        int int37 = matrix34.getCols();
        com.operations.Matrix.Matrix[] matrixArray38 = com.operations.Matrix.MatrixDecompositions.luDecomposition(matrix34);
        com.operations.Matrix.Matrix matrix39 = com.operations.Matrix.MatrixOperations.multiply(matrix26, matrix34);
        com.operations.Matrix.Matrix matrix41 = com.operations.Matrix.MatrixTransformations.rotate2D((double) (short) 100);
        boolean boolean43 = com.operations.Matrix.MatrixUtils.compare(matrix34, matrix41, (double) (byte) 0);
        com.operations.Matrix.Matrix[] matrixArray44 = com.operations.Matrix.MatrixDecompositions.luDecomposition(matrix34);
        com.operations.Matrix.Matrix matrix45 = com.operations.Matrix.MatrixOperations.transpose(matrix34);
        com.operations.Matrix.Matrix matrix48 = com.operations.Matrix.MatrixTransformations.scale2D((double) 1.0f, (double) 1);
        com.operations.Matrix.Matrix matrix50 = com.operations.Matrix.MatrixTransformations.rotate2D((double) 1.0f);
        com.operations.Matrix.Matrix matrix53 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0L, (double) (byte) 10);
        int int54 = matrix53.getRows();
        com.operations.Matrix.Matrix matrix56 = com.operations.Matrix.MatrixOperations.scalarMultiply(matrix53, (double) 2);
        double double57 = com.operations.Matrix.MatrixUtils.frobeniusNorm(matrix53);
        com.operations.Matrix.Matrix matrix60 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0L, (double) (byte) 10);
        int int61 = matrix60.getRows();
        com.operations.Matrix.Matrix matrix63 = com.operations.Matrix.MatrixOperations.scalarMultiply(matrix60, (double) 2);
        com.operations.Matrix.Matrix matrix64 = com.operations.Matrix.MatrixOperations.subtract(matrix53, matrix63);
        com.operations.Matrix.Matrix matrix65 = com.operations.Matrix.MatrixOperations.add(matrix50, matrix63);
        boolean boolean67 = com.operations.Matrix.MatrixUtils.compare(matrix48, matrix50, (double) (byte) -1);
        com.operations.Matrix.Matrix matrix68 = com.operations.Matrix.MatrixOperations.subtract(matrix45, matrix48);
        matrix45.print();
        com.operations.Matrix.Matrix matrix70 = com.operations.Matrix.MatrixOperations.add(matrix17, matrix45);
        matrix45.print();
        int int72 = matrix45.getCols();
        org.junit.Assert.assertNotNull(matrix2);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertArrayEquals(doubleArray5, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertArrayEquals(doubleArray8, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 2 + "'", int11 == 2);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 2 + "'", int12 == 2);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 2 + "'", int13 == 2);
        org.junit.Assert.assertNotNull(matrixArray14);
        org.junit.Assert.assertNotNull(matrix15);
        org.junit.Assert.assertNotNull(matrix17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertNotNull(matrix23);
        org.junit.Assert.assertNotNull(matrix26);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertArrayEquals(doubleArray29, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertArrayEquals(doubleArray32, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 2 + "'", int35 == 2);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 2 + "'", int36 == 2);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 2 + "'", int37 == 2);
        org.junit.Assert.assertNotNull(matrixArray38);
        org.junit.Assert.assertNotNull(matrix39);
        org.junit.Assert.assertNotNull(matrix41);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(matrixArray44);
        org.junit.Assert.assertNotNull(matrix45);
        org.junit.Assert.assertNotNull(matrix48);
        org.junit.Assert.assertNotNull(matrix50);
        org.junit.Assert.assertNotNull(matrix53);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 2 + "'", int54 == 2);
        org.junit.Assert.assertNotNull(matrix56);
        org.junit.Assert.assertTrue("'" + double57 + "' != '" + 10.0d + "'", double57 == 10.0d);
        org.junit.Assert.assertNotNull(matrix60);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 2 + "'", int61 == 2);
        org.junit.Assert.assertNotNull(matrix63);
        org.junit.Assert.assertNotNull(matrix64);
        org.junit.Assert.assertNotNull(matrix65);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertNotNull(matrix68);
        org.junit.Assert.assertNotNull(matrix70);
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 2 + "'", int72 == 2);
    }

    @Test
    public void test4731() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4731");
        com.operations.Matrix.Matrix matrix2 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0L, (double) (byte) 10);
        int int3 = matrix2.getRows();
        com.operations.Matrix.Matrix matrix9 = com.operations.Matrix.MatrixUtils.generateRandomMatrix(100, (int) (byte) 1, (int) '#', (int) '#', 1L);
        boolean boolean11 = com.operations.Matrix.MatrixUtils.compare(matrix2, matrix9, (double) 1.0f);
        matrix9.print();
        boolean boolean13 = com.operations.Matrix.MatrixUtils.isSymmetric(matrix9);
        double[][] doubleArray14 = matrix9.getData();
        matrix9.print();
        int int16 = matrix9.getCols();
        double double17 = com.operations.Matrix.MatrixUtils.frobeniusNorm(matrix9);
        com.operations.Matrix.Matrix matrix20 = com.operations.Matrix.MatrixTransformations.scale2D(137.90576492663385d, (double) 1);
        boolean boolean22 = com.operations.Matrix.MatrixUtils.compare(matrix9, matrix20, 3200.015624961853d);
        boolean boolean23 = com.operations.Matrix.MatrixUtils.isSymmetric(matrix9);
        org.junit.Assert.assertNotNull(matrix2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 2 + "'", int3 == 2);
        org.junit.Assert.assertNotNull(matrix9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 1 + "'", int16 == 1);
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + 350.0d + "'", double17 == 350.0d);
        org.junit.Assert.assertNotNull(matrix20);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
    }

    @Test
    public void test4732() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4732");
        com.operations.Matrix.Matrix matrix2 = com.operations.Matrix.MatrixTransformations.project2D(21.023651153076518d, (double) 10.0f);
        int int3 = matrix2.getCols();
        com.operations.Matrix.Matrix[] matrixArray4 = com.operations.Matrix.MatrixDecompositions.luDecomposition(matrix2);
        matrix2.print();
        com.operations.Matrix.Matrix matrix8 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0L, (double) (byte) 10);
        double[] doubleArray11 = new double[] { 10, 'a' };
        double[] doubleArray14 = new double[] { 10, 'a' };
        double[][] doubleArray15 = new double[][] { doubleArray11, doubleArray14 };
        com.operations.Matrix.Matrix matrix16 = new com.operations.Matrix.Matrix(doubleArray15);
        int int17 = matrix16.getCols();
        int int18 = matrix16.getCols();
        int int19 = matrix16.getCols();
        com.operations.Matrix.Matrix[] matrixArray20 = com.operations.Matrix.MatrixDecompositions.luDecomposition(matrix16);
        com.operations.Matrix.Matrix matrix21 = com.operations.Matrix.MatrixOperations.multiply(matrix8, matrix16);
        com.operations.Matrix.Matrix matrix23 = com.operations.Matrix.MatrixTransformations.rotate2D((double) (short) 100);
        boolean boolean25 = com.operations.Matrix.MatrixUtils.compare(matrix16, matrix23, (double) (byte) 0);
        boolean boolean26 = com.operations.Matrix.MatrixUtils.isSymmetric(matrix23);
        double[][] doubleArray27 = matrix23.getData();
        com.operations.Matrix.Matrix matrix28 = com.operations.Matrix.MatrixOperations.subtract(matrix2, matrix23);
        com.operations.Matrix.Matrix matrix31 = com.operations.Matrix.MatrixTransformations.project2D((double) 10.0f, 52.009614495783374d);
        double[] doubleArray34 = new double[] { 10, 'a' };
        double[] doubleArray37 = new double[] { 10, 'a' };
        double[][] doubleArray38 = new double[][] { doubleArray34, doubleArray37 };
        com.operations.Matrix.Matrix matrix39 = new com.operations.Matrix.Matrix(doubleArray38);
        int int40 = matrix39.getCols();
        int int41 = matrix39.getCols();
        int int42 = matrix39.getCols();
        com.operations.Matrix.Matrix matrix48 = com.operations.Matrix.MatrixUtils.generateRandomMatrix(100, (int) (byte) 1, (int) '#', (int) '#', 1L);
        double double51 = matrix48.getValue((int) '4', 0);
        double double52 = com.operations.Matrix.MatrixUtils.frobeniusNorm(matrix48);
        boolean boolean53 = com.operations.Matrix.MatrixUtils.isSquare(matrix48);
        boolean boolean55 = com.operations.Matrix.MatrixUtils.compare(matrix39, matrix48, (double) 100L);
        com.operations.Matrix.Matrix matrix57 = com.operations.Matrix.MatrixTransformations.rotate2D((double) (short) 100);
        double[] doubleArray60 = new double[] { 137.90576492663388d, (byte) -1 };
        double[] doubleArray61 = com.operations.Matrix.MatrixSolver.solveGaussian(matrix57, doubleArray60);
        com.operations.Matrix.Matrix matrix64 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0L, (double) (byte) 10);
        double[] doubleArray67 = new double[] { 10, 'a' };
        double[] doubleArray70 = new double[] { 10, 'a' };
        double[][] doubleArray71 = new double[][] { doubleArray67, doubleArray70 };
        com.operations.Matrix.Matrix matrix72 = new com.operations.Matrix.Matrix(doubleArray71);
        int int73 = matrix72.getCols();
        int int74 = matrix72.getCols();
        int int75 = matrix72.getCols();
        com.operations.Matrix.Matrix[] matrixArray76 = com.operations.Matrix.MatrixDecompositions.luDecomposition(matrix72);
        com.operations.Matrix.Matrix matrix77 = com.operations.Matrix.MatrixOperations.multiply(matrix64, matrix72);
        boolean boolean79 = com.operations.Matrix.MatrixUtils.compare(matrix57, matrix64, (double) (-1L));
        com.operations.Matrix.Matrix matrix80 = com.operations.Matrix.MatrixOperations.subtract(matrix39, matrix64);
        com.operations.Matrix.Matrix matrix81 = com.operations.Matrix.MatrixOperations.transpose(matrix39);
        com.operations.Matrix.Matrix matrix83 = com.operations.Matrix.MatrixTransformations.rotate2D((double) (byte) 100);
        boolean boolean85 = com.operations.Matrix.MatrixUtils.compare(matrix39, matrix83, 35.0d);
        com.operations.Matrix.Matrix matrix86 = com.operations.Matrix.MatrixOperations.multiply(matrix31, matrix83);
        com.operations.Matrix.Matrix matrix87 = com.operations.Matrix.MatrixOperations.transpose(matrix83);
        boolean boolean89 = com.operations.Matrix.MatrixUtils.compare(matrix23, matrix87, 30.0d);
        org.junit.Assert.assertNotNull(matrix2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 2 + "'", int3 == 2);
        org.junit.Assert.assertNotNull(matrixArray4);
        org.junit.Assert.assertNotNull(matrix8);
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertArrayEquals(doubleArray11, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertArrayEquals(doubleArray14, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 2 + "'", int17 == 2);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 2 + "'", int18 == 2);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 2 + "'", int19 == 2);
        org.junit.Assert.assertNotNull(matrixArray20);
        org.junit.Assert.assertNotNull(matrix21);
        org.junit.Assert.assertNotNull(matrix23);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertNotNull(matrix28);
        org.junit.Assert.assertNotNull(matrix31);
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertArrayEquals(doubleArray34, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertArrayEquals(doubleArray37, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 2 + "'", int40 == 2);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 2 + "'", int41 == 2);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 2 + "'", int42 == 2);
        org.junit.Assert.assertNotNull(matrix48);
        org.junit.Assert.assertTrue("'" + double51 + "' != '" + 35.0d + "'", double51 == 35.0d);
        org.junit.Assert.assertTrue("'" + double52 + "' != '" + 350.0d + "'", double52 == 350.0d);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNotNull(matrix57);
        org.junit.Assert.assertNotNull(doubleArray60);
        org.junit.Assert.assertArrayEquals(doubleArray60, new double[] { 137.90576492663388d, (-1.0d) }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray61);
        org.junit.Assert.assertArrayEquals(doubleArray61, new double[] { (-24.931892522286255d), (-135.63701830716116d) }, 1.0E-15);
        org.junit.Assert.assertNotNull(matrix64);
        org.junit.Assert.assertNotNull(doubleArray67);
        org.junit.Assert.assertArrayEquals(doubleArray67, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray70);
        org.junit.Assert.assertArrayEquals(doubleArray70, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray71);
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + 2 + "'", int73 == 2);
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 2 + "'", int74 == 2);
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + 2 + "'", int75 == 2);
        org.junit.Assert.assertNotNull(matrixArray76);
        org.junit.Assert.assertNotNull(matrix77);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertNotNull(matrix80);
        org.junit.Assert.assertNotNull(matrix81);
        org.junit.Assert.assertNotNull(matrix83);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false);
        org.junit.Assert.assertNotNull(matrix86);
        org.junit.Assert.assertNotNull(matrix87);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + true + "'", boolean89 == true);
    }

    @Test
    public void test4733() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4733");
        com.operations.Matrix.Matrix matrix2 = com.operations.Matrix.MatrixTransformations.project2D((double) 100, 350.0d);
        com.operations.Matrix.Matrix matrix4 = com.operations.Matrix.MatrixOperations.scalarMultiply(matrix2, 20.0d);
        boolean boolean5 = com.operations.Matrix.MatrixUtils.isSymmetric(matrix2);
        org.junit.Assert.assertNotNull(matrix2);
        org.junit.Assert.assertNotNull(matrix4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
    }

    @Test
    public void test4734() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4734");
        double[] doubleArray2 = new double[] { 10, 'a' };
        double[] doubleArray5 = new double[] { 10, 'a' };
        double[][] doubleArray6 = new double[][] { doubleArray2, doubleArray5 };
        com.operations.Matrix.Matrix matrix7 = new com.operations.Matrix.Matrix(doubleArray6);
        int int8 = matrix7.getCols();
        int int9 = matrix7.getCols();
        int int10 = matrix7.getCols();
        com.operations.Matrix.Matrix matrix16 = com.operations.Matrix.MatrixUtils.generateRandomMatrix(100, (int) (byte) 1, (int) '#', (int) '#', 1L);
        double double19 = matrix16.getValue((int) '4', 0);
        double double20 = com.operations.Matrix.MatrixUtils.frobeniusNorm(matrix16);
        boolean boolean21 = com.operations.Matrix.MatrixUtils.isSquare(matrix16);
        boolean boolean23 = com.operations.Matrix.MatrixUtils.compare(matrix7, matrix16, (double) 100L);
        double[][] doubleArray24 = matrix7.getData();
        com.operations.Matrix.Matrix matrix25 = new com.operations.Matrix.Matrix(doubleArray24);
        com.operations.Matrix.Matrix matrix26 = new com.operations.Matrix.Matrix(doubleArray24);
        boolean boolean27 = com.operations.Matrix.MatrixUtils.isSquare(matrix26);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertArrayEquals(doubleArray2, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertArrayEquals(doubleArray5, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 2 + "'", int8 == 2);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 2 + "'", int9 == 2);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 2 + "'", int10 == 2);
        org.junit.Assert.assertNotNull(matrix16);
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 35.0d + "'", double19 == 35.0d);
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 350.0d + "'", double20 == 350.0d);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
    }

    @Test
    public void test4735() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4735");
        com.operations.Matrix.Matrix matrix2 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0L, (double) (short) 100);
        double[] doubleArray5 = new double[] { 10, 'a' };
        double[] doubleArray8 = new double[] { 10, 'a' };
        double[][] doubleArray9 = new double[][] { doubleArray5, doubleArray8 };
        com.operations.Matrix.Matrix matrix10 = new com.operations.Matrix.Matrix(doubleArray9);
        int int11 = matrix10.getCols();
        int int12 = matrix10.getCols();
        int int13 = matrix10.getCols();
        com.operations.Matrix.Matrix matrix19 = com.operations.Matrix.MatrixUtils.generateRandomMatrix(100, (int) (byte) 1, (int) '#', (int) '#', 1L);
        double double22 = matrix19.getValue((int) '4', 0);
        double double23 = com.operations.Matrix.MatrixUtils.frobeniusNorm(matrix19);
        boolean boolean24 = com.operations.Matrix.MatrixUtils.isSquare(matrix19);
        boolean boolean26 = com.operations.Matrix.MatrixUtils.compare(matrix10, matrix19, (double) 100L);
        double[][] doubleArray27 = matrix10.getData();
        com.operations.Matrix.Matrix matrix28 = com.operations.Matrix.MatrixDecompositions.choleskyDecomposition(matrix10);
        com.operations.Matrix.Matrix matrix30 = com.operations.Matrix.MatrixOperations.scalarMultiply(matrix28, 1363.6076983299943d);
        com.operations.Matrix.Matrix matrix31 = com.operations.Matrix.MatrixOperations.subtract(matrix2, matrix30);
        org.junit.Assert.assertNotNull(matrix2);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertArrayEquals(doubleArray5, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertArrayEquals(doubleArray8, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 2 + "'", int11 == 2);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 2 + "'", int12 == 2);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 2 + "'", int13 == 2);
        org.junit.Assert.assertNotNull(matrix19);
        org.junit.Assert.assertTrue("'" + double22 + "' != '" + 35.0d + "'", double22 == 35.0d);
        org.junit.Assert.assertTrue("'" + double23 + "' != '" + 350.0d + "'", double23 == 350.0d);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertNotNull(matrix28);
        org.junit.Assert.assertNotNull(matrix30);
        org.junit.Assert.assertNotNull(matrix31);
    }

    @Test
    public void test4736() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4736");
        double[] doubleArray2 = new double[] { 10, 'a' };
        double[] doubleArray5 = new double[] { 10, 'a' };
        double[][] doubleArray6 = new double[][] { doubleArray2, doubleArray5 };
        com.operations.Matrix.Matrix matrix7 = new com.operations.Matrix.Matrix(doubleArray6);
        int int8 = matrix7.getCols();
        int int9 = matrix7.getCols();
        matrix7.print();
        double[] doubleArray13 = new double[] { 10, 'a' };
        double[] doubleArray16 = new double[] { 10, 'a' };
        double[][] doubleArray17 = new double[][] { doubleArray13, doubleArray16 };
        com.operations.Matrix.Matrix matrix18 = new com.operations.Matrix.Matrix(doubleArray17);
        boolean boolean20 = com.operations.Matrix.MatrixUtils.compare(matrix7, matrix18, (double) (-1));
        com.operations.Matrix.Matrix matrix21 = com.operations.Matrix.MatrixDecompositions.choleskyDecomposition(matrix18);
        com.operations.Matrix.Matrix matrix23 = com.operations.Matrix.MatrixOperations.scalarMultiply(matrix21, 32.0d);
        com.operations.Matrix.Matrix matrix24 = com.operations.Matrix.MatrixDecompositions.choleskyDecomposition(matrix21);
        double[][] doubleArray25 = matrix21.getData();
        com.operations.Matrix.Matrix matrix27 = com.operations.Matrix.MatrixTransformations.rotate2D((-0.1736481776669303d));
        double[] doubleArray30 = new double[] { 10, 'a' };
        double[] doubleArray33 = new double[] { 10, 'a' };
        double[][] doubleArray34 = new double[][] { doubleArray30, doubleArray33 };
        com.operations.Matrix.Matrix matrix35 = new com.operations.Matrix.Matrix(doubleArray34);
        com.operations.Matrix.Matrix matrix36 = new com.operations.Matrix.Matrix(doubleArray34);
        boolean boolean37 = com.operations.Matrix.MatrixUtils.isSquare(matrix36);
        double[] doubleArray40 = new double[] { 10, 'a' };
        double[] doubleArray43 = new double[] { 10, 'a' };
        double[][] doubleArray44 = new double[][] { doubleArray40, doubleArray43 };
        com.operations.Matrix.Matrix matrix45 = new com.operations.Matrix.Matrix(doubleArray44);
        int int46 = matrix45.getCols();
        int int47 = matrix45.getCols();
        matrix45.print();
        double[] doubleArray51 = new double[] { 10, 'a' };
        double[] doubleArray54 = new double[] { 10, 'a' };
        double[][] doubleArray55 = new double[][] { doubleArray51, doubleArray54 };
        com.operations.Matrix.Matrix matrix56 = new com.operations.Matrix.Matrix(doubleArray55);
        boolean boolean58 = com.operations.Matrix.MatrixUtils.compare(matrix45, matrix56, (double) (-1));
        com.operations.Matrix.Matrix matrix59 = com.operations.Matrix.MatrixOperations.subtract(matrix36, matrix56);
        double[] doubleArray62 = new double[] { 10, 'a' };
        double[] doubleArray65 = new double[] { 10, 'a' };
        double[][] doubleArray66 = new double[][] { doubleArray62, doubleArray65 };
        com.operations.Matrix.Matrix matrix67 = new com.operations.Matrix.Matrix(doubleArray66);
        com.operations.Matrix.Matrix matrix68 = new com.operations.Matrix.Matrix(doubleArray66);
        boolean boolean69 = com.operations.Matrix.MatrixUtils.isSquare(matrix68);
        double[] doubleArray72 = new double[] { 10, 'a' };
        double[] doubleArray75 = new double[] { 10, 'a' };
        double[][] doubleArray76 = new double[][] { doubleArray72, doubleArray75 };
        com.operations.Matrix.Matrix matrix77 = new com.operations.Matrix.Matrix(doubleArray76);
        int int78 = matrix77.getCols();
        int int79 = matrix77.getCols();
        matrix77.print();
        double[] doubleArray83 = new double[] { 10, 'a' };
        double[] doubleArray86 = new double[] { 10, 'a' };
        double[][] doubleArray87 = new double[][] { doubleArray83, doubleArray86 };
        com.operations.Matrix.Matrix matrix88 = new com.operations.Matrix.Matrix(doubleArray87);
        boolean boolean90 = com.operations.Matrix.MatrixUtils.compare(matrix77, matrix88, (double) (-1));
        com.operations.Matrix.Matrix matrix91 = com.operations.Matrix.MatrixOperations.subtract(matrix68, matrix88);
        com.operations.Matrix.Matrix matrix92 = com.operations.Matrix.MatrixOperations.add(matrix36, matrix91);
        com.operations.Matrix.Matrix matrix93 = com.operations.Matrix.MatrixOperations.multiply(matrix27, matrix92);
        boolean boolean95 = com.operations.Matrix.MatrixUtils.compare(matrix21, matrix93, 146.4308710620817d);
        int int96 = matrix21.getCols();
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertArrayEquals(doubleArray2, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertArrayEquals(doubleArray5, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 2 + "'", int8 == 2);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 2 + "'", int9 == 2);
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertArrayEquals(doubleArray13, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertArrayEquals(doubleArray16, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(matrix21);
        org.junit.Assert.assertNotNull(matrix23);
        org.junit.Assert.assertNotNull(matrix24);
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertNotNull(matrix27);
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertArrayEquals(doubleArray30, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertArrayEquals(doubleArray33, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertArrayEquals(doubleArray40, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertArrayEquals(doubleArray43, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 2 + "'", int46 == 2);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 2 + "'", int47 == 2);
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertArrayEquals(doubleArray51, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray54);
        org.junit.Assert.assertArrayEquals(doubleArray54, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(matrix59);
        org.junit.Assert.assertNotNull(doubleArray62);
        org.junit.Assert.assertArrayEquals(doubleArray62, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray65);
        org.junit.Assert.assertArrayEquals(doubleArray65, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray66);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + true + "'", boolean69 == true);
        org.junit.Assert.assertNotNull(doubleArray72);
        org.junit.Assert.assertArrayEquals(doubleArray72, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray75);
        org.junit.Assert.assertArrayEquals(doubleArray75, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray76);
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + 2 + "'", int78 == 2);
        org.junit.Assert.assertTrue("'" + int79 + "' != '" + 2 + "'", int79 == 2);
        org.junit.Assert.assertNotNull(doubleArray83);
        org.junit.Assert.assertArrayEquals(doubleArray83, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray86);
        org.junit.Assert.assertArrayEquals(doubleArray86, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray87);
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + false + "'", boolean90 == false);
        org.junit.Assert.assertNotNull(matrix91);
        org.junit.Assert.assertNotNull(matrix92);
        org.junit.Assert.assertNotNull(matrix93);
        org.junit.Assert.assertTrue("'" + boolean95 + "' != '" + true + "'", boolean95 == true);
        org.junit.Assert.assertTrue("'" + int96 + "' != '" + 2 + "'", int96 == 2);
    }

    @Test
    public void test4737() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4737");
        com.operations.Matrix.Matrix matrix2 = com.operations.Matrix.MatrixTransformations.project2D(137.15495886388925d, 137.15495886388925d);
        com.operations.Matrix.Matrix matrix3 = com.operations.Matrix.MatrixDecompositions.choleskyDecomposition(matrix2);
        org.junit.Assert.assertNotNull(matrix2);
        org.junit.Assert.assertNotNull(matrix3);
    }

    @Test
    public void test4738() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4738");
        com.operations.Matrix.Matrix matrix2 = new com.operations.Matrix.Matrix(100, 100);
        int int3 = matrix2.getCols();
        double[][] doubleArray4 = matrix2.getData();
        int int5 = matrix2.getCols();
        com.operations.Matrix.Matrix[] matrixArray6 = com.operations.Matrix.MatrixDecompositions.luDecomposition(matrix2);
        com.operations.Matrix.Matrix matrix9 = com.operations.Matrix.MatrixTransformations.project2D(260.95643973734866d, 146781.22563870353d);
        // The following exception was thrown during execution in test generation
        try {
            com.operations.Matrix.Matrix matrix10 = com.operations.Matrix.MatrixOperations.multiply(matrix2, matrix9);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Matrix A's columns must match Matrix B's rows for multiplication.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 100 + "'", int3 == 100);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 100 + "'", int5 == 100);
        org.junit.Assert.assertNotNull(matrixArray6);
        org.junit.Assert.assertNotNull(matrix9);
    }

    @Test
    public void test4739() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4739");
        double[] doubleArray2 = new double[] { 10, 'a' };
        double[] doubleArray5 = new double[] { 10, 'a' };
        double[][] doubleArray6 = new double[][] { doubleArray2, doubleArray5 };
        com.operations.Matrix.Matrix matrix7 = new com.operations.Matrix.Matrix(doubleArray6);
        com.operations.Matrix.Matrix matrix8 = new com.operations.Matrix.Matrix(doubleArray6);
        com.operations.Matrix.Matrix matrix10 = com.operations.Matrix.MatrixTransformations.rotate2D((double) (short) 100);
        double[] doubleArray13 = new double[] { 137.90576492663388d, (byte) -1 };
        double[] doubleArray14 = com.operations.Matrix.MatrixSolver.solveGaussian(matrix10, doubleArray13);
        com.operations.Matrix.Matrix matrix15 = com.operations.Matrix.MatrixOperations.add(matrix8, matrix10);
        boolean boolean16 = com.operations.Matrix.MatrixUtils.isSymmetric(matrix15);
        com.operations.Matrix.Matrix matrix19 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0.0f, (double) (-1));
        com.operations.Matrix.Matrix matrix22 = com.operations.Matrix.MatrixTransformations.scale2D(146.4308710620817d, (double) 10L);
        com.operations.Matrix.Matrix matrix23 = com.operations.Matrix.MatrixOperations.multiply(matrix19, matrix22);
        com.operations.Matrix.Matrix matrix24 = com.operations.Matrix.MatrixOperations.multiply(matrix15, matrix19);
        com.operations.Matrix.Matrix matrix25 = com.operations.Matrix.MatrixOperations.transpose(matrix19);
        matrix25.print();
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertArrayEquals(doubleArray2, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertArrayEquals(doubleArray5, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertNotNull(matrix10);
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertArrayEquals(doubleArray13, new double[] { 137.90576492663388d, (-1.0d) }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertArrayEquals(doubleArray14, new double[] { (-24.931892522286255d), (-135.63701830716116d) }, 1.0E-15);
        org.junit.Assert.assertNotNull(matrix15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(matrix19);
        org.junit.Assert.assertNotNull(matrix22);
        org.junit.Assert.assertNotNull(matrix23);
        org.junit.Assert.assertNotNull(matrix24);
        org.junit.Assert.assertNotNull(matrix25);
    }

    @Test
    public void test4740() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4740");
        // The following exception was thrown during execution in test generation
        try {
            com.operations.Matrix.Matrix matrix5 = com.operations.Matrix.MatrixUtils.generateRandomMatrix((int) (short) 0, 10, 2, (int) (byte) 10, (long) (byte) 0);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
    }

    @Test
    public void test4741() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4741");
        double[] doubleArray2 = new double[] { 10, 'a' };
        double[] doubleArray5 = new double[] { 10, 'a' };
        double[][] doubleArray6 = new double[][] { doubleArray2, doubleArray5 };
        com.operations.Matrix.Matrix matrix7 = new com.operations.Matrix.Matrix(doubleArray6);
        int int8 = matrix7.getCols();
        int int9 = matrix7.getCols();
        int int10 = matrix7.getCols();
        com.operations.Matrix.Matrix matrix16 = com.operations.Matrix.MatrixUtils.generateRandomMatrix(100, (int) (byte) 1, (int) '#', (int) '#', 1L);
        double double19 = matrix16.getValue((int) '4', 0);
        double double20 = com.operations.Matrix.MatrixUtils.frobeniusNorm(matrix16);
        boolean boolean21 = com.operations.Matrix.MatrixUtils.isSquare(matrix16);
        boolean boolean23 = com.operations.Matrix.MatrixUtils.compare(matrix7, matrix16, (double) 100L);
        double[][] doubleArray24 = matrix7.getData();
        double double25 = com.operations.Matrix.MatrixUtils.frobeniusNorm(matrix7);
        double[][] doubleArray26 = matrix7.getData();
        com.operations.Matrix.Matrix matrix31 = com.operations.Matrix.MatrixUtils.generateRandomMatrix(100, 0, (int) (byte) 10, (int) '4');
        // The following exception was thrown during execution in test generation
        try {
            com.operations.Matrix.Matrix matrix32 = com.operations.Matrix.MatrixOperations.add(matrix7, matrix31);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Matrices must have the same dimensions for addition.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertArrayEquals(doubleArray2, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertArrayEquals(doubleArray5, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 2 + "'", int8 == 2);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 2 + "'", int9 == 2);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 2 + "'", int10 == 2);
        org.junit.Assert.assertNotNull(matrix16);
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 35.0d + "'", double19 == 35.0d);
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 350.0d + "'", double20 == 350.0d);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertTrue("'" + double25 + "' != '" + 137.90576492663388d + "'", double25 == 137.90576492663388d);
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertNotNull(matrix31);
    }

    @Test
    public void test4742() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4742");
        com.operations.Matrix.Matrix matrix2 = com.operations.Matrix.MatrixTransformations.project2D(101.9803902718557d, 576.1705606798018d);
        org.junit.Assert.assertNotNull(matrix2);
    }

    @Test
    public void test4743() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4743");
        com.operations.Matrix.Matrix matrix2 = com.operations.Matrix.MatrixTransformations.scale2D((double) (byte) 100, 350.0d);
        com.operations.Matrix.Matrix matrix5 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0L, (double) (byte) 10);
        double[] doubleArray8 = new double[] { 10, 'a' };
        double[] doubleArray11 = new double[] { 10, 'a' };
        double[][] doubleArray12 = new double[][] { doubleArray8, doubleArray11 };
        com.operations.Matrix.Matrix matrix13 = new com.operations.Matrix.Matrix(doubleArray12);
        int int14 = matrix13.getCols();
        int int15 = matrix13.getCols();
        int int16 = matrix13.getCols();
        com.operations.Matrix.Matrix[] matrixArray17 = com.operations.Matrix.MatrixDecompositions.luDecomposition(matrix13);
        com.operations.Matrix.Matrix matrix18 = com.operations.Matrix.MatrixOperations.multiply(matrix5, matrix13);
        com.operations.Matrix.Matrix matrix20 = com.operations.Matrix.MatrixTransformations.rotate2D((double) (short) 100);
        boolean boolean22 = com.operations.Matrix.MatrixUtils.compare(matrix13, matrix20, (double) (byte) 0);
        double[] doubleArray25 = new double[] { 10, 'a' };
        double[] doubleArray28 = new double[] { 10, 'a' };
        double[][] doubleArray29 = new double[][] { doubleArray25, doubleArray28 };
        com.operations.Matrix.Matrix matrix30 = new com.operations.Matrix.Matrix(doubleArray29);
        com.operations.Matrix.Matrix matrix31 = com.operations.Matrix.MatrixOperations.multiply(matrix13, matrix30);
        com.operations.Matrix.Matrix matrix32 = com.operations.Matrix.MatrixOperations.multiply(matrix2, matrix31);
        double[][] doubleArray33 = matrix32.getData();
        com.operations.Matrix.Matrix matrix34 = new com.operations.Matrix.Matrix(doubleArray33);
        com.operations.Matrix.Matrix matrix35 = new com.operations.Matrix.Matrix(doubleArray33);
        org.junit.Assert.assertNotNull(matrix2);
        org.junit.Assert.assertNotNull(matrix5);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertArrayEquals(doubleArray8, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertArrayEquals(doubleArray11, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 2 + "'", int14 == 2);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 2 + "'", int15 == 2);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 2 + "'", int16 == 2);
        org.junit.Assert.assertNotNull(matrixArray17);
        org.junit.Assert.assertNotNull(matrix18);
        org.junit.Assert.assertNotNull(matrix20);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertArrayEquals(doubleArray25, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertArrayEquals(doubleArray28, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertNotNull(matrix31);
        org.junit.Assert.assertNotNull(matrix32);
        org.junit.Assert.assertNotNull(doubleArray33);
    }

    @Test
    public void test4744() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4744");
        com.operations.Matrix.Matrix matrix1 = com.operations.Matrix.MatrixTransformations.rotate2D((double) '4');
        double[] doubleArray4 = new double[] { 10, 'a' };
        double[] doubleArray7 = new double[] { 10, 'a' };
        double[][] doubleArray8 = new double[][] { doubleArray4, doubleArray7 };
        com.operations.Matrix.Matrix matrix9 = new com.operations.Matrix.Matrix(doubleArray8);
        com.operations.Matrix.Matrix matrix10 = new com.operations.Matrix.Matrix(doubleArray8);
        com.operations.Matrix.Matrix matrix12 = com.operations.Matrix.MatrixTransformations.rotate2D((double) (short) 100);
        double[] doubleArray15 = new double[] { 137.90576492663388d, (byte) -1 };
        double[] doubleArray16 = com.operations.Matrix.MatrixSolver.solveGaussian(matrix12, doubleArray15);
        com.operations.Matrix.Matrix matrix17 = com.operations.Matrix.MatrixOperations.add(matrix10, matrix12);
        boolean boolean18 = com.operations.Matrix.MatrixUtils.isSymmetric(matrix17);
        boolean boolean20 = com.operations.Matrix.MatrixUtils.compare(matrix1, matrix17, 364.0054944640259d);
        com.operations.Matrix.Matrix matrix23 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0L, (double) (byte) 10);
        int int24 = matrix23.getRows();
        com.operations.Matrix.Matrix matrix26 = com.operations.Matrix.MatrixOperations.scalarMultiply(matrix23, (double) 2);
        matrix23.print();
        com.operations.Matrix.Matrix matrix28 = com.operations.Matrix.MatrixOperations.multiply(matrix17, matrix23);
        com.operations.Matrix.Matrix matrix29 = com.operations.Matrix.MatrixOperations.transpose(matrix28);
        double double30 = com.operations.Matrix.MatrixUtils.frobeniusNorm(matrix28);
        boolean boolean31 = com.operations.Matrix.MatrixUtils.isSquare(matrix28);
        double[][] doubleArray32 = matrix28.getData();
        com.operations.Matrix.Matrix matrix33 = new com.operations.Matrix.Matrix(doubleArray32);
        org.junit.Assert.assertNotNull(matrix1);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertArrayEquals(doubleArray4, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertArrayEquals(doubleArray7, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertNotNull(matrix12);
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertArrayEquals(doubleArray15, new double[] { 137.90576492663388d, (-1.0d) }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertArrayEquals(doubleArray16, new double[] { (-24.931892522286255d), (-135.63701830716116d) }, 1.0E-15);
        org.junit.Assert.assertNotNull(matrix17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertNotNull(matrix23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 2 + "'", int24 == 2);
        org.junit.Assert.assertNotNull(matrix26);
        org.junit.Assert.assertNotNull(matrix28);
        org.junit.Assert.assertNotNull(matrix29);
        org.junit.Assert.assertTrue("'" + double30 + "' != '" + 1363.6076983299943d + "'", double30 == 1363.6076983299943d);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertNotNull(doubleArray32);
    }

    @Test
    public void test4745() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4745");
        com.operations.Matrix.Matrix matrix2 = com.operations.Matrix.MatrixTransformations.scale2D(146781.22563870353d, 186.6644586191991d);
        org.junit.Assert.assertNotNull(matrix2);
    }

    @Test
    public void test4746() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4746");
        // The following exception was thrown during execution in test generation
        try {
            com.operations.Matrix.Matrix matrix4 = com.operations.Matrix.MatrixUtils.generateRandomMatrix((int) (byte) 0, (int) (byte) 100, 97, 0);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
    }

    @Test
    public void test4747() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4747");
        com.operations.Matrix.Matrix matrix1 = com.operations.Matrix.MatrixTransformations.rotate2D(975.1410154434076d);
        com.operations.Matrix.Matrix matrix2 = com.operations.Matrix.MatrixOperations.transpose(matrix1);
        double[][] doubleArray3 = matrix2.getData();
        com.operations.Matrix.Matrix[] matrixArray4 = com.operations.Matrix.MatrixDecompositions.luDecomposition(matrix2);
        org.junit.Assert.assertNotNull(matrix1);
        org.junit.Assert.assertNotNull(matrix2);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertNotNull(matrixArray4);
    }

    @Test
    public void test4748() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4748");
        com.operations.Matrix.Matrix matrix2 = com.operations.Matrix.MatrixTransformations.project2D(0.984807753012208d, 10.0d);
        com.operations.Matrix.Matrix[] matrixArray3 = com.operations.Matrix.MatrixDecompositions.luDecomposition(matrix2);
        double[][] doubleArray4 = matrix2.getData();
        com.operations.Matrix.Matrix matrix5 = com.operations.Matrix.MatrixOperations.transpose(matrix2);
        double double6 = com.operations.Matrix.MatrixUtils.frobeniusNorm(matrix5);
        org.junit.Assert.assertNotNull(matrix2);
        org.junit.Assert.assertNotNull(matrixArray3);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertNotNull(matrix5);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 10.048375307003264d + "'", double6 == 10.048375307003264d);
    }

    @Test
    public void test4749() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4749");
        // The following exception was thrown during execution in test generation
        try {
            com.operations.Matrix.Matrix matrix5 = com.operations.Matrix.MatrixUtils.generateRandomMatrix((int) (byte) 10, (int) (short) -1, (int) (short) 100, (int) (byte) 10, (long) '4');
            org.junit.Assert.fail("Expected exception of type java.lang.NegativeArraySizeException; message: -1");
        } catch (java.lang.NegativeArraySizeException e) {
            // Expected exception.
        }
    }

    @Test
    public void test4750() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4750");
        com.operations.Matrix.Matrix matrix1 = com.operations.Matrix.MatrixTransformations.rotate2D((double) 100L);
        com.operations.Matrix.Matrix matrix3 = com.operations.Matrix.MatrixOperations.scalarMultiply(matrix1, (double) ' ');
        com.operations.Matrix.Matrix[] matrixArray4 = com.operations.Matrix.MatrixDecompositions.luDecomposition(matrix3);
        com.operations.Matrix.Matrix matrix6 = com.operations.Matrix.MatrixOperations.scalarMultiply(matrix3, 364.0054944640259d);
        org.junit.Assert.assertNotNull(matrix1);
        org.junit.Assert.assertNotNull(matrix3);
        org.junit.Assert.assertNotNull(matrixArray4);
        org.junit.Assert.assertNotNull(matrix6);
    }

    @Test
    public void test4751() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4751");
        com.operations.Matrix.Matrix matrix2 = new com.operations.Matrix.Matrix(97, (int) (byte) 100);
    }

    @Test
    public void test4752() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4752");
        com.operations.Matrix.Matrix matrix2 = com.operations.Matrix.MatrixTransformations.scale2D((double) 'a', (double) (byte) 0);
        boolean boolean3 = com.operations.Matrix.MatrixUtils.isSquare(matrix2);
        org.junit.Assert.assertNotNull(matrix2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
    }

    @Test
    public void test4753() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4753");
        com.operations.Matrix.Matrix matrix2 = com.operations.Matrix.MatrixTransformations.scale2D(10.0d, 0.0d);
        com.operations.Matrix.Matrix matrix3 = com.operations.Matrix.MatrixOperations.transpose(matrix2);
        com.operations.Matrix.Matrix matrix5 = com.operations.Matrix.MatrixOperations.scalarMultiply(matrix3, 0.01745240643728351d);
        double[][] doubleArray6 = matrix3.getData();
        org.junit.Assert.assertNotNull(matrix2);
        org.junit.Assert.assertNotNull(matrix3);
        org.junit.Assert.assertNotNull(matrix5);
        org.junit.Assert.assertNotNull(doubleArray6);
    }

    @Test
    public void test4754() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4754");
        com.operations.Matrix.Matrix matrix1 = com.operations.Matrix.MatrixTransformations.rotate2D((double) 1.0f);
        com.operations.Matrix.Matrix matrix4 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0L, (double) (byte) 10);
        int int5 = matrix4.getRows();
        com.operations.Matrix.Matrix matrix7 = com.operations.Matrix.MatrixOperations.scalarMultiply(matrix4, (double) 2);
        boolean boolean9 = com.operations.Matrix.MatrixUtils.compare(matrix1, matrix7, (double) 10.0f);
        com.operations.Matrix.Matrix[] matrixArray10 = com.operations.Matrix.MatrixDecompositions.luDecomposition(matrix7);
        double double11 = com.operations.Matrix.MatrixUtils.frobeniusNorm(matrix7);
        com.operations.Matrix.Matrix matrix14 = com.operations.Matrix.MatrixTransformations.project2D(0.0d, (double) 0);
        com.operations.Matrix.Matrix[] matrixArray15 = com.operations.Matrix.MatrixDecompositions.luDecomposition(matrix14);
        com.operations.Matrix.Matrix matrix18 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0L, (double) (byte) 10);
        int int19 = matrix18.getRows();
        com.operations.Matrix.Matrix matrix21 = com.operations.Matrix.MatrixOperations.scalarMultiply(matrix18, (double) 2);
        double double22 = com.operations.Matrix.MatrixUtils.frobeniusNorm(matrix18);
        int int23 = matrix18.getRows();
        com.operations.Matrix.Matrix matrix24 = com.operations.Matrix.MatrixOperations.transpose(matrix18);
        com.operations.Matrix.Matrix matrix25 = com.operations.Matrix.MatrixOperations.multiply(matrix14, matrix24);
        com.operations.Matrix.Matrix matrix26 = com.operations.Matrix.MatrixOperations.multiply(matrix7, matrix24);
        int int27 = matrix26.getRows();
        double[] doubleArray30 = new double[] { 10, 'a' };
        double[] doubleArray33 = new double[] { 10, 'a' };
        double[][] doubleArray34 = new double[][] { doubleArray30, doubleArray33 };
        com.operations.Matrix.Matrix matrix35 = new com.operations.Matrix.Matrix(doubleArray34);
        com.operations.Matrix.Matrix matrix36 = new com.operations.Matrix.Matrix(doubleArray34);
        com.operations.Matrix.Matrix[] matrixArray37 = com.operations.Matrix.MatrixDecompositions.luDecomposition(matrix36);
        com.operations.Matrix.Matrix matrix38 = com.operations.Matrix.MatrixDecompositions.choleskyDecomposition(matrix36);
        com.operations.Matrix.Matrix matrix39 = com.operations.Matrix.MatrixOperations.multiply(matrix26, matrix38);
        double[][] doubleArray40 = matrix26.getData();
        com.operations.Matrix.Matrix matrix41 = new com.operations.Matrix.Matrix(doubleArray40);
        com.operations.Matrix.Matrix matrix43 = com.operations.Matrix.MatrixOperations.scalarMultiply(matrix41, 18.985133644271098d);
        int int44 = matrix41.getRows();
        org.junit.Assert.assertNotNull(matrix1);
        org.junit.Assert.assertNotNull(matrix4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 2 + "'", int5 == 2);
        org.junit.Assert.assertNotNull(matrix7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(matrixArray10);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 20.0d + "'", double11 == 20.0d);
        org.junit.Assert.assertNotNull(matrix14);
        org.junit.Assert.assertNotNull(matrixArray15);
        org.junit.Assert.assertNotNull(matrix18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 2 + "'", int19 == 2);
        org.junit.Assert.assertNotNull(matrix21);
        org.junit.Assert.assertTrue("'" + double22 + "' != '" + 10.0d + "'", double22 == 10.0d);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 2 + "'", int23 == 2);
        org.junit.Assert.assertNotNull(matrix24);
        org.junit.Assert.assertNotNull(matrix25);
        org.junit.Assert.assertNotNull(matrix26);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 2 + "'", int27 == 2);
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertArrayEquals(doubleArray30, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertArrayEquals(doubleArray33, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertNotNull(matrixArray37);
        org.junit.Assert.assertNotNull(matrix38);
        org.junit.Assert.assertNotNull(matrix39);
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertNotNull(matrix43);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 2 + "'", int44 == 2);
    }

    @Test
    public void test4755() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4755");
        com.operations.Matrix.Matrix matrix5 = com.operations.Matrix.MatrixUtils.generateRandomMatrix(1, 0, 1, (int) (byte) 0, (long) 1);
        org.junit.Assert.assertNotNull(matrix5);
    }

    @Test
    public void test4756() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4756");
        com.operations.Matrix.Matrix matrix2 = com.operations.Matrix.MatrixTransformations.scale2D(146.4308710620817d, (double) 10L);
        com.operations.Matrix.Matrix matrix5 = new com.operations.Matrix.Matrix(10, (int) (byte) 1);
        // The following exception was thrown during execution in test generation
        try {
            com.operations.Matrix.Matrix matrix6 = com.operations.Matrix.MatrixOperations.subtract(matrix2, matrix5);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Matrices must have the same dimensions for subtraction.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(matrix2);
    }

    @Test
    public void test4757() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4757");
        com.operations.Matrix.Matrix matrix2 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0L, (double) (byte) 10);
        double[] doubleArray5 = new double[] { 10, 'a' };
        double[] doubleArray8 = new double[] { 10, 'a' };
        double[][] doubleArray9 = new double[][] { doubleArray5, doubleArray8 };
        com.operations.Matrix.Matrix matrix10 = new com.operations.Matrix.Matrix(doubleArray9);
        int int11 = matrix10.getCols();
        int int12 = matrix10.getCols();
        int int13 = matrix10.getCols();
        com.operations.Matrix.Matrix[] matrixArray14 = com.operations.Matrix.MatrixDecompositions.luDecomposition(matrix10);
        com.operations.Matrix.Matrix matrix15 = com.operations.Matrix.MatrixOperations.multiply(matrix2, matrix10);
        int int16 = matrix10.getRows();
        int int17 = matrix10.getCols();
        double[][] doubleArray18 = matrix10.getData();
        double double19 = com.operations.Matrix.MatrixUtils.frobeniusNorm(matrix10);
        com.operations.Matrix.Matrix matrix20 = com.operations.Matrix.MatrixDecompositions.choleskyDecomposition(matrix10);
        boolean boolean21 = com.operations.Matrix.MatrixUtils.isSymmetric(matrix20);
        int int22 = matrix20.getRows();
        org.junit.Assert.assertNotNull(matrix2);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertArrayEquals(doubleArray5, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertArrayEquals(doubleArray8, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 2 + "'", int11 == 2);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 2 + "'", int12 == 2);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 2 + "'", int13 == 2);
        org.junit.Assert.assertNotNull(matrixArray14);
        org.junit.Assert.assertNotNull(matrix15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 2 + "'", int16 == 2);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 2 + "'", int17 == 2);
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 137.90576492663388d + "'", double19 == 137.90576492663388d);
        org.junit.Assert.assertNotNull(matrix20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 2 + "'", int22 == 2);
    }

    @Test
    public void test4758() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4758");
        com.operations.Matrix.Matrix matrix2 = com.operations.Matrix.MatrixTransformations.project2D(0.01745240643728351d, 3200.015624961853d);
        double[][] doubleArray3 = matrix2.getData();
        org.junit.Assert.assertNotNull(matrix2);
        org.junit.Assert.assertNotNull(doubleArray3);
    }

    @Test
    public void test4759() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4759");
        // The following exception was thrown during execution in test generation
        try {
            com.operations.Matrix.Matrix matrix5 = com.operations.Matrix.MatrixUtils.generateRandomMatrix((int) (short) -1, 35, 52, (int) (byte) 10, (long) (byte) 10);
            org.junit.Assert.fail("Expected exception of type java.lang.NegativeArraySizeException; message: -1");
        } catch (java.lang.NegativeArraySizeException e) {
            // Expected exception.
        }
    }

    @Test
    public void test4760() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4760");
        com.operations.Matrix.Matrix matrix2 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0L, (double) (byte) 10);
        int int3 = matrix2.getRows();
        com.operations.Matrix.Matrix matrix5 = com.operations.Matrix.MatrixOperations.scalarMultiply(matrix2, (double) 2);
        matrix2.print();
        com.operations.Matrix.Matrix matrix8 = com.operations.Matrix.MatrixOperations.scalarMultiply(matrix2, 100.00499987500625d);
        com.operations.Matrix.Matrix matrix11 = new com.operations.Matrix.Matrix(10, (int) (byte) 1);
        boolean boolean13 = com.operations.Matrix.MatrixUtils.compare(matrix8, matrix11, (double) 100L);
        boolean boolean14 = com.operations.Matrix.MatrixUtils.isSquare(matrix11);
        com.operations.Matrix.Matrix matrix16 = com.operations.Matrix.MatrixTransformations.rotate2D((double) 1.0f);
        com.operations.Matrix.Matrix matrix19 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0L, (double) (byte) 10);
        int int20 = matrix19.getRows();
        com.operations.Matrix.Matrix matrix22 = com.operations.Matrix.MatrixOperations.scalarMultiply(matrix19, (double) 2);
        boolean boolean24 = com.operations.Matrix.MatrixUtils.compare(matrix16, matrix22, (double) 10.0f);
        double[] doubleArray27 = new double[] { 10, 'a' };
        double[] doubleArray30 = new double[] { 10, 'a' };
        double[][] doubleArray31 = new double[][] { doubleArray27, doubleArray30 };
        com.operations.Matrix.Matrix matrix32 = new com.operations.Matrix.Matrix(doubleArray31);
        com.operations.Matrix.Matrix matrix33 = new com.operations.Matrix.Matrix(doubleArray31);
        boolean boolean34 = com.operations.Matrix.MatrixUtils.isSquare(matrix33);
        double[] doubleArray37 = new double[] { 10, 'a' };
        double[] doubleArray40 = new double[] { 10, 'a' };
        double[][] doubleArray41 = new double[][] { doubleArray37, doubleArray40 };
        com.operations.Matrix.Matrix matrix42 = new com.operations.Matrix.Matrix(doubleArray41);
        int int43 = matrix42.getCols();
        int int44 = matrix42.getCols();
        matrix42.print();
        double[] doubleArray48 = new double[] { 10, 'a' };
        double[] doubleArray51 = new double[] { 10, 'a' };
        double[][] doubleArray52 = new double[][] { doubleArray48, doubleArray51 };
        com.operations.Matrix.Matrix matrix53 = new com.operations.Matrix.Matrix(doubleArray52);
        boolean boolean55 = com.operations.Matrix.MatrixUtils.compare(matrix42, matrix53, (double) (-1));
        com.operations.Matrix.Matrix matrix56 = com.operations.Matrix.MatrixOperations.subtract(matrix33, matrix53);
        com.operations.Matrix.Matrix matrix58 = com.operations.Matrix.MatrixOperations.scalarMultiply(matrix33, (double) 0.0f);
        com.operations.Matrix.Matrix matrix59 = com.operations.Matrix.MatrixOperations.transpose(matrix33);
        com.operations.Matrix.Matrix matrix60 = com.operations.Matrix.MatrixOperations.transpose(matrix59);
        com.operations.Matrix.Matrix matrix61 = com.operations.Matrix.MatrixOperations.multiply(matrix22, matrix60);
        com.operations.Matrix.Matrix matrix63 = com.operations.Matrix.MatrixTransformations.rotate2D((double) (short) 100);
        double[] doubleArray66 = new double[] { 137.90576492663388d, (byte) -1 };
        double[] doubleArray67 = com.operations.Matrix.MatrixSolver.solveGaussian(matrix63, doubleArray66);
        com.operations.Matrix.Matrix matrix70 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0L, (double) (byte) 10);
        double[] doubleArray73 = new double[] { 10, 'a' };
        double[] doubleArray76 = new double[] { 10, 'a' };
        double[][] doubleArray77 = new double[][] { doubleArray73, doubleArray76 };
        com.operations.Matrix.Matrix matrix78 = new com.operations.Matrix.Matrix(doubleArray77);
        int int79 = matrix78.getCols();
        int int80 = matrix78.getCols();
        int int81 = matrix78.getCols();
        com.operations.Matrix.Matrix[] matrixArray82 = com.operations.Matrix.MatrixDecompositions.luDecomposition(matrix78);
        com.operations.Matrix.Matrix matrix83 = com.operations.Matrix.MatrixOperations.multiply(matrix70, matrix78);
        boolean boolean85 = com.operations.Matrix.MatrixUtils.compare(matrix63, matrix70, (double) (-1L));
        double[][] doubleArray86 = matrix63.getData();
        com.operations.Matrix.Matrix matrix89 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0L, (double) 10L);
        boolean boolean91 = com.operations.Matrix.MatrixUtils.compare(matrix63, matrix89, 146.4308710620817d);
        com.operations.Matrix.Matrix matrix92 = com.operations.Matrix.MatrixOperations.subtract(matrix60, matrix89);
        com.operations.Matrix.Matrix matrix94 = com.operations.Matrix.MatrixOperations.scalarMultiply(matrix92, (double) 0.0f);
        double[][] doubleArray95 = matrix94.getData();
        // The following exception was thrown during execution in test generation
        try {
            com.operations.Matrix.Matrix matrix96 = com.operations.Matrix.MatrixOperations.subtract(matrix11, matrix94);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Matrices must have the same dimensions for subtraction.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(matrix2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 2 + "'", int3 == 2);
        org.junit.Assert.assertNotNull(matrix5);
        org.junit.Assert.assertNotNull(matrix8);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(matrix16);
        org.junit.Assert.assertNotNull(matrix19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 2 + "'", int20 == 2);
        org.junit.Assert.assertNotNull(matrix22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertArrayEquals(doubleArray27, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertArrayEquals(doubleArray30, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertArrayEquals(doubleArray37, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertArrayEquals(doubleArray40, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 2 + "'", int43 == 2);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 2 + "'", int44 == 2);
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertArrayEquals(doubleArray48, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertArrayEquals(doubleArray51, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNotNull(matrix56);
        org.junit.Assert.assertNotNull(matrix58);
        org.junit.Assert.assertNotNull(matrix59);
        org.junit.Assert.assertNotNull(matrix60);
        org.junit.Assert.assertNotNull(matrix61);
        org.junit.Assert.assertNotNull(matrix63);
        org.junit.Assert.assertNotNull(doubleArray66);
        org.junit.Assert.assertArrayEquals(doubleArray66, new double[] { 137.90576492663388d, (-1.0d) }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray67);
        org.junit.Assert.assertArrayEquals(doubleArray67, new double[] { (-24.931892522286255d), (-135.63701830716116d) }, 1.0E-15);
        org.junit.Assert.assertNotNull(matrix70);
        org.junit.Assert.assertNotNull(doubleArray73);
        org.junit.Assert.assertArrayEquals(doubleArray73, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray76);
        org.junit.Assert.assertArrayEquals(doubleArray76, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray77);
        org.junit.Assert.assertTrue("'" + int79 + "' != '" + 2 + "'", int79 == 2);
        org.junit.Assert.assertTrue("'" + int80 + "' != '" + 2 + "'", int80 == 2);
        org.junit.Assert.assertTrue("'" + int81 + "' != '" + 2 + "'", int81 == 2);
        org.junit.Assert.assertNotNull(matrixArray82);
        org.junit.Assert.assertNotNull(matrix83);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false);
        org.junit.Assert.assertNotNull(doubleArray86);
        org.junit.Assert.assertNotNull(matrix89);
        org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + true + "'", boolean91 == true);
        org.junit.Assert.assertNotNull(matrix92);
        org.junit.Assert.assertNotNull(matrix94);
        org.junit.Assert.assertNotNull(doubleArray95);
    }

    @Test
    public void test4761() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4761");
        com.operations.Matrix.Matrix matrix1 = com.operations.Matrix.MatrixTransformations.rotate2D(100.0d);
        int int2 = matrix1.getCols();
        matrix1.print();
        com.operations.Matrix.Matrix matrix5 = com.operations.Matrix.MatrixTransformations.rotate2D(100.0d);
        int int6 = matrix5.getRows();
        com.operations.Matrix.Matrix matrix7 = com.operations.Matrix.MatrixOperations.multiply(matrix1, matrix5);
        double double8 = com.operations.Matrix.MatrixUtils.frobeniusNorm(matrix1);
        // The following exception was thrown during execution in test generation
        try {
            matrix1.setValue(10, (int) 'a', 30.0d);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: Index 10 out of bounds for length 2");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(matrix1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 2 + "'", int2 == 2);
        org.junit.Assert.assertNotNull(matrix5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 2 + "'", int6 == 2);
        org.junit.Assert.assertNotNull(matrix7);
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 1.414213562373095d + "'", double8 == 1.414213562373095d);
    }

    @Test
    public void test4762() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4762");
        com.operations.Matrix.Matrix matrix2 = com.operations.Matrix.MatrixTransformations.scale2D(14.142135623730951d, 10.048375307003264d);
        org.junit.Assert.assertNotNull(matrix2);
    }

    @Test
    public void test4763() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4763");
        double[] doubleArray2 = new double[] { 10, 'a' };
        double[] doubleArray5 = new double[] { 10, 'a' };
        double[][] doubleArray6 = new double[][] { doubleArray2, doubleArray5 };
        com.operations.Matrix.Matrix matrix7 = new com.operations.Matrix.Matrix(doubleArray6);
        com.operations.Matrix.Matrix matrix8 = new com.operations.Matrix.Matrix(doubleArray6);
        com.operations.Matrix.Matrix[] matrixArray9 = com.operations.Matrix.MatrixDecompositions.luDecomposition(matrix8);
        com.operations.Matrix.Matrix matrix10 = com.operations.Matrix.MatrixDecompositions.choleskyDecomposition(matrix8);
        com.operations.Matrix.Matrix matrix11 = com.operations.Matrix.MatrixDecompositions.choleskyDecomposition(matrix8);
        com.operations.Matrix.Matrix[] matrixArray12 = com.operations.Matrix.MatrixDecompositions.luDecomposition(matrix11);
        com.operations.Matrix.Matrix matrix13 = com.operations.Matrix.MatrixDecompositions.choleskyDecomposition(matrix11);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertArrayEquals(doubleArray2, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertArrayEquals(doubleArray5, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertNotNull(matrixArray9);
        org.junit.Assert.assertNotNull(matrix10);
        org.junit.Assert.assertNotNull(matrix11);
        org.junit.Assert.assertNotNull(matrixArray12);
        org.junit.Assert.assertNotNull(matrix13);
    }

    @Test
    public void test4764() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4764");
        // The following exception was thrown during execution in test generation
        try {
            com.operations.Matrix.Matrix matrix2 = new com.operations.Matrix.Matrix((int) (short) -1, (int) (short) 10);
            org.junit.Assert.fail("Expected exception of type java.lang.NegativeArraySizeException; message: -1");
        } catch (java.lang.NegativeArraySizeException e) {
            // Expected exception.
        }
    }

    @Test
    public void test4765() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4765");
        com.operations.Matrix.Matrix matrix2 = com.operations.Matrix.MatrixTransformations.project2D(640031.99920004d, 391.8840992892044d);
        double double5 = matrix2.getValue(1, (int) (short) 1);
        org.junit.Assert.assertNotNull(matrix2);
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 391.8840992892044d + "'", double5 == 391.8840992892044d);
    }

    @Test
    public void test4766() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4766");
        com.operations.Matrix.Matrix matrix2 = com.operations.Matrix.MatrixTransformations.scale2D((double) (byte) 10, (double) 10);
        double[] doubleArray5 = new double[] { 10, 'a' };
        double[] doubleArray8 = new double[] { 10, 'a' };
        double[][] doubleArray9 = new double[][] { doubleArray5, doubleArray8 };
        com.operations.Matrix.Matrix matrix10 = new com.operations.Matrix.Matrix(doubleArray9);
        com.operations.Matrix.Matrix matrix11 = new com.operations.Matrix.Matrix(doubleArray9);
        boolean boolean12 = com.operations.Matrix.MatrixUtils.isSquare(matrix11);
        double[] doubleArray15 = new double[] { 10, 'a' };
        double[] doubleArray18 = new double[] { 10, 'a' };
        double[][] doubleArray19 = new double[][] { doubleArray15, doubleArray18 };
        com.operations.Matrix.Matrix matrix20 = new com.operations.Matrix.Matrix(doubleArray19);
        int int21 = matrix20.getCols();
        int int22 = matrix20.getCols();
        matrix20.print();
        double[] doubleArray26 = new double[] { 10, 'a' };
        double[] doubleArray29 = new double[] { 10, 'a' };
        double[][] doubleArray30 = new double[][] { doubleArray26, doubleArray29 };
        com.operations.Matrix.Matrix matrix31 = new com.operations.Matrix.Matrix(doubleArray30);
        boolean boolean33 = com.operations.Matrix.MatrixUtils.compare(matrix20, matrix31, (double) (-1));
        com.operations.Matrix.Matrix matrix34 = com.operations.Matrix.MatrixOperations.subtract(matrix11, matrix31);
        com.operations.Matrix.Matrix[] matrixArray35 = com.operations.Matrix.MatrixDecompositions.luDecomposition(matrix34);
        double[][] doubleArray36 = matrix34.getData();
        com.operations.Matrix.Matrix matrix37 = new com.operations.Matrix.Matrix(doubleArray36);
        com.operations.Matrix.Matrix matrix38 = com.operations.Matrix.MatrixOperations.multiply(matrix2, matrix37);
        com.operations.Matrix.Matrix matrix41 = com.operations.Matrix.MatrixTransformations.scale2D(1.414213562373095d, (double) 1);
        com.operations.Matrix.Matrix matrix42 = com.operations.Matrix.MatrixOperations.add(matrix38, matrix41);
        int int43 = matrix41.getRows();
        org.junit.Assert.assertNotNull(matrix2);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertArrayEquals(doubleArray5, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertArrayEquals(doubleArray8, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertArrayEquals(doubleArray15, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertArrayEquals(doubleArray18, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 2 + "'", int21 == 2);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 2 + "'", int22 == 2);
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertArrayEquals(doubleArray26, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertArrayEquals(doubleArray29, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(matrix34);
        org.junit.Assert.assertNotNull(matrixArray35);
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertNotNull(matrix38);
        org.junit.Assert.assertNotNull(matrix41);
        org.junit.Assert.assertNotNull(matrix42);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 2 + "'", int43 == 2);
    }

    @Test
    public void test4767() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4767");
        com.operations.Matrix.Matrix matrix1 = com.operations.Matrix.MatrixTransformations.rotate2D((double) 1.0f);
        com.operations.Matrix.Matrix matrix4 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0L, (double) (byte) 10);
        int int5 = matrix4.getRows();
        com.operations.Matrix.Matrix matrix7 = com.operations.Matrix.MatrixOperations.scalarMultiply(matrix4, (double) 2);
        double double8 = com.operations.Matrix.MatrixUtils.frobeniusNorm(matrix4);
        com.operations.Matrix.Matrix matrix11 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0L, (double) (byte) 10);
        int int12 = matrix11.getRows();
        com.operations.Matrix.Matrix matrix14 = com.operations.Matrix.MatrixOperations.scalarMultiply(matrix11, (double) 2);
        com.operations.Matrix.Matrix matrix15 = com.operations.Matrix.MatrixOperations.subtract(matrix4, matrix14);
        com.operations.Matrix.Matrix matrix16 = com.operations.Matrix.MatrixOperations.add(matrix1, matrix14);
        boolean boolean17 = com.operations.Matrix.MatrixUtils.isSymmetric(matrix14);
        java.lang.Class<?> wildcardClass18 = matrix14.getClass();
        org.junit.Assert.assertNotNull(matrix1);
        org.junit.Assert.assertNotNull(matrix4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 2 + "'", int5 == 2);
        org.junit.Assert.assertNotNull(matrix7);
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 10.0d + "'", double8 == 10.0d);
        org.junit.Assert.assertNotNull(matrix11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 2 + "'", int12 == 2);
        org.junit.Assert.assertNotNull(matrix14);
        org.junit.Assert.assertNotNull(matrix15);
        org.junit.Assert.assertNotNull(matrix16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(wildcardClass18);
    }

    @Test
    public void test4768() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4768");
        com.operations.Matrix.Matrix matrix2 = com.operations.Matrix.MatrixTransformations.project2D((double) 1, 693.7418269995209d);
        com.operations.Matrix.Matrix matrix3 = com.operations.Matrix.MatrixDecompositions.choleskyDecomposition(matrix2);
        matrix3.print();
        org.junit.Assert.assertNotNull(matrix2);
        org.junit.Assert.assertNotNull(matrix3);
    }

    @Test
    public void test4769() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4769");
        com.operations.Matrix.Matrix matrix1 = com.operations.Matrix.MatrixTransformations.rotate2D((double) (short) 100);
        double[] doubleArray4 = new double[] { 137.90576492663388d, (byte) -1 };
        double[] doubleArray5 = com.operations.Matrix.MatrixSolver.solveGaussian(matrix1, doubleArray4);
        com.operations.Matrix.Matrix matrix8 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0L, (double) (byte) 10);
        double[] doubleArray11 = new double[] { 10, 'a' };
        double[] doubleArray14 = new double[] { 10, 'a' };
        double[][] doubleArray15 = new double[][] { doubleArray11, doubleArray14 };
        com.operations.Matrix.Matrix matrix16 = new com.operations.Matrix.Matrix(doubleArray15);
        int int17 = matrix16.getCols();
        int int18 = matrix16.getCols();
        int int19 = matrix16.getCols();
        com.operations.Matrix.Matrix[] matrixArray20 = com.operations.Matrix.MatrixDecompositions.luDecomposition(matrix16);
        com.operations.Matrix.Matrix matrix21 = com.operations.Matrix.MatrixOperations.multiply(matrix8, matrix16);
        boolean boolean23 = com.operations.Matrix.MatrixUtils.compare(matrix1, matrix8, (double) (-1L));
        boolean boolean24 = com.operations.Matrix.MatrixUtils.isSymmetric(matrix1);
        int int25 = matrix1.getCols();
        com.operations.Matrix.Matrix[] matrixArray26 = com.operations.Matrix.MatrixDecompositions.luDecomposition(matrix1);
        double double27 = com.operations.Matrix.MatrixUtils.frobeniusNorm(matrix1);
        double double28 = com.operations.Matrix.MatrixUtils.frobeniusNorm(matrix1);
        double[][] doubleArray29 = matrix1.getData();
        com.operations.Matrix.Matrix matrix30 = new com.operations.Matrix.Matrix(doubleArray29);
        double[] doubleArray33 = new double[] { 10, 'a' };
        double[] doubleArray36 = new double[] { 10, 'a' };
        double[][] doubleArray37 = new double[][] { doubleArray33, doubleArray36 };
        com.operations.Matrix.Matrix matrix38 = new com.operations.Matrix.Matrix(doubleArray37);
        int int39 = matrix38.getCols();
        com.operations.Matrix.Matrix matrix40 = com.operations.Matrix.MatrixOperations.subtract(matrix30, matrix38);
        matrix30.print();
        org.junit.Assert.assertNotNull(matrix1);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertArrayEquals(doubleArray4, new double[] { 137.90576492663388d, (-1.0d) }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertArrayEquals(doubleArray5, new double[] { (-24.931892522286255d), (-135.63701830716116d) }, 1.0E-15);
        org.junit.Assert.assertNotNull(matrix8);
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertArrayEquals(doubleArray11, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertArrayEquals(doubleArray14, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 2 + "'", int17 == 2);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 2 + "'", int18 == 2);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 2 + "'", int19 == 2);
        org.junit.Assert.assertNotNull(matrixArray20);
        org.junit.Assert.assertNotNull(matrix21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 2 + "'", int25 == 2);
        org.junit.Assert.assertNotNull(matrixArray26);
        org.junit.Assert.assertTrue("'" + double27 + "' != '" + 1.414213562373095d + "'", double27 == 1.414213562373095d);
        org.junit.Assert.assertTrue("'" + double28 + "' != '" + 1.414213562373095d + "'", double28 == 1.414213562373095d);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertArrayEquals(doubleArray33, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertArrayEquals(doubleArray36, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 2 + "'", int39 == 2);
        org.junit.Assert.assertNotNull(matrix40);
    }

    @Test
    public void test4770() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4770");
        double[] doubleArray2 = new double[] { 10, 'a' };
        double[] doubleArray5 = new double[] { 10, 'a' };
        double[][] doubleArray6 = new double[][] { doubleArray2, doubleArray5 };
        com.operations.Matrix.Matrix matrix7 = new com.operations.Matrix.Matrix(doubleArray6);
        com.operations.Matrix.Matrix matrix8 = new com.operations.Matrix.Matrix(doubleArray6);
        com.operations.Matrix.Matrix[] matrixArray9 = com.operations.Matrix.MatrixDecompositions.luDecomposition(matrix8);
        com.operations.Matrix.Matrix matrix12 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0, (double) 100L);
        com.operations.Matrix.Matrix matrix13 = com.operations.Matrix.MatrixOperations.subtract(matrix8, matrix12);
        double[][] doubleArray14 = matrix13.getData();
        com.operations.Matrix.Matrix matrix15 = new com.operations.Matrix.Matrix(doubleArray14);
        com.operations.Matrix.Matrix matrix16 = new com.operations.Matrix.Matrix(doubleArray14);
        int int17 = matrix16.getCols();
        com.operations.Matrix.Matrix matrix20 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0L, (double) (byte) 10);
        int int21 = matrix20.getRows();
        com.operations.Matrix.Matrix matrix24 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0L, (double) (byte) 10);
        int int25 = matrix24.getRows();
        com.operations.Matrix.Matrix matrix27 = com.operations.Matrix.MatrixOperations.scalarMultiply(matrix24, (double) 2);
        com.operations.Matrix.Matrix matrix28 = com.operations.Matrix.MatrixOperations.subtract(matrix20, matrix24);
        com.operations.Matrix.Matrix matrix31 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0L, (double) (byte) 10);
        int int32 = matrix31.getRows();
        com.operations.Matrix.Matrix matrix38 = com.operations.Matrix.MatrixUtils.generateRandomMatrix(100, (int) (byte) 1, (int) '#', (int) '#', 1L);
        boolean boolean40 = com.operations.Matrix.MatrixUtils.compare(matrix31, matrix38, (double) 1.0f);
        com.operations.Matrix.Matrix matrix42 = com.operations.Matrix.MatrixOperations.scalarMultiply(matrix31, (double) 1L);
        boolean boolean44 = com.operations.Matrix.MatrixUtils.compare(matrix28, matrix42, 0.0d);
        int int45 = matrix42.getCols();
        com.operations.Matrix.Matrix matrix46 = com.operations.Matrix.MatrixOperations.transpose(matrix42);
        com.operations.Matrix.Matrix matrix47 = com.operations.Matrix.MatrixOperations.subtract(matrix16, matrix42);
        com.operations.Matrix.Matrix matrix50 = com.operations.Matrix.MatrixTransformations.scale2D((double) (-1L), (double) '4');
        com.operations.Matrix.Matrix matrix51 = com.operations.Matrix.MatrixOperations.transpose(matrix50);
        double[] doubleArray54 = new double[] { 10, 'a' };
        double[] doubleArray57 = new double[] { 10, 'a' };
        double[][] doubleArray58 = new double[][] { doubleArray54, doubleArray57 };
        com.operations.Matrix.Matrix matrix59 = new com.operations.Matrix.Matrix(doubleArray58);
        com.operations.Matrix.Matrix matrix60 = new com.operations.Matrix.Matrix(doubleArray58);
        com.operations.Matrix.Matrix matrix62 = com.operations.Matrix.MatrixTransformations.rotate2D((double) (short) 100);
        double[] doubleArray65 = new double[] { 137.90576492663388d, (byte) -1 };
        double[] doubleArray66 = com.operations.Matrix.MatrixSolver.solveGaussian(matrix62, doubleArray65);
        com.operations.Matrix.Matrix matrix67 = com.operations.Matrix.MatrixOperations.add(matrix60, matrix62);
        com.operations.Matrix.Matrix matrix68 = com.operations.Matrix.MatrixOperations.transpose(matrix62);
        com.operations.Matrix.Matrix matrix69 = com.operations.Matrix.MatrixOperations.multiply(matrix51, matrix62);
        com.operations.Matrix.Matrix matrix70 = com.operations.Matrix.MatrixOperations.add(matrix16, matrix69);
        double[][] doubleArray71 = matrix69.getData();
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertArrayEquals(doubleArray2, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertArrayEquals(doubleArray5, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertNotNull(matrixArray9);
        org.junit.Assert.assertNotNull(matrix12);
        org.junit.Assert.assertNotNull(matrix13);
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 2 + "'", int17 == 2);
        org.junit.Assert.assertNotNull(matrix20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 2 + "'", int21 == 2);
        org.junit.Assert.assertNotNull(matrix24);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 2 + "'", int25 == 2);
        org.junit.Assert.assertNotNull(matrix27);
        org.junit.Assert.assertNotNull(matrix28);
        org.junit.Assert.assertNotNull(matrix31);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 2 + "'", int32 == 2);
        org.junit.Assert.assertNotNull(matrix38);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(matrix42);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 2 + "'", int45 == 2);
        org.junit.Assert.assertNotNull(matrix46);
        org.junit.Assert.assertNotNull(matrix47);
        org.junit.Assert.assertNotNull(matrix50);
        org.junit.Assert.assertNotNull(matrix51);
        org.junit.Assert.assertNotNull(doubleArray54);
        org.junit.Assert.assertArrayEquals(doubleArray54, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray57);
        org.junit.Assert.assertArrayEquals(doubleArray57, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray58);
        org.junit.Assert.assertNotNull(matrix62);
        org.junit.Assert.assertNotNull(doubleArray65);
        org.junit.Assert.assertArrayEquals(doubleArray65, new double[] { 137.90576492663388d, (-1.0d) }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray66);
        org.junit.Assert.assertArrayEquals(doubleArray66, new double[] { (-24.931892522286255d), (-135.63701830716116d) }, 1.0E-15);
        org.junit.Assert.assertNotNull(matrix67);
        org.junit.Assert.assertNotNull(matrix68);
        org.junit.Assert.assertNotNull(matrix69);
        org.junit.Assert.assertNotNull(matrix70);
        org.junit.Assert.assertNotNull(doubleArray71);
    }

    @Test
    public void test4771() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4771");
        com.operations.Matrix.Matrix matrix2 = com.operations.Matrix.MatrixTransformations.project2D(14.142135623730951d, 146781.22563870353d);
        boolean boolean3 = com.operations.Matrix.MatrixUtils.isSquare(matrix2);
        org.junit.Assert.assertNotNull(matrix2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
    }

    @Test
    public void test4772() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4772");
        com.operations.Matrix.Matrix matrix2 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0L, (double) (byte) 10);
        int int3 = matrix2.getRows();
        com.operations.Matrix.Matrix matrix5 = com.operations.Matrix.MatrixOperations.scalarMultiply(matrix2, (double) 2);
        com.operations.Matrix.Matrix[] matrixArray6 = com.operations.Matrix.MatrixDecompositions.luDecomposition(matrix5);
        com.operations.Matrix.Matrix matrix7 = com.operations.Matrix.MatrixOperations.transpose(matrix5);
        com.operations.Matrix.Matrix matrix8 = com.operations.Matrix.MatrixOperations.transpose(matrix5);
        com.operations.Matrix.Matrix matrix10 = com.operations.Matrix.MatrixOperations.scalarMultiply(matrix5, 35.0d);
        double[][] doubleArray11 = matrix10.getData();
        org.junit.Assert.assertNotNull(matrix2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 2 + "'", int3 == 2);
        org.junit.Assert.assertNotNull(matrix5);
        org.junit.Assert.assertNotNull(matrixArray6);
        org.junit.Assert.assertNotNull(matrix7);
        org.junit.Assert.assertNotNull(matrix8);
        org.junit.Assert.assertNotNull(matrix10);
        org.junit.Assert.assertNotNull(doubleArray11);
    }

    @Test
    public void test4773() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4773");
        com.operations.Matrix.Matrix matrix1 = com.operations.Matrix.MatrixTransformations.rotate2D((double) 0.0f);
        com.operations.Matrix.Matrix matrix4 = com.operations.Matrix.MatrixTransformations.project2D(260.95643973734866d, 137.15495886388925d);
        com.operations.Matrix.Matrix matrix5 = com.operations.Matrix.MatrixOperations.multiply(matrix1, matrix4);
        org.junit.Assert.assertNotNull(matrix1);
        org.junit.Assert.assertNotNull(matrix4);
        org.junit.Assert.assertNotNull(matrix5);
    }

    @Test
    public void test4774() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4774");
        com.operations.Matrix.Matrix matrix2 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0L, (double) (byte) 10);
        double[] doubleArray5 = new double[] { 10, 'a' };
        double[] doubleArray8 = new double[] { 10, 'a' };
        double[][] doubleArray9 = new double[][] { doubleArray5, doubleArray8 };
        com.operations.Matrix.Matrix matrix10 = new com.operations.Matrix.Matrix(doubleArray9);
        int int11 = matrix10.getCols();
        int int12 = matrix10.getCols();
        int int13 = matrix10.getCols();
        com.operations.Matrix.Matrix[] matrixArray14 = com.operations.Matrix.MatrixDecompositions.luDecomposition(matrix10);
        com.operations.Matrix.Matrix matrix15 = com.operations.Matrix.MatrixOperations.multiply(matrix2, matrix10);
        com.operations.Matrix.Matrix matrix17 = com.operations.Matrix.MatrixTransformations.rotate2D((double) (short) 100);
        boolean boolean19 = com.operations.Matrix.MatrixUtils.compare(matrix10, matrix17, (double) (byte) 0);
        double[] doubleArray22 = new double[] { 10, 'a' };
        double[] doubleArray25 = new double[] { 10, 'a' };
        double[][] doubleArray26 = new double[][] { doubleArray22, doubleArray25 };
        com.operations.Matrix.Matrix matrix27 = new com.operations.Matrix.Matrix(doubleArray26);
        com.operations.Matrix.Matrix matrix28 = com.operations.Matrix.MatrixOperations.multiply(matrix10, matrix27);
        com.operations.Matrix.Matrix matrix30 = com.operations.Matrix.MatrixOperations.scalarMultiply(matrix10, 364.0054944640259d);
        com.operations.Matrix.Matrix matrix33 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0L, (double) (byte) 10);
        int int34 = matrix33.getRows();
        com.operations.Matrix.Matrix matrix36 = com.operations.Matrix.MatrixOperations.scalarMultiply(matrix33, (double) 2);
        matrix33.print();
        matrix33.print();
        com.operations.Matrix.Matrix matrix39 = com.operations.Matrix.MatrixOperations.multiply(matrix10, matrix33);
        com.operations.Matrix.Matrix matrix40 = com.operations.Matrix.MatrixOperations.transpose(matrix33);
        int int41 = matrix33.getRows();
        double[] doubleArray44 = new double[] { 10, 'a' };
        double[] doubleArray47 = new double[] { 10, 'a' };
        double[][] doubleArray48 = new double[][] { doubleArray44, doubleArray47 };
        com.operations.Matrix.Matrix matrix49 = new com.operations.Matrix.Matrix(doubleArray48);
        com.operations.Matrix.Matrix matrix50 = new com.operations.Matrix.Matrix(doubleArray48);
        com.operations.Matrix.Matrix matrix52 = com.operations.Matrix.MatrixTransformations.rotate2D((double) (short) 100);
        double[] doubleArray55 = new double[] { 137.90576492663388d, (byte) -1 };
        double[] doubleArray56 = com.operations.Matrix.MatrixSolver.solveGaussian(matrix52, doubleArray55);
        com.operations.Matrix.Matrix matrix57 = com.operations.Matrix.MatrixOperations.add(matrix50, matrix52);
        com.operations.Matrix.Matrix matrix58 = com.operations.Matrix.MatrixOperations.transpose(matrix52);
        double double59 = com.operations.Matrix.MatrixUtils.frobeniusNorm(matrix58);
        double[][] doubleArray60 = matrix58.getData();
        com.operations.Matrix.Matrix matrix61 = new com.operations.Matrix.Matrix(doubleArray60);
        com.operations.Matrix.Matrix matrix62 = com.operations.Matrix.MatrixOperations.multiply(matrix33, matrix61);
        com.operations.Matrix.Matrix matrix65 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0L, (double) (byte) 10);
        int int66 = matrix65.getRows();
        com.operations.Matrix.Matrix matrix72 = com.operations.Matrix.MatrixUtils.generateRandomMatrix(100, (int) (byte) 1, (int) '#', (int) '#', 1L);
        boolean boolean74 = com.operations.Matrix.MatrixUtils.compare(matrix65, matrix72, (double) 1.0f);
        double[][] doubleArray75 = matrix72.getData();
        com.operations.Matrix.Matrix matrix76 = new com.operations.Matrix.Matrix(doubleArray75);
        boolean boolean77 = com.operations.Matrix.MatrixUtils.isSquare(matrix76);
        // The following exception was thrown during execution in test generation
        try {
            com.operations.Matrix.Matrix matrix78 = com.operations.Matrix.MatrixOperations.multiply(matrix33, matrix76);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Matrix A's columns must match Matrix B's rows for multiplication.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(matrix2);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertArrayEquals(doubleArray5, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertArrayEquals(doubleArray8, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 2 + "'", int11 == 2);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 2 + "'", int12 == 2);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 2 + "'", int13 == 2);
        org.junit.Assert.assertNotNull(matrixArray14);
        org.junit.Assert.assertNotNull(matrix15);
        org.junit.Assert.assertNotNull(matrix17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertArrayEquals(doubleArray22, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertArrayEquals(doubleArray25, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertNotNull(matrix28);
        org.junit.Assert.assertNotNull(matrix30);
        org.junit.Assert.assertNotNull(matrix33);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 2 + "'", int34 == 2);
        org.junit.Assert.assertNotNull(matrix36);
        org.junit.Assert.assertNotNull(matrix39);
        org.junit.Assert.assertNotNull(matrix40);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 2 + "'", int41 == 2);
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertArrayEquals(doubleArray44, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertArrayEquals(doubleArray47, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertNotNull(matrix52);
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertArrayEquals(doubleArray55, new double[] { 137.90576492663388d, (-1.0d) }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray56);
        org.junit.Assert.assertArrayEquals(doubleArray56, new double[] { (-24.931892522286255d), (-135.63701830716116d) }, 1.0E-15);
        org.junit.Assert.assertNotNull(matrix57);
        org.junit.Assert.assertNotNull(matrix58);
        org.junit.Assert.assertTrue("'" + double59 + "' != '" + 1.414213562373095d + "'", double59 == 1.414213562373095d);
        org.junit.Assert.assertNotNull(doubleArray60);
        org.junit.Assert.assertNotNull(matrix62);
        org.junit.Assert.assertNotNull(matrix65);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 2 + "'", int66 == 2);
        org.junit.Assert.assertNotNull(matrix72);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertNotNull(doubleArray75);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
    }

    @Test
    public void test4775() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4775");
        com.operations.Matrix.Matrix matrix5 = com.operations.Matrix.MatrixUtils.generateRandomMatrix((int) ' ', (int) '#', (int) (byte) 10, (int) (short) 0, (long) (short) 1);
        boolean boolean6 = com.operations.Matrix.MatrixUtils.isSymmetric(matrix5);
        com.operations.Matrix.Matrix matrix8 = com.operations.Matrix.MatrixOperations.scalarMultiply(matrix5, 100.00499987500625d);
        boolean boolean9 = com.operations.Matrix.MatrixUtils.isSquare(matrix8);
        // The following exception was thrown during execution in test generation
        try {
            com.operations.Matrix.Matrix matrix10 = com.operations.Matrix.MatrixDecompositions.choleskyDecomposition(matrix8);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Matrix must be square for Cholesky decomposition.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(matrix5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(matrix8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
    }

    @Test
    public void test4776() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4776");
        com.operations.Matrix.Matrix matrix2 = com.operations.Matrix.MatrixTransformations.project2D(137.90576492663388d, (double) (byte) 0);
        com.operations.Matrix.Matrix matrix3 = com.operations.Matrix.MatrixOperations.transpose(matrix2);
        double double4 = com.operations.Matrix.MatrixUtils.frobeniusNorm(matrix3);
        org.junit.Assert.assertNotNull(matrix2);
        org.junit.Assert.assertNotNull(matrix3);
        org.junit.Assert.assertTrue("'" + double4 + "' != '" + 137.90576492663388d + "'", double4 == 137.90576492663388d);
    }

    @Test
    public void test4777() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4777");
        com.operations.Matrix.Matrix matrix2 = com.operations.Matrix.MatrixTransformations.scale2D(10.04987562112089d, 100.0d);
        org.junit.Assert.assertNotNull(matrix2);
    }

    @Test
    public void test4778() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4778");
        com.operations.Matrix.Matrix matrix2 = com.operations.Matrix.MatrixTransformations.scale2D(1.414213562373095d, 36.40054944640259d);
        com.operations.Matrix.Matrix matrix5 = com.operations.Matrix.MatrixTransformations.project2D(0.0d, (double) (-1));
        boolean boolean6 = com.operations.Matrix.MatrixUtils.isSquare(matrix5);
        com.operations.Matrix.Matrix matrix7 = com.operations.Matrix.MatrixOperations.subtract(matrix2, matrix5);
        com.operations.Matrix.Matrix matrix9 = com.operations.Matrix.MatrixOperations.scalarMultiply(matrix2, 99.83621769912266d);
        int int10 = matrix9.getCols();
        org.junit.Assert.assertNotNull(matrix2);
        org.junit.Assert.assertNotNull(matrix5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(matrix7);
        org.junit.Assert.assertNotNull(matrix9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 2 + "'", int10 == 2);
    }

    @Test
    public void test4779() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4779");
        com.operations.Matrix.Matrix matrix2 = com.operations.Matrix.MatrixTransformations.scale2D((double) (byte) 10, (double) 10);
        com.operations.Matrix.Matrix matrix5 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0L, (double) (byte) 10);
        int int6 = matrix5.getRows();
        com.operations.Matrix.Matrix matrix8 = com.operations.Matrix.MatrixOperations.scalarMultiply(matrix5, (double) 2);
        matrix5.print();
        com.operations.Matrix.Matrix matrix11 = com.operations.Matrix.MatrixOperations.scalarMultiply(matrix5, 100.00499987500625d);
        int int12 = matrix11.getRows();
        com.operations.Matrix.Matrix matrix13 = com.operations.Matrix.MatrixOperations.add(matrix2, matrix11);
        matrix13.print();
        org.junit.Assert.assertNotNull(matrix2);
        org.junit.Assert.assertNotNull(matrix5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 2 + "'", int6 == 2);
        org.junit.Assert.assertNotNull(matrix8);
        org.junit.Assert.assertNotNull(matrix11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 2 + "'", int12 == 2);
        org.junit.Assert.assertNotNull(matrix13);
    }

    @Test
    public void test4780() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4780");
        com.operations.Matrix.Matrix matrix2 = new com.operations.Matrix.Matrix((int) (short) 100, (int) (byte) 100);
        com.operations.Matrix.Matrix matrix4 = com.operations.Matrix.MatrixTransformations.rotate2D((double) (byte) 10);
        com.operations.Matrix.Matrix matrix7 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0L, (double) (byte) 10);
        int int8 = matrix7.getRows();
        com.operations.Matrix.Matrix matrix14 = com.operations.Matrix.MatrixUtils.generateRandomMatrix(100, (int) (byte) 1, (int) '#', (int) '#', 1L);
        boolean boolean16 = com.operations.Matrix.MatrixUtils.compare(matrix7, matrix14, (double) 1.0f);
        com.operations.Matrix.Matrix matrix18 = com.operations.Matrix.MatrixOperations.scalarMultiply(matrix7, (double) 1L);
        matrix7.print();
        com.operations.Matrix.Matrix[] matrixArray20 = com.operations.Matrix.MatrixDecompositions.luDecomposition(matrix7);
        double[] doubleArray23 = new double[] { 10, 'a' };
        double[] doubleArray26 = new double[] { 10, 'a' };
        double[][] doubleArray27 = new double[][] { doubleArray23, doubleArray26 };
        com.operations.Matrix.Matrix matrix28 = new com.operations.Matrix.Matrix(doubleArray27);
        com.operations.Matrix.Matrix matrix29 = new com.operations.Matrix.Matrix(doubleArray27);
        com.operations.Matrix.Matrix[] matrixArray30 = com.operations.Matrix.MatrixDecompositions.luDecomposition(matrix29);
        com.operations.Matrix.Matrix matrix33 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0, (double) 100L);
        com.operations.Matrix.Matrix matrix34 = com.operations.Matrix.MatrixOperations.subtract(matrix29, matrix33);
        double[][] doubleArray35 = matrix34.getData();
        com.operations.Matrix.Matrix matrix36 = new com.operations.Matrix.Matrix(doubleArray35);
        com.operations.Matrix.Matrix matrix37 = new com.operations.Matrix.Matrix(doubleArray35);
        boolean boolean39 = com.operations.Matrix.MatrixUtils.compare(matrix7, matrix37, (double) 10.0f);
        double double40 = com.operations.Matrix.MatrixUtils.frobeniusNorm(matrix7);
        com.operations.Matrix.Matrix matrix41 = com.operations.Matrix.MatrixOperations.subtract(matrix4, matrix7);
        boolean boolean43 = com.operations.Matrix.MatrixUtils.compare(matrix2, matrix7, 14.142135623730951d);
        com.operations.Matrix.Matrix matrix48 = com.operations.Matrix.MatrixUtils.generateRandomMatrix((int) '4', 0, 35, 35);
        com.operations.Matrix.Matrix matrix50 = com.operations.Matrix.MatrixTransformations.rotate2D(24.03204160570106d);
        boolean boolean52 = com.operations.Matrix.MatrixUtils.compare(matrix48, matrix50, (-10.34729635533386d));
        // The following exception was thrown during execution in test generation
        try {
            com.operations.Matrix.Matrix matrix53 = com.operations.Matrix.MatrixOperations.multiply(matrix2, matrix50);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Matrix A's columns must match Matrix B's rows for multiplication.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(matrix4);
        org.junit.Assert.assertNotNull(matrix7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 2 + "'", int8 == 2);
        org.junit.Assert.assertNotNull(matrix14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(matrix18);
        org.junit.Assert.assertNotNull(matrixArray20);
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertArrayEquals(doubleArray23, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertArrayEquals(doubleArray26, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertNotNull(matrixArray30);
        org.junit.Assert.assertNotNull(matrix33);
        org.junit.Assert.assertNotNull(matrix34);
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + double40 + "' != '" + 10.0d + "'", double40 == 10.0d);
        org.junit.Assert.assertNotNull(matrix41);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(matrix48);
        org.junit.Assert.assertNotNull(matrix50);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
    }

    @Test
    public void test4781() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4781");
        com.operations.Matrix.Matrix matrix2 = com.operations.Matrix.MatrixTransformations.project2D(21.023651153076518d, 14.142135623730951d);
        com.operations.Matrix.Matrix matrix5 = com.operations.Matrix.MatrixTransformations.scale2D(137.90576492663388d, 136.9141301851733d);
        com.operations.Matrix.Matrix matrix6 = com.operations.Matrix.MatrixOperations.multiply(matrix2, matrix5);
        org.junit.Assert.assertNotNull(matrix2);
        org.junit.Assert.assertNotNull(matrix5);
        org.junit.Assert.assertNotNull(matrix6);
    }

    @Test
    public void test4782() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4782");
        double[] doubleArray2 = new double[] { 10, 'a' };
        double[] doubleArray5 = new double[] { 10, 'a' };
        double[][] doubleArray6 = new double[][] { doubleArray2, doubleArray5 };
        com.operations.Matrix.Matrix matrix7 = new com.operations.Matrix.Matrix(doubleArray6);
        com.operations.Matrix.Matrix matrix8 = new com.operations.Matrix.Matrix(doubleArray6);
        com.operations.Matrix.Matrix matrix10 = com.operations.Matrix.MatrixTransformations.rotate2D((double) (short) 100);
        double[] doubleArray13 = new double[] { 137.90576492663388d, (byte) -1 };
        double[] doubleArray14 = com.operations.Matrix.MatrixSolver.solveGaussian(matrix10, doubleArray13);
        com.operations.Matrix.Matrix matrix15 = com.operations.Matrix.MatrixOperations.add(matrix8, matrix10);
        // The following exception was thrown during execution in test generation
        try {
            com.operations.Matrix.Matrix matrix16 = com.operations.Matrix.MatrixDecompositions.choleskyDecomposition(matrix10);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Matrix is not positive definite.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertArrayEquals(doubleArray2, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertArrayEquals(doubleArray5, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertNotNull(matrix10);
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertArrayEquals(doubleArray13, new double[] { 137.90576492663388d, (-1.0d) }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertArrayEquals(doubleArray14, new double[] { (-24.931892522286255d), (-135.63701830716116d) }, 1.0E-15);
        org.junit.Assert.assertNotNull(matrix15);
    }

    @Test
    public void test4783() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4783");
        com.operations.Matrix.Matrix matrix2 = com.operations.Matrix.MatrixTransformations.project2D((double) (short) -1, 10.04987562112089d);
        org.junit.Assert.assertNotNull(matrix2);
    }

    @Test
    public void test4784() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4784");
        com.operations.Matrix.Matrix matrix2 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0L, (double) (byte) 10);
        double[] doubleArray5 = new double[] { 10, 'a' };
        double[] doubleArray8 = new double[] { 10, 'a' };
        double[][] doubleArray9 = new double[][] { doubleArray5, doubleArray8 };
        com.operations.Matrix.Matrix matrix10 = new com.operations.Matrix.Matrix(doubleArray9);
        int int11 = matrix10.getCols();
        int int12 = matrix10.getCols();
        int int13 = matrix10.getCols();
        com.operations.Matrix.Matrix[] matrixArray14 = com.operations.Matrix.MatrixDecompositions.luDecomposition(matrix10);
        com.operations.Matrix.Matrix matrix15 = com.operations.Matrix.MatrixOperations.multiply(matrix2, matrix10);
        com.operations.Matrix.Matrix matrix17 = com.operations.Matrix.MatrixTransformations.rotate2D((double) (short) 100);
        boolean boolean19 = com.operations.Matrix.MatrixUtils.compare(matrix10, matrix17, (double) (byte) 0);
        double[] doubleArray22 = new double[] { 10, 'a' };
        double[] doubleArray25 = new double[] { 10, 'a' };
        double[][] doubleArray26 = new double[][] { doubleArray22, doubleArray25 };
        com.operations.Matrix.Matrix matrix27 = new com.operations.Matrix.Matrix(doubleArray26);
        com.operations.Matrix.Matrix matrix28 = new com.operations.Matrix.Matrix(doubleArray26);
        com.operations.Matrix.Matrix matrix29 = new com.operations.Matrix.Matrix(doubleArray26);
        boolean boolean31 = com.operations.Matrix.MatrixUtils.compare(matrix10, matrix29, (double) (-1));
        double double32 = com.operations.Matrix.MatrixUtils.frobeniusNorm(matrix10);
        com.operations.Matrix.Matrix matrix33 = com.operations.Matrix.MatrixDecompositions.choleskyDecomposition(matrix10);
        matrix33.print();
        com.operations.Matrix.Matrix[] matrixArray35 = com.operations.Matrix.MatrixDecompositions.luDecomposition(matrix33);
        boolean boolean36 = com.operations.Matrix.MatrixUtils.isSquare(matrix33);
        org.junit.Assert.assertNotNull(matrix2);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertArrayEquals(doubleArray5, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertArrayEquals(doubleArray8, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 2 + "'", int11 == 2);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 2 + "'", int12 == 2);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 2 + "'", int13 == 2);
        org.junit.Assert.assertNotNull(matrixArray14);
        org.junit.Assert.assertNotNull(matrix15);
        org.junit.Assert.assertNotNull(matrix17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertArrayEquals(doubleArray22, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertArrayEquals(doubleArray25, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + double32 + "' != '" + 137.90576492663388d + "'", double32 == 137.90576492663388d);
        org.junit.Assert.assertNotNull(matrix33);
        org.junit.Assert.assertNotNull(matrixArray35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
    }

    @Test
    public void test4785() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4785");
        com.operations.Matrix.Matrix matrix2 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0L, (double) (byte) 10);
        int int3 = matrix2.getRows();
        com.operations.Matrix.Matrix matrix9 = com.operations.Matrix.MatrixUtils.generateRandomMatrix(100, (int) (byte) 1, (int) '#', (int) '#', 1L);
        boolean boolean11 = com.operations.Matrix.MatrixUtils.compare(matrix2, matrix9, (double) 1.0f);
        matrix9.print();
        com.operations.Matrix.Matrix matrix13 = com.operations.Matrix.MatrixOperations.transpose(matrix9);
        matrix9.print();
        org.junit.Assert.assertNotNull(matrix2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 2 + "'", int3 == 2);
        org.junit.Assert.assertNotNull(matrix9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(matrix13);
    }

    @Test
    public void test4786() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4786");
        com.operations.Matrix.Matrix matrix4 = com.operations.Matrix.MatrixUtils.generateRandomMatrix((int) '4', (int) '#', 35, (int) (short) 100);
        org.junit.Assert.assertNotNull(matrix4);
    }

    @Test
    public void test4787() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4787");
        com.operations.Matrix.Matrix matrix2 = com.operations.Matrix.MatrixTransformations.project2D((double) 1, 364.0054944640259d);
        com.operations.Matrix.Matrix matrix4 = com.operations.Matrix.MatrixOperations.scalarMultiply(matrix2, (double) (-1));
        com.operations.Matrix.Matrix matrix5 = com.operations.Matrix.MatrixOperations.transpose(matrix2);
        double double6 = com.operations.Matrix.MatrixUtils.frobeniusNorm(matrix5);
        double double7 = com.operations.Matrix.MatrixUtils.frobeniusNorm(matrix5);
        org.junit.Assert.assertNotNull(matrix2);
        org.junit.Assert.assertNotNull(matrix4);
        org.junit.Assert.assertNotNull(matrix5);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 364.0068680670737d + "'", double6 == 364.0068680670737d);
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 364.0068680670737d + "'", double7 == 364.0068680670737d);
    }

    @Test
    public void test4788() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4788");
        com.operations.Matrix.Matrix matrix2 = com.operations.Matrix.MatrixTransformations.scale2D((double) 1L, 137.90576492663388d);
        com.operations.Matrix.Matrix matrix3 = com.operations.Matrix.MatrixOperations.transpose(matrix2);
        double double4 = com.operations.Matrix.MatrixUtils.frobeniusNorm(matrix2);
        // The following exception was thrown during execution in test generation
        try {
            double double7 = matrix2.getValue(100, (int) (byte) 1);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(matrix2);
        org.junit.Assert.assertNotNull(matrix3);
        org.junit.Assert.assertTrue("'" + double4 + "' != '" + 137.9093905432114d + "'", double4 == 137.9093905432114d);
    }

    @Test
    public void test4789() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4789");
        com.operations.Matrix.Matrix matrix2 = new com.operations.Matrix.Matrix((int) (short) 100, 35);
        com.operations.Matrix.Matrix matrix5 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0L, (double) (byte) 10);
        double[] doubleArray8 = new double[] { 10, 'a' };
        double[] doubleArray11 = new double[] { 10, 'a' };
        double[][] doubleArray12 = new double[][] { doubleArray8, doubleArray11 };
        com.operations.Matrix.Matrix matrix13 = new com.operations.Matrix.Matrix(doubleArray12);
        int int14 = matrix13.getCols();
        int int15 = matrix13.getCols();
        int int16 = matrix13.getCols();
        com.operations.Matrix.Matrix[] matrixArray17 = com.operations.Matrix.MatrixDecompositions.luDecomposition(matrix13);
        com.operations.Matrix.Matrix matrix18 = com.operations.Matrix.MatrixOperations.multiply(matrix5, matrix13);
        int int19 = matrix13.getRows();
        int int20 = matrix13.getCols();
        boolean boolean22 = com.operations.Matrix.MatrixUtils.compare(matrix2, matrix13, (double) 0.0f);
        double[][] doubleArray23 = matrix2.getData();
        com.operations.Matrix.Matrix matrix26 = com.operations.Matrix.MatrixTransformations.scale2D((double) 35, 8.603303277930165d);
        // The following exception was thrown during execution in test generation
        try {
            com.operations.Matrix.Matrix matrix27 = com.operations.Matrix.MatrixOperations.add(matrix2, matrix26);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Matrices must have the same dimensions for addition.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(matrix5);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertArrayEquals(doubleArray8, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertArrayEquals(doubleArray11, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 2 + "'", int14 == 2);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 2 + "'", int15 == 2);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 2 + "'", int16 == 2);
        org.junit.Assert.assertNotNull(matrixArray17);
        org.junit.Assert.assertNotNull(matrix18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 2 + "'", int19 == 2);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 2 + "'", int20 == 2);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertNotNull(matrix26);
    }

    @Test
    public void test4790() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4790");
        com.operations.Matrix.Matrix matrix1 = com.operations.Matrix.MatrixTransformations.rotate2D((double) 1.0f);
        com.operations.Matrix.Matrix matrix4 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0L, (double) (byte) 10);
        int int5 = matrix4.getRows();
        com.operations.Matrix.Matrix matrix7 = com.operations.Matrix.MatrixOperations.scalarMultiply(matrix4, (double) 2);
        double double8 = com.operations.Matrix.MatrixUtils.frobeniusNorm(matrix4);
        com.operations.Matrix.Matrix matrix11 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0L, (double) (byte) 10);
        int int12 = matrix11.getRows();
        com.operations.Matrix.Matrix matrix14 = com.operations.Matrix.MatrixOperations.scalarMultiply(matrix11, (double) 2);
        com.operations.Matrix.Matrix matrix15 = com.operations.Matrix.MatrixOperations.subtract(matrix4, matrix14);
        com.operations.Matrix.Matrix matrix16 = com.operations.Matrix.MatrixOperations.add(matrix1, matrix14);
        double[] doubleArray19 = new double[] { 10, 'a' };
        double[] doubleArray22 = new double[] { 10, 'a' };
        double[][] doubleArray23 = new double[][] { doubleArray19, doubleArray22 };
        com.operations.Matrix.Matrix matrix24 = new com.operations.Matrix.Matrix(doubleArray23);
        int int25 = matrix24.getCols();
        int int26 = matrix24.getCols();
        int int27 = matrix24.getCols();
        com.operations.Matrix.Matrix matrix33 = com.operations.Matrix.MatrixUtils.generateRandomMatrix(100, (int) (byte) 1, (int) '#', (int) '#', 1L);
        double double36 = matrix33.getValue((int) '4', 0);
        double double37 = com.operations.Matrix.MatrixUtils.frobeniusNorm(matrix33);
        boolean boolean38 = com.operations.Matrix.MatrixUtils.isSquare(matrix33);
        boolean boolean40 = com.operations.Matrix.MatrixUtils.compare(matrix24, matrix33, (double) 100L);
        com.operations.Matrix.Matrix matrix42 = com.operations.Matrix.MatrixTransformations.rotate2D((double) (short) 100);
        double[] doubleArray45 = new double[] { 137.90576492663388d, (byte) -1 };
        double[] doubleArray46 = com.operations.Matrix.MatrixSolver.solveGaussian(matrix42, doubleArray45);
        com.operations.Matrix.Matrix matrix49 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0L, (double) (byte) 10);
        double[] doubleArray52 = new double[] { 10, 'a' };
        double[] doubleArray55 = new double[] { 10, 'a' };
        double[][] doubleArray56 = new double[][] { doubleArray52, doubleArray55 };
        com.operations.Matrix.Matrix matrix57 = new com.operations.Matrix.Matrix(doubleArray56);
        int int58 = matrix57.getCols();
        int int59 = matrix57.getCols();
        int int60 = matrix57.getCols();
        com.operations.Matrix.Matrix[] matrixArray61 = com.operations.Matrix.MatrixDecompositions.luDecomposition(matrix57);
        com.operations.Matrix.Matrix matrix62 = com.operations.Matrix.MatrixOperations.multiply(matrix49, matrix57);
        boolean boolean64 = com.operations.Matrix.MatrixUtils.compare(matrix42, matrix49, (double) (-1L));
        com.operations.Matrix.Matrix matrix65 = com.operations.Matrix.MatrixOperations.subtract(matrix24, matrix49);
        com.operations.Matrix.Matrix matrix66 = com.operations.Matrix.MatrixOperations.add(matrix14, matrix49);
        boolean boolean67 = com.operations.Matrix.MatrixUtils.isSquare(matrix49);
        com.operations.Matrix.Matrix matrix69 = com.operations.Matrix.MatrixTransformations.rotate2D(1.414213562373095d);
        double[][] doubleArray70 = matrix69.getData();
        com.operations.Matrix.Matrix matrix71 = new com.operations.Matrix.Matrix(doubleArray70);
        com.operations.Matrix.Matrix matrix73 = com.operations.Matrix.MatrixOperations.scalarMultiply(matrix71, (double) (byte) 10);
        com.operations.Matrix.Matrix matrix74 = com.operations.Matrix.MatrixOperations.subtract(matrix49, matrix73);
        org.junit.Assert.assertNotNull(matrix1);
        org.junit.Assert.assertNotNull(matrix4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 2 + "'", int5 == 2);
        org.junit.Assert.assertNotNull(matrix7);
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 10.0d + "'", double8 == 10.0d);
        org.junit.Assert.assertNotNull(matrix11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 2 + "'", int12 == 2);
        org.junit.Assert.assertNotNull(matrix14);
        org.junit.Assert.assertNotNull(matrix15);
        org.junit.Assert.assertNotNull(matrix16);
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertArrayEquals(doubleArray19, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertArrayEquals(doubleArray22, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 2 + "'", int25 == 2);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 2 + "'", int26 == 2);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 2 + "'", int27 == 2);
        org.junit.Assert.assertNotNull(matrix33);
        org.junit.Assert.assertTrue("'" + double36 + "' != '" + 35.0d + "'", double36 == 35.0d);
        org.junit.Assert.assertTrue("'" + double37 + "' != '" + 350.0d + "'", double37 == 350.0d);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(matrix42);
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertArrayEquals(doubleArray45, new double[] { 137.90576492663388d, (-1.0d) }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray46);
        org.junit.Assert.assertArrayEquals(doubleArray46, new double[] { (-24.931892522286255d), (-135.63701830716116d) }, 1.0E-15);
        org.junit.Assert.assertNotNull(matrix49);
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertArrayEquals(doubleArray52, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertArrayEquals(doubleArray55, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray56);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 2 + "'", int58 == 2);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 2 + "'", int59 == 2);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 2 + "'", int60 == 2);
        org.junit.Assert.assertNotNull(matrixArray61);
        org.junit.Assert.assertNotNull(matrix62);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertNotNull(matrix65);
        org.junit.Assert.assertNotNull(matrix66);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + true + "'", boolean67 == true);
        org.junit.Assert.assertNotNull(matrix69);
        org.junit.Assert.assertNotNull(doubleArray70);
        org.junit.Assert.assertNotNull(matrix73);
        org.junit.Assert.assertNotNull(matrix74);
    }

    @Test
    public void test4791() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4791");
        double[] doubleArray2 = new double[] { 10, 'a' };
        double[] doubleArray5 = new double[] { 10, 'a' };
        double[][] doubleArray6 = new double[][] { doubleArray2, doubleArray5 };
        com.operations.Matrix.Matrix matrix7 = new com.operations.Matrix.Matrix(doubleArray6);
        com.operations.Matrix.Matrix matrix8 = new com.operations.Matrix.Matrix(doubleArray6);
        com.operations.Matrix.Matrix matrix10 = com.operations.Matrix.MatrixTransformations.rotate2D((double) (short) 100);
        double[] doubleArray13 = new double[] { 137.90576492663388d, (byte) -1 };
        double[] doubleArray14 = com.operations.Matrix.MatrixSolver.solveGaussian(matrix10, doubleArray13);
        com.operations.Matrix.Matrix matrix15 = com.operations.Matrix.MatrixOperations.add(matrix8, matrix10);
        com.operations.Matrix.Matrix matrix16 = com.operations.Matrix.MatrixOperations.transpose(matrix10);
        int int17 = matrix10.getCols();
        com.operations.Matrix.Matrix matrix20 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0L, (double) (byte) 10);
        double[] doubleArray23 = new double[] { 10, 'a' };
        double[] doubleArray26 = new double[] { 10, 'a' };
        double[][] doubleArray27 = new double[][] { doubleArray23, doubleArray26 };
        com.operations.Matrix.Matrix matrix28 = new com.operations.Matrix.Matrix(doubleArray27);
        int int29 = matrix28.getCols();
        int int30 = matrix28.getCols();
        int int31 = matrix28.getCols();
        com.operations.Matrix.Matrix[] matrixArray32 = com.operations.Matrix.MatrixDecompositions.luDecomposition(matrix28);
        com.operations.Matrix.Matrix matrix33 = com.operations.Matrix.MatrixOperations.multiply(matrix20, matrix28);
        com.operations.Matrix.Matrix matrix35 = com.operations.Matrix.MatrixTransformations.rotate2D((double) (short) 100);
        boolean boolean37 = com.operations.Matrix.MatrixUtils.compare(matrix28, matrix35, (double) (byte) 0);
        boolean boolean38 = com.operations.Matrix.MatrixUtils.isSymmetric(matrix35);
        boolean boolean39 = com.operations.Matrix.MatrixUtils.isSquare(matrix35);
        com.operations.Matrix.Matrix matrix41 = com.operations.Matrix.MatrixTransformations.rotate2D((double) (short) 100);
        boolean boolean43 = com.operations.Matrix.MatrixUtils.compare(matrix35, matrix41, (double) (byte) 100);
        matrix41.print();
        com.operations.Matrix.Matrix matrix45 = com.operations.Matrix.MatrixOperations.add(matrix10, matrix41);
        com.operations.Matrix.Matrix matrix48 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0L, (double) (byte) 10);
        int int49 = matrix48.getRows();
        com.operations.Matrix.Matrix matrix51 = com.operations.Matrix.MatrixOperations.scalarMultiply(matrix48, (double) 2);
        matrix48.print();
        com.operations.Matrix.Matrix matrix54 = com.operations.Matrix.MatrixOperations.scalarMultiply(matrix48, 100.00499987500625d);
        com.operations.Matrix.Matrix matrix57 = new com.operations.Matrix.Matrix(10, (int) (byte) 1);
        boolean boolean59 = com.operations.Matrix.MatrixUtils.compare(matrix54, matrix57, (double) 100L);
        com.operations.Matrix.Matrix matrix60 = com.operations.Matrix.MatrixOperations.add(matrix41, matrix54);
        // The following exception was thrown during execution in test generation
        try {
            double double63 = matrix41.getValue((int) (byte) 100, 32);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertArrayEquals(doubleArray2, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertArrayEquals(doubleArray5, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertNotNull(matrix10);
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertArrayEquals(doubleArray13, new double[] { 137.90576492663388d, (-1.0d) }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertArrayEquals(doubleArray14, new double[] { (-24.931892522286255d), (-135.63701830716116d) }, 1.0E-15);
        org.junit.Assert.assertNotNull(matrix15);
        org.junit.Assert.assertNotNull(matrix16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 2 + "'", int17 == 2);
        org.junit.Assert.assertNotNull(matrix20);
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertArrayEquals(doubleArray23, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertArrayEquals(doubleArray26, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 2 + "'", int29 == 2);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 2 + "'", int30 == 2);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 2 + "'", int31 == 2);
        org.junit.Assert.assertNotNull(matrixArray32);
        org.junit.Assert.assertNotNull(matrix33);
        org.junit.Assert.assertNotNull(matrix35);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertNotNull(matrix41);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertNotNull(matrix45);
        org.junit.Assert.assertNotNull(matrix48);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 2 + "'", int49 == 2);
        org.junit.Assert.assertNotNull(matrix51);
        org.junit.Assert.assertNotNull(matrix54);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNotNull(matrix60);
    }

    @Test
    public void test4792() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4792");
        com.operations.Matrix.Matrix matrix5 = com.operations.Matrix.MatrixUtils.generateRandomMatrix((int) (short) 1, 100, (int) 'a', (-1), 0L);
        org.junit.Assert.assertNotNull(matrix5);
    }

    @Test
    public void test4793() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4793");
        com.operations.Matrix.Matrix matrix2 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0L, (double) (byte) 10);
        double[] doubleArray5 = new double[] { 10, 'a' };
        double[] doubleArray8 = new double[] { 10, 'a' };
        double[][] doubleArray9 = new double[][] { doubleArray5, doubleArray8 };
        com.operations.Matrix.Matrix matrix10 = new com.operations.Matrix.Matrix(doubleArray9);
        int int11 = matrix10.getCols();
        int int12 = matrix10.getCols();
        int int13 = matrix10.getCols();
        com.operations.Matrix.Matrix[] matrixArray14 = com.operations.Matrix.MatrixDecompositions.luDecomposition(matrix10);
        com.operations.Matrix.Matrix matrix15 = com.operations.Matrix.MatrixOperations.multiply(matrix2, matrix10);
        com.operations.Matrix.Matrix matrix17 = com.operations.Matrix.MatrixTransformations.rotate2D((double) (short) 100);
        boolean boolean19 = com.operations.Matrix.MatrixUtils.compare(matrix10, matrix17, (double) (byte) 0);
        double[] doubleArray22 = new double[] { 10, 'a' };
        double[] doubleArray25 = new double[] { 10, 'a' };
        double[][] doubleArray26 = new double[][] { doubleArray22, doubleArray25 };
        com.operations.Matrix.Matrix matrix27 = new com.operations.Matrix.Matrix(doubleArray26);
        com.operations.Matrix.Matrix matrix28 = new com.operations.Matrix.Matrix(doubleArray26);
        com.operations.Matrix.Matrix matrix29 = new com.operations.Matrix.Matrix(doubleArray26);
        boolean boolean31 = com.operations.Matrix.MatrixUtils.compare(matrix10, matrix29, (double) (-1));
        double[] doubleArray34 = new double[] { 10, 'a' };
        double[] doubleArray37 = new double[] { 10, 'a' };
        double[][] doubleArray38 = new double[][] { doubleArray34, doubleArray37 };
        com.operations.Matrix.Matrix matrix39 = new com.operations.Matrix.Matrix(doubleArray38);
        com.operations.Matrix.Matrix matrix40 = new com.operations.Matrix.Matrix(doubleArray38);
        boolean boolean41 = com.operations.Matrix.MatrixUtils.isSquare(matrix40);
        com.operations.Matrix.Matrix matrix42 = com.operations.Matrix.MatrixOperations.multiply(matrix29, matrix40);
        com.operations.Matrix.Matrix matrix45 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0L, (double) (byte) 10);
        int int46 = matrix45.getRows();
        com.operations.Matrix.Matrix matrix48 = com.operations.Matrix.MatrixOperations.scalarMultiply(matrix45, (double) 2);
        matrix45.print();
        matrix45.print();
        com.operations.Matrix.Matrix matrix51 = com.operations.Matrix.MatrixOperations.multiply(matrix42, matrix45);
        double[] doubleArray54 = new double[] { 10, 'a' };
        double[] doubleArray57 = new double[] { 10, 'a' };
        double[][] doubleArray58 = new double[][] { doubleArray54, doubleArray57 };
        com.operations.Matrix.Matrix matrix59 = new com.operations.Matrix.Matrix(doubleArray58);
        int int60 = matrix59.getCols();
        int int61 = matrix59.getCols();
        matrix59.print();
        boolean boolean63 = com.operations.Matrix.MatrixUtils.isSymmetric(matrix59);
        com.operations.Matrix.Matrix matrix66 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0L, (double) (byte) 10);
        double[] doubleArray69 = new double[] { 10, 'a' };
        double[] doubleArray72 = new double[] { 10, 'a' };
        double[][] doubleArray73 = new double[][] { doubleArray69, doubleArray72 };
        com.operations.Matrix.Matrix matrix74 = new com.operations.Matrix.Matrix(doubleArray73);
        int int75 = matrix74.getCols();
        int int76 = matrix74.getCols();
        int int77 = matrix74.getCols();
        com.operations.Matrix.Matrix[] matrixArray78 = com.operations.Matrix.MatrixDecompositions.luDecomposition(matrix74);
        com.operations.Matrix.Matrix matrix79 = com.operations.Matrix.MatrixOperations.multiply(matrix66, matrix74);
        int int80 = matrix74.getRows();
        com.operations.Matrix.Matrix matrix82 = com.operations.Matrix.MatrixOperations.scalarMultiply(matrix74, (double) (-1L));
        com.operations.Matrix.Matrix matrix85 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0L, (double) (byte) 10);
        int int86 = matrix85.getRows();
        com.operations.Matrix.Matrix matrix88 = com.operations.Matrix.MatrixOperations.scalarMultiply(matrix85, (double) 2);
        com.operations.Matrix.Matrix[] matrixArray89 = com.operations.Matrix.MatrixDecompositions.luDecomposition(matrix88);
        com.operations.Matrix.Matrix matrix90 = com.operations.Matrix.MatrixOperations.transpose(matrix88);
        com.operations.Matrix.Matrix matrix91 = com.operations.Matrix.MatrixOperations.add(matrix74, matrix88);
        com.operations.Matrix.Matrix matrix92 = com.operations.Matrix.MatrixOperations.subtract(matrix59, matrix88);
        com.operations.Matrix.Matrix matrix93 = com.operations.Matrix.MatrixOperations.transpose(matrix92);
        double[][] doubleArray94 = matrix92.getData();
        com.operations.Matrix.Matrix matrix95 = com.operations.Matrix.MatrixOperations.add(matrix42, matrix92);
        org.junit.Assert.assertNotNull(matrix2);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertArrayEquals(doubleArray5, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertArrayEquals(doubleArray8, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 2 + "'", int11 == 2);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 2 + "'", int12 == 2);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 2 + "'", int13 == 2);
        org.junit.Assert.assertNotNull(matrixArray14);
        org.junit.Assert.assertNotNull(matrix15);
        org.junit.Assert.assertNotNull(matrix17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertArrayEquals(doubleArray22, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertArrayEquals(doubleArray25, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertArrayEquals(doubleArray34, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertArrayEquals(doubleArray37, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertNotNull(matrix42);
        org.junit.Assert.assertNotNull(matrix45);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 2 + "'", int46 == 2);
        org.junit.Assert.assertNotNull(matrix48);
        org.junit.Assert.assertNotNull(matrix51);
        org.junit.Assert.assertNotNull(doubleArray54);
        org.junit.Assert.assertArrayEquals(doubleArray54, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray57);
        org.junit.Assert.assertArrayEquals(doubleArray57, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray58);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 2 + "'", int60 == 2);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 2 + "'", int61 == 2);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNotNull(matrix66);
        org.junit.Assert.assertNotNull(doubleArray69);
        org.junit.Assert.assertArrayEquals(doubleArray69, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray72);
        org.junit.Assert.assertArrayEquals(doubleArray72, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray73);
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + 2 + "'", int75 == 2);
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 2 + "'", int76 == 2);
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + 2 + "'", int77 == 2);
        org.junit.Assert.assertNotNull(matrixArray78);
        org.junit.Assert.assertNotNull(matrix79);
        org.junit.Assert.assertTrue("'" + int80 + "' != '" + 2 + "'", int80 == 2);
        org.junit.Assert.assertNotNull(matrix82);
        org.junit.Assert.assertNotNull(matrix85);
        org.junit.Assert.assertTrue("'" + int86 + "' != '" + 2 + "'", int86 == 2);
        org.junit.Assert.assertNotNull(matrix88);
        org.junit.Assert.assertNotNull(matrixArray89);
        org.junit.Assert.assertNotNull(matrix90);
        org.junit.Assert.assertNotNull(matrix91);
        org.junit.Assert.assertNotNull(matrix92);
        org.junit.Assert.assertNotNull(matrix93);
        org.junit.Assert.assertNotNull(doubleArray94);
        org.junit.Assert.assertNotNull(matrix95);
    }

    @Test
    public void test4794() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4794");
        com.operations.Matrix.Matrix matrix4 = com.operations.Matrix.MatrixUtils.generateRandomMatrix((int) (byte) 100, (int) (short) 10, (int) (short) 1, (int) (short) 0);
        org.junit.Assert.assertNotNull(matrix4);
    }

    @Test
    public void test4795() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4795");
        com.operations.Matrix.Matrix matrix4 = com.operations.Matrix.MatrixUtils.generateRandomMatrix((int) (short) 1, 35, (int) (short) -1, (-1));
        org.junit.Assert.assertNotNull(matrix4);
    }

    @Test
    public void test4796() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4796");
        com.operations.Matrix.Matrix matrix2 = com.operations.Matrix.MatrixTransformations.project2D(141.9260370756543d, (double) 100);
        org.junit.Assert.assertNotNull(matrix2);
    }

    @Test
    public void test4797() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4797");
        com.operations.Matrix.Matrix matrix1 = com.operations.Matrix.MatrixTransformations.rotate2D(4412.984477652284d);
        org.junit.Assert.assertNotNull(matrix1);
    }

    @Test
    public void test4798() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4798");
        com.operations.Matrix.Matrix matrix1 = com.operations.Matrix.MatrixTransformations.rotate2D(350.0d);
        com.operations.Matrix.Matrix matrix3 = com.operations.Matrix.MatrixTransformations.rotate2D((double) (short) 100);
        double[] doubleArray6 = new double[] { 137.90576492663388d, (byte) -1 };
        double[] doubleArray7 = com.operations.Matrix.MatrixSolver.solveGaussian(matrix3, doubleArray6);
        double[] doubleArray8 = com.operations.Matrix.MatrixSolver.solveGaussian(matrix1, doubleArray7);
        com.operations.Matrix.Matrix matrix11 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0L, (double) (byte) 10);
        double[] doubleArray14 = new double[] { 10, 'a' };
        double[] doubleArray17 = new double[] { 10, 'a' };
        double[][] doubleArray18 = new double[][] { doubleArray14, doubleArray17 };
        com.operations.Matrix.Matrix matrix19 = new com.operations.Matrix.Matrix(doubleArray18);
        int int20 = matrix19.getCols();
        int int21 = matrix19.getCols();
        int int22 = matrix19.getCols();
        com.operations.Matrix.Matrix[] matrixArray23 = com.operations.Matrix.MatrixDecompositions.luDecomposition(matrix19);
        com.operations.Matrix.Matrix matrix24 = com.operations.Matrix.MatrixOperations.multiply(matrix11, matrix19);
        com.operations.Matrix.Matrix matrix26 = com.operations.Matrix.MatrixTransformations.rotate2D((double) (short) 100);
        boolean boolean28 = com.operations.Matrix.MatrixUtils.compare(matrix19, matrix26, (double) (byte) 0);
        double[] doubleArray31 = new double[] { 10, 'a' };
        double[] doubleArray34 = new double[] { 10, 'a' };
        double[][] doubleArray35 = new double[][] { doubleArray31, doubleArray34 };
        com.operations.Matrix.Matrix matrix36 = new com.operations.Matrix.Matrix(doubleArray35);
        com.operations.Matrix.Matrix matrix37 = new com.operations.Matrix.Matrix(doubleArray35);
        com.operations.Matrix.Matrix matrix38 = new com.operations.Matrix.Matrix(doubleArray35);
        boolean boolean40 = com.operations.Matrix.MatrixUtils.compare(matrix19, matrix38, (double) (-1));
        int int41 = matrix19.getRows();
        com.operations.Matrix.Matrix matrix42 = com.operations.Matrix.MatrixOperations.add(matrix1, matrix19);
        matrix42.print();
        boolean boolean44 = com.operations.Matrix.MatrixUtils.isSquare(matrix42);
        com.operations.Matrix.Matrix matrix45 = com.operations.Matrix.MatrixDecompositions.choleskyDecomposition(matrix42);
        com.operations.Matrix.Matrix matrix46 = com.operations.Matrix.MatrixDecompositions.choleskyDecomposition(matrix45);
        org.junit.Assert.assertNotNull(matrix1);
        org.junit.Assert.assertNotNull(matrix3);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertArrayEquals(doubleArray6, new double[] { 137.90576492663388d, (-1.0d) }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertArrayEquals(doubleArray7, new double[] { (-24.931892522286255d), (-135.63701830716116d) }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertArrayEquals(doubleArray8, new double[] { (-0.9999999999999858d), (-137.90576492663388d) }, 1.0E-15);
        org.junit.Assert.assertNotNull(matrix11);
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertArrayEquals(doubleArray14, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertArrayEquals(doubleArray17, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 2 + "'", int20 == 2);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 2 + "'", int21 == 2);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 2 + "'", int22 == 2);
        org.junit.Assert.assertNotNull(matrixArray23);
        org.junit.Assert.assertNotNull(matrix24);
        org.junit.Assert.assertNotNull(matrix26);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertArrayEquals(doubleArray31, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertArrayEquals(doubleArray34, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 2 + "'", int41 == 2);
        org.junit.Assert.assertNotNull(matrix42);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertNotNull(matrix45);
        org.junit.Assert.assertNotNull(matrix46);
    }

    @Test
    public void test4799() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4799");
        com.operations.Matrix.Matrix matrix1 = com.operations.Matrix.MatrixTransformations.rotate2D((double) (-1L));
        matrix1.print();
        com.operations.Matrix.Matrix matrix5 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0L, (double) (byte) 10);
        double[] doubleArray8 = new double[] { 10, 'a' };
        double[] doubleArray11 = new double[] { 10, 'a' };
        double[][] doubleArray12 = new double[][] { doubleArray8, doubleArray11 };
        com.operations.Matrix.Matrix matrix13 = new com.operations.Matrix.Matrix(doubleArray12);
        int int14 = matrix13.getCols();
        int int15 = matrix13.getCols();
        int int16 = matrix13.getCols();
        com.operations.Matrix.Matrix[] matrixArray17 = com.operations.Matrix.MatrixDecompositions.luDecomposition(matrix13);
        com.operations.Matrix.Matrix matrix18 = com.operations.Matrix.MatrixOperations.multiply(matrix5, matrix13);
        com.operations.Matrix.Matrix matrix20 = com.operations.Matrix.MatrixTransformations.rotate2D((double) (short) 100);
        boolean boolean22 = com.operations.Matrix.MatrixUtils.compare(matrix13, matrix20, (double) (byte) 0);
        double[] doubleArray25 = new double[] { 10, 'a' };
        double[] doubleArray28 = new double[] { 10, 'a' };
        double[][] doubleArray29 = new double[][] { doubleArray25, doubleArray28 };
        com.operations.Matrix.Matrix matrix30 = new com.operations.Matrix.Matrix(doubleArray29);
        com.operations.Matrix.Matrix matrix31 = new com.operations.Matrix.Matrix(doubleArray29);
        com.operations.Matrix.Matrix matrix32 = new com.operations.Matrix.Matrix(doubleArray29);
        boolean boolean34 = com.operations.Matrix.MatrixUtils.compare(matrix13, matrix32, (double) (-1));
        double[] doubleArray37 = new double[] { 10, 'a' };
        double[] doubleArray40 = new double[] { 10, 'a' };
        double[][] doubleArray41 = new double[][] { doubleArray37, doubleArray40 };
        com.operations.Matrix.Matrix matrix42 = new com.operations.Matrix.Matrix(doubleArray41);
        com.operations.Matrix.Matrix matrix43 = new com.operations.Matrix.Matrix(doubleArray41);
        boolean boolean44 = com.operations.Matrix.MatrixUtils.isSquare(matrix43);
        com.operations.Matrix.Matrix matrix45 = com.operations.Matrix.MatrixOperations.multiply(matrix32, matrix43);
        com.operations.Matrix.Matrix matrix48 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0L, (double) (byte) 10);
        int int49 = matrix48.getRows();
        com.operations.Matrix.Matrix matrix51 = com.operations.Matrix.MatrixOperations.scalarMultiply(matrix48, (double) 2);
        matrix48.print();
        matrix48.print();
        com.operations.Matrix.Matrix matrix54 = com.operations.Matrix.MatrixOperations.multiply(matrix45, matrix48);
        com.operations.Matrix.Matrix matrix55 = com.operations.Matrix.MatrixOperations.subtract(matrix1, matrix48);
        com.operations.Matrix.Matrix matrix57 = com.operations.Matrix.MatrixTransformations.rotate2D(364.0054944640259d);
        com.operations.Matrix.Matrix matrix60 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0L, (double) (byte) 10);
        int int61 = matrix60.getRows();
        com.operations.Matrix.Matrix matrix63 = com.operations.Matrix.MatrixOperations.scalarMultiply(matrix60, (double) 2);
        double double64 = com.operations.Matrix.MatrixUtils.frobeniusNorm(matrix60);
        com.operations.Matrix.Matrix matrix67 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0L, (double) (byte) 10);
        int int68 = matrix67.getRows();
        com.operations.Matrix.Matrix matrix70 = com.operations.Matrix.MatrixOperations.scalarMultiply(matrix67, (double) 2);
        com.operations.Matrix.Matrix matrix71 = com.operations.Matrix.MatrixOperations.subtract(matrix60, matrix70);
        com.operations.Matrix.Matrix matrix73 = com.operations.Matrix.MatrixOperations.scalarMultiply(matrix71, (double) 1);
        int int74 = matrix73.getCols();
        boolean boolean76 = com.operations.Matrix.MatrixUtils.compare(matrix57, matrix73, 641.7761389614766d);
        com.operations.Matrix.Matrix matrix77 = com.operations.Matrix.MatrixOperations.add(matrix48, matrix57);
        org.junit.Assert.assertNotNull(matrix1);
        org.junit.Assert.assertNotNull(matrix5);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertArrayEquals(doubleArray8, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertArrayEquals(doubleArray11, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 2 + "'", int14 == 2);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 2 + "'", int15 == 2);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 2 + "'", int16 == 2);
        org.junit.Assert.assertNotNull(matrixArray17);
        org.junit.Assert.assertNotNull(matrix18);
        org.junit.Assert.assertNotNull(matrix20);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertArrayEquals(doubleArray25, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertArrayEquals(doubleArray28, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertArrayEquals(doubleArray37, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertArrayEquals(doubleArray40, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertNotNull(matrix45);
        org.junit.Assert.assertNotNull(matrix48);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 2 + "'", int49 == 2);
        org.junit.Assert.assertNotNull(matrix51);
        org.junit.Assert.assertNotNull(matrix54);
        org.junit.Assert.assertNotNull(matrix55);
        org.junit.Assert.assertNotNull(matrix57);
        org.junit.Assert.assertNotNull(matrix60);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 2 + "'", int61 == 2);
        org.junit.Assert.assertNotNull(matrix63);
        org.junit.Assert.assertTrue("'" + double64 + "' != '" + 10.0d + "'", double64 == 10.0d);
        org.junit.Assert.assertNotNull(matrix67);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 2 + "'", int68 == 2);
        org.junit.Assert.assertNotNull(matrix70);
        org.junit.Assert.assertNotNull(matrix71);
        org.junit.Assert.assertNotNull(matrix73);
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 2 + "'", int74 == 2);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + true + "'", boolean76 == true);
        org.junit.Assert.assertNotNull(matrix77);
    }

    @Test
    public void test4800() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4800");
        double[] doubleArray2 = new double[] { 10, 'a' };
        double[] doubleArray5 = new double[] { 10, 'a' };
        double[][] doubleArray6 = new double[][] { doubleArray2, doubleArray5 };
        com.operations.Matrix.Matrix matrix7 = new com.operations.Matrix.Matrix(doubleArray6);
        com.operations.Matrix.Matrix matrix8 = new com.operations.Matrix.Matrix(doubleArray6);
        boolean boolean9 = com.operations.Matrix.MatrixUtils.isSquare(matrix8);
        com.operations.Matrix.Matrix matrix11 = com.operations.Matrix.MatrixOperations.scalarMultiply(matrix8, (double) '4');
        boolean boolean12 = com.operations.Matrix.MatrixUtils.isSymmetric(matrix11);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertArrayEquals(doubleArray2, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertArrayEquals(doubleArray5, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertNotNull(matrix11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
    }

    @Test
    public void test4801() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4801");
        com.operations.Matrix.Matrix matrix4 = com.operations.Matrix.MatrixUtils.generateRandomMatrix(10, (int) (short) 0, (int) (byte) -1, 2);
        com.operations.Matrix.Matrix matrix6 = com.operations.Matrix.MatrixTransformations.rotate2D((double) (short) 100);
        double[] doubleArray9 = new double[] { 137.90576492663388d, (byte) -1 };
        double[] doubleArray10 = com.operations.Matrix.MatrixSolver.solveGaussian(matrix6, doubleArray9);
        com.operations.Matrix.Matrix matrix13 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0L, (double) (byte) 10);
        double[] doubleArray16 = new double[] { 10, 'a' };
        double[] doubleArray19 = new double[] { 10, 'a' };
        double[][] doubleArray20 = new double[][] { doubleArray16, doubleArray19 };
        com.operations.Matrix.Matrix matrix21 = new com.operations.Matrix.Matrix(doubleArray20);
        int int22 = matrix21.getCols();
        int int23 = matrix21.getCols();
        int int24 = matrix21.getCols();
        com.operations.Matrix.Matrix[] matrixArray25 = com.operations.Matrix.MatrixDecompositions.luDecomposition(matrix21);
        com.operations.Matrix.Matrix matrix26 = com.operations.Matrix.MatrixOperations.multiply(matrix13, matrix21);
        boolean boolean28 = com.operations.Matrix.MatrixUtils.compare(matrix6, matrix13, (double) (-1L));
        boolean boolean29 = com.operations.Matrix.MatrixUtils.isSymmetric(matrix6);
        int int30 = matrix6.getCols();
        com.operations.Matrix.Matrix[] matrixArray31 = com.operations.Matrix.MatrixDecompositions.luDecomposition(matrix6);
        com.operations.Matrix.Matrix matrix33 = com.operations.Matrix.MatrixOperations.scalarMultiply(matrix6, (double) 32);
        boolean boolean35 = com.operations.Matrix.MatrixUtils.compare(matrix4, matrix6, 1.4142135623730951d);
        // The following exception was thrown during execution in test generation
        try {
            matrix4.setValue((int) (byte) 100, (-1), (double) (short) 1);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: Index 100 out of bounds for length 10");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(matrix4);
        org.junit.Assert.assertNotNull(matrix6);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertArrayEquals(doubleArray9, new double[] { 137.90576492663388d, (-1.0d) }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertArrayEquals(doubleArray10, new double[] { (-24.931892522286255d), (-135.63701830716116d) }, 1.0E-15);
        org.junit.Assert.assertNotNull(matrix13);
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertArrayEquals(doubleArray16, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertArrayEquals(doubleArray19, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 2 + "'", int22 == 2);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 2 + "'", int23 == 2);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 2 + "'", int24 == 2);
        org.junit.Assert.assertNotNull(matrixArray25);
        org.junit.Assert.assertNotNull(matrix26);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 2 + "'", int30 == 2);
        org.junit.Assert.assertNotNull(matrixArray31);
        org.junit.Assert.assertNotNull(matrix33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
    }

    @Test
    public void test4802() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4802");
        com.operations.Matrix.Matrix matrix2 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0L, (double) (byte) 10);
        double[] doubleArray5 = new double[] { 10, 'a' };
        double[] doubleArray8 = new double[] { 10, 'a' };
        double[][] doubleArray9 = new double[][] { doubleArray5, doubleArray8 };
        com.operations.Matrix.Matrix matrix10 = new com.operations.Matrix.Matrix(doubleArray9);
        int int11 = matrix10.getCols();
        int int12 = matrix10.getCols();
        int int13 = matrix10.getCols();
        com.operations.Matrix.Matrix[] matrixArray14 = com.operations.Matrix.MatrixDecompositions.luDecomposition(matrix10);
        com.operations.Matrix.Matrix matrix15 = com.operations.Matrix.MatrixOperations.multiply(matrix2, matrix10);
        com.operations.Matrix.Matrix matrix17 = com.operations.Matrix.MatrixTransformations.rotate2D((double) (short) 100);
        boolean boolean19 = com.operations.Matrix.MatrixUtils.compare(matrix10, matrix17, (double) (byte) 0);
        boolean boolean20 = com.operations.Matrix.MatrixUtils.isSymmetric(matrix17);
        boolean boolean21 = com.operations.Matrix.MatrixUtils.isSquare(matrix17);
        com.operations.Matrix.Matrix matrix24 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0L, (double) (byte) 10);
        double[] doubleArray27 = new double[] { 10, 'a' };
        double[] doubleArray30 = new double[] { 10, 'a' };
        double[][] doubleArray31 = new double[][] { doubleArray27, doubleArray30 };
        com.operations.Matrix.Matrix matrix32 = new com.operations.Matrix.Matrix(doubleArray31);
        int int33 = matrix32.getCols();
        int int34 = matrix32.getCols();
        int int35 = matrix32.getCols();
        com.operations.Matrix.Matrix[] matrixArray36 = com.operations.Matrix.MatrixDecompositions.luDecomposition(matrix32);
        com.operations.Matrix.Matrix matrix37 = com.operations.Matrix.MatrixOperations.multiply(matrix24, matrix32);
        com.operations.Matrix.Matrix matrix39 = com.operations.Matrix.MatrixTransformations.rotate2D((double) (short) 100);
        boolean boolean41 = com.operations.Matrix.MatrixUtils.compare(matrix32, matrix39, (double) (byte) 0);
        double[] doubleArray44 = new double[] { 10, 'a' };
        double[] doubleArray47 = new double[] { 10, 'a' };
        double[][] doubleArray48 = new double[][] { doubleArray44, doubleArray47 };
        com.operations.Matrix.Matrix matrix49 = new com.operations.Matrix.Matrix(doubleArray48);
        com.operations.Matrix.Matrix matrix50 = new com.operations.Matrix.Matrix(doubleArray48);
        com.operations.Matrix.Matrix matrix51 = new com.operations.Matrix.Matrix(doubleArray48);
        boolean boolean53 = com.operations.Matrix.MatrixUtils.compare(matrix32, matrix51, (double) (-1));
        double[] doubleArray56 = new double[] { 10, 'a' };
        double[] doubleArray59 = new double[] { 10, 'a' };
        double[][] doubleArray60 = new double[][] { doubleArray56, doubleArray59 };
        com.operations.Matrix.Matrix matrix61 = new com.operations.Matrix.Matrix(doubleArray60);
        com.operations.Matrix.Matrix matrix62 = new com.operations.Matrix.Matrix(doubleArray60);
        boolean boolean63 = com.operations.Matrix.MatrixUtils.isSquare(matrix62);
        com.operations.Matrix.Matrix matrix64 = com.operations.Matrix.MatrixOperations.multiply(matrix51, matrix62);
        com.operations.Matrix.Matrix matrix67 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0L, (double) (byte) 10);
        int int68 = matrix67.getRows();
        com.operations.Matrix.Matrix matrix70 = com.operations.Matrix.MatrixOperations.scalarMultiply(matrix67, (double) 2);
        matrix67.print();
        matrix67.print();
        com.operations.Matrix.Matrix matrix73 = com.operations.Matrix.MatrixOperations.multiply(matrix64, matrix67);
        boolean boolean75 = com.operations.Matrix.MatrixUtils.compare(matrix17, matrix73, (-1.0d));
        com.operations.Matrix.Matrix[] matrixArray76 = com.operations.Matrix.MatrixDecompositions.luDecomposition(matrix73);
        // The following exception was thrown during execution in test generation
        try {
            com.operations.Matrix.Matrix matrix77 = com.operations.Matrix.MatrixDecompositions.choleskyDecomposition(matrix73);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Matrix is not positive definite.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(matrix2);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertArrayEquals(doubleArray5, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertArrayEquals(doubleArray8, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 2 + "'", int11 == 2);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 2 + "'", int12 == 2);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 2 + "'", int13 == 2);
        org.junit.Assert.assertNotNull(matrixArray14);
        org.junit.Assert.assertNotNull(matrix15);
        org.junit.Assert.assertNotNull(matrix17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertNotNull(matrix24);
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertArrayEquals(doubleArray27, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertArrayEquals(doubleArray30, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 2 + "'", int33 == 2);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 2 + "'", int34 == 2);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 2 + "'", int35 == 2);
        org.junit.Assert.assertNotNull(matrixArray36);
        org.junit.Assert.assertNotNull(matrix37);
        org.junit.Assert.assertNotNull(matrix39);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertArrayEquals(doubleArray44, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertArrayEquals(doubleArray47, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(doubleArray56);
        org.junit.Assert.assertArrayEquals(doubleArray56, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray59);
        org.junit.Assert.assertArrayEquals(doubleArray59, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray60);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + true + "'", boolean63 == true);
        org.junit.Assert.assertNotNull(matrix64);
        org.junit.Assert.assertNotNull(matrix67);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 2 + "'", int68 == 2);
        org.junit.Assert.assertNotNull(matrix70);
        org.junit.Assert.assertNotNull(matrix73);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertNotNull(matrixArray76);
    }

    @Test
    public void test4803() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4803");
        com.operations.Matrix.Matrix matrix2 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0L, (double) (byte) 10);
        double[] doubleArray5 = new double[] { 10, 'a' };
        double[] doubleArray8 = new double[] { 10, 'a' };
        double[][] doubleArray9 = new double[][] { doubleArray5, doubleArray8 };
        com.operations.Matrix.Matrix matrix10 = new com.operations.Matrix.Matrix(doubleArray9);
        int int11 = matrix10.getCols();
        int int12 = matrix10.getCols();
        int int13 = matrix10.getCols();
        com.operations.Matrix.Matrix[] matrixArray14 = com.operations.Matrix.MatrixDecompositions.luDecomposition(matrix10);
        com.operations.Matrix.Matrix matrix15 = com.operations.Matrix.MatrixOperations.multiply(matrix2, matrix10);
        com.operations.Matrix.Matrix matrix17 = com.operations.Matrix.MatrixTransformations.rotate2D((double) (short) 100);
        boolean boolean19 = com.operations.Matrix.MatrixUtils.compare(matrix10, matrix17, (double) (byte) 0);
        double[] doubleArray22 = new double[] { 10, 'a' };
        double[] doubleArray25 = new double[] { 10, 'a' };
        double[][] doubleArray26 = new double[][] { doubleArray22, doubleArray25 };
        com.operations.Matrix.Matrix matrix27 = new com.operations.Matrix.Matrix(doubleArray26);
        com.operations.Matrix.Matrix matrix28 = new com.operations.Matrix.Matrix(doubleArray26);
        com.operations.Matrix.Matrix matrix29 = new com.operations.Matrix.Matrix(doubleArray26);
        boolean boolean31 = com.operations.Matrix.MatrixUtils.compare(matrix10, matrix29, (double) (-1));
        double double32 = com.operations.Matrix.MatrixUtils.frobeniusNorm(matrix10);
        com.operations.Matrix.Matrix matrix33 = com.operations.Matrix.MatrixDecompositions.choleskyDecomposition(matrix10);
        matrix33.print();
        com.operations.Matrix.Matrix[] matrixArray35 = com.operations.Matrix.MatrixDecompositions.luDecomposition(matrix33);
        matrix33.print();
        org.junit.Assert.assertNotNull(matrix2);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertArrayEquals(doubleArray5, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertArrayEquals(doubleArray8, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 2 + "'", int11 == 2);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 2 + "'", int12 == 2);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 2 + "'", int13 == 2);
        org.junit.Assert.assertNotNull(matrixArray14);
        org.junit.Assert.assertNotNull(matrix15);
        org.junit.Assert.assertNotNull(matrix17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertArrayEquals(doubleArray22, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertArrayEquals(doubleArray25, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + double32 + "' != '" + 137.90576492663388d + "'", double32 == 137.90576492663388d);
        org.junit.Assert.assertNotNull(matrix33);
        org.junit.Assert.assertNotNull(matrixArray35);
    }

    @Test
    public void test4804() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4804");
        // The following exception was thrown during execution in test generation
        try {
            com.operations.Matrix.Matrix matrix5 = com.operations.Matrix.MatrixUtils.generateRandomMatrix(0, (int) ' ', 35, 0, (long) ' ');
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
    }

    @Test
    public void test4805() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4805");
        com.operations.Matrix.Matrix matrix4 = com.operations.Matrix.MatrixUtils.generateRandomMatrix((int) (short) 1, (int) (byte) 0, 97, 35);
        double[][] doubleArray5 = matrix4.getData();
        org.junit.Assert.assertNotNull(matrix4);
        org.junit.Assert.assertNotNull(doubleArray5);
    }

    @Test
    public void test4806() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4806");
        com.operations.Matrix.Matrix matrix2 = com.operations.Matrix.MatrixTransformations.scale2D((double) 52, (double) 10.0f);
        double double3 = com.operations.Matrix.MatrixUtils.frobeniusNorm(matrix2);
        com.operations.Matrix.Matrix matrix4 = com.operations.Matrix.MatrixOperations.transpose(matrix2);
        org.junit.Assert.assertNotNull(matrix2);
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + 52.952809179494906d + "'", double3 == 52.952809179494906d);
        org.junit.Assert.assertNotNull(matrix4);
    }

    @Test
    public void test4807() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4807");
        double[] doubleArray2 = new double[] { 10, 'a' };
        double[] doubleArray5 = new double[] { 10, 'a' };
        double[][] doubleArray6 = new double[][] { doubleArray2, doubleArray5 };
        com.operations.Matrix.Matrix matrix7 = new com.operations.Matrix.Matrix(doubleArray6);
        com.operations.Matrix.Matrix matrix8 = new com.operations.Matrix.Matrix(doubleArray6);
        com.operations.Matrix.Matrix[] matrixArray9 = com.operations.Matrix.MatrixDecompositions.luDecomposition(matrix8);
        com.operations.Matrix.Matrix matrix10 = com.operations.Matrix.MatrixDecompositions.choleskyDecomposition(matrix8);
        com.operations.Matrix.Matrix matrix11 = com.operations.Matrix.MatrixDecompositions.choleskyDecomposition(matrix8);
        boolean boolean12 = com.operations.Matrix.MatrixUtils.isSquare(matrix11);
        double[][] doubleArray13 = matrix11.getData();
        // The following exception was thrown during execution in test generation
        try {
            double double16 = matrix11.getValue((int) 'a', (int) '#');
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertArrayEquals(doubleArray2, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertArrayEquals(doubleArray5, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertNotNull(matrixArray9);
        org.junit.Assert.assertNotNull(matrix10);
        org.junit.Assert.assertNotNull(matrix11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(doubleArray13);
    }

    @Test
    public void test4808() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4808");
        com.operations.Matrix.Matrix matrix2 = com.operations.Matrix.MatrixTransformations.scale2D(1363.6076983299943d, 1.6135503908876414d);
        org.junit.Assert.assertNotNull(matrix2);
    }

    @Test
    public void test4809() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4809");
        double[] doubleArray2 = new double[] { 10, 'a' };
        double[] doubleArray5 = new double[] { 10, 'a' };
        double[][] doubleArray6 = new double[][] { doubleArray2, doubleArray5 };
        com.operations.Matrix.Matrix matrix7 = new com.operations.Matrix.Matrix(doubleArray6);
        com.operations.Matrix.Matrix matrix8 = new com.operations.Matrix.Matrix(doubleArray6);
        boolean boolean9 = com.operations.Matrix.MatrixUtils.isSquare(matrix8);
        double[] doubleArray12 = new double[] { 10, 'a' };
        double[] doubleArray15 = new double[] { 10, 'a' };
        double[][] doubleArray16 = new double[][] { doubleArray12, doubleArray15 };
        com.operations.Matrix.Matrix matrix17 = new com.operations.Matrix.Matrix(doubleArray16);
        int int18 = matrix17.getCols();
        int int19 = matrix17.getCols();
        matrix17.print();
        double[] doubleArray23 = new double[] { 10, 'a' };
        double[] doubleArray26 = new double[] { 10, 'a' };
        double[][] doubleArray27 = new double[][] { doubleArray23, doubleArray26 };
        com.operations.Matrix.Matrix matrix28 = new com.operations.Matrix.Matrix(doubleArray27);
        boolean boolean30 = com.operations.Matrix.MatrixUtils.compare(matrix17, matrix28, (double) (-1));
        com.operations.Matrix.Matrix matrix31 = com.operations.Matrix.MatrixOperations.subtract(matrix8, matrix28);
        com.operations.Matrix.Matrix[] matrixArray32 = com.operations.Matrix.MatrixDecompositions.luDecomposition(matrix31);
        double[][] doubleArray33 = matrix31.getData();
        boolean boolean34 = com.operations.Matrix.MatrixUtils.isSquare(matrix31);
        boolean boolean35 = com.operations.Matrix.MatrixUtils.isSquare(matrix31);
        double[][] doubleArray36 = matrix31.getData();
        com.operations.Matrix.Matrix matrix37 = new com.operations.Matrix.Matrix(doubleArray36);
        com.operations.Matrix.Matrix matrix38 = new com.operations.Matrix.Matrix(doubleArray36);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertArrayEquals(doubleArray2, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertArrayEquals(doubleArray5, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertArrayEquals(doubleArray12, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertArrayEquals(doubleArray15, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 2 + "'", int18 == 2);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 2 + "'", int19 == 2);
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertArrayEquals(doubleArray23, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertArrayEquals(doubleArray26, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(matrix31);
        org.junit.Assert.assertNotNull(matrixArray32);
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(doubleArray36);
    }

    @Test
    public void test4810() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4810");
        com.operations.Matrix.Matrix matrix1 = com.operations.Matrix.MatrixTransformations.rotate2D((double) 35);
        com.operations.Matrix.Matrix[] matrixArray2 = com.operations.Matrix.MatrixDecompositions.luDecomposition(matrix1);
        org.junit.Assert.assertNotNull(matrix1);
        org.junit.Assert.assertNotNull(matrixArray2);
    }

    @Test
    public void test4811() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4811");
        com.operations.Matrix.Matrix matrix5 = com.operations.Matrix.MatrixUtils.generateRandomMatrix(100, (int) (byte) 1, (int) '#', (int) '#', 1L);
        double double8 = matrix5.getValue((int) '4', 0);
        matrix5.print();
        com.operations.Matrix.Matrix matrix10 = com.operations.Matrix.MatrixOperations.transpose(matrix5);
        int int11 = matrix10.getRows();
        com.operations.Matrix.Matrix matrix14 = com.operations.Matrix.MatrixTransformations.project2D(10.344080432788601d, (double) 97);
        com.operations.Matrix.Matrix matrix16 = com.operations.Matrix.MatrixTransformations.rotate2D((double) (short) 100);
        double[] doubleArray19 = new double[] { 137.90576492663388d, (byte) -1 };
        double[] doubleArray20 = com.operations.Matrix.MatrixSolver.solveGaussian(matrix16, doubleArray19);
        com.operations.Matrix.Matrix matrix23 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0L, (double) (byte) 10);
        double[] doubleArray26 = new double[] { 10, 'a' };
        double[] doubleArray29 = new double[] { 10, 'a' };
        double[][] doubleArray30 = new double[][] { doubleArray26, doubleArray29 };
        com.operations.Matrix.Matrix matrix31 = new com.operations.Matrix.Matrix(doubleArray30);
        int int32 = matrix31.getCols();
        int int33 = matrix31.getCols();
        int int34 = matrix31.getCols();
        com.operations.Matrix.Matrix[] matrixArray35 = com.operations.Matrix.MatrixDecompositions.luDecomposition(matrix31);
        com.operations.Matrix.Matrix matrix36 = com.operations.Matrix.MatrixOperations.multiply(matrix23, matrix31);
        boolean boolean38 = com.operations.Matrix.MatrixUtils.compare(matrix16, matrix23, (double) (-1L));
        boolean boolean39 = com.operations.Matrix.MatrixUtils.isSymmetric(matrix16);
        int int40 = matrix16.getCols();
        com.operations.Matrix.Matrix[] matrixArray41 = com.operations.Matrix.MatrixDecompositions.luDecomposition(matrix16);
        double double42 = com.operations.Matrix.MatrixUtils.frobeniusNorm(matrix16);
        double double43 = com.operations.Matrix.MatrixUtils.frobeniusNorm(matrix16);
        double[][] doubleArray44 = matrix16.getData();
        com.operations.Matrix.Matrix matrix45 = new com.operations.Matrix.Matrix(doubleArray44);
        com.operations.Matrix.Matrix matrix46 = new com.operations.Matrix.Matrix(doubleArray44);
        com.operations.Matrix.Matrix matrix47 = com.operations.Matrix.MatrixOperations.multiply(matrix14, matrix46);
        com.operations.Matrix.Matrix matrix49 = com.operations.Matrix.MatrixOperations.scalarMultiply(matrix47, 2.82842712474619d);
        // The following exception was thrown during execution in test generation
        try {
            com.operations.Matrix.Matrix matrix50 = com.operations.Matrix.MatrixOperations.add(matrix10, matrix49);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Matrices must have the same dimensions for addition.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(matrix5);
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 35.0d + "'", double8 == 35.0d);
        org.junit.Assert.assertNotNull(matrix10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertNotNull(matrix14);
        org.junit.Assert.assertNotNull(matrix16);
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertArrayEquals(doubleArray19, new double[] { 137.90576492663388d, (-1.0d) }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertArrayEquals(doubleArray20, new double[] { (-24.931892522286255d), (-135.63701830716116d) }, 1.0E-15);
        org.junit.Assert.assertNotNull(matrix23);
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertArrayEquals(doubleArray26, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertArrayEquals(doubleArray29, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 2 + "'", int32 == 2);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 2 + "'", int33 == 2);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 2 + "'", int34 == 2);
        org.junit.Assert.assertNotNull(matrixArray35);
        org.junit.Assert.assertNotNull(matrix36);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 2 + "'", int40 == 2);
        org.junit.Assert.assertNotNull(matrixArray41);
        org.junit.Assert.assertTrue("'" + double42 + "' != '" + 1.414213562373095d + "'", double42 == 1.414213562373095d);
        org.junit.Assert.assertTrue("'" + double43 + "' != '" + 1.414213562373095d + "'", double43 == 1.414213562373095d);
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertNotNull(matrix47);
        org.junit.Assert.assertNotNull(matrix49);
    }

    @Test
    public void test4812() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4812");
        com.operations.Matrix.Matrix matrix2 = com.operations.Matrix.MatrixTransformations.scale2D((double) (-1L), (double) '4');
        com.operations.Matrix.Matrix matrix3 = com.operations.Matrix.MatrixOperations.transpose(matrix2);
        double[] doubleArray6 = new double[] { 10, 'a' };
        double[] doubleArray9 = new double[] { 10, 'a' };
        double[][] doubleArray10 = new double[][] { doubleArray6, doubleArray9 };
        com.operations.Matrix.Matrix matrix11 = new com.operations.Matrix.Matrix(doubleArray10);
        com.operations.Matrix.Matrix matrix12 = new com.operations.Matrix.Matrix(doubleArray10);
        com.operations.Matrix.Matrix matrix14 = com.operations.Matrix.MatrixTransformations.rotate2D((double) (short) 100);
        double[] doubleArray17 = new double[] { 137.90576492663388d, (byte) -1 };
        double[] doubleArray18 = com.operations.Matrix.MatrixSolver.solveGaussian(matrix14, doubleArray17);
        com.operations.Matrix.Matrix matrix19 = com.operations.Matrix.MatrixOperations.add(matrix12, matrix14);
        com.operations.Matrix.Matrix matrix20 = com.operations.Matrix.MatrixOperations.transpose(matrix14);
        com.operations.Matrix.Matrix matrix21 = com.operations.Matrix.MatrixOperations.multiply(matrix3, matrix14);
        com.operations.Matrix.Matrix matrix24 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0L, (double) (byte) 10);
        int int25 = matrix24.getRows();
        com.operations.Matrix.Matrix matrix27 = com.operations.Matrix.MatrixOperations.scalarMultiply(matrix24, (double) 2);
        matrix24.print();
        matrix24.print();
        com.operations.Matrix.Matrix matrix30 = com.operations.Matrix.MatrixOperations.add(matrix3, matrix24);
        boolean boolean31 = com.operations.Matrix.MatrixUtils.isSymmetric(matrix24);
        com.operations.Matrix.Matrix matrix32 = com.operations.Matrix.MatrixOperations.transpose(matrix24);
        org.junit.Assert.assertNotNull(matrix2);
        org.junit.Assert.assertNotNull(matrix3);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertArrayEquals(doubleArray6, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertArrayEquals(doubleArray9, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertNotNull(matrix14);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertArrayEquals(doubleArray17, new double[] { 137.90576492663388d, (-1.0d) }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertArrayEquals(doubleArray18, new double[] { (-24.931892522286255d), (-135.63701830716116d) }, 1.0E-15);
        org.junit.Assert.assertNotNull(matrix19);
        org.junit.Assert.assertNotNull(matrix20);
        org.junit.Assert.assertNotNull(matrix21);
        org.junit.Assert.assertNotNull(matrix24);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 2 + "'", int25 == 2);
        org.junit.Assert.assertNotNull(matrix27);
        org.junit.Assert.assertNotNull(matrix30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertNotNull(matrix32);
    }

    @Test
    public void test4813() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4813");
        com.operations.Matrix.Matrix matrix2 = com.operations.Matrix.MatrixTransformations.scale2D((double) (byte) 1, (double) (short) 1);
        boolean boolean3 = com.operations.Matrix.MatrixUtils.isSquare(matrix2);
        org.junit.Assert.assertNotNull(matrix2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
    }

    @Test
    public void test4814() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4814");
        com.operations.Matrix.Matrix matrix5 = com.operations.Matrix.MatrixUtils.generateRandomMatrix((int) '4', (int) ' ', (int) (short) 100, (int) (byte) 100, (long) (short) 10);
        com.operations.Matrix.Matrix matrix6 = com.operations.Matrix.MatrixOperations.transpose(matrix5);
        com.operations.Matrix.Matrix matrix9 = com.operations.Matrix.MatrixTransformations.scale2D(136.9141301851733d, 0.0d);
        boolean boolean11 = com.operations.Matrix.MatrixUtils.compare(matrix5, matrix9, 260.95643973734866d);
        org.junit.Assert.assertNotNull(matrix5);
        org.junit.Assert.assertNotNull(matrix6);
        org.junit.Assert.assertNotNull(matrix9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
    }

    @Test
    public void test4815() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4815");
        double[] doubleArray2 = new double[] { 10, 'a' };
        double[] doubleArray5 = new double[] { 10, 'a' };
        double[][] doubleArray6 = new double[][] { doubleArray2, doubleArray5 };
        com.operations.Matrix.Matrix matrix7 = new com.operations.Matrix.Matrix(doubleArray6);
        com.operations.Matrix.Matrix matrix8 = new com.operations.Matrix.Matrix(doubleArray6);
        boolean boolean9 = com.operations.Matrix.MatrixUtils.isSquare(matrix8);
        com.operations.Matrix.Matrix matrix11 = com.operations.Matrix.MatrixOperations.scalarMultiply(matrix8, (double) 1.0f);
        com.operations.Matrix.Matrix matrix13 = com.operations.Matrix.MatrixTransformations.rotate2D((double) '4');
        com.operations.Matrix.Matrix matrix16 = com.operations.Matrix.MatrixTransformations.project2D((double) ' ', 0.0d);
        boolean boolean17 = com.operations.Matrix.MatrixUtils.isSymmetric(matrix16);
        boolean boolean19 = com.operations.Matrix.MatrixUtils.compare(matrix13, matrix16, 1.4142135623730951d);
        boolean boolean20 = com.operations.Matrix.MatrixUtils.isSquare(matrix16);
        boolean boolean22 = com.operations.Matrix.MatrixUtils.compare(matrix11, matrix16, (double) 100);
        boolean boolean23 = com.operations.Matrix.MatrixUtils.isSquare(matrix16);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertArrayEquals(doubleArray2, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertArrayEquals(doubleArray5, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertNotNull(matrix11);
        org.junit.Assert.assertNotNull(matrix13);
        org.junit.Assert.assertNotNull(matrix16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
    }

    @Test
    public void test4816() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4816");
        com.operations.Matrix.Matrix matrix2 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0L, (double) (byte) 10);
        int int3 = matrix2.getRows();
        com.operations.Matrix.Matrix matrix9 = com.operations.Matrix.MatrixUtils.generateRandomMatrix(100, (int) (byte) 1, (int) '#', (int) '#', 1L);
        boolean boolean11 = com.operations.Matrix.MatrixUtils.compare(matrix2, matrix9, (double) 1.0f);
        matrix2.setValue((int) (byte) 1, (int) (short) 0, 146781.22563870353d);
        boolean boolean16 = com.operations.Matrix.MatrixUtils.isSquare(matrix2);
        int int17 = matrix2.getCols();
        org.junit.Assert.assertNotNull(matrix2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 2 + "'", int3 == 2);
        org.junit.Assert.assertNotNull(matrix9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 2 + "'", int17 == 2);
    }

    @Test
    public void test4817() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4817");
        com.operations.Matrix.Matrix matrix2 = com.operations.Matrix.MatrixTransformations.scale2D((double) (short) 0, (double) (byte) 0);
        double double3 = com.operations.Matrix.MatrixUtils.frobeniusNorm(matrix2);
        // The following exception was thrown during execution in test generation
        try {
            matrix2.setValue((int) (short) -1, (int) (short) 1, 11.489125293076057d);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: Index -1 out of bounds for length 2");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(matrix2);
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + 0.0d + "'", double3 == 0.0d);
    }

    @Test
    public void test4818() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4818");
        com.operations.Matrix.Matrix matrix2 = com.operations.Matrix.MatrixTransformations.project2D((-1.0d), (double) 1L);
        double double3 = com.operations.Matrix.MatrixUtils.frobeniusNorm(matrix2);
        com.operations.Matrix.Matrix[] matrixArray4 = com.operations.Matrix.MatrixDecompositions.luDecomposition(matrix2);
        boolean boolean5 = com.operations.Matrix.MatrixUtils.isSymmetric(matrix2);
        matrix2.print();
        org.junit.Assert.assertNotNull(matrix2);
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + 1.4142135623730951d + "'", double3 == 1.4142135623730951d);
        org.junit.Assert.assertNotNull(matrixArray4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
    }

    @Test
    public void test4819() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4819");
        com.operations.Matrix.Matrix matrix5 = com.operations.Matrix.MatrixUtils.generateRandomMatrix((int) (byte) 10, 97, 35, (int) (short) 1, (long) 35);
        com.operations.Matrix.Matrix matrix6 = com.operations.Matrix.MatrixOperations.transpose(matrix5);
        org.junit.Assert.assertNotNull(matrix5);
        org.junit.Assert.assertNotNull(matrix6);
    }

    @Test
    public void test4820() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4820");
        com.operations.Matrix.Matrix matrix5 = com.operations.Matrix.MatrixUtils.generateRandomMatrix(10, (int) (byte) 10, (int) (byte) 0, 10, (-1L));
        com.operations.Matrix.Matrix[] matrixArray6 = com.operations.Matrix.MatrixDecompositions.luDecomposition(matrix5);
        org.junit.Assert.assertNotNull(matrix5);
        org.junit.Assert.assertNotNull(matrixArray6);
    }

    @Test
    public void test4821() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4821");
        com.operations.Matrix.Matrix matrix2 = com.operations.Matrix.MatrixTransformations.project2D((double) '#', 364.0054944640259d);
        com.operations.Matrix.Matrix matrix3 = com.operations.Matrix.MatrixDecompositions.choleskyDecomposition(matrix2);
        matrix2.print();
        com.operations.Matrix.Matrix matrix5 = com.operations.Matrix.MatrixDecompositions.choleskyDecomposition(matrix2);
        double[] doubleArray8 = new double[] { 10, 'a' };
        double[] doubleArray11 = new double[] { 10, 'a' };
        double[][] doubleArray12 = new double[][] { doubleArray8, doubleArray11 };
        com.operations.Matrix.Matrix matrix13 = new com.operations.Matrix.Matrix(doubleArray12);
        com.operations.Matrix.Matrix matrix14 = new com.operations.Matrix.Matrix(doubleArray12);
        com.operations.Matrix.Matrix[] matrixArray15 = com.operations.Matrix.MatrixDecompositions.luDecomposition(matrix14);
        double double16 = com.operations.Matrix.MatrixUtils.frobeniusNorm(matrix14);
        double[] doubleArray19 = new double[] { 10, 'a' };
        double[] doubleArray22 = new double[] { 10, 'a' };
        double[][] doubleArray23 = new double[][] { doubleArray19, doubleArray22 };
        com.operations.Matrix.Matrix matrix24 = new com.operations.Matrix.Matrix(doubleArray23);
        com.operations.Matrix.Matrix matrix25 = new com.operations.Matrix.Matrix(doubleArray23);
        boolean boolean26 = com.operations.Matrix.MatrixUtils.isSquare(matrix25);
        double[] doubleArray29 = new double[] { 10, 'a' };
        double[] doubleArray32 = new double[] { 10, 'a' };
        double[][] doubleArray33 = new double[][] { doubleArray29, doubleArray32 };
        com.operations.Matrix.Matrix matrix34 = new com.operations.Matrix.Matrix(doubleArray33);
        int int35 = matrix34.getCols();
        int int36 = matrix34.getCols();
        matrix34.print();
        double[] doubleArray40 = new double[] { 10, 'a' };
        double[] doubleArray43 = new double[] { 10, 'a' };
        double[][] doubleArray44 = new double[][] { doubleArray40, doubleArray43 };
        com.operations.Matrix.Matrix matrix45 = new com.operations.Matrix.Matrix(doubleArray44);
        boolean boolean47 = com.operations.Matrix.MatrixUtils.compare(matrix34, matrix45, (double) (-1));
        com.operations.Matrix.Matrix matrix48 = com.operations.Matrix.MatrixOperations.subtract(matrix25, matrix45);
        com.operations.Matrix.Matrix[] matrixArray49 = com.operations.Matrix.MatrixDecompositions.luDecomposition(matrix48);
        double[][] doubleArray50 = matrix48.getData();
        com.operations.Matrix.Matrix matrix53 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0L, (double) (byte) 10);
        double[] doubleArray56 = new double[] { 10, 'a' };
        double[] doubleArray59 = new double[] { 10, 'a' };
        double[][] doubleArray60 = new double[][] { doubleArray56, doubleArray59 };
        com.operations.Matrix.Matrix matrix61 = new com.operations.Matrix.Matrix(doubleArray60);
        int int62 = matrix61.getCols();
        int int63 = matrix61.getCols();
        int int64 = matrix61.getCols();
        com.operations.Matrix.Matrix[] matrixArray65 = com.operations.Matrix.MatrixDecompositions.luDecomposition(matrix61);
        com.operations.Matrix.Matrix matrix66 = com.operations.Matrix.MatrixOperations.multiply(matrix53, matrix61);
        int int67 = matrix61.getRows();
        com.operations.Matrix.Matrix matrix68 = com.operations.Matrix.MatrixOperations.multiply(matrix48, matrix61);
        boolean boolean70 = com.operations.Matrix.MatrixUtils.compare(matrix14, matrix68, (double) 2);
        com.operations.Matrix.Matrix matrix71 = com.operations.Matrix.MatrixOperations.transpose(matrix68);
        com.operations.Matrix.Matrix matrix74 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0L, (double) (byte) 10);
        double[] doubleArray77 = new double[] { 10, 'a' };
        double[] doubleArray80 = new double[] { 10, 'a' };
        double[][] doubleArray81 = new double[][] { doubleArray77, doubleArray80 };
        com.operations.Matrix.Matrix matrix82 = new com.operations.Matrix.Matrix(doubleArray81);
        int int83 = matrix82.getCols();
        int int84 = matrix82.getCols();
        int int85 = matrix82.getCols();
        com.operations.Matrix.Matrix[] matrixArray86 = com.operations.Matrix.MatrixDecompositions.luDecomposition(matrix82);
        com.operations.Matrix.Matrix matrix87 = com.operations.Matrix.MatrixOperations.multiply(matrix74, matrix82);
        com.operations.Matrix.Matrix matrix89 = com.operations.Matrix.MatrixTransformations.rotate2D((double) (short) 100);
        boolean boolean91 = com.operations.Matrix.MatrixUtils.compare(matrix82, matrix89, (double) (byte) 0);
        boolean boolean92 = com.operations.Matrix.MatrixUtils.isSymmetric(matrix89);
        boolean boolean93 = com.operations.Matrix.MatrixUtils.isSquare(matrix89);
        com.operations.Matrix.Matrix matrix95 = com.operations.Matrix.MatrixTransformations.rotate2D((double) (short) 100);
        boolean boolean97 = com.operations.Matrix.MatrixUtils.compare(matrix89, matrix95, (double) (byte) 100);
        com.operations.Matrix.Matrix matrix98 = com.operations.Matrix.MatrixOperations.subtract(matrix71, matrix95);
        com.operations.Matrix.Matrix matrix99 = com.operations.Matrix.MatrixOperations.add(matrix5, matrix71);
        org.junit.Assert.assertNotNull(matrix2);
        org.junit.Assert.assertNotNull(matrix3);
        org.junit.Assert.assertNotNull(matrix5);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertArrayEquals(doubleArray8, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertArrayEquals(doubleArray11, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertNotNull(matrixArray15);
        org.junit.Assert.assertTrue("'" + double16 + "' != '" + 137.90576492663388d + "'", double16 == 137.90576492663388d);
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertArrayEquals(doubleArray19, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertArrayEquals(doubleArray22, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertArrayEquals(doubleArray29, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertArrayEquals(doubleArray32, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 2 + "'", int35 == 2);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 2 + "'", int36 == 2);
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertArrayEquals(doubleArray40, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertArrayEquals(doubleArray43, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(matrix48);
        org.junit.Assert.assertNotNull(matrixArray49);
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertNotNull(matrix53);
        org.junit.Assert.assertNotNull(doubleArray56);
        org.junit.Assert.assertArrayEquals(doubleArray56, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray59);
        org.junit.Assert.assertArrayEquals(doubleArray59, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray60);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 2 + "'", int62 == 2);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 2 + "'", int63 == 2);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 2 + "'", int64 == 2);
        org.junit.Assert.assertNotNull(matrixArray65);
        org.junit.Assert.assertNotNull(matrix66);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 2 + "'", int67 == 2);
        org.junit.Assert.assertNotNull(matrix68);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertNotNull(matrix71);
        org.junit.Assert.assertNotNull(matrix74);
        org.junit.Assert.assertNotNull(doubleArray77);
        org.junit.Assert.assertArrayEquals(doubleArray77, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray80);
        org.junit.Assert.assertArrayEquals(doubleArray80, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray81);
        org.junit.Assert.assertTrue("'" + int83 + "' != '" + 2 + "'", int83 == 2);
        org.junit.Assert.assertTrue("'" + int84 + "' != '" + 2 + "'", int84 == 2);
        org.junit.Assert.assertTrue("'" + int85 + "' != '" + 2 + "'", int85 == 2);
        org.junit.Assert.assertNotNull(matrixArray86);
        org.junit.Assert.assertNotNull(matrix87);
        org.junit.Assert.assertNotNull(matrix89);
        org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + false + "'", boolean91 == false);
        org.junit.Assert.assertTrue("'" + boolean92 + "' != '" + false + "'", boolean92 == false);
        org.junit.Assert.assertTrue("'" + boolean93 + "' != '" + true + "'", boolean93 == true);
        org.junit.Assert.assertNotNull(matrix95);
        org.junit.Assert.assertTrue("'" + boolean97 + "' != '" + true + "'", boolean97 == true);
        org.junit.Assert.assertNotNull(matrix98);
        org.junit.Assert.assertNotNull(matrix99);
    }

    @Test
    public void test4822() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4822");
        com.operations.Matrix.Matrix matrix2 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0L, (double) (byte) 10);
        int int3 = matrix2.getRows();
        com.operations.Matrix.Matrix matrix9 = com.operations.Matrix.MatrixUtils.generateRandomMatrix(100, (int) (byte) 1, (int) '#', (int) '#', 1L);
        boolean boolean11 = com.operations.Matrix.MatrixUtils.compare(matrix2, matrix9, (double) 1.0f);
        int int12 = matrix2.getCols();
        com.operations.Matrix.Matrix matrix14 = com.operations.Matrix.MatrixTransformations.rotate2D((double) (short) 100);
        double[] doubleArray17 = new double[] { 137.90576492663388d, (byte) -1 };
        double[] doubleArray18 = com.operations.Matrix.MatrixSolver.solveGaussian(matrix14, doubleArray17);
        com.operations.Matrix.Matrix matrix21 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0L, (double) (byte) 10);
        double[] doubleArray24 = new double[] { 10, 'a' };
        double[] doubleArray27 = new double[] { 10, 'a' };
        double[][] doubleArray28 = new double[][] { doubleArray24, doubleArray27 };
        com.operations.Matrix.Matrix matrix29 = new com.operations.Matrix.Matrix(doubleArray28);
        int int30 = matrix29.getCols();
        int int31 = matrix29.getCols();
        int int32 = matrix29.getCols();
        com.operations.Matrix.Matrix[] matrixArray33 = com.operations.Matrix.MatrixDecompositions.luDecomposition(matrix29);
        com.operations.Matrix.Matrix matrix34 = com.operations.Matrix.MatrixOperations.multiply(matrix21, matrix29);
        boolean boolean36 = com.operations.Matrix.MatrixUtils.compare(matrix14, matrix21, (double) (-1L));
        boolean boolean38 = com.operations.Matrix.MatrixUtils.compare(matrix2, matrix14, (double) 'a');
        boolean boolean39 = com.operations.Matrix.MatrixUtils.isSymmetric(matrix14);
        com.operations.Matrix.Matrix matrix41 = com.operations.Matrix.MatrixOperations.scalarMultiply(matrix14, 576.1705606798018d);
        com.operations.Matrix.Matrix[] matrixArray42 = com.operations.Matrix.MatrixDecompositions.luDecomposition(matrix41);
        org.junit.Assert.assertNotNull(matrix2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 2 + "'", int3 == 2);
        org.junit.Assert.assertNotNull(matrix9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 2 + "'", int12 == 2);
        org.junit.Assert.assertNotNull(matrix14);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertArrayEquals(doubleArray17, new double[] { 137.90576492663388d, (-1.0d) }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertArrayEquals(doubleArray18, new double[] { (-24.931892522286255d), (-135.63701830716116d) }, 1.0E-15);
        org.junit.Assert.assertNotNull(matrix21);
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertArrayEquals(doubleArray24, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertArrayEquals(doubleArray27, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 2 + "'", int30 == 2);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 2 + "'", int31 == 2);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 2 + "'", int32 == 2);
        org.junit.Assert.assertNotNull(matrixArray33);
        org.junit.Assert.assertNotNull(matrix34);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(matrix41);
        org.junit.Assert.assertNotNull(matrixArray42);
    }

    @Test
    public void test4823() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4823");
        com.operations.Matrix.Matrix matrix2 = com.operations.Matrix.MatrixTransformations.scale2D(10.0d, 0.0d);
        com.operations.Matrix.Matrix matrix3 = com.operations.Matrix.MatrixOperations.transpose(matrix2);
        com.operations.Matrix.Matrix matrix5 = com.operations.Matrix.MatrixOperations.scalarMultiply(matrix3, 0.01745240643728351d);
        int int6 = matrix5.getCols();
        org.junit.Assert.assertNotNull(matrix2);
        org.junit.Assert.assertNotNull(matrix3);
        org.junit.Assert.assertNotNull(matrix5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 2 + "'", int6 == 2);
    }

    @Test
    public void test4824() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4824");
        com.operations.Matrix.Matrix matrix2 = com.operations.Matrix.MatrixTransformations.project2D(1.4142135623730951d, 0.01745240643728351d);
        double[][] doubleArray3 = matrix2.getData();
        org.junit.Assert.assertNotNull(matrix2);
        org.junit.Assert.assertNotNull(doubleArray3);
    }

    @Test
    public void test4825() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4825");
        com.operations.Matrix.Matrix matrix5 = com.operations.Matrix.MatrixUtils.generateRandomMatrix((int) (short) 10, (int) '4', 35, 2, (long) (short) 1);
        boolean boolean6 = com.operations.Matrix.MatrixUtils.isSquare(matrix5);
        com.operations.Matrix.Matrix matrix9 = com.operations.Matrix.MatrixTransformations.scale2D(52.009614495783374d, (double) 0.0f);
        double double10 = com.operations.Matrix.MatrixUtils.frobeniusNorm(matrix9);
        double[] doubleArray13 = new double[] { 10, 'a' };
        double[] doubleArray16 = new double[] { 10, 'a' };
        double[][] doubleArray17 = new double[][] { doubleArray13, doubleArray16 };
        com.operations.Matrix.Matrix matrix18 = new com.operations.Matrix.Matrix(doubleArray17);
        int int19 = matrix18.getCols();
        int int20 = matrix18.getCols();
        boolean boolean21 = com.operations.Matrix.MatrixUtils.isSquare(matrix18);
        com.operations.Matrix.Matrix matrix22 = com.operations.Matrix.MatrixDecompositions.choleskyDecomposition(matrix18);
        com.operations.Matrix.Matrix matrix25 = com.operations.Matrix.MatrixTransformations.project2D(0.0d, (double) 0);
        com.operations.Matrix.Matrix matrix26 = com.operations.Matrix.MatrixOperations.subtract(matrix22, matrix25);
        com.operations.Matrix.Matrix matrix27 = com.operations.Matrix.MatrixOperations.multiply(matrix9, matrix26);
        // The following exception was thrown during execution in test generation
        try {
            com.operations.Matrix.Matrix matrix28 = com.operations.Matrix.MatrixOperations.subtract(matrix5, matrix9);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Matrices must have the same dimensions for subtraction.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(matrix5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(matrix9);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 52.009614495783374d + "'", double10 == 52.009614495783374d);
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertArrayEquals(doubleArray13, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertArrayEquals(doubleArray16, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 2 + "'", int19 == 2);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 2 + "'", int20 == 2);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertNotNull(matrix22);
        org.junit.Assert.assertNotNull(matrix25);
        org.junit.Assert.assertNotNull(matrix26);
        org.junit.Assert.assertNotNull(matrix27);
    }

    @Test
    public void test4826() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4826");
        com.operations.Matrix.Matrix matrix0 = null;
        com.operations.Matrix.Matrix matrix3 = com.operations.Matrix.MatrixTransformations.scale2D((double) (byte) 10, (double) 10);
        double[] doubleArray6 = new double[] { 10, 'a' };
        double[] doubleArray9 = new double[] { 10, 'a' };
        double[][] doubleArray10 = new double[][] { doubleArray6, doubleArray9 };
        com.operations.Matrix.Matrix matrix11 = new com.operations.Matrix.Matrix(doubleArray10);
        com.operations.Matrix.Matrix matrix12 = new com.operations.Matrix.Matrix(doubleArray10);
        boolean boolean13 = com.operations.Matrix.MatrixUtils.isSquare(matrix12);
        double[] doubleArray16 = new double[] { 10, 'a' };
        double[] doubleArray19 = new double[] { 10, 'a' };
        double[][] doubleArray20 = new double[][] { doubleArray16, doubleArray19 };
        com.operations.Matrix.Matrix matrix21 = new com.operations.Matrix.Matrix(doubleArray20);
        int int22 = matrix21.getCols();
        int int23 = matrix21.getCols();
        matrix21.print();
        double[] doubleArray27 = new double[] { 10, 'a' };
        double[] doubleArray30 = new double[] { 10, 'a' };
        double[][] doubleArray31 = new double[][] { doubleArray27, doubleArray30 };
        com.operations.Matrix.Matrix matrix32 = new com.operations.Matrix.Matrix(doubleArray31);
        boolean boolean34 = com.operations.Matrix.MatrixUtils.compare(matrix21, matrix32, (double) (-1));
        com.operations.Matrix.Matrix matrix35 = com.operations.Matrix.MatrixOperations.subtract(matrix12, matrix32);
        com.operations.Matrix.Matrix[] matrixArray36 = com.operations.Matrix.MatrixDecompositions.luDecomposition(matrix35);
        double[][] doubleArray37 = matrix35.getData();
        com.operations.Matrix.Matrix matrix38 = new com.operations.Matrix.Matrix(doubleArray37);
        com.operations.Matrix.Matrix matrix39 = com.operations.Matrix.MatrixOperations.multiply(matrix3, matrix38);
        com.operations.Matrix.Matrix matrix41 = com.operations.Matrix.MatrixOperations.scalarMultiply(matrix38, (double) (short) -1);
        double[] doubleArray44 = new double[] { 10, 'a' };
        double[] doubleArray47 = new double[] { 10, 'a' };
        double[][] doubleArray48 = new double[][] { doubleArray44, doubleArray47 };
        com.operations.Matrix.Matrix matrix49 = new com.operations.Matrix.Matrix(doubleArray48);
        com.operations.Matrix.Matrix matrix50 = new com.operations.Matrix.Matrix(doubleArray48);
        com.operations.Matrix.Matrix[] matrixArray51 = com.operations.Matrix.MatrixDecompositions.luDecomposition(matrix50);
        com.operations.Matrix.Matrix matrix54 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0, (double) 100L);
        com.operations.Matrix.Matrix matrix55 = com.operations.Matrix.MatrixOperations.subtract(matrix50, matrix54);
        com.operations.Matrix.Matrix matrix57 = com.operations.Matrix.MatrixTransformations.rotate2D((double) (short) 100);
        double[] doubleArray60 = new double[] { 137.90576492663388d, (byte) -1 };
        double[] doubleArray61 = com.operations.Matrix.MatrixSolver.solveGaussian(matrix57, doubleArray60);
        com.operations.Matrix.Matrix matrix64 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0L, (double) (byte) 10);
        double[] doubleArray67 = new double[] { 10, 'a' };
        double[] doubleArray70 = new double[] { 10, 'a' };
        double[][] doubleArray71 = new double[][] { doubleArray67, doubleArray70 };
        com.operations.Matrix.Matrix matrix72 = new com.operations.Matrix.Matrix(doubleArray71);
        int int73 = matrix72.getCols();
        int int74 = matrix72.getCols();
        int int75 = matrix72.getCols();
        com.operations.Matrix.Matrix[] matrixArray76 = com.operations.Matrix.MatrixDecompositions.luDecomposition(matrix72);
        com.operations.Matrix.Matrix matrix77 = com.operations.Matrix.MatrixOperations.multiply(matrix64, matrix72);
        boolean boolean79 = com.operations.Matrix.MatrixUtils.compare(matrix57, matrix64, (double) (-1L));
        com.operations.Matrix.Matrix matrix80 = com.operations.Matrix.MatrixOperations.add(matrix50, matrix57);
        com.operations.Matrix.Matrix matrix81 = com.operations.Matrix.MatrixOperations.multiply(matrix38, matrix80);
        double[] doubleArray84 = new double[] { 10, 'a' };
        double[] doubleArray87 = new double[] { 10, 'a' };
        double[][] doubleArray88 = new double[][] { doubleArray84, doubleArray87 };
        com.operations.Matrix.Matrix matrix89 = new com.operations.Matrix.Matrix(doubleArray88);
        com.operations.Matrix.Matrix matrix90 = new com.operations.Matrix.Matrix(doubleArray88);
        com.operations.Matrix.Matrix matrix91 = new com.operations.Matrix.Matrix(doubleArray88);
        com.operations.Matrix.Matrix matrix92 = new com.operations.Matrix.Matrix(doubleArray88);
        com.operations.Matrix.Matrix matrix93 = com.operations.Matrix.MatrixOperations.transpose(matrix92);
        com.operations.Matrix.Matrix matrix95 = com.operations.Matrix.MatrixOperations.scalarMultiply(matrix93, (double) (-1.0f));
        boolean boolean97 = com.operations.Matrix.MatrixUtils.compare(matrix80, matrix93, 18.985133644271098d);
        // The following exception was thrown during execution in test generation
        try {
            com.operations.Matrix.Matrix matrix98 = com.operations.Matrix.MatrixOperations.add(matrix0, matrix93);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(matrix3);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertArrayEquals(doubleArray6, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertArrayEquals(doubleArray9, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertArrayEquals(doubleArray16, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertArrayEquals(doubleArray19, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 2 + "'", int22 == 2);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 2 + "'", int23 == 2);
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertArrayEquals(doubleArray27, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertArrayEquals(doubleArray30, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(matrix35);
        org.junit.Assert.assertNotNull(matrixArray36);
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertNotNull(matrix39);
        org.junit.Assert.assertNotNull(matrix41);
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertArrayEquals(doubleArray44, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertArrayEquals(doubleArray47, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertNotNull(matrixArray51);
        org.junit.Assert.assertNotNull(matrix54);
        org.junit.Assert.assertNotNull(matrix55);
        org.junit.Assert.assertNotNull(matrix57);
        org.junit.Assert.assertNotNull(doubleArray60);
        org.junit.Assert.assertArrayEquals(doubleArray60, new double[] { 137.90576492663388d, (-1.0d) }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray61);
        org.junit.Assert.assertArrayEquals(doubleArray61, new double[] { (-24.931892522286255d), (-135.63701830716116d) }, 1.0E-15);
        org.junit.Assert.assertNotNull(matrix64);
        org.junit.Assert.assertNotNull(doubleArray67);
        org.junit.Assert.assertArrayEquals(doubleArray67, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray70);
        org.junit.Assert.assertArrayEquals(doubleArray70, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray71);
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + 2 + "'", int73 == 2);
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 2 + "'", int74 == 2);
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + 2 + "'", int75 == 2);
        org.junit.Assert.assertNotNull(matrixArray76);
        org.junit.Assert.assertNotNull(matrix77);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertNotNull(matrix80);
        org.junit.Assert.assertNotNull(matrix81);
        org.junit.Assert.assertNotNull(doubleArray84);
        org.junit.Assert.assertArrayEquals(doubleArray84, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray87);
        org.junit.Assert.assertArrayEquals(doubleArray87, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray88);
        org.junit.Assert.assertNotNull(matrix93);
        org.junit.Assert.assertNotNull(matrix95);
        org.junit.Assert.assertTrue("'" + boolean97 + "' != '" + false + "'", boolean97 == false);
    }

    @Test
    public void test4827() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4827");
        com.operations.Matrix.Matrix matrix2 = com.operations.Matrix.MatrixTransformations.project2D(137.15495886388925d, (-0.017187291480513275d));
        double[][] doubleArray3 = matrix2.getData();
        org.junit.Assert.assertNotNull(matrix2);
        org.junit.Assert.assertNotNull(doubleArray3);
    }

    @Test
    public void test4828() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4828");
        com.operations.Matrix.Matrix matrix2 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0L, (double) (byte) 10);
        double[] doubleArray5 = new double[] { 10, 'a' };
        double[] doubleArray8 = new double[] { 10, 'a' };
        double[][] doubleArray9 = new double[][] { doubleArray5, doubleArray8 };
        com.operations.Matrix.Matrix matrix10 = new com.operations.Matrix.Matrix(doubleArray9);
        int int11 = matrix10.getCols();
        int int12 = matrix10.getCols();
        int int13 = matrix10.getCols();
        com.operations.Matrix.Matrix[] matrixArray14 = com.operations.Matrix.MatrixDecompositions.luDecomposition(matrix10);
        com.operations.Matrix.Matrix matrix15 = com.operations.Matrix.MatrixOperations.multiply(matrix2, matrix10);
        com.operations.Matrix.Matrix matrix17 = com.operations.Matrix.MatrixTransformations.rotate2D((double) (short) 100);
        boolean boolean19 = com.operations.Matrix.MatrixUtils.compare(matrix10, matrix17, (double) (byte) 0);
        com.operations.Matrix.Matrix[] matrixArray20 = com.operations.Matrix.MatrixDecompositions.luDecomposition(matrix10);
        com.operations.Matrix.Matrix matrix21 = com.operations.Matrix.MatrixOperations.transpose(matrix10);
        com.operations.Matrix.Matrix matrix24 = com.operations.Matrix.MatrixTransformations.scale2D((double) 1.0f, (double) 1);
        com.operations.Matrix.Matrix matrix26 = com.operations.Matrix.MatrixTransformations.rotate2D((double) 1.0f);
        com.operations.Matrix.Matrix matrix29 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0L, (double) (byte) 10);
        int int30 = matrix29.getRows();
        com.operations.Matrix.Matrix matrix32 = com.operations.Matrix.MatrixOperations.scalarMultiply(matrix29, (double) 2);
        double double33 = com.operations.Matrix.MatrixUtils.frobeniusNorm(matrix29);
        com.operations.Matrix.Matrix matrix36 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0L, (double) (byte) 10);
        int int37 = matrix36.getRows();
        com.operations.Matrix.Matrix matrix39 = com.operations.Matrix.MatrixOperations.scalarMultiply(matrix36, (double) 2);
        com.operations.Matrix.Matrix matrix40 = com.operations.Matrix.MatrixOperations.subtract(matrix29, matrix39);
        com.operations.Matrix.Matrix matrix41 = com.operations.Matrix.MatrixOperations.add(matrix26, matrix39);
        boolean boolean43 = com.operations.Matrix.MatrixUtils.compare(matrix24, matrix26, (double) (byte) -1);
        com.operations.Matrix.Matrix matrix44 = com.operations.Matrix.MatrixOperations.subtract(matrix21, matrix24);
        double double45 = com.operations.Matrix.MatrixUtils.frobeniusNorm(matrix44);
        com.operations.Matrix.Matrix matrix47 = com.operations.Matrix.MatrixTransformations.rotate2D(100.0d);
        int int48 = matrix47.getCols();
        int int49 = matrix47.getRows();
        com.operations.Matrix.Matrix matrix50 = com.operations.Matrix.MatrixOperations.subtract(matrix44, matrix47);
        com.operations.Matrix.Matrix[] matrixArray51 = com.operations.Matrix.MatrixDecompositions.luDecomposition(matrix50);
        boolean boolean52 = com.operations.Matrix.MatrixUtils.isSymmetric(matrix50);
        org.junit.Assert.assertNotNull(matrix2);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertArrayEquals(doubleArray5, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertArrayEquals(doubleArray8, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 2 + "'", int11 == 2);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 2 + "'", int12 == 2);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 2 + "'", int13 == 2);
        org.junit.Assert.assertNotNull(matrixArray14);
        org.junit.Assert.assertNotNull(matrix15);
        org.junit.Assert.assertNotNull(matrix17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(matrixArray20);
        org.junit.Assert.assertNotNull(matrix21);
        org.junit.Assert.assertNotNull(matrix24);
        org.junit.Assert.assertNotNull(matrix26);
        org.junit.Assert.assertNotNull(matrix29);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 2 + "'", int30 == 2);
        org.junit.Assert.assertNotNull(matrix32);
        org.junit.Assert.assertTrue("'" + double33 + "' != '" + 10.0d + "'", double33 == 10.0d);
        org.junit.Assert.assertNotNull(matrix36);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 2 + "'", int37 == 2);
        org.junit.Assert.assertNotNull(matrix39);
        org.junit.Assert.assertNotNull(matrix40);
        org.junit.Assert.assertNotNull(matrix41);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(matrix44);
        org.junit.Assert.assertTrue("'" + double45 + "' != '" + 137.13497001129946d + "'", double45 == 137.13497001129946d);
        org.junit.Assert.assertNotNull(matrix47);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 2 + "'", int48 == 2);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 2 + "'", int49 == 2);
        org.junit.Assert.assertNotNull(matrix50);
        org.junit.Assert.assertNotNull(matrixArray51);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
    }

    @Test
    public void test4829() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4829");
        com.operations.Matrix.Matrix matrix1 = com.operations.Matrix.MatrixTransformations.rotate2D((double) '4');
        double[] doubleArray4 = new double[] { 10, 'a' };
        double[] doubleArray7 = new double[] { 10, 'a' };
        double[][] doubleArray8 = new double[][] { doubleArray4, doubleArray7 };
        com.operations.Matrix.Matrix matrix9 = new com.operations.Matrix.Matrix(doubleArray8);
        com.operations.Matrix.Matrix matrix10 = new com.operations.Matrix.Matrix(doubleArray8);
        com.operations.Matrix.Matrix matrix12 = com.operations.Matrix.MatrixTransformations.rotate2D((double) (short) 100);
        double[] doubleArray15 = new double[] { 137.90576492663388d, (byte) -1 };
        double[] doubleArray16 = com.operations.Matrix.MatrixSolver.solveGaussian(matrix12, doubleArray15);
        com.operations.Matrix.Matrix matrix17 = com.operations.Matrix.MatrixOperations.add(matrix10, matrix12);
        boolean boolean18 = com.operations.Matrix.MatrixUtils.isSymmetric(matrix17);
        boolean boolean20 = com.operations.Matrix.MatrixUtils.compare(matrix1, matrix17, 364.0054944640259d);
        com.operations.Matrix.Matrix[] matrixArray21 = com.operations.Matrix.MatrixDecompositions.luDecomposition(matrix17);
        com.operations.Matrix.Matrix matrix23 = com.operations.Matrix.MatrixOperations.scalarMultiply(matrix17, (double) 1L);
        // The following exception was thrown during execution in test generation
        try {
            double double26 = matrix17.getValue((-1), 100);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(matrix1);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertArrayEquals(doubleArray4, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertArrayEquals(doubleArray7, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertNotNull(matrix12);
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertArrayEquals(doubleArray15, new double[] { 137.90576492663388d, (-1.0d) }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertArrayEquals(doubleArray16, new double[] { (-24.931892522286255d), (-135.63701830716116d) }, 1.0E-15);
        org.junit.Assert.assertNotNull(matrix17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertNotNull(matrixArray21);
        org.junit.Assert.assertNotNull(matrix23);
    }

    @Test
    public void test4830() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4830");
        // The following exception was thrown during execution in test generation
        try {
            com.operations.Matrix.Matrix matrix4 = com.operations.Matrix.MatrixUtils.generateRandomMatrix((int) (short) 1, (int) (byte) -1, (int) (byte) 1, 97);
            org.junit.Assert.fail("Expected exception of type java.lang.NegativeArraySizeException; message: -1");
        } catch (java.lang.NegativeArraySizeException e) {
            // Expected exception.
        }
    }

    @Test
    public void test4831() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4831");
        com.operations.Matrix.Matrix matrix2 = com.operations.Matrix.MatrixTransformations.project2D(100.00499987500625d, 10.0d);
        java.lang.Class<?> wildcardClass3 = matrix2.getClass();
        org.junit.Assert.assertNotNull(matrix2);
        org.junit.Assert.assertNotNull(wildcardClass3);
    }

    @Test
    public void test4832() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4832");
        com.operations.Matrix.Matrix matrix2 = com.operations.Matrix.MatrixTransformations.scale2D(3500.0d, 69377.65132237368d);
        org.junit.Assert.assertNotNull(matrix2);
    }

    @Test
    public void test4833() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4833");
        com.operations.Matrix.Matrix matrix2 = new com.operations.Matrix.Matrix((int) '#', 100);
        // The following exception was thrown during execution in test generation
        try {
            com.operations.Matrix.Matrix[] matrixArray3 = com.operations.Matrix.MatrixDecompositions.luDecomposition(matrix2);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Matrix must be square for LU decomposition.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test4834() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4834");
        com.operations.Matrix.Matrix matrix2 = new com.operations.Matrix.Matrix((int) (short) 100, 1);
        com.operations.Matrix.Matrix matrix3 = com.operations.Matrix.MatrixOperations.transpose(matrix2);
        com.operations.Matrix.Matrix matrix5 = com.operations.Matrix.MatrixTransformations.rotate2D((double) (short) 100);
        double[] doubleArray8 = new double[] { 137.90576492663388d, (byte) -1 };
        double[] doubleArray9 = com.operations.Matrix.MatrixSolver.solveGaussian(matrix5, doubleArray8);
        com.operations.Matrix.Matrix matrix12 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0L, (double) (byte) 10);
        double[] doubleArray15 = new double[] { 10, 'a' };
        double[] doubleArray18 = new double[] { 10, 'a' };
        double[][] doubleArray19 = new double[][] { doubleArray15, doubleArray18 };
        com.operations.Matrix.Matrix matrix20 = new com.operations.Matrix.Matrix(doubleArray19);
        int int21 = matrix20.getCols();
        int int22 = matrix20.getCols();
        int int23 = matrix20.getCols();
        com.operations.Matrix.Matrix[] matrixArray24 = com.operations.Matrix.MatrixDecompositions.luDecomposition(matrix20);
        com.operations.Matrix.Matrix matrix25 = com.operations.Matrix.MatrixOperations.multiply(matrix12, matrix20);
        boolean boolean27 = com.operations.Matrix.MatrixUtils.compare(matrix5, matrix12, (double) (-1L));
        boolean boolean28 = com.operations.Matrix.MatrixUtils.isSymmetric(matrix5);
        int int29 = matrix5.getCols();
        com.operations.Matrix.Matrix[] matrixArray30 = com.operations.Matrix.MatrixDecompositions.luDecomposition(matrix5);
        double double31 = com.operations.Matrix.MatrixUtils.frobeniusNorm(matrix5);
        double double32 = com.operations.Matrix.MatrixUtils.frobeniusNorm(matrix5);
        double[][] doubleArray33 = matrix5.getData();
        com.operations.Matrix.Matrix matrix34 = new com.operations.Matrix.Matrix(doubleArray33);
        double[] doubleArray37 = new double[] { 10, 'a' };
        double[] doubleArray40 = new double[] { 10, 'a' };
        double[][] doubleArray41 = new double[][] { doubleArray37, doubleArray40 };
        com.operations.Matrix.Matrix matrix42 = new com.operations.Matrix.Matrix(doubleArray41);
        int int43 = matrix42.getCols();
        com.operations.Matrix.Matrix matrix44 = com.operations.Matrix.MatrixOperations.subtract(matrix34, matrix42);
        // The following exception was thrown during execution in test generation
        try {
            com.operations.Matrix.Matrix matrix45 = com.operations.Matrix.MatrixOperations.subtract(matrix2, matrix42);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Matrices must have the same dimensions for subtraction.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(matrix3);
        org.junit.Assert.assertNotNull(matrix5);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertArrayEquals(doubleArray8, new double[] { 137.90576492663388d, (-1.0d) }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertArrayEquals(doubleArray9, new double[] { (-24.931892522286255d), (-135.63701830716116d) }, 1.0E-15);
        org.junit.Assert.assertNotNull(matrix12);
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertArrayEquals(doubleArray15, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertArrayEquals(doubleArray18, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 2 + "'", int21 == 2);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 2 + "'", int22 == 2);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 2 + "'", int23 == 2);
        org.junit.Assert.assertNotNull(matrixArray24);
        org.junit.Assert.assertNotNull(matrix25);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 2 + "'", int29 == 2);
        org.junit.Assert.assertNotNull(matrixArray30);
        org.junit.Assert.assertTrue("'" + double31 + "' != '" + 1.414213562373095d + "'", double31 == 1.414213562373095d);
        org.junit.Assert.assertTrue("'" + double32 + "' != '" + 1.414213562373095d + "'", double32 == 1.414213562373095d);
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertArrayEquals(doubleArray37, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertArrayEquals(doubleArray40, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 2 + "'", int43 == 2);
        org.junit.Assert.assertNotNull(matrix44);
    }

    @Test
    public void test4835() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4835");
        com.operations.Matrix.Matrix matrix2 = com.operations.Matrix.MatrixTransformations.scale2D((double) ' ', (double) (short) 100);
        org.junit.Assert.assertNotNull(matrix2);
    }

    @Test
    public void test4836() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4836");
        com.operations.Matrix.Matrix matrix5 = com.operations.Matrix.MatrixUtils.generateRandomMatrix(2, (int) '4', 0, (int) (byte) 10, (long) ' ');
        double[][] doubleArray6 = matrix5.getData();
        com.operations.Matrix.Matrix matrix7 = new com.operations.Matrix.Matrix(doubleArray6);
        boolean boolean8 = com.operations.Matrix.MatrixUtils.isSquare(matrix7);
        org.junit.Assert.assertNotNull(matrix5);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
    }

    @Test
    public void test4837() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4837");
        double[] doubleArray2 = new double[] { 10, 'a' };
        double[] doubleArray5 = new double[] { 10, 'a' };
        double[][] doubleArray6 = new double[][] { doubleArray2, doubleArray5 };
        com.operations.Matrix.Matrix matrix7 = new com.operations.Matrix.Matrix(doubleArray6);
        int int8 = matrix7.getCols();
        int int9 = matrix7.getCols();
        matrix7.print();
        double[] doubleArray13 = new double[] { 10, 'a' };
        double[] doubleArray16 = new double[] { 10, 'a' };
        double[][] doubleArray17 = new double[][] { doubleArray13, doubleArray16 };
        com.operations.Matrix.Matrix matrix18 = new com.operations.Matrix.Matrix(doubleArray17);
        boolean boolean20 = com.operations.Matrix.MatrixUtils.compare(matrix7, matrix18, (double) (-1));
        int int21 = matrix18.getCols();
        com.operations.Matrix.Matrix[] matrixArray22 = com.operations.Matrix.MatrixDecompositions.luDecomposition(matrix18);
        int int23 = matrix18.getCols();
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertArrayEquals(doubleArray2, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertArrayEquals(doubleArray5, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 2 + "'", int8 == 2);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 2 + "'", int9 == 2);
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertArrayEquals(doubleArray13, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertArrayEquals(doubleArray16, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 2 + "'", int21 == 2);
        org.junit.Assert.assertNotNull(matrixArray22);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 2 + "'", int23 == 2);
    }

    @Test
    public void test4838() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4838");
        com.operations.Matrix.Matrix matrix2 = new com.operations.Matrix.Matrix(2, (int) (short) 1);
        com.operations.Matrix.Matrix matrix3 = com.operations.Matrix.MatrixOperations.transpose(matrix2);
        matrix3.print();
        org.junit.Assert.assertNotNull(matrix3);
    }

    @Test
    public void test4839() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4839");
        com.operations.Matrix.Matrix matrix2 = com.operations.Matrix.MatrixTransformations.scale2D((double) 1.0f, (double) 1);
        com.operations.Matrix.Matrix matrix4 = com.operations.Matrix.MatrixTransformations.rotate2D((double) 1.0f);
        com.operations.Matrix.Matrix matrix7 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0L, (double) (byte) 10);
        int int8 = matrix7.getRows();
        com.operations.Matrix.Matrix matrix10 = com.operations.Matrix.MatrixOperations.scalarMultiply(matrix7, (double) 2);
        double double11 = com.operations.Matrix.MatrixUtils.frobeniusNorm(matrix7);
        com.operations.Matrix.Matrix matrix14 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0L, (double) (byte) 10);
        int int15 = matrix14.getRows();
        com.operations.Matrix.Matrix matrix17 = com.operations.Matrix.MatrixOperations.scalarMultiply(matrix14, (double) 2);
        com.operations.Matrix.Matrix matrix18 = com.operations.Matrix.MatrixOperations.subtract(matrix7, matrix17);
        com.operations.Matrix.Matrix matrix19 = com.operations.Matrix.MatrixOperations.add(matrix4, matrix17);
        boolean boolean21 = com.operations.Matrix.MatrixUtils.compare(matrix2, matrix4, (double) (byte) -1);
        com.operations.Matrix.Matrix matrix22 = com.operations.Matrix.MatrixOperations.transpose(matrix4);
        com.operations.Matrix.Matrix matrix25 = com.operations.Matrix.MatrixTransformations.project2D((double) 10L, 10.0d);
        com.operations.Matrix.Matrix matrix27 = com.operations.Matrix.MatrixTransformations.rotate2D((double) (short) 100);
        double[] doubleArray30 = new double[] { 137.90576492663388d, (byte) -1 };
        double[] doubleArray31 = com.operations.Matrix.MatrixSolver.solveGaussian(matrix27, doubleArray30);
        com.operations.Matrix.Matrix matrix34 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0L, (double) (byte) 10);
        double[] doubleArray37 = new double[] { 10, 'a' };
        double[] doubleArray40 = new double[] { 10, 'a' };
        double[][] doubleArray41 = new double[][] { doubleArray37, doubleArray40 };
        com.operations.Matrix.Matrix matrix42 = new com.operations.Matrix.Matrix(doubleArray41);
        int int43 = matrix42.getCols();
        int int44 = matrix42.getCols();
        int int45 = matrix42.getCols();
        com.operations.Matrix.Matrix[] matrixArray46 = com.operations.Matrix.MatrixDecompositions.luDecomposition(matrix42);
        com.operations.Matrix.Matrix matrix47 = com.operations.Matrix.MatrixOperations.multiply(matrix34, matrix42);
        boolean boolean49 = com.operations.Matrix.MatrixUtils.compare(matrix27, matrix34, (double) (-1L));
        double[][] doubleArray50 = matrix27.getData();
        com.operations.Matrix.Matrix matrix52 = com.operations.Matrix.MatrixTransformations.rotate2D((double) (short) 100);
        double[] doubleArray55 = new double[] { 137.90576492663388d, (byte) -1 };
        double[] doubleArray56 = com.operations.Matrix.MatrixSolver.solveGaussian(matrix52, doubleArray55);
        double[] doubleArray57 = com.operations.Matrix.MatrixSolver.solveGaussian(matrix27, doubleArray55);
        double[] doubleArray58 = com.operations.Matrix.MatrixSolver.solveGaussian(matrix25, doubleArray57);
        double[] doubleArray59 = com.operations.Matrix.MatrixSolver.solveGaussian(matrix4, doubleArray58);
        com.operations.Matrix.Matrix matrix60 = com.operations.Matrix.MatrixDecompositions.choleskyDecomposition(matrix4);
        int int61 = matrix60.getCols();
        com.operations.Matrix.Matrix matrix67 = com.operations.Matrix.MatrixUtils.generateRandomMatrix(100, (int) (byte) 1, (int) '#', (int) '#', 1L);
        double double70 = matrix67.getValue((int) '4', 0);
        double double71 = com.operations.Matrix.MatrixUtils.frobeniusNorm(matrix67);
        int int72 = matrix67.getCols();
        boolean boolean73 = com.operations.Matrix.MatrixUtils.isSymmetric(matrix67);
        boolean boolean75 = com.operations.Matrix.MatrixUtils.compare(matrix60, matrix67, (double) (short) 10);
        boolean boolean76 = com.operations.Matrix.MatrixUtils.isSquare(matrix60);
        org.junit.Assert.assertNotNull(matrix2);
        org.junit.Assert.assertNotNull(matrix4);
        org.junit.Assert.assertNotNull(matrix7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 2 + "'", int8 == 2);
        org.junit.Assert.assertNotNull(matrix10);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 10.0d + "'", double11 == 10.0d);
        org.junit.Assert.assertNotNull(matrix14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 2 + "'", int15 == 2);
        org.junit.Assert.assertNotNull(matrix17);
        org.junit.Assert.assertNotNull(matrix18);
        org.junit.Assert.assertNotNull(matrix19);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(matrix22);
        org.junit.Assert.assertNotNull(matrix25);
        org.junit.Assert.assertNotNull(matrix27);
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertArrayEquals(doubleArray30, new double[] { 137.90576492663388d, (-1.0d) }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertArrayEquals(doubleArray31, new double[] { (-24.931892522286255d), (-135.63701830716116d) }, 1.0E-15);
        org.junit.Assert.assertNotNull(matrix34);
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertArrayEquals(doubleArray37, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertArrayEquals(doubleArray40, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 2 + "'", int43 == 2);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 2 + "'", int44 == 2);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 2 + "'", int45 == 2);
        org.junit.Assert.assertNotNull(matrixArray46);
        org.junit.Assert.assertNotNull(matrix47);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertNotNull(matrix52);
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertArrayEquals(doubleArray55, new double[] { 137.90576492663388d, (-1.0d) }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray56);
        org.junit.Assert.assertArrayEquals(doubleArray56, new double[] { (-24.931892522286255d), (-135.63701830716116d) }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray57);
        org.junit.Assert.assertArrayEquals(doubleArray57, new double[] { (-24.931892522286255d), (-135.63701830716116d) }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray58);
        org.junit.Assert.assertArrayEquals(doubleArray58, new double[] { (-2.4931892522286256d), (-13.563701830716116d) }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray59);
        org.junit.Assert.assertArrayEquals(doubleArray59, new double[] { (-2.7295287645732618d), (-13.518123861075072d) }, 1.0E-15);
        org.junit.Assert.assertNotNull(matrix60);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 2 + "'", int61 == 2);
        org.junit.Assert.assertNotNull(matrix67);
        org.junit.Assert.assertTrue("'" + double70 + "' != '" + 35.0d + "'", double70 == 35.0d);
        org.junit.Assert.assertTrue("'" + double71 + "' != '" + 350.0d + "'", double71 == 350.0d);
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 1 + "'", int72 == 1);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + true + "'", boolean76 == true);
    }

    @Test
    public void test4840() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4840");
        com.operations.Matrix.Matrix matrix1 = com.operations.Matrix.MatrixTransformations.rotate2D(1.7320508075688774d);
        double double2 = com.operations.Matrix.MatrixUtils.frobeniusNorm(matrix1);
        matrix1.print();
        org.junit.Assert.assertNotNull(matrix1);
        org.junit.Assert.assertTrue("'" + double2 + "' != '" + 1.4142135623730951d + "'", double2 == 1.4142135623730951d);
    }

    @Test
    public void test4841() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4841");
        com.operations.Matrix.Matrix matrix1 = com.operations.Matrix.MatrixTransformations.rotate2D((double) (byte) 0);
        int int2 = matrix1.getRows();
        com.operations.Matrix.Matrix matrix3 = com.operations.Matrix.MatrixDecompositions.choleskyDecomposition(matrix1);
        org.junit.Assert.assertNotNull(matrix1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 2 + "'", int2 == 2);
        org.junit.Assert.assertNotNull(matrix3);
    }

    @Test
    public void test4842() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4842");
        com.operations.Matrix.Matrix matrix5 = com.operations.Matrix.MatrixUtils.generateRandomMatrix(100, 1, (-1), (int) (byte) -1, (long) (short) 1);
        com.operations.Matrix.Matrix matrix7 = com.operations.Matrix.MatrixOperations.scalarMultiply(matrix5, (double) (byte) -1);
        matrix5.print();
        org.junit.Assert.assertNotNull(matrix5);
        org.junit.Assert.assertNotNull(matrix7);
    }

    @Test
    public void test4843() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4843");
        com.operations.Matrix.Matrix matrix1 = com.operations.Matrix.MatrixTransformations.rotate2D(100.0d);
        int int2 = matrix1.getCols();
        double[][] doubleArray3 = matrix1.getData();
        double double4 = com.operations.Matrix.MatrixUtils.frobeniusNorm(matrix1);
        com.operations.Matrix.Matrix matrix6 = com.operations.Matrix.MatrixOperations.scalarMultiply(matrix1, (double) (short) 10);
        com.operations.Matrix.Matrix[] matrixArray7 = com.operations.Matrix.MatrixDecompositions.luDecomposition(matrix1);
        com.operations.Matrix.Matrix[] matrixArray8 = com.operations.Matrix.MatrixDecompositions.luDecomposition(matrix1);
        com.operations.Matrix.Matrix matrix11 = com.operations.Matrix.MatrixTransformations.scale2D((double) 100L, 1.0d);
        com.operations.Matrix.Matrix matrix12 = com.operations.Matrix.MatrixOperations.transpose(matrix11);
        com.operations.Matrix.Matrix matrix15 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0L, (double) (byte) 10);
        double[] doubleArray18 = new double[] { 10, 'a' };
        double[] doubleArray21 = new double[] { 10, 'a' };
        double[][] doubleArray22 = new double[][] { doubleArray18, doubleArray21 };
        com.operations.Matrix.Matrix matrix23 = new com.operations.Matrix.Matrix(doubleArray22);
        int int24 = matrix23.getCols();
        int int25 = matrix23.getCols();
        int int26 = matrix23.getCols();
        com.operations.Matrix.Matrix[] matrixArray27 = com.operations.Matrix.MatrixDecompositions.luDecomposition(matrix23);
        com.operations.Matrix.Matrix matrix28 = com.operations.Matrix.MatrixOperations.multiply(matrix15, matrix23);
        int int29 = matrix23.getRows();
        boolean boolean31 = com.operations.Matrix.MatrixUtils.compare(matrix11, matrix23, (-1.0d));
        double[] doubleArray34 = new double[] { 10, 'a' };
        double[] doubleArray37 = new double[] { 10, 'a' };
        double[][] doubleArray38 = new double[][] { doubleArray34, doubleArray37 };
        com.operations.Matrix.Matrix matrix39 = new com.operations.Matrix.Matrix(doubleArray38);
        int int40 = matrix39.getCols();
        int int41 = matrix39.getCols();
        boolean boolean42 = com.operations.Matrix.MatrixUtils.isSquare(matrix39);
        com.operations.Matrix.Matrix matrix43 = com.operations.Matrix.MatrixDecompositions.choleskyDecomposition(matrix39);
        com.operations.Matrix.Matrix matrix46 = com.operations.Matrix.MatrixTransformations.project2D(0.0d, (double) 0);
        com.operations.Matrix.Matrix matrix47 = com.operations.Matrix.MatrixOperations.subtract(matrix43, matrix46);
        double[] doubleArray50 = new double[] { 10, 'a' };
        double[] doubleArray53 = new double[] { 10, 'a' };
        double[][] doubleArray54 = new double[][] { doubleArray50, doubleArray53 };
        com.operations.Matrix.Matrix matrix55 = new com.operations.Matrix.Matrix(doubleArray54);
        com.operations.Matrix.Matrix matrix56 = new com.operations.Matrix.Matrix(doubleArray54);
        com.operations.Matrix.Matrix matrix58 = com.operations.Matrix.MatrixTransformations.rotate2D((double) (short) 100);
        double[] doubleArray61 = new double[] { 137.90576492663388d, (byte) -1 };
        double[] doubleArray62 = com.operations.Matrix.MatrixSolver.solveGaussian(matrix58, doubleArray61);
        com.operations.Matrix.Matrix matrix63 = com.operations.Matrix.MatrixOperations.add(matrix56, matrix58);
        com.operations.Matrix.Matrix matrix64 = com.operations.Matrix.MatrixOperations.transpose(matrix58);
        int int65 = matrix58.getCols();
        int int66 = matrix58.getRows();
        com.operations.Matrix.Matrix matrix67 = com.operations.Matrix.MatrixOperations.subtract(matrix47, matrix58);
        double[][] doubleArray68 = matrix47.getData();
        com.operations.Matrix.Matrix matrix69 = com.operations.Matrix.MatrixOperations.multiply(matrix11, matrix47);
        double double70 = com.operations.Matrix.MatrixUtils.frobeniusNorm(matrix47);
        com.operations.Matrix.Matrix matrix71 = com.operations.Matrix.MatrixOperations.add(matrix1, matrix47);
        com.operations.Matrix.Matrix matrix72 = null;
        // The following exception was thrown during execution in test generation
        try {
            com.operations.Matrix.Matrix matrix73 = com.operations.Matrix.MatrixOperations.subtract(matrix1, matrix72);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(matrix1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 2 + "'", int2 == 2);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertTrue("'" + double4 + "' != '" + 1.414213562373095d + "'", double4 == 1.414213562373095d);
        org.junit.Assert.assertNotNull(matrix6);
        org.junit.Assert.assertNotNull(matrixArray7);
        org.junit.Assert.assertNotNull(matrixArray8);
        org.junit.Assert.assertNotNull(matrix11);
        org.junit.Assert.assertNotNull(matrix12);
        org.junit.Assert.assertNotNull(matrix15);
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertArrayEquals(doubleArray18, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertArrayEquals(doubleArray21, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 2 + "'", int24 == 2);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 2 + "'", int25 == 2);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 2 + "'", int26 == 2);
        org.junit.Assert.assertNotNull(matrixArray27);
        org.junit.Assert.assertNotNull(matrix28);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 2 + "'", int29 == 2);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertArrayEquals(doubleArray34, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertArrayEquals(doubleArray37, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 2 + "'", int40 == 2);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 2 + "'", int41 == 2);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertNotNull(matrix43);
        org.junit.Assert.assertNotNull(matrix46);
        org.junit.Assert.assertNotNull(matrix47);
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertArrayEquals(doubleArray50, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertArrayEquals(doubleArray53, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray54);
        org.junit.Assert.assertNotNull(matrix58);
        org.junit.Assert.assertNotNull(doubleArray61);
        org.junit.Assert.assertArrayEquals(doubleArray61, new double[] { 137.90576492663388d, (-1.0d) }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray62);
        org.junit.Assert.assertArrayEquals(doubleArray62, new double[] { (-24.931892522286255d), (-135.63701830716116d) }, 1.0E-15);
        org.junit.Assert.assertNotNull(matrix63);
        org.junit.Assert.assertNotNull(matrix64);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 2 + "'", int65 == 2);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 2 + "'", int66 == 2);
        org.junit.Assert.assertNotNull(matrix67);
        org.junit.Assert.assertNotNull(doubleArray68);
        org.junit.Assert.assertNotNull(matrix69);
        org.junit.Assert.assertTrue("'" + double70 + "' != '" + 10.344080432788601d + "'", double70 == 10.344080432788601d);
        org.junit.Assert.assertNotNull(matrix71);
    }

    @Test
    public void test4844() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4844");
        com.operations.Matrix.Matrix matrix2 = com.operations.Matrix.MatrixTransformations.scale2D(365.8209944768069d, 36.45545226711637d);
        boolean boolean3 = com.operations.Matrix.MatrixUtils.isSymmetric(matrix2);
        org.junit.Assert.assertNotNull(matrix2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
    }

    @Test
    public void test4845() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4845");
        com.operations.Matrix.Matrix matrix2 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0L, (double) (byte) 10);
        double[] doubleArray5 = new double[] { 10, 'a' };
        double[] doubleArray8 = new double[] { 10, 'a' };
        double[][] doubleArray9 = new double[][] { doubleArray5, doubleArray8 };
        com.operations.Matrix.Matrix matrix10 = new com.operations.Matrix.Matrix(doubleArray9);
        int int11 = matrix10.getCols();
        int int12 = matrix10.getCols();
        int int13 = matrix10.getCols();
        com.operations.Matrix.Matrix[] matrixArray14 = com.operations.Matrix.MatrixDecompositions.luDecomposition(matrix10);
        com.operations.Matrix.Matrix matrix15 = com.operations.Matrix.MatrixOperations.multiply(matrix2, matrix10);
        com.operations.Matrix.Matrix matrix17 = com.operations.Matrix.MatrixTransformations.rotate2D((double) (short) 100);
        boolean boolean19 = com.operations.Matrix.MatrixUtils.compare(matrix10, matrix17, (double) (byte) 0);
        com.operations.Matrix.Matrix matrix20 = com.operations.Matrix.MatrixOperations.transpose(matrix10);
        com.operations.Matrix.Matrix matrix22 = com.operations.Matrix.MatrixOperations.scalarMultiply(matrix20, (double) 10);
        com.operations.Matrix.Matrix matrix23 = com.operations.Matrix.MatrixOperations.transpose(matrix22);
        com.operations.Matrix.Matrix matrix25 = com.operations.Matrix.MatrixTransformations.rotate2D(1.414213562373095d);
        double[][] doubleArray26 = matrix25.getData();
        com.operations.Matrix.Matrix matrix27 = new com.operations.Matrix.Matrix(doubleArray26);
        com.operations.Matrix.Matrix matrix29 = com.operations.Matrix.MatrixTransformations.rotate2D((double) (short) 100);
        double[] doubleArray32 = new double[] { 137.90576492663388d, (byte) -1 };
        double[] doubleArray33 = com.operations.Matrix.MatrixSolver.solveGaussian(matrix29, doubleArray32);
        com.operations.Matrix.Matrix matrix36 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0L, (double) (byte) 10);
        double[] doubleArray39 = new double[] { 10, 'a' };
        double[] doubleArray42 = new double[] { 10, 'a' };
        double[][] doubleArray43 = new double[][] { doubleArray39, doubleArray42 };
        com.operations.Matrix.Matrix matrix44 = new com.operations.Matrix.Matrix(doubleArray43);
        int int45 = matrix44.getCols();
        int int46 = matrix44.getCols();
        int int47 = matrix44.getCols();
        com.operations.Matrix.Matrix[] matrixArray48 = com.operations.Matrix.MatrixDecompositions.luDecomposition(matrix44);
        com.operations.Matrix.Matrix matrix49 = com.operations.Matrix.MatrixOperations.multiply(matrix36, matrix44);
        boolean boolean51 = com.operations.Matrix.MatrixUtils.compare(matrix29, matrix36, (double) (-1L));
        boolean boolean52 = com.operations.Matrix.MatrixUtils.isSymmetric(matrix29);
        com.operations.Matrix.Matrix matrix55 = com.operations.Matrix.MatrixTransformations.scale2D((double) (-1L), (double) '4');
        double[][] doubleArray56 = matrix55.getData();
        com.operations.Matrix.Matrix matrix57 = com.operations.Matrix.MatrixOperations.multiply(matrix29, matrix55);
        com.operations.Matrix.Matrix matrix59 = com.operations.Matrix.MatrixTransformations.rotate2D((double) (-1L));
        com.operations.Matrix.Matrix matrix61 = com.operations.Matrix.MatrixTransformations.rotate2D((double) (short) 100);
        double[] doubleArray64 = new double[] { 137.90576492663388d, (byte) -1 };
        double[] doubleArray65 = com.operations.Matrix.MatrixSolver.solveGaussian(matrix61, doubleArray64);
        double[] doubleArray66 = com.operations.Matrix.MatrixSolver.solveGaussian(matrix59, doubleArray64);
        double[] doubleArray67 = com.operations.Matrix.MatrixSolver.solveGaussian(matrix55, doubleArray64);
        double[] doubleArray68 = com.operations.Matrix.MatrixSolver.solveGaussian(matrix27, doubleArray64);
        // The following exception was thrown during execution in test generation
        try {
            double[] doubleArray69 = com.operations.Matrix.MatrixSolver.solveGaussian(matrix23, doubleArray68);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Matrix is singular or nearly singular.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(matrix2);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertArrayEquals(doubleArray5, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertArrayEquals(doubleArray8, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 2 + "'", int11 == 2);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 2 + "'", int12 == 2);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 2 + "'", int13 == 2);
        org.junit.Assert.assertNotNull(matrixArray14);
        org.junit.Assert.assertNotNull(matrix15);
        org.junit.Assert.assertNotNull(matrix17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(matrix20);
        org.junit.Assert.assertNotNull(matrix22);
        org.junit.Assert.assertNotNull(matrix23);
        org.junit.Assert.assertNotNull(matrix25);
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertNotNull(matrix29);
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertArrayEquals(doubleArray32, new double[] { 137.90576492663388d, (-1.0d) }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertArrayEquals(doubleArray33, new double[] { (-24.931892522286255d), (-135.63701830716116d) }, 1.0E-15);
        org.junit.Assert.assertNotNull(matrix36);
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertArrayEquals(doubleArray39, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertArrayEquals(doubleArray42, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 2 + "'", int45 == 2);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 2 + "'", int46 == 2);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 2 + "'", int47 == 2);
        org.junit.Assert.assertNotNull(matrixArray48);
        org.junit.Assert.assertNotNull(matrix49);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(matrix55);
        org.junit.Assert.assertNotNull(doubleArray56);
        org.junit.Assert.assertNotNull(matrix57);
        org.junit.Assert.assertNotNull(matrix59);
        org.junit.Assert.assertNotNull(matrix61);
        org.junit.Assert.assertNotNull(doubleArray64);
        org.junit.Assert.assertArrayEquals(doubleArray64, new double[] { 137.90576492663388d, (-1.0d) }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray65);
        org.junit.Assert.assertArrayEquals(doubleArray65, new double[] { (-24.931892522286255d), (-135.63701830716116d) }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray66);
        org.junit.Assert.assertArrayEquals(doubleArray66, new double[] { 137.90221361711127d, 1.4069397643877004d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray67);
        org.junit.Assert.assertArrayEquals(doubleArray67, new double[] { (-137.90576492663388d), (-0.019230769230769232d) }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray68);
        org.junit.Assert.assertArrayEquals(doubleArray68, new double[] { 137.8390783842506d, (-4.403234059237104d) }, 1.0E-15);
    }

    @Test
    public void test4846() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4846");
        com.operations.Matrix.Matrix matrix2 = com.operations.Matrix.MatrixTransformations.scale2D(1.4142135623730951d, 4412.984477652284d);
        org.junit.Assert.assertNotNull(matrix2);
    }

    @Test
    public void test4847() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4847");
        com.operations.Matrix.Matrix matrix2 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0L, (double) (byte) 10);
        int int3 = matrix2.getRows();
        com.operations.Matrix.Matrix matrix6 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0L, (double) (byte) 10);
        int int7 = matrix6.getRows();
        com.operations.Matrix.Matrix matrix9 = com.operations.Matrix.MatrixOperations.scalarMultiply(matrix6, (double) 2);
        com.operations.Matrix.Matrix matrix10 = com.operations.Matrix.MatrixOperations.subtract(matrix2, matrix6);
        com.operations.Matrix.Matrix matrix13 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0L, (double) (byte) 10);
        int int14 = matrix13.getRows();
        com.operations.Matrix.Matrix matrix20 = com.operations.Matrix.MatrixUtils.generateRandomMatrix(100, (int) (byte) 1, (int) '#', (int) '#', 1L);
        boolean boolean22 = com.operations.Matrix.MatrixUtils.compare(matrix13, matrix20, (double) 1.0f);
        com.operations.Matrix.Matrix matrix24 = com.operations.Matrix.MatrixOperations.scalarMultiply(matrix13, (double) 1L);
        boolean boolean26 = com.operations.Matrix.MatrixUtils.compare(matrix10, matrix24, 0.0d);
        com.operations.Matrix.Matrix matrix28 = com.operations.Matrix.MatrixTransformations.rotate2D((double) (short) 100);
        double[][] doubleArray29 = matrix28.getData();
        com.operations.Matrix.Matrix matrix30 = new com.operations.Matrix.Matrix(doubleArray29);
        com.operations.Matrix.Matrix matrix31 = com.operations.Matrix.MatrixOperations.add(matrix24, matrix30);
        com.operations.Matrix.Matrix matrix32 = com.operations.Matrix.MatrixOperations.transpose(matrix30);
        com.operations.Matrix.Matrix matrix35 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0L, (double) (byte) 10);
        double[] doubleArray38 = new double[] { 10, 'a' };
        double[] doubleArray41 = new double[] { 10, 'a' };
        double[][] doubleArray42 = new double[][] { doubleArray38, doubleArray41 };
        com.operations.Matrix.Matrix matrix43 = new com.operations.Matrix.Matrix(doubleArray42);
        int int44 = matrix43.getCols();
        int int45 = matrix43.getCols();
        int int46 = matrix43.getCols();
        com.operations.Matrix.Matrix[] matrixArray47 = com.operations.Matrix.MatrixDecompositions.luDecomposition(matrix43);
        com.operations.Matrix.Matrix matrix48 = com.operations.Matrix.MatrixOperations.multiply(matrix35, matrix43);
        com.operations.Matrix.Matrix matrix50 = com.operations.Matrix.MatrixTransformations.rotate2D((double) (short) 100);
        boolean boolean52 = com.operations.Matrix.MatrixUtils.compare(matrix43, matrix50, (double) (byte) 0);
        double[] doubleArray55 = new double[] { 10, 'a' };
        double[] doubleArray58 = new double[] { 10, 'a' };
        double[][] doubleArray59 = new double[][] { doubleArray55, doubleArray58 };
        com.operations.Matrix.Matrix matrix60 = new com.operations.Matrix.Matrix(doubleArray59);
        com.operations.Matrix.Matrix matrix61 = new com.operations.Matrix.Matrix(doubleArray59);
        com.operations.Matrix.Matrix matrix62 = new com.operations.Matrix.Matrix(doubleArray59);
        boolean boolean64 = com.operations.Matrix.MatrixUtils.compare(matrix43, matrix62, (double) (-1));
        int int65 = matrix43.getRows();
        boolean boolean67 = com.operations.Matrix.MatrixUtils.compare(matrix32, matrix43, 146.4308710620817d);
        double double68 = com.operations.Matrix.MatrixUtils.frobeniusNorm(matrix43);
        com.operations.Matrix.Matrix matrix71 = com.operations.Matrix.MatrixTransformations.scale2D((double) 10L, 35.0d);
        matrix71.print();
        boolean boolean73 = com.operations.Matrix.MatrixUtils.isSquare(matrix71);
        com.operations.Matrix.Matrix matrix75 = com.operations.Matrix.MatrixTransformations.rotate2D((-1.0d));
        com.operations.Matrix.Matrix matrix77 = com.operations.Matrix.MatrixTransformations.rotate2D((double) (-1L));
        com.operations.Matrix.Matrix matrix79 = com.operations.Matrix.MatrixTransformations.rotate2D((double) (short) 100);
        double[] doubleArray82 = new double[] { 137.90576492663388d, (byte) -1 };
        double[] doubleArray83 = com.operations.Matrix.MatrixSolver.solveGaussian(matrix79, doubleArray82);
        double[] doubleArray84 = com.operations.Matrix.MatrixSolver.solveGaussian(matrix77, doubleArray82);
        double[] doubleArray85 = com.operations.Matrix.MatrixSolver.solveGaussian(matrix75, doubleArray82);
        double[] doubleArray86 = com.operations.Matrix.MatrixSolver.solveGaussian(matrix71, doubleArray82);
        // The following exception was thrown during execution in test generation
        try {
            double[] doubleArray87 = com.operations.Matrix.MatrixSolver.solveGaussian(matrix43, doubleArray86);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Matrix is singular or nearly singular.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(matrix2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 2 + "'", int3 == 2);
        org.junit.Assert.assertNotNull(matrix6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 2 + "'", int7 == 2);
        org.junit.Assert.assertNotNull(matrix9);
        org.junit.Assert.assertNotNull(matrix10);
        org.junit.Assert.assertNotNull(matrix13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 2 + "'", int14 == 2);
        org.junit.Assert.assertNotNull(matrix20);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(matrix24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(matrix28);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertNotNull(matrix31);
        org.junit.Assert.assertNotNull(matrix32);
        org.junit.Assert.assertNotNull(matrix35);
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertArrayEquals(doubleArray38, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertArrayEquals(doubleArray41, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 2 + "'", int44 == 2);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 2 + "'", int45 == 2);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 2 + "'", int46 == 2);
        org.junit.Assert.assertNotNull(matrixArray47);
        org.junit.Assert.assertNotNull(matrix48);
        org.junit.Assert.assertNotNull(matrix50);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertArrayEquals(doubleArray55, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray58);
        org.junit.Assert.assertArrayEquals(doubleArray58, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray59);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 2 + "'", int65 == 2);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + true + "'", boolean67 == true);
        org.junit.Assert.assertTrue("'" + double68 + "' != '" + 137.90576492663388d + "'", double68 == 137.90576492663388d);
        org.junit.Assert.assertNotNull(matrix71);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + true + "'", boolean73 == true);
        org.junit.Assert.assertNotNull(matrix75);
        org.junit.Assert.assertNotNull(matrix77);
        org.junit.Assert.assertNotNull(matrix79);
        org.junit.Assert.assertNotNull(doubleArray82);
        org.junit.Assert.assertArrayEquals(doubleArray82, new double[] { 137.90576492663388d, (-1.0d) }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray83);
        org.junit.Assert.assertArrayEquals(doubleArray83, new double[] { (-24.931892522286255d), (-135.63701830716116d) }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray84);
        org.junit.Assert.assertArrayEquals(doubleArray84, new double[] { 137.90221361711127d, 1.4069397643877004d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray85);
        org.junit.Assert.assertArrayEquals(doubleArray85, new double[] { 137.90221361711127d, 1.4069397643877004d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray86);
        org.junit.Assert.assertArrayEquals(doubleArray86, new double[] { 13.790576492663387d, (-0.02857142857142857d) }, 1.0E-15);
    }

    @Test
    public void test4848() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4848");
        com.operations.Matrix.Matrix matrix2 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0L, (double) (byte) 10);
        double[] doubleArray5 = new double[] { 10, 'a' };
        double[] doubleArray8 = new double[] { 10, 'a' };
        double[][] doubleArray9 = new double[][] { doubleArray5, doubleArray8 };
        com.operations.Matrix.Matrix matrix10 = new com.operations.Matrix.Matrix(doubleArray9);
        int int11 = matrix10.getCols();
        int int12 = matrix10.getCols();
        int int13 = matrix10.getCols();
        com.operations.Matrix.Matrix[] matrixArray14 = com.operations.Matrix.MatrixDecompositions.luDecomposition(matrix10);
        com.operations.Matrix.Matrix matrix15 = com.operations.Matrix.MatrixOperations.multiply(matrix2, matrix10);
        com.operations.Matrix.Matrix matrix17 = com.operations.Matrix.MatrixTransformations.rotate2D((double) (short) 100);
        boolean boolean19 = com.operations.Matrix.MatrixUtils.compare(matrix10, matrix17, (double) (byte) 0);
        com.operations.Matrix.Matrix matrix20 = com.operations.Matrix.MatrixOperations.transpose(matrix10);
        com.operations.Matrix.Matrix matrix23 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0L, (double) (byte) 10);
        double[] doubleArray26 = new double[] { 10, 'a' };
        double[] doubleArray29 = new double[] { 10, 'a' };
        double[][] doubleArray30 = new double[][] { doubleArray26, doubleArray29 };
        com.operations.Matrix.Matrix matrix31 = new com.operations.Matrix.Matrix(doubleArray30);
        int int32 = matrix31.getCols();
        int int33 = matrix31.getCols();
        int int34 = matrix31.getCols();
        com.operations.Matrix.Matrix[] matrixArray35 = com.operations.Matrix.MatrixDecompositions.luDecomposition(matrix31);
        com.operations.Matrix.Matrix matrix36 = com.operations.Matrix.MatrixOperations.multiply(matrix23, matrix31);
        com.operations.Matrix.Matrix matrix38 = com.operations.Matrix.MatrixTransformations.rotate2D((double) (short) 100);
        boolean boolean40 = com.operations.Matrix.MatrixUtils.compare(matrix31, matrix38, (double) (byte) 0);
        double[] doubleArray43 = new double[] { 10, 'a' };
        double[] doubleArray46 = new double[] { 10, 'a' };
        double[][] doubleArray47 = new double[][] { doubleArray43, doubleArray46 };
        com.operations.Matrix.Matrix matrix48 = new com.operations.Matrix.Matrix(doubleArray47);
        com.operations.Matrix.Matrix matrix49 = new com.operations.Matrix.Matrix(doubleArray47);
        com.operations.Matrix.Matrix matrix50 = new com.operations.Matrix.Matrix(doubleArray47);
        boolean boolean52 = com.operations.Matrix.MatrixUtils.compare(matrix31, matrix50, (double) (-1));
        com.operations.Matrix.Matrix matrix55 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0L, (double) (byte) 10);
        double[] doubleArray58 = new double[] { 10, 'a' };
        double[] doubleArray61 = new double[] { 10, 'a' };
        double[][] doubleArray62 = new double[][] { doubleArray58, doubleArray61 };
        com.operations.Matrix.Matrix matrix63 = new com.operations.Matrix.Matrix(doubleArray62);
        int int64 = matrix63.getCols();
        int int65 = matrix63.getCols();
        int int66 = matrix63.getCols();
        com.operations.Matrix.Matrix[] matrixArray67 = com.operations.Matrix.MatrixDecompositions.luDecomposition(matrix63);
        com.operations.Matrix.Matrix matrix68 = com.operations.Matrix.MatrixOperations.multiply(matrix55, matrix63);
        boolean boolean70 = com.operations.Matrix.MatrixUtils.compare(matrix50, matrix55, (double) 10L);
        boolean boolean72 = com.operations.Matrix.MatrixUtils.compare(matrix20, matrix50, (double) 100L);
        com.operations.Matrix.Matrix matrix75 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0L, (double) (byte) 10);
        double[] doubleArray78 = new double[] { 10, 'a' };
        double[] doubleArray81 = new double[] { 10, 'a' };
        double[][] doubleArray82 = new double[][] { doubleArray78, doubleArray81 };
        com.operations.Matrix.Matrix matrix83 = new com.operations.Matrix.Matrix(doubleArray82);
        int int84 = matrix83.getCols();
        int int85 = matrix83.getCols();
        int int86 = matrix83.getCols();
        com.operations.Matrix.Matrix[] matrixArray87 = com.operations.Matrix.MatrixDecompositions.luDecomposition(matrix83);
        com.operations.Matrix.Matrix matrix88 = com.operations.Matrix.MatrixOperations.multiply(matrix75, matrix83);
        int int89 = matrix83.getRows();
        int int90 = matrix83.getCols();
        com.operations.Matrix.Matrix matrix91 = com.operations.Matrix.MatrixOperations.subtract(matrix50, matrix83);
        double[][] doubleArray92 = matrix91.getData();
        org.junit.Assert.assertNotNull(matrix2);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertArrayEquals(doubleArray5, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertArrayEquals(doubleArray8, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 2 + "'", int11 == 2);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 2 + "'", int12 == 2);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 2 + "'", int13 == 2);
        org.junit.Assert.assertNotNull(matrixArray14);
        org.junit.Assert.assertNotNull(matrix15);
        org.junit.Assert.assertNotNull(matrix17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(matrix20);
        org.junit.Assert.assertNotNull(matrix23);
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertArrayEquals(doubleArray26, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertArrayEquals(doubleArray29, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 2 + "'", int32 == 2);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 2 + "'", int33 == 2);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 2 + "'", int34 == 2);
        org.junit.Assert.assertNotNull(matrixArray35);
        org.junit.Assert.assertNotNull(matrix36);
        org.junit.Assert.assertNotNull(matrix38);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertArrayEquals(doubleArray43, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray46);
        org.junit.Assert.assertArrayEquals(doubleArray46, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(matrix55);
        org.junit.Assert.assertNotNull(doubleArray58);
        org.junit.Assert.assertArrayEquals(doubleArray58, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray61);
        org.junit.Assert.assertArrayEquals(doubleArray61, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray62);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 2 + "'", int64 == 2);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 2 + "'", int65 == 2);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 2 + "'", int66 == 2);
        org.junit.Assert.assertNotNull(matrixArray67);
        org.junit.Assert.assertNotNull(matrix68);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + true + "'", boolean72 == true);
        org.junit.Assert.assertNotNull(matrix75);
        org.junit.Assert.assertNotNull(doubleArray78);
        org.junit.Assert.assertArrayEquals(doubleArray78, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray81);
        org.junit.Assert.assertArrayEquals(doubleArray81, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray82);
        org.junit.Assert.assertTrue("'" + int84 + "' != '" + 2 + "'", int84 == 2);
        org.junit.Assert.assertTrue("'" + int85 + "' != '" + 2 + "'", int85 == 2);
        org.junit.Assert.assertTrue("'" + int86 + "' != '" + 2 + "'", int86 == 2);
        org.junit.Assert.assertNotNull(matrixArray87);
        org.junit.Assert.assertNotNull(matrix88);
        org.junit.Assert.assertTrue("'" + int89 + "' != '" + 2 + "'", int89 == 2);
        org.junit.Assert.assertTrue("'" + int90 + "' != '" + 2 + "'", int90 == 2);
        org.junit.Assert.assertNotNull(matrix91);
        org.junit.Assert.assertNotNull(doubleArray92);
    }

    @Test
    public void test4849() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4849");
        com.operations.Matrix.Matrix matrix2 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0L, (double) (byte) 10);
        double[] doubleArray5 = new double[] { 10, 'a' };
        double[] doubleArray8 = new double[] { 10, 'a' };
        double[][] doubleArray9 = new double[][] { doubleArray5, doubleArray8 };
        com.operations.Matrix.Matrix matrix10 = new com.operations.Matrix.Matrix(doubleArray9);
        int int11 = matrix10.getCols();
        int int12 = matrix10.getCols();
        int int13 = matrix10.getCols();
        com.operations.Matrix.Matrix[] matrixArray14 = com.operations.Matrix.MatrixDecompositions.luDecomposition(matrix10);
        com.operations.Matrix.Matrix matrix15 = com.operations.Matrix.MatrixOperations.multiply(matrix2, matrix10);
        com.operations.Matrix.Matrix matrix17 = com.operations.Matrix.MatrixTransformations.rotate2D((double) (short) 100);
        boolean boolean19 = com.operations.Matrix.MatrixUtils.compare(matrix10, matrix17, (double) (byte) 0);
        double[] doubleArray22 = new double[] { 10, 'a' };
        double[] doubleArray25 = new double[] { 10, 'a' };
        double[][] doubleArray26 = new double[][] { doubleArray22, doubleArray25 };
        com.operations.Matrix.Matrix matrix27 = new com.operations.Matrix.Matrix(doubleArray26);
        com.operations.Matrix.Matrix matrix28 = new com.operations.Matrix.Matrix(doubleArray26);
        com.operations.Matrix.Matrix matrix29 = new com.operations.Matrix.Matrix(doubleArray26);
        boolean boolean31 = com.operations.Matrix.MatrixUtils.compare(matrix10, matrix29, (double) (-1));
        com.operations.Matrix.Matrix matrix33 = com.operations.Matrix.MatrixTransformations.rotate2D((double) (short) 100);
        double[] doubleArray36 = new double[] { 137.90576492663388d, (byte) -1 };
        double[] doubleArray37 = com.operations.Matrix.MatrixSolver.solveGaussian(matrix33, doubleArray36);
        com.operations.Matrix.Matrix matrix40 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0L, (double) (byte) 10);
        double[] doubleArray43 = new double[] { 10, 'a' };
        double[] doubleArray46 = new double[] { 10, 'a' };
        double[][] doubleArray47 = new double[][] { doubleArray43, doubleArray46 };
        com.operations.Matrix.Matrix matrix48 = new com.operations.Matrix.Matrix(doubleArray47);
        int int49 = matrix48.getCols();
        int int50 = matrix48.getCols();
        int int51 = matrix48.getCols();
        com.operations.Matrix.Matrix[] matrixArray52 = com.operations.Matrix.MatrixDecompositions.luDecomposition(matrix48);
        com.operations.Matrix.Matrix matrix53 = com.operations.Matrix.MatrixOperations.multiply(matrix40, matrix48);
        boolean boolean55 = com.operations.Matrix.MatrixUtils.compare(matrix33, matrix40, (double) (-1L));
        com.operations.Matrix.Matrix matrix56 = com.operations.Matrix.MatrixOperations.add(matrix29, matrix40);
        double double57 = com.operations.Matrix.MatrixUtils.frobeniusNorm(matrix29);
        com.operations.Matrix.Matrix[] matrixArray58 = com.operations.Matrix.MatrixDecompositions.luDecomposition(matrix29);
        com.operations.Matrix.Matrix matrix59 = com.operations.Matrix.MatrixOperations.transpose(matrix29);
        com.operations.Matrix.Matrix matrix61 = com.operations.Matrix.MatrixOperations.scalarMultiply(matrix29, (double) (short) 100);
        boolean boolean62 = com.operations.Matrix.MatrixUtils.isSymmetric(matrix61);
        double[] doubleArray65 = new double[] { 10, 'a' };
        double[] doubleArray68 = new double[] { 10, 'a' };
        double[][] doubleArray69 = new double[][] { doubleArray65, doubleArray68 };
        com.operations.Matrix.Matrix matrix70 = new com.operations.Matrix.Matrix(doubleArray69);
        com.operations.Matrix.Matrix matrix71 = new com.operations.Matrix.Matrix(doubleArray69);
        int int72 = matrix71.getCols();
        matrix71.print();
        com.operations.Matrix.Matrix matrix74 = com.operations.Matrix.MatrixOperations.subtract(matrix61, matrix71);
        org.junit.Assert.assertNotNull(matrix2);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertArrayEquals(doubleArray5, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertArrayEquals(doubleArray8, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 2 + "'", int11 == 2);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 2 + "'", int12 == 2);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 2 + "'", int13 == 2);
        org.junit.Assert.assertNotNull(matrixArray14);
        org.junit.Assert.assertNotNull(matrix15);
        org.junit.Assert.assertNotNull(matrix17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertArrayEquals(doubleArray22, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertArrayEquals(doubleArray25, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(matrix33);
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertArrayEquals(doubleArray36, new double[] { 137.90576492663388d, (-1.0d) }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertArrayEquals(doubleArray37, new double[] { (-24.931892522286255d), (-135.63701830716116d) }, 1.0E-15);
        org.junit.Assert.assertNotNull(matrix40);
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertArrayEquals(doubleArray43, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray46);
        org.junit.Assert.assertArrayEquals(doubleArray46, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 2 + "'", int49 == 2);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 2 + "'", int50 == 2);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 2 + "'", int51 == 2);
        org.junit.Assert.assertNotNull(matrixArray52);
        org.junit.Assert.assertNotNull(matrix53);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNotNull(matrix56);
        org.junit.Assert.assertTrue("'" + double57 + "' != '" + 137.90576492663388d + "'", double57 == 137.90576492663388d);
        org.junit.Assert.assertNotNull(matrixArray58);
        org.junit.Assert.assertNotNull(matrix59);
        org.junit.Assert.assertNotNull(matrix61);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertNotNull(doubleArray65);
        org.junit.Assert.assertArrayEquals(doubleArray65, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray68);
        org.junit.Assert.assertArrayEquals(doubleArray68, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray69);
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 2 + "'", int72 == 2);
        org.junit.Assert.assertNotNull(matrix74);
    }

    @Test
    public void test4850() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4850");
        com.operations.Matrix.Matrix matrix4 = com.operations.Matrix.MatrixUtils.generateRandomMatrix(1, (int) 'a', (-1), (int) (short) -1);
        com.operations.Matrix.Matrix matrix7 = com.operations.Matrix.MatrixTransformations.project2D((double) (byte) 100, 32.0d);
        boolean boolean8 = com.operations.Matrix.MatrixUtils.isSquare(matrix7);
        com.operations.Matrix.Matrix matrix9 = com.operations.Matrix.MatrixDecompositions.choleskyDecomposition(matrix7);
        com.operations.Matrix.Matrix matrix12 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0.0f, 350.0d);
        com.operations.Matrix.Matrix matrix15 = com.operations.Matrix.MatrixTransformations.project2D(0.0d, (double) 0);
        com.operations.Matrix.Matrix[] matrixArray16 = com.operations.Matrix.MatrixDecompositions.luDecomposition(matrix15);
        com.operations.Matrix.Matrix matrix19 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0L, (double) (byte) 10);
        int int20 = matrix19.getRows();
        com.operations.Matrix.Matrix matrix22 = com.operations.Matrix.MatrixOperations.scalarMultiply(matrix19, (double) 2);
        double double23 = com.operations.Matrix.MatrixUtils.frobeniusNorm(matrix19);
        int int24 = matrix19.getRows();
        com.operations.Matrix.Matrix matrix25 = com.operations.Matrix.MatrixOperations.transpose(matrix19);
        com.operations.Matrix.Matrix matrix26 = com.operations.Matrix.MatrixOperations.multiply(matrix15, matrix25);
        com.operations.Matrix.Matrix matrix27 = com.operations.Matrix.MatrixOperations.multiply(matrix12, matrix25);
        com.operations.Matrix.Matrix matrix28 = com.operations.Matrix.MatrixOperations.transpose(matrix27);
        com.operations.Matrix.Matrix matrix29 = com.operations.Matrix.MatrixOperations.add(matrix7, matrix28);
        com.operations.Matrix.Matrix matrix32 = com.operations.Matrix.MatrixTransformations.scale2D(0.0d, (double) 1.0f);
        boolean boolean33 = com.operations.Matrix.MatrixUtils.isSymmetric(matrix32);
        boolean boolean35 = com.operations.Matrix.MatrixUtils.compare(matrix28, matrix32, 0.0d);
        // The following exception was thrown during execution in test generation
        try {
            com.operations.Matrix.Matrix matrix36 = com.operations.Matrix.MatrixOperations.multiply(matrix4, matrix32);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Matrix A's columns must match Matrix B's rows for multiplication.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(matrix4);
        org.junit.Assert.assertNotNull(matrix7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNotNull(matrix9);
        org.junit.Assert.assertNotNull(matrix12);
        org.junit.Assert.assertNotNull(matrix15);
        org.junit.Assert.assertNotNull(matrixArray16);
        org.junit.Assert.assertNotNull(matrix19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 2 + "'", int20 == 2);
        org.junit.Assert.assertNotNull(matrix22);
        org.junit.Assert.assertTrue("'" + double23 + "' != '" + 10.0d + "'", double23 == 10.0d);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 2 + "'", int24 == 2);
        org.junit.Assert.assertNotNull(matrix25);
        org.junit.Assert.assertNotNull(matrix26);
        org.junit.Assert.assertNotNull(matrix27);
        org.junit.Assert.assertNotNull(matrix28);
        org.junit.Assert.assertNotNull(matrix29);
        org.junit.Assert.assertNotNull(matrix32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
    }

    @Test
    public void test4851() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4851");
        double[] doubleArray2 = new double[] { 10, 'a' };
        double[] doubleArray5 = new double[] { 10, 'a' };
        double[][] doubleArray6 = new double[][] { doubleArray2, doubleArray5 };
        com.operations.Matrix.Matrix matrix7 = new com.operations.Matrix.Matrix(doubleArray6);
        com.operations.Matrix.Matrix matrix8 = new com.operations.Matrix.Matrix(doubleArray6);
        com.operations.Matrix.Matrix matrix9 = new com.operations.Matrix.Matrix(doubleArray6);
        boolean boolean10 = com.operations.Matrix.MatrixUtils.isSymmetric(matrix9);
        boolean boolean11 = com.operations.Matrix.MatrixUtils.isSquare(matrix9);
        matrix9.print();
        com.operations.Matrix.Matrix matrix15 = com.operations.Matrix.MatrixTransformations.project2D(137.15495886388925d, 137.15495886388925d);
        com.operations.Matrix.Matrix matrix16 = com.operations.Matrix.MatrixOperations.subtract(matrix9, matrix15);
        boolean boolean17 = com.operations.Matrix.MatrixUtils.isSymmetric(matrix15);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertArrayEquals(doubleArray2, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertArrayEquals(doubleArray5, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNotNull(matrix15);
        org.junit.Assert.assertNotNull(matrix16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
    }

    @Test
    public void test4852() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4852");
        com.operations.Matrix.Matrix matrix2 = com.operations.Matrix.MatrixTransformations.scale2D(0.0d, 0.0d);
        com.operations.Matrix.Matrix matrix5 = com.operations.Matrix.MatrixTransformations.scale2D((double) 1, (-1.0d));
        com.operations.Matrix.Matrix matrix8 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0L, (double) (byte) 10);
        double[] doubleArray11 = new double[] { 10, 'a' };
        double[] doubleArray14 = new double[] { 10, 'a' };
        double[][] doubleArray15 = new double[][] { doubleArray11, doubleArray14 };
        com.operations.Matrix.Matrix matrix16 = new com.operations.Matrix.Matrix(doubleArray15);
        int int17 = matrix16.getCols();
        int int18 = matrix16.getCols();
        int int19 = matrix16.getCols();
        com.operations.Matrix.Matrix[] matrixArray20 = com.operations.Matrix.MatrixDecompositions.luDecomposition(matrix16);
        com.operations.Matrix.Matrix matrix21 = com.operations.Matrix.MatrixOperations.multiply(matrix8, matrix16);
        int int22 = matrix16.getRows();
        int int23 = matrix16.getCols();
        com.operations.Matrix.Matrix matrix26 = com.operations.Matrix.MatrixTransformations.project2D((double) (-1L), (double) (short) 100);
        com.operations.Matrix.Matrix matrix27 = com.operations.Matrix.MatrixOperations.subtract(matrix16, matrix26);
        com.operations.Matrix.Matrix matrix28 = com.operations.Matrix.MatrixOperations.add(matrix5, matrix27);
        com.operations.Matrix.Matrix matrix29 = com.operations.Matrix.MatrixOperations.add(matrix2, matrix5);
        // The following exception was thrown during execution in test generation
        try {
            com.operations.Matrix.Matrix matrix30 = com.operations.Matrix.MatrixDecompositions.choleskyDecomposition(matrix29);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Matrix is not positive definite.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(matrix2);
        org.junit.Assert.assertNotNull(matrix5);
        org.junit.Assert.assertNotNull(matrix8);
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertArrayEquals(doubleArray11, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertArrayEquals(doubleArray14, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 2 + "'", int17 == 2);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 2 + "'", int18 == 2);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 2 + "'", int19 == 2);
        org.junit.Assert.assertNotNull(matrixArray20);
        org.junit.Assert.assertNotNull(matrix21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 2 + "'", int22 == 2);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 2 + "'", int23 == 2);
        org.junit.Assert.assertNotNull(matrix26);
        org.junit.Assert.assertNotNull(matrix27);
        org.junit.Assert.assertNotNull(matrix28);
        org.junit.Assert.assertNotNull(matrix29);
    }

    @Test
    public void test4853() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4853");
        // The following exception was thrown during execution in test generation
        try {
            com.operations.Matrix.Matrix matrix2 = new com.operations.Matrix.Matrix((int) (byte) -1, (int) '4');
            org.junit.Assert.fail("Expected exception of type java.lang.NegativeArraySizeException; message: -1");
        } catch (java.lang.NegativeArraySizeException e) {
            // Expected exception.
        }
    }

    @Test
    public void test4854() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4854");
        com.operations.Matrix.Matrix matrix2 = com.operations.Matrix.MatrixTransformations.scale2D((double) 100.0f, (double) (byte) 1);
        com.operations.Matrix.Matrix matrix5 = com.operations.Matrix.MatrixTransformations.scale2D((double) 1.0f, (double) 1);
        com.operations.Matrix.Matrix matrix7 = com.operations.Matrix.MatrixTransformations.rotate2D((double) 1.0f);
        com.operations.Matrix.Matrix matrix10 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0L, (double) (byte) 10);
        int int11 = matrix10.getRows();
        com.operations.Matrix.Matrix matrix13 = com.operations.Matrix.MatrixOperations.scalarMultiply(matrix10, (double) 2);
        double double14 = com.operations.Matrix.MatrixUtils.frobeniusNorm(matrix10);
        com.operations.Matrix.Matrix matrix17 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0L, (double) (byte) 10);
        int int18 = matrix17.getRows();
        com.operations.Matrix.Matrix matrix20 = com.operations.Matrix.MatrixOperations.scalarMultiply(matrix17, (double) 2);
        com.operations.Matrix.Matrix matrix21 = com.operations.Matrix.MatrixOperations.subtract(matrix10, matrix20);
        com.operations.Matrix.Matrix matrix22 = com.operations.Matrix.MatrixOperations.add(matrix7, matrix20);
        boolean boolean24 = com.operations.Matrix.MatrixUtils.compare(matrix5, matrix7, (double) (byte) -1);
        com.operations.Matrix.Matrix matrix25 = com.operations.Matrix.MatrixOperations.transpose(matrix7);
        com.operations.Matrix.Matrix matrix28 = com.operations.Matrix.MatrixTransformations.project2D((double) 10L, 10.0d);
        com.operations.Matrix.Matrix matrix30 = com.operations.Matrix.MatrixTransformations.rotate2D((double) (short) 100);
        double[] doubleArray33 = new double[] { 137.90576492663388d, (byte) -1 };
        double[] doubleArray34 = com.operations.Matrix.MatrixSolver.solveGaussian(matrix30, doubleArray33);
        com.operations.Matrix.Matrix matrix37 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0L, (double) (byte) 10);
        double[] doubleArray40 = new double[] { 10, 'a' };
        double[] doubleArray43 = new double[] { 10, 'a' };
        double[][] doubleArray44 = new double[][] { doubleArray40, doubleArray43 };
        com.operations.Matrix.Matrix matrix45 = new com.operations.Matrix.Matrix(doubleArray44);
        int int46 = matrix45.getCols();
        int int47 = matrix45.getCols();
        int int48 = matrix45.getCols();
        com.operations.Matrix.Matrix[] matrixArray49 = com.operations.Matrix.MatrixDecompositions.luDecomposition(matrix45);
        com.operations.Matrix.Matrix matrix50 = com.operations.Matrix.MatrixOperations.multiply(matrix37, matrix45);
        boolean boolean52 = com.operations.Matrix.MatrixUtils.compare(matrix30, matrix37, (double) (-1L));
        double[][] doubleArray53 = matrix30.getData();
        com.operations.Matrix.Matrix matrix55 = com.operations.Matrix.MatrixTransformations.rotate2D((double) (short) 100);
        double[] doubleArray58 = new double[] { 137.90576492663388d, (byte) -1 };
        double[] doubleArray59 = com.operations.Matrix.MatrixSolver.solveGaussian(matrix55, doubleArray58);
        double[] doubleArray60 = com.operations.Matrix.MatrixSolver.solveGaussian(matrix30, doubleArray58);
        double[] doubleArray61 = com.operations.Matrix.MatrixSolver.solveGaussian(matrix28, doubleArray60);
        double[] doubleArray62 = com.operations.Matrix.MatrixSolver.solveGaussian(matrix7, doubleArray61);
        double[] doubleArray63 = com.operations.Matrix.MatrixSolver.solveGaussian(matrix2, doubleArray62);
        com.operations.Matrix.Matrix matrix65 = com.operations.Matrix.MatrixTransformations.rotate2D((double) (byte) 10);
        boolean boolean67 = com.operations.Matrix.MatrixUtils.compare(matrix2, matrix65, 260.95643973734866d);
        com.operations.Matrix.Matrix matrix68 = com.operations.Matrix.MatrixOperations.transpose(matrix65);
        com.operations.Matrix.Matrix matrix69 = com.operations.Matrix.MatrixDecompositions.choleskyDecomposition(matrix68);
        boolean boolean70 = com.operations.Matrix.MatrixUtils.isSymmetric(matrix68);
        org.junit.Assert.assertNotNull(matrix2);
        org.junit.Assert.assertNotNull(matrix5);
        org.junit.Assert.assertNotNull(matrix7);
        org.junit.Assert.assertNotNull(matrix10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 2 + "'", int11 == 2);
        org.junit.Assert.assertNotNull(matrix13);
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 10.0d + "'", double14 == 10.0d);
        org.junit.Assert.assertNotNull(matrix17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 2 + "'", int18 == 2);
        org.junit.Assert.assertNotNull(matrix20);
        org.junit.Assert.assertNotNull(matrix21);
        org.junit.Assert.assertNotNull(matrix22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(matrix25);
        org.junit.Assert.assertNotNull(matrix28);
        org.junit.Assert.assertNotNull(matrix30);
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertArrayEquals(doubleArray33, new double[] { 137.90576492663388d, (-1.0d) }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertArrayEquals(doubleArray34, new double[] { (-24.931892522286255d), (-135.63701830716116d) }, 1.0E-15);
        org.junit.Assert.assertNotNull(matrix37);
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertArrayEquals(doubleArray40, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertArrayEquals(doubleArray43, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 2 + "'", int46 == 2);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 2 + "'", int47 == 2);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 2 + "'", int48 == 2);
        org.junit.Assert.assertNotNull(matrixArray49);
        org.junit.Assert.assertNotNull(matrix50);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertNotNull(matrix55);
        org.junit.Assert.assertNotNull(doubleArray58);
        org.junit.Assert.assertArrayEquals(doubleArray58, new double[] { 137.90576492663388d, (-1.0d) }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray59);
        org.junit.Assert.assertArrayEquals(doubleArray59, new double[] { (-24.931892522286255d), (-135.63701830716116d) }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray60);
        org.junit.Assert.assertArrayEquals(doubleArray60, new double[] { (-24.931892522286255d), (-135.63701830716116d) }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray61);
        org.junit.Assert.assertArrayEquals(doubleArray61, new double[] { (-2.4931892522286256d), (-13.563701830716116d) }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray62);
        org.junit.Assert.assertArrayEquals(doubleArray62, new double[] { (-2.7295287645732618d), (-13.518123861075072d) }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray63);
        org.junit.Assert.assertArrayEquals(doubleArray63, new double[] { (-0.027295287645732618d), (-13.518123861075072d) }, 1.0E-15);
        org.junit.Assert.assertNotNull(matrix65);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + true + "'", boolean67 == true);
        org.junit.Assert.assertNotNull(matrix68);
        org.junit.Assert.assertNotNull(matrix69);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
    }

    @Test
    public void test4855() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4855");
        com.operations.Matrix.Matrix matrix5 = com.operations.Matrix.MatrixUtils.generateRandomMatrix((int) '4', 100, 2, (int) (byte) 10, 10L);
        double[] doubleArray8 = new double[] { 10, 'a' };
        double[] doubleArray11 = new double[] { 10, 'a' };
        double[][] doubleArray12 = new double[][] { doubleArray8, doubleArray11 };
        com.operations.Matrix.Matrix matrix13 = new com.operations.Matrix.Matrix(doubleArray12);
        com.operations.Matrix.Matrix matrix14 = new com.operations.Matrix.Matrix(doubleArray12);
        com.operations.Matrix.Matrix matrix16 = com.operations.Matrix.MatrixTransformations.rotate2D((double) (short) 100);
        double[] doubleArray19 = new double[] { 137.90576492663388d, (byte) -1 };
        double[] doubleArray20 = com.operations.Matrix.MatrixSolver.solveGaussian(matrix16, doubleArray19);
        com.operations.Matrix.Matrix matrix21 = com.operations.Matrix.MatrixOperations.add(matrix14, matrix16);
        com.operations.Matrix.Matrix matrix22 = com.operations.Matrix.MatrixOperations.transpose(matrix16);
        int int23 = matrix16.getCols();
        int int24 = matrix16.getRows();
        double[] doubleArray27 = new double[] { 10, 'a' };
        double[] doubleArray30 = new double[] { 10, 'a' };
        double[][] doubleArray31 = new double[][] { doubleArray27, doubleArray30 };
        com.operations.Matrix.Matrix matrix32 = new com.operations.Matrix.Matrix(doubleArray31);
        int int33 = matrix32.getCols();
        int int34 = matrix32.getCols();
        matrix32.print();
        double[] doubleArray38 = new double[] { 10, 'a' };
        double[] doubleArray41 = new double[] { 10, 'a' };
        double[][] doubleArray42 = new double[][] { doubleArray38, doubleArray41 };
        com.operations.Matrix.Matrix matrix43 = new com.operations.Matrix.Matrix(doubleArray42);
        boolean boolean45 = com.operations.Matrix.MatrixUtils.compare(matrix32, matrix43, (double) (-1));
        com.operations.Matrix.Matrix matrix46 = com.operations.Matrix.MatrixOperations.multiply(matrix16, matrix32);
        double double47 = com.operations.Matrix.MatrixUtils.frobeniusNorm(matrix46);
        double double48 = com.operations.Matrix.MatrixUtils.frobeniusNorm(matrix46);
        // The following exception was thrown during execution in test generation
        try {
            com.operations.Matrix.Matrix matrix49 = com.operations.Matrix.MatrixOperations.subtract(matrix5, matrix46);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Matrices must have the same dimensions for subtraction.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(matrix5);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertArrayEquals(doubleArray8, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertArrayEquals(doubleArray11, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertNotNull(matrix16);
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertArrayEquals(doubleArray19, new double[] { 137.90576492663388d, (-1.0d) }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertArrayEquals(doubleArray20, new double[] { (-24.931892522286255d), (-135.63701830716116d) }, 1.0E-15);
        org.junit.Assert.assertNotNull(matrix21);
        org.junit.Assert.assertNotNull(matrix22);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 2 + "'", int23 == 2);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 2 + "'", int24 == 2);
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertArrayEquals(doubleArray27, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertArrayEquals(doubleArray30, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 2 + "'", int33 == 2);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 2 + "'", int34 == 2);
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertArrayEquals(doubleArray38, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertArrayEquals(doubleArray41, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(matrix46);
        org.junit.Assert.assertTrue("'" + double47 + "' != '" + 137.90576492663385d + "'", double47 == 137.90576492663385d);
        org.junit.Assert.assertTrue("'" + double48 + "' != '" + 137.90576492663385d + "'", double48 == 137.90576492663385d);
    }

    @Test
    public void test4856() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4856");
        com.operations.Matrix.Matrix matrix1 = com.operations.Matrix.MatrixTransformations.rotate2D((double) 0L);
        boolean boolean2 = com.operations.Matrix.MatrixUtils.isSquare(matrix1);
        com.operations.Matrix.Matrix matrix4 = com.operations.Matrix.MatrixTransformations.rotate2D((double) (-1L));
        matrix4.print();
        matrix4.print();
        com.operations.Matrix.Matrix matrix8 = com.operations.Matrix.MatrixTransformations.rotate2D((double) '4');
        double[] doubleArray11 = new double[] { 10, 'a' };
        double[] doubleArray14 = new double[] { 10, 'a' };
        double[][] doubleArray15 = new double[][] { doubleArray11, doubleArray14 };
        com.operations.Matrix.Matrix matrix16 = new com.operations.Matrix.Matrix(doubleArray15);
        com.operations.Matrix.Matrix matrix17 = new com.operations.Matrix.Matrix(doubleArray15);
        com.operations.Matrix.Matrix matrix19 = com.operations.Matrix.MatrixTransformations.rotate2D((double) (short) 100);
        double[] doubleArray22 = new double[] { 137.90576492663388d, (byte) -1 };
        double[] doubleArray23 = com.operations.Matrix.MatrixSolver.solveGaussian(matrix19, doubleArray22);
        com.operations.Matrix.Matrix matrix24 = com.operations.Matrix.MatrixOperations.add(matrix17, matrix19);
        boolean boolean25 = com.operations.Matrix.MatrixUtils.isSymmetric(matrix24);
        boolean boolean27 = com.operations.Matrix.MatrixUtils.compare(matrix8, matrix24, 364.0054944640259d);
        com.operations.Matrix.Matrix matrix30 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0L, (double) (byte) 10);
        int int31 = matrix30.getRows();
        com.operations.Matrix.Matrix matrix33 = com.operations.Matrix.MatrixOperations.scalarMultiply(matrix30, (double) 2);
        matrix30.print();
        com.operations.Matrix.Matrix matrix35 = com.operations.Matrix.MatrixOperations.multiply(matrix24, matrix30);
        com.operations.Matrix.Matrix matrix36 = com.operations.Matrix.MatrixDecompositions.choleskyDecomposition(matrix24);
        boolean boolean38 = com.operations.Matrix.MatrixUtils.compare(matrix4, matrix24, (double) ' ');
        boolean boolean40 = com.operations.Matrix.MatrixUtils.compare(matrix1, matrix4, 0.0d);
        org.junit.Assert.assertNotNull(matrix1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertNotNull(matrix4);
        org.junit.Assert.assertNotNull(matrix8);
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertArrayEquals(doubleArray11, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertArrayEquals(doubleArray14, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertNotNull(matrix19);
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertArrayEquals(doubleArray22, new double[] { 137.90576492663388d, (-1.0d) }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertArrayEquals(doubleArray23, new double[] { (-24.931892522286255d), (-135.63701830716116d) }, 1.0E-15);
        org.junit.Assert.assertNotNull(matrix24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertNotNull(matrix30);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 2 + "'", int31 == 2);
        org.junit.Assert.assertNotNull(matrix33);
        org.junit.Assert.assertNotNull(matrix35);
        org.junit.Assert.assertNotNull(matrix36);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
    }

    @Test
    public void test4857() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4857");
        com.operations.Matrix.Matrix matrix1 = com.operations.Matrix.MatrixTransformations.rotate2D((double) (-1L));
        matrix1.print();
        double[][] doubleArray3 = matrix1.getData();
        com.operations.Matrix.Matrix matrix4 = new com.operations.Matrix.Matrix(doubleArray3);
        com.operations.Matrix.Matrix matrix5 = new com.operations.Matrix.Matrix(doubleArray3);
        com.operations.Matrix.Matrix matrix6 = new com.operations.Matrix.Matrix(doubleArray3);
        com.operations.Matrix.Matrix matrix7 = new com.operations.Matrix.Matrix(doubleArray3);
        org.junit.Assert.assertNotNull(matrix1);
        org.junit.Assert.assertNotNull(doubleArray3);
    }

    @Test
    public void test4858() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4858");
        com.operations.Matrix.Matrix matrix2 = com.operations.Matrix.MatrixTransformations.scale2D((double) '#', 310.45666917731234d);
        org.junit.Assert.assertNotNull(matrix2);
    }

    @Test
    public void test4859() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4859");
        com.operations.Matrix.Matrix matrix2 = com.operations.Matrix.MatrixTransformations.project2D(0.0d, (double) (-1));
        boolean boolean3 = com.operations.Matrix.MatrixUtils.isSymmetric(matrix2);
        double[][] doubleArray4 = matrix2.getData();
        com.operations.Matrix.Matrix matrix5 = new com.operations.Matrix.Matrix(doubleArray4);
        int int6 = matrix5.getRows();
        double[] doubleArray9 = new double[] { 10, 'a' };
        double[] doubleArray12 = new double[] { 10, 'a' };
        double[][] doubleArray13 = new double[][] { doubleArray9, doubleArray12 };
        com.operations.Matrix.Matrix matrix14 = new com.operations.Matrix.Matrix(doubleArray13);
        int int15 = matrix14.getCols();
        int int16 = matrix14.getCols();
        boolean boolean17 = com.operations.Matrix.MatrixUtils.isSquare(matrix14);
        com.operations.Matrix.Matrix matrix18 = com.operations.Matrix.MatrixDecompositions.choleskyDecomposition(matrix14);
        com.operations.Matrix.Matrix matrix21 = com.operations.Matrix.MatrixTransformations.project2D(0.0d, (double) 0);
        com.operations.Matrix.Matrix matrix22 = com.operations.Matrix.MatrixOperations.subtract(matrix18, matrix21);
        double[] doubleArray25 = new double[] { 10, 'a' };
        double[] doubleArray28 = new double[] { 10, 'a' };
        double[][] doubleArray29 = new double[][] { doubleArray25, doubleArray28 };
        com.operations.Matrix.Matrix matrix30 = new com.operations.Matrix.Matrix(doubleArray29);
        com.operations.Matrix.Matrix matrix31 = new com.operations.Matrix.Matrix(doubleArray29);
        com.operations.Matrix.Matrix matrix33 = com.operations.Matrix.MatrixTransformations.rotate2D((double) (short) 100);
        double[] doubleArray36 = new double[] { 137.90576492663388d, (byte) -1 };
        double[] doubleArray37 = com.operations.Matrix.MatrixSolver.solveGaussian(matrix33, doubleArray36);
        com.operations.Matrix.Matrix matrix38 = com.operations.Matrix.MatrixOperations.add(matrix31, matrix33);
        com.operations.Matrix.Matrix matrix39 = com.operations.Matrix.MatrixOperations.transpose(matrix33);
        int int40 = matrix33.getCols();
        int int41 = matrix33.getRows();
        com.operations.Matrix.Matrix matrix42 = com.operations.Matrix.MatrixOperations.subtract(matrix22, matrix33);
        com.operations.Matrix.Matrix matrix45 = new com.operations.Matrix.Matrix((int) (short) 100, 1);
        boolean boolean47 = com.operations.Matrix.MatrixUtils.compare(matrix42, matrix45, 99.83621769912266d);
        matrix42.print();
        double[] doubleArray51 = new double[] { 10, 'a' };
        double[] doubleArray54 = new double[] { 10, 'a' };
        double[][] doubleArray55 = new double[][] { doubleArray51, doubleArray54 };
        com.operations.Matrix.Matrix matrix56 = new com.operations.Matrix.Matrix(doubleArray55);
        com.operations.Matrix.Matrix matrix57 = new com.operations.Matrix.Matrix(doubleArray55);
        boolean boolean58 = com.operations.Matrix.MatrixUtils.isSquare(matrix57);
        double[] doubleArray61 = new double[] { 10, 'a' };
        double[] doubleArray64 = new double[] { 10, 'a' };
        double[][] doubleArray65 = new double[][] { doubleArray61, doubleArray64 };
        com.operations.Matrix.Matrix matrix66 = new com.operations.Matrix.Matrix(doubleArray65);
        int int67 = matrix66.getCols();
        int int68 = matrix66.getCols();
        matrix66.print();
        double[] doubleArray72 = new double[] { 10, 'a' };
        double[] doubleArray75 = new double[] { 10, 'a' };
        double[][] doubleArray76 = new double[][] { doubleArray72, doubleArray75 };
        com.operations.Matrix.Matrix matrix77 = new com.operations.Matrix.Matrix(doubleArray76);
        boolean boolean79 = com.operations.Matrix.MatrixUtils.compare(matrix66, matrix77, (double) (-1));
        com.operations.Matrix.Matrix matrix80 = com.operations.Matrix.MatrixOperations.subtract(matrix57, matrix77);
        com.operations.Matrix.Matrix matrix82 = com.operations.Matrix.MatrixOperations.scalarMultiply(matrix57, (double) 0.0f);
        int int83 = matrix57.getCols();
        double[][] doubleArray84 = matrix57.getData();
        com.operations.Matrix.Matrix matrix85 = com.operations.Matrix.MatrixOperations.add(matrix42, matrix57);
        com.operations.Matrix.Matrix matrix86 = com.operations.Matrix.MatrixOperations.subtract(matrix5, matrix42);
        org.junit.Assert.assertNotNull(matrix2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 2 + "'", int6 == 2);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertArrayEquals(doubleArray9, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertArrayEquals(doubleArray12, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 2 + "'", int15 == 2);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 2 + "'", int16 == 2);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(matrix18);
        org.junit.Assert.assertNotNull(matrix21);
        org.junit.Assert.assertNotNull(matrix22);
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertArrayEquals(doubleArray25, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertArrayEquals(doubleArray28, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertNotNull(matrix33);
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertArrayEquals(doubleArray36, new double[] { 137.90576492663388d, (-1.0d) }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertArrayEquals(doubleArray37, new double[] { (-24.931892522286255d), (-135.63701830716116d) }, 1.0E-15);
        org.junit.Assert.assertNotNull(matrix38);
        org.junit.Assert.assertNotNull(matrix39);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 2 + "'", int40 == 2);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 2 + "'", int41 == 2);
        org.junit.Assert.assertNotNull(matrix42);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertArrayEquals(doubleArray51, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray54);
        org.junit.Assert.assertArrayEquals(doubleArray54, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + true + "'", boolean58 == true);
        org.junit.Assert.assertNotNull(doubleArray61);
        org.junit.Assert.assertArrayEquals(doubleArray61, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray64);
        org.junit.Assert.assertArrayEquals(doubleArray64, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray65);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 2 + "'", int67 == 2);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 2 + "'", int68 == 2);
        org.junit.Assert.assertNotNull(doubleArray72);
        org.junit.Assert.assertArrayEquals(doubleArray72, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray75);
        org.junit.Assert.assertArrayEquals(doubleArray75, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray76);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertNotNull(matrix80);
        org.junit.Assert.assertNotNull(matrix82);
        org.junit.Assert.assertTrue("'" + int83 + "' != '" + 2 + "'", int83 == 2);
        org.junit.Assert.assertNotNull(doubleArray84);
        org.junit.Assert.assertNotNull(matrix85);
        org.junit.Assert.assertNotNull(matrix86);
    }

    @Test
    public void test4860() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4860");
        com.operations.Matrix.Matrix matrix2 = com.operations.Matrix.MatrixTransformations.project2D((double) '#', 0.0d);
        int int3 = matrix2.getCols();
        com.operations.Matrix.Matrix matrix4 = com.operations.Matrix.MatrixOperations.transpose(matrix2);
        com.operations.Matrix.Matrix matrix7 = com.operations.Matrix.MatrixTransformations.project2D((double) 0L, (double) 0);
        com.operations.Matrix.Matrix matrix8 = com.operations.Matrix.MatrixOperations.subtract(matrix2, matrix7);
        boolean boolean9 = com.operations.Matrix.MatrixUtils.isSymmetric(matrix8);
        org.junit.Assert.assertNotNull(matrix2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 2 + "'", int3 == 2);
        org.junit.Assert.assertNotNull(matrix4);
        org.junit.Assert.assertNotNull(matrix7);
        org.junit.Assert.assertNotNull(matrix8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
    }

    @Test
    public void test4861() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4861");
        com.operations.Matrix.Matrix matrix2 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0L, (double) (byte) 10);
        double[] doubleArray5 = new double[] { 10, 'a' };
        double[] doubleArray8 = new double[] { 10, 'a' };
        double[][] doubleArray9 = new double[][] { doubleArray5, doubleArray8 };
        com.operations.Matrix.Matrix matrix10 = new com.operations.Matrix.Matrix(doubleArray9);
        int int11 = matrix10.getCols();
        int int12 = matrix10.getCols();
        int int13 = matrix10.getCols();
        com.operations.Matrix.Matrix[] matrixArray14 = com.operations.Matrix.MatrixDecompositions.luDecomposition(matrix10);
        com.operations.Matrix.Matrix matrix15 = com.operations.Matrix.MatrixOperations.multiply(matrix2, matrix10);
        com.operations.Matrix.Matrix matrix17 = com.operations.Matrix.MatrixTransformations.rotate2D((double) (short) 100);
        boolean boolean19 = com.operations.Matrix.MatrixUtils.compare(matrix10, matrix17, (double) (byte) 0);
        double[] doubleArray22 = new double[] { 10, 'a' };
        double[] doubleArray25 = new double[] { 10, 'a' };
        double[][] doubleArray26 = new double[][] { doubleArray22, doubleArray25 };
        com.operations.Matrix.Matrix matrix27 = new com.operations.Matrix.Matrix(doubleArray26);
        com.operations.Matrix.Matrix matrix28 = com.operations.Matrix.MatrixOperations.multiply(matrix10, matrix27);
        com.operations.Matrix.Matrix matrix30 = com.operations.Matrix.MatrixOperations.scalarMultiply(matrix10, 260.95643973734866d);
        org.junit.Assert.assertNotNull(matrix2);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertArrayEquals(doubleArray5, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertArrayEquals(doubleArray8, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 2 + "'", int11 == 2);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 2 + "'", int12 == 2);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 2 + "'", int13 == 2);
        org.junit.Assert.assertNotNull(matrixArray14);
        org.junit.Assert.assertNotNull(matrix15);
        org.junit.Assert.assertNotNull(matrix17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertArrayEquals(doubleArray22, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertArrayEquals(doubleArray25, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertNotNull(matrix28);
        org.junit.Assert.assertNotNull(matrix30);
    }

    @Test
    public void test4862() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4862");
        com.operations.Matrix.Matrix matrix2 = com.operations.Matrix.MatrixTransformations.scale2D(167.9087427610547d, 19018.0d);
        org.junit.Assert.assertNotNull(matrix2);
    }

    @Test
    public void test4863() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4863");
        com.operations.Matrix.Matrix matrix2 = com.operations.Matrix.MatrixTransformations.scale2D(3500.0d, (double) 10L);
        boolean boolean3 = com.operations.Matrix.MatrixUtils.isSquare(matrix2);
        org.junit.Assert.assertNotNull(matrix2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
    }

    @Test
    public void test4864() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4864");
        com.operations.Matrix.Matrix matrix2 = com.operations.Matrix.MatrixTransformations.scale2D((double) 10, 21.023651153076518d);
        int int3 = matrix2.getCols();
        double[][] doubleArray4 = matrix2.getData();
        com.operations.Matrix.Matrix matrix5 = new com.operations.Matrix.Matrix(doubleArray4);
        org.junit.Assert.assertNotNull(matrix2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 2 + "'", int3 == 2);
        org.junit.Assert.assertNotNull(doubleArray4);
    }

    @Test
    public void test4865() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4865");
        com.operations.Matrix.Matrix matrix2 = com.operations.Matrix.MatrixTransformations.scale2D((double) 1.0f, (double) 1);
        com.operations.Matrix.Matrix matrix4 = com.operations.Matrix.MatrixTransformations.rotate2D((double) 1.0f);
        com.operations.Matrix.Matrix matrix7 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0L, (double) (byte) 10);
        int int8 = matrix7.getRows();
        com.operations.Matrix.Matrix matrix10 = com.operations.Matrix.MatrixOperations.scalarMultiply(matrix7, (double) 2);
        double double11 = com.operations.Matrix.MatrixUtils.frobeniusNorm(matrix7);
        com.operations.Matrix.Matrix matrix14 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0L, (double) (byte) 10);
        int int15 = matrix14.getRows();
        com.operations.Matrix.Matrix matrix17 = com.operations.Matrix.MatrixOperations.scalarMultiply(matrix14, (double) 2);
        com.operations.Matrix.Matrix matrix18 = com.operations.Matrix.MatrixOperations.subtract(matrix7, matrix17);
        com.operations.Matrix.Matrix matrix19 = com.operations.Matrix.MatrixOperations.add(matrix4, matrix17);
        boolean boolean21 = com.operations.Matrix.MatrixUtils.compare(matrix2, matrix4, (double) (byte) -1);
        com.operations.Matrix.Matrix matrix22 = com.operations.Matrix.MatrixOperations.transpose(matrix4);
        com.operations.Matrix.Matrix matrix25 = com.operations.Matrix.MatrixTransformations.project2D((double) 10L, 10.0d);
        com.operations.Matrix.Matrix matrix27 = com.operations.Matrix.MatrixTransformations.rotate2D((double) (short) 100);
        double[] doubleArray30 = new double[] { 137.90576492663388d, (byte) -1 };
        double[] doubleArray31 = com.operations.Matrix.MatrixSolver.solveGaussian(matrix27, doubleArray30);
        com.operations.Matrix.Matrix matrix34 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0L, (double) (byte) 10);
        double[] doubleArray37 = new double[] { 10, 'a' };
        double[] doubleArray40 = new double[] { 10, 'a' };
        double[][] doubleArray41 = new double[][] { doubleArray37, doubleArray40 };
        com.operations.Matrix.Matrix matrix42 = new com.operations.Matrix.Matrix(doubleArray41);
        int int43 = matrix42.getCols();
        int int44 = matrix42.getCols();
        int int45 = matrix42.getCols();
        com.operations.Matrix.Matrix[] matrixArray46 = com.operations.Matrix.MatrixDecompositions.luDecomposition(matrix42);
        com.operations.Matrix.Matrix matrix47 = com.operations.Matrix.MatrixOperations.multiply(matrix34, matrix42);
        boolean boolean49 = com.operations.Matrix.MatrixUtils.compare(matrix27, matrix34, (double) (-1L));
        double[][] doubleArray50 = matrix27.getData();
        com.operations.Matrix.Matrix matrix52 = com.operations.Matrix.MatrixTransformations.rotate2D((double) (short) 100);
        double[] doubleArray55 = new double[] { 137.90576492663388d, (byte) -1 };
        double[] doubleArray56 = com.operations.Matrix.MatrixSolver.solveGaussian(matrix52, doubleArray55);
        double[] doubleArray57 = com.operations.Matrix.MatrixSolver.solveGaussian(matrix27, doubleArray55);
        double[] doubleArray58 = com.operations.Matrix.MatrixSolver.solveGaussian(matrix25, doubleArray57);
        double[] doubleArray59 = com.operations.Matrix.MatrixSolver.solveGaussian(matrix4, doubleArray58);
        com.operations.Matrix.Matrix matrix65 = com.operations.Matrix.MatrixUtils.generateRandomMatrix(1, 0, (int) (byte) 1, 100, (long) (short) 1);
        boolean boolean66 = com.operations.Matrix.MatrixUtils.isSymmetric(matrix65);
        matrix65.print();
        boolean boolean69 = com.operations.Matrix.MatrixUtils.compare(matrix4, matrix65, 30.0d);
        double[][] doubleArray70 = matrix4.getData();
        org.junit.Assert.assertNotNull(matrix2);
        org.junit.Assert.assertNotNull(matrix4);
        org.junit.Assert.assertNotNull(matrix7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 2 + "'", int8 == 2);
        org.junit.Assert.assertNotNull(matrix10);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 10.0d + "'", double11 == 10.0d);
        org.junit.Assert.assertNotNull(matrix14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 2 + "'", int15 == 2);
        org.junit.Assert.assertNotNull(matrix17);
        org.junit.Assert.assertNotNull(matrix18);
        org.junit.Assert.assertNotNull(matrix19);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(matrix22);
        org.junit.Assert.assertNotNull(matrix25);
        org.junit.Assert.assertNotNull(matrix27);
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertArrayEquals(doubleArray30, new double[] { 137.90576492663388d, (-1.0d) }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertArrayEquals(doubleArray31, new double[] { (-24.931892522286255d), (-135.63701830716116d) }, 1.0E-15);
        org.junit.Assert.assertNotNull(matrix34);
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertArrayEquals(doubleArray37, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertArrayEquals(doubleArray40, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 2 + "'", int43 == 2);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 2 + "'", int44 == 2);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 2 + "'", int45 == 2);
        org.junit.Assert.assertNotNull(matrixArray46);
        org.junit.Assert.assertNotNull(matrix47);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertNotNull(matrix52);
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertArrayEquals(doubleArray55, new double[] { 137.90576492663388d, (-1.0d) }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray56);
        org.junit.Assert.assertArrayEquals(doubleArray56, new double[] { (-24.931892522286255d), (-135.63701830716116d) }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray57);
        org.junit.Assert.assertArrayEquals(doubleArray57, new double[] { (-24.931892522286255d), (-135.63701830716116d) }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray58);
        org.junit.Assert.assertArrayEquals(doubleArray58, new double[] { (-2.4931892522286256d), (-13.563701830716116d) }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray59);
        org.junit.Assert.assertArrayEquals(doubleArray59, new double[] { (-2.7295287645732618d), (-13.518123861075072d) }, 1.0E-15);
        org.junit.Assert.assertNotNull(matrix65);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertNotNull(doubleArray70);
    }

    @Test
    public void test4866() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4866");
        com.operations.Matrix.Matrix matrix2 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0L, (double) (byte) 10);
        double[] doubleArray5 = new double[] { 10, 'a' };
        double[] doubleArray8 = new double[] { 10, 'a' };
        double[][] doubleArray9 = new double[][] { doubleArray5, doubleArray8 };
        com.operations.Matrix.Matrix matrix10 = new com.operations.Matrix.Matrix(doubleArray9);
        int int11 = matrix10.getCols();
        int int12 = matrix10.getCols();
        int int13 = matrix10.getCols();
        com.operations.Matrix.Matrix[] matrixArray14 = com.operations.Matrix.MatrixDecompositions.luDecomposition(matrix10);
        com.operations.Matrix.Matrix matrix15 = com.operations.Matrix.MatrixOperations.multiply(matrix2, matrix10);
        int int16 = matrix10.getRows();
        com.operations.Matrix.Matrix matrix18 = com.operations.Matrix.MatrixOperations.scalarMultiply(matrix10, (double) (-1L));
        com.operations.Matrix.Matrix matrix21 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0L, (double) (byte) 10);
        int int22 = matrix21.getRows();
        com.operations.Matrix.Matrix matrix24 = com.operations.Matrix.MatrixOperations.scalarMultiply(matrix21, (double) 2);
        com.operations.Matrix.Matrix[] matrixArray25 = com.operations.Matrix.MatrixDecompositions.luDecomposition(matrix24);
        com.operations.Matrix.Matrix matrix26 = com.operations.Matrix.MatrixOperations.transpose(matrix24);
        com.operations.Matrix.Matrix matrix27 = com.operations.Matrix.MatrixOperations.add(matrix10, matrix24);
        // The following exception was thrown during execution in test generation
        try {
            double double30 = matrix24.getValue((int) '4', (int) (short) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(matrix2);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertArrayEquals(doubleArray5, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertArrayEquals(doubleArray8, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 2 + "'", int11 == 2);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 2 + "'", int12 == 2);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 2 + "'", int13 == 2);
        org.junit.Assert.assertNotNull(matrixArray14);
        org.junit.Assert.assertNotNull(matrix15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 2 + "'", int16 == 2);
        org.junit.Assert.assertNotNull(matrix18);
        org.junit.Assert.assertNotNull(matrix21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 2 + "'", int22 == 2);
        org.junit.Assert.assertNotNull(matrix24);
        org.junit.Assert.assertNotNull(matrixArray25);
        org.junit.Assert.assertNotNull(matrix26);
        org.junit.Assert.assertNotNull(matrix27);
    }

    @Test
    public void test4867() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4867");
        double[] doubleArray2 = new double[] { 10, 'a' };
        double[] doubleArray5 = new double[] { 10, 'a' };
        double[][] doubleArray6 = new double[][] { doubleArray2, doubleArray5 };
        com.operations.Matrix.Matrix matrix7 = new com.operations.Matrix.Matrix(doubleArray6);
        int int8 = matrix7.getCols();
        com.operations.Matrix.Matrix[] matrixArray9 = com.operations.Matrix.MatrixDecompositions.luDecomposition(matrix7);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertArrayEquals(doubleArray2, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertArrayEquals(doubleArray5, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 2 + "'", int8 == 2);
        org.junit.Assert.assertNotNull(matrixArray9);
    }

    @Test
    public void test4868() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4868");
        com.operations.Matrix.Matrix matrix1 = com.operations.Matrix.MatrixTransformations.rotate2D(350.0d);
        com.operations.Matrix.Matrix matrix2 = com.operations.Matrix.MatrixDecompositions.choleskyDecomposition(matrix1);
        com.operations.Matrix.Matrix matrix4 = com.operations.Matrix.MatrixTransformations.rotate2D((double) 1.0f);
        com.operations.Matrix.Matrix matrix7 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0L, (double) (byte) 10);
        int int8 = matrix7.getRows();
        com.operations.Matrix.Matrix matrix10 = com.operations.Matrix.MatrixOperations.scalarMultiply(matrix7, (double) 2);
        double double11 = com.operations.Matrix.MatrixUtils.frobeniusNorm(matrix7);
        com.operations.Matrix.Matrix matrix14 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0L, (double) (byte) 10);
        int int15 = matrix14.getRows();
        com.operations.Matrix.Matrix matrix17 = com.operations.Matrix.MatrixOperations.scalarMultiply(matrix14, (double) 2);
        com.operations.Matrix.Matrix matrix18 = com.operations.Matrix.MatrixOperations.subtract(matrix7, matrix17);
        com.operations.Matrix.Matrix matrix19 = com.operations.Matrix.MatrixOperations.add(matrix4, matrix17);
        matrix4.print();
        com.operations.Matrix.Matrix matrix21 = com.operations.Matrix.MatrixDecompositions.choleskyDecomposition(matrix4);
        com.operations.Matrix.Matrix matrix22 = com.operations.Matrix.MatrixOperations.subtract(matrix2, matrix21);
        com.operations.Matrix.Matrix matrix25 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0L, (double) (byte) 10);
        int int26 = matrix25.getRows();
        com.operations.Matrix.Matrix matrix29 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0L, (double) (byte) 10);
        int int30 = matrix29.getRows();
        com.operations.Matrix.Matrix matrix32 = com.operations.Matrix.MatrixOperations.scalarMultiply(matrix29, (double) 2);
        com.operations.Matrix.Matrix matrix33 = com.operations.Matrix.MatrixOperations.subtract(matrix25, matrix29);
        com.operations.Matrix.Matrix matrix36 = com.operations.Matrix.MatrixTransformations.scale2D(146.4308710620817d, (double) 10L);
        boolean boolean38 = com.operations.Matrix.MatrixUtils.compare(matrix29, matrix36, (double) (byte) 1);
        com.operations.Matrix.Matrix[] matrixArray39 = com.operations.Matrix.MatrixDecompositions.luDecomposition(matrix36);
        com.operations.Matrix.Matrix matrix41 = com.operations.Matrix.MatrixTransformations.rotate2D((double) '4');
        boolean boolean42 = com.operations.Matrix.MatrixUtils.isSymmetric(matrix41);
        com.operations.Matrix.Matrix matrix43 = com.operations.Matrix.MatrixOperations.add(matrix36, matrix41);
        com.operations.Matrix.Matrix matrix46 = com.operations.Matrix.MatrixTransformations.project2D(137.13497001129946d, 137.15495886388925d);
        boolean boolean48 = com.operations.Matrix.MatrixUtils.compare(matrix43, matrix46, (double) 'a');
        com.operations.Matrix.Matrix matrix49 = com.operations.Matrix.MatrixOperations.add(matrix2, matrix46);
        org.junit.Assert.assertNotNull(matrix1);
        org.junit.Assert.assertNotNull(matrix2);
        org.junit.Assert.assertNotNull(matrix4);
        org.junit.Assert.assertNotNull(matrix7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 2 + "'", int8 == 2);
        org.junit.Assert.assertNotNull(matrix10);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 10.0d + "'", double11 == 10.0d);
        org.junit.Assert.assertNotNull(matrix14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 2 + "'", int15 == 2);
        org.junit.Assert.assertNotNull(matrix17);
        org.junit.Assert.assertNotNull(matrix18);
        org.junit.Assert.assertNotNull(matrix19);
        org.junit.Assert.assertNotNull(matrix21);
        org.junit.Assert.assertNotNull(matrix22);
        org.junit.Assert.assertNotNull(matrix25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 2 + "'", int26 == 2);
        org.junit.Assert.assertNotNull(matrix29);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 2 + "'", int30 == 2);
        org.junit.Assert.assertNotNull(matrix32);
        org.junit.Assert.assertNotNull(matrix33);
        org.junit.Assert.assertNotNull(matrix36);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(matrixArray39);
        org.junit.Assert.assertNotNull(matrix41);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(matrix43);
        org.junit.Assert.assertNotNull(matrix46);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(matrix49);
    }

    @Test
    public void test4869() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4869");
        com.operations.Matrix.Matrix matrix1 = com.operations.Matrix.MatrixTransformations.rotate2D(100.0d);
        int int2 = matrix1.getCols();
        int int3 = matrix1.getRows();
        com.operations.Matrix.Matrix matrix6 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0L, (double) (byte) 10);
        int int7 = matrix6.getRows();
        com.operations.Matrix.Matrix matrix9 = com.operations.Matrix.MatrixOperations.scalarMultiply(matrix6, (double) 2);
        double double10 = com.operations.Matrix.MatrixUtils.frobeniusNorm(matrix6);
        com.operations.Matrix.Matrix matrix11 = com.operations.Matrix.MatrixOperations.add(matrix1, matrix6);
        double[] doubleArray14 = new double[] { 10, 'a' };
        double[] doubleArray17 = new double[] { 10, 'a' };
        double[][] doubleArray18 = new double[][] { doubleArray14, doubleArray17 };
        com.operations.Matrix.Matrix matrix19 = new com.operations.Matrix.Matrix(doubleArray18);
        com.operations.Matrix.Matrix matrix20 = new com.operations.Matrix.Matrix(doubleArray18);
        com.operations.Matrix.Matrix matrix22 = com.operations.Matrix.MatrixTransformations.rotate2D((double) (short) 100);
        double[] doubleArray25 = new double[] { 137.90576492663388d, (byte) -1 };
        double[] doubleArray26 = com.operations.Matrix.MatrixSolver.solveGaussian(matrix22, doubleArray25);
        com.operations.Matrix.Matrix matrix27 = com.operations.Matrix.MatrixOperations.add(matrix20, matrix22);
        com.operations.Matrix.Matrix matrix28 = com.operations.Matrix.MatrixOperations.transpose(matrix22);
        com.operations.Matrix.Matrix matrix30 = com.operations.Matrix.MatrixTransformations.rotate2D((double) (short) 100);
        com.operations.Matrix.Matrix matrix31 = com.operations.Matrix.MatrixOperations.subtract(matrix22, matrix30);
        com.operations.Matrix.Matrix matrix32 = com.operations.Matrix.MatrixOperations.multiply(matrix1, matrix30);
        com.operations.Matrix.Matrix matrix34 = com.operations.Matrix.MatrixOperations.scalarMultiply(matrix1, 146.4308710620817d);
        com.operations.Matrix.Matrix matrix36 = com.operations.Matrix.MatrixTransformations.rotate2D((double) 1.0f);
        com.operations.Matrix.Matrix matrix39 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0L, (double) (byte) 10);
        int int40 = matrix39.getRows();
        com.operations.Matrix.Matrix matrix42 = com.operations.Matrix.MatrixOperations.scalarMultiply(matrix39, (double) 2);
        double double43 = com.operations.Matrix.MatrixUtils.frobeniusNorm(matrix39);
        com.operations.Matrix.Matrix matrix46 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0L, (double) (byte) 10);
        int int47 = matrix46.getRows();
        com.operations.Matrix.Matrix matrix49 = com.operations.Matrix.MatrixOperations.scalarMultiply(matrix46, (double) 2);
        com.operations.Matrix.Matrix matrix50 = com.operations.Matrix.MatrixOperations.subtract(matrix39, matrix49);
        com.operations.Matrix.Matrix matrix51 = com.operations.Matrix.MatrixOperations.add(matrix36, matrix49);
        com.operations.Matrix.Matrix[] matrixArray52 = com.operations.Matrix.MatrixDecompositions.luDecomposition(matrix49);
        boolean boolean53 = com.operations.Matrix.MatrixUtils.isSquare(matrix49);
        com.operations.Matrix.Matrix matrix54 = com.operations.Matrix.MatrixOperations.transpose(matrix49);
        com.operations.Matrix.Matrix matrix56 = com.operations.Matrix.MatrixOperations.scalarMultiply(matrix49, (double) ' ');
        matrix49.print();
        com.operations.Matrix.Matrix matrix58 = com.operations.Matrix.MatrixOperations.subtract(matrix34, matrix49);
        matrix49.print();
        org.junit.Assert.assertNotNull(matrix1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 2 + "'", int2 == 2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 2 + "'", int3 == 2);
        org.junit.Assert.assertNotNull(matrix6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 2 + "'", int7 == 2);
        org.junit.Assert.assertNotNull(matrix9);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 10.0d + "'", double10 == 10.0d);
        org.junit.Assert.assertNotNull(matrix11);
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertArrayEquals(doubleArray14, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertArrayEquals(doubleArray17, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertNotNull(matrix22);
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertArrayEquals(doubleArray25, new double[] { 137.90576492663388d, (-1.0d) }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertArrayEquals(doubleArray26, new double[] { (-24.931892522286255d), (-135.63701830716116d) }, 1.0E-15);
        org.junit.Assert.assertNotNull(matrix27);
        org.junit.Assert.assertNotNull(matrix28);
        org.junit.Assert.assertNotNull(matrix30);
        org.junit.Assert.assertNotNull(matrix31);
        org.junit.Assert.assertNotNull(matrix32);
        org.junit.Assert.assertNotNull(matrix34);
        org.junit.Assert.assertNotNull(matrix36);
        org.junit.Assert.assertNotNull(matrix39);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 2 + "'", int40 == 2);
        org.junit.Assert.assertNotNull(matrix42);
        org.junit.Assert.assertTrue("'" + double43 + "' != '" + 10.0d + "'", double43 == 10.0d);
        org.junit.Assert.assertNotNull(matrix46);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 2 + "'", int47 == 2);
        org.junit.Assert.assertNotNull(matrix49);
        org.junit.Assert.assertNotNull(matrix50);
        org.junit.Assert.assertNotNull(matrix51);
        org.junit.Assert.assertNotNull(matrixArray52);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true);
        org.junit.Assert.assertNotNull(matrix54);
        org.junit.Assert.assertNotNull(matrix56);
        org.junit.Assert.assertNotNull(matrix58);
    }

    @Test
    public void test4870() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4870");
        double[] doubleArray2 = new double[] { 10, 'a' };
        double[] doubleArray5 = new double[] { 10, 'a' };
        double[][] doubleArray6 = new double[][] { doubleArray2, doubleArray5 };
        com.operations.Matrix.Matrix matrix7 = new com.operations.Matrix.Matrix(doubleArray6);
        int int8 = matrix7.getCols();
        int int9 = matrix7.getCols();
        matrix7.print();
        double[] doubleArray13 = new double[] { 10, 'a' };
        double[] doubleArray16 = new double[] { 10, 'a' };
        double[][] doubleArray17 = new double[][] { doubleArray13, doubleArray16 };
        com.operations.Matrix.Matrix matrix18 = new com.operations.Matrix.Matrix(doubleArray17);
        boolean boolean20 = com.operations.Matrix.MatrixUtils.compare(matrix7, matrix18, (double) (-1));
        com.operations.Matrix.Matrix matrix21 = com.operations.Matrix.MatrixDecompositions.choleskyDecomposition(matrix18);
        boolean boolean22 = com.operations.Matrix.MatrixUtils.isSquare(matrix18);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertArrayEquals(doubleArray2, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertArrayEquals(doubleArray5, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 2 + "'", int8 == 2);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 2 + "'", int9 == 2);
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertArrayEquals(doubleArray13, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertArrayEquals(doubleArray16, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(matrix21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
    }

    @Test
    public void test4871() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4871");
        com.operations.Matrix.Matrix matrix2 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0L, (double) (byte) 10);
        double[] doubleArray5 = new double[] { 10, 'a' };
        double[] doubleArray8 = new double[] { 10, 'a' };
        double[][] doubleArray9 = new double[][] { doubleArray5, doubleArray8 };
        com.operations.Matrix.Matrix matrix10 = new com.operations.Matrix.Matrix(doubleArray9);
        int int11 = matrix10.getCols();
        int int12 = matrix10.getCols();
        int int13 = matrix10.getCols();
        com.operations.Matrix.Matrix[] matrixArray14 = com.operations.Matrix.MatrixDecompositions.luDecomposition(matrix10);
        com.operations.Matrix.Matrix matrix15 = com.operations.Matrix.MatrixOperations.multiply(matrix2, matrix10);
        com.operations.Matrix.Matrix matrix17 = com.operations.Matrix.MatrixTransformations.rotate2D((double) (short) 100);
        boolean boolean19 = com.operations.Matrix.MatrixUtils.compare(matrix10, matrix17, (double) (byte) 0);
        com.operations.Matrix.Matrix[] matrixArray20 = com.operations.Matrix.MatrixDecompositions.luDecomposition(matrix10);
        com.operations.Matrix.Matrix matrix21 = com.operations.Matrix.MatrixOperations.transpose(matrix10);
        com.operations.Matrix.Matrix matrix24 = com.operations.Matrix.MatrixTransformations.scale2D((double) 1.0f, (double) 1);
        com.operations.Matrix.Matrix matrix26 = com.operations.Matrix.MatrixTransformations.rotate2D((double) 1.0f);
        com.operations.Matrix.Matrix matrix29 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0L, (double) (byte) 10);
        int int30 = matrix29.getRows();
        com.operations.Matrix.Matrix matrix32 = com.operations.Matrix.MatrixOperations.scalarMultiply(matrix29, (double) 2);
        double double33 = com.operations.Matrix.MatrixUtils.frobeniusNorm(matrix29);
        com.operations.Matrix.Matrix matrix36 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0L, (double) (byte) 10);
        int int37 = matrix36.getRows();
        com.operations.Matrix.Matrix matrix39 = com.operations.Matrix.MatrixOperations.scalarMultiply(matrix36, (double) 2);
        com.operations.Matrix.Matrix matrix40 = com.operations.Matrix.MatrixOperations.subtract(matrix29, matrix39);
        com.operations.Matrix.Matrix matrix41 = com.operations.Matrix.MatrixOperations.add(matrix26, matrix39);
        boolean boolean43 = com.operations.Matrix.MatrixUtils.compare(matrix24, matrix26, (double) (byte) -1);
        com.operations.Matrix.Matrix matrix44 = com.operations.Matrix.MatrixOperations.subtract(matrix21, matrix24);
        com.operations.Matrix.Matrix matrix47 = com.operations.Matrix.MatrixTransformations.scale2D((double) (-1L), (double) '4');
        com.operations.Matrix.Matrix matrix48 = com.operations.Matrix.MatrixOperations.transpose(matrix47);
        double[] doubleArray51 = new double[] { 10, 'a' };
        double[] doubleArray54 = new double[] { 10, 'a' };
        double[][] doubleArray55 = new double[][] { doubleArray51, doubleArray54 };
        com.operations.Matrix.Matrix matrix56 = new com.operations.Matrix.Matrix(doubleArray55);
        com.operations.Matrix.Matrix matrix57 = new com.operations.Matrix.Matrix(doubleArray55);
        com.operations.Matrix.Matrix matrix59 = com.operations.Matrix.MatrixTransformations.rotate2D((double) (short) 100);
        double[] doubleArray62 = new double[] { 137.90576492663388d, (byte) -1 };
        double[] doubleArray63 = com.operations.Matrix.MatrixSolver.solveGaussian(matrix59, doubleArray62);
        com.operations.Matrix.Matrix matrix64 = com.operations.Matrix.MatrixOperations.add(matrix57, matrix59);
        com.operations.Matrix.Matrix matrix65 = com.operations.Matrix.MatrixOperations.transpose(matrix59);
        com.operations.Matrix.Matrix matrix66 = com.operations.Matrix.MatrixOperations.multiply(matrix48, matrix59);
        com.operations.Matrix.Matrix matrix67 = com.operations.Matrix.MatrixOperations.multiply(matrix44, matrix48);
        com.operations.Matrix.Matrix matrix69 = com.operations.Matrix.MatrixTransformations.rotate2D((double) 1.0f);
        com.operations.Matrix.Matrix matrix72 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0L, (double) (byte) 10);
        int int73 = matrix72.getRows();
        com.operations.Matrix.Matrix matrix75 = com.operations.Matrix.MatrixOperations.scalarMultiply(matrix72, (double) 2);
        boolean boolean77 = com.operations.Matrix.MatrixUtils.compare(matrix69, matrix75, (double) 10.0f);
        com.operations.Matrix.Matrix matrix78 = com.operations.Matrix.MatrixOperations.subtract(matrix67, matrix75);
        com.operations.Matrix.Matrix matrix81 = com.operations.Matrix.MatrixTransformations.scale2D((double) (byte) 10, (double) 10);
        com.operations.Matrix.Matrix matrix84 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0L, (double) (byte) 10);
        int int85 = matrix84.getRows();
        com.operations.Matrix.Matrix matrix87 = com.operations.Matrix.MatrixOperations.scalarMultiply(matrix84, (double) 2);
        matrix84.print();
        com.operations.Matrix.Matrix matrix90 = com.operations.Matrix.MatrixOperations.scalarMultiply(matrix84, 100.00499987500625d);
        int int91 = matrix90.getRows();
        com.operations.Matrix.Matrix matrix92 = com.operations.Matrix.MatrixOperations.add(matrix81, matrix90);
        com.operations.Matrix.Matrix matrix94 = com.operations.Matrix.MatrixTransformations.rotate2D((double) (short) -1);
        double double95 = com.operations.Matrix.MatrixUtils.frobeniusNorm(matrix94);
        com.operations.Matrix.Matrix matrix96 = com.operations.Matrix.MatrixOperations.add(matrix81, matrix94);
        boolean boolean98 = com.operations.Matrix.MatrixUtils.compare(matrix67, matrix96, 365.8209944768069d);
        org.junit.Assert.assertNotNull(matrix2);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertArrayEquals(doubleArray5, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertArrayEquals(doubleArray8, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 2 + "'", int11 == 2);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 2 + "'", int12 == 2);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 2 + "'", int13 == 2);
        org.junit.Assert.assertNotNull(matrixArray14);
        org.junit.Assert.assertNotNull(matrix15);
        org.junit.Assert.assertNotNull(matrix17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(matrixArray20);
        org.junit.Assert.assertNotNull(matrix21);
        org.junit.Assert.assertNotNull(matrix24);
        org.junit.Assert.assertNotNull(matrix26);
        org.junit.Assert.assertNotNull(matrix29);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 2 + "'", int30 == 2);
        org.junit.Assert.assertNotNull(matrix32);
        org.junit.Assert.assertTrue("'" + double33 + "' != '" + 10.0d + "'", double33 == 10.0d);
        org.junit.Assert.assertNotNull(matrix36);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 2 + "'", int37 == 2);
        org.junit.Assert.assertNotNull(matrix39);
        org.junit.Assert.assertNotNull(matrix40);
        org.junit.Assert.assertNotNull(matrix41);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(matrix44);
        org.junit.Assert.assertNotNull(matrix47);
        org.junit.Assert.assertNotNull(matrix48);
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertArrayEquals(doubleArray51, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray54);
        org.junit.Assert.assertArrayEquals(doubleArray54, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertNotNull(matrix59);
        org.junit.Assert.assertNotNull(doubleArray62);
        org.junit.Assert.assertArrayEquals(doubleArray62, new double[] { 137.90576492663388d, (-1.0d) }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray63);
        org.junit.Assert.assertArrayEquals(doubleArray63, new double[] { (-24.931892522286255d), (-135.63701830716116d) }, 1.0E-15);
        org.junit.Assert.assertNotNull(matrix64);
        org.junit.Assert.assertNotNull(matrix65);
        org.junit.Assert.assertNotNull(matrix66);
        org.junit.Assert.assertNotNull(matrix67);
        org.junit.Assert.assertNotNull(matrix69);
        org.junit.Assert.assertNotNull(matrix72);
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + 2 + "'", int73 == 2);
        org.junit.Assert.assertNotNull(matrix75);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertNotNull(matrix78);
        org.junit.Assert.assertNotNull(matrix81);
        org.junit.Assert.assertNotNull(matrix84);
        org.junit.Assert.assertTrue("'" + int85 + "' != '" + 2 + "'", int85 == 2);
        org.junit.Assert.assertNotNull(matrix87);
        org.junit.Assert.assertNotNull(matrix90);
        org.junit.Assert.assertTrue("'" + int91 + "' != '" + 2 + "'", int91 == 2);
        org.junit.Assert.assertNotNull(matrix92);
        org.junit.Assert.assertNotNull(matrix94);
        org.junit.Assert.assertTrue("'" + double95 + "' != '" + 1.4142135623730951d + "'", double95 == 1.4142135623730951d);
        org.junit.Assert.assertNotNull(matrix96);
        org.junit.Assert.assertTrue("'" + boolean98 + "' != '" + false + "'", boolean98 == false);
    }

    @Test
    public void test4872() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4872");
        com.operations.Matrix.Matrix matrix2 = com.operations.Matrix.MatrixTransformations.scale2D(0.0d, 65.19779036970327d);
        com.operations.Matrix.Matrix[] matrixArray3 = com.operations.Matrix.MatrixDecompositions.luDecomposition(matrix2);
        com.operations.Matrix.Matrix matrix5 = com.operations.Matrix.MatrixOperations.scalarMultiply(matrix2, 1040.0d);
        int int6 = matrix2.getCols();
        org.junit.Assert.assertNotNull(matrix2);
        org.junit.Assert.assertNotNull(matrixArray3);
        org.junit.Assert.assertNotNull(matrix5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 2 + "'", int6 == 2);
    }

    @Test
    public void test4873() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4873");
        com.operations.Matrix.Matrix matrix2 = com.operations.Matrix.MatrixTransformations.project2D((-0.1736481776669303d), 146781.22563870353d);
        com.operations.Matrix.Matrix matrix4 = com.operations.Matrix.MatrixTransformations.rotate2D((double) (short) 100);
        double[] doubleArray7 = new double[] { 137.90576492663388d, (byte) -1 };
        double[] doubleArray8 = com.operations.Matrix.MatrixSolver.solveGaussian(matrix4, doubleArray7);
        com.operations.Matrix.Matrix matrix11 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0L, (double) (byte) 10);
        int int12 = matrix11.getRows();
        com.operations.Matrix.Matrix matrix15 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0L, (double) (byte) 10);
        int int16 = matrix15.getRows();
        com.operations.Matrix.Matrix matrix18 = com.operations.Matrix.MatrixOperations.scalarMultiply(matrix15, (double) 2);
        com.operations.Matrix.Matrix matrix19 = com.operations.Matrix.MatrixOperations.subtract(matrix11, matrix15);
        com.operations.Matrix.Matrix matrix22 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0L, (double) (byte) 10);
        int int23 = matrix22.getRows();
        com.operations.Matrix.Matrix matrix29 = com.operations.Matrix.MatrixUtils.generateRandomMatrix(100, (int) (byte) 1, (int) '#', (int) '#', 1L);
        boolean boolean31 = com.operations.Matrix.MatrixUtils.compare(matrix22, matrix29, (double) 1.0f);
        com.operations.Matrix.Matrix matrix33 = com.operations.Matrix.MatrixOperations.scalarMultiply(matrix22, (double) 1L);
        boolean boolean35 = com.operations.Matrix.MatrixUtils.compare(matrix19, matrix33, 0.0d);
        int int36 = matrix33.getCols();
        com.operations.Matrix.Matrix matrix37 = com.operations.Matrix.MatrixOperations.transpose(matrix33);
        double double38 = com.operations.Matrix.MatrixUtils.frobeniusNorm(matrix37);
        com.operations.Matrix.Matrix matrix39 = com.operations.Matrix.MatrixOperations.add(matrix4, matrix37);
        com.operations.Matrix.Matrix matrix40 = com.operations.Matrix.MatrixOperations.multiply(matrix2, matrix4);
        boolean boolean41 = com.operations.Matrix.MatrixUtils.isSymmetric(matrix2);
        org.junit.Assert.assertNotNull(matrix2);
        org.junit.Assert.assertNotNull(matrix4);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertArrayEquals(doubleArray7, new double[] { 137.90576492663388d, (-1.0d) }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertArrayEquals(doubleArray8, new double[] { (-24.931892522286255d), (-135.63701830716116d) }, 1.0E-15);
        org.junit.Assert.assertNotNull(matrix11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 2 + "'", int12 == 2);
        org.junit.Assert.assertNotNull(matrix15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 2 + "'", int16 == 2);
        org.junit.Assert.assertNotNull(matrix18);
        org.junit.Assert.assertNotNull(matrix19);
        org.junit.Assert.assertNotNull(matrix22);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 2 + "'", int23 == 2);
        org.junit.Assert.assertNotNull(matrix29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(matrix33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 2 + "'", int36 == 2);
        org.junit.Assert.assertNotNull(matrix37);
        org.junit.Assert.assertTrue("'" + double38 + "' != '" + 10.0d + "'", double38 == 10.0d);
        org.junit.Assert.assertNotNull(matrix39);
        org.junit.Assert.assertNotNull(matrix40);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
    }

    @Test
    public void test4874() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4874");
        com.operations.Matrix.Matrix matrix2 = com.operations.Matrix.MatrixTransformations.scale2D(391.8840992892044d, 0.0d);
        org.junit.Assert.assertNotNull(matrix2);
    }

    @Test
    public void test4875() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4875");
        com.operations.Matrix.Matrix matrix2 = com.operations.Matrix.MatrixTransformations.project2D(0.01745240643728351d, 3200.015624961853d);
        int int3 = matrix2.getCols();
        java.lang.Class<?> wildcardClass4 = matrix2.getClass();
        org.junit.Assert.assertNotNull(matrix2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 2 + "'", int3 == 2);
        org.junit.Assert.assertNotNull(wildcardClass4);
    }

    @Test
    public void test4876() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4876");
        com.operations.Matrix.Matrix matrix2 = com.operations.Matrix.MatrixTransformations.scale2D(131.06486943494812d, (double) (byte) 100);
        com.operations.Matrix.Matrix matrix5 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0.0f, (double) (-1));
        com.operations.Matrix.Matrix matrix8 = com.operations.Matrix.MatrixTransformations.scale2D(146.4308710620817d, (double) 10L);
        com.operations.Matrix.Matrix matrix9 = com.operations.Matrix.MatrixOperations.multiply(matrix5, matrix8);
        com.operations.Matrix.Matrix matrix11 = com.operations.Matrix.MatrixTransformations.rotate2D((double) 1.0f);
        com.operations.Matrix.Matrix matrix14 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0L, (double) (byte) 10);
        int int15 = matrix14.getRows();
        com.operations.Matrix.Matrix matrix17 = com.operations.Matrix.MatrixOperations.scalarMultiply(matrix14, (double) 2);
        double double18 = com.operations.Matrix.MatrixUtils.frobeniusNorm(matrix14);
        com.operations.Matrix.Matrix matrix21 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0L, (double) (byte) 10);
        int int22 = matrix21.getRows();
        com.operations.Matrix.Matrix matrix24 = com.operations.Matrix.MatrixOperations.scalarMultiply(matrix21, (double) 2);
        com.operations.Matrix.Matrix matrix25 = com.operations.Matrix.MatrixOperations.subtract(matrix14, matrix24);
        com.operations.Matrix.Matrix matrix26 = com.operations.Matrix.MatrixOperations.add(matrix11, matrix24);
        matrix11.print();
        double[] doubleArray30 = new double[] { 10, 'a' };
        double[] doubleArray33 = new double[] { 10, 'a' };
        double[][] doubleArray34 = new double[][] { doubleArray30, doubleArray33 };
        com.operations.Matrix.Matrix matrix35 = new com.operations.Matrix.Matrix(doubleArray34);
        com.operations.Matrix.Matrix matrix36 = com.operations.Matrix.MatrixOperations.transpose(matrix35);
        com.operations.Matrix.Matrix matrix39 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0L, (double) (byte) 10);
        int int40 = matrix39.getRows();
        com.operations.Matrix.Matrix matrix46 = com.operations.Matrix.MatrixUtils.generateRandomMatrix(100, (int) (byte) 1, (int) '#', (int) '#', 1L);
        boolean boolean48 = com.operations.Matrix.MatrixUtils.compare(matrix39, matrix46, (double) 1.0f);
        com.operations.Matrix.Matrix matrix50 = com.operations.Matrix.MatrixOperations.scalarMultiply(matrix39, (double) 1L);
        matrix39.print();
        com.operations.Matrix.Matrix matrix52 = com.operations.Matrix.MatrixOperations.multiply(matrix36, matrix39);
        com.operations.Matrix.Matrix matrix53 = com.operations.Matrix.MatrixOperations.multiply(matrix11, matrix39);
        com.operations.Matrix.Matrix matrix54 = com.operations.Matrix.MatrixOperations.subtract(matrix5, matrix39);
        com.operations.Matrix.Matrix matrix55 = com.operations.Matrix.MatrixOperations.transpose(matrix39);
        com.operations.Matrix.Matrix matrix56 = com.operations.Matrix.MatrixOperations.multiply(matrix2, matrix39);
        double[] doubleArray59 = new double[] { 10, 'a' };
        double[] doubleArray62 = new double[] { 10, 'a' };
        double[][] doubleArray63 = new double[][] { doubleArray59, doubleArray62 };
        com.operations.Matrix.Matrix matrix64 = new com.operations.Matrix.Matrix(doubleArray63);
        com.operations.Matrix.Matrix matrix65 = new com.operations.Matrix.Matrix(doubleArray63);
        com.operations.Matrix.Matrix matrix67 = com.operations.Matrix.MatrixTransformations.rotate2D((double) (short) 100);
        double[] doubleArray70 = new double[] { 137.90576492663388d, (byte) -1 };
        double[] doubleArray71 = com.operations.Matrix.MatrixSolver.solveGaussian(matrix67, doubleArray70);
        com.operations.Matrix.Matrix matrix72 = com.operations.Matrix.MatrixOperations.add(matrix65, matrix67);
        com.operations.Matrix.Matrix matrix73 = com.operations.Matrix.MatrixOperations.transpose(matrix67);
        com.operations.Matrix.Matrix matrix75 = com.operations.Matrix.MatrixTransformations.rotate2D((double) (short) 100);
        com.operations.Matrix.Matrix matrix76 = com.operations.Matrix.MatrixOperations.subtract(matrix67, matrix75);
        boolean boolean77 = com.operations.Matrix.MatrixUtils.isSymmetric(matrix75);
        com.operations.Matrix.Matrix matrix78 = com.operations.Matrix.MatrixOperations.subtract(matrix39, matrix75);
        double double79 = com.operations.Matrix.MatrixUtils.frobeniusNorm(matrix75);
        org.junit.Assert.assertNotNull(matrix2);
        org.junit.Assert.assertNotNull(matrix5);
        org.junit.Assert.assertNotNull(matrix8);
        org.junit.Assert.assertNotNull(matrix9);
        org.junit.Assert.assertNotNull(matrix11);
        org.junit.Assert.assertNotNull(matrix14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 2 + "'", int15 == 2);
        org.junit.Assert.assertNotNull(matrix17);
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 10.0d + "'", double18 == 10.0d);
        org.junit.Assert.assertNotNull(matrix21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 2 + "'", int22 == 2);
        org.junit.Assert.assertNotNull(matrix24);
        org.junit.Assert.assertNotNull(matrix25);
        org.junit.Assert.assertNotNull(matrix26);
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertArrayEquals(doubleArray30, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertArrayEquals(doubleArray33, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertNotNull(matrix36);
        org.junit.Assert.assertNotNull(matrix39);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 2 + "'", int40 == 2);
        org.junit.Assert.assertNotNull(matrix46);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(matrix50);
        org.junit.Assert.assertNotNull(matrix52);
        org.junit.Assert.assertNotNull(matrix53);
        org.junit.Assert.assertNotNull(matrix54);
        org.junit.Assert.assertNotNull(matrix55);
        org.junit.Assert.assertNotNull(matrix56);
        org.junit.Assert.assertNotNull(doubleArray59);
        org.junit.Assert.assertArrayEquals(doubleArray59, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray62);
        org.junit.Assert.assertArrayEquals(doubleArray62, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray63);
        org.junit.Assert.assertNotNull(matrix67);
        org.junit.Assert.assertNotNull(doubleArray70);
        org.junit.Assert.assertArrayEquals(doubleArray70, new double[] { 137.90576492663388d, (-1.0d) }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray71);
        org.junit.Assert.assertArrayEquals(doubleArray71, new double[] { (-24.931892522286255d), (-135.63701830716116d) }, 1.0E-15);
        org.junit.Assert.assertNotNull(matrix72);
        org.junit.Assert.assertNotNull(matrix73);
        org.junit.Assert.assertNotNull(matrix75);
        org.junit.Assert.assertNotNull(matrix76);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertNotNull(matrix78);
        org.junit.Assert.assertTrue("'" + double79 + "' != '" + 1.414213562373095d + "'", double79 == 1.414213562373095d);
    }

    @Test
    public void test4877() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4877");
        com.operations.Matrix.Matrix matrix2 = com.operations.Matrix.MatrixTransformations.project2D(10.0d, (double) 1);
        double[][] doubleArray3 = matrix2.getData();
        com.operations.Matrix.Matrix matrix4 = new com.operations.Matrix.Matrix(doubleArray3);
        com.operations.Matrix.Matrix matrix6 = com.operations.Matrix.MatrixOperations.scalarMultiply(matrix4, (-1.0d));
        com.operations.Matrix.Matrix matrix7 = com.operations.Matrix.MatrixDecompositions.choleskyDecomposition(matrix4);
        int int8 = matrix7.getRows();
        org.junit.Assert.assertNotNull(matrix2);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertNotNull(matrix6);
        org.junit.Assert.assertNotNull(matrix7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 2 + "'", int8 == 2);
    }

    @Test
    public void test4878() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4878");
        com.operations.Matrix.Matrix matrix1 = com.operations.Matrix.MatrixTransformations.rotate2D((-0.1736481776669303d));
        double[] doubleArray4 = new double[] { 10, 'a' };
        double[] doubleArray7 = new double[] { 10, 'a' };
        double[][] doubleArray8 = new double[][] { doubleArray4, doubleArray7 };
        com.operations.Matrix.Matrix matrix9 = new com.operations.Matrix.Matrix(doubleArray8);
        com.operations.Matrix.Matrix matrix10 = new com.operations.Matrix.Matrix(doubleArray8);
        boolean boolean11 = com.operations.Matrix.MatrixUtils.isSquare(matrix10);
        double[] doubleArray14 = new double[] { 10, 'a' };
        double[] doubleArray17 = new double[] { 10, 'a' };
        double[][] doubleArray18 = new double[][] { doubleArray14, doubleArray17 };
        com.operations.Matrix.Matrix matrix19 = new com.operations.Matrix.Matrix(doubleArray18);
        int int20 = matrix19.getCols();
        int int21 = matrix19.getCols();
        matrix19.print();
        double[] doubleArray25 = new double[] { 10, 'a' };
        double[] doubleArray28 = new double[] { 10, 'a' };
        double[][] doubleArray29 = new double[][] { doubleArray25, doubleArray28 };
        com.operations.Matrix.Matrix matrix30 = new com.operations.Matrix.Matrix(doubleArray29);
        boolean boolean32 = com.operations.Matrix.MatrixUtils.compare(matrix19, matrix30, (double) (-1));
        com.operations.Matrix.Matrix matrix33 = com.operations.Matrix.MatrixOperations.subtract(matrix10, matrix30);
        double[] doubleArray36 = new double[] { 10, 'a' };
        double[] doubleArray39 = new double[] { 10, 'a' };
        double[][] doubleArray40 = new double[][] { doubleArray36, doubleArray39 };
        com.operations.Matrix.Matrix matrix41 = new com.operations.Matrix.Matrix(doubleArray40);
        com.operations.Matrix.Matrix matrix42 = new com.operations.Matrix.Matrix(doubleArray40);
        boolean boolean43 = com.operations.Matrix.MatrixUtils.isSquare(matrix42);
        double[] doubleArray46 = new double[] { 10, 'a' };
        double[] doubleArray49 = new double[] { 10, 'a' };
        double[][] doubleArray50 = new double[][] { doubleArray46, doubleArray49 };
        com.operations.Matrix.Matrix matrix51 = new com.operations.Matrix.Matrix(doubleArray50);
        int int52 = matrix51.getCols();
        int int53 = matrix51.getCols();
        matrix51.print();
        double[] doubleArray57 = new double[] { 10, 'a' };
        double[] doubleArray60 = new double[] { 10, 'a' };
        double[][] doubleArray61 = new double[][] { doubleArray57, doubleArray60 };
        com.operations.Matrix.Matrix matrix62 = new com.operations.Matrix.Matrix(doubleArray61);
        boolean boolean64 = com.operations.Matrix.MatrixUtils.compare(matrix51, matrix62, (double) (-1));
        com.operations.Matrix.Matrix matrix65 = com.operations.Matrix.MatrixOperations.subtract(matrix42, matrix62);
        com.operations.Matrix.Matrix matrix66 = com.operations.Matrix.MatrixOperations.add(matrix10, matrix65);
        com.operations.Matrix.Matrix matrix67 = com.operations.Matrix.MatrixOperations.multiply(matrix1, matrix66);
        int int68 = matrix66.getRows();
        matrix66.print();
        com.operations.Matrix.Matrix[] matrixArray70 = com.operations.Matrix.MatrixDecompositions.luDecomposition(matrix66);
        // The following exception was thrown during execution in test generation
        try {
            matrix66.setValue((int) (byte) 0, 10, 100.00000152293244d);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: Index 10 out of bounds for length 2");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(matrix1);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertArrayEquals(doubleArray4, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertArrayEquals(doubleArray7, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertArrayEquals(doubleArray14, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertArrayEquals(doubleArray17, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 2 + "'", int20 == 2);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 2 + "'", int21 == 2);
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertArrayEquals(doubleArray25, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertArrayEquals(doubleArray28, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(matrix33);
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertArrayEquals(doubleArray36, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertArrayEquals(doubleArray39, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertNotNull(doubleArray46);
        org.junit.Assert.assertArrayEquals(doubleArray46, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertArrayEquals(doubleArray49, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 2 + "'", int52 == 2);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 2 + "'", int53 == 2);
        org.junit.Assert.assertNotNull(doubleArray57);
        org.junit.Assert.assertArrayEquals(doubleArray57, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray60);
        org.junit.Assert.assertArrayEquals(doubleArray60, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray61);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertNotNull(matrix65);
        org.junit.Assert.assertNotNull(matrix66);
        org.junit.Assert.assertNotNull(matrix67);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 2 + "'", int68 == 2);
        org.junit.Assert.assertNotNull(matrixArray70);
    }

    @Test
    public void test4879() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4879");
        com.operations.Matrix.Matrix matrix2 = com.operations.Matrix.MatrixTransformations.scale2D(131.06486943494812d, (double) (-1L));
        boolean boolean3 = com.operations.Matrix.MatrixUtils.isSymmetric(matrix2);
        org.junit.Assert.assertNotNull(matrix2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
    }

    @Test
    public void test4880() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4880");
        com.operations.Matrix.Matrix matrix2 = new com.operations.Matrix.Matrix((int) (short) 0, 2);
    }

    @Test
    public void test4881() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4881");
        com.operations.Matrix.Matrix matrix2 = com.operations.Matrix.MatrixTransformations.project2D(101.9803902718557d, 310.45666917731234d);
        org.junit.Assert.assertNotNull(matrix2);
    }

    @Test
    public void test4882() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4882");
        com.operations.Matrix.Matrix matrix2 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0.0f, (double) (-1));
        com.operations.Matrix.Matrix matrix5 = com.operations.Matrix.MatrixTransformations.scale2D(146.4308710620817d, (double) 10L);
        com.operations.Matrix.Matrix matrix6 = com.operations.Matrix.MatrixOperations.multiply(matrix2, matrix5);
        com.operations.Matrix.Matrix matrix8 = com.operations.Matrix.MatrixTransformations.rotate2D((double) 1.0f);
        com.operations.Matrix.Matrix matrix11 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0L, (double) (byte) 10);
        int int12 = matrix11.getRows();
        com.operations.Matrix.Matrix matrix14 = com.operations.Matrix.MatrixOperations.scalarMultiply(matrix11, (double) 2);
        double double15 = com.operations.Matrix.MatrixUtils.frobeniusNorm(matrix11);
        com.operations.Matrix.Matrix matrix18 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0L, (double) (byte) 10);
        int int19 = matrix18.getRows();
        com.operations.Matrix.Matrix matrix21 = com.operations.Matrix.MatrixOperations.scalarMultiply(matrix18, (double) 2);
        com.operations.Matrix.Matrix matrix22 = com.operations.Matrix.MatrixOperations.subtract(matrix11, matrix21);
        com.operations.Matrix.Matrix matrix23 = com.operations.Matrix.MatrixOperations.add(matrix8, matrix21);
        matrix8.print();
        double[] doubleArray27 = new double[] { 10, 'a' };
        double[] doubleArray30 = new double[] { 10, 'a' };
        double[][] doubleArray31 = new double[][] { doubleArray27, doubleArray30 };
        com.operations.Matrix.Matrix matrix32 = new com.operations.Matrix.Matrix(doubleArray31);
        com.operations.Matrix.Matrix matrix33 = com.operations.Matrix.MatrixOperations.transpose(matrix32);
        com.operations.Matrix.Matrix matrix36 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0L, (double) (byte) 10);
        int int37 = matrix36.getRows();
        com.operations.Matrix.Matrix matrix43 = com.operations.Matrix.MatrixUtils.generateRandomMatrix(100, (int) (byte) 1, (int) '#', (int) '#', 1L);
        boolean boolean45 = com.operations.Matrix.MatrixUtils.compare(matrix36, matrix43, (double) 1.0f);
        com.operations.Matrix.Matrix matrix47 = com.operations.Matrix.MatrixOperations.scalarMultiply(matrix36, (double) 1L);
        matrix36.print();
        com.operations.Matrix.Matrix matrix49 = com.operations.Matrix.MatrixOperations.multiply(matrix33, matrix36);
        com.operations.Matrix.Matrix matrix50 = com.operations.Matrix.MatrixOperations.multiply(matrix8, matrix36);
        com.operations.Matrix.Matrix matrix51 = com.operations.Matrix.MatrixOperations.subtract(matrix2, matrix36);
        matrix2.print();
        com.operations.Matrix.Matrix matrix55 = com.operations.Matrix.MatrixTransformations.project2D((double) (short) 0, (double) 1);
        com.operations.Matrix.Matrix matrix56 = com.operations.Matrix.MatrixOperations.multiply(matrix2, matrix55);
        boolean boolean57 = com.operations.Matrix.MatrixUtils.isSymmetric(matrix2);
        org.junit.Assert.assertNotNull(matrix2);
        org.junit.Assert.assertNotNull(matrix5);
        org.junit.Assert.assertNotNull(matrix6);
        org.junit.Assert.assertNotNull(matrix8);
        org.junit.Assert.assertNotNull(matrix11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 2 + "'", int12 == 2);
        org.junit.Assert.assertNotNull(matrix14);
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 10.0d + "'", double15 == 10.0d);
        org.junit.Assert.assertNotNull(matrix18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 2 + "'", int19 == 2);
        org.junit.Assert.assertNotNull(matrix21);
        org.junit.Assert.assertNotNull(matrix22);
        org.junit.Assert.assertNotNull(matrix23);
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertArrayEquals(doubleArray27, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertArrayEquals(doubleArray30, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertNotNull(matrix33);
        org.junit.Assert.assertNotNull(matrix36);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 2 + "'", int37 == 2);
        org.junit.Assert.assertNotNull(matrix43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(matrix47);
        org.junit.Assert.assertNotNull(matrix49);
        org.junit.Assert.assertNotNull(matrix50);
        org.junit.Assert.assertNotNull(matrix51);
        org.junit.Assert.assertNotNull(matrix55);
        org.junit.Assert.assertNotNull(matrix56);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + true + "'", boolean57 == true);
    }

    @Test
    public void test4883() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4883");
        com.operations.Matrix.Matrix matrix2 = com.operations.Matrix.MatrixTransformations.project2D((double) 100L, (double) 100);
        com.operations.Matrix.Matrix matrix4 = com.operations.Matrix.MatrixTransformations.rotate2D((double) (short) 100);
        double[] doubleArray7 = new double[] { 137.90576492663388d, (byte) -1 };
        double[] doubleArray8 = com.operations.Matrix.MatrixSolver.solveGaussian(matrix4, doubleArray7);
        com.operations.Matrix.Matrix matrix11 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0L, (double) (byte) 10);
        double[] doubleArray14 = new double[] { 10, 'a' };
        double[] doubleArray17 = new double[] { 10, 'a' };
        double[][] doubleArray18 = new double[][] { doubleArray14, doubleArray17 };
        com.operations.Matrix.Matrix matrix19 = new com.operations.Matrix.Matrix(doubleArray18);
        int int20 = matrix19.getCols();
        int int21 = matrix19.getCols();
        int int22 = matrix19.getCols();
        com.operations.Matrix.Matrix[] matrixArray23 = com.operations.Matrix.MatrixDecompositions.luDecomposition(matrix19);
        com.operations.Matrix.Matrix matrix24 = com.operations.Matrix.MatrixOperations.multiply(matrix11, matrix19);
        boolean boolean26 = com.operations.Matrix.MatrixUtils.compare(matrix4, matrix11, (double) (-1L));
        boolean boolean27 = com.operations.Matrix.MatrixUtils.isSymmetric(matrix4);
        int int28 = matrix4.getCols();
        com.operations.Matrix.Matrix[] matrixArray29 = com.operations.Matrix.MatrixDecompositions.luDecomposition(matrix4);
        double double30 = com.operations.Matrix.MatrixUtils.frobeniusNorm(matrix4);
        com.operations.Matrix.Matrix matrix32 = com.operations.Matrix.MatrixTransformations.rotate2D(100.0d);
        int int33 = matrix32.getCols();
        matrix32.print();
        com.operations.Matrix.Matrix matrix36 = com.operations.Matrix.MatrixOperations.scalarMultiply(matrix32, (double) (byte) 1);
        com.operations.Matrix.Matrix matrix38 = com.operations.Matrix.MatrixTransformations.rotate2D(350.0d);
        com.operations.Matrix.Matrix matrix40 = com.operations.Matrix.MatrixTransformations.rotate2D((double) (short) 100);
        double[] doubleArray43 = new double[] { 137.90576492663388d, (byte) -1 };
        double[] doubleArray44 = com.operations.Matrix.MatrixSolver.solveGaussian(matrix40, doubleArray43);
        double[] doubleArray45 = com.operations.Matrix.MatrixSolver.solveGaussian(matrix38, doubleArray44);
        double[] doubleArray46 = com.operations.Matrix.MatrixSolver.solveGaussian(matrix32, doubleArray44);
        double[] doubleArray47 = com.operations.Matrix.MatrixSolver.solveGaussian(matrix4, doubleArray46);
        boolean boolean48 = com.operations.Matrix.MatrixUtils.isSymmetric(matrix4);
        com.operations.Matrix.Matrix matrix49 = com.operations.Matrix.MatrixOperations.add(matrix2, matrix4);
        matrix4.print();
        org.junit.Assert.assertNotNull(matrix2);
        org.junit.Assert.assertNotNull(matrix4);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertArrayEquals(doubleArray7, new double[] { 137.90576492663388d, (-1.0d) }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertArrayEquals(doubleArray8, new double[] { (-24.931892522286255d), (-135.63701830716116d) }, 1.0E-15);
        org.junit.Assert.assertNotNull(matrix11);
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertArrayEquals(doubleArray14, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertArrayEquals(doubleArray17, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 2 + "'", int20 == 2);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 2 + "'", int21 == 2);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 2 + "'", int22 == 2);
        org.junit.Assert.assertNotNull(matrixArray23);
        org.junit.Assert.assertNotNull(matrix24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 2 + "'", int28 == 2);
        org.junit.Assert.assertNotNull(matrixArray29);
        org.junit.Assert.assertTrue("'" + double30 + "' != '" + 1.414213562373095d + "'", double30 == 1.414213562373095d);
        org.junit.Assert.assertNotNull(matrix32);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 2 + "'", int33 == 2);
        org.junit.Assert.assertNotNull(matrix36);
        org.junit.Assert.assertNotNull(matrix38);
        org.junit.Assert.assertNotNull(matrix40);
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertArrayEquals(doubleArray43, new double[] { 137.90576492663388d, (-1.0d) }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertArrayEquals(doubleArray44, new double[] { (-24.931892522286255d), (-135.63701830716116d) }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertArrayEquals(doubleArray45, new double[] { (-0.9999999999999858d), (-137.90576492663388d) }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray46);
        org.junit.Assert.assertArrayEquals(doubleArray46, new double[] { (-129.24700952206834d), 48.1062421064292d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertArrayEquals(doubleArray47, new double[] { 69.81890786710137d, 118.92989575479001d }, 1.0E-15);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(matrix49);
    }

    @Test
    public void test4884() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4884");
        double[] doubleArray2 = new double[] { 10, 'a' };
        double[] doubleArray5 = new double[] { 10, 'a' };
        double[][] doubleArray6 = new double[][] { doubleArray2, doubleArray5 };
        com.operations.Matrix.Matrix matrix7 = new com.operations.Matrix.Matrix(doubleArray6);
        com.operations.Matrix.Matrix matrix8 = new com.operations.Matrix.Matrix(doubleArray6);
        boolean boolean9 = com.operations.Matrix.MatrixUtils.isSquare(matrix8);
        double[] doubleArray12 = new double[] { 10, 'a' };
        double[] doubleArray15 = new double[] { 10, 'a' };
        double[][] doubleArray16 = new double[][] { doubleArray12, doubleArray15 };
        com.operations.Matrix.Matrix matrix17 = new com.operations.Matrix.Matrix(doubleArray16);
        int int18 = matrix17.getCols();
        int int19 = matrix17.getCols();
        matrix17.print();
        double[] doubleArray23 = new double[] { 10, 'a' };
        double[] doubleArray26 = new double[] { 10, 'a' };
        double[][] doubleArray27 = new double[][] { doubleArray23, doubleArray26 };
        com.operations.Matrix.Matrix matrix28 = new com.operations.Matrix.Matrix(doubleArray27);
        boolean boolean30 = com.operations.Matrix.MatrixUtils.compare(matrix17, matrix28, (double) (-1));
        com.operations.Matrix.Matrix matrix31 = com.operations.Matrix.MatrixOperations.subtract(matrix8, matrix28);
        com.operations.Matrix.Matrix[] matrixArray32 = com.operations.Matrix.MatrixDecompositions.luDecomposition(matrix31);
        double[][] doubleArray33 = matrix31.getData();
        com.operations.Matrix.Matrix matrix36 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0L, (double) (byte) 10);
        double[] doubleArray39 = new double[] { 10, 'a' };
        double[] doubleArray42 = new double[] { 10, 'a' };
        double[][] doubleArray43 = new double[][] { doubleArray39, doubleArray42 };
        com.operations.Matrix.Matrix matrix44 = new com.operations.Matrix.Matrix(doubleArray43);
        int int45 = matrix44.getCols();
        int int46 = matrix44.getCols();
        int int47 = matrix44.getCols();
        com.operations.Matrix.Matrix[] matrixArray48 = com.operations.Matrix.MatrixDecompositions.luDecomposition(matrix44);
        com.operations.Matrix.Matrix matrix49 = com.operations.Matrix.MatrixOperations.multiply(matrix36, matrix44);
        int int50 = matrix44.getRows();
        com.operations.Matrix.Matrix matrix51 = com.operations.Matrix.MatrixOperations.multiply(matrix31, matrix44);
        matrix51.print();
        double[] doubleArray55 = new double[] { 10, 'a' };
        double[] doubleArray58 = new double[] { 10, 'a' };
        double[][] doubleArray59 = new double[][] { doubleArray55, doubleArray58 };
        com.operations.Matrix.Matrix matrix60 = new com.operations.Matrix.Matrix(doubleArray59);
        com.operations.Matrix.Matrix matrix61 = new com.operations.Matrix.Matrix(doubleArray59);
        com.operations.Matrix.Matrix matrix63 = com.operations.Matrix.MatrixTransformations.rotate2D((double) (short) 100);
        double[] doubleArray66 = new double[] { 137.90576492663388d, (byte) -1 };
        double[] doubleArray67 = com.operations.Matrix.MatrixSolver.solveGaussian(matrix63, doubleArray66);
        com.operations.Matrix.Matrix matrix68 = com.operations.Matrix.MatrixOperations.add(matrix61, matrix63);
        com.operations.Matrix.Matrix matrix69 = com.operations.Matrix.MatrixDecompositions.choleskyDecomposition(matrix61);
        boolean boolean70 = com.operations.Matrix.MatrixUtils.isSymmetric(matrix61);
        boolean boolean72 = com.operations.Matrix.MatrixUtils.compare(matrix51, matrix61, 1.4142135623730951d);
        boolean boolean73 = com.operations.Matrix.MatrixUtils.isSymmetric(matrix51);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertArrayEquals(doubleArray2, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertArrayEquals(doubleArray5, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertArrayEquals(doubleArray12, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertArrayEquals(doubleArray15, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 2 + "'", int18 == 2);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 2 + "'", int19 == 2);
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertArrayEquals(doubleArray23, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertArrayEquals(doubleArray26, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(matrix31);
        org.junit.Assert.assertNotNull(matrixArray32);
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertNotNull(matrix36);
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertArrayEquals(doubleArray39, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertArrayEquals(doubleArray42, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 2 + "'", int45 == 2);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 2 + "'", int46 == 2);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 2 + "'", int47 == 2);
        org.junit.Assert.assertNotNull(matrixArray48);
        org.junit.Assert.assertNotNull(matrix49);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 2 + "'", int50 == 2);
        org.junit.Assert.assertNotNull(matrix51);
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertArrayEquals(doubleArray55, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray58);
        org.junit.Assert.assertArrayEquals(doubleArray58, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray59);
        org.junit.Assert.assertNotNull(matrix63);
        org.junit.Assert.assertNotNull(doubleArray66);
        org.junit.Assert.assertArrayEquals(doubleArray66, new double[] { 137.90576492663388d, (-1.0d) }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray67);
        org.junit.Assert.assertArrayEquals(doubleArray67, new double[] { (-24.931892522286255d), (-135.63701830716116d) }, 1.0E-15);
        org.junit.Assert.assertNotNull(matrix68);
        org.junit.Assert.assertNotNull(matrix69);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + true + "'", boolean73 == true);
    }

    @Test
    public void test4885() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4885");
        com.operations.Matrix.Matrix matrix2 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0L, (double) (byte) 10);
        double[] doubleArray5 = new double[] { 10, 'a' };
        double[] doubleArray8 = new double[] { 10, 'a' };
        double[][] doubleArray9 = new double[][] { doubleArray5, doubleArray8 };
        com.operations.Matrix.Matrix matrix10 = new com.operations.Matrix.Matrix(doubleArray9);
        int int11 = matrix10.getCols();
        int int12 = matrix10.getCols();
        int int13 = matrix10.getCols();
        com.operations.Matrix.Matrix[] matrixArray14 = com.operations.Matrix.MatrixDecompositions.luDecomposition(matrix10);
        com.operations.Matrix.Matrix matrix15 = com.operations.Matrix.MatrixOperations.multiply(matrix2, matrix10);
        com.operations.Matrix.Matrix matrix17 = com.operations.Matrix.MatrixTransformations.rotate2D((double) (short) 100);
        boolean boolean19 = com.operations.Matrix.MatrixUtils.compare(matrix10, matrix17, (double) (byte) 0);
        double[] doubleArray22 = new double[] { 10, 'a' };
        double[] doubleArray25 = new double[] { 10, 'a' };
        double[][] doubleArray26 = new double[][] { doubleArray22, doubleArray25 };
        com.operations.Matrix.Matrix matrix27 = new com.operations.Matrix.Matrix(doubleArray26);
        com.operations.Matrix.Matrix matrix28 = new com.operations.Matrix.Matrix(doubleArray26);
        com.operations.Matrix.Matrix matrix29 = new com.operations.Matrix.Matrix(doubleArray26);
        boolean boolean31 = com.operations.Matrix.MatrixUtils.compare(matrix10, matrix29, (double) (-1));
        double[] doubleArray34 = new double[] { 10, 'a' };
        double[] doubleArray37 = new double[] { 10, 'a' };
        double[][] doubleArray38 = new double[][] { doubleArray34, doubleArray37 };
        com.operations.Matrix.Matrix matrix39 = new com.operations.Matrix.Matrix(doubleArray38);
        com.operations.Matrix.Matrix matrix40 = new com.operations.Matrix.Matrix(doubleArray38);
        boolean boolean41 = com.operations.Matrix.MatrixUtils.isSquare(matrix40);
        com.operations.Matrix.Matrix matrix42 = com.operations.Matrix.MatrixOperations.multiply(matrix29, matrix40);
        com.operations.Matrix.Matrix matrix45 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0L, (double) (byte) 10);
        int int46 = matrix45.getRows();
        com.operations.Matrix.Matrix matrix48 = com.operations.Matrix.MatrixOperations.scalarMultiply(matrix45, (double) 2);
        matrix45.print();
        matrix45.print();
        com.operations.Matrix.Matrix matrix51 = com.operations.Matrix.MatrixOperations.multiply(matrix42, matrix45);
        com.operations.Matrix.Matrix matrix54 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0.0f, 350.0d);
        com.operations.Matrix.Matrix matrix57 = com.operations.Matrix.MatrixTransformations.project2D(0.0d, (double) 0);
        com.operations.Matrix.Matrix[] matrixArray58 = com.operations.Matrix.MatrixDecompositions.luDecomposition(matrix57);
        com.operations.Matrix.Matrix matrix61 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0L, (double) (byte) 10);
        int int62 = matrix61.getRows();
        com.operations.Matrix.Matrix matrix64 = com.operations.Matrix.MatrixOperations.scalarMultiply(matrix61, (double) 2);
        double double65 = com.operations.Matrix.MatrixUtils.frobeniusNorm(matrix61);
        int int66 = matrix61.getRows();
        com.operations.Matrix.Matrix matrix67 = com.operations.Matrix.MatrixOperations.transpose(matrix61);
        com.operations.Matrix.Matrix matrix68 = com.operations.Matrix.MatrixOperations.multiply(matrix57, matrix67);
        com.operations.Matrix.Matrix matrix69 = com.operations.Matrix.MatrixOperations.multiply(matrix54, matrix67);
        com.operations.Matrix.Matrix matrix70 = com.operations.Matrix.MatrixOperations.transpose(matrix69);
        double double71 = com.operations.Matrix.MatrixUtils.frobeniusNorm(matrix70);
        boolean boolean72 = com.operations.Matrix.MatrixUtils.isSymmetric(matrix70);
        com.operations.Matrix.Matrix matrix73 = com.operations.Matrix.MatrixOperations.add(matrix51, matrix70);
        com.operations.Matrix.Matrix matrix75 = com.operations.Matrix.MatrixTransformations.rotate2D((double) 1.0f);
        int int76 = matrix75.getRows();
        int int77 = matrix75.getRows();
        boolean boolean79 = com.operations.Matrix.MatrixUtils.compare(matrix73, matrix75, 100.0d);
        int int80 = matrix75.getRows();
        com.operations.Matrix.Matrix matrix81 = com.operations.Matrix.MatrixOperations.transpose(matrix75);
        org.junit.Assert.assertNotNull(matrix2);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertArrayEquals(doubleArray5, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertArrayEquals(doubleArray8, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 2 + "'", int11 == 2);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 2 + "'", int12 == 2);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 2 + "'", int13 == 2);
        org.junit.Assert.assertNotNull(matrixArray14);
        org.junit.Assert.assertNotNull(matrix15);
        org.junit.Assert.assertNotNull(matrix17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertArrayEquals(doubleArray22, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertArrayEquals(doubleArray25, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertArrayEquals(doubleArray34, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertArrayEquals(doubleArray37, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertNotNull(matrix42);
        org.junit.Assert.assertNotNull(matrix45);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 2 + "'", int46 == 2);
        org.junit.Assert.assertNotNull(matrix48);
        org.junit.Assert.assertNotNull(matrix51);
        org.junit.Assert.assertNotNull(matrix54);
        org.junit.Assert.assertNotNull(matrix57);
        org.junit.Assert.assertNotNull(matrixArray58);
        org.junit.Assert.assertNotNull(matrix61);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 2 + "'", int62 == 2);
        org.junit.Assert.assertNotNull(matrix64);
        org.junit.Assert.assertTrue("'" + double65 + "' != '" + 10.0d + "'", double65 == 10.0d);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 2 + "'", int66 == 2);
        org.junit.Assert.assertNotNull(matrix67);
        org.junit.Assert.assertNotNull(matrix68);
        org.junit.Assert.assertNotNull(matrix69);
        org.junit.Assert.assertNotNull(matrix70);
        org.junit.Assert.assertTrue("'" + double71 + "' != '" + 3500.0d + "'", double71 == 3500.0d);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + true + "'", boolean72 == true);
        org.junit.Assert.assertNotNull(matrix73);
        org.junit.Assert.assertNotNull(matrix75);
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 2 + "'", int76 == 2);
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + 2 + "'", int77 == 2);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertTrue("'" + int80 + "' != '" + 2 + "'", int80 == 2);
        org.junit.Assert.assertNotNull(matrix81);
    }

    @Test
    public void test4886() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4886");
        com.operations.Matrix.Matrix matrix2 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0L, (double) (byte) 10);
        double[] doubleArray5 = new double[] { 10, 'a' };
        double[] doubleArray8 = new double[] { 10, 'a' };
        double[][] doubleArray9 = new double[][] { doubleArray5, doubleArray8 };
        com.operations.Matrix.Matrix matrix10 = new com.operations.Matrix.Matrix(doubleArray9);
        int int11 = matrix10.getCols();
        int int12 = matrix10.getCols();
        int int13 = matrix10.getCols();
        com.operations.Matrix.Matrix[] matrixArray14 = com.operations.Matrix.MatrixDecompositions.luDecomposition(matrix10);
        com.operations.Matrix.Matrix matrix15 = com.operations.Matrix.MatrixOperations.multiply(matrix2, matrix10);
        int int16 = matrix10.getRows();
        int int17 = matrix10.getCols();
        double[][] doubleArray18 = matrix10.getData();
        double double19 = com.operations.Matrix.MatrixUtils.frobeniusNorm(matrix10);
        int int20 = matrix10.getCols();
        boolean boolean21 = com.operations.Matrix.MatrixUtils.isSquare(matrix10);
        boolean boolean22 = com.operations.Matrix.MatrixUtils.isSymmetric(matrix10);
        org.junit.Assert.assertNotNull(matrix2);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertArrayEquals(doubleArray5, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertArrayEquals(doubleArray8, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 2 + "'", int11 == 2);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 2 + "'", int12 == 2);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 2 + "'", int13 == 2);
        org.junit.Assert.assertNotNull(matrixArray14);
        org.junit.Assert.assertNotNull(matrix15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 2 + "'", int16 == 2);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 2 + "'", int17 == 2);
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 137.90576492663388d + "'", double19 == 137.90576492663388d);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 2 + "'", int20 == 2);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
    }

    @Test
    public void test4887() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4887");
        com.operations.Matrix.Matrix matrix2 = com.operations.Matrix.MatrixTransformations.project2D((double) ' ', 0.0d);
        int int3 = matrix2.getCols();
        boolean boolean4 = com.operations.Matrix.MatrixUtils.isSquare(matrix2);
        boolean boolean5 = com.operations.Matrix.MatrixUtils.isSquare(matrix2);
        com.operations.Matrix.Matrix[] matrixArray6 = com.operations.Matrix.MatrixDecompositions.luDecomposition(matrix2);
        org.junit.Assert.assertNotNull(matrix2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 2 + "'", int3 == 2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNotNull(matrixArray6);
    }

    @Test
    public void test4888() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4888");
        double[] doubleArray2 = new double[] { 10, 'a' };
        double[] doubleArray5 = new double[] { 10, 'a' };
        double[][] doubleArray6 = new double[][] { doubleArray2, doubleArray5 };
        com.operations.Matrix.Matrix matrix7 = new com.operations.Matrix.Matrix(doubleArray6);
        com.operations.Matrix.Matrix matrix8 = new com.operations.Matrix.Matrix(doubleArray6);
        boolean boolean9 = com.operations.Matrix.MatrixUtils.isSquare(matrix8);
        double[] doubleArray12 = new double[] { 10, 'a' };
        double[] doubleArray15 = new double[] { 10, 'a' };
        double[][] doubleArray16 = new double[][] { doubleArray12, doubleArray15 };
        com.operations.Matrix.Matrix matrix17 = new com.operations.Matrix.Matrix(doubleArray16);
        int int18 = matrix17.getCols();
        int int19 = matrix17.getCols();
        matrix17.print();
        double[] doubleArray23 = new double[] { 10, 'a' };
        double[] doubleArray26 = new double[] { 10, 'a' };
        double[][] doubleArray27 = new double[][] { doubleArray23, doubleArray26 };
        com.operations.Matrix.Matrix matrix28 = new com.operations.Matrix.Matrix(doubleArray27);
        boolean boolean30 = com.operations.Matrix.MatrixUtils.compare(matrix17, matrix28, (double) (-1));
        com.operations.Matrix.Matrix matrix31 = com.operations.Matrix.MatrixOperations.subtract(matrix8, matrix28);
        com.operations.Matrix.Matrix matrix33 = com.operations.Matrix.MatrixOperations.scalarMultiply(matrix8, (double) 0.0f);
        double[] doubleArray36 = new double[] { 10, 'a' };
        double[] doubleArray39 = new double[] { 10, 'a' };
        double[][] doubleArray40 = new double[][] { doubleArray36, doubleArray39 };
        com.operations.Matrix.Matrix matrix41 = new com.operations.Matrix.Matrix(doubleArray40);
        com.operations.Matrix.Matrix matrix42 = new com.operations.Matrix.Matrix(doubleArray40);
        com.operations.Matrix.Matrix[] matrixArray43 = com.operations.Matrix.MatrixDecompositions.luDecomposition(matrix42);
        com.operations.Matrix.Matrix matrix44 = com.operations.Matrix.MatrixDecompositions.choleskyDecomposition(matrix42);
        int int45 = matrix44.getRows();
        com.operations.Matrix.Matrix matrix46 = com.operations.Matrix.MatrixOperations.subtract(matrix8, matrix44);
        com.operations.Matrix.Matrix matrix49 = com.operations.Matrix.MatrixTransformations.project2D((double) ' ', 0.0d);
        double[] doubleArray52 = new double[] { 10, 'a' };
        double[] doubleArray55 = new double[] { 10, 'a' };
        double[][] doubleArray56 = new double[][] { doubleArray52, doubleArray55 };
        com.operations.Matrix.Matrix matrix57 = new com.operations.Matrix.Matrix(doubleArray56);
        int int58 = matrix57.getCols();
        boolean boolean59 = com.operations.Matrix.MatrixUtils.isSquare(matrix57);
        com.operations.Matrix.Matrix matrix60 = com.operations.Matrix.MatrixOperations.transpose(matrix57);
        int int61 = matrix60.getRows();
        com.operations.Matrix.Matrix matrix64 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0L, (double) (byte) 10);
        double[] doubleArray67 = new double[] { 10, 'a' };
        double[] doubleArray70 = new double[] { 10, 'a' };
        double[][] doubleArray71 = new double[][] { doubleArray67, doubleArray70 };
        com.operations.Matrix.Matrix matrix72 = new com.operations.Matrix.Matrix(doubleArray71);
        int int73 = matrix72.getCols();
        int int74 = matrix72.getCols();
        int int75 = matrix72.getCols();
        com.operations.Matrix.Matrix[] matrixArray76 = com.operations.Matrix.MatrixDecompositions.luDecomposition(matrix72);
        com.operations.Matrix.Matrix matrix77 = com.operations.Matrix.MatrixOperations.multiply(matrix64, matrix72);
        com.operations.Matrix.Matrix matrix79 = com.operations.Matrix.MatrixTransformations.rotate2D((double) (short) 100);
        boolean boolean81 = com.operations.Matrix.MatrixUtils.compare(matrix72, matrix79, (double) (byte) 0);
        com.operations.Matrix.Matrix matrix82 = com.operations.Matrix.MatrixOperations.multiply(matrix60, matrix72);
        com.operations.Matrix.Matrix matrix83 = com.operations.Matrix.MatrixOperations.add(matrix49, matrix72);
        matrix72.print();
        com.operations.Matrix.Matrix[] matrixArray85 = com.operations.Matrix.MatrixDecompositions.luDecomposition(matrix72);
        com.operations.Matrix.Matrix matrix88 = com.operations.Matrix.MatrixTransformations.project2D(137.90576492663388d, 0.0d);
        double[][] doubleArray89 = matrix88.getData();
        com.operations.Matrix.Matrix matrix90 = com.operations.Matrix.MatrixOperations.multiply(matrix72, matrix88);
        com.operations.Matrix.Matrix matrix91 = com.operations.Matrix.MatrixOperations.multiply(matrix46, matrix90);
        double[][] doubleArray92 = matrix46.getData();
        com.operations.Matrix.Matrix matrix93 = new com.operations.Matrix.Matrix(doubleArray92);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertArrayEquals(doubleArray2, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertArrayEquals(doubleArray5, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertArrayEquals(doubleArray12, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertArrayEquals(doubleArray15, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 2 + "'", int18 == 2);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 2 + "'", int19 == 2);
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertArrayEquals(doubleArray23, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertArrayEquals(doubleArray26, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(matrix31);
        org.junit.Assert.assertNotNull(matrix33);
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertArrayEquals(doubleArray36, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertArrayEquals(doubleArray39, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertNotNull(matrixArray43);
        org.junit.Assert.assertNotNull(matrix44);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 2 + "'", int45 == 2);
        org.junit.Assert.assertNotNull(matrix46);
        org.junit.Assert.assertNotNull(matrix49);
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertArrayEquals(doubleArray52, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertArrayEquals(doubleArray55, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray56);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 2 + "'", int58 == 2);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + true + "'", boolean59 == true);
        org.junit.Assert.assertNotNull(matrix60);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 2 + "'", int61 == 2);
        org.junit.Assert.assertNotNull(matrix64);
        org.junit.Assert.assertNotNull(doubleArray67);
        org.junit.Assert.assertArrayEquals(doubleArray67, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray70);
        org.junit.Assert.assertArrayEquals(doubleArray70, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray71);
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + 2 + "'", int73 == 2);
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 2 + "'", int74 == 2);
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + 2 + "'", int75 == 2);
        org.junit.Assert.assertNotNull(matrixArray76);
        org.junit.Assert.assertNotNull(matrix77);
        org.junit.Assert.assertNotNull(matrix79);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
        org.junit.Assert.assertNotNull(matrix82);
        org.junit.Assert.assertNotNull(matrix83);
        org.junit.Assert.assertNotNull(matrixArray85);
        org.junit.Assert.assertNotNull(matrix88);
        org.junit.Assert.assertNotNull(doubleArray89);
        org.junit.Assert.assertNotNull(matrix90);
        org.junit.Assert.assertNotNull(matrix91);
        org.junit.Assert.assertNotNull(doubleArray92);
    }

    @Test
    public void test4889() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4889");
        com.operations.Matrix.Matrix matrix1 = com.operations.Matrix.MatrixTransformations.rotate2D(975.1410154434076d);
        com.operations.Matrix.Matrix matrix2 = com.operations.Matrix.MatrixOperations.transpose(matrix1);
        double[][] doubleArray3 = matrix2.getData();
        com.operations.Matrix.Matrix matrix4 = new com.operations.Matrix.Matrix(doubleArray3);
        org.junit.Assert.assertNotNull(matrix1);
        org.junit.Assert.assertNotNull(matrix2);
        org.junit.Assert.assertNotNull(doubleArray3);
    }

    @Test
    public void test4890() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4890");
        com.operations.Matrix.Matrix matrix2 = com.operations.Matrix.MatrixTransformations.project2D((double) (byte) 100, 32.0d);
        boolean boolean3 = com.operations.Matrix.MatrixUtils.isSymmetric(matrix2);
        matrix2.print();
        com.operations.Matrix.Matrix matrix5 = com.operations.Matrix.MatrixOperations.transpose(matrix2);
        com.operations.Matrix.Matrix matrix6 = com.operations.Matrix.MatrixDecompositions.choleskyDecomposition(matrix2);
        com.operations.Matrix.Matrix[] matrixArray7 = com.operations.Matrix.MatrixDecompositions.luDecomposition(matrix2);
        com.operations.Matrix.Matrix matrix9 = com.operations.Matrix.MatrixTransformations.rotate2D((double) (short) 100);
        double[] doubleArray12 = new double[] { 137.90576492663388d, (byte) -1 };
        double[] doubleArray13 = com.operations.Matrix.MatrixSolver.solveGaussian(matrix9, doubleArray12);
        com.operations.Matrix.Matrix matrix16 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0L, (double) (byte) 10);
        double[] doubleArray19 = new double[] { 10, 'a' };
        double[] doubleArray22 = new double[] { 10, 'a' };
        double[][] doubleArray23 = new double[][] { doubleArray19, doubleArray22 };
        com.operations.Matrix.Matrix matrix24 = new com.operations.Matrix.Matrix(doubleArray23);
        int int25 = matrix24.getCols();
        int int26 = matrix24.getCols();
        int int27 = matrix24.getCols();
        com.operations.Matrix.Matrix[] matrixArray28 = com.operations.Matrix.MatrixDecompositions.luDecomposition(matrix24);
        com.operations.Matrix.Matrix matrix29 = com.operations.Matrix.MatrixOperations.multiply(matrix16, matrix24);
        boolean boolean31 = com.operations.Matrix.MatrixUtils.compare(matrix9, matrix16, (double) (-1L));
        boolean boolean32 = com.operations.Matrix.MatrixUtils.isSymmetric(matrix9);
        int int33 = matrix9.getCols();
        com.operations.Matrix.Matrix[] matrixArray34 = com.operations.Matrix.MatrixDecompositions.luDecomposition(matrix9);
        double double35 = com.operations.Matrix.MatrixUtils.frobeniusNorm(matrix9);
        com.operations.Matrix.Matrix matrix37 = com.operations.Matrix.MatrixTransformations.rotate2D(100.0d);
        int int38 = matrix37.getCols();
        matrix37.print();
        com.operations.Matrix.Matrix matrix41 = com.operations.Matrix.MatrixOperations.scalarMultiply(matrix37, (double) (byte) 1);
        com.operations.Matrix.Matrix matrix43 = com.operations.Matrix.MatrixTransformations.rotate2D(350.0d);
        com.operations.Matrix.Matrix matrix45 = com.operations.Matrix.MatrixTransformations.rotate2D((double) (short) 100);
        double[] doubleArray48 = new double[] { 137.90576492663388d, (byte) -1 };
        double[] doubleArray49 = com.operations.Matrix.MatrixSolver.solveGaussian(matrix45, doubleArray48);
        double[] doubleArray50 = com.operations.Matrix.MatrixSolver.solveGaussian(matrix43, doubleArray49);
        double[] doubleArray51 = com.operations.Matrix.MatrixSolver.solveGaussian(matrix37, doubleArray49);
        double[] doubleArray52 = com.operations.Matrix.MatrixSolver.solveGaussian(matrix9, doubleArray51);
        boolean boolean53 = com.operations.Matrix.MatrixUtils.isSymmetric(matrix9);
        double[] doubleArray56 = new double[] { 10, 'a' };
        double[] doubleArray59 = new double[] { 10, 'a' };
        double[][] doubleArray60 = new double[][] { doubleArray56, doubleArray59 };
        com.operations.Matrix.Matrix matrix61 = new com.operations.Matrix.Matrix(doubleArray60);
        com.operations.Matrix.Matrix matrix62 = new com.operations.Matrix.Matrix(doubleArray60);
        com.operations.Matrix.Matrix matrix64 = com.operations.Matrix.MatrixTransformations.rotate2D((double) (short) 100);
        double[] doubleArray67 = new double[] { 137.90576492663388d, (byte) -1 };
        double[] doubleArray68 = com.operations.Matrix.MatrixSolver.solveGaussian(matrix64, doubleArray67);
        com.operations.Matrix.Matrix matrix69 = com.operations.Matrix.MatrixOperations.add(matrix62, matrix64);
        com.operations.Matrix.Matrix matrix70 = com.operations.Matrix.MatrixOperations.transpose(matrix64);
        double double71 = com.operations.Matrix.MatrixUtils.frobeniusNorm(matrix70);
        double[][] doubleArray72 = matrix70.getData();
        com.operations.Matrix.Matrix matrix74 = com.operations.Matrix.MatrixOperations.scalarMultiply(matrix70, (double) 'a');
        com.operations.Matrix.Matrix matrix76 = com.operations.Matrix.MatrixTransformations.rotate2D(350.0d);
        com.operations.Matrix.Matrix matrix78 = com.operations.Matrix.MatrixTransformations.rotate2D((double) (short) 100);
        double[] doubleArray81 = new double[] { 137.90576492663388d, (byte) -1 };
        double[] doubleArray82 = com.operations.Matrix.MatrixSolver.solveGaussian(matrix78, doubleArray81);
        double[] doubleArray83 = com.operations.Matrix.MatrixSolver.solveGaussian(matrix76, doubleArray82);
        double[] doubleArray84 = com.operations.Matrix.MatrixSolver.solveGaussian(matrix70, doubleArray82);
        double[] doubleArray85 = com.operations.Matrix.MatrixSolver.solveGaussian(matrix9, doubleArray84);
        double[] doubleArray86 = com.operations.Matrix.MatrixSolver.solveGaussian(matrix2, doubleArray85);
        com.operations.Matrix.Matrix matrix87 = com.operations.Matrix.MatrixDecompositions.choleskyDecomposition(matrix2);
        // The following exception was thrown during execution in test generation
        try {
            matrix2.setValue((int) (byte) -1, (int) '4', 19018.0d);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: Index -1 out of bounds for length 2");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(matrix2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNotNull(matrix5);
        org.junit.Assert.assertNotNull(matrix6);
        org.junit.Assert.assertNotNull(matrixArray7);
        org.junit.Assert.assertNotNull(matrix9);
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertArrayEquals(doubleArray12, new double[] { 137.90576492663388d, (-1.0d) }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertArrayEquals(doubleArray13, new double[] { (-24.931892522286255d), (-135.63701830716116d) }, 1.0E-15);
        org.junit.Assert.assertNotNull(matrix16);
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertArrayEquals(doubleArray19, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertArrayEquals(doubleArray22, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 2 + "'", int25 == 2);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 2 + "'", int26 == 2);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 2 + "'", int27 == 2);
        org.junit.Assert.assertNotNull(matrixArray28);
        org.junit.Assert.assertNotNull(matrix29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 2 + "'", int33 == 2);
        org.junit.Assert.assertNotNull(matrixArray34);
        org.junit.Assert.assertTrue("'" + double35 + "' != '" + 1.414213562373095d + "'", double35 == 1.414213562373095d);
        org.junit.Assert.assertNotNull(matrix37);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 2 + "'", int38 == 2);
        org.junit.Assert.assertNotNull(matrix41);
        org.junit.Assert.assertNotNull(matrix43);
        org.junit.Assert.assertNotNull(matrix45);
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertArrayEquals(doubleArray48, new double[] { 137.90576492663388d, (-1.0d) }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertArrayEquals(doubleArray49, new double[] { (-24.931892522286255d), (-135.63701830716116d) }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertArrayEquals(doubleArray50, new double[] { (-0.9999999999999858d), (-137.90576492663388d) }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertArrayEquals(doubleArray51, new double[] { (-129.24700952206834d), 48.1062421064292d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertArrayEquals(doubleArray52, new double[] { 69.81890786710137d, 118.92989575479001d }, 1.0E-15);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(doubleArray56);
        org.junit.Assert.assertArrayEquals(doubleArray56, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray59);
        org.junit.Assert.assertArrayEquals(doubleArray59, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray60);
        org.junit.Assert.assertNotNull(matrix64);
        org.junit.Assert.assertNotNull(doubleArray67);
        org.junit.Assert.assertArrayEquals(doubleArray67, new double[] { 137.90576492663388d, (-1.0d) }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray68);
        org.junit.Assert.assertArrayEquals(doubleArray68, new double[] { (-24.931892522286255d), (-135.63701830716116d) }, 1.0E-15);
        org.junit.Assert.assertNotNull(matrix69);
        org.junit.Assert.assertNotNull(matrix70);
        org.junit.Assert.assertTrue("'" + double71 + "' != '" + 1.414213562373095d + "'", double71 == 1.414213562373095d);
        org.junit.Assert.assertNotNull(doubleArray72);
        org.junit.Assert.assertNotNull(matrix74);
        org.junit.Assert.assertNotNull(matrix76);
        org.junit.Assert.assertNotNull(matrix78);
        org.junit.Assert.assertNotNull(doubleArray81);
        org.junit.Assert.assertArrayEquals(doubleArray81, new double[] { 137.90576492663388d, (-1.0d) }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray82);
        org.junit.Assert.assertArrayEquals(doubleArray82, new double[] { (-24.931892522286255d), (-135.63701830716116d) }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray83);
        org.junit.Assert.assertArrayEquals(doubleArray83, new double[] { (-0.9999999999999858d), (-137.90576492663388d) }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray84);
        org.junit.Assert.assertArrayEquals(doubleArray84, new double[] { 137.90576492663388d, (-1.0000000000000022d) }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray85);
        org.junit.Assert.assertArrayEquals(doubleArray85, new double[] { (-24.931892522286258d), (-135.63701830716116d) }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray86);
        org.junit.Assert.assertArrayEquals(doubleArray86, new double[] { (-0.2493189252228626d), (-4.238656822098786d) }, 1.0E-15);
        org.junit.Assert.assertNotNull(matrix87);
    }

    @Test
    public void test4891() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4891");
        double[] doubleArray2 = new double[] { 10, 'a' };
        double[] doubleArray5 = new double[] { 10, 'a' };
        double[][] doubleArray6 = new double[][] { doubleArray2, doubleArray5 };
        com.operations.Matrix.Matrix matrix7 = new com.operations.Matrix.Matrix(doubleArray6);
        com.operations.Matrix.Matrix matrix8 = new com.operations.Matrix.Matrix(doubleArray6);
        boolean boolean9 = com.operations.Matrix.MatrixUtils.isSquare(matrix8);
        double[] doubleArray12 = new double[] { 10, 'a' };
        double[] doubleArray15 = new double[] { 10, 'a' };
        double[][] doubleArray16 = new double[][] { doubleArray12, doubleArray15 };
        com.operations.Matrix.Matrix matrix17 = new com.operations.Matrix.Matrix(doubleArray16);
        int int18 = matrix17.getCols();
        int int19 = matrix17.getCols();
        matrix17.print();
        double[] doubleArray23 = new double[] { 10, 'a' };
        double[] doubleArray26 = new double[] { 10, 'a' };
        double[][] doubleArray27 = new double[][] { doubleArray23, doubleArray26 };
        com.operations.Matrix.Matrix matrix28 = new com.operations.Matrix.Matrix(doubleArray27);
        boolean boolean30 = com.operations.Matrix.MatrixUtils.compare(matrix17, matrix28, (double) (-1));
        com.operations.Matrix.Matrix matrix31 = com.operations.Matrix.MatrixOperations.subtract(matrix8, matrix28);
        com.operations.Matrix.Matrix matrix33 = com.operations.Matrix.MatrixOperations.scalarMultiply(matrix8, (double) 0.0f);
        int int34 = matrix8.getCols();
        double[] doubleArray37 = new double[] { 10, 'a' };
        double[] doubleArray40 = new double[] { 10, 'a' };
        double[][] doubleArray41 = new double[][] { doubleArray37, doubleArray40 };
        com.operations.Matrix.Matrix matrix42 = new com.operations.Matrix.Matrix(doubleArray41);
        com.operations.Matrix.Matrix matrix43 = new com.operations.Matrix.Matrix(doubleArray41);
        com.operations.Matrix.Matrix matrix44 = new com.operations.Matrix.Matrix(doubleArray41);
        com.operations.Matrix.Matrix matrix45 = com.operations.Matrix.MatrixOperations.multiply(matrix8, matrix44);
        com.operations.Matrix.Matrix matrix46 = com.operations.Matrix.MatrixDecompositions.choleskyDecomposition(matrix44);
        com.operations.Matrix.Matrix matrix52 = com.operations.Matrix.MatrixUtils.generateRandomMatrix(1, (int) ' ', (int) (short) 0, (int) (byte) -1, (long) ' ');
        boolean boolean54 = com.operations.Matrix.MatrixUtils.compare(matrix44, matrix52, 391.8840992892044d);
        boolean boolean55 = com.operations.Matrix.MatrixUtils.isSymmetric(matrix44);
        int int56 = matrix44.getCols();
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertArrayEquals(doubleArray2, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertArrayEquals(doubleArray5, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertArrayEquals(doubleArray12, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertArrayEquals(doubleArray15, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 2 + "'", int18 == 2);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 2 + "'", int19 == 2);
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertArrayEquals(doubleArray23, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertArrayEquals(doubleArray26, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(matrix31);
        org.junit.Assert.assertNotNull(matrix33);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 2 + "'", int34 == 2);
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertArrayEquals(doubleArray37, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertArrayEquals(doubleArray40, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertNotNull(matrix45);
        org.junit.Assert.assertNotNull(matrix46);
        org.junit.Assert.assertNotNull(matrix52);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 2 + "'", int56 == 2);
    }

    @Test
    public void test4892() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4892");
        com.operations.Matrix.Matrix matrix0 = null;
        com.operations.Matrix.Matrix matrix3 = com.operations.Matrix.MatrixTransformations.project2D((double) (short) 100, 35.0d);
        com.operations.Matrix.Matrix matrix5 = com.operations.Matrix.MatrixTransformations.rotate2D((double) (-1L));
        com.operations.Matrix.Matrix matrix7 = com.operations.Matrix.MatrixTransformations.rotate2D((double) (short) 100);
        double[] doubleArray10 = new double[] { 137.90576492663388d, (byte) -1 };
        double[] doubleArray11 = com.operations.Matrix.MatrixSolver.solveGaussian(matrix7, doubleArray10);
        double[] doubleArray12 = com.operations.Matrix.MatrixSolver.solveGaussian(matrix5, doubleArray10);
        double[] doubleArray13 = com.operations.Matrix.MatrixSolver.solveGaussian(matrix3, doubleArray12);
        // The following exception was thrown during execution in test generation
        try {
            double[] doubleArray14 = com.operations.Matrix.MatrixSolver.solveGaussian(matrix0, doubleArray13);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(matrix3);
        org.junit.Assert.assertNotNull(matrix5);
        org.junit.Assert.assertNotNull(matrix7);
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertArrayEquals(doubleArray10, new double[] { 137.90576492663388d, (-1.0d) }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertArrayEquals(doubleArray11, new double[] { (-24.931892522286255d), (-135.63701830716116d) }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertArrayEquals(doubleArray12, new double[] { 137.90221361711127d, 1.4069397643877004d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertArrayEquals(doubleArray13, new double[] { 1.3790221361711128d, 0.04019827898250573d }, 1.0E-15);
    }

    @Test
    public void test4893() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4893");
        com.operations.Matrix.Matrix matrix2 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0L, (double) (byte) 10);
        int int3 = matrix2.getRows();
        com.operations.Matrix.Matrix matrix9 = com.operations.Matrix.MatrixUtils.generateRandomMatrix(100, (int) (byte) 1, (int) '#', (int) '#', 1L);
        boolean boolean11 = com.operations.Matrix.MatrixUtils.compare(matrix2, matrix9, (double) 1.0f);
        com.operations.Matrix.Matrix matrix12 = com.operations.Matrix.MatrixOperations.transpose(matrix9);
        boolean boolean13 = com.operations.Matrix.MatrixUtils.isSymmetric(matrix12);
        boolean boolean14 = com.operations.Matrix.MatrixUtils.isSymmetric(matrix12);
        org.junit.Assert.assertNotNull(matrix2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 2 + "'", int3 == 2);
        org.junit.Assert.assertNotNull(matrix9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(matrix12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
    }

    @Test
    public void test4894() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4894");
        double[] doubleArray2 = new double[] { 10, 'a' };
        double[] doubleArray5 = new double[] { 10, 'a' };
        double[][] doubleArray6 = new double[][] { doubleArray2, doubleArray5 };
        com.operations.Matrix.Matrix matrix7 = new com.operations.Matrix.Matrix(doubleArray6);
        int int8 = matrix7.getCols();
        int int9 = matrix7.getCols();
        int int10 = matrix7.getCols();
        com.operations.Matrix.Matrix matrix16 = com.operations.Matrix.MatrixUtils.generateRandomMatrix(100, (int) (byte) 1, (int) '#', (int) '#', 1L);
        double double19 = matrix16.getValue((int) '4', 0);
        double double20 = com.operations.Matrix.MatrixUtils.frobeniusNorm(matrix16);
        boolean boolean21 = com.operations.Matrix.MatrixUtils.isSquare(matrix16);
        boolean boolean23 = com.operations.Matrix.MatrixUtils.compare(matrix7, matrix16, (double) 100L);
        double[][] doubleArray24 = matrix7.getData();
        com.operations.Matrix.Matrix matrix25 = new com.operations.Matrix.Matrix(doubleArray24);
        com.operations.Matrix.Matrix matrix26 = com.operations.Matrix.MatrixDecompositions.choleskyDecomposition(matrix25);
        com.operations.Matrix.Matrix matrix29 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0.0f, (double) (-1));
        com.operations.Matrix.Matrix matrix32 = com.operations.Matrix.MatrixTransformations.scale2D(146.4308710620817d, (double) 10L);
        com.operations.Matrix.Matrix matrix33 = com.operations.Matrix.MatrixOperations.multiply(matrix29, matrix32);
        int int34 = matrix33.getRows();
        boolean boolean35 = com.operations.Matrix.MatrixUtils.isSymmetric(matrix33);
        com.operations.Matrix.Matrix matrix36 = com.operations.Matrix.MatrixOperations.multiply(matrix26, matrix33);
        com.operations.Matrix.Matrix matrix38 = com.operations.Matrix.MatrixOperations.scalarMultiply(matrix33, 14009.328092863216d);
        // The following exception was thrown during execution in test generation
        try {
            com.operations.Matrix.Matrix matrix39 = com.operations.Matrix.MatrixDecompositions.choleskyDecomposition(matrix33);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Matrix is not positive definite.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertArrayEquals(doubleArray2, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertArrayEquals(doubleArray5, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 2 + "'", int8 == 2);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 2 + "'", int9 == 2);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 2 + "'", int10 == 2);
        org.junit.Assert.assertNotNull(matrix16);
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 35.0d + "'", double19 == 35.0d);
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 350.0d + "'", double20 == 350.0d);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertNotNull(matrix26);
        org.junit.Assert.assertNotNull(matrix29);
        org.junit.Assert.assertNotNull(matrix32);
        org.junit.Assert.assertNotNull(matrix33);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 2 + "'", int34 == 2);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(matrix36);
        org.junit.Assert.assertNotNull(matrix38);
    }

    @Test
    public void test4895() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4895");
        com.operations.Matrix.Matrix matrix2 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0L, (double) (byte) 10);
        double[] doubleArray5 = new double[] { 10, 'a' };
        double[] doubleArray8 = new double[] { 10, 'a' };
        double[][] doubleArray9 = new double[][] { doubleArray5, doubleArray8 };
        com.operations.Matrix.Matrix matrix10 = new com.operations.Matrix.Matrix(doubleArray9);
        int int11 = matrix10.getCols();
        int int12 = matrix10.getCols();
        int int13 = matrix10.getCols();
        com.operations.Matrix.Matrix[] matrixArray14 = com.operations.Matrix.MatrixDecompositions.luDecomposition(matrix10);
        com.operations.Matrix.Matrix matrix15 = com.operations.Matrix.MatrixOperations.multiply(matrix2, matrix10);
        com.operations.Matrix.Matrix matrix17 = com.operations.Matrix.MatrixTransformations.rotate2D((double) (short) 100);
        boolean boolean19 = com.operations.Matrix.MatrixUtils.compare(matrix10, matrix17, (double) (byte) 0);
        com.operations.Matrix.Matrix[] matrixArray20 = com.operations.Matrix.MatrixDecompositions.luDecomposition(matrix10);
        com.operations.Matrix.Matrix matrix21 = com.operations.Matrix.MatrixDecompositions.choleskyDecomposition(matrix10);
        com.operations.Matrix.Matrix matrix22 = com.operations.Matrix.MatrixOperations.transpose(matrix21);
        com.operations.Matrix.Matrix matrix23 = com.operations.Matrix.MatrixDecompositions.choleskyDecomposition(matrix22);
        double[][] doubleArray24 = matrix22.getData();
        com.operations.Matrix.Matrix matrix25 = new com.operations.Matrix.Matrix(doubleArray24);
        com.operations.Matrix.Matrix matrix26 = com.operations.Matrix.MatrixOperations.transpose(matrix25);
        boolean boolean27 = com.operations.Matrix.MatrixUtils.isSymmetric(matrix25);
        org.junit.Assert.assertNotNull(matrix2);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertArrayEquals(doubleArray5, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertArrayEquals(doubleArray8, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 2 + "'", int11 == 2);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 2 + "'", int12 == 2);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 2 + "'", int13 == 2);
        org.junit.Assert.assertNotNull(matrixArray14);
        org.junit.Assert.assertNotNull(matrix15);
        org.junit.Assert.assertNotNull(matrix17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(matrixArray20);
        org.junit.Assert.assertNotNull(matrix21);
        org.junit.Assert.assertNotNull(matrix22);
        org.junit.Assert.assertNotNull(matrix23);
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertNotNull(matrix26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
    }

    @Test
    public void test4896() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4896");
        com.operations.Matrix.Matrix matrix1 = com.operations.Matrix.MatrixTransformations.rotate2D(0.984807753012208d);
        com.operations.Matrix.Matrix matrix3 = com.operations.Matrix.MatrixTransformations.rotate2D((double) 1.0f);
        com.operations.Matrix.Matrix matrix6 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0L, (double) (byte) 10);
        int int7 = matrix6.getRows();
        com.operations.Matrix.Matrix matrix9 = com.operations.Matrix.MatrixOperations.scalarMultiply(matrix6, (double) 2);
        double double10 = com.operations.Matrix.MatrixUtils.frobeniusNorm(matrix6);
        com.operations.Matrix.Matrix matrix13 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0L, (double) (byte) 10);
        int int14 = matrix13.getRows();
        com.operations.Matrix.Matrix matrix16 = com.operations.Matrix.MatrixOperations.scalarMultiply(matrix13, (double) 2);
        com.operations.Matrix.Matrix matrix17 = com.operations.Matrix.MatrixOperations.subtract(matrix6, matrix16);
        com.operations.Matrix.Matrix matrix18 = com.operations.Matrix.MatrixOperations.add(matrix3, matrix16);
        matrix3.print();
        double[] doubleArray22 = new double[] { 10, 'a' };
        double[] doubleArray25 = new double[] { 10, 'a' };
        double[][] doubleArray26 = new double[][] { doubleArray22, doubleArray25 };
        com.operations.Matrix.Matrix matrix27 = new com.operations.Matrix.Matrix(doubleArray26);
        com.operations.Matrix.Matrix matrix28 = com.operations.Matrix.MatrixOperations.transpose(matrix27);
        com.operations.Matrix.Matrix matrix31 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0L, (double) (byte) 10);
        int int32 = matrix31.getRows();
        com.operations.Matrix.Matrix matrix38 = com.operations.Matrix.MatrixUtils.generateRandomMatrix(100, (int) (byte) 1, (int) '#', (int) '#', 1L);
        boolean boolean40 = com.operations.Matrix.MatrixUtils.compare(matrix31, matrix38, (double) 1.0f);
        com.operations.Matrix.Matrix matrix42 = com.operations.Matrix.MatrixOperations.scalarMultiply(matrix31, (double) 1L);
        matrix31.print();
        com.operations.Matrix.Matrix matrix44 = com.operations.Matrix.MatrixOperations.multiply(matrix28, matrix31);
        com.operations.Matrix.Matrix matrix45 = com.operations.Matrix.MatrixOperations.multiply(matrix3, matrix31);
        com.operations.Matrix.Matrix matrix46 = com.operations.Matrix.MatrixOperations.add(matrix1, matrix31);
        int int47 = matrix46.getRows();
        org.junit.Assert.assertNotNull(matrix1);
        org.junit.Assert.assertNotNull(matrix3);
        org.junit.Assert.assertNotNull(matrix6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 2 + "'", int7 == 2);
        org.junit.Assert.assertNotNull(matrix9);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 10.0d + "'", double10 == 10.0d);
        org.junit.Assert.assertNotNull(matrix13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 2 + "'", int14 == 2);
        org.junit.Assert.assertNotNull(matrix16);
        org.junit.Assert.assertNotNull(matrix17);
        org.junit.Assert.assertNotNull(matrix18);
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertArrayEquals(doubleArray22, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertArrayEquals(doubleArray25, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertNotNull(matrix28);
        org.junit.Assert.assertNotNull(matrix31);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 2 + "'", int32 == 2);
        org.junit.Assert.assertNotNull(matrix38);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(matrix42);
        org.junit.Assert.assertNotNull(matrix44);
        org.junit.Assert.assertNotNull(matrix45);
        org.junit.Assert.assertNotNull(matrix46);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 2 + "'", int47 == 2);
    }

    @Test
    public void test4897() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4897");
        com.operations.Matrix.Matrix matrix5 = com.operations.Matrix.MatrixUtils.generateRandomMatrix(2, 10, (int) (short) 10, 10, (long) 1);
        org.junit.Assert.assertNotNull(matrix5);
    }

    @Test
    public void test4898() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4898");
        com.operations.Matrix.Matrix matrix2 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0L, (double) (byte) 10);
        double[] doubleArray5 = new double[] { 10, 'a' };
        double[] doubleArray8 = new double[] { 10, 'a' };
        double[][] doubleArray9 = new double[][] { doubleArray5, doubleArray8 };
        com.operations.Matrix.Matrix matrix10 = new com.operations.Matrix.Matrix(doubleArray9);
        int int11 = matrix10.getCols();
        int int12 = matrix10.getCols();
        int int13 = matrix10.getCols();
        com.operations.Matrix.Matrix[] matrixArray14 = com.operations.Matrix.MatrixDecompositions.luDecomposition(matrix10);
        com.operations.Matrix.Matrix matrix15 = com.operations.Matrix.MatrixOperations.multiply(matrix2, matrix10);
        com.operations.Matrix.Matrix matrix17 = com.operations.Matrix.MatrixTransformations.rotate2D((double) (short) 100);
        boolean boolean19 = com.operations.Matrix.MatrixUtils.compare(matrix10, matrix17, (double) (byte) 0);
        com.operations.Matrix.Matrix[] matrixArray20 = com.operations.Matrix.MatrixDecompositions.luDecomposition(matrix10);
        com.operations.Matrix.Matrix matrix21 = com.operations.Matrix.MatrixOperations.transpose(matrix10);
        com.operations.Matrix.Matrix matrix24 = com.operations.Matrix.MatrixTransformations.scale2D((double) 1.0f, (double) 1);
        com.operations.Matrix.Matrix matrix26 = com.operations.Matrix.MatrixTransformations.rotate2D((double) 1.0f);
        com.operations.Matrix.Matrix matrix29 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0L, (double) (byte) 10);
        int int30 = matrix29.getRows();
        com.operations.Matrix.Matrix matrix32 = com.operations.Matrix.MatrixOperations.scalarMultiply(matrix29, (double) 2);
        double double33 = com.operations.Matrix.MatrixUtils.frobeniusNorm(matrix29);
        com.operations.Matrix.Matrix matrix36 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0L, (double) (byte) 10);
        int int37 = matrix36.getRows();
        com.operations.Matrix.Matrix matrix39 = com.operations.Matrix.MatrixOperations.scalarMultiply(matrix36, (double) 2);
        com.operations.Matrix.Matrix matrix40 = com.operations.Matrix.MatrixOperations.subtract(matrix29, matrix39);
        com.operations.Matrix.Matrix matrix41 = com.operations.Matrix.MatrixOperations.add(matrix26, matrix39);
        boolean boolean43 = com.operations.Matrix.MatrixUtils.compare(matrix24, matrix26, (double) (byte) -1);
        com.operations.Matrix.Matrix matrix44 = com.operations.Matrix.MatrixOperations.subtract(matrix21, matrix24);
        com.operations.Matrix.Matrix matrix45 = com.operations.Matrix.MatrixOperations.transpose(matrix44);
        double double48 = matrix45.getValue((int) (short) 1, 0);
        // The following exception was thrown during execution in test generation
        try {
            matrix45.setValue((int) 'a', (int) (byte) -1, 0.9998476951563913d);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: Index 97 out of bounds for length 2");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(matrix2);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertArrayEquals(doubleArray5, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertArrayEquals(doubleArray8, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 2 + "'", int11 == 2);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 2 + "'", int12 == 2);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 2 + "'", int13 == 2);
        org.junit.Assert.assertNotNull(matrixArray14);
        org.junit.Assert.assertNotNull(matrix15);
        org.junit.Assert.assertNotNull(matrix17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(matrixArray20);
        org.junit.Assert.assertNotNull(matrix21);
        org.junit.Assert.assertNotNull(matrix24);
        org.junit.Assert.assertNotNull(matrix26);
        org.junit.Assert.assertNotNull(matrix29);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 2 + "'", int30 == 2);
        org.junit.Assert.assertNotNull(matrix32);
        org.junit.Assert.assertTrue("'" + double33 + "' != '" + 10.0d + "'", double33 == 10.0d);
        org.junit.Assert.assertNotNull(matrix36);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 2 + "'", int37 == 2);
        org.junit.Assert.assertNotNull(matrix39);
        org.junit.Assert.assertNotNull(matrix40);
        org.junit.Assert.assertNotNull(matrix41);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(matrix44);
        org.junit.Assert.assertNotNull(matrix45);
        org.junit.Assert.assertTrue("'" + double48 + "' != '" + 10.0d + "'", double48 == 10.0d);
    }

    @Test
    public void test4899() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4899");
        com.operations.Matrix.Matrix matrix2 = com.operations.Matrix.MatrixTransformations.project2D(41.14922324710797d, 2.075327666839899d);
        org.junit.Assert.assertNotNull(matrix2);
    }

    @Test
    public void test4900() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4900");
        double[] doubleArray2 = new double[] { 10, 'a' };
        double[] doubleArray5 = new double[] { 10, 'a' };
        double[][] doubleArray6 = new double[][] { doubleArray2, doubleArray5 };
        com.operations.Matrix.Matrix matrix7 = new com.operations.Matrix.Matrix(doubleArray6);
        com.operations.Matrix.Matrix matrix8 = new com.operations.Matrix.Matrix(doubleArray6);
        com.operations.Matrix.Matrix matrix10 = com.operations.Matrix.MatrixTransformations.rotate2D((double) (short) 100);
        double[] doubleArray13 = new double[] { 137.90576492663388d, (byte) -1 };
        double[] doubleArray14 = com.operations.Matrix.MatrixSolver.solveGaussian(matrix10, doubleArray13);
        com.operations.Matrix.Matrix matrix15 = com.operations.Matrix.MatrixOperations.add(matrix8, matrix10);
        com.operations.Matrix.Matrix matrix16 = com.operations.Matrix.MatrixOperations.transpose(matrix10);
        int int17 = matrix10.getCols();
        com.operations.Matrix.Matrix matrix20 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0L, (double) (byte) 10);
        double[] doubleArray23 = new double[] { 10, 'a' };
        double[] doubleArray26 = new double[] { 10, 'a' };
        double[][] doubleArray27 = new double[][] { doubleArray23, doubleArray26 };
        com.operations.Matrix.Matrix matrix28 = new com.operations.Matrix.Matrix(doubleArray27);
        int int29 = matrix28.getCols();
        int int30 = matrix28.getCols();
        int int31 = matrix28.getCols();
        com.operations.Matrix.Matrix[] matrixArray32 = com.operations.Matrix.MatrixDecompositions.luDecomposition(matrix28);
        com.operations.Matrix.Matrix matrix33 = com.operations.Matrix.MatrixOperations.multiply(matrix20, matrix28);
        com.operations.Matrix.Matrix matrix35 = com.operations.Matrix.MatrixTransformations.rotate2D((double) (short) 100);
        boolean boolean37 = com.operations.Matrix.MatrixUtils.compare(matrix28, matrix35, (double) (byte) 0);
        boolean boolean38 = com.operations.Matrix.MatrixUtils.isSymmetric(matrix35);
        boolean boolean39 = com.operations.Matrix.MatrixUtils.isSquare(matrix35);
        com.operations.Matrix.Matrix matrix41 = com.operations.Matrix.MatrixTransformations.rotate2D((double) (short) 100);
        boolean boolean43 = com.operations.Matrix.MatrixUtils.compare(matrix35, matrix41, (double) (byte) 100);
        matrix41.print();
        com.operations.Matrix.Matrix matrix45 = com.operations.Matrix.MatrixOperations.add(matrix10, matrix41);
        com.operations.Matrix.Matrix matrix46 = com.operations.Matrix.MatrixOperations.transpose(matrix45);
        com.operations.Matrix.Matrix matrix47 = com.operations.Matrix.MatrixOperations.transpose(matrix45);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertArrayEquals(doubleArray2, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertArrayEquals(doubleArray5, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertNotNull(matrix10);
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertArrayEquals(doubleArray13, new double[] { 137.90576492663388d, (-1.0d) }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertArrayEquals(doubleArray14, new double[] { (-24.931892522286255d), (-135.63701830716116d) }, 1.0E-15);
        org.junit.Assert.assertNotNull(matrix15);
        org.junit.Assert.assertNotNull(matrix16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 2 + "'", int17 == 2);
        org.junit.Assert.assertNotNull(matrix20);
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertArrayEquals(doubleArray23, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertArrayEquals(doubleArray26, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 2 + "'", int29 == 2);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 2 + "'", int30 == 2);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 2 + "'", int31 == 2);
        org.junit.Assert.assertNotNull(matrixArray32);
        org.junit.Assert.assertNotNull(matrix33);
        org.junit.Assert.assertNotNull(matrix35);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertNotNull(matrix41);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertNotNull(matrix45);
        org.junit.Assert.assertNotNull(matrix46);
        org.junit.Assert.assertNotNull(matrix47);
    }

    @Test
    public void test4901() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4901");
        com.operations.Matrix.Matrix matrix2 = com.operations.Matrix.MatrixTransformations.scale2D((double) (byte) 10, (double) 10);
        double[] doubleArray5 = new double[] { 10, 'a' };
        double[] doubleArray8 = new double[] { 10, 'a' };
        double[][] doubleArray9 = new double[][] { doubleArray5, doubleArray8 };
        com.operations.Matrix.Matrix matrix10 = new com.operations.Matrix.Matrix(doubleArray9);
        com.operations.Matrix.Matrix matrix11 = new com.operations.Matrix.Matrix(doubleArray9);
        boolean boolean12 = com.operations.Matrix.MatrixUtils.isSquare(matrix11);
        double[] doubleArray15 = new double[] { 10, 'a' };
        double[] doubleArray18 = new double[] { 10, 'a' };
        double[][] doubleArray19 = new double[][] { doubleArray15, doubleArray18 };
        com.operations.Matrix.Matrix matrix20 = new com.operations.Matrix.Matrix(doubleArray19);
        int int21 = matrix20.getCols();
        int int22 = matrix20.getCols();
        matrix20.print();
        double[] doubleArray26 = new double[] { 10, 'a' };
        double[] doubleArray29 = new double[] { 10, 'a' };
        double[][] doubleArray30 = new double[][] { doubleArray26, doubleArray29 };
        com.operations.Matrix.Matrix matrix31 = new com.operations.Matrix.Matrix(doubleArray30);
        boolean boolean33 = com.operations.Matrix.MatrixUtils.compare(matrix20, matrix31, (double) (-1));
        com.operations.Matrix.Matrix matrix34 = com.operations.Matrix.MatrixOperations.subtract(matrix11, matrix31);
        com.operations.Matrix.Matrix[] matrixArray35 = com.operations.Matrix.MatrixDecompositions.luDecomposition(matrix34);
        double[][] doubleArray36 = matrix34.getData();
        com.operations.Matrix.Matrix matrix37 = new com.operations.Matrix.Matrix(doubleArray36);
        com.operations.Matrix.Matrix matrix38 = com.operations.Matrix.MatrixOperations.multiply(matrix2, matrix37);
        com.operations.Matrix.Matrix matrix40 = com.operations.Matrix.MatrixOperations.scalarMultiply(matrix37, (double) (short) -1);
        double[] doubleArray43 = new double[] { 10, 'a' };
        double[] doubleArray46 = new double[] { 10, 'a' };
        double[][] doubleArray47 = new double[][] { doubleArray43, doubleArray46 };
        com.operations.Matrix.Matrix matrix48 = new com.operations.Matrix.Matrix(doubleArray47);
        com.operations.Matrix.Matrix matrix49 = new com.operations.Matrix.Matrix(doubleArray47);
        com.operations.Matrix.Matrix[] matrixArray50 = com.operations.Matrix.MatrixDecompositions.luDecomposition(matrix49);
        com.operations.Matrix.Matrix matrix53 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0, (double) 100L);
        com.operations.Matrix.Matrix matrix54 = com.operations.Matrix.MatrixOperations.subtract(matrix49, matrix53);
        com.operations.Matrix.Matrix matrix56 = com.operations.Matrix.MatrixTransformations.rotate2D((double) (short) 100);
        double[] doubleArray59 = new double[] { 137.90576492663388d, (byte) -1 };
        double[] doubleArray60 = com.operations.Matrix.MatrixSolver.solveGaussian(matrix56, doubleArray59);
        com.operations.Matrix.Matrix matrix63 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0L, (double) (byte) 10);
        double[] doubleArray66 = new double[] { 10, 'a' };
        double[] doubleArray69 = new double[] { 10, 'a' };
        double[][] doubleArray70 = new double[][] { doubleArray66, doubleArray69 };
        com.operations.Matrix.Matrix matrix71 = new com.operations.Matrix.Matrix(doubleArray70);
        int int72 = matrix71.getCols();
        int int73 = matrix71.getCols();
        int int74 = matrix71.getCols();
        com.operations.Matrix.Matrix[] matrixArray75 = com.operations.Matrix.MatrixDecompositions.luDecomposition(matrix71);
        com.operations.Matrix.Matrix matrix76 = com.operations.Matrix.MatrixOperations.multiply(matrix63, matrix71);
        boolean boolean78 = com.operations.Matrix.MatrixUtils.compare(matrix56, matrix63, (double) (-1L));
        com.operations.Matrix.Matrix matrix79 = com.operations.Matrix.MatrixOperations.add(matrix49, matrix56);
        com.operations.Matrix.Matrix matrix80 = com.operations.Matrix.MatrixOperations.multiply(matrix37, matrix79);
        double[] doubleArray83 = new double[] { 10, 'a' };
        double[] doubleArray86 = new double[] { 10, 'a' };
        double[][] doubleArray87 = new double[][] { doubleArray83, doubleArray86 };
        com.operations.Matrix.Matrix matrix88 = new com.operations.Matrix.Matrix(doubleArray87);
        com.operations.Matrix.Matrix matrix89 = new com.operations.Matrix.Matrix(doubleArray87);
        com.operations.Matrix.Matrix matrix90 = new com.operations.Matrix.Matrix(doubleArray87);
        com.operations.Matrix.Matrix matrix91 = new com.operations.Matrix.Matrix(doubleArray87);
        com.operations.Matrix.Matrix matrix92 = com.operations.Matrix.MatrixOperations.transpose(matrix91);
        com.operations.Matrix.Matrix matrix94 = com.operations.Matrix.MatrixOperations.scalarMultiply(matrix92, (double) (-1.0f));
        boolean boolean96 = com.operations.Matrix.MatrixUtils.compare(matrix79, matrix92, 18.985133644271098d);
        int int97 = matrix79.getCols();
        org.junit.Assert.assertNotNull(matrix2);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertArrayEquals(doubleArray5, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertArrayEquals(doubleArray8, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertArrayEquals(doubleArray15, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertArrayEquals(doubleArray18, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 2 + "'", int21 == 2);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 2 + "'", int22 == 2);
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertArrayEquals(doubleArray26, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertArrayEquals(doubleArray29, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(matrix34);
        org.junit.Assert.assertNotNull(matrixArray35);
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertNotNull(matrix38);
        org.junit.Assert.assertNotNull(matrix40);
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertArrayEquals(doubleArray43, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray46);
        org.junit.Assert.assertArrayEquals(doubleArray46, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertNotNull(matrixArray50);
        org.junit.Assert.assertNotNull(matrix53);
        org.junit.Assert.assertNotNull(matrix54);
        org.junit.Assert.assertNotNull(matrix56);
        org.junit.Assert.assertNotNull(doubleArray59);
        org.junit.Assert.assertArrayEquals(doubleArray59, new double[] { 137.90576492663388d, (-1.0d) }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray60);
        org.junit.Assert.assertArrayEquals(doubleArray60, new double[] { (-24.931892522286255d), (-135.63701830716116d) }, 1.0E-15);
        org.junit.Assert.assertNotNull(matrix63);
        org.junit.Assert.assertNotNull(doubleArray66);
        org.junit.Assert.assertArrayEquals(doubleArray66, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray69);
        org.junit.Assert.assertArrayEquals(doubleArray69, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray70);
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 2 + "'", int72 == 2);
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + 2 + "'", int73 == 2);
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 2 + "'", int74 == 2);
        org.junit.Assert.assertNotNull(matrixArray75);
        org.junit.Assert.assertNotNull(matrix76);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertNotNull(matrix79);
        org.junit.Assert.assertNotNull(matrix80);
        org.junit.Assert.assertNotNull(doubleArray83);
        org.junit.Assert.assertArrayEquals(doubleArray83, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray86);
        org.junit.Assert.assertArrayEquals(doubleArray86, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray87);
        org.junit.Assert.assertNotNull(matrix92);
        org.junit.Assert.assertNotNull(matrix94);
        org.junit.Assert.assertTrue("'" + boolean96 + "' != '" + false + "'", boolean96 == false);
        org.junit.Assert.assertTrue("'" + int97 + "' != '" + 2 + "'", int97 == 2);
    }

    @Test
    public void test4902() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4902");
        com.operations.Matrix.Matrix matrix1 = com.operations.Matrix.MatrixTransformations.rotate2D((double) '4');
        double[] doubleArray4 = new double[] { 10, 'a' };
        double[] doubleArray7 = new double[] { 10, 'a' };
        double[][] doubleArray8 = new double[][] { doubleArray4, doubleArray7 };
        com.operations.Matrix.Matrix matrix9 = new com.operations.Matrix.Matrix(doubleArray8);
        com.operations.Matrix.Matrix matrix10 = new com.operations.Matrix.Matrix(doubleArray8);
        com.operations.Matrix.Matrix matrix12 = com.operations.Matrix.MatrixTransformations.rotate2D((double) (short) 100);
        double[] doubleArray15 = new double[] { 137.90576492663388d, (byte) -1 };
        double[] doubleArray16 = com.operations.Matrix.MatrixSolver.solveGaussian(matrix12, doubleArray15);
        com.operations.Matrix.Matrix matrix17 = com.operations.Matrix.MatrixOperations.add(matrix10, matrix12);
        boolean boolean18 = com.operations.Matrix.MatrixUtils.isSymmetric(matrix17);
        boolean boolean20 = com.operations.Matrix.MatrixUtils.compare(matrix1, matrix17, 364.0054944640259d);
        com.operations.Matrix.Matrix matrix23 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0L, (double) (byte) 10);
        int int24 = matrix23.getRows();
        com.operations.Matrix.Matrix matrix26 = com.operations.Matrix.MatrixOperations.scalarMultiply(matrix23, (double) 2);
        matrix23.print();
        com.operations.Matrix.Matrix matrix28 = com.operations.Matrix.MatrixOperations.multiply(matrix17, matrix23);
        com.operations.Matrix.Matrix[] matrixArray29 = com.operations.Matrix.MatrixDecompositions.luDecomposition(matrix17);
        double double30 = com.operations.Matrix.MatrixUtils.frobeniusNorm(matrix17);
        com.operations.Matrix.Matrix matrix35 = com.operations.Matrix.MatrixUtils.generateRandomMatrix(2, 35, (int) 'a', (int) (byte) 1);
        // The following exception was thrown during execution in test generation
        try {
            com.operations.Matrix.Matrix matrix36 = com.operations.Matrix.MatrixOperations.add(matrix17, matrix35);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Matrices must have the same dimensions for addition.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(matrix1);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertArrayEquals(doubleArray4, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertArrayEquals(doubleArray7, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertNotNull(matrix12);
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertArrayEquals(doubleArray15, new double[] { 137.90576492663388d, (-1.0d) }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertArrayEquals(doubleArray16, new double[] { (-24.931892522286255d), (-135.63701830716116d) }, 1.0E-15);
        org.junit.Assert.assertNotNull(matrix17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertNotNull(matrix23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 2 + "'", int24 == 2);
        org.junit.Assert.assertNotNull(matrix26);
        org.junit.Assert.assertNotNull(matrix28);
        org.junit.Assert.assertNotNull(matrixArray29);
        org.junit.Assert.assertTrue("'" + double30 + "' != '" + 137.15495886388925d + "'", double30 == 137.15495886388925d);
        org.junit.Assert.assertNotNull(matrix35);
    }

    @Test
    public void test4903() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4903");
        com.operations.Matrix.Matrix matrix1 = com.operations.Matrix.MatrixTransformations.rotate2D((double) 1.0f);
        com.operations.Matrix.Matrix matrix4 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0L, (double) (byte) 10);
        int int5 = matrix4.getRows();
        com.operations.Matrix.Matrix matrix7 = com.operations.Matrix.MatrixOperations.scalarMultiply(matrix4, (double) 2);
        double double8 = com.operations.Matrix.MatrixUtils.frobeniusNorm(matrix4);
        com.operations.Matrix.Matrix matrix11 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0L, (double) (byte) 10);
        int int12 = matrix11.getRows();
        com.operations.Matrix.Matrix matrix14 = com.operations.Matrix.MatrixOperations.scalarMultiply(matrix11, (double) 2);
        com.operations.Matrix.Matrix matrix15 = com.operations.Matrix.MatrixOperations.subtract(matrix4, matrix14);
        com.operations.Matrix.Matrix matrix16 = com.operations.Matrix.MatrixOperations.add(matrix1, matrix14);
        com.operations.Matrix.Matrix[] matrixArray17 = com.operations.Matrix.MatrixDecompositions.luDecomposition(matrix14);
        boolean boolean18 = com.operations.Matrix.MatrixUtils.isSquare(matrix14);
        com.operations.Matrix.Matrix matrix19 = com.operations.Matrix.MatrixOperations.transpose(matrix14);
        com.operations.Matrix.Matrix matrix21 = com.operations.Matrix.MatrixOperations.scalarMultiply(matrix14, (double) ' ');
        int int22 = matrix21.getRows();
        org.junit.Assert.assertNotNull(matrix1);
        org.junit.Assert.assertNotNull(matrix4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 2 + "'", int5 == 2);
        org.junit.Assert.assertNotNull(matrix7);
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 10.0d + "'", double8 == 10.0d);
        org.junit.Assert.assertNotNull(matrix11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 2 + "'", int12 == 2);
        org.junit.Assert.assertNotNull(matrix14);
        org.junit.Assert.assertNotNull(matrix15);
        org.junit.Assert.assertNotNull(matrix16);
        org.junit.Assert.assertNotNull(matrixArray17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(matrix19);
        org.junit.Assert.assertNotNull(matrix21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 2 + "'", int22 == 2);
    }

    @Test
    public void test4904() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4904");
        com.operations.Matrix.Matrix matrix1 = com.operations.Matrix.MatrixTransformations.rotate2D((double) '4');
        double[] doubleArray4 = new double[] { 10, 'a' };
        double[] doubleArray7 = new double[] { 10, 'a' };
        double[][] doubleArray8 = new double[][] { doubleArray4, doubleArray7 };
        com.operations.Matrix.Matrix matrix9 = new com.operations.Matrix.Matrix(doubleArray8);
        com.operations.Matrix.Matrix matrix10 = new com.operations.Matrix.Matrix(doubleArray8);
        com.operations.Matrix.Matrix matrix12 = com.operations.Matrix.MatrixTransformations.rotate2D((double) (short) 100);
        double[] doubleArray15 = new double[] { 137.90576492663388d, (byte) -1 };
        double[] doubleArray16 = com.operations.Matrix.MatrixSolver.solveGaussian(matrix12, doubleArray15);
        com.operations.Matrix.Matrix matrix17 = com.operations.Matrix.MatrixOperations.add(matrix10, matrix12);
        boolean boolean18 = com.operations.Matrix.MatrixUtils.isSymmetric(matrix17);
        boolean boolean20 = com.operations.Matrix.MatrixUtils.compare(matrix1, matrix17, 364.0054944640259d);
        com.operations.Matrix.Matrix[] matrixArray21 = com.operations.Matrix.MatrixDecompositions.luDecomposition(matrix17);
        com.operations.Matrix.Matrix matrix23 = com.operations.Matrix.MatrixTransformations.rotate2D(100.0d);
        int int24 = matrix23.getCols();
        double[][] doubleArray25 = matrix23.getData();
        double[] doubleArray28 = new double[] { 10, 'a' };
        double[] doubleArray31 = new double[] { 10, 'a' };
        double[][] doubleArray32 = new double[][] { doubleArray28, doubleArray31 };
        com.operations.Matrix.Matrix matrix33 = new com.operations.Matrix.Matrix(doubleArray32);
        com.operations.Matrix.Matrix matrix34 = com.operations.Matrix.MatrixOperations.transpose(matrix33);
        com.operations.Matrix.Matrix matrix37 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0L, (double) (byte) 10);
        int int38 = matrix37.getRows();
        com.operations.Matrix.Matrix matrix44 = com.operations.Matrix.MatrixUtils.generateRandomMatrix(100, (int) (byte) 1, (int) '#', (int) '#', 1L);
        boolean boolean46 = com.operations.Matrix.MatrixUtils.compare(matrix37, matrix44, (double) 1.0f);
        com.operations.Matrix.Matrix matrix48 = com.operations.Matrix.MatrixOperations.scalarMultiply(matrix37, (double) 1L);
        matrix37.print();
        com.operations.Matrix.Matrix matrix50 = com.operations.Matrix.MatrixOperations.multiply(matrix34, matrix37);
        boolean boolean52 = com.operations.Matrix.MatrixUtils.compare(matrix23, matrix50, (double) 0.0f);
        boolean boolean53 = com.operations.Matrix.MatrixUtils.isSquare(matrix50);
        double double54 = com.operations.Matrix.MatrixUtils.frobeniusNorm(matrix50);
        com.operations.Matrix.Matrix matrix57 = com.operations.Matrix.MatrixTransformations.scale2D((double) 100L, 1.0d);
        com.operations.Matrix.Matrix matrix58 = com.operations.Matrix.MatrixOperations.transpose(matrix57);
        double[][] doubleArray59 = matrix58.getData();
        boolean boolean61 = com.operations.Matrix.MatrixUtils.compare(matrix50, matrix58, 641.7761389614766d);
        com.operations.Matrix.Matrix matrix62 = com.operations.Matrix.MatrixOperations.multiply(matrix17, matrix58);
        int int63 = matrix17.getRows();
        int int64 = matrix17.getCols();
        com.operations.Matrix.Matrix matrix66 = com.operations.Matrix.MatrixOperations.scalarMultiply(matrix17, (double) 10.0f);
        // The following exception was thrown during execution in test generation
        try {
            double double69 = matrix17.getValue((int) (byte) -1, (int) (short) 1);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(matrix1);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertArrayEquals(doubleArray4, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertArrayEquals(doubleArray7, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertNotNull(matrix12);
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertArrayEquals(doubleArray15, new double[] { 137.90576492663388d, (-1.0d) }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertArrayEquals(doubleArray16, new double[] { (-24.931892522286255d), (-135.63701830716116d) }, 1.0E-15);
        org.junit.Assert.assertNotNull(matrix17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertNotNull(matrixArray21);
        org.junit.Assert.assertNotNull(matrix23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 2 + "'", int24 == 2);
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertArrayEquals(doubleArray28, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertArrayEquals(doubleArray31, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertNotNull(matrix34);
        org.junit.Assert.assertNotNull(matrix37);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 2 + "'", int38 == 2);
        org.junit.Assert.assertNotNull(matrix44);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(matrix48);
        org.junit.Assert.assertNotNull(matrix50);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true);
        org.junit.Assert.assertTrue("'" + double54 + "' != '" + 975.1410154434076d + "'", double54 == 975.1410154434076d);
        org.junit.Assert.assertNotNull(matrix57);
        org.junit.Assert.assertNotNull(matrix58);
        org.junit.Assert.assertNotNull(doubleArray59);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNotNull(matrix62);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 2 + "'", int63 == 2);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 2 + "'", int64 == 2);
        org.junit.Assert.assertNotNull(matrix66);
    }

    @Test
    public void test4905() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4905");
        com.operations.Matrix.Matrix matrix1 = com.operations.Matrix.MatrixTransformations.rotate2D(1.414213562373095d);
        com.operations.Matrix.Matrix matrix2 = com.operations.Matrix.MatrixOperations.transpose(matrix1);
        com.operations.Matrix.Matrix matrix5 = com.operations.Matrix.MatrixTransformations.project2D((double) ' ', 0.0d);
        double[] doubleArray8 = new double[] { 10, 'a' };
        double[] doubleArray11 = new double[] { 10, 'a' };
        double[][] doubleArray12 = new double[][] { doubleArray8, doubleArray11 };
        com.operations.Matrix.Matrix matrix13 = new com.operations.Matrix.Matrix(doubleArray12);
        int int14 = matrix13.getCols();
        boolean boolean15 = com.operations.Matrix.MatrixUtils.isSquare(matrix13);
        com.operations.Matrix.Matrix matrix16 = com.operations.Matrix.MatrixOperations.transpose(matrix13);
        int int17 = matrix16.getRows();
        com.operations.Matrix.Matrix matrix20 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0L, (double) (byte) 10);
        double[] doubleArray23 = new double[] { 10, 'a' };
        double[] doubleArray26 = new double[] { 10, 'a' };
        double[][] doubleArray27 = new double[][] { doubleArray23, doubleArray26 };
        com.operations.Matrix.Matrix matrix28 = new com.operations.Matrix.Matrix(doubleArray27);
        int int29 = matrix28.getCols();
        int int30 = matrix28.getCols();
        int int31 = matrix28.getCols();
        com.operations.Matrix.Matrix[] matrixArray32 = com.operations.Matrix.MatrixDecompositions.luDecomposition(matrix28);
        com.operations.Matrix.Matrix matrix33 = com.operations.Matrix.MatrixOperations.multiply(matrix20, matrix28);
        com.operations.Matrix.Matrix matrix35 = com.operations.Matrix.MatrixTransformations.rotate2D((double) (short) 100);
        boolean boolean37 = com.operations.Matrix.MatrixUtils.compare(matrix28, matrix35, (double) (byte) 0);
        com.operations.Matrix.Matrix matrix38 = com.operations.Matrix.MatrixOperations.multiply(matrix16, matrix28);
        com.operations.Matrix.Matrix matrix39 = com.operations.Matrix.MatrixOperations.add(matrix5, matrix28);
        matrix28.print();
        com.operations.Matrix.Matrix[] matrixArray41 = com.operations.Matrix.MatrixDecompositions.luDecomposition(matrix28);
        com.operations.Matrix.Matrix matrix42 = com.operations.Matrix.MatrixOperations.add(matrix1, matrix28);
        boolean boolean43 = com.operations.Matrix.MatrixUtils.isSymmetric(matrix42);
        com.operations.Matrix.Matrix matrix46 = com.operations.Matrix.MatrixTransformations.project2D(0.0d, (double) (-1));
        boolean boolean47 = com.operations.Matrix.MatrixUtils.isSymmetric(matrix46);
        double[][] doubleArray48 = matrix46.getData();
        com.operations.Matrix.Matrix matrix49 = new com.operations.Matrix.Matrix(doubleArray48);
        com.operations.Matrix.Matrix matrix50 = com.operations.Matrix.MatrixOperations.add(matrix42, matrix49);
        com.operations.Matrix.Matrix matrix52 = com.operations.Matrix.MatrixTransformations.rotate2D(65.19779036970327d);
        com.operations.Matrix.Matrix matrix53 = com.operations.Matrix.MatrixOperations.add(matrix50, matrix52);
        org.junit.Assert.assertNotNull(matrix1);
        org.junit.Assert.assertNotNull(matrix2);
        org.junit.Assert.assertNotNull(matrix5);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertArrayEquals(doubleArray8, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertArrayEquals(doubleArray11, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 2 + "'", int14 == 2);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNotNull(matrix16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 2 + "'", int17 == 2);
        org.junit.Assert.assertNotNull(matrix20);
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertArrayEquals(doubleArray23, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertArrayEquals(doubleArray26, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 2 + "'", int29 == 2);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 2 + "'", int30 == 2);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 2 + "'", int31 == 2);
        org.junit.Assert.assertNotNull(matrixArray32);
        org.junit.Assert.assertNotNull(matrix33);
        org.junit.Assert.assertNotNull(matrix35);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(matrix38);
        org.junit.Assert.assertNotNull(matrix39);
        org.junit.Assert.assertNotNull(matrixArray41);
        org.junit.Assert.assertNotNull(matrix42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(matrix46);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertNotNull(matrix50);
        org.junit.Assert.assertNotNull(matrix52);
        org.junit.Assert.assertNotNull(matrix53);
    }

    @Test
    public void test4906() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4906");
        com.operations.Matrix.Matrix matrix2 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0L, (double) (byte) 10);
        int int3 = matrix2.getRows();
        com.operations.Matrix.Matrix matrix6 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0L, (double) (byte) 10);
        int int7 = matrix6.getRows();
        com.operations.Matrix.Matrix matrix9 = com.operations.Matrix.MatrixOperations.scalarMultiply(matrix6, (double) 2);
        com.operations.Matrix.Matrix matrix10 = com.operations.Matrix.MatrixOperations.subtract(matrix2, matrix6);
        com.operations.Matrix.Matrix matrix13 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0L, (double) (byte) 10);
        int int14 = matrix13.getRows();
        com.operations.Matrix.Matrix matrix20 = com.operations.Matrix.MatrixUtils.generateRandomMatrix(100, (int) (byte) 1, (int) '#', (int) '#', 1L);
        boolean boolean22 = com.operations.Matrix.MatrixUtils.compare(matrix13, matrix20, (double) 1.0f);
        com.operations.Matrix.Matrix matrix24 = com.operations.Matrix.MatrixOperations.scalarMultiply(matrix13, (double) 1L);
        boolean boolean26 = com.operations.Matrix.MatrixUtils.compare(matrix10, matrix24, 0.0d);
        com.operations.Matrix.Matrix matrix27 = com.operations.Matrix.MatrixOperations.transpose(matrix10);
        int int28 = matrix10.getCols();
        com.operations.Matrix.Matrix matrix30 = com.operations.Matrix.MatrixTransformations.rotate2D(32.0d);
        com.operations.Matrix.Matrix matrix31 = com.operations.Matrix.MatrixOperations.subtract(matrix10, matrix30);
        com.operations.Matrix.Matrix matrix32 = com.operations.Matrix.MatrixDecompositions.choleskyDecomposition(matrix30);
        double[][] doubleArray33 = matrix32.getData();
        com.operations.Matrix.Matrix matrix34 = new com.operations.Matrix.Matrix(doubleArray33);
        com.operations.Matrix.Matrix matrix35 = new com.operations.Matrix.Matrix(doubleArray33);
        org.junit.Assert.assertNotNull(matrix2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 2 + "'", int3 == 2);
        org.junit.Assert.assertNotNull(matrix6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 2 + "'", int7 == 2);
        org.junit.Assert.assertNotNull(matrix9);
        org.junit.Assert.assertNotNull(matrix10);
        org.junit.Assert.assertNotNull(matrix13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 2 + "'", int14 == 2);
        org.junit.Assert.assertNotNull(matrix20);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(matrix24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(matrix27);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 2 + "'", int28 == 2);
        org.junit.Assert.assertNotNull(matrix30);
        org.junit.Assert.assertNotNull(matrix31);
        org.junit.Assert.assertNotNull(matrix32);
        org.junit.Assert.assertNotNull(doubleArray33);
    }

    @Test
    public void test4907() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4907");
        com.operations.Matrix.Matrix matrix2 = com.operations.Matrix.MatrixTransformations.project2D((double) ' ', 0.0d);
        double[] doubleArray5 = new double[] { 10, 'a' };
        double[] doubleArray8 = new double[] { 10, 'a' };
        double[][] doubleArray9 = new double[][] { doubleArray5, doubleArray8 };
        com.operations.Matrix.Matrix matrix10 = new com.operations.Matrix.Matrix(doubleArray9);
        int int11 = matrix10.getCols();
        boolean boolean12 = com.operations.Matrix.MatrixUtils.isSquare(matrix10);
        com.operations.Matrix.Matrix matrix13 = com.operations.Matrix.MatrixOperations.transpose(matrix10);
        int int14 = matrix13.getRows();
        com.operations.Matrix.Matrix matrix17 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0L, (double) (byte) 10);
        double[] doubleArray20 = new double[] { 10, 'a' };
        double[] doubleArray23 = new double[] { 10, 'a' };
        double[][] doubleArray24 = new double[][] { doubleArray20, doubleArray23 };
        com.operations.Matrix.Matrix matrix25 = new com.operations.Matrix.Matrix(doubleArray24);
        int int26 = matrix25.getCols();
        int int27 = matrix25.getCols();
        int int28 = matrix25.getCols();
        com.operations.Matrix.Matrix[] matrixArray29 = com.operations.Matrix.MatrixDecompositions.luDecomposition(matrix25);
        com.operations.Matrix.Matrix matrix30 = com.operations.Matrix.MatrixOperations.multiply(matrix17, matrix25);
        com.operations.Matrix.Matrix matrix32 = com.operations.Matrix.MatrixTransformations.rotate2D((double) (short) 100);
        boolean boolean34 = com.operations.Matrix.MatrixUtils.compare(matrix25, matrix32, (double) (byte) 0);
        com.operations.Matrix.Matrix matrix35 = com.operations.Matrix.MatrixOperations.multiply(matrix13, matrix25);
        com.operations.Matrix.Matrix matrix36 = com.operations.Matrix.MatrixOperations.add(matrix2, matrix25);
        com.operations.Matrix.Matrix matrix37 = com.operations.Matrix.MatrixOperations.transpose(matrix2);
        com.operations.Matrix.Matrix matrix40 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0L, (double) (byte) 10);
        double[] doubleArray43 = new double[] { 10, 'a' };
        double[] doubleArray46 = new double[] { 10, 'a' };
        double[][] doubleArray47 = new double[][] { doubleArray43, doubleArray46 };
        com.operations.Matrix.Matrix matrix48 = new com.operations.Matrix.Matrix(doubleArray47);
        int int49 = matrix48.getCols();
        int int50 = matrix48.getCols();
        int int51 = matrix48.getCols();
        com.operations.Matrix.Matrix[] matrixArray52 = com.operations.Matrix.MatrixDecompositions.luDecomposition(matrix48);
        com.operations.Matrix.Matrix matrix53 = com.operations.Matrix.MatrixOperations.multiply(matrix40, matrix48);
        com.operations.Matrix.Matrix matrix55 = com.operations.Matrix.MatrixTransformations.rotate2D((double) (short) 100);
        boolean boolean57 = com.operations.Matrix.MatrixUtils.compare(matrix48, matrix55, (double) (byte) 0);
        double[] doubleArray60 = new double[] { 10, 'a' };
        double[] doubleArray63 = new double[] { 10, 'a' };
        double[][] doubleArray64 = new double[][] { doubleArray60, doubleArray63 };
        com.operations.Matrix.Matrix matrix65 = new com.operations.Matrix.Matrix(doubleArray64);
        com.operations.Matrix.Matrix matrix66 = new com.operations.Matrix.Matrix(doubleArray64);
        com.operations.Matrix.Matrix matrix67 = new com.operations.Matrix.Matrix(doubleArray64);
        boolean boolean69 = com.operations.Matrix.MatrixUtils.compare(matrix48, matrix67, (double) (-1));
        com.operations.Matrix.Matrix matrix71 = com.operations.Matrix.MatrixTransformations.rotate2D((double) (short) 100);
        double[] doubleArray74 = new double[] { 137.90576492663388d, (byte) -1 };
        double[] doubleArray75 = com.operations.Matrix.MatrixSolver.solveGaussian(matrix71, doubleArray74);
        com.operations.Matrix.Matrix matrix78 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0L, (double) (byte) 10);
        double[] doubleArray81 = new double[] { 10, 'a' };
        double[] doubleArray84 = new double[] { 10, 'a' };
        double[][] doubleArray85 = new double[][] { doubleArray81, doubleArray84 };
        com.operations.Matrix.Matrix matrix86 = new com.operations.Matrix.Matrix(doubleArray85);
        int int87 = matrix86.getCols();
        int int88 = matrix86.getCols();
        int int89 = matrix86.getCols();
        com.operations.Matrix.Matrix[] matrixArray90 = com.operations.Matrix.MatrixDecompositions.luDecomposition(matrix86);
        com.operations.Matrix.Matrix matrix91 = com.operations.Matrix.MatrixOperations.multiply(matrix78, matrix86);
        boolean boolean93 = com.operations.Matrix.MatrixUtils.compare(matrix71, matrix78, (double) (-1L));
        com.operations.Matrix.Matrix matrix94 = com.operations.Matrix.MatrixOperations.add(matrix67, matrix78);
        com.operations.Matrix.Matrix matrix95 = com.operations.Matrix.MatrixOperations.subtract(matrix37, matrix94);
        double double96 = com.operations.Matrix.MatrixUtils.frobeniusNorm(matrix95);
        matrix95.print();
        com.operations.Matrix.Matrix matrix98 = com.operations.Matrix.MatrixOperations.transpose(matrix95);
        matrix95.print();
        org.junit.Assert.assertNotNull(matrix2);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertArrayEquals(doubleArray5, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertArrayEquals(doubleArray8, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 2 + "'", int11 == 2);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(matrix13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 2 + "'", int14 == 2);
        org.junit.Assert.assertNotNull(matrix17);
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertArrayEquals(doubleArray20, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertArrayEquals(doubleArray23, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 2 + "'", int26 == 2);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 2 + "'", int27 == 2);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 2 + "'", int28 == 2);
        org.junit.Assert.assertNotNull(matrixArray29);
        org.junit.Assert.assertNotNull(matrix30);
        org.junit.Assert.assertNotNull(matrix32);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(matrix35);
        org.junit.Assert.assertNotNull(matrix36);
        org.junit.Assert.assertNotNull(matrix37);
        org.junit.Assert.assertNotNull(matrix40);
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertArrayEquals(doubleArray43, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray46);
        org.junit.Assert.assertArrayEquals(doubleArray46, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 2 + "'", int49 == 2);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 2 + "'", int50 == 2);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 2 + "'", int51 == 2);
        org.junit.Assert.assertNotNull(matrixArray52);
        org.junit.Assert.assertNotNull(matrix53);
        org.junit.Assert.assertNotNull(matrix55);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNotNull(doubleArray60);
        org.junit.Assert.assertArrayEquals(doubleArray60, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray63);
        org.junit.Assert.assertArrayEquals(doubleArray63, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray64);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertNotNull(matrix71);
        org.junit.Assert.assertNotNull(doubleArray74);
        org.junit.Assert.assertArrayEquals(doubleArray74, new double[] { 137.90576492663388d, (-1.0d) }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray75);
        org.junit.Assert.assertArrayEquals(doubleArray75, new double[] { (-24.931892522286255d), (-135.63701830716116d) }, 1.0E-15);
        org.junit.Assert.assertNotNull(matrix78);
        org.junit.Assert.assertNotNull(doubleArray81);
        org.junit.Assert.assertArrayEquals(doubleArray81, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray84);
        org.junit.Assert.assertArrayEquals(doubleArray84, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray85);
        org.junit.Assert.assertTrue("'" + int87 + "' != '" + 2 + "'", int87 == 2);
        org.junit.Assert.assertTrue("'" + int88 + "' != '" + 2 + "'", int88 == 2);
        org.junit.Assert.assertTrue("'" + int89 + "' != '" + 2 + "'", int89 == 2);
        org.junit.Assert.assertNotNull(matrixArray90);
        org.junit.Assert.assertNotNull(matrix91);
        org.junit.Assert.assertTrue("'" + boolean93 + "' != '" + false + "'", boolean93 == false);
        org.junit.Assert.assertNotNull(matrix94);
        org.junit.Assert.assertNotNull(matrix95);
        org.junit.Assert.assertTrue("'" + double96 + "' != '" + 146.4308710620817d + "'", double96 == 146.4308710620817d);
        org.junit.Assert.assertNotNull(matrix98);
    }

    @Test
    public void test4908() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4908");
        com.operations.Matrix.Matrix matrix1 = com.operations.Matrix.MatrixTransformations.rotate2D((double) 1.0f);
        com.operations.Matrix.Matrix matrix4 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0L, (double) (byte) 10);
        int int5 = matrix4.getRows();
        com.operations.Matrix.Matrix matrix7 = com.operations.Matrix.MatrixOperations.scalarMultiply(matrix4, (double) 2);
        double double8 = com.operations.Matrix.MatrixUtils.frobeniusNorm(matrix4);
        com.operations.Matrix.Matrix matrix11 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0L, (double) (byte) 10);
        int int12 = matrix11.getRows();
        com.operations.Matrix.Matrix matrix14 = com.operations.Matrix.MatrixOperations.scalarMultiply(matrix11, (double) 2);
        com.operations.Matrix.Matrix matrix15 = com.operations.Matrix.MatrixOperations.subtract(matrix4, matrix14);
        com.operations.Matrix.Matrix matrix16 = com.operations.Matrix.MatrixOperations.add(matrix1, matrix14);
        com.operations.Matrix.Matrix[] matrixArray17 = com.operations.Matrix.MatrixDecompositions.luDecomposition(matrix14);
        boolean boolean18 = com.operations.Matrix.MatrixUtils.isSquare(matrix14);
        com.operations.Matrix.Matrix matrix19 = com.operations.Matrix.MatrixOperations.transpose(matrix14);
        boolean boolean20 = com.operations.Matrix.MatrixUtils.isSymmetric(matrix14);
        boolean boolean21 = com.operations.Matrix.MatrixUtils.isSymmetric(matrix14);
        boolean boolean22 = com.operations.Matrix.MatrixUtils.isSymmetric(matrix14);
        org.junit.Assert.assertNotNull(matrix1);
        org.junit.Assert.assertNotNull(matrix4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 2 + "'", int5 == 2);
        org.junit.Assert.assertNotNull(matrix7);
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 10.0d + "'", double8 == 10.0d);
        org.junit.Assert.assertNotNull(matrix11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 2 + "'", int12 == 2);
        org.junit.Assert.assertNotNull(matrix14);
        org.junit.Assert.assertNotNull(matrix15);
        org.junit.Assert.assertNotNull(matrix16);
        org.junit.Assert.assertNotNull(matrixArray17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(matrix19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
    }

    @Test
    public void test4909() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4909");
        com.operations.Matrix.Matrix matrix4 = com.operations.Matrix.MatrixUtils.generateRandomMatrix((int) 'a', 2, 0, (-1));
        org.junit.Assert.assertNotNull(matrix4);
    }

    @Test
    public void test4910() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4910");
        com.operations.Matrix.Matrix matrix2 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0L, (double) (byte) 10);
        int int3 = matrix2.getRows();
        com.operations.Matrix.Matrix matrix5 = com.operations.Matrix.MatrixOperations.scalarMultiply(matrix2, (double) 2);
        double double6 = com.operations.Matrix.MatrixUtils.frobeniusNorm(matrix2);
        com.operations.Matrix.Matrix matrix9 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0L, (double) (byte) 10);
        double[] doubleArray12 = new double[] { 10, 'a' };
        double[] doubleArray15 = new double[] { 10, 'a' };
        double[][] doubleArray16 = new double[][] { doubleArray12, doubleArray15 };
        com.operations.Matrix.Matrix matrix17 = new com.operations.Matrix.Matrix(doubleArray16);
        int int18 = matrix17.getCols();
        int int19 = matrix17.getCols();
        int int20 = matrix17.getCols();
        com.operations.Matrix.Matrix[] matrixArray21 = com.operations.Matrix.MatrixDecompositions.luDecomposition(matrix17);
        com.operations.Matrix.Matrix matrix22 = com.operations.Matrix.MatrixOperations.multiply(matrix9, matrix17);
        com.operations.Matrix.Matrix matrix24 = com.operations.Matrix.MatrixTransformations.rotate2D((double) (short) 100);
        boolean boolean26 = com.operations.Matrix.MatrixUtils.compare(matrix17, matrix24, (double) (byte) 0);
        com.operations.Matrix.Matrix[] matrixArray27 = com.operations.Matrix.MatrixDecompositions.luDecomposition(matrix17);
        com.operations.Matrix.Matrix matrix28 = com.operations.Matrix.MatrixDecompositions.choleskyDecomposition(matrix17);
        int int29 = matrix17.getCols();
        boolean boolean31 = com.operations.Matrix.MatrixUtils.compare(matrix2, matrix17, 260.95643973734866d);
        com.operations.Matrix.Matrix matrix34 = com.operations.Matrix.MatrixTransformations.project2D((double) (byte) 100, 32.0d);
        com.operations.Matrix.Matrix matrix35 = com.operations.Matrix.MatrixOperations.add(matrix17, matrix34);
        com.operations.Matrix.Matrix matrix37 = com.operations.Matrix.MatrixOperations.scalarMultiply(matrix17, 19018.0d);
        org.junit.Assert.assertNotNull(matrix2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 2 + "'", int3 == 2);
        org.junit.Assert.assertNotNull(matrix5);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 10.0d + "'", double6 == 10.0d);
        org.junit.Assert.assertNotNull(matrix9);
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertArrayEquals(doubleArray12, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertArrayEquals(doubleArray15, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 2 + "'", int18 == 2);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 2 + "'", int19 == 2);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 2 + "'", int20 == 2);
        org.junit.Assert.assertNotNull(matrixArray21);
        org.junit.Assert.assertNotNull(matrix22);
        org.junit.Assert.assertNotNull(matrix24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(matrixArray27);
        org.junit.Assert.assertNotNull(matrix28);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 2 + "'", int29 == 2);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertNotNull(matrix34);
        org.junit.Assert.assertNotNull(matrix35);
        org.junit.Assert.assertNotNull(matrix37);
    }

    @Test
    public void test4911() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4911");
        com.operations.Matrix.Matrix matrix2 = com.operations.Matrix.MatrixTransformations.project2D(43.079766291379094d, (double) 0.0f);
        int int3 = matrix2.getRows();
        org.junit.Assert.assertNotNull(matrix2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 2 + "'", int3 == 2);
    }

    @Test
    public void test4912() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4912");
        com.operations.Matrix.Matrix matrix2 = com.operations.Matrix.MatrixTransformations.project2D((double) '#', 364.0054944640259d);
        com.operations.Matrix.Matrix matrix3 = com.operations.Matrix.MatrixDecompositions.choleskyDecomposition(matrix2);
        matrix2.print();
        com.operations.Matrix.Matrix matrix5 = com.operations.Matrix.MatrixDecompositions.choleskyDecomposition(matrix2);
        com.operations.Matrix.Matrix matrix7 = com.operations.Matrix.MatrixTransformations.rotate2D((-1.0d));
        com.operations.Matrix.Matrix[] matrixArray8 = com.operations.Matrix.MatrixDecompositions.luDecomposition(matrix7);
        double double9 = com.operations.Matrix.MatrixUtils.frobeniusNorm(matrix7);
        com.operations.Matrix.Matrix matrix10 = com.operations.Matrix.MatrixOperations.add(matrix2, matrix7);
        org.junit.Assert.assertNotNull(matrix2);
        org.junit.Assert.assertNotNull(matrix3);
        org.junit.Assert.assertNotNull(matrix5);
        org.junit.Assert.assertNotNull(matrix7);
        org.junit.Assert.assertNotNull(matrixArray8);
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 1.4142135623730951d + "'", double9 == 1.4142135623730951d);
        org.junit.Assert.assertNotNull(matrix10);
    }

    @Test
    public void test4913() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4913");
        double[] doubleArray2 = new double[] { 10, 'a' };
        double[] doubleArray5 = new double[] { 10, 'a' };
        double[][] doubleArray6 = new double[][] { doubleArray2, doubleArray5 };
        com.operations.Matrix.Matrix matrix7 = new com.operations.Matrix.Matrix(doubleArray6);
        com.operations.Matrix.Matrix matrix8 = new com.operations.Matrix.Matrix(doubleArray6);
        boolean boolean9 = com.operations.Matrix.MatrixUtils.isSquare(matrix8);
        double[] doubleArray12 = new double[] { 10, 'a' };
        double[] doubleArray15 = new double[] { 10, 'a' };
        double[][] doubleArray16 = new double[][] { doubleArray12, doubleArray15 };
        com.operations.Matrix.Matrix matrix17 = new com.operations.Matrix.Matrix(doubleArray16);
        int int18 = matrix17.getCols();
        int int19 = matrix17.getCols();
        matrix17.print();
        double[] doubleArray23 = new double[] { 10, 'a' };
        double[] doubleArray26 = new double[] { 10, 'a' };
        double[][] doubleArray27 = new double[][] { doubleArray23, doubleArray26 };
        com.operations.Matrix.Matrix matrix28 = new com.operations.Matrix.Matrix(doubleArray27);
        boolean boolean30 = com.operations.Matrix.MatrixUtils.compare(matrix17, matrix28, (double) (-1));
        com.operations.Matrix.Matrix matrix31 = com.operations.Matrix.MatrixOperations.subtract(matrix8, matrix28);
        com.operations.Matrix.Matrix matrix33 = com.operations.Matrix.MatrixOperations.scalarMultiply(matrix8, (double) 0.0f);
        int int34 = matrix8.getCols();
        com.operations.Matrix.Matrix matrix35 = com.operations.Matrix.MatrixDecompositions.choleskyDecomposition(matrix8);
        com.operations.Matrix.Matrix[] matrixArray36 = com.operations.Matrix.MatrixDecompositions.luDecomposition(matrix8);
        int int37 = matrix8.getCols();
        com.operations.Matrix.Matrix matrix38 = com.operations.Matrix.MatrixOperations.transpose(matrix8);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertArrayEquals(doubleArray2, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertArrayEquals(doubleArray5, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertArrayEquals(doubleArray12, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertArrayEquals(doubleArray15, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 2 + "'", int18 == 2);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 2 + "'", int19 == 2);
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertArrayEquals(doubleArray23, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertArrayEquals(doubleArray26, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(matrix31);
        org.junit.Assert.assertNotNull(matrix33);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 2 + "'", int34 == 2);
        org.junit.Assert.assertNotNull(matrix35);
        org.junit.Assert.assertNotNull(matrixArray36);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 2 + "'", int37 == 2);
        org.junit.Assert.assertNotNull(matrix38);
    }

    @Test
    public void test4914() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4914");
        com.operations.Matrix.Matrix matrix2 = com.operations.Matrix.MatrixTransformations.scale2D(131.06486943494812d, (double) (byte) 100);
        com.operations.Matrix.Matrix matrix5 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0.0f, (double) (-1));
        com.operations.Matrix.Matrix matrix8 = com.operations.Matrix.MatrixTransformations.scale2D(146.4308710620817d, (double) 10L);
        com.operations.Matrix.Matrix matrix9 = com.operations.Matrix.MatrixOperations.multiply(matrix5, matrix8);
        com.operations.Matrix.Matrix matrix11 = com.operations.Matrix.MatrixTransformations.rotate2D((double) 1.0f);
        com.operations.Matrix.Matrix matrix14 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0L, (double) (byte) 10);
        int int15 = matrix14.getRows();
        com.operations.Matrix.Matrix matrix17 = com.operations.Matrix.MatrixOperations.scalarMultiply(matrix14, (double) 2);
        double double18 = com.operations.Matrix.MatrixUtils.frobeniusNorm(matrix14);
        com.operations.Matrix.Matrix matrix21 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0L, (double) (byte) 10);
        int int22 = matrix21.getRows();
        com.operations.Matrix.Matrix matrix24 = com.operations.Matrix.MatrixOperations.scalarMultiply(matrix21, (double) 2);
        com.operations.Matrix.Matrix matrix25 = com.operations.Matrix.MatrixOperations.subtract(matrix14, matrix24);
        com.operations.Matrix.Matrix matrix26 = com.operations.Matrix.MatrixOperations.add(matrix11, matrix24);
        matrix11.print();
        double[] doubleArray30 = new double[] { 10, 'a' };
        double[] doubleArray33 = new double[] { 10, 'a' };
        double[][] doubleArray34 = new double[][] { doubleArray30, doubleArray33 };
        com.operations.Matrix.Matrix matrix35 = new com.operations.Matrix.Matrix(doubleArray34);
        com.operations.Matrix.Matrix matrix36 = com.operations.Matrix.MatrixOperations.transpose(matrix35);
        com.operations.Matrix.Matrix matrix39 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0L, (double) (byte) 10);
        int int40 = matrix39.getRows();
        com.operations.Matrix.Matrix matrix46 = com.operations.Matrix.MatrixUtils.generateRandomMatrix(100, (int) (byte) 1, (int) '#', (int) '#', 1L);
        boolean boolean48 = com.operations.Matrix.MatrixUtils.compare(matrix39, matrix46, (double) 1.0f);
        com.operations.Matrix.Matrix matrix50 = com.operations.Matrix.MatrixOperations.scalarMultiply(matrix39, (double) 1L);
        matrix39.print();
        com.operations.Matrix.Matrix matrix52 = com.operations.Matrix.MatrixOperations.multiply(matrix36, matrix39);
        com.operations.Matrix.Matrix matrix53 = com.operations.Matrix.MatrixOperations.multiply(matrix11, matrix39);
        com.operations.Matrix.Matrix matrix54 = com.operations.Matrix.MatrixOperations.subtract(matrix5, matrix39);
        com.operations.Matrix.Matrix matrix55 = com.operations.Matrix.MatrixOperations.transpose(matrix39);
        com.operations.Matrix.Matrix matrix56 = com.operations.Matrix.MatrixOperations.multiply(matrix2, matrix39);
        double[] doubleArray59 = new double[] { 10, 'a' };
        double[] doubleArray62 = new double[] { 10, 'a' };
        double[][] doubleArray63 = new double[][] { doubleArray59, doubleArray62 };
        com.operations.Matrix.Matrix matrix64 = new com.operations.Matrix.Matrix(doubleArray63);
        com.operations.Matrix.Matrix matrix65 = new com.operations.Matrix.Matrix(doubleArray63);
        com.operations.Matrix.Matrix matrix67 = com.operations.Matrix.MatrixTransformations.rotate2D((double) (short) 100);
        double[] doubleArray70 = new double[] { 137.90576492663388d, (byte) -1 };
        double[] doubleArray71 = com.operations.Matrix.MatrixSolver.solveGaussian(matrix67, doubleArray70);
        com.operations.Matrix.Matrix matrix72 = com.operations.Matrix.MatrixOperations.add(matrix65, matrix67);
        com.operations.Matrix.Matrix matrix73 = com.operations.Matrix.MatrixOperations.transpose(matrix67);
        com.operations.Matrix.Matrix matrix75 = com.operations.Matrix.MatrixTransformations.rotate2D((double) (short) 100);
        com.operations.Matrix.Matrix matrix76 = com.operations.Matrix.MatrixOperations.subtract(matrix67, matrix75);
        boolean boolean77 = com.operations.Matrix.MatrixUtils.isSymmetric(matrix75);
        com.operations.Matrix.Matrix matrix78 = com.operations.Matrix.MatrixOperations.subtract(matrix39, matrix75);
        com.operations.Matrix.Matrix matrix80 = com.operations.Matrix.MatrixOperations.scalarMultiply(matrix39, (-0.1736481776669303d));
        org.junit.Assert.assertNotNull(matrix2);
        org.junit.Assert.assertNotNull(matrix5);
        org.junit.Assert.assertNotNull(matrix8);
        org.junit.Assert.assertNotNull(matrix9);
        org.junit.Assert.assertNotNull(matrix11);
        org.junit.Assert.assertNotNull(matrix14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 2 + "'", int15 == 2);
        org.junit.Assert.assertNotNull(matrix17);
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 10.0d + "'", double18 == 10.0d);
        org.junit.Assert.assertNotNull(matrix21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 2 + "'", int22 == 2);
        org.junit.Assert.assertNotNull(matrix24);
        org.junit.Assert.assertNotNull(matrix25);
        org.junit.Assert.assertNotNull(matrix26);
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertArrayEquals(doubleArray30, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertArrayEquals(doubleArray33, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertNotNull(matrix36);
        org.junit.Assert.assertNotNull(matrix39);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 2 + "'", int40 == 2);
        org.junit.Assert.assertNotNull(matrix46);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(matrix50);
        org.junit.Assert.assertNotNull(matrix52);
        org.junit.Assert.assertNotNull(matrix53);
        org.junit.Assert.assertNotNull(matrix54);
        org.junit.Assert.assertNotNull(matrix55);
        org.junit.Assert.assertNotNull(matrix56);
        org.junit.Assert.assertNotNull(doubleArray59);
        org.junit.Assert.assertArrayEquals(doubleArray59, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray62);
        org.junit.Assert.assertArrayEquals(doubleArray62, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray63);
        org.junit.Assert.assertNotNull(matrix67);
        org.junit.Assert.assertNotNull(doubleArray70);
        org.junit.Assert.assertArrayEquals(doubleArray70, new double[] { 137.90576492663388d, (-1.0d) }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray71);
        org.junit.Assert.assertArrayEquals(doubleArray71, new double[] { (-24.931892522286255d), (-135.63701830716116d) }, 1.0E-15);
        org.junit.Assert.assertNotNull(matrix72);
        org.junit.Assert.assertNotNull(matrix73);
        org.junit.Assert.assertNotNull(matrix75);
        org.junit.Assert.assertNotNull(matrix76);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertNotNull(matrix78);
        org.junit.Assert.assertNotNull(matrix80);
    }

    @Test
    public void test4915() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4915");
        com.operations.Matrix.Matrix matrix1 = com.operations.Matrix.MatrixTransformations.rotate2D(146.4308710620817d);
        double[][] doubleArray2 = matrix1.getData();
        com.operations.Matrix.Matrix matrix5 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0L, (double) (byte) 10);
        double[] doubleArray8 = new double[] { 10, 'a' };
        double[] doubleArray11 = new double[] { 10, 'a' };
        double[][] doubleArray12 = new double[][] { doubleArray8, doubleArray11 };
        com.operations.Matrix.Matrix matrix13 = new com.operations.Matrix.Matrix(doubleArray12);
        int int14 = matrix13.getCols();
        int int15 = matrix13.getCols();
        int int16 = matrix13.getCols();
        com.operations.Matrix.Matrix[] matrixArray17 = com.operations.Matrix.MatrixDecompositions.luDecomposition(matrix13);
        com.operations.Matrix.Matrix matrix18 = com.operations.Matrix.MatrixOperations.multiply(matrix5, matrix13);
        com.operations.Matrix.Matrix matrix20 = com.operations.Matrix.MatrixTransformations.rotate2D((double) (short) 100);
        boolean boolean22 = com.operations.Matrix.MatrixUtils.compare(matrix13, matrix20, (double) (byte) 0);
        double[] doubleArray25 = new double[] { 10, 'a' };
        double[] doubleArray28 = new double[] { 10, 'a' };
        double[][] doubleArray29 = new double[][] { doubleArray25, doubleArray28 };
        com.operations.Matrix.Matrix matrix30 = new com.operations.Matrix.Matrix(doubleArray29);
        com.operations.Matrix.Matrix matrix31 = new com.operations.Matrix.Matrix(doubleArray29);
        com.operations.Matrix.Matrix matrix32 = new com.operations.Matrix.Matrix(doubleArray29);
        boolean boolean34 = com.operations.Matrix.MatrixUtils.compare(matrix13, matrix32, (double) (-1));
        double[] doubleArray37 = new double[] { 10, 'a' };
        double[] doubleArray40 = new double[] { 10, 'a' };
        double[][] doubleArray41 = new double[][] { doubleArray37, doubleArray40 };
        com.operations.Matrix.Matrix matrix42 = new com.operations.Matrix.Matrix(doubleArray41);
        com.operations.Matrix.Matrix matrix43 = new com.operations.Matrix.Matrix(doubleArray41);
        boolean boolean44 = com.operations.Matrix.MatrixUtils.isSquare(matrix43);
        com.operations.Matrix.Matrix matrix45 = com.operations.Matrix.MatrixOperations.multiply(matrix32, matrix43);
        double[][] doubleArray46 = matrix43.getData();
        com.operations.Matrix.Matrix matrix47 = new com.operations.Matrix.Matrix(doubleArray46);
        com.operations.Matrix.Matrix matrix48 = new com.operations.Matrix.Matrix(doubleArray46);
        com.operations.Matrix.Matrix matrix49 = new com.operations.Matrix.Matrix(doubleArray46);
        com.operations.Matrix.Matrix matrix51 = com.operations.Matrix.MatrixOperations.scalarMultiply(matrix49, (double) 'a');
        com.operations.Matrix.Matrix matrix52 = com.operations.Matrix.MatrixOperations.add(matrix1, matrix49);
        double[] doubleArray55 = new double[] { 10, 'a' };
        double[] doubleArray58 = new double[] { 10, 'a' };
        double[][] doubleArray59 = new double[][] { doubleArray55, doubleArray58 };
        com.operations.Matrix.Matrix matrix60 = new com.operations.Matrix.Matrix(doubleArray59);
        int int61 = matrix60.getCols();
        int int62 = matrix60.getCols();
        boolean boolean63 = com.operations.Matrix.MatrixUtils.isSquare(matrix60);
        com.operations.Matrix.Matrix matrix64 = com.operations.Matrix.MatrixDecompositions.choleskyDecomposition(matrix60);
        com.operations.Matrix.Matrix matrix67 = com.operations.Matrix.MatrixTransformations.project2D(0.0d, (double) 0);
        com.operations.Matrix.Matrix matrix68 = com.operations.Matrix.MatrixOperations.subtract(matrix64, matrix67);
        com.operations.Matrix.Matrix matrix69 = com.operations.Matrix.MatrixOperations.transpose(matrix67);
        com.operations.Matrix.Matrix matrix70 = com.operations.Matrix.MatrixOperations.add(matrix52, matrix67);
        matrix52.print();
        org.junit.Assert.assertNotNull(matrix1);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertNotNull(matrix5);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertArrayEquals(doubleArray8, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertArrayEquals(doubleArray11, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 2 + "'", int14 == 2);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 2 + "'", int15 == 2);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 2 + "'", int16 == 2);
        org.junit.Assert.assertNotNull(matrixArray17);
        org.junit.Assert.assertNotNull(matrix18);
        org.junit.Assert.assertNotNull(matrix20);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertArrayEquals(doubleArray25, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertArrayEquals(doubleArray28, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertArrayEquals(doubleArray37, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertArrayEquals(doubleArray40, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertNotNull(matrix45);
        org.junit.Assert.assertNotNull(doubleArray46);
        org.junit.Assert.assertNotNull(matrix51);
        org.junit.Assert.assertNotNull(matrix52);
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertArrayEquals(doubleArray55, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray58);
        org.junit.Assert.assertArrayEquals(doubleArray58, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray59);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 2 + "'", int61 == 2);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 2 + "'", int62 == 2);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + true + "'", boolean63 == true);
        org.junit.Assert.assertNotNull(matrix64);
        org.junit.Assert.assertNotNull(matrix67);
        org.junit.Assert.assertNotNull(matrix68);
        org.junit.Assert.assertNotNull(matrix69);
        org.junit.Assert.assertNotNull(matrix70);
    }

    @Test
    public void test4916() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4916");
        com.operations.Matrix.Matrix matrix4 = com.operations.Matrix.MatrixUtils.generateRandomMatrix(1, 10, 52, (int) (short) 10);
        int int5 = matrix4.getRows();
        org.junit.Assert.assertNotNull(matrix4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
    }

    @Test
    public void test4917() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4917");
        com.operations.Matrix.Matrix matrix2 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0L, (double) (byte) 10);
        double[] doubleArray5 = new double[] { 10, 'a' };
        double[] doubleArray8 = new double[] { 10, 'a' };
        double[][] doubleArray9 = new double[][] { doubleArray5, doubleArray8 };
        com.operations.Matrix.Matrix matrix10 = new com.operations.Matrix.Matrix(doubleArray9);
        int int11 = matrix10.getCols();
        int int12 = matrix10.getCols();
        int int13 = matrix10.getCols();
        com.operations.Matrix.Matrix[] matrixArray14 = com.operations.Matrix.MatrixDecompositions.luDecomposition(matrix10);
        com.operations.Matrix.Matrix matrix15 = com.operations.Matrix.MatrixOperations.multiply(matrix2, matrix10);
        com.operations.Matrix.Matrix matrix17 = com.operations.Matrix.MatrixTransformations.rotate2D((double) (short) 100);
        boolean boolean19 = com.operations.Matrix.MatrixUtils.compare(matrix10, matrix17, (double) (byte) 0);
        boolean boolean20 = com.operations.Matrix.MatrixUtils.isSymmetric(matrix17);
        boolean boolean21 = com.operations.Matrix.MatrixUtils.isSquare(matrix17);
        com.operations.Matrix.Matrix matrix22 = null;
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean24 = com.operations.Matrix.MatrixUtils.compare(matrix17, matrix22, 137.90576492663385d);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(matrix2);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertArrayEquals(doubleArray5, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertArrayEquals(doubleArray8, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 2 + "'", int11 == 2);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 2 + "'", int12 == 2);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 2 + "'", int13 == 2);
        org.junit.Assert.assertNotNull(matrixArray14);
        org.junit.Assert.assertNotNull(matrix15);
        org.junit.Assert.assertNotNull(matrix17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
    }

    @Test
    public void test4918() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4918");
        com.operations.Matrix.Matrix matrix2 = new com.operations.Matrix.Matrix(100, (int) 'a');
        java.lang.Class<?> wildcardClass3 = matrix2.getClass();
        org.junit.Assert.assertNotNull(wildcardClass3);
    }

    @Test
    public void test4919() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4919");
        com.operations.Matrix.Matrix matrix1 = com.operations.Matrix.MatrixTransformations.rotate2D((double) 1.0f);
        com.operations.Matrix.Matrix matrix4 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0L, (double) (byte) 10);
        int int5 = matrix4.getRows();
        com.operations.Matrix.Matrix matrix7 = com.operations.Matrix.MatrixOperations.scalarMultiply(matrix4, (double) 2);
        double double8 = com.operations.Matrix.MatrixUtils.frobeniusNorm(matrix4);
        com.operations.Matrix.Matrix matrix11 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0L, (double) (byte) 10);
        int int12 = matrix11.getRows();
        com.operations.Matrix.Matrix matrix14 = com.operations.Matrix.MatrixOperations.scalarMultiply(matrix11, (double) 2);
        com.operations.Matrix.Matrix matrix15 = com.operations.Matrix.MatrixOperations.subtract(matrix4, matrix14);
        com.operations.Matrix.Matrix matrix16 = com.operations.Matrix.MatrixOperations.add(matrix1, matrix14);
        matrix1.print();
        double[] doubleArray20 = new double[] { 10, 'a' };
        double[] doubleArray23 = new double[] { 10, 'a' };
        double[][] doubleArray24 = new double[][] { doubleArray20, doubleArray23 };
        com.operations.Matrix.Matrix matrix25 = new com.operations.Matrix.Matrix(doubleArray24);
        com.operations.Matrix.Matrix matrix26 = com.operations.Matrix.MatrixOperations.transpose(matrix25);
        com.operations.Matrix.Matrix matrix29 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0L, (double) (byte) 10);
        int int30 = matrix29.getRows();
        com.operations.Matrix.Matrix matrix36 = com.operations.Matrix.MatrixUtils.generateRandomMatrix(100, (int) (byte) 1, (int) '#', (int) '#', 1L);
        boolean boolean38 = com.operations.Matrix.MatrixUtils.compare(matrix29, matrix36, (double) 1.0f);
        com.operations.Matrix.Matrix matrix40 = com.operations.Matrix.MatrixOperations.scalarMultiply(matrix29, (double) 1L);
        matrix29.print();
        com.operations.Matrix.Matrix matrix42 = com.operations.Matrix.MatrixOperations.multiply(matrix26, matrix29);
        com.operations.Matrix.Matrix matrix43 = com.operations.Matrix.MatrixOperations.multiply(matrix1, matrix29);
        int int44 = matrix29.getCols();
        boolean boolean45 = com.operations.Matrix.MatrixUtils.isSymmetric(matrix29);
        org.junit.Assert.assertNotNull(matrix1);
        org.junit.Assert.assertNotNull(matrix4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 2 + "'", int5 == 2);
        org.junit.Assert.assertNotNull(matrix7);
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 10.0d + "'", double8 == 10.0d);
        org.junit.Assert.assertNotNull(matrix11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 2 + "'", int12 == 2);
        org.junit.Assert.assertNotNull(matrix14);
        org.junit.Assert.assertNotNull(matrix15);
        org.junit.Assert.assertNotNull(matrix16);
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertArrayEquals(doubleArray20, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertArrayEquals(doubleArray23, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertNotNull(matrix26);
        org.junit.Assert.assertNotNull(matrix29);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 2 + "'", int30 == 2);
        org.junit.Assert.assertNotNull(matrix36);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(matrix40);
        org.junit.Assert.assertNotNull(matrix42);
        org.junit.Assert.assertNotNull(matrix43);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 2 + "'", int44 == 2);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
    }

    @Test
    public void test4920() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4920");
        com.operations.Matrix.Matrix matrix2 = new com.operations.Matrix.Matrix((int) (short) 100, (int) '4');
        boolean boolean3 = com.operations.Matrix.MatrixUtils.isSymmetric(matrix2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
    }

    @Test
    public void test4921() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4921");
        com.operations.Matrix.Matrix matrix2 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0L, (double) (byte) 10);
        int int3 = matrix2.getRows();
        com.operations.Matrix.Matrix matrix9 = com.operations.Matrix.MatrixUtils.generateRandomMatrix(100, (int) (byte) 1, (int) '#', (int) '#', 1L);
        boolean boolean11 = com.operations.Matrix.MatrixUtils.compare(matrix2, matrix9, (double) 1.0f);
        int int12 = matrix2.getCols();
        com.operations.Matrix.Matrix matrix14 = com.operations.Matrix.MatrixTransformations.rotate2D((double) (short) 100);
        double[] doubleArray17 = new double[] { 137.90576492663388d, (byte) -1 };
        double[] doubleArray18 = com.operations.Matrix.MatrixSolver.solveGaussian(matrix14, doubleArray17);
        com.operations.Matrix.Matrix matrix21 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0L, (double) (byte) 10);
        double[] doubleArray24 = new double[] { 10, 'a' };
        double[] doubleArray27 = new double[] { 10, 'a' };
        double[][] doubleArray28 = new double[][] { doubleArray24, doubleArray27 };
        com.operations.Matrix.Matrix matrix29 = new com.operations.Matrix.Matrix(doubleArray28);
        int int30 = matrix29.getCols();
        int int31 = matrix29.getCols();
        int int32 = matrix29.getCols();
        com.operations.Matrix.Matrix[] matrixArray33 = com.operations.Matrix.MatrixDecompositions.luDecomposition(matrix29);
        com.operations.Matrix.Matrix matrix34 = com.operations.Matrix.MatrixOperations.multiply(matrix21, matrix29);
        boolean boolean36 = com.operations.Matrix.MatrixUtils.compare(matrix14, matrix21, (double) (-1L));
        boolean boolean38 = com.operations.Matrix.MatrixUtils.compare(matrix2, matrix14, (double) 'a');
        int int39 = matrix2.getCols();
        com.operations.Matrix.Matrix matrix40 = com.operations.Matrix.MatrixOperations.transpose(matrix2);
        com.operations.Matrix.Matrix matrix43 = com.operations.Matrix.MatrixTransformations.project2D(1480.1439709090816d, 98.33107342035883d);
        com.operations.Matrix.Matrix matrix44 = com.operations.Matrix.MatrixOperations.add(matrix2, matrix43);
        org.junit.Assert.assertNotNull(matrix2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 2 + "'", int3 == 2);
        org.junit.Assert.assertNotNull(matrix9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 2 + "'", int12 == 2);
        org.junit.Assert.assertNotNull(matrix14);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertArrayEquals(doubleArray17, new double[] { 137.90576492663388d, (-1.0d) }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertArrayEquals(doubleArray18, new double[] { (-24.931892522286255d), (-135.63701830716116d) }, 1.0E-15);
        org.junit.Assert.assertNotNull(matrix21);
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertArrayEquals(doubleArray24, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertArrayEquals(doubleArray27, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 2 + "'", int30 == 2);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 2 + "'", int31 == 2);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 2 + "'", int32 == 2);
        org.junit.Assert.assertNotNull(matrixArray33);
        org.junit.Assert.assertNotNull(matrix34);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 2 + "'", int39 == 2);
        org.junit.Assert.assertNotNull(matrix40);
        org.junit.Assert.assertNotNull(matrix43);
        org.junit.Assert.assertNotNull(matrix44);
    }

    @Test
    public void test4922() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4922");
        // The following exception was thrown during execution in test generation
        try {
            com.operations.Matrix.Matrix matrix4 = com.operations.Matrix.MatrixUtils.generateRandomMatrix((int) (byte) -1, (int) (short) -1, (int) '4', (int) (short) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.NegativeArraySizeException; message: -1");
        } catch (java.lang.NegativeArraySizeException e) {
            // Expected exception.
        }
    }

    @Test
    public void test4923() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4923");
        double[] doubleArray2 = new double[] { 10, 'a' };
        double[] doubleArray5 = new double[] { 10, 'a' };
        double[][] doubleArray6 = new double[][] { doubleArray2, doubleArray5 };
        com.operations.Matrix.Matrix matrix7 = new com.operations.Matrix.Matrix(doubleArray6);
        com.operations.Matrix.Matrix matrix8 = new com.operations.Matrix.Matrix(doubleArray6);
        com.operations.Matrix.Matrix[] matrixArray9 = com.operations.Matrix.MatrixDecompositions.luDecomposition(matrix8);
        double double10 = com.operations.Matrix.MatrixUtils.frobeniusNorm(matrix8);
        double[] doubleArray13 = new double[] { 10, 'a' };
        double[] doubleArray16 = new double[] { 10, 'a' };
        double[][] doubleArray17 = new double[][] { doubleArray13, doubleArray16 };
        com.operations.Matrix.Matrix matrix18 = new com.operations.Matrix.Matrix(doubleArray17);
        com.operations.Matrix.Matrix matrix19 = new com.operations.Matrix.Matrix(doubleArray17);
        boolean boolean20 = com.operations.Matrix.MatrixUtils.isSquare(matrix19);
        double[] doubleArray23 = new double[] { 10, 'a' };
        double[] doubleArray26 = new double[] { 10, 'a' };
        double[][] doubleArray27 = new double[][] { doubleArray23, doubleArray26 };
        com.operations.Matrix.Matrix matrix28 = new com.operations.Matrix.Matrix(doubleArray27);
        int int29 = matrix28.getCols();
        int int30 = matrix28.getCols();
        matrix28.print();
        double[] doubleArray34 = new double[] { 10, 'a' };
        double[] doubleArray37 = new double[] { 10, 'a' };
        double[][] doubleArray38 = new double[][] { doubleArray34, doubleArray37 };
        com.operations.Matrix.Matrix matrix39 = new com.operations.Matrix.Matrix(doubleArray38);
        boolean boolean41 = com.operations.Matrix.MatrixUtils.compare(matrix28, matrix39, (double) (-1));
        com.operations.Matrix.Matrix matrix42 = com.operations.Matrix.MatrixOperations.subtract(matrix19, matrix39);
        com.operations.Matrix.Matrix[] matrixArray43 = com.operations.Matrix.MatrixDecompositions.luDecomposition(matrix42);
        double[][] doubleArray44 = matrix42.getData();
        com.operations.Matrix.Matrix matrix47 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0L, (double) (byte) 10);
        double[] doubleArray50 = new double[] { 10, 'a' };
        double[] doubleArray53 = new double[] { 10, 'a' };
        double[][] doubleArray54 = new double[][] { doubleArray50, doubleArray53 };
        com.operations.Matrix.Matrix matrix55 = new com.operations.Matrix.Matrix(doubleArray54);
        int int56 = matrix55.getCols();
        int int57 = matrix55.getCols();
        int int58 = matrix55.getCols();
        com.operations.Matrix.Matrix[] matrixArray59 = com.operations.Matrix.MatrixDecompositions.luDecomposition(matrix55);
        com.operations.Matrix.Matrix matrix60 = com.operations.Matrix.MatrixOperations.multiply(matrix47, matrix55);
        int int61 = matrix55.getRows();
        com.operations.Matrix.Matrix matrix62 = com.operations.Matrix.MatrixOperations.multiply(matrix42, matrix55);
        boolean boolean64 = com.operations.Matrix.MatrixUtils.compare(matrix8, matrix62, (double) 2);
        com.operations.Matrix.Matrix matrix65 = com.operations.Matrix.MatrixOperations.transpose(matrix62);
        com.operations.Matrix.Matrix matrix68 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0L, (double) (byte) 10);
        double[] doubleArray71 = new double[] { 10, 'a' };
        double[] doubleArray74 = new double[] { 10, 'a' };
        double[][] doubleArray75 = new double[][] { doubleArray71, doubleArray74 };
        com.operations.Matrix.Matrix matrix76 = new com.operations.Matrix.Matrix(doubleArray75);
        int int77 = matrix76.getCols();
        int int78 = matrix76.getCols();
        int int79 = matrix76.getCols();
        com.operations.Matrix.Matrix[] matrixArray80 = com.operations.Matrix.MatrixDecompositions.luDecomposition(matrix76);
        com.operations.Matrix.Matrix matrix81 = com.operations.Matrix.MatrixOperations.multiply(matrix68, matrix76);
        com.operations.Matrix.Matrix matrix83 = com.operations.Matrix.MatrixTransformations.rotate2D((double) (short) 100);
        boolean boolean85 = com.operations.Matrix.MatrixUtils.compare(matrix76, matrix83, (double) (byte) 0);
        boolean boolean86 = com.operations.Matrix.MatrixUtils.isSymmetric(matrix83);
        boolean boolean87 = com.operations.Matrix.MatrixUtils.isSquare(matrix83);
        com.operations.Matrix.Matrix matrix89 = com.operations.Matrix.MatrixTransformations.rotate2D((double) (short) 100);
        boolean boolean91 = com.operations.Matrix.MatrixUtils.compare(matrix83, matrix89, (double) (byte) 100);
        com.operations.Matrix.Matrix matrix92 = com.operations.Matrix.MatrixOperations.subtract(matrix65, matrix89);
        com.operations.Matrix.Matrix matrix93 = com.operations.Matrix.MatrixOperations.transpose(matrix89);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertArrayEquals(doubleArray2, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertArrayEquals(doubleArray5, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertNotNull(matrixArray9);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 137.90576492663388d + "'", double10 == 137.90576492663388d);
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertArrayEquals(doubleArray13, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertArrayEquals(doubleArray16, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertArrayEquals(doubleArray23, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertArrayEquals(doubleArray26, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 2 + "'", int29 == 2);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 2 + "'", int30 == 2);
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertArrayEquals(doubleArray34, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertArrayEquals(doubleArray37, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(matrix42);
        org.junit.Assert.assertNotNull(matrixArray43);
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertNotNull(matrix47);
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertArrayEquals(doubleArray50, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertArrayEquals(doubleArray53, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray54);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 2 + "'", int56 == 2);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 2 + "'", int57 == 2);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 2 + "'", int58 == 2);
        org.junit.Assert.assertNotNull(matrixArray59);
        org.junit.Assert.assertNotNull(matrix60);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 2 + "'", int61 == 2);
        org.junit.Assert.assertNotNull(matrix62);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertNotNull(matrix65);
        org.junit.Assert.assertNotNull(matrix68);
        org.junit.Assert.assertNotNull(doubleArray71);
        org.junit.Assert.assertArrayEquals(doubleArray71, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray74);
        org.junit.Assert.assertArrayEquals(doubleArray74, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray75);
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + 2 + "'", int77 == 2);
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + 2 + "'", int78 == 2);
        org.junit.Assert.assertTrue("'" + int79 + "' != '" + 2 + "'", int79 == 2);
        org.junit.Assert.assertNotNull(matrixArray80);
        org.junit.Assert.assertNotNull(matrix81);
        org.junit.Assert.assertNotNull(matrix83);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + true + "'", boolean87 == true);
        org.junit.Assert.assertNotNull(matrix89);
        org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + true + "'", boolean91 == true);
        org.junit.Assert.assertNotNull(matrix92);
        org.junit.Assert.assertNotNull(matrix93);
    }

    @Test
    public void test4924() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4924");
        com.operations.Matrix.Matrix matrix2 = com.operations.Matrix.MatrixTransformations.project2D(10.0d, (double) 1);
        double[][] doubleArray3 = matrix2.getData();
        com.operations.Matrix.Matrix matrix4 = new com.operations.Matrix.Matrix(doubleArray3);
        com.operations.Matrix.Matrix matrix5 = new com.operations.Matrix.Matrix(doubleArray3);
        com.operations.Matrix.Matrix matrix6 = new com.operations.Matrix.Matrix(doubleArray3);
        org.junit.Assert.assertNotNull(matrix2);
        org.junit.Assert.assertNotNull(doubleArray3);
    }

    @Test
    public void test4925() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4925");
        com.operations.Matrix.Matrix matrix2 = com.operations.Matrix.MatrixTransformations.project2D((double) 10.0f, (double) (byte) -1);
        com.operations.Matrix.Matrix matrix5 = com.operations.Matrix.MatrixTransformations.scale2D((double) (byte) 1, (double) 35);
        com.operations.Matrix.Matrix[] matrixArray6 = com.operations.Matrix.MatrixDecompositions.luDecomposition(matrix5);
        com.operations.Matrix.Matrix matrix9 = com.operations.Matrix.MatrixTransformations.scale2D((double) 100.0f, (double) (byte) 1);
        com.operations.Matrix.Matrix matrix12 = com.operations.Matrix.MatrixTransformations.scale2D((double) 1.0f, (double) 1);
        com.operations.Matrix.Matrix matrix14 = com.operations.Matrix.MatrixTransformations.rotate2D((double) 1.0f);
        com.operations.Matrix.Matrix matrix17 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0L, (double) (byte) 10);
        int int18 = matrix17.getRows();
        com.operations.Matrix.Matrix matrix20 = com.operations.Matrix.MatrixOperations.scalarMultiply(matrix17, (double) 2);
        double double21 = com.operations.Matrix.MatrixUtils.frobeniusNorm(matrix17);
        com.operations.Matrix.Matrix matrix24 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0L, (double) (byte) 10);
        int int25 = matrix24.getRows();
        com.operations.Matrix.Matrix matrix27 = com.operations.Matrix.MatrixOperations.scalarMultiply(matrix24, (double) 2);
        com.operations.Matrix.Matrix matrix28 = com.operations.Matrix.MatrixOperations.subtract(matrix17, matrix27);
        com.operations.Matrix.Matrix matrix29 = com.operations.Matrix.MatrixOperations.add(matrix14, matrix27);
        boolean boolean31 = com.operations.Matrix.MatrixUtils.compare(matrix12, matrix14, (double) (byte) -1);
        com.operations.Matrix.Matrix matrix32 = com.operations.Matrix.MatrixOperations.transpose(matrix14);
        com.operations.Matrix.Matrix matrix35 = com.operations.Matrix.MatrixTransformations.project2D((double) 10L, 10.0d);
        com.operations.Matrix.Matrix matrix37 = com.operations.Matrix.MatrixTransformations.rotate2D((double) (short) 100);
        double[] doubleArray40 = new double[] { 137.90576492663388d, (byte) -1 };
        double[] doubleArray41 = com.operations.Matrix.MatrixSolver.solveGaussian(matrix37, doubleArray40);
        com.operations.Matrix.Matrix matrix44 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0L, (double) (byte) 10);
        double[] doubleArray47 = new double[] { 10, 'a' };
        double[] doubleArray50 = new double[] { 10, 'a' };
        double[][] doubleArray51 = new double[][] { doubleArray47, doubleArray50 };
        com.operations.Matrix.Matrix matrix52 = new com.operations.Matrix.Matrix(doubleArray51);
        int int53 = matrix52.getCols();
        int int54 = matrix52.getCols();
        int int55 = matrix52.getCols();
        com.operations.Matrix.Matrix[] matrixArray56 = com.operations.Matrix.MatrixDecompositions.luDecomposition(matrix52);
        com.operations.Matrix.Matrix matrix57 = com.operations.Matrix.MatrixOperations.multiply(matrix44, matrix52);
        boolean boolean59 = com.operations.Matrix.MatrixUtils.compare(matrix37, matrix44, (double) (-1L));
        double[][] doubleArray60 = matrix37.getData();
        com.operations.Matrix.Matrix matrix62 = com.operations.Matrix.MatrixTransformations.rotate2D((double) (short) 100);
        double[] doubleArray65 = new double[] { 137.90576492663388d, (byte) -1 };
        double[] doubleArray66 = com.operations.Matrix.MatrixSolver.solveGaussian(matrix62, doubleArray65);
        double[] doubleArray67 = com.operations.Matrix.MatrixSolver.solveGaussian(matrix37, doubleArray65);
        double[] doubleArray68 = com.operations.Matrix.MatrixSolver.solveGaussian(matrix35, doubleArray67);
        double[] doubleArray69 = com.operations.Matrix.MatrixSolver.solveGaussian(matrix14, doubleArray68);
        double[] doubleArray70 = com.operations.Matrix.MatrixSolver.solveGaussian(matrix9, doubleArray69);
        double[] doubleArray71 = com.operations.Matrix.MatrixSolver.solveGaussian(matrix5, doubleArray70);
        double[] doubleArray72 = com.operations.Matrix.MatrixSolver.solveGaussian(matrix2, doubleArray70);
        org.junit.Assert.assertNotNull(matrix2);
        org.junit.Assert.assertNotNull(matrix5);
        org.junit.Assert.assertNotNull(matrixArray6);
        org.junit.Assert.assertNotNull(matrix9);
        org.junit.Assert.assertNotNull(matrix12);
        org.junit.Assert.assertNotNull(matrix14);
        org.junit.Assert.assertNotNull(matrix17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 2 + "'", int18 == 2);
        org.junit.Assert.assertNotNull(matrix20);
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 10.0d + "'", double21 == 10.0d);
        org.junit.Assert.assertNotNull(matrix24);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 2 + "'", int25 == 2);
        org.junit.Assert.assertNotNull(matrix27);
        org.junit.Assert.assertNotNull(matrix28);
        org.junit.Assert.assertNotNull(matrix29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(matrix32);
        org.junit.Assert.assertNotNull(matrix35);
        org.junit.Assert.assertNotNull(matrix37);
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertArrayEquals(doubleArray40, new double[] { 137.90576492663388d, (-1.0d) }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertArrayEquals(doubleArray41, new double[] { (-24.931892522286255d), (-135.63701830716116d) }, 1.0E-15);
        org.junit.Assert.assertNotNull(matrix44);
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertArrayEquals(doubleArray47, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertArrayEquals(doubleArray50, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 2 + "'", int53 == 2);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 2 + "'", int54 == 2);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 2 + "'", int55 == 2);
        org.junit.Assert.assertNotNull(matrixArray56);
        org.junit.Assert.assertNotNull(matrix57);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNotNull(doubleArray60);
        org.junit.Assert.assertNotNull(matrix62);
        org.junit.Assert.assertNotNull(doubleArray65);
        org.junit.Assert.assertArrayEquals(doubleArray65, new double[] { 137.90576492663388d, (-1.0d) }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray66);
        org.junit.Assert.assertArrayEquals(doubleArray66, new double[] { (-24.931892522286255d), (-135.63701830716116d) }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray67);
        org.junit.Assert.assertArrayEquals(doubleArray67, new double[] { (-24.931892522286255d), (-135.63701830716116d) }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray68);
        org.junit.Assert.assertArrayEquals(doubleArray68, new double[] { (-2.4931892522286256d), (-13.563701830716116d) }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray69);
        org.junit.Assert.assertArrayEquals(doubleArray69, new double[] { (-2.7295287645732618d), (-13.518123861075072d) }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray70);
        org.junit.Assert.assertArrayEquals(doubleArray70, new double[] { (-0.027295287645732618d), (-13.518123861075072d) }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray71);
        org.junit.Assert.assertArrayEquals(doubleArray71, new double[] { (-0.027295287645732618d), (-0.3862321103164306d) }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray72);
        org.junit.Assert.assertArrayEquals(doubleArray72, new double[] { (-0.0027295287645732616d), 13.518123861075072d }, 1.0E-15);
    }

    @Test
    public void test4926() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4926");
        com.operations.Matrix.Matrix matrix2 = com.operations.Matrix.MatrixTransformations.scale2D(0.0d, 0.0d);
        com.operations.Matrix.Matrix matrix5 = com.operations.Matrix.MatrixTransformations.scale2D((double) 1, (-1.0d));
        com.operations.Matrix.Matrix matrix8 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0L, (double) (byte) 10);
        double[] doubleArray11 = new double[] { 10, 'a' };
        double[] doubleArray14 = new double[] { 10, 'a' };
        double[][] doubleArray15 = new double[][] { doubleArray11, doubleArray14 };
        com.operations.Matrix.Matrix matrix16 = new com.operations.Matrix.Matrix(doubleArray15);
        int int17 = matrix16.getCols();
        int int18 = matrix16.getCols();
        int int19 = matrix16.getCols();
        com.operations.Matrix.Matrix[] matrixArray20 = com.operations.Matrix.MatrixDecompositions.luDecomposition(matrix16);
        com.operations.Matrix.Matrix matrix21 = com.operations.Matrix.MatrixOperations.multiply(matrix8, matrix16);
        int int22 = matrix16.getRows();
        int int23 = matrix16.getCols();
        com.operations.Matrix.Matrix matrix26 = com.operations.Matrix.MatrixTransformations.project2D((double) (-1L), (double) (short) 100);
        com.operations.Matrix.Matrix matrix27 = com.operations.Matrix.MatrixOperations.subtract(matrix16, matrix26);
        com.operations.Matrix.Matrix matrix28 = com.operations.Matrix.MatrixOperations.add(matrix5, matrix27);
        com.operations.Matrix.Matrix matrix29 = com.operations.Matrix.MatrixOperations.add(matrix2, matrix5);
        com.operations.Matrix.Matrix matrix32 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0L, (double) (byte) 10);
        double[] doubleArray35 = new double[] { 10, 'a' };
        double[] doubleArray38 = new double[] { 10, 'a' };
        double[][] doubleArray39 = new double[][] { doubleArray35, doubleArray38 };
        com.operations.Matrix.Matrix matrix40 = new com.operations.Matrix.Matrix(doubleArray39);
        int int41 = matrix40.getCols();
        int int42 = matrix40.getCols();
        int int43 = matrix40.getCols();
        com.operations.Matrix.Matrix[] matrixArray44 = com.operations.Matrix.MatrixDecompositions.luDecomposition(matrix40);
        com.operations.Matrix.Matrix matrix45 = com.operations.Matrix.MatrixOperations.multiply(matrix32, matrix40);
        com.operations.Matrix.Matrix matrix47 = com.operations.Matrix.MatrixTransformations.rotate2D((double) (short) 100);
        boolean boolean49 = com.operations.Matrix.MatrixUtils.compare(matrix40, matrix47, (double) (byte) 0);
        com.operations.Matrix.Matrix[] matrixArray50 = com.operations.Matrix.MatrixDecompositions.luDecomposition(matrix40);
        com.operations.Matrix.Matrix matrix51 = com.operations.Matrix.MatrixDecompositions.choleskyDecomposition(matrix40);
        com.operations.Matrix.Matrix matrix52 = com.operations.Matrix.MatrixOperations.multiply(matrix29, matrix40);
        int int53 = matrix52.getCols();
        org.junit.Assert.assertNotNull(matrix2);
        org.junit.Assert.assertNotNull(matrix5);
        org.junit.Assert.assertNotNull(matrix8);
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertArrayEquals(doubleArray11, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertArrayEquals(doubleArray14, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 2 + "'", int17 == 2);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 2 + "'", int18 == 2);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 2 + "'", int19 == 2);
        org.junit.Assert.assertNotNull(matrixArray20);
        org.junit.Assert.assertNotNull(matrix21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 2 + "'", int22 == 2);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 2 + "'", int23 == 2);
        org.junit.Assert.assertNotNull(matrix26);
        org.junit.Assert.assertNotNull(matrix27);
        org.junit.Assert.assertNotNull(matrix28);
        org.junit.Assert.assertNotNull(matrix29);
        org.junit.Assert.assertNotNull(matrix32);
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertArrayEquals(doubleArray35, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertArrayEquals(doubleArray38, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 2 + "'", int41 == 2);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 2 + "'", int42 == 2);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 2 + "'", int43 == 2);
        org.junit.Assert.assertNotNull(matrixArray44);
        org.junit.Assert.assertNotNull(matrix45);
        org.junit.Assert.assertNotNull(matrix47);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(matrixArray50);
        org.junit.Assert.assertNotNull(matrix51);
        org.junit.Assert.assertNotNull(matrix52);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 2 + "'", int53 == 2);
    }

    @Test
    public void test4927() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4927");
        com.operations.Matrix.Matrix matrix2 = com.operations.Matrix.MatrixTransformations.scale2D(22.360679774997898d, 340.0d);
        org.junit.Assert.assertNotNull(matrix2);
    }

    @Test
    public void test4928() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4928");
        com.operations.Matrix.Matrix matrix5 = com.operations.Matrix.MatrixUtils.generateRandomMatrix(10, (int) (short) 10, 32, (-1), 0L);
        double[][] doubleArray6 = matrix5.getData();
        double double7 = com.operations.Matrix.MatrixUtils.frobeniusNorm(matrix5);
        double double8 = com.operations.Matrix.MatrixUtils.frobeniusNorm(matrix5);
        com.operations.Matrix.Matrix matrix11 = com.operations.Matrix.MatrixTransformations.project2D(400.0d, 36.40054944640259d);
        // The following exception was thrown during execution in test generation
        try {
            com.operations.Matrix.Matrix matrix12 = com.operations.Matrix.MatrixOperations.add(matrix5, matrix11);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Matrices must have the same dimensions for addition.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(matrix5);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 176.5915398536741d + "'", double7 == 176.5915398536741d);
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 176.5915398536741d + "'", double8 == 176.5915398536741d);
        org.junit.Assert.assertNotNull(matrix11);
    }

    @Test
    public void test4929() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4929");
        com.operations.Matrix.Matrix matrix2 = com.operations.Matrix.MatrixTransformations.scale2D((double) (byte) 10, (double) 10);
        double[] doubleArray5 = new double[] { 10, 'a' };
        double[] doubleArray8 = new double[] { 10, 'a' };
        double[][] doubleArray9 = new double[][] { doubleArray5, doubleArray8 };
        com.operations.Matrix.Matrix matrix10 = new com.operations.Matrix.Matrix(doubleArray9);
        com.operations.Matrix.Matrix matrix11 = new com.operations.Matrix.Matrix(doubleArray9);
        boolean boolean12 = com.operations.Matrix.MatrixUtils.isSquare(matrix11);
        double[] doubleArray15 = new double[] { 10, 'a' };
        double[] doubleArray18 = new double[] { 10, 'a' };
        double[][] doubleArray19 = new double[][] { doubleArray15, doubleArray18 };
        com.operations.Matrix.Matrix matrix20 = new com.operations.Matrix.Matrix(doubleArray19);
        int int21 = matrix20.getCols();
        int int22 = matrix20.getCols();
        matrix20.print();
        double[] doubleArray26 = new double[] { 10, 'a' };
        double[] doubleArray29 = new double[] { 10, 'a' };
        double[][] doubleArray30 = new double[][] { doubleArray26, doubleArray29 };
        com.operations.Matrix.Matrix matrix31 = new com.operations.Matrix.Matrix(doubleArray30);
        boolean boolean33 = com.operations.Matrix.MatrixUtils.compare(matrix20, matrix31, (double) (-1));
        com.operations.Matrix.Matrix matrix34 = com.operations.Matrix.MatrixOperations.subtract(matrix11, matrix31);
        com.operations.Matrix.Matrix[] matrixArray35 = com.operations.Matrix.MatrixDecompositions.luDecomposition(matrix34);
        double[][] doubleArray36 = matrix34.getData();
        com.operations.Matrix.Matrix matrix37 = new com.operations.Matrix.Matrix(doubleArray36);
        com.operations.Matrix.Matrix matrix38 = com.operations.Matrix.MatrixOperations.multiply(matrix2, matrix37);
        boolean boolean39 = com.operations.Matrix.MatrixUtils.isSymmetric(matrix2);
        com.operations.Matrix.Matrix matrix41 = com.operations.Matrix.MatrixTransformations.rotate2D(350.0d);
        com.operations.Matrix.Matrix matrix42 = com.operations.Matrix.MatrixDecompositions.choleskyDecomposition(matrix41);
        int int43 = matrix41.getRows();
        com.operations.Matrix.Matrix matrix44 = com.operations.Matrix.MatrixOperations.subtract(matrix2, matrix41);
        double[] doubleArray47 = new double[] { 10, 'a' };
        double[] doubleArray50 = new double[] { 10, 'a' };
        double[][] doubleArray51 = new double[][] { doubleArray47, doubleArray50 };
        com.operations.Matrix.Matrix matrix52 = new com.operations.Matrix.Matrix(doubleArray51);
        int int53 = matrix52.getCols();
        int int54 = matrix52.getCols();
        boolean boolean55 = com.operations.Matrix.MatrixUtils.isSquare(matrix52);
        com.operations.Matrix.Matrix matrix56 = com.operations.Matrix.MatrixDecompositions.choleskyDecomposition(matrix52);
        com.operations.Matrix.Matrix matrix59 = com.operations.Matrix.MatrixTransformations.project2D(0.0d, (double) 0);
        com.operations.Matrix.Matrix matrix60 = com.operations.Matrix.MatrixOperations.subtract(matrix56, matrix59);
        com.operations.Matrix.Matrix matrix61 = com.operations.Matrix.MatrixOperations.transpose(matrix59);
        com.operations.Matrix.Matrix matrix62 = com.operations.Matrix.MatrixOperations.subtract(matrix2, matrix61);
        com.operations.Matrix.Matrix matrix64 = com.operations.Matrix.MatrixOperations.scalarMultiply(matrix62, (-0.1736481776669303d));
        matrix62.print();
        // The following exception was thrown during execution in test generation
        try {
            matrix62.setValue((int) (byte) 1, (int) '4', 30.0d);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: Index 52 out of bounds for length 2");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(matrix2);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertArrayEquals(doubleArray5, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertArrayEquals(doubleArray8, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertArrayEquals(doubleArray15, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertArrayEquals(doubleArray18, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 2 + "'", int21 == 2);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 2 + "'", int22 == 2);
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertArrayEquals(doubleArray26, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertArrayEquals(doubleArray29, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(matrix34);
        org.junit.Assert.assertNotNull(matrixArray35);
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertNotNull(matrix38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertNotNull(matrix41);
        org.junit.Assert.assertNotNull(matrix42);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 2 + "'", int43 == 2);
        org.junit.Assert.assertNotNull(matrix44);
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertArrayEquals(doubleArray47, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertArrayEquals(doubleArray50, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 2 + "'", int53 == 2);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 2 + "'", int54 == 2);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + true + "'", boolean55 == true);
        org.junit.Assert.assertNotNull(matrix56);
        org.junit.Assert.assertNotNull(matrix59);
        org.junit.Assert.assertNotNull(matrix60);
        org.junit.Assert.assertNotNull(matrix61);
        org.junit.Assert.assertNotNull(matrix62);
        org.junit.Assert.assertNotNull(matrix64);
    }

    @Test
    public void test4930() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4930");
        com.operations.Matrix.Matrix matrix2 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0L, (double) (byte) 10);
        int int3 = matrix2.getRows();
        com.operations.Matrix.Matrix matrix6 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0L, (double) (byte) 10);
        int int7 = matrix6.getRows();
        com.operations.Matrix.Matrix matrix9 = com.operations.Matrix.MatrixOperations.scalarMultiply(matrix6, (double) 2);
        com.operations.Matrix.Matrix matrix10 = com.operations.Matrix.MatrixOperations.subtract(matrix2, matrix6);
        com.operations.Matrix.Matrix matrix13 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0L, (double) (byte) 10);
        int int14 = matrix13.getRows();
        com.operations.Matrix.Matrix matrix20 = com.operations.Matrix.MatrixUtils.generateRandomMatrix(100, (int) (byte) 1, (int) '#', (int) '#', 1L);
        boolean boolean22 = com.operations.Matrix.MatrixUtils.compare(matrix13, matrix20, (double) 1.0f);
        com.operations.Matrix.Matrix matrix24 = com.operations.Matrix.MatrixOperations.scalarMultiply(matrix13, (double) 1L);
        boolean boolean26 = com.operations.Matrix.MatrixUtils.compare(matrix10, matrix24, 0.0d);
        int int27 = matrix24.getCols();
        com.operations.Matrix.Matrix[] matrixArray28 = com.operations.Matrix.MatrixDecompositions.luDecomposition(matrix24);
        com.operations.Matrix.Matrix matrix31 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0L, (double) (byte) 10);
        int int32 = matrix31.getRows();
        com.operations.Matrix.Matrix matrix34 = com.operations.Matrix.MatrixOperations.scalarMultiply(matrix31, (double) 2);
        double double35 = com.operations.Matrix.MatrixUtils.frobeniusNorm(matrix31);
        int int36 = matrix31.getRows();
        com.operations.Matrix.Matrix matrix37 = com.operations.Matrix.MatrixOperations.add(matrix24, matrix31);
        int int38 = matrix37.getRows();
        java.lang.Class<?> wildcardClass39 = matrix37.getClass();
        org.junit.Assert.assertNotNull(matrix2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 2 + "'", int3 == 2);
        org.junit.Assert.assertNotNull(matrix6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 2 + "'", int7 == 2);
        org.junit.Assert.assertNotNull(matrix9);
        org.junit.Assert.assertNotNull(matrix10);
        org.junit.Assert.assertNotNull(matrix13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 2 + "'", int14 == 2);
        org.junit.Assert.assertNotNull(matrix20);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(matrix24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 2 + "'", int27 == 2);
        org.junit.Assert.assertNotNull(matrixArray28);
        org.junit.Assert.assertNotNull(matrix31);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 2 + "'", int32 == 2);
        org.junit.Assert.assertNotNull(matrix34);
        org.junit.Assert.assertTrue("'" + double35 + "' != '" + 10.0d + "'", double35 == 10.0d);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 2 + "'", int36 == 2);
        org.junit.Assert.assertNotNull(matrix37);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 2 + "'", int38 == 2);
        org.junit.Assert.assertNotNull(wildcardClass39);
    }

    @Test
    public void test4931() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4931");
        com.operations.Matrix.Matrix matrix2 = com.operations.Matrix.MatrixTransformations.project2D((double) (-1L), (double) (short) 100);
        double double3 = com.operations.Matrix.MatrixUtils.frobeniusNorm(matrix2);
        com.operations.Matrix.Matrix matrix5 = com.operations.Matrix.MatrixTransformations.rotate2D((double) 1.0f);
        com.operations.Matrix.Matrix matrix8 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0L, (double) (byte) 10);
        int int9 = matrix8.getRows();
        com.operations.Matrix.Matrix matrix11 = com.operations.Matrix.MatrixOperations.scalarMultiply(matrix8, (double) 2);
        double double12 = com.operations.Matrix.MatrixUtils.frobeniusNorm(matrix8);
        com.operations.Matrix.Matrix matrix15 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0L, (double) (byte) 10);
        int int16 = matrix15.getRows();
        com.operations.Matrix.Matrix matrix18 = com.operations.Matrix.MatrixOperations.scalarMultiply(matrix15, (double) 2);
        com.operations.Matrix.Matrix matrix19 = com.operations.Matrix.MatrixOperations.subtract(matrix8, matrix18);
        com.operations.Matrix.Matrix matrix20 = com.operations.Matrix.MatrixOperations.add(matrix5, matrix18);
        matrix5.print();
        double[] doubleArray24 = new double[] { 10, 'a' };
        double[] doubleArray27 = new double[] { 10, 'a' };
        double[][] doubleArray28 = new double[][] { doubleArray24, doubleArray27 };
        com.operations.Matrix.Matrix matrix29 = new com.operations.Matrix.Matrix(doubleArray28);
        com.operations.Matrix.Matrix matrix30 = com.operations.Matrix.MatrixOperations.transpose(matrix29);
        com.operations.Matrix.Matrix matrix33 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0L, (double) (byte) 10);
        int int34 = matrix33.getRows();
        com.operations.Matrix.Matrix matrix40 = com.operations.Matrix.MatrixUtils.generateRandomMatrix(100, (int) (byte) 1, (int) '#', (int) '#', 1L);
        boolean boolean42 = com.operations.Matrix.MatrixUtils.compare(matrix33, matrix40, (double) 1.0f);
        com.operations.Matrix.Matrix matrix44 = com.operations.Matrix.MatrixOperations.scalarMultiply(matrix33, (double) 1L);
        matrix33.print();
        com.operations.Matrix.Matrix matrix46 = com.operations.Matrix.MatrixOperations.multiply(matrix30, matrix33);
        com.operations.Matrix.Matrix matrix47 = com.operations.Matrix.MatrixOperations.multiply(matrix5, matrix33);
        int int48 = matrix33.getRows();
        com.operations.Matrix.Matrix matrix49 = com.operations.Matrix.MatrixOperations.subtract(matrix2, matrix33);
        int int50 = matrix49.getRows();
        double[][] doubleArray51 = matrix49.getData();
        com.operations.Matrix.Matrix matrix52 = new com.operations.Matrix.Matrix(doubleArray51);
        org.junit.Assert.assertNotNull(matrix2);
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + 100.00499987500625d + "'", double3 == 100.00499987500625d);
        org.junit.Assert.assertNotNull(matrix5);
        org.junit.Assert.assertNotNull(matrix8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 2 + "'", int9 == 2);
        org.junit.Assert.assertNotNull(matrix11);
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 10.0d + "'", double12 == 10.0d);
        org.junit.Assert.assertNotNull(matrix15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 2 + "'", int16 == 2);
        org.junit.Assert.assertNotNull(matrix18);
        org.junit.Assert.assertNotNull(matrix19);
        org.junit.Assert.assertNotNull(matrix20);
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertArrayEquals(doubleArray24, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertArrayEquals(doubleArray27, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertNotNull(matrix30);
        org.junit.Assert.assertNotNull(matrix33);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 2 + "'", int34 == 2);
        org.junit.Assert.assertNotNull(matrix40);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(matrix44);
        org.junit.Assert.assertNotNull(matrix46);
        org.junit.Assert.assertNotNull(matrix47);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 2 + "'", int48 == 2);
        org.junit.Assert.assertNotNull(matrix49);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 2 + "'", int50 == 2);
        org.junit.Assert.assertNotNull(doubleArray51);
    }

    @Test
    public void test4932() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4932");
        com.operations.Matrix.Matrix matrix2 = com.operations.Matrix.MatrixTransformations.project2D(10499.52379872535d, 0.0d);
        org.junit.Assert.assertNotNull(matrix2);
    }

    @Test
    public void test4933() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4933");
        com.operations.Matrix.Matrix matrix2 = new com.operations.Matrix.Matrix((int) (byte) 100, (int) (byte) 1);
        com.operations.Matrix.Matrix matrix3 = com.operations.Matrix.MatrixOperations.transpose(matrix2);
        // The following exception was thrown during execution in test generation
        try {
            matrix3.setValue(97, (int) (byte) 1, 146781.22563870353d);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: Index 97 out of bounds for length 1");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(matrix3);
    }

    @Test
    public void test4934() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4934");
        com.operations.Matrix.Matrix matrix2 = com.operations.Matrix.MatrixTransformations.scale2D((double) (-1L), (double) '4');
        com.operations.Matrix.Matrix matrix3 = com.operations.Matrix.MatrixOperations.transpose(matrix2);
        double[] doubleArray6 = new double[] { 10, 'a' };
        double[] doubleArray9 = new double[] { 10, 'a' };
        double[][] doubleArray10 = new double[][] { doubleArray6, doubleArray9 };
        com.operations.Matrix.Matrix matrix11 = new com.operations.Matrix.Matrix(doubleArray10);
        com.operations.Matrix.Matrix matrix12 = new com.operations.Matrix.Matrix(doubleArray10);
        com.operations.Matrix.Matrix matrix14 = com.operations.Matrix.MatrixTransformations.rotate2D((double) (short) 100);
        double[] doubleArray17 = new double[] { 137.90576492663388d, (byte) -1 };
        double[] doubleArray18 = com.operations.Matrix.MatrixSolver.solveGaussian(matrix14, doubleArray17);
        com.operations.Matrix.Matrix matrix19 = com.operations.Matrix.MatrixOperations.add(matrix12, matrix14);
        com.operations.Matrix.Matrix matrix20 = com.operations.Matrix.MatrixOperations.transpose(matrix14);
        com.operations.Matrix.Matrix matrix21 = com.operations.Matrix.MatrixOperations.multiply(matrix3, matrix14);
        com.operations.Matrix.Matrix matrix24 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0L, (double) (byte) 10);
        int int25 = matrix24.getRows();
        com.operations.Matrix.Matrix matrix27 = com.operations.Matrix.MatrixOperations.scalarMultiply(matrix24, (double) 2);
        matrix24.print();
        matrix24.print();
        com.operations.Matrix.Matrix matrix30 = com.operations.Matrix.MatrixOperations.add(matrix3, matrix24);
        com.operations.Matrix.Matrix[] matrixArray31 = com.operations.Matrix.MatrixDecompositions.luDecomposition(matrix3);
        com.operations.Matrix.Matrix matrix34 = com.operations.Matrix.MatrixTransformations.project2D((double) (byte) 100, 32.0d);
        double[] doubleArray37 = new double[] { 10, 'a' };
        double[] doubleArray40 = new double[] { 10, 'a' };
        double[][] doubleArray41 = new double[][] { doubleArray37, doubleArray40 };
        com.operations.Matrix.Matrix matrix42 = new com.operations.Matrix.Matrix(doubleArray41);
        int int43 = matrix42.getCols();
        int int44 = matrix42.getCols();
        int int45 = matrix42.getCols();
        com.operations.Matrix.Matrix matrix51 = com.operations.Matrix.MatrixUtils.generateRandomMatrix(100, (int) (byte) 1, (int) '#', (int) '#', 1L);
        double double54 = matrix51.getValue((int) '4', 0);
        double double55 = com.operations.Matrix.MatrixUtils.frobeniusNorm(matrix51);
        boolean boolean56 = com.operations.Matrix.MatrixUtils.isSquare(matrix51);
        boolean boolean58 = com.operations.Matrix.MatrixUtils.compare(matrix42, matrix51, (double) 100L);
        int int59 = matrix42.getCols();
        com.operations.Matrix.Matrix matrix60 = com.operations.Matrix.MatrixOperations.transpose(matrix42);
        boolean boolean62 = com.operations.Matrix.MatrixUtils.compare(matrix34, matrix42, 137.15495886388925d);
        double[] doubleArray65 = new double[] { 10, 'a' };
        double[] doubleArray68 = new double[] { 10, 'a' };
        double[][] doubleArray69 = new double[][] { doubleArray65, doubleArray68 };
        com.operations.Matrix.Matrix matrix70 = new com.operations.Matrix.Matrix(doubleArray69);
        com.operations.Matrix.Matrix matrix71 = new com.operations.Matrix.Matrix(doubleArray69);
        boolean boolean72 = com.operations.Matrix.MatrixUtils.isSquare(matrix71);
        com.operations.Matrix.Matrix matrix74 = com.operations.Matrix.MatrixOperations.scalarMultiply(matrix71, (double) '4');
        com.operations.Matrix.Matrix matrix75 = com.operations.Matrix.MatrixOperations.subtract(matrix34, matrix74);
        com.operations.Matrix.Matrix matrix76 = com.operations.Matrix.MatrixOperations.subtract(matrix3, matrix34);
        int int77 = matrix3.getRows();
        org.junit.Assert.assertNotNull(matrix2);
        org.junit.Assert.assertNotNull(matrix3);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertArrayEquals(doubleArray6, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertArrayEquals(doubleArray9, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertNotNull(matrix14);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertArrayEquals(doubleArray17, new double[] { 137.90576492663388d, (-1.0d) }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertArrayEquals(doubleArray18, new double[] { (-24.931892522286255d), (-135.63701830716116d) }, 1.0E-15);
        org.junit.Assert.assertNotNull(matrix19);
        org.junit.Assert.assertNotNull(matrix20);
        org.junit.Assert.assertNotNull(matrix21);
        org.junit.Assert.assertNotNull(matrix24);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 2 + "'", int25 == 2);
        org.junit.Assert.assertNotNull(matrix27);
        org.junit.Assert.assertNotNull(matrix30);
        org.junit.Assert.assertNotNull(matrixArray31);
        org.junit.Assert.assertNotNull(matrix34);
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertArrayEquals(doubleArray37, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertArrayEquals(doubleArray40, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 2 + "'", int43 == 2);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 2 + "'", int44 == 2);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 2 + "'", int45 == 2);
        org.junit.Assert.assertNotNull(matrix51);
        org.junit.Assert.assertTrue("'" + double54 + "' != '" + 35.0d + "'", double54 == 35.0d);
        org.junit.Assert.assertTrue("'" + double55 + "' != '" + 350.0d + "'", double55 == 350.0d);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 2 + "'", int59 == 2);
        org.junit.Assert.assertNotNull(matrix60);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + true + "'", boolean62 == true);
        org.junit.Assert.assertNotNull(doubleArray65);
        org.junit.Assert.assertArrayEquals(doubleArray65, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray68);
        org.junit.Assert.assertArrayEquals(doubleArray68, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray69);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + true + "'", boolean72 == true);
        org.junit.Assert.assertNotNull(matrix74);
        org.junit.Assert.assertNotNull(matrix75);
        org.junit.Assert.assertNotNull(matrix76);
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + 2 + "'", int77 == 2);
    }

    @Test
    public void test4935() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4935");
        // The following exception was thrown during execution in test generation
        try {
            com.operations.Matrix.Matrix matrix4 = com.operations.Matrix.MatrixUtils.generateRandomMatrix((int) '#', (int) (short) -1, (int) (byte) -1, (int) ' ');
            org.junit.Assert.fail("Expected exception of type java.lang.NegativeArraySizeException; message: -1");
        } catch (java.lang.NegativeArraySizeException e) {
            // Expected exception.
        }
    }

    @Test
    public void test4936() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4936");
        com.operations.Matrix.Matrix matrix2 = com.operations.Matrix.MatrixTransformations.project2D(20.0d, 0.0d);
        int int3 = matrix2.getCols();
        boolean boolean4 = com.operations.Matrix.MatrixUtils.isSymmetric(matrix2);
        org.junit.Assert.assertNotNull(matrix2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 2 + "'", int3 == 2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
    }

    @Test
    public void test4937() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4937");
        // The following exception was thrown during execution in test generation
        try {
            com.operations.Matrix.Matrix matrix5 = com.operations.Matrix.MatrixUtils.generateRandomMatrix(0, 52, (int) (short) 10, 52, (long) '4');
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
    }

    @Test
    public void test4938() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4938");
        double[] doubleArray2 = new double[] { 10, 'a' };
        double[] doubleArray5 = new double[] { 10, 'a' };
        double[][] doubleArray6 = new double[][] { doubleArray2, doubleArray5 };
        com.operations.Matrix.Matrix matrix7 = new com.operations.Matrix.Matrix(doubleArray6);
        int int8 = matrix7.getCols();
        int int9 = matrix7.getCols();
        int int10 = matrix7.getCols();
        com.operations.Matrix.Matrix matrix16 = com.operations.Matrix.MatrixUtils.generateRandomMatrix(100, (int) (byte) 1, (int) '#', (int) '#', 1L);
        double double19 = matrix16.getValue((int) '4', 0);
        double double20 = com.operations.Matrix.MatrixUtils.frobeniusNorm(matrix16);
        boolean boolean21 = com.operations.Matrix.MatrixUtils.isSquare(matrix16);
        boolean boolean23 = com.operations.Matrix.MatrixUtils.compare(matrix7, matrix16, (double) 100L);
        com.operations.Matrix.Matrix matrix25 = com.operations.Matrix.MatrixOperations.scalarMultiply(matrix16, (double) 10L);
        double[][] doubleArray26 = matrix25.getData();
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertArrayEquals(doubleArray2, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertArrayEquals(doubleArray5, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 2 + "'", int8 == 2);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 2 + "'", int9 == 2);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 2 + "'", int10 == 2);
        org.junit.Assert.assertNotNull(matrix16);
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 35.0d + "'", double19 == 35.0d);
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 350.0d + "'", double20 == 350.0d);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(matrix25);
        org.junit.Assert.assertNotNull(doubleArray26);
    }

    @Test
    public void test4939() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4939");
        com.operations.Matrix.Matrix matrix2 = com.operations.Matrix.MatrixTransformations.project2D(0.0d, (double) 0);
        com.operations.Matrix.Matrix[] matrixArray3 = com.operations.Matrix.MatrixDecompositions.luDecomposition(matrix2);
        com.operations.Matrix.Matrix matrix6 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0L, (double) (byte) 10);
        int int7 = matrix6.getRows();
        com.operations.Matrix.Matrix matrix9 = com.operations.Matrix.MatrixOperations.scalarMultiply(matrix6, (double) 2);
        double double10 = com.operations.Matrix.MatrixUtils.frobeniusNorm(matrix6);
        int int11 = matrix6.getRows();
        com.operations.Matrix.Matrix matrix12 = com.operations.Matrix.MatrixOperations.transpose(matrix6);
        com.operations.Matrix.Matrix matrix13 = com.operations.Matrix.MatrixOperations.multiply(matrix2, matrix12);
        boolean boolean14 = com.operations.Matrix.MatrixUtils.isSymmetric(matrix13);
        // The following exception was thrown during execution in test generation
        try {
            com.operations.Matrix.Matrix matrix15 = com.operations.Matrix.MatrixDecompositions.choleskyDecomposition(matrix13);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Matrix is not positive definite.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(matrix2);
        org.junit.Assert.assertNotNull(matrixArray3);
        org.junit.Assert.assertNotNull(matrix6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 2 + "'", int7 == 2);
        org.junit.Assert.assertNotNull(matrix9);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 10.0d + "'", double10 == 10.0d);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 2 + "'", int11 == 2);
        org.junit.Assert.assertNotNull(matrix12);
        org.junit.Assert.assertNotNull(matrix13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
    }

    @Test
    public void test4940() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4940");
        com.operations.Matrix.Matrix matrix1 = com.operations.Matrix.MatrixTransformations.rotate2D((double) (short) 100);
        double[][] doubleArray2 = matrix1.getData();
        com.operations.Matrix.Matrix matrix3 = new com.operations.Matrix.Matrix(doubleArray2);
        com.operations.Matrix.Matrix matrix4 = new com.operations.Matrix.Matrix(doubleArray2);
        boolean boolean5 = com.operations.Matrix.MatrixUtils.isSquare(matrix4);
        com.operations.Matrix.Matrix matrix7 = com.operations.Matrix.MatrixTransformations.rotate2D((double) '4');
        double[] doubleArray10 = new double[] { 10, 'a' };
        double[] doubleArray13 = new double[] { 10, 'a' };
        double[][] doubleArray14 = new double[][] { doubleArray10, doubleArray13 };
        com.operations.Matrix.Matrix matrix15 = new com.operations.Matrix.Matrix(doubleArray14);
        com.operations.Matrix.Matrix matrix16 = new com.operations.Matrix.Matrix(doubleArray14);
        com.operations.Matrix.Matrix matrix18 = com.operations.Matrix.MatrixTransformations.rotate2D((double) (short) 100);
        double[] doubleArray21 = new double[] { 137.90576492663388d, (byte) -1 };
        double[] doubleArray22 = com.operations.Matrix.MatrixSolver.solveGaussian(matrix18, doubleArray21);
        com.operations.Matrix.Matrix matrix23 = com.operations.Matrix.MatrixOperations.add(matrix16, matrix18);
        boolean boolean24 = com.operations.Matrix.MatrixUtils.isSymmetric(matrix23);
        boolean boolean26 = com.operations.Matrix.MatrixUtils.compare(matrix7, matrix23, 364.0054944640259d);
        com.operations.Matrix.Matrix matrix29 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0L, (double) (byte) 10);
        double[] doubleArray32 = new double[] { 10, 'a' };
        double[] doubleArray35 = new double[] { 10, 'a' };
        double[][] doubleArray36 = new double[][] { doubleArray32, doubleArray35 };
        com.operations.Matrix.Matrix matrix37 = new com.operations.Matrix.Matrix(doubleArray36);
        int int38 = matrix37.getCols();
        int int39 = matrix37.getCols();
        int int40 = matrix37.getCols();
        com.operations.Matrix.Matrix[] matrixArray41 = com.operations.Matrix.MatrixDecompositions.luDecomposition(matrix37);
        com.operations.Matrix.Matrix matrix42 = com.operations.Matrix.MatrixOperations.multiply(matrix29, matrix37);
        com.operations.Matrix.Matrix matrix44 = com.operations.Matrix.MatrixTransformations.rotate2D((double) (short) 100);
        boolean boolean46 = com.operations.Matrix.MatrixUtils.compare(matrix37, matrix44, (double) (byte) 0);
        com.operations.Matrix.Matrix[] matrixArray47 = com.operations.Matrix.MatrixDecompositions.luDecomposition(matrix37);
        com.operations.Matrix.Matrix matrix48 = com.operations.Matrix.MatrixOperations.transpose(matrix37);
        com.operations.Matrix.Matrix matrix51 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0L, (double) (byte) 10);
        int int52 = matrix51.getRows();
        com.operations.Matrix.Matrix matrix55 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0L, (double) (byte) 10);
        int int56 = matrix55.getRows();
        com.operations.Matrix.Matrix matrix58 = com.operations.Matrix.MatrixOperations.scalarMultiply(matrix55, (double) 2);
        com.operations.Matrix.Matrix matrix59 = com.operations.Matrix.MatrixOperations.subtract(matrix51, matrix55);
        boolean boolean61 = com.operations.Matrix.MatrixUtils.compare(matrix37, matrix51, (double) ' ');
        boolean boolean63 = com.operations.Matrix.MatrixUtils.compare(matrix23, matrix37, (double) 0L);
        matrix23.print();
        com.operations.Matrix.Matrix matrix65 = com.operations.Matrix.MatrixOperations.multiply(matrix4, matrix23);
        org.junit.Assert.assertNotNull(matrix1);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNotNull(matrix7);
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertArrayEquals(doubleArray10, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertArrayEquals(doubleArray13, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertNotNull(matrix18);
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertArrayEquals(doubleArray21, new double[] { 137.90576492663388d, (-1.0d) }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertArrayEquals(doubleArray22, new double[] { (-24.931892522286255d), (-135.63701830716116d) }, 1.0E-15);
        org.junit.Assert.assertNotNull(matrix23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNotNull(matrix29);
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertArrayEquals(doubleArray32, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertArrayEquals(doubleArray35, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 2 + "'", int38 == 2);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 2 + "'", int39 == 2);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 2 + "'", int40 == 2);
        org.junit.Assert.assertNotNull(matrixArray41);
        org.junit.Assert.assertNotNull(matrix42);
        org.junit.Assert.assertNotNull(matrix44);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(matrixArray47);
        org.junit.Assert.assertNotNull(matrix48);
        org.junit.Assert.assertNotNull(matrix51);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 2 + "'", int52 == 2);
        org.junit.Assert.assertNotNull(matrix55);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 2 + "'", int56 == 2);
        org.junit.Assert.assertNotNull(matrix58);
        org.junit.Assert.assertNotNull(matrix59);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNotNull(matrix65);
    }

    @Test
    public void test4941() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4941");
        com.operations.Matrix.Matrix matrix1 = com.operations.Matrix.MatrixTransformations.rotate2D((double) 1.0f);
        com.operations.Matrix.Matrix matrix4 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0L, (double) (byte) 10);
        int int5 = matrix4.getRows();
        com.operations.Matrix.Matrix matrix7 = com.operations.Matrix.MatrixOperations.scalarMultiply(matrix4, (double) 2);
        boolean boolean9 = com.operations.Matrix.MatrixUtils.compare(matrix1, matrix7, (double) 10.0f);
        com.operations.Matrix.Matrix[] matrixArray10 = com.operations.Matrix.MatrixDecompositions.luDecomposition(matrix7);
        double double11 = com.operations.Matrix.MatrixUtils.frobeniusNorm(matrix7);
        com.operations.Matrix.Matrix matrix14 = com.operations.Matrix.MatrixTransformations.project2D(0.0d, (double) 0);
        com.operations.Matrix.Matrix[] matrixArray15 = com.operations.Matrix.MatrixDecompositions.luDecomposition(matrix14);
        com.operations.Matrix.Matrix matrix18 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0L, (double) (byte) 10);
        int int19 = matrix18.getRows();
        com.operations.Matrix.Matrix matrix21 = com.operations.Matrix.MatrixOperations.scalarMultiply(matrix18, (double) 2);
        double double22 = com.operations.Matrix.MatrixUtils.frobeniusNorm(matrix18);
        int int23 = matrix18.getRows();
        com.operations.Matrix.Matrix matrix24 = com.operations.Matrix.MatrixOperations.transpose(matrix18);
        com.operations.Matrix.Matrix matrix25 = com.operations.Matrix.MatrixOperations.multiply(matrix14, matrix24);
        com.operations.Matrix.Matrix matrix26 = com.operations.Matrix.MatrixOperations.multiply(matrix7, matrix24);
        matrix24.print();
        int int28 = matrix24.getCols();
        // The following exception was thrown during execution in test generation
        try {
            matrix24.setValue((int) '#', (int) (short) 10, 263.29311316552224d);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: Index 35 out of bounds for length 2");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(matrix1);
        org.junit.Assert.assertNotNull(matrix4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 2 + "'", int5 == 2);
        org.junit.Assert.assertNotNull(matrix7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(matrixArray10);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 20.0d + "'", double11 == 20.0d);
        org.junit.Assert.assertNotNull(matrix14);
        org.junit.Assert.assertNotNull(matrixArray15);
        org.junit.Assert.assertNotNull(matrix18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 2 + "'", int19 == 2);
        org.junit.Assert.assertNotNull(matrix21);
        org.junit.Assert.assertTrue("'" + double22 + "' != '" + 10.0d + "'", double22 == 10.0d);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 2 + "'", int23 == 2);
        org.junit.Assert.assertNotNull(matrix24);
        org.junit.Assert.assertNotNull(matrix25);
        org.junit.Assert.assertNotNull(matrix26);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 2 + "'", int28 == 2);
    }

    @Test
    public void test4942() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4942");
        com.operations.Matrix.Matrix matrix4 = com.operations.Matrix.MatrixUtils.generateRandomMatrix(10, 97, 0, (int) ' ');
        // The following exception was thrown during execution in test generation
        try {
            com.operations.Matrix.Matrix matrix5 = com.operations.Matrix.MatrixDecompositions.choleskyDecomposition(matrix4);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Matrix must be square for Cholesky decomposition.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(matrix4);
    }

    @Test
    public void test4943() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4943");
        com.operations.Matrix.Matrix matrix1 = com.operations.Matrix.MatrixTransformations.rotate2D((double) '4');
        double[] doubleArray4 = new double[] { 10, 'a' };
        double[] doubleArray7 = new double[] { 10, 'a' };
        double[][] doubleArray8 = new double[][] { doubleArray4, doubleArray7 };
        com.operations.Matrix.Matrix matrix9 = new com.operations.Matrix.Matrix(doubleArray8);
        com.operations.Matrix.Matrix matrix10 = new com.operations.Matrix.Matrix(doubleArray8);
        com.operations.Matrix.Matrix matrix12 = com.operations.Matrix.MatrixTransformations.rotate2D((double) (short) 100);
        double[] doubleArray15 = new double[] { 137.90576492663388d, (byte) -1 };
        double[] doubleArray16 = com.operations.Matrix.MatrixSolver.solveGaussian(matrix12, doubleArray15);
        com.operations.Matrix.Matrix matrix17 = com.operations.Matrix.MatrixOperations.add(matrix10, matrix12);
        boolean boolean18 = com.operations.Matrix.MatrixUtils.isSymmetric(matrix17);
        boolean boolean20 = com.operations.Matrix.MatrixUtils.compare(matrix1, matrix17, 364.0054944640259d);
        com.operations.Matrix.Matrix[] matrixArray21 = com.operations.Matrix.MatrixDecompositions.luDecomposition(matrix17);
        com.operations.Matrix.Matrix matrix24 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0.0f, 350.0d);
        com.operations.Matrix.Matrix matrix27 = com.operations.Matrix.MatrixTransformations.project2D(0.0d, (double) 0);
        com.operations.Matrix.Matrix[] matrixArray28 = com.operations.Matrix.MatrixDecompositions.luDecomposition(matrix27);
        com.operations.Matrix.Matrix matrix31 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0L, (double) (byte) 10);
        int int32 = matrix31.getRows();
        com.operations.Matrix.Matrix matrix34 = com.operations.Matrix.MatrixOperations.scalarMultiply(matrix31, (double) 2);
        double double35 = com.operations.Matrix.MatrixUtils.frobeniusNorm(matrix31);
        int int36 = matrix31.getRows();
        com.operations.Matrix.Matrix matrix37 = com.operations.Matrix.MatrixOperations.transpose(matrix31);
        com.operations.Matrix.Matrix matrix38 = com.operations.Matrix.MatrixOperations.multiply(matrix27, matrix37);
        com.operations.Matrix.Matrix matrix39 = com.operations.Matrix.MatrixOperations.multiply(matrix24, matrix37);
        double[][] doubleArray40 = matrix39.getData();
        com.operations.Matrix.Matrix matrix41 = new com.operations.Matrix.Matrix(doubleArray40);
        com.operations.Matrix.Matrix matrix42 = new com.operations.Matrix.Matrix(doubleArray40);
        com.operations.Matrix.Matrix matrix43 = com.operations.Matrix.MatrixOperations.subtract(matrix17, matrix42);
        com.operations.Matrix.Matrix matrix46 = com.operations.Matrix.MatrixTransformations.project2D(3.618031071604718d, 100.0d);
        com.operations.Matrix.Matrix matrix47 = com.operations.Matrix.MatrixOperations.add(matrix42, matrix46);
        com.operations.Matrix.Matrix[] matrixArray48 = com.operations.Matrix.MatrixDecompositions.luDecomposition(matrix47);
        org.junit.Assert.assertNotNull(matrix1);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertArrayEquals(doubleArray4, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertArrayEquals(doubleArray7, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertNotNull(matrix12);
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertArrayEquals(doubleArray15, new double[] { 137.90576492663388d, (-1.0d) }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertArrayEquals(doubleArray16, new double[] { (-24.931892522286255d), (-135.63701830716116d) }, 1.0E-15);
        org.junit.Assert.assertNotNull(matrix17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertNotNull(matrixArray21);
        org.junit.Assert.assertNotNull(matrix24);
        org.junit.Assert.assertNotNull(matrix27);
        org.junit.Assert.assertNotNull(matrixArray28);
        org.junit.Assert.assertNotNull(matrix31);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 2 + "'", int32 == 2);
        org.junit.Assert.assertNotNull(matrix34);
        org.junit.Assert.assertTrue("'" + double35 + "' != '" + 10.0d + "'", double35 == 10.0d);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 2 + "'", int36 == 2);
        org.junit.Assert.assertNotNull(matrix37);
        org.junit.Assert.assertNotNull(matrix38);
        org.junit.Assert.assertNotNull(matrix39);
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertNotNull(matrix43);
        org.junit.Assert.assertNotNull(matrix46);
        org.junit.Assert.assertNotNull(matrix47);
        org.junit.Assert.assertNotNull(matrixArray48);
    }

    @Test
    public void test4944() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4944");
        com.operations.Matrix.Matrix matrix2 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0L, (double) (byte) 10);
        double[] doubleArray5 = new double[] { 10, 'a' };
        double[] doubleArray8 = new double[] { 10, 'a' };
        double[][] doubleArray9 = new double[][] { doubleArray5, doubleArray8 };
        com.operations.Matrix.Matrix matrix10 = new com.operations.Matrix.Matrix(doubleArray9);
        int int11 = matrix10.getCols();
        int int12 = matrix10.getCols();
        int int13 = matrix10.getCols();
        com.operations.Matrix.Matrix[] matrixArray14 = com.operations.Matrix.MatrixDecompositions.luDecomposition(matrix10);
        com.operations.Matrix.Matrix matrix15 = com.operations.Matrix.MatrixOperations.multiply(matrix2, matrix10);
        com.operations.Matrix.Matrix matrix17 = com.operations.Matrix.MatrixTransformations.rotate2D((double) (short) 100);
        boolean boolean19 = com.operations.Matrix.MatrixUtils.compare(matrix10, matrix17, (double) (byte) 0);
        com.operations.Matrix.Matrix[] matrixArray20 = com.operations.Matrix.MatrixDecompositions.luDecomposition(matrix10);
        com.operations.Matrix.Matrix matrix21 = com.operations.Matrix.MatrixOperations.transpose(matrix10);
        int int22 = matrix21.getCols();
        double[] doubleArray25 = new double[] { 10, 'a' };
        double[] doubleArray28 = new double[] { 10, 'a' };
        double[][] doubleArray29 = new double[][] { doubleArray25, doubleArray28 };
        com.operations.Matrix.Matrix matrix30 = new com.operations.Matrix.Matrix(doubleArray29);
        com.operations.Matrix.Matrix matrix31 = new com.operations.Matrix.Matrix(doubleArray29);
        boolean boolean32 = com.operations.Matrix.MatrixUtils.isSquare(matrix31);
        double[] doubleArray35 = new double[] { 10, 'a' };
        double[] doubleArray38 = new double[] { 10, 'a' };
        double[][] doubleArray39 = new double[][] { doubleArray35, doubleArray38 };
        com.operations.Matrix.Matrix matrix40 = new com.operations.Matrix.Matrix(doubleArray39);
        int int41 = matrix40.getCols();
        int int42 = matrix40.getCols();
        matrix40.print();
        double[] doubleArray46 = new double[] { 10, 'a' };
        double[] doubleArray49 = new double[] { 10, 'a' };
        double[][] doubleArray50 = new double[][] { doubleArray46, doubleArray49 };
        com.operations.Matrix.Matrix matrix51 = new com.operations.Matrix.Matrix(doubleArray50);
        boolean boolean53 = com.operations.Matrix.MatrixUtils.compare(matrix40, matrix51, (double) (-1));
        com.operations.Matrix.Matrix matrix54 = com.operations.Matrix.MatrixOperations.subtract(matrix31, matrix51);
        com.operations.Matrix.Matrix[] matrixArray55 = com.operations.Matrix.MatrixDecompositions.luDecomposition(matrix54);
        double[][] doubleArray56 = matrix54.getData();
        com.operations.Matrix.Matrix matrix57 = new com.operations.Matrix.Matrix(doubleArray56);
        com.operations.Matrix.Matrix matrix58 = new com.operations.Matrix.Matrix(doubleArray56);
        com.operations.Matrix.Matrix matrix59 = com.operations.Matrix.MatrixOperations.multiply(matrix21, matrix58);
        double[] doubleArray62 = new double[] { 10, 'a' };
        double[] doubleArray65 = new double[] { 10, 'a' };
        double[][] doubleArray66 = new double[][] { doubleArray62, doubleArray65 };
        com.operations.Matrix.Matrix matrix67 = new com.operations.Matrix.Matrix(doubleArray66);
        int int68 = matrix67.getCols();
        int int69 = matrix67.getCols();
        boolean boolean70 = com.operations.Matrix.MatrixUtils.isSquare(matrix67);
        com.operations.Matrix.Matrix matrix71 = com.operations.Matrix.MatrixDecompositions.choleskyDecomposition(matrix67);
        com.operations.Matrix.Matrix matrix74 = com.operations.Matrix.MatrixTransformations.project2D(0.0d, (double) 0);
        com.operations.Matrix.Matrix matrix75 = com.operations.Matrix.MatrixOperations.subtract(matrix71, matrix74);
        com.operations.Matrix.Matrix matrix76 = com.operations.Matrix.MatrixOperations.multiply(matrix59, matrix75);
        com.operations.Matrix.Matrix matrix77 = com.operations.Matrix.MatrixOperations.transpose(matrix75);
        org.junit.Assert.assertNotNull(matrix2);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertArrayEquals(doubleArray5, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertArrayEquals(doubleArray8, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 2 + "'", int11 == 2);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 2 + "'", int12 == 2);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 2 + "'", int13 == 2);
        org.junit.Assert.assertNotNull(matrixArray14);
        org.junit.Assert.assertNotNull(matrix15);
        org.junit.Assert.assertNotNull(matrix17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(matrixArray20);
        org.junit.Assert.assertNotNull(matrix21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 2 + "'", int22 == 2);
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertArrayEquals(doubleArray25, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertArrayEquals(doubleArray28, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertArrayEquals(doubleArray35, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertArrayEquals(doubleArray38, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 2 + "'", int41 == 2);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 2 + "'", int42 == 2);
        org.junit.Assert.assertNotNull(doubleArray46);
        org.junit.Assert.assertArrayEquals(doubleArray46, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertArrayEquals(doubleArray49, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(matrix54);
        org.junit.Assert.assertNotNull(matrixArray55);
        org.junit.Assert.assertNotNull(doubleArray56);
        org.junit.Assert.assertNotNull(matrix59);
        org.junit.Assert.assertNotNull(doubleArray62);
        org.junit.Assert.assertArrayEquals(doubleArray62, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray65);
        org.junit.Assert.assertArrayEquals(doubleArray65, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray66);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 2 + "'", int68 == 2);
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 2 + "'", int69 == 2);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + true + "'", boolean70 == true);
        org.junit.Assert.assertNotNull(matrix71);
        org.junit.Assert.assertNotNull(matrix74);
        org.junit.Assert.assertNotNull(matrix75);
        org.junit.Assert.assertNotNull(matrix76);
        org.junit.Assert.assertNotNull(matrix77);
    }

    @Test
    public void test4945() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4945");
        com.operations.Matrix.Matrix matrix2 = new com.operations.Matrix.Matrix((int) (byte) 1, (int) '#');
        boolean boolean3 = com.operations.Matrix.MatrixUtils.isSymmetric(matrix2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
    }

    @Test
    public void test4946() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4946");
        com.operations.Matrix.Matrix matrix2 = com.operations.Matrix.MatrixTransformations.scale2D(52.952809179494906d, (double) 2);
        org.junit.Assert.assertNotNull(matrix2);
    }

    @Test
    public void test4947() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4947");
        com.operations.Matrix.Matrix matrix2 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0L, (double) (byte) 10);
        int int3 = matrix2.getRows();
        com.operations.Matrix.Matrix matrix9 = com.operations.Matrix.MatrixUtils.generateRandomMatrix(100, (int) (byte) 1, (int) '#', (int) '#', 1L);
        boolean boolean11 = com.operations.Matrix.MatrixUtils.compare(matrix2, matrix9, (double) 1.0f);
        matrix9.print();
        com.operations.Matrix.Matrix matrix13 = com.operations.Matrix.MatrixOperations.transpose(matrix9);
        com.operations.Matrix.Matrix matrix14 = com.operations.Matrix.MatrixOperations.transpose(matrix9);
        double double15 = com.operations.Matrix.MatrixUtils.frobeniusNorm(matrix9);
        com.operations.Matrix.Matrix matrix21 = com.operations.Matrix.MatrixUtils.generateRandomMatrix(100, 1, (-1), (int) (byte) -1, (long) (short) 1);
        com.operations.Matrix.Matrix matrix23 = com.operations.Matrix.MatrixOperations.scalarMultiply(matrix21, (double) (byte) -1);
        com.operations.Matrix.Matrix matrix24 = com.operations.Matrix.MatrixOperations.subtract(matrix9, matrix23);
        com.operations.Matrix.Matrix matrix26 = com.operations.Matrix.MatrixOperations.scalarMultiply(matrix24, 137.90576492663385d);
        int int27 = matrix24.getRows();
        com.operations.Matrix.Matrix matrix30 = new com.operations.Matrix.Matrix(100, (int) ' ');
        double double31 = com.operations.Matrix.MatrixUtils.frobeniusNorm(matrix30);
        double double32 = com.operations.Matrix.MatrixUtils.frobeniusNorm(matrix30);
        // The following exception was thrown during execution in test generation
        try {
            com.operations.Matrix.Matrix matrix33 = com.operations.Matrix.MatrixOperations.multiply(matrix24, matrix30);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Matrix A's columns must match Matrix B's rows for multiplication.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(matrix2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 2 + "'", int3 == 2);
        org.junit.Assert.assertNotNull(matrix9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(matrix13);
        org.junit.Assert.assertNotNull(matrix14);
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 350.0d + "'", double15 == 350.0d);
        org.junit.Assert.assertNotNull(matrix21);
        org.junit.Assert.assertNotNull(matrix23);
        org.junit.Assert.assertNotNull(matrix24);
        org.junit.Assert.assertNotNull(matrix26);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 100 + "'", int27 == 100);
        org.junit.Assert.assertTrue("'" + double31 + "' != '" + 0.0d + "'", double31 == 0.0d);
        org.junit.Assert.assertTrue("'" + double32 + "' != '" + 0.0d + "'", double32 == 0.0d);
    }

    @Test
    public void test4948() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4948");
        com.operations.Matrix.Matrix matrix2 = com.operations.Matrix.MatrixTransformations.scale2D(146.4308710620817d, 640031.99920004d);
        double[][] doubleArray3 = matrix2.getData();
        com.operations.Matrix.Matrix matrix4 = com.operations.Matrix.MatrixOperations.transpose(matrix2);
        org.junit.Assert.assertNotNull(matrix2);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertNotNull(matrix4);
    }

    @Test
    public void test4949() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4949");
        com.operations.Matrix.Matrix matrix2 = com.operations.Matrix.MatrixTransformations.project2D(1.0d, 0.0d);
        com.operations.Matrix.Matrix matrix4 = com.operations.Matrix.MatrixOperations.scalarMultiply(matrix2, 0.0d);
        int int5 = matrix4.getRows();
        org.junit.Assert.assertNotNull(matrix2);
        org.junit.Assert.assertNotNull(matrix4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 2 + "'", int5 == 2);
    }

    @Test
    public void test4950() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4950");
        com.operations.Matrix.Matrix matrix2 = com.operations.Matrix.MatrixTransformations.project2D((double) 100.0f, (double) 10.0f);
        com.operations.Matrix.Matrix matrix3 = null;
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean5 = com.operations.Matrix.MatrixUtils.compare(matrix2, matrix3, 1.6135503908876414d);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(matrix2);
    }

    @Test
    public void test4951() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4951");
        com.operations.Matrix.Matrix matrix4 = com.operations.Matrix.MatrixUtils.generateRandomMatrix(1, 2, 0, 97);
        org.junit.Assert.assertNotNull(matrix4);
    }

    @Test
    public void test4952() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4952");
        double[] doubleArray2 = new double[] { 10, 'a' };
        double[] doubleArray5 = new double[] { 10, 'a' };
        double[][] doubleArray6 = new double[][] { doubleArray2, doubleArray5 };
        com.operations.Matrix.Matrix matrix7 = new com.operations.Matrix.Matrix(doubleArray6);
        int int8 = matrix7.getCols();
        int int9 = matrix7.getCols();
        matrix7.print();
        double[] doubleArray13 = new double[] { 10, 'a' };
        double[] doubleArray16 = new double[] { 10, 'a' };
        double[][] doubleArray17 = new double[][] { doubleArray13, doubleArray16 };
        com.operations.Matrix.Matrix matrix18 = new com.operations.Matrix.Matrix(doubleArray17);
        boolean boolean20 = com.operations.Matrix.MatrixUtils.compare(matrix7, matrix18, (double) (-1));
        com.operations.Matrix.Matrix matrix22 = com.operations.Matrix.MatrixOperations.scalarMultiply(matrix7, 33.52610922848042d);
        com.operations.Matrix.Matrix matrix28 = com.operations.Matrix.MatrixUtils.generateRandomMatrix(2, 0, 1, (int) (byte) 1, (long) (short) 10);
        // The following exception was thrown during execution in test generation
        try {
            com.operations.Matrix.Matrix matrix29 = com.operations.Matrix.MatrixOperations.subtract(matrix7, matrix28);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Matrices must have the same dimensions for subtraction.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertArrayEquals(doubleArray2, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertArrayEquals(doubleArray5, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 2 + "'", int8 == 2);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 2 + "'", int9 == 2);
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertArrayEquals(doubleArray13, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertArrayEquals(doubleArray16, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(matrix22);
        org.junit.Assert.assertNotNull(matrix28);
    }

    @Test
    public void test4953() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4953");
        com.operations.Matrix.Matrix matrix1 = com.operations.Matrix.MatrixTransformations.rotate2D((double) 1.0f);
        com.operations.Matrix.Matrix matrix4 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0L, (double) (byte) 10);
        int int5 = matrix4.getRows();
        com.operations.Matrix.Matrix matrix7 = com.operations.Matrix.MatrixOperations.scalarMultiply(matrix4, (double) 2);
        double double8 = com.operations.Matrix.MatrixUtils.frobeniusNorm(matrix4);
        com.operations.Matrix.Matrix matrix11 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0L, (double) (byte) 10);
        int int12 = matrix11.getRows();
        com.operations.Matrix.Matrix matrix14 = com.operations.Matrix.MatrixOperations.scalarMultiply(matrix11, (double) 2);
        com.operations.Matrix.Matrix matrix15 = com.operations.Matrix.MatrixOperations.subtract(matrix4, matrix14);
        com.operations.Matrix.Matrix matrix16 = com.operations.Matrix.MatrixOperations.add(matrix1, matrix14);
        matrix1.print();
        double[] doubleArray20 = new double[] { 10, 'a' };
        double[] doubleArray23 = new double[] { 10, 'a' };
        double[][] doubleArray24 = new double[][] { doubleArray20, doubleArray23 };
        com.operations.Matrix.Matrix matrix25 = new com.operations.Matrix.Matrix(doubleArray24);
        com.operations.Matrix.Matrix matrix26 = com.operations.Matrix.MatrixOperations.transpose(matrix25);
        com.operations.Matrix.Matrix matrix29 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0L, (double) (byte) 10);
        int int30 = matrix29.getRows();
        com.operations.Matrix.Matrix matrix36 = com.operations.Matrix.MatrixUtils.generateRandomMatrix(100, (int) (byte) 1, (int) '#', (int) '#', 1L);
        boolean boolean38 = com.operations.Matrix.MatrixUtils.compare(matrix29, matrix36, (double) 1.0f);
        com.operations.Matrix.Matrix matrix40 = com.operations.Matrix.MatrixOperations.scalarMultiply(matrix29, (double) 1L);
        matrix29.print();
        com.operations.Matrix.Matrix matrix42 = com.operations.Matrix.MatrixOperations.multiply(matrix26, matrix29);
        com.operations.Matrix.Matrix matrix43 = com.operations.Matrix.MatrixOperations.multiply(matrix1, matrix29);
        com.operations.Matrix.Matrix matrix46 = com.operations.Matrix.MatrixTransformations.project2D((double) 100, 35.0d);
        com.operations.Matrix.Matrix matrix47 = com.operations.Matrix.MatrixOperations.subtract(matrix29, matrix46);
        double[][] doubleArray48 = matrix47.getData();
        com.operations.Matrix.Matrix matrix49 = new com.operations.Matrix.Matrix(doubleArray48);
        org.junit.Assert.assertNotNull(matrix1);
        org.junit.Assert.assertNotNull(matrix4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 2 + "'", int5 == 2);
        org.junit.Assert.assertNotNull(matrix7);
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 10.0d + "'", double8 == 10.0d);
        org.junit.Assert.assertNotNull(matrix11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 2 + "'", int12 == 2);
        org.junit.Assert.assertNotNull(matrix14);
        org.junit.Assert.assertNotNull(matrix15);
        org.junit.Assert.assertNotNull(matrix16);
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertArrayEquals(doubleArray20, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertArrayEquals(doubleArray23, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertNotNull(matrix26);
        org.junit.Assert.assertNotNull(matrix29);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 2 + "'", int30 == 2);
        org.junit.Assert.assertNotNull(matrix36);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(matrix40);
        org.junit.Assert.assertNotNull(matrix42);
        org.junit.Assert.assertNotNull(matrix43);
        org.junit.Assert.assertNotNull(matrix46);
        org.junit.Assert.assertNotNull(matrix47);
        org.junit.Assert.assertNotNull(doubleArray48);
    }

    @Test
    public void test4954() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4954");
        com.operations.Matrix.Matrix matrix2 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0L, (double) (byte) 10);
        double[] doubleArray5 = new double[] { 10, 'a' };
        double[] doubleArray8 = new double[] { 10, 'a' };
        double[][] doubleArray9 = new double[][] { doubleArray5, doubleArray8 };
        com.operations.Matrix.Matrix matrix10 = new com.operations.Matrix.Matrix(doubleArray9);
        int int11 = matrix10.getCols();
        int int12 = matrix10.getCols();
        int int13 = matrix10.getCols();
        com.operations.Matrix.Matrix[] matrixArray14 = com.operations.Matrix.MatrixDecompositions.luDecomposition(matrix10);
        com.operations.Matrix.Matrix matrix15 = com.operations.Matrix.MatrixOperations.multiply(matrix2, matrix10);
        com.operations.Matrix.Matrix matrix17 = com.operations.Matrix.MatrixTransformations.rotate2D((double) (short) 100);
        boolean boolean19 = com.operations.Matrix.MatrixUtils.compare(matrix10, matrix17, (double) (byte) 0);
        double[] doubleArray22 = new double[] { 10, 'a' };
        double[] doubleArray25 = new double[] { 10, 'a' };
        double[][] doubleArray26 = new double[][] { doubleArray22, doubleArray25 };
        com.operations.Matrix.Matrix matrix27 = new com.operations.Matrix.Matrix(doubleArray26);
        com.operations.Matrix.Matrix matrix28 = new com.operations.Matrix.Matrix(doubleArray26);
        com.operations.Matrix.Matrix matrix29 = new com.operations.Matrix.Matrix(doubleArray26);
        boolean boolean31 = com.operations.Matrix.MatrixUtils.compare(matrix10, matrix29, (double) (-1));
        int int32 = matrix29.getCols();
        com.operations.Matrix.Matrix matrix34 = com.operations.Matrix.MatrixOperations.scalarMultiply(matrix29, 104.9952379872535d);
        org.junit.Assert.assertNotNull(matrix2);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertArrayEquals(doubleArray5, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertArrayEquals(doubleArray8, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 2 + "'", int11 == 2);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 2 + "'", int12 == 2);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 2 + "'", int13 == 2);
        org.junit.Assert.assertNotNull(matrixArray14);
        org.junit.Assert.assertNotNull(matrix15);
        org.junit.Assert.assertNotNull(matrix17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertArrayEquals(doubleArray22, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertArrayEquals(doubleArray25, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 2 + "'", int32 == 2);
        org.junit.Assert.assertNotNull(matrix34);
    }

    @Test
    public void test4955() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4955");
        com.operations.Matrix.Matrix matrix5 = com.operations.Matrix.MatrixUtils.generateRandomMatrix(32, (int) '#', 32, 97, (long) 32);
        org.junit.Assert.assertNotNull(matrix5);
    }

    @Test
    public void test4956() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4956");
        double[] doubleArray2 = new double[] { 10, 'a' };
        double[] doubleArray5 = new double[] { 10, 'a' };
        double[][] doubleArray6 = new double[][] { doubleArray2, doubleArray5 };
        com.operations.Matrix.Matrix matrix7 = new com.operations.Matrix.Matrix(doubleArray6);
        com.operations.Matrix.Matrix matrix8 = new com.operations.Matrix.Matrix(doubleArray6);
        boolean boolean9 = com.operations.Matrix.MatrixUtils.isSquare(matrix8);
        double[] doubleArray12 = new double[] { 10, 'a' };
        double[] doubleArray15 = new double[] { 10, 'a' };
        double[][] doubleArray16 = new double[][] { doubleArray12, doubleArray15 };
        com.operations.Matrix.Matrix matrix17 = new com.operations.Matrix.Matrix(doubleArray16);
        int int18 = matrix17.getCols();
        int int19 = matrix17.getCols();
        matrix17.print();
        double[] doubleArray23 = new double[] { 10, 'a' };
        double[] doubleArray26 = new double[] { 10, 'a' };
        double[][] doubleArray27 = new double[][] { doubleArray23, doubleArray26 };
        com.operations.Matrix.Matrix matrix28 = new com.operations.Matrix.Matrix(doubleArray27);
        boolean boolean30 = com.operations.Matrix.MatrixUtils.compare(matrix17, matrix28, (double) (-1));
        com.operations.Matrix.Matrix matrix31 = com.operations.Matrix.MatrixOperations.subtract(matrix8, matrix28);
        com.operations.Matrix.Matrix matrix33 = com.operations.Matrix.MatrixOperations.scalarMultiply(matrix8, (double) 0.0f);
        double[] doubleArray36 = new double[] { 10, 'a' };
        double[] doubleArray39 = new double[] { 10, 'a' };
        double[][] doubleArray40 = new double[][] { doubleArray36, doubleArray39 };
        com.operations.Matrix.Matrix matrix41 = new com.operations.Matrix.Matrix(doubleArray40);
        com.operations.Matrix.Matrix matrix42 = new com.operations.Matrix.Matrix(doubleArray40);
        com.operations.Matrix.Matrix[] matrixArray43 = com.operations.Matrix.MatrixDecompositions.luDecomposition(matrix42);
        com.operations.Matrix.Matrix matrix44 = com.operations.Matrix.MatrixDecompositions.choleskyDecomposition(matrix42);
        int int45 = matrix44.getRows();
        com.operations.Matrix.Matrix matrix46 = com.operations.Matrix.MatrixOperations.subtract(matrix8, matrix44);
        com.operations.Matrix.Matrix matrix49 = com.operations.Matrix.MatrixTransformations.project2D((double) ' ', 0.0d);
        double[] doubleArray52 = new double[] { 10, 'a' };
        double[] doubleArray55 = new double[] { 10, 'a' };
        double[][] doubleArray56 = new double[][] { doubleArray52, doubleArray55 };
        com.operations.Matrix.Matrix matrix57 = new com.operations.Matrix.Matrix(doubleArray56);
        int int58 = matrix57.getCols();
        boolean boolean59 = com.operations.Matrix.MatrixUtils.isSquare(matrix57);
        com.operations.Matrix.Matrix matrix60 = com.operations.Matrix.MatrixOperations.transpose(matrix57);
        int int61 = matrix60.getRows();
        com.operations.Matrix.Matrix matrix64 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0L, (double) (byte) 10);
        double[] doubleArray67 = new double[] { 10, 'a' };
        double[] doubleArray70 = new double[] { 10, 'a' };
        double[][] doubleArray71 = new double[][] { doubleArray67, doubleArray70 };
        com.operations.Matrix.Matrix matrix72 = new com.operations.Matrix.Matrix(doubleArray71);
        int int73 = matrix72.getCols();
        int int74 = matrix72.getCols();
        int int75 = matrix72.getCols();
        com.operations.Matrix.Matrix[] matrixArray76 = com.operations.Matrix.MatrixDecompositions.luDecomposition(matrix72);
        com.operations.Matrix.Matrix matrix77 = com.operations.Matrix.MatrixOperations.multiply(matrix64, matrix72);
        com.operations.Matrix.Matrix matrix79 = com.operations.Matrix.MatrixTransformations.rotate2D((double) (short) 100);
        boolean boolean81 = com.operations.Matrix.MatrixUtils.compare(matrix72, matrix79, (double) (byte) 0);
        com.operations.Matrix.Matrix matrix82 = com.operations.Matrix.MatrixOperations.multiply(matrix60, matrix72);
        com.operations.Matrix.Matrix matrix83 = com.operations.Matrix.MatrixOperations.add(matrix49, matrix72);
        matrix72.print();
        com.operations.Matrix.Matrix[] matrixArray85 = com.operations.Matrix.MatrixDecompositions.luDecomposition(matrix72);
        com.operations.Matrix.Matrix matrix88 = com.operations.Matrix.MatrixTransformations.project2D(137.90576492663388d, 0.0d);
        double[][] doubleArray89 = matrix88.getData();
        com.operations.Matrix.Matrix matrix90 = com.operations.Matrix.MatrixOperations.multiply(matrix72, matrix88);
        com.operations.Matrix.Matrix matrix91 = com.operations.Matrix.MatrixOperations.multiply(matrix46, matrix90);
        int int92 = matrix91.getCols();
        java.lang.Class<?> wildcardClass93 = matrix91.getClass();
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertArrayEquals(doubleArray2, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertArrayEquals(doubleArray5, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertArrayEquals(doubleArray12, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertArrayEquals(doubleArray15, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 2 + "'", int18 == 2);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 2 + "'", int19 == 2);
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertArrayEquals(doubleArray23, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertArrayEquals(doubleArray26, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(matrix31);
        org.junit.Assert.assertNotNull(matrix33);
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertArrayEquals(doubleArray36, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertArrayEquals(doubleArray39, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertNotNull(matrixArray43);
        org.junit.Assert.assertNotNull(matrix44);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 2 + "'", int45 == 2);
        org.junit.Assert.assertNotNull(matrix46);
        org.junit.Assert.assertNotNull(matrix49);
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertArrayEquals(doubleArray52, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertArrayEquals(doubleArray55, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray56);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 2 + "'", int58 == 2);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + true + "'", boolean59 == true);
        org.junit.Assert.assertNotNull(matrix60);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 2 + "'", int61 == 2);
        org.junit.Assert.assertNotNull(matrix64);
        org.junit.Assert.assertNotNull(doubleArray67);
        org.junit.Assert.assertArrayEquals(doubleArray67, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray70);
        org.junit.Assert.assertArrayEquals(doubleArray70, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray71);
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + 2 + "'", int73 == 2);
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 2 + "'", int74 == 2);
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + 2 + "'", int75 == 2);
        org.junit.Assert.assertNotNull(matrixArray76);
        org.junit.Assert.assertNotNull(matrix77);
        org.junit.Assert.assertNotNull(matrix79);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
        org.junit.Assert.assertNotNull(matrix82);
        org.junit.Assert.assertNotNull(matrix83);
        org.junit.Assert.assertNotNull(matrixArray85);
        org.junit.Assert.assertNotNull(matrix88);
        org.junit.Assert.assertNotNull(doubleArray89);
        org.junit.Assert.assertNotNull(matrix90);
        org.junit.Assert.assertNotNull(matrix91);
        org.junit.Assert.assertTrue("'" + int92 + "' != '" + 2 + "'", int92 == 2);
        org.junit.Assert.assertNotNull(wildcardClass93);
    }

    @Test
    public void test4957() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4957");
        com.operations.Matrix.Matrix matrix2 = com.operations.Matrix.MatrixTransformations.project2D(0.0d, 0.0d);
        org.junit.Assert.assertNotNull(matrix2);
    }

    @Test
    public void test4958() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4958");
        com.operations.Matrix.Matrix matrix2 = com.operations.Matrix.MatrixTransformations.scale2D(98.07140255956371d, (double) (byte) 100);
        // The following exception was thrown during execution in test generation
        try {
            double double5 = matrix2.getValue((int) '4', (int) (short) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(matrix2);
    }

    @Test
    public void test4959() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4959");
        com.operations.Matrix.Matrix matrix2 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0L, (double) (byte) 10);
        int int3 = matrix2.getRows();
        com.operations.Matrix.Matrix matrix5 = com.operations.Matrix.MatrixOperations.scalarMultiply(matrix2, (double) 2);
        double double6 = com.operations.Matrix.MatrixUtils.frobeniusNorm(matrix2);
        com.operations.Matrix.Matrix matrix9 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0L, (double) (byte) 10);
        int int10 = matrix9.getRows();
        com.operations.Matrix.Matrix matrix12 = com.operations.Matrix.MatrixOperations.scalarMultiply(matrix9, (double) 2);
        com.operations.Matrix.Matrix matrix13 = com.operations.Matrix.MatrixOperations.subtract(matrix2, matrix12);
        com.operations.Matrix.Matrix matrix15 = com.operations.Matrix.MatrixTransformations.rotate2D((double) (short) 100);
        double[] doubleArray18 = new double[] { 137.90576492663388d, (byte) -1 };
        double[] doubleArray19 = com.operations.Matrix.MatrixSolver.solveGaussian(matrix15, doubleArray18);
        com.operations.Matrix.Matrix matrix22 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0L, (double) (byte) 10);
        double[] doubleArray25 = new double[] { 10, 'a' };
        double[] doubleArray28 = new double[] { 10, 'a' };
        double[][] doubleArray29 = new double[][] { doubleArray25, doubleArray28 };
        com.operations.Matrix.Matrix matrix30 = new com.operations.Matrix.Matrix(doubleArray29);
        int int31 = matrix30.getCols();
        int int32 = matrix30.getCols();
        int int33 = matrix30.getCols();
        com.operations.Matrix.Matrix[] matrixArray34 = com.operations.Matrix.MatrixDecompositions.luDecomposition(matrix30);
        com.operations.Matrix.Matrix matrix35 = com.operations.Matrix.MatrixOperations.multiply(matrix22, matrix30);
        boolean boolean37 = com.operations.Matrix.MatrixUtils.compare(matrix15, matrix22, (double) (-1L));
        double[][] doubleArray38 = matrix15.getData();
        com.operations.Matrix.Matrix matrix41 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0L, (double) 10L);
        boolean boolean43 = com.operations.Matrix.MatrixUtils.compare(matrix15, matrix41, 146.4308710620817d);
        com.operations.Matrix.Matrix matrix44 = com.operations.Matrix.MatrixOperations.subtract(matrix13, matrix41);
        boolean boolean45 = com.operations.Matrix.MatrixUtils.isSymmetric(matrix44);
        double[] doubleArray48 = new double[] { 10, 'a' };
        double[] doubleArray51 = new double[] { 10, 'a' };
        double[][] doubleArray52 = new double[][] { doubleArray48, doubleArray51 };
        com.operations.Matrix.Matrix matrix53 = new com.operations.Matrix.Matrix(doubleArray52);
        com.operations.Matrix.Matrix matrix54 = com.operations.Matrix.MatrixOperations.transpose(matrix53);
        com.operations.Matrix.Matrix matrix57 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0L, (double) (byte) 10);
        int int58 = matrix57.getRows();
        com.operations.Matrix.Matrix matrix64 = com.operations.Matrix.MatrixUtils.generateRandomMatrix(100, (int) (byte) 1, (int) '#', (int) '#', 1L);
        boolean boolean66 = com.operations.Matrix.MatrixUtils.compare(matrix57, matrix64, (double) 1.0f);
        com.operations.Matrix.Matrix matrix68 = com.operations.Matrix.MatrixOperations.scalarMultiply(matrix57, (double) 1L);
        matrix57.print();
        com.operations.Matrix.Matrix matrix70 = com.operations.Matrix.MatrixOperations.multiply(matrix54, matrix57);
        com.operations.Matrix.Matrix matrix71 = com.operations.Matrix.MatrixOperations.transpose(matrix57);
        com.operations.Matrix.Matrix matrix72 = com.operations.Matrix.MatrixOperations.multiply(matrix44, matrix57);
        // The following exception was thrown during execution in test generation
        try {
            com.operations.Matrix.Matrix matrix73 = com.operations.Matrix.MatrixDecompositions.choleskyDecomposition(matrix44);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Matrix is not positive definite.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(matrix2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 2 + "'", int3 == 2);
        org.junit.Assert.assertNotNull(matrix5);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 10.0d + "'", double6 == 10.0d);
        org.junit.Assert.assertNotNull(matrix9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 2 + "'", int10 == 2);
        org.junit.Assert.assertNotNull(matrix12);
        org.junit.Assert.assertNotNull(matrix13);
        org.junit.Assert.assertNotNull(matrix15);
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertArrayEquals(doubleArray18, new double[] { 137.90576492663388d, (-1.0d) }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertArrayEquals(doubleArray19, new double[] { (-24.931892522286255d), (-135.63701830716116d) }, 1.0E-15);
        org.junit.Assert.assertNotNull(matrix22);
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertArrayEquals(doubleArray25, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertArrayEquals(doubleArray28, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 2 + "'", int31 == 2);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 2 + "'", int32 == 2);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 2 + "'", int33 == 2);
        org.junit.Assert.assertNotNull(matrixArray34);
        org.junit.Assert.assertNotNull(matrix35);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertNotNull(matrix41);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertNotNull(matrix44);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertArrayEquals(doubleArray48, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertArrayEquals(doubleArray51, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertNotNull(matrix54);
        org.junit.Assert.assertNotNull(matrix57);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 2 + "'", int58 == 2);
        org.junit.Assert.assertNotNull(matrix64);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertNotNull(matrix68);
        org.junit.Assert.assertNotNull(matrix70);
        org.junit.Assert.assertNotNull(matrix71);
        org.junit.Assert.assertNotNull(matrix72);
    }

    @Test
    public void test4960() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4960");
        com.operations.Matrix.Matrix matrix2 = com.operations.Matrix.MatrixTransformations.scale2D((double) (byte) 10, (double) 10);
        double[] doubleArray5 = new double[] { 10, 'a' };
        double[] doubleArray8 = new double[] { 10, 'a' };
        double[][] doubleArray9 = new double[][] { doubleArray5, doubleArray8 };
        com.operations.Matrix.Matrix matrix10 = new com.operations.Matrix.Matrix(doubleArray9);
        com.operations.Matrix.Matrix matrix11 = new com.operations.Matrix.Matrix(doubleArray9);
        boolean boolean12 = com.operations.Matrix.MatrixUtils.isSquare(matrix11);
        double[] doubleArray15 = new double[] { 10, 'a' };
        double[] doubleArray18 = new double[] { 10, 'a' };
        double[][] doubleArray19 = new double[][] { doubleArray15, doubleArray18 };
        com.operations.Matrix.Matrix matrix20 = new com.operations.Matrix.Matrix(doubleArray19);
        int int21 = matrix20.getCols();
        int int22 = matrix20.getCols();
        matrix20.print();
        double[] doubleArray26 = new double[] { 10, 'a' };
        double[] doubleArray29 = new double[] { 10, 'a' };
        double[][] doubleArray30 = new double[][] { doubleArray26, doubleArray29 };
        com.operations.Matrix.Matrix matrix31 = new com.operations.Matrix.Matrix(doubleArray30);
        boolean boolean33 = com.operations.Matrix.MatrixUtils.compare(matrix20, matrix31, (double) (-1));
        com.operations.Matrix.Matrix matrix34 = com.operations.Matrix.MatrixOperations.subtract(matrix11, matrix31);
        com.operations.Matrix.Matrix[] matrixArray35 = com.operations.Matrix.MatrixDecompositions.luDecomposition(matrix34);
        double[][] doubleArray36 = matrix34.getData();
        com.operations.Matrix.Matrix matrix37 = new com.operations.Matrix.Matrix(doubleArray36);
        com.operations.Matrix.Matrix matrix38 = com.operations.Matrix.MatrixOperations.multiply(matrix2, matrix37);
        com.operations.Matrix.Matrix matrix41 = com.operations.Matrix.MatrixTransformations.scale2D(1.414213562373095d, (double) 1);
        com.operations.Matrix.Matrix matrix42 = com.operations.Matrix.MatrixOperations.add(matrix38, matrix41);
        double[][] doubleArray43 = matrix42.getData();
        double[][] doubleArray44 = matrix42.getData();
        com.operations.Matrix.Matrix matrix45 = new com.operations.Matrix.Matrix(doubleArray44);
        com.operations.Matrix.Matrix matrix46 = new com.operations.Matrix.Matrix(doubleArray44);
        org.junit.Assert.assertNotNull(matrix2);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertArrayEquals(doubleArray5, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertArrayEquals(doubleArray8, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertArrayEquals(doubleArray15, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertArrayEquals(doubleArray18, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 2 + "'", int21 == 2);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 2 + "'", int22 == 2);
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertArrayEquals(doubleArray26, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertArrayEquals(doubleArray29, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(matrix34);
        org.junit.Assert.assertNotNull(matrixArray35);
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertNotNull(matrix38);
        org.junit.Assert.assertNotNull(matrix41);
        org.junit.Assert.assertNotNull(matrix42);
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertNotNull(doubleArray44);
    }

    @Test
    public void test4961() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4961");
        com.operations.Matrix.Matrix matrix2 = com.operations.Matrix.MatrixTransformations.scale2D(52.009614495783374d, (double) 10);
        boolean boolean3 = com.operations.Matrix.MatrixUtils.isSquare(matrix2);
        org.junit.Assert.assertNotNull(matrix2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
    }

    @Test
    public void test4962() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4962");
        com.operations.Matrix.Matrix matrix2 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0L, (double) (byte) 10);
        double[] doubleArray5 = new double[] { 10, 'a' };
        double[] doubleArray8 = new double[] { 10, 'a' };
        double[][] doubleArray9 = new double[][] { doubleArray5, doubleArray8 };
        com.operations.Matrix.Matrix matrix10 = new com.operations.Matrix.Matrix(doubleArray9);
        int int11 = matrix10.getCols();
        int int12 = matrix10.getCols();
        int int13 = matrix10.getCols();
        com.operations.Matrix.Matrix[] matrixArray14 = com.operations.Matrix.MatrixDecompositions.luDecomposition(matrix10);
        com.operations.Matrix.Matrix matrix15 = com.operations.Matrix.MatrixOperations.multiply(matrix2, matrix10);
        com.operations.Matrix.Matrix matrix17 = com.operations.Matrix.MatrixTransformations.rotate2D((double) (short) 100);
        boolean boolean19 = com.operations.Matrix.MatrixUtils.compare(matrix10, matrix17, (double) (byte) 0);
        com.operations.Matrix.Matrix[] matrixArray20 = com.operations.Matrix.MatrixDecompositions.luDecomposition(matrix10);
        com.operations.Matrix.Matrix matrix21 = com.operations.Matrix.MatrixOperations.transpose(matrix10);
        com.operations.Matrix.Matrix matrix24 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0L, (double) (byte) 10);
        int int25 = matrix24.getRows();
        com.operations.Matrix.Matrix matrix28 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0L, (double) (byte) 10);
        int int29 = matrix28.getRows();
        com.operations.Matrix.Matrix matrix31 = com.operations.Matrix.MatrixOperations.scalarMultiply(matrix28, (double) 2);
        com.operations.Matrix.Matrix matrix32 = com.operations.Matrix.MatrixOperations.subtract(matrix24, matrix28);
        boolean boolean34 = com.operations.Matrix.MatrixUtils.compare(matrix10, matrix24, (double) ' ');
        double double37 = matrix24.getValue(0, 1);
        org.junit.Assert.assertNotNull(matrix2);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertArrayEquals(doubleArray5, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertArrayEquals(doubleArray8, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 2 + "'", int11 == 2);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 2 + "'", int12 == 2);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 2 + "'", int13 == 2);
        org.junit.Assert.assertNotNull(matrixArray14);
        org.junit.Assert.assertNotNull(matrix15);
        org.junit.Assert.assertNotNull(matrix17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(matrixArray20);
        org.junit.Assert.assertNotNull(matrix21);
        org.junit.Assert.assertNotNull(matrix24);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 2 + "'", int25 == 2);
        org.junit.Assert.assertNotNull(matrix28);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 2 + "'", int29 == 2);
        org.junit.Assert.assertNotNull(matrix31);
        org.junit.Assert.assertNotNull(matrix32);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + double37 + "' != '" + 0.0d + "'", double37 == 0.0d);
    }

    @Test
    public void test4963() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4963");
        com.operations.Matrix.Matrix matrix2 = com.operations.Matrix.MatrixTransformations.scale2D(364.0054944640259d, (double) 100);
        double[][] doubleArray3 = matrix2.getData();
        com.operations.Matrix.Matrix matrix4 = new com.operations.Matrix.Matrix(doubleArray3);
        boolean boolean5 = com.operations.Matrix.MatrixUtils.isSquare(matrix4);
        double[] doubleArray6 = null;
        // The following exception was thrown during execution in test generation
        try {
            double[] doubleArray7 = com.operations.Matrix.MatrixSolver.solveGaussian(matrix4, doubleArray6);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(matrix2);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
    }

    @Test
    public void test4964() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4964");
        com.operations.Matrix.Matrix matrix2 = com.operations.Matrix.MatrixTransformations.project2D(632611.037605257d, 98.33107342035883d);
        org.junit.Assert.assertNotNull(matrix2);
    }

    @Test
    public void test4965() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4965");
        com.operations.Matrix.Matrix matrix2 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0L, (double) (byte) 10);
        double[] doubleArray5 = new double[] { 10, 'a' };
        double[] doubleArray8 = new double[] { 10, 'a' };
        double[][] doubleArray9 = new double[][] { doubleArray5, doubleArray8 };
        com.operations.Matrix.Matrix matrix10 = new com.operations.Matrix.Matrix(doubleArray9);
        int int11 = matrix10.getCols();
        int int12 = matrix10.getCols();
        int int13 = matrix10.getCols();
        com.operations.Matrix.Matrix[] matrixArray14 = com.operations.Matrix.MatrixDecompositions.luDecomposition(matrix10);
        com.operations.Matrix.Matrix matrix15 = com.operations.Matrix.MatrixOperations.multiply(matrix2, matrix10);
        com.operations.Matrix.Matrix matrix17 = com.operations.Matrix.MatrixTransformations.rotate2D((double) (short) 100);
        boolean boolean19 = com.operations.Matrix.MatrixUtils.compare(matrix10, matrix17, (double) (byte) 0);
        com.operations.Matrix.Matrix matrix20 = com.operations.Matrix.MatrixOperations.transpose(matrix10);
        com.operations.Matrix.Matrix matrix21 = com.operations.Matrix.MatrixOperations.transpose(matrix20);
        com.operations.Matrix.Matrix matrix24 = com.operations.Matrix.MatrixTransformations.project2D((double) (-1L), (double) (short) 100);
        double double25 = com.operations.Matrix.MatrixUtils.frobeniusNorm(matrix24);
        com.operations.Matrix.Matrix matrix27 = com.operations.Matrix.MatrixTransformations.rotate2D((double) 1.0f);
        com.operations.Matrix.Matrix matrix30 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0L, (double) (byte) 10);
        int int31 = matrix30.getRows();
        com.operations.Matrix.Matrix matrix33 = com.operations.Matrix.MatrixOperations.scalarMultiply(matrix30, (double) 2);
        double double34 = com.operations.Matrix.MatrixUtils.frobeniusNorm(matrix30);
        com.operations.Matrix.Matrix matrix37 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0L, (double) (byte) 10);
        int int38 = matrix37.getRows();
        com.operations.Matrix.Matrix matrix40 = com.operations.Matrix.MatrixOperations.scalarMultiply(matrix37, (double) 2);
        com.operations.Matrix.Matrix matrix41 = com.operations.Matrix.MatrixOperations.subtract(matrix30, matrix40);
        com.operations.Matrix.Matrix matrix42 = com.operations.Matrix.MatrixOperations.add(matrix27, matrix40);
        matrix27.print();
        double[] doubleArray46 = new double[] { 10, 'a' };
        double[] doubleArray49 = new double[] { 10, 'a' };
        double[][] doubleArray50 = new double[][] { doubleArray46, doubleArray49 };
        com.operations.Matrix.Matrix matrix51 = new com.operations.Matrix.Matrix(doubleArray50);
        com.operations.Matrix.Matrix matrix52 = com.operations.Matrix.MatrixOperations.transpose(matrix51);
        com.operations.Matrix.Matrix matrix55 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0L, (double) (byte) 10);
        int int56 = matrix55.getRows();
        com.operations.Matrix.Matrix matrix62 = com.operations.Matrix.MatrixUtils.generateRandomMatrix(100, (int) (byte) 1, (int) '#', (int) '#', 1L);
        boolean boolean64 = com.operations.Matrix.MatrixUtils.compare(matrix55, matrix62, (double) 1.0f);
        com.operations.Matrix.Matrix matrix66 = com.operations.Matrix.MatrixOperations.scalarMultiply(matrix55, (double) 1L);
        matrix55.print();
        com.operations.Matrix.Matrix matrix68 = com.operations.Matrix.MatrixOperations.multiply(matrix52, matrix55);
        com.operations.Matrix.Matrix matrix69 = com.operations.Matrix.MatrixOperations.multiply(matrix27, matrix55);
        int int70 = matrix55.getRows();
        com.operations.Matrix.Matrix matrix71 = com.operations.Matrix.MatrixOperations.subtract(matrix24, matrix55);
        int int72 = matrix71.getRows();
        double[][] doubleArray73 = matrix71.getData();
        boolean boolean75 = com.operations.Matrix.MatrixUtils.compare(matrix21, matrix71, 18.14229652832025d);
        org.junit.Assert.assertNotNull(matrix2);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertArrayEquals(doubleArray5, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertArrayEquals(doubleArray8, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 2 + "'", int11 == 2);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 2 + "'", int12 == 2);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 2 + "'", int13 == 2);
        org.junit.Assert.assertNotNull(matrixArray14);
        org.junit.Assert.assertNotNull(matrix15);
        org.junit.Assert.assertNotNull(matrix17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(matrix20);
        org.junit.Assert.assertNotNull(matrix21);
        org.junit.Assert.assertNotNull(matrix24);
        org.junit.Assert.assertTrue("'" + double25 + "' != '" + 100.00499987500625d + "'", double25 == 100.00499987500625d);
        org.junit.Assert.assertNotNull(matrix27);
        org.junit.Assert.assertNotNull(matrix30);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 2 + "'", int31 == 2);
        org.junit.Assert.assertNotNull(matrix33);
        org.junit.Assert.assertTrue("'" + double34 + "' != '" + 10.0d + "'", double34 == 10.0d);
        org.junit.Assert.assertNotNull(matrix37);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 2 + "'", int38 == 2);
        org.junit.Assert.assertNotNull(matrix40);
        org.junit.Assert.assertNotNull(matrix41);
        org.junit.Assert.assertNotNull(matrix42);
        org.junit.Assert.assertNotNull(doubleArray46);
        org.junit.Assert.assertArrayEquals(doubleArray46, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertArrayEquals(doubleArray49, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertNotNull(matrix52);
        org.junit.Assert.assertNotNull(matrix55);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 2 + "'", int56 == 2);
        org.junit.Assert.assertNotNull(matrix62);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertNotNull(matrix66);
        org.junit.Assert.assertNotNull(matrix68);
        org.junit.Assert.assertNotNull(matrix69);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 2 + "'", int70 == 2);
        org.junit.Assert.assertNotNull(matrix71);
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 2 + "'", int72 == 2);
        org.junit.Assert.assertNotNull(doubleArray73);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
    }

    @Test
    public void test4966() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4966");
        com.operations.Matrix.Matrix matrix1 = com.operations.Matrix.MatrixTransformations.rotate2D(24.03204160570106d);
        com.operations.Matrix.Matrix matrix3 = com.operations.Matrix.MatrixTransformations.rotate2D((double) '#');
        com.operations.Matrix.Matrix matrix5 = com.operations.Matrix.MatrixTransformations.rotate2D((double) '4');
        matrix5.print();
        com.operations.Matrix.Matrix matrix7 = com.operations.Matrix.MatrixOperations.transpose(matrix5);
        double[][] doubleArray8 = matrix5.getData();
        com.operations.Matrix.Matrix matrix11 = com.operations.Matrix.MatrixTransformations.project2D(400.0d, 36.40054944640259d);
        com.operations.Matrix.Matrix matrix13 = com.operations.Matrix.MatrixTransformations.rotate2D(100.0d);
        int int14 = matrix13.getCols();
        matrix13.print();
        com.operations.Matrix.Matrix matrix17 = com.operations.Matrix.MatrixOperations.scalarMultiply(matrix13, (double) (byte) 1);
        com.operations.Matrix.Matrix matrix19 = com.operations.Matrix.MatrixTransformations.rotate2D(350.0d);
        com.operations.Matrix.Matrix matrix21 = com.operations.Matrix.MatrixTransformations.rotate2D((double) (short) 100);
        double[] doubleArray24 = new double[] { 137.90576492663388d, (byte) -1 };
        double[] doubleArray25 = com.operations.Matrix.MatrixSolver.solveGaussian(matrix21, doubleArray24);
        double[] doubleArray26 = com.operations.Matrix.MatrixSolver.solveGaussian(matrix19, doubleArray25);
        double[] doubleArray27 = com.operations.Matrix.MatrixSolver.solveGaussian(matrix13, doubleArray25);
        double[] doubleArray28 = com.operations.Matrix.MatrixSolver.solveGaussian(matrix11, doubleArray25);
        double[] doubleArray29 = com.operations.Matrix.MatrixSolver.solveGaussian(matrix5, doubleArray28);
        double[] doubleArray30 = com.operations.Matrix.MatrixSolver.solveGaussian(matrix3, doubleArray29);
        double[] doubleArray31 = com.operations.Matrix.MatrixSolver.solveGaussian(matrix1, doubleArray29);
        org.junit.Assert.assertNotNull(matrix1);
        org.junit.Assert.assertNotNull(matrix3);
        org.junit.Assert.assertNotNull(matrix5);
        org.junit.Assert.assertNotNull(matrix7);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertNotNull(matrix11);
        org.junit.Assert.assertNotNull(matrix13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 2 + "'", int14 == 2);
        org.junit.Assert.assertNotNull(matrix17);
        org.junit.Assert.assertNotNull(matrix19);
        org.junit.Assert.assertNotNull(matrix21);
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertArrayEquals(doubleArray24, new double[] { 137.90576492663388d, (-1.0d) }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertArrayEquals(doubleArray25, new double[] { (-24.931892522286255d), (-135.63701830716116d) }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertArrayEquals(doubleArray26, new double[] { (-0.9999999999999858d), (-137.90576492663388d) }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertArrayEquals(doubleArray27, new double[] { (-129.24700952206834d), 48.1062421064292d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertArrayEquals(doubleArray28, new double[] { (-0.06232973130571564d), (-3.7262354653980627d) }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertArrayEquals(doubleArray29, new double[] { (-2.9746876315367503d), (-2.2449831254994406d) }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertArrayEquals(doubleArray30, new double[] { (-3.7243908752867103d), (-0.13277178569277412d) }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertArrayEquals(doubleArray31, new double[] { (-3.631099008517382d), (-0.8389491816189119d) }, 1.0E-15);
    }

    @Test
    public void test4967() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4967");
        // The following exception was thrown during execution in test generation
        try {
            com.operations.Matrix.Matrix matrix5 = com.operations.Matrix.MatrixUtils.generateRandomMatrix((-1), (int) (short) 1, (int) (byte) 1, 10, (long) (byte) 10);
            org.junit.Assert.fail("Expected exception of type java.lang.NegativeArraySizeException; message: -1");
        } catch (java.lang.NegativeArraySizeException e) {
            // Expected exception.
        }
    }

    @Test
    public void test4968() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4968");
        com.operations.Matrix.Matrix matrix2 = new com.operations.Matrix.Matrix((int) (short) 100, 97);
    }

    @Test
    public void test4969() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4969");
        com.operations.Matrix.Matrix matrix4 = com.operations.Matrix.MatrixUtils.generateRandomMatrix(32, (int) (byte) 10, (int) (short) 10, 1);
        com.operations.Matrix.Matrix matrix7 = com.operations.Matrix.MatrixTransformations.scale2D(641.7761389614766d, (double) 97);
        // The following exception was thrown during execution in test generation
        try {
            com.operations.Matrix.Matrix matrix8 = com.operations.Matrix.MatrixOperations.multiply(matrix4, matrix7);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Matrix A's columns must match Matrix B's rows for multiplication.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(matrix4);
        org.junit.Assert.assertNotNull(matrix7);
    }

    @Test
    public void test4970() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4970");
        // The following exception was thrown during execution in test generation
        try {
            com.operations.Matrix.Matrix matrix4 = com.operations.Matrix.MatrixUtils.generateRandomMatrix((-1), (int) (byte) -1, 0, 97);
            org.junit.Assert.fail("Expected exception of type java.lang.NegativeArraySizeException; message: -1");
        } catch (java.lang.NegativeArraySizeException e) {
            // Expected exception.
        }
    }

    @Test
    public void test4971() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4971");
        com.operations.Matrix.Matrix matrix2 = com.operations.Matrix.MatrixTransformations.project2D(137.90576492663388d, 0.0d);
        double[][] doubleArray3 = matrix2.getData();
        com.operations.Matrix.Matrix matrix4 = new com.operations.Matrix.Matrix(doubleArray3);
        com.operations.Matrix.Matrix matrix5 = new com.operations.Matrix.Matrix(doubleArray3);
        boolean boolean6 = com.operations.Matrix.MatrixUtils.isSquare(matrix5);
        int int7 = matrix5.getCols();
        com.operations.Matrix.Matrix matrix10 = com.operations.Matrix.MatrixTransformations.project2D(1.4142135623730951d, (double) 2);
        com.operations.Matrix.Matrix matrix13 = com.operations.Matrix.MatrixTransformations.project2D(1363.6076983299943d, (double) 52);
        com.operations.Matrix.Matrix matrix14 = com.operations.Matrix.MatrixOperations.add(matrix10, matrix13);
        com.operations.Matrix.Matrix[] matrixArray15 = com.operations.Matrix.MatrixDecompositions.luDecomposition(matrix14);
        com.operations.Matrix.Matrix matrix16 = com.operations.Matrix.MatrixOperations.multiply(matrix5, matrix14);
        org.junit.Assert.assertNotNull(matrix2);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 2 + "'", int7 == 2);
        org.junit.Assert.assertNotNull(matrix10);
        org.junit.Assert.assertNotNull(matrix13);
        org.junit.Assert.assertNotNull(matrix14);
        org.junit.Assert.assertNotNull(matrixArray15);
        org.junit.Assert.assertNotNull(matrix16);
    }

    @Test
    public void test4972() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4972");
        com.operations.Matrix.Matrix matrix2 = new com.operations.Matrix.Matrix((int) (byte) 100, (int) (short) 1);
    }

    @Test
    public void test4973() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4973");
        com.operations.Matrix.Matrix matrix2 = com.operations.Matrix.MatrixTransformations.project2D(65.19779036970327d, (-10.34729635533386d));
        org.junit.Assert.assertNotNull(matrix2);
    }

    @Test
    public void test4974() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4974");
        com.operations.Matrix.Matrix matrix2 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0.0f, 350.0d);
        com.operations.Matrix.Matrix matrix5 = com.operations.Matrix.MatrixTransformations.project2D(0.0d, (double) 0);
        com.operations.Matrix.Matrix[] matrixArray6 = com.operations.Matrix.MatrixDecompositions.luDecomposition(matrix5);
        com.operations.Matrix.Matrix matrix9 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0L, (double) (byte) 10);
        int int10 = matrix9.getRows();
        com.operations.Matrix.Matrix matrix12 = com.operations.Matrix.MatrixOperations.scalarMultiply(matrix9, (double) 2);
        double double13 = com.operations.Matrix.MatrixUtils.frobeniusNorm(matrix9);
        int int14 = matrix9.getRows();
        com.operations.Matrix.Matrix matrix15 = com.operations.Matrix.MatrixOperations.transpose(matrix9);
        com.operations.Matrix.Matrix matrix16 = com.operations.Matrix.MatrixOperations.multiply(matrix5, matrix15);
        com.operations.Matrix.Matrix matrix17 = com.operations.Matrix.MatrixOperations.multiply(matrix2, matrix15);
        double double18 = com.operations.Matrix.MatrixUtils.frobeniusNorm(matrix15);
        org.junit.Assert.assertNotNull(matrix2);
        org.junit.Assert.assertNotNull(matrix5);
        org.junit.Assert.assertNotNull(matrixArray6);
        org.junit.Assert.assertNotNull(matrix9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 2 + "'", int10 == 2);
        org.junit.Assert.assertNotNull(matrix12);
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 10.0d + "'", double13 == 10.0d);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 2 + "'", int14 == 2);
        org.junit.Assert.assertNotNull(matrix15);
        org.junit.Assert.assertNotNull(matrix16);
        org.junit.Assert.assertNotNull(matrix17);
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 10.0d + "'", double18 == 10.0d);
    }

    @Test
    public void test4975() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4975");
        com.operations.Matrix.Matrix matrix2 = com.operations.Matrix.MatrixTransformations.project2D((double) (short) 10, 33.34013029422918d);
        com.operations.Matrix.Matrix matrix4 = com.operations.Matrix.MatrixTransformations.rotate2D((-0.1736481776669303d));
        double[] doubleArray7 = new double[] { 10, 'a' };
        double[] doubleArray10 = new double[] { 10, 'a' };
        double[][] doubleArray11 = new double[][] { doubleArray7, doubleArray10 };
        com.operations.Matrix.Matrix matrix12 = new com.operations.Matrix.Matrix(doubleArray11);
        com.operations.Matrix.Matrix matrix13 = new com.operations.Matrix.Matrix(doubleArray11);
        boolean boolean14 = com.operations.Matrix.MatrixUtils.isSquare(matrix13);
        double[] doubleArray17 = new double[] { 10, 'a' };
        double[] doubleArray20 = new double[] { 10, 'a' };
        double[][] doubleArray21 = new double[][] { doubleArray17, doubleArray20 };
        com.operations.Matrix.Matrix matrix22 = new com.operations.Matrix.Matrix(doubleArray21);
        int int23 = matrix22.getCols();
        int int24 = matrix22.getCols();
        matrix22.print();
        double[] doubleArray28 = new double[] { 10, 'a' };
        double[] doubleArray31 = new double[] { 10, 'a' };
        double[][] doubleArray32 = new double[][] { doubleArray28, doubleArray31 };
        com.operations.Matrix.Matrix matrix33 = new com.operations.Matrix.Matrix(doubleArray32);
        boolean boolean35 = com.operations.Matrix.MatrixUtils.compare(matrix22, matrix33, (double) (-1));
        com.operations.Matrix.Matrix matrix36 = com.operations.Matrix.MatrixOperations.subtract(matrix13, matrix33);
        double[] doubleArray39 = new double[] { 10, 'a' };
        double[] doubleArray42 = new double[] { 10, 'a' };
        double[][] doubleArray43 = new double[][] { doubleArray39, doubleArray42 };
        com.operations.Matrix.Matrix matrix44 = new com.operations.Matrix.Matrix(doubleArray43);
        com.operations.Matrix.Matrix matrix45 = new com.operations.Matrix.Matrix(doubleArray43);
        boolean boolean46 = com.operations.Matrix.MatrixUtils.isSquare(matrix45);
        double[] doubleArray49 = new double[] { 10, 'a' };
        double[] doubleArray52 = new double[] { 10, 'a' };
        double[][] doubleArray53 = new double[][] { doubleArray49, doubleArray52 };
        com.operations.Matrix.Matrix matrix54 = new com.operations.Matrix.Matrix(doubleArray53);
        int int55 = matrix54.getCols();
        int int56 = matrix54.getCols();
        matrix54.print();
        double[] doubleArray60 = new double[] { 10, 'a' };
        double[] doubleArray63 = new double[] { 10, 'a' };
        double[][] doubleArray64 = new double[][] { doubleArray60, doubleArray63 };
        com.operations.Matrix.Matrix matrix65 = new com.operations.Matrix.Matrix(doubleArray64);
        boolean boolean67 = com.operations.Matrix.MatrixUtils.compare(matrix54, matrix65, (double) (-1));
        com.operations.Matrix.Matrix matrix68 = com.operations.Matrix.MatrixOperations.subtract(matrix45, matrix65);
        com.operations.Matrix.Matrix matrix69 = com.operations.Matrix.MatrixOperations.add(matrix13, matrix68);
        com.operations.Matrix.Matrix matrix70 = com.operations.Matrix.MatrixOperations.multiply(matrix4, matrix69);
        com.operations.Matrix.Matrix matrix71 = com.operations.Matrix.MatrixOperations.multiply(matrix2, matrix4);
        int int72 = matrix4.getRows();
        org.junit.Assert.assertNotNull(matrix2);
        org.junit.Assert.assertNotNull(matrix4);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertArrayEquals(doubleArray7, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertArrayEquals(doubleArray10, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertArrayEquals(doubleArray17, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertArrayEquals(doubleArray20, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 2 + "'", int23 == 2);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 2 + "'", int24 == 2);
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertArrayEquals(doubleArray28, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertArrayEquals(doubleArray31, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(matrix36);
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertArrayEquals(doubleArray39, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertArrayEquals(doubleArray42, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertArrayEquals(doubleArray49, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertArrayEquals(doubleArray52, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 2 + "'", int55 == 2);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 2 + "'", int56 == 2);
        org.junit.Assert.assertNotNull(doubleArray60);
        org.junit.Assert.assertArrayEquals(doubleArray60, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray63);
        org.junit.Assert.assertArrayEquals(doubleArray63, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray64);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertNotNull(matrix68);
        org.junit.Assert.assertNotNull(matrix69);
        org.junit.Assert.assertNotNull(matrix70);
        org.junit.Assert.assertNotNull(matrix71);
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 2 + "'", int72 == 2);
    }

    @Test
    public void test4976() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4976");
        com.operations.Matrix.Matrix matrix2 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0L, (double) (byte) 10);
        int int3 = matrix2.getRows();
        com.operations.Matrix.Matrix matrix5 = com.operations.Matrix.MatrixOperations.scalarMultiply(matrix2, (double) 2);
        matrix2.print();
        com.operations.Matrix.Matrix matrix8 = com.operations.Matrix.MatrixOperations.scalarMultiply(matrix2, 100.00499987500625d);
        int int9 = matrix8.getRows();
        com.operations.Matrix.Matrix matrix11 = com.operations.Matrix.MatrixTransformations.rotate2D((double) 1.0f);
        com.operations.Matrix.Matrix matrix14 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0L, (double) (byte) 10);
        int int15 = matrix14.getRows();
        com.operations.Matrix.Matrix matrix17 = com.operations.Matrix.MatrixOperations.scalarMultiply(matrix14, (double) 2);
        double double18 = com.operations.Matrix.MatrixUtils.frobeniusNorm(matrix14);
        com.operations.Matrix.Matrix matrix21 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0L, (double) (byte) 10);
        int int22 = matrix21.getRows();
        com.operations.Matrix.Matrix matrix24 = com.operations.Matrix.MatrixOperations.scalarMultiply(matrix21, (double) 2);
        com.operations.Matrix.Matrix matrix25 = com.operations.Matrix.MatrixOperations.subtract(matrix14, matrix24);
        com.operations.Matrix.Matrix matrix26 = com.operations.Matrix.MatrixOperations.add(matrix11, matrix24);
        com.operations.Matrix.Matrix[] matrixArray27 = com.operations.Matrix.MatrixDecompositions.luDecomposition(matrix24);
        boolean boolean28 = com.operations.Matrix.MatrixUtils.isSquare(matrix24);
        com.operations.Matrix.Matrix matrix29 = com.operations.Matrix.MatrixOperations.transpose(matrix24);
        com.operations.Matrix.Matrix matrix31 = com.operations.Matrix.MatrixOperations.scalarMultiply(matrix24, (double) ' ');
        com.operations.Matrix.Matrix matrix32 = com.operations.Matrix.MatrixOperations.multiply(matrix8, matrix31);
        com.operations.Matrix.Matrix matrix35 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0L, (double) (byte) 10);
        double[] doubleArray38 = new double[] { 10, 'a' };
        double[] doubleArray41 = new double[] { 10, 'a' };
        double[][] doubleArray42 = new double[][] { doubleArray38, doubleArray41 };
        com.operations.Matrix.Matrix matrix43 = new com.operations.Matrix.Matrix(doubleArray42);
        int int44 = matrix43.getCols();
        int int45 = matrix43.getCols();
        int int46 = matrix43.getCols();
        com.operations.Matrix.Matrix[] matrixArray47 = com.operations.Matrix.MatrixDecompositions.luDecomposition(matrix43);
        com.operations.Matrix.Matrix matrix48 = com.operations.Matrix.MatrixOperations.multiply(matrix35, matrix43);
        com.operations.Matrix.Matrix matrix50 = com.operations.Matrix.MatrixTransformations.rotate2D((double) (short) 100);
        boolean boolean52 = com.operations.Matrix.MatrixUtils.compare(matrix43, matrix50, (double) (byte) 0);
        com.operations.Matrix.Matrix[] matrixArray53 = com.operations.Matrix.MatrixDecompositions.luDecomposition(matrix43);
        com.operations.Matrix.Matrix matrix54 = com.operations.Matrix.MatrixOperations.transpose(matrix43);
        com.operations.Matrix.Matrix matrix57 = com.operations.Matrix.MatrixTransformations.scale2D((double) 1.0f, (double) 1);
        com.operations.Matrix.Matrix matrix59 = com.operations.Matrix.MatrixTransformations.rotate2D((double) 1.0f);
        com.operations.Matrix.Matrix matrix62 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0L, (double) (byte) 10);
        int int63 = matrix62.getRows();
        com.operations.Matrix.Matrix matrix65 = com.operations.Matrix.MatrixOperations.scalarMultiply(matrix62, (double) 2);
        double double66 = com.operations.Matrix.MatrixUtils.frobeniusNorm(matrix62);
        com.operations.Matrix.Matrix matrix69 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0L, (double) (byte) 10);
        int int70 = matrix69.getRows();
        com.operations.Matrix.Matrix matrix72 = com.operations.Matrix.MatrixOperations.scalarMultiply(matrix69, (double) 2);
        com.operations.Matrix.Matrix matrix73 = com.operations.Matrix.MatrixOperations.subtract(matrix62, matrix72);
        com.operations.Matrix.Matrix matrix74 = com.operations.Matrix.MatrixOperations.add(matrix59, matrix72);
        boolean boolean76 = com.operations.Matrix.MatrixUtils.compare(matrix57, matrix59, (double) (byte) -1);
        com.operations.Matrix.Matrix matrix77 = com.operations.Matrix.MatrixOperations.subtract(matrix54, matrix57);
        int int78 = matrix54.getRows();
        com.operations.Matrix.Matrix matrix79 = com.operations.Matrix.MatrixOperations.add(matrix8, matrix54);
        boolean boolean80 = com.operations.Matrix.MatrixUtils.isSquare(matrix8);
        int int81 = matrix8.getCols();
        org.junit.Assert.assertNotNull(matrix2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 2 + "'", int3 == 2);
        org.junit.Assert.assertNotNull(matrix5);
        org.junit.Assert.assertNotNull(matrix8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 2 + "'", int9 == 2);
        org.junit.Assert.assertNotNull(matrix11);
        org.junit.Assert.assertNotNull(matrix14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 2 + "'", int15 == 2);
        org.junit.Assert.assertNotNull(matrix17);
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 10.0d + "'", double18 == 10.0d);
        org.junit.Assert.assertNotNull(matrix21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 2 + "'", int22 == 2);
        org.junit.Assert.assertNotNull(matrix24);
        org.junit.Assert.assertNotNull(matrix25);
        org.junit.Assert.assertNotNull(matrix26);
        org.junit.Assert.assertNotNull(matrixArray27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertNotNull(matrix29);
        org.junit.Assert.assertNotNull(matrix31);
        org.junit.Assert.assertNotNull(matrix32);
        org.junit.Assert.assertNotNull(matrix35);
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertArrayEquals(doubleArray38, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertArrayEquals(doubleArray41, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 2 + "'", int44 == 2);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 2 + "'", int45 == 2);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 2 + "'", int46 == 2);
        org.junit.Assert.assertNotNull(matrixArray47);
        org.junit.Assert.assertNotNull(matrix48);
        org.junit.Assert.assertNotNull(matrix50);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(matrixArray53);
        org.junit.Assert.assertNotNull(matrix54);
        org.junit.Assert.assertNotNull(matrix57);
        org.junit.Assert.assertNotNull(matrix59);
        org.junit.Assert.assertNotNull(matrix62);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 2 + "'", int63 == 2);
        org.junit.Assert.assertNotNull(matrix65);
        org.junit.Assert.assertTrue("'" + double66 + "' != '" + 10.0d + "'", double66 == 10.0d);
        org.junit.Assert.assertNotNull(matrix69);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 2 + "'", int70 == 2);
        org.junit.Assert.assertNotNull(matrix72);
        org.junit.Assert.assertNotNull(matrix73);
        org.junit.Assert.assertNotNull(matrix74);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertNotNull(matrix77);
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + 2 + "'", int78 == 2);
        org.junit.Assert.assertNotNull(matrix79);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + true + "'", boolean80 == true);
        org.junit.Assert.assertTrue("'" + int81 + "' != '" + 2 + "'", int81 == 2);
    }

    @Test
    public void test4977() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4977");
        com.operations.Matrix.Matrix matrix0 = null;
        com.operations.Matrix.Matrix matrix5 = com.operations.Matrix.MatrixUtils.generateRandomMatrix(2, (int) ' ', (int) (short) 100, (int) (short) 100);
        com.operations.Matrix.Matrix matrix6 = com.operations.Matrix.MatrixOperations.transpose(matrix5);
        // The following exception was thrown during execution in test generation
        try {
            com.operations.Matrix.Matrix matrix7 = com.operations.Matrix.MatrixOperations.add(matrix0, matrix6);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(matrix5);
        org.junit.Assert.assertNotNull(matrix6);
    }

    @Test
    public void test4978() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4978");
        com.operations.Matrix.Matrix matrix1 = com.operations.Matrix.MatrixTransformations.rotate2D((double) (short) 100);
        double[] doubleArray4 = new double[] { 137.90576492663388d, (byte) -1 };
        double[] doubleArray5 = com.operations.Matrix.MatrixSolver.solveGaussian(matrix1, doubleArray4);
        com.operations.Matrix.Matrix matrix8 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0L, (double) (byte) 10);
        double[] doubleArray11 = new double[] { 10, 'a' };
        double[] doubleArray14 = new double[] { 10, 'a' };
        double[][] doubleArray15 = new double[][] { doubleArray11, doubleArray14 };
        com.operations.Matrix.Matrix matrix16 = new com.operations.Matrix.Matrix(doubleArray15);
        int int17 = matrix16.getCols();
        int int18 = matrix16.getCols();
        int int19 = matrix16.getCols();
        com.operations.Matrix.Matrix[] matrixArray20 = com.operations.Matrix.MatrixDecompositions.luDecomposition(matrix16);
        com.operations.Matrix.Matrix matrix21 = com.operations.Matrix.MatrixOperations.multiply(matrix8, matrix16);
        boolean boolean23 = com.operations.Matrix.MatrixUtils.compare(matrix1, matrix8, (double) (-1L));
        boolean boolean24 = com.operations.Matrix.MatrixUtils.isSymmetric(matrix1);
        int int25 = matrix1.getCols();
        com.operations.Matrix.Matrix[] matrixArray26 = com.operations.Matrix.MatrixDecompositions.luDecomposition(matrix1);
        double double27 = com.operations.Matrix.MatrixUtils.frobeniusNorm(matrix1);
        double double28 = com.operations.Matrix.MatrixUtils.frobeniusNorm(matrix1);
        double[][] doubleArray29 = matrix1.getData();
        com.operations.Matrix.Matrix matrix30 = new com.operations.Matrix.Matrix(doubleArray29);
        com.operations.Matrix.Matrix matrix31 = new com.operations.Matrix.Matrix(doubleArray29);
        com.operations.Matrix.Matrix matrix32 = new com.operations.Matrix.Matrix(doubleArray29);
        com.operations.Matrix.Matrix[] matrixArray33 = com.operations.Matrix.MatrixDecompositions.luDecomposition(matrix32);
        org.junit.Assert.assertNotNull(matrix1);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertArrayEquals(doubleArray4, new double[] { 137.90576492663388d, (-1.0d) }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertArrayEquals(doubleArray5, new double[] { (-24.931892522286255d), (-135.63701830716116d) }, 1.0E-15);
        org.junit.Assert.assertNotNull(matrix8);
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertArrayEquals(doubleArray11, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertArrayEquals(doubleArray14, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 2 + "'", int17 == 2);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 2 + "'", int18 == 2);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 2 + "'", int19 == 2);
        org.junit.Assert.assertNotNull(matrixArray20);
        org.junit.Assert.assertNotNull(matrix21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 2 + "'", int25 == 2);
        org.junit.Assert.assertNotNull(matrixArray26);
        org.junit.Assert.assertTrue("'" + double27 + "' != '" + 1.414213562373095d + "'", double27 == 1.414213562373095d);
        org.junit.Assert.assertTrue("'" + double28 + "' != '" + 1.414213562373095d + "'", double28 == 1.414213562373095d);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertNotNull(matrixArray33);
    }

    @Test
    public void test4979() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4979");
        com.operations.Matrix.Matrix matrix2 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0L, (double) (byte) 10);
        int int3 = matrix2.getRows();
        com.operations.Matrix.Matrix matrix6 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0L, (double) (byte) 10);
        int int7 = matrix6.getRows();
        com.operations.Matrix.Matrix matrix9 = com.operations.Matrix.MatrixOperations.scalarMultiply(matrix6, (double) 2);
        com.operations.Matrix.Matrix matrix10 = com.operations.Matrix.MatrixOperations.subtract(matrix2, matrix6);
        com.operations.Matrix.Matrix matrix13 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0L, (double) (byte) 10);
        int int14 = matrix13.getRows();
        com.operations.Matrix.Matrix matrix20 = com.operations.Matrix.MatrixUtils.generateRandomMatrix(100, (int) (byte) 1, (int) '#', (int) '#', 1L);
        boolean boolean22 = com.operations.Matrix.MatrixUtils.compare(matrix13, matrix20, (double) 1.0f);
        com.operations.Matrix.Matrix matrix24 = com.operations.Matrix.MatrixOperations.scalarMultiply(matrix13, (double) 1L);
        boolean boolean26 = com.operations.Matrix.MatrixUtils.compare(matrix10, matrix24, 0.0d);
        com.operations.Matrix.Matrix matrix28 = com.operations.Matrix.MatrixTransformations.rotate2D((double) (short) 100);
        double[][] doubleArray29 = matrix28.getData();
        com.operations.Matrix.Matrix matrix30 = new com.operations.Matrix.Matrix(doubleArray29);
        com.operations.Matrix.Matrix matrix31 = com.operations.Matrix.MatrixOperations.add(matrix24, matrix30);
        int int32 = matrix31.getRows();
        com.operations.Matrix.Matrix matrix34 = com.operations.Matrix.MatrixTransformations.rotate2D((double) '4');
        double[] doubleArray37 = new double[] { 10, 'a' };
        double[] doubleArray40 = new double[] { 10, 'a' };
        double[][] doubleArray41 = new double[][] { doubleArray37, doubleArray40 };
        com.operations.Matrix.Matrix matrix42 = new com.operations.Matrix.Matrix(doubleArray41);
        com.operations.Matrix.Matrix matrix43 = new com.operations.Matrix.Matrix(doubleArray41);
        com.operations.Matrix.Matrix matrix45 = com.operations.Matrix.MatrixTransformations.rotate2D((double) (short) 100);
        double[] doubleArray48 = new double[] { 137.90576492663388d, (byte) -1 };
        double[] doubleArray49 = com.operations.Matrix.MatrixSolver.solveGaussian(matrix45, doubleArray48);
        com.operations.Matrix.Matrix matrix50 = com.operations.Matrix.MatrixOperations.add(matrix43, matrix45);
        boolean boolean51 = com.operations.Matrix.MatrixUtils.isSymmetric(matrix50);
        boolean boolean53 = com.operations.Matrix.MatrixUtils.compare(matrix34, matrix50, 364.0054944640259d);
        com.operations.Matrix.Matrix matrix56 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0L, (double) (byte) 10);
        int int57 = matrix56.getRows();
        com.operations.Matrix.Matrix matrix59 = com.operations.Matrix.MatrixOperations.scalarMultiply(matrix56, (double) 2);
        matrix56.print();
        com.operations.Matrix.Matrix matrix61 = com.operations.Matrix.MatrixOperations.multiply(matrix50, matrix56);
        int int62 = matrix61.getRows();
        com.operations.Matrix.Matrix matrix65 = com.operations.Matrix.MatrixTransformations.scale2D(1.414213562373095d, 36.40054944640259d);
        com.operations.Matrix.Matrix matrix66 = com.operations.Matrix.MatrixOperations.transpose(matrix65);
        com.operations.Matrix.Matrix matrix67 = com.operations.Matrix.MatrixOperations.multiply(matrix61, matrix66);
        com.operations.Matrix.Matrix matrix70 = com.operations.Matrix.MatrixTransformations.project2D(0.0d, (double) (-1L));
        com.operations.Matrix.Matrix matrix71 = com.operations.Matrix.MatrixOperations.multiply(matrix61, matrix70);
        com.operations.Matrix.Matrix matrix72 = com.operations.Matrix.MatrixOperations.multiply(matrix31, matrix71);
        com.operations.Matrix.Matrix[] matrixArray73 = com.operations.Matrix.MatrixDecompositions.luDecomposition(matrix31);
        java.lang.Class<?> wildcardClass74 = matrixArray73.getClass();
        org.junit.Assert.assertNotNull(matrix2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 2 + "'", int3 == 2);
        org.junit.Assert.assertNotNull(matrix6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 2 + "'", int7 == 2);
        org.junit.Assert.assertNotNull(matrix9);
        org.junit.Assert.assertNotNull(matrix10);
        org.junit.Assert.assertNotNull(matrix13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 2 + "'", int14 == 2);
        org.junit.Assert.assertNotNull(matrix20);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(matrix24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(matrix28);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertNotNull(matrix31);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 2 + "'", int32 == 2);
        org.junit.Assert.assertNotNull(matrix34);
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertArrayEquals(doubleArray37, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertArrayEquals(doubleArray40, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertNotNull(matrix45);
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertArrayEquals(doubleArray48, new double[] { 137.90576492663388d, (-1.0d) }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertArrayEquals(doubleArray49, new double[] { (-24.931892522286255d), (-135.63701830716116d) }, 1.0E-15);
        org.junit.Assert.assertNotNull(matrix50);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true);
        org.junit.Assert.assertNotNull(matrix56);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 2 + "'", int57 == 2);
        org.junit.Assert.assertNotNull(matrix59);
        org.junit.Assert.assertNotNull(matrix61);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 2 + "'", int62 == 2);
        org.junit.Assert.assertNotNull(matrix65);
        org.junit.Assert.assertNotNull(matrix66);
        org.junit.Assert.assertNotNull(matrix67);
        org.junit.Assert.assertNotNull(matrix70);
        org.junit.Assert.assertNotNull(matrix71);
        org.junit.Assert.assertNotNull(matrix72);
        org.junit.Assert.assertNotNull(matrixArray73);
        org.junit.Assert.assertNotNull(wildcardClass74);
    }

    @Test
    public void test4980() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4980");
        com.operations.Matrix.Matrix matrix1 = com.operations.Matrix.MatrixTransformations.rotate2D((double) (byte) 100);
        double double2 = com.operations.Matrix.MatrixUtils.frobeniusNorm(matrix1);
        com.operations.Matrix.Matrix matrix5 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0.0f, (double) (-1));
        com.operations.Matrix.Matrix matrix8 = com.operations.Matrix.MatrixTransformations.scale2D(146.4308710620817d, (double) 10L);
        com.operations.Matrix.Matrix matrix9 = com.operations.Matrix.MatrixOperations.multiply(matrix5, matrix8);
        com.operations.Matrix.Matrix matrix11 = com.operations.Matrix.MatrixTransformations.rotate2D((double) 1.0f);
        com.operations.Matrix.Matrix matrix14 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0L, (double) (byte) 10);
        int int15 = matrix14.getRows();
        com.operations.Matrix.Matrix matrix17 = com.operations.Matrix.MatrixOperations.scalarMultiply(matrix14, (double) 2);
        double double18 = com.operations.Matrix.MatrixUtils.frobeniusNorm(matrix14);
        com.operations.Matrix.Matrix matrix21 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0L, (double) (byte) 10);
        int int22 = matrix21.getRows();
        com.operations.Matrix.Matrix matrix24 = com.operations.Matrix.MatrixOperations.scalarMultiply(matrix21, (double) 2);
        com.operations.Matrix.Matrix matrix25 = com.operations.Matrix.MatrixOperations.subtract(matrix14, matrix24);
        com.operations.Matrix.Matrix matrix26 = com.operations.Matrix.MatrixOperations.add(matrix11, matrix24);
        matrix11.print();
        double[] doubleArray30 = new double[] { 10, 'a' };
        double[] doubleArray33 = new double[] { 10, 'a' };
        double[][] doubleArray34 = new double[][] { doubleArray30, doubleArray33 };
        com.operations.Matrix.Matrix matrix35 = new com.operations.Matrix.Matrix(doubleArray34);
        com.operations.Matrix.Matrix matrix36 = com.operations.Matrix.MatrixOperations.transpose(matrix35);
        com.operations.Matrix.Matrix matrix39 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0L, (double) (byte) 10);
        int int40 = matrix39.getRows();
        com.operations.Matrix.Matrix matrix46 = com.operations.Matrix.MatrixUtils.generateRandomMatrix(100, (int) (byte) 1, (int) '#', (int) '#', 1L);
        boolean boolean48 = com.operations.Matrix.MatrixUtils.compare(matrix39, matrix46, (double) 1.0f);
        com.operations.Matrix.Matrix matrix50 = com.operations.Matrix.MatrixOperations.scalarMultiply(matrix39, (double) 1L);
        matrix39.print();
        com.operations.Matrix.Matrix matrix52 = com.operations.Matrix.MatrixOperations.multiply(matrix36, matrix39);
        com.operations.Matrix.Matrix matrix53 = com.operations.Matrix.MatrixOperations.multiply(matrix11, matrix39);
        com.operations.Matrix.Matrix matrix54 = com.operations.Matrix.MatrixOperations.subtract(matrix5, matrix39);
        com.operations.Matrix.Matrix matrix55 = com.operations.Matrix.MatrixOperations.subtract(matrix1, matrix5);
        int int56 = matrix1.getCols();
        java.lang.Class<?> wildcardClass57 = matrix1.getClass();
        org.junit.Assert.assertNotNull(matrix1);
        org.junit.Assert.assertTrue("'" + double2 + "' != '" + 1.414213562373095d + "'", double2 == 1.414213562373095d);
        org.junit.Assert.assertNotNull(matrix5);
        org.junit.Assert.assertNotNull(matrix8);
        org.junit.Assert.assertNotNull(matrix9);
        org.junit.Assert.assertNotNull(matrix11);
        org.junit.Assert.assertNotNull(matrix14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 2 + "'", int15 == 2);
        org.junit.Assert.assertNotNull(matrix17);
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 10.0d + "'", double18 == 10.0d);
        org.junit.Assert.assertNotNull(matrix21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 2 + "'", int22 == 2);
        org.junit.Assert.assertNotNull(matrix24);
        org.junit.Assert.assertNotNull(matrix25);
        org.junit.Assert.assertNotNull(matrix26);
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertArrayEquals(doubleArray30, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertArrayEquals(doubleArray33, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertNotNull(matrix36);
        org.junit.Assert.assertNotNull(matrix39);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 2 + "'", int40 == 2);
        org.junit.Assert.assertNotNull(matrix46);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(matrix50);
        org.junit.Assert.assertNotNull(matrix52);
        org.junit.Assert.assertNotNull(matrix53);
        org.junit.Assert.assertNotNull(matrix54);
        org.junit.Assert.assertNotNull(matrix55);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 2 + "'", int56 == 2);
        org.junit.Assert.assertNotNull(wildcardClass57);
    }

    @Test
    public void test4981() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4981");
        com.operations.Matrix.Matrix matrix5 = com.operations.Matrix.MatrixUtils.generateRandomMatrix((int) (short) 100, 97, 0, (int) '4', (long) 10);
        org.junit.Assert.assertNotNull(matrix5);
    }

    @Test
    public void test4982() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4982");
        com.operations.Matrix.Matrix matrix1 = com.operations.Matrix.MatrixTransformations.rotate2D(1.414213562373095d);
        com.operations.Matrix.Matrix matrix3 = com.operations.Matrix.MatrixOperations.scalarMultiply(matrix1, 21.023651153076518d);
        com.operations.Matrix.Matrix matrix6 = com.operations.Matrix.MatrixTransformations.scale2D((double) (byte) 10, (double) 10);
        double[] doubleArray9 = new double[] { 10, 'a' };
        double[] doubleArray12 = new double[] { 10, 'a' };
        double[][] doubleArray13 = new double[][] { doubleArray9, doubleArray12 };
        com.operations.Matrix.Matrix matrix14 = new com.operations.Matrix.Matrix(doubleArray13);
        com.operations.Matrix.Matrix matrix15 = new com.operations.Matrix.Matrix(doubleArray13);
        boolean boolean16 = com.operations.Matrix.MatrixUtils.isSquare(matrix15);
        double[] doubleArray19 = new double[] { 10, 'a' };
        double[] doubleArray22 = new double[] { 10, 'a' };
        double[][] doubleArray23 = new double[][] { doubleArray19, doubleArray22 };
        com.operations.Matrix.Matrix matrix24 = new com.operations.Matrix.Matrix(doubleArray23);
        int int25 = matrix24.getCols();
        int int26 = matrix24.getCols();
        matrix24.print();
        double[] doubleArray30 = new double[] { 10, 'a' };
        double[] doubleArray33 = new double[] { 10, 'a' };
        double[][] doubleArray34 = new double[][] { doubleArray30, doubleArray33 };
        com.operations.Matrix.Matrix matrix35 = new com.operations.Matrix.Matrix(doubleArray34);
        boolean boolean37 = com.operations.Matrix.MatrixUtils.compare(matrix24, matrix35, (double) (-1));
        com.operations.Matrix.Matrix matrix38 = com.operations.Matrix.MatrixOperations.subtract(matrix15, matrix35);
        com.operations.Matrix.Matrix[] matrixArray39 = com.operations.Matrix.MatrixDecompositions.luDecomposition(matrix38);
        double[][] doubleArray40 = matrix38.getData();
        com.operations.Matrix.Matrix matrix41 = new com.operations.Matrix.Matrix(doubleArray40);
        com.operations.Matrix.Matrix matrix42 = com.operations.Matrix.MatrixOperations.multiply(matrix6, matrix41);
        boolean boolean43 = com.operations.Matrix.MatrixUtils.isSymmetric(matrix6);
        com.operations.Matrix.Matrix matrix45 = com.operations.Matrix.MatrixTransformations.rotate2D(350.0d);
        com.operations.Matrix.Matrix matrix46 = com.operations.Matrix.MatrixDecompositions.choleskyDecomposition(matrix45);
        int int47 = matrix45.getRows();
        com.operations.Matrix.Matrix matrix48 = com.operations.Matrix.MatrixOperations.subtract(matrix6, matrix45);
        com.operations.Matrix.Matrix matrix49 = com.operations.Matrix.MatrixOperations.multiply(matrix3, matrix6);
        com.operations.Matrix.Matrix matrix50 = com.operations.Matrix.MatrixDecompositions.choleskyDecomposition(matrix49);
        int int51 = matrix49.getCols();
        double[][] doubleArray52 = matrix49.getData();
        int int53 = matrix49.getCols();
        org.junit.Assert.assertNotNull(matrix1);
        org.junit.Assert.assertNotNull(matrix3);
        org.junit.Assert.assertNotNull(matrix6);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertArrayEquals(doubleArray9, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertArrayEquals(doubleArray12, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertArrayEquals(doubleArray19, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertArrayEquals(doubleArray22, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 2 + "'", int25 == 2);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 2 + "'", int26 == 2);
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertArrayEquals(doubleArray30, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertArrayEquals(doubleArray33, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(matrix38);
        org.junit.Assert.assertNotNull(matrixArray39);
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertNotNull(matrix42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertNotNull(matrix45);
        org.junit.Assert.assertNotNull(matrix46);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 2 + "'", int47 == 2);
        org.junit.Assert.assertNotNull(matrix48);
        org.junit.Assert.assertNotNull(matrix49);
        org.junit.Assert.assertNotNull(matrix50);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 2 + "'", int51 == 2);
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 2 + "'", int53 == 2);
    }

    @Test
    public void test4983() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4983");
        com.operations.Matrix.Matrix matrix2 = com.operations.Matrix.MatrixTransformations.scale2D(0.0d, 65.19779036970327d);
        com.operations.Matrix.Matrix[] matrixArray3 = com.operations.Matrix.MatrixDecompositions.luDecomposition(matrix2);
        java.lang.Class<?> wildcardClass4 = matrixArray3.getClass();
        org.junit.Assert.assertNotNull(matrix2);
        org.junit.Assert.assertNotNull(matrixArray3);
        org.junit.Assert.assertNotNull(wildcardClass4);
    }

    @Test
    public void test4984() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4984");
        com.operations.Matrix.Matrix matrix2 = com.operations.Matrix.MatrixTransformations.project2D(32.0d, 0.01745240643728351d);
        com.operations.Matrix.Matrix[] matrixArray3 = com.operations.Matrix.MatrixDecompositions.luDecomposition(matrix2);
        double[] doubleArray6 = new double[] { 10, 'a' };
        double[] doubleArray9 = new double[] { 10, 'a' };
        double[][] doubleArray10 = new double[][] { doubleArray6, doubleArray9 };
        com.operations.Matrix.Matrix matrix11 = new com.operations.Matrix.Matrix(doubleArray10);
        int int12 = matrix11.getCols();
        int int13 = matrix11.getCols();
        boolean boolean14 = com.operations.Matrix.MatrixUtils.isSquare(matrix11);
        com.operations.Matrix.Matrix matrix15 = com.operations.Matrix.MatrixDecompositions.choleskyDecomposition(matrix11);
        com.operations.Matrix.Matrix matrix18 = com.operations.Matrix.MatrixTransformations.project2D(0.0d, (double) 0);
        com.operations.Matrix.Matrix matrix19 = com.operations.Matrix.MatrixOperations.subtract(matrix15, matrix18);
        double[] doubleArray22 = new double[] { 10, 'a' };
        double[] doubleArray25 = new double[] { 10, 'a' };
        double[][] doubleArray26 = new double[][] { doubleArray22, doubleArray25 };
        com.operations.Matrix.Matrix matrix27 = new com.operations.Matrix.Matrix(doubleArray26);
        com.operations.Matrix.Matrix matrix28 = new com.operations.Matrix.Matrix(doubleArray26);
        com.operations.Matrix.Matrix matrix30 = com.operations.Matrix.MatrixTransformations.rotate2D((double) (short) 100);
        double[] doubleArray33 = new double[] { 137.90576492663388d, (byte) -1 };
        double[] doubleArray34 = com.operations.Matrix.MatrixSolver.solveGaussian(matrix30, doubleArray33);
        com.operations.Matrix.Matrix matrix35 = com.operations.Matrix.MatrixOperations.add(matrix28, matrix30);
        com.operations.Matrix.Matrix matrix36 = com.operations.Matrix.MatrixOperations.transpose(matrix30);
        int int37 = matrix30.getCols();
        int int38 = matrix30.getRows();
        com.operations.Matrix.Matrix matrix39 = com.operations.Matrix.MatrixOperations.subtract(matrix19, matrix30);
        boolean boolean41 = com.operations.Matrix.MatrixUtils.compare(matrix2, matrix19, 1363.6076983299943d);
        boolean boolean42 = com.operations.Matrix.MatrixUtils.isSquare(matrix19);
        org.junit.Assert.assertNotNull(matrix2);
        org.junit.Assert.assertNotNull(matrixArray3);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertArrayEquals(doubleArray6, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertArrayEquals(doubleArray9, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 2 + "'", int12 == 2);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 2 + "'", int13 == 2);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNotNull(matrix15);
        org.junit.Assert.assertNotNull(matrix18);
        org.junit.Assert.assertNotNull(matrix19);
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertArrayEquals(doubleArray22, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertArrayEquals(doubleArray25, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertNotNull(matrix30);
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertArrayEquals(doubleArray33, new double[] { 137.90576492663388d, (-1.0d) }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertArrayEquals(doubleArray34, new double[] { (-24.931892522286255d), (-135.63701830716116d) }, 1.0E-15);
        org.junit.Assert.assertNotNull(matrix35);
        org.junit.Assert.assertNotNull(matrix36);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 2 + "'", int37 == 2);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 2 + "'", int38 == 2);
        org.junit.Assert.assertNotNull(matrix39);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
    }

    @Test
    public void test4985() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4985");
        com.operations.Matrix.Matrix matrix4 = com.operations.Matrix.MatrixUtils.generateRandomMatrix((int) 'a', (int) (short) 100, 2, (-1));
        double[][] doubleArray5 = matrix4.getData();
        com.operations.Matrix.Matrix matrix6 = new com.operations.Matrix.Matrix(doubleArray5);
        org.junit.Assert.assertNotNull(matrix4);
        org.junit.Assert.assertNotNull(doubleArray5);
    }

    @Test
    public void test4986() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4986");
        com.operations.Matrix.Matrix matrix2 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0L, (double) (byte) 10);
        double[] doubleArray5 = new double[] { 10, 'a' };
        double[] doubleArray8 = new double[] { 10, 'a' };
        double[][] doubleArray9 = new double[][] { doubleArray5, doubleArray8 };
        com.operations.Matrix.Matrix matrix10 = new com.operations.Matrix.Matrix(doubleArray9);
        int int11 = matrix10.getCols();
        int int12 = matrix10.getCols();
        int int13 = matrix10.getCols();
        com.operations.Matrix.Matrix[] matrixArray14 = com.operations.Matrix.MatrixDecompositions.luDecomposition(matrix10);
        com.operations.Matrix.Matrix matrix15 = com.operations.Matrix.MatrixOperations.multiply(matrix2, matrix10);
        com.operations.Matrix.Matrix matrix17 = com.operations.Matrix.MatrixTransformations.rotate2D((double) (short) 100);
        boolean boolean19 = com.operations.Matrix.MatrixUtils.compare(matrix10, matrix17, (double) (byte) 0);
        double[] doubleArray22 = new double[] { 10, 'a' };
        double[] doubleArray25 = new double[] { 10, 'a' };
        double[][] doubleArray26 = new double[][] { doubleArray22, doubleArray25 };
        com.operations.Matrix.Matrix matrix27 = new com.operations.Matrix.Matrix(doubleArray26);
        com.operations.Matrix.Matrix matrix28 = new com.operations.Matrix.Matrix(doubleArray26);
        com.operations.Matrix.Matrix matrix29 = new com.operations.Matrix.Matrix(doubleArray26);
        boolean boolean31 = com.operations.Matrix.MatrixUtils.compare(matrix10, matrix29, (double) (-1));
        com.operations.Matrix.Matrix matrix34 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0L, (double) (byte) 10);
        double[] doubleArray37 = new double[] { 10, 'a' };
        double[] doubleArray40 = new double[] { 10, 'a' };
        double[][] doubleArray41 = new double[][] { doubleArray37, doubleArray40 };
        com.operations.Matrix.Matrix matrix42 = new com.operations.Matrix.Matrix(doubleArray41);
        int int43 = matrix42.getCols();
        int int44 = matrix42.getCols();
        int int45 = matrix42.getCols();
        com.operations.Matrix.Matrix[] matrixArray46 = com.operations.Matrix.MatrixDecompositions.luDecomposition(matrix42);
        com.operations.Matrix.Matrix matrix47 = com.operations.Matrix.MatrixOperations.multiply(matrix34, matrix42);
        boolean boolean49 = com.operations.Matrix.MatrixUtils.compare(matrix29, matrix34, (double) 10L);
        int int50 = matrix29.getRows();
        com.operations.Matrix.Matrix matrix51 = com.operations.Matrix.MatrixDecompositions.choleskyDecomposition(matrix29);
        com.operations.Matrix.Matrix matrix52 = com.operations.Matrix.MatrixDecompositions.choleskyDecomposition(matrix29);
        int int53 = matrix29.getCols();
        boolean boolean54 = com.operations.Matrix.MatrixUtils.isSquare(matrix29);
        org.junit.Assert.assertNotNull(matrix2);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertArrayEquals(doubleArray5, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertArrayEquals(doubleArray8, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 2 + "'", int11 == 2);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 2 + "'", int12 == 2);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 2 + "'", int13 == 2);
        org.junit.Assert.assertNotNull(matrixArray14);
        org.junit.Assert.assertNotNull(matrix15);
        org.junit.Assert.assertNotNull(matrix17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertArrayEquals(doubleArray22, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertArrayEquals(doubleArray25, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(matrix34);
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertArrayEquals(doubleArray37, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertArrayEquals(doubleArray40, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 2 + "'", int43 == 2);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 2 + "'", int44 == 2);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 2 + "'", int45 == 2);
        org.junit.Assert.assertNotNull(matrixArray46);
        org.junit.Assert.assertNotNull(matrix47);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 2 + "'", int50 == 2);
        org.junit.Assert.assertNotNull(matrix51);
        org.junit.Assert.assertNotNull(matrix52);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 2 + "'", int53 == 2);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + true + "'", boolean54 == true);
    }

    @Test
    public void test4987() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4987");
        com.operations.Matrix.Matrix matrix2 = com.operations.Matrix.MatrixTransformations.scale2D((double) 10, 21.023651153076518d);
        int int3 = matrix2.getCols();
        com.operations.Matrix.Matrix matrix4 = com.operations.Matrix.MatrixDecompositions.choleskyDecomposition(matrix2);
        int int5 = matrix4.getRows();
        org.junit.Assert.assertNotNull(matrix2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 2 + "'", int3 == 2);
        org.junit.Assert.assertNotNull(matrix4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 2 + "'", int5 == 2);
    }

    @Test
    public void test4988() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4988");
        double[] doubleArray2 = new double[] { 10, 'a' };
        double[] doubleArray5 = new double[] { 10, 'a' };
        double[][] doubleArray6 = new double[][] { doubleArray2, doubleArray5 };
        com.operations.Matrix.Matrix matrix7 = new com.operations.Matrix.Matrix(doubleArray6);
        int int8 = matrix7.getCols();
        int int9 = matrix7.getCols();
        int int10 = matrix7.getCols();
        com.operations.Matrix.Matrix matrix16 = com.operations.Matrix.MatrixUtils.generateRandomMatrix(100, (int) (byte) 1, (int) '#', (int) '#', 1L);
        double double19 = matrix16.getValue((int) '4', 0);
        double double20 = com.operations.Matrix.MatrixUtils.frobeniusNorm(matrix16);
        boolean boolean21 = com.operations.Matrix.MatrixUtils.isSquare(matrix16);
        boolean boolean23 = com.operations.Matrix.MatrixUtils.compare(matrix7, matrix16, (double) 100L);
        double[][] doubleArray24 = matrix7.getData();
        com.operations.Matrix.Matrix matrix26 = com.operations.Matrix.MatrixOperations.scalarMultiply(matrix7, (double) 100);
        double[][] doubleArray27 = matrix7.getData();
        com.operations.Matrix.Matrix matrix28 = com.operations.Matrix.MatrixOperations.transpose(matrix7);
        com.operations.Matrix.Matrix matrix29 = com.operations.Matrix.MatrixOperations.transpose(matrix28);
        com.operations.Matrix.Matrix matrix31 = com.operations.Matrix.MatrixTransformations.rotate2D(1.414213562373095d);
        com.operations.Matrix.Matrix matrix33 = com.operations.Matrix.MatrixOperations.scalarMultiply(matrix31, 21.023651153076518d);
        com.operations.Matrix.Matrix matrix34 = com.operations.Matrix.MatrixOperations.multiply(matrix29, matrix33);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertArrayEquals(doubleArray2, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertArrayEquals(doubleArray5, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 2 + "'", int8 == 2);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 2 + "'", int9 == 2);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 2 + "'", int10 == 2);
        org.junit.Assert.assertNotNull(matrix16);
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 35.0d + "'", double19 == 35.0d);
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 350.0d + "'", double20 == 350.0d);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertNotNull(matrix26);
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertNotNull(matrix28);
        org.junit.Assert.assertNotNull(matrix29);
        org.junit.Assert.assertNotNull(matrix31);
        org.junit.Assert.assertNotNull(matrix33);
        org.junit.Assert.assertNotNull(matrix34);
    }

    @Test
    public void test4989() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4989");
        com.operations.Matrix.Matrix matrix2 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0L, (double) (byte) 10);
        double[] doubleArray5 = new double[] { 10, 'a' };
        double[] doubleArray8 = new double[] { 10, 'a' };
        double[][] doubleArray9 = new double[][] { doubleArray5, doubleArray8 };
        com.operations.Matrix.Matrix matrix10 = new com.operations.Matrix.Matrix(doubleArray9);
        int int11 = matrix10.getCols();
        int int12 = matrix10.getCols();
        int int13 = matrix10.getCols();
        com.operations.Matrix.Matrix[] matrixArray14 = com.operations.Matrix.MatrixDecompositions.luDecomposition(matrix10);
        com.operations.Matrix.Matrix matrix15 = com.operations.Matrix.MatrixOperations.multiply(matrix2, matrix10);
        com.operations.Matrix.Matrix matrix17 = com.operations.Matrix.MatrixTransformations.rotate2D((double) (short) 100);
        boolean boolean19 = com.operations.Matrix.MatrixUtils.compare(matrix10, matrix17, (double) (byte) 0);
        com.operations.Matrix.Matrix[] matrixArray20 = com.operations.Matrix.MatrixDecompositions.luDecomposition(matrix10);
        com.operations.Matrix.Matrix matrix21 = com.operations.Matrix.MatrixDecompositions.choleskyDecomposition(matrix10);
        com.operations.Matrix.Matrix matrix22 = com.operations.Matrix.MatrixOperations.transpose(matrix21);
        com.operations.Matrix.Matrix matrix23 = com.operations.Matrix.MatrixDecompositions.choleskyDecomposition(matrix22);
        double[][] doubleArray24 = matrix22.getData();
        com.operations.Matrix.Matrix matrix25 = new com.operations.Matrix.Matrix(doubleArray24);
        com.operations.Matrix.Matrix matrix27 = com.operations.Matrix.MatrixOperations.scalarMultiply(matrix25, 365.68429006453096d);
        org.junit.Assert.assertNotNull(matrix2);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertArrayEquals(doubleArray5, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertArrayEquals(doubleArray8, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 2 + "'", int11 == 2);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 2 + "'", int12 == 2);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 2 + "'", int13 == 2);
        org.junit.Assert.assertNotNull(matrixArray14);
        org.junit.Assert.assertNotNull(matrix15);
        org.junit.Assert.assertNotNull(matrix17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(matrixArray20);
        org.junit.Assert.assertNotNull(matrix21);
        org.junit.Assert.assertNotNull(matrix22);
        org.junit.Assert.assertNotNull(matrix23);
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertNotNull(matrix27);
    }

    @Test
    public void test4990() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4990");
        com.operations.Matrix.Matrix matrix1 = com.operations.Matrix.MatrixTransformations.rotate2D(100.00000152293244d);
        org.junit.Assert.assertNotNull(matrix1);
    }

    @Test
    public void test4991() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4991");
        com.operations.Matrix.Matrix matrix2 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0L, (double) (byte) 10);
        double[] doubleArray5 = new double[] { 10, 'a' };
        double[] doubleArray8 = new double[] { 10, 'a' };
        double[][] doubleArray9 = new double[][] { doubleArray5, doubleArray8 };
        com.operations.Matrix.Matrix matrix10 = new com.operations.Matrix.Matrix(doubleArray9);
        int int11 = matrix10.getCols();
        int int12 = matrix10.getCols();
        int int13 = matrix10.getCols();
        com.operations.Matrix.Matrix[] matrixArray14 = com.operations.Matrix.MatrixDecompositions.luDecomposition(matrix10);
        com.operations.Matrix.Matrix matrix15 = com.operations.Matrix.MatrixOperations.multiply(matrix2, matrix10);
        com.operations.Matrix.Matrix matrix17 = com.operations.Matrix.MatrixTransformations.rotate2D((double) (short) 100);
        boolean boolean19 = com.operations.Matrix.MatrixUtils.compare(matrix10, matrix17, (double) (byte) 0);
        double[] doubleArray22 = new double[] { 10, 'a' };
        double[] doubleArray25 = new double[] { 10, 'a' };
        double[][] doubleArray26 = new double[][] { doubleArray22, doubleArray25 };
        com.operations.Matrix.Matrix matrix27 = new com.operations.Matrix.Matrix(doubleArray26);
        com.operations.Matrix.Matrix matrix28 = new com.operations.Matrix.Matrix(doubleArray26);
        com.operations.Matrix.Matrix matrix29 = new com.operations.Matrix.Matrix(doubleArray26);
        boolean boolean31 = com.operations.Matrix.MatrixUtils.compare(matrix10, matrix29, (double) (-1));
        double[][] doubleArray32 = matrix29.getData();
        com.operations.Matrix.Matrix[] matrixArray33 = com.operations.Matrix.MatrixDecompositions.luDecomposition(matrix29);
        com.operations.Matrix.Matrix matrix35 = com.operations.Matrix.MatrixTransformations.rotate2D((double) '4');
        double[] doubleArray38 = new double[] { 10, 'a' };
        double[] doubleArray41 = new double[] { 10, 'a' };
        double[][] doubleArray42 = new double[][] { doubleArray38, doubleArray41 };
        com.operations.Matrix.Matrix matrix43 = new com.operations.Matrix.Matrix(doubleArray42);
        com.operations.Matrix.Matrix matrix44 = new com.operations.Matrix.Matrix(doubleArray42);
        com.operations.Matrix.Matrix matrix46 = com.operations.Matrix.MatrixTransformations.rotate2D((double) (short) 100);
        double[] doubleArray49 = new double[] { 137.90576492663388d, (byte) -1 };
        double[] doubleArray50 = com.operations.Matrix.MatrixSolver.solveGaussian(matrix46, doubleArray49);
        com.operations.Matrix.Matrix matrix51 = com.operations.Matrix.MatrixOperations.add(matrix44, matrix46);
        boolean boolean52 = com.operations.Matrix.MatrixUtils.isSymmetric(matrix51);
        boolean boolean54 = com.operations.Matrix.MatrixUtils.compare(matrix35, matrix51, 364.0054944640259d);
        com.operations.Matrix.Matrix[] matrixArray55 = com.operations.Matrix.MatrixDecompositions.luDecomposition(matrix51);
        com.operations.Matrix.Matrix matrix56 = com.operations.Matrix.MatrixOperations.add(matrix29, matrix51);
        com.operations.Matrix.Matrix matrix59 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0L, (double) (byte) 10);
        int int60 = matrix59.getRows();
        com.operations.Matrix.Matrix matrix63 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0L, (double) (byte) 10);
        int int64 = matrix63.getRows();
        com.operations.Matrix.Matrix matrix66 = com.operations.Matrix.MatrixOperations.scalarMultiply(matrix63, (double) 2);
        com.operations.Matrix.Matrix matrix67 = com.operations.Matrix.MatrixOperations.subtract(matrix59, matrix63);
        com.operations.Matrix.Matrix matrix70 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0L, (double) (byte) 10);
        int int71 = matrix70.getRows();
        com.operations.Matrix.Matrix matrix77 = com.operations.Matrix.MatrixUtils.generateRandomMatrix(100, (int) (byte) 1, (int) '#', (int) '#', 1L);
        boolean boolean79 = com.operations.Matrix.MatrixUtils.compare(matrix70, matrix77, (double) 1.0f);
        com.operations.Matrix.Matrix matrix81 = com.operations.Matrix.MatrixOperations.scalarMultiply(matrix70, (double) 1L);
        boolean boolean83 = com.operations.Matrix.MatrixUtils.compare(matrix67, matrix81, 0.0d);
        int int84 = matrix81.getCols();
        com.operations.Matrix.Matrix[] matrixArray85 = com.operations.Matrix.MatrixDecompositions.luDecomposition(matrix81);
        com.operations.Matrix.Matrix matrix88 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0L, (double) (byte) 10);
        int int89 = matrix88.getRows();
        com.operations.Matrix.Matrix matrix91 = com.operations.Matrix.MatrixOperations.scalarMultiply(matrix88, (double) 2);
        double double92 = com.operations.Matrix.MatrixUtils.frobeniusNorm(matrix88);
        int int93 = matrix88.getRows();
        com.operations.Matrix.Matrix matrix94 = com.operations.Matrix.MatrixOperations.add(matrix81, matrix88);
        int int95 = matrix94.getRows();
        com.operations.Matrix.Matrix matrix97 = com.operations.Matrix.MatrixOperations.scalarMultiply(matrix94, (double) 1L);
        com.operations.Matrix.Matrix matrix98 = com.operations.Matrix.MatrixOperations.subtract(matrix29, matrix94);
        org.junit.Assert.assertNotNull(matrix2);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertArrayEquals(doubleArray5, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertArrayEquals(doubleArray8, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 2 + "'", int11 == 2);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 2 + "'", int12 == 2);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 2 + "'", int13 == 2);
        org.junit.Assert.assertNotNull(matrixArray14);
        org.junit.Assert.assertNotNull(matrix15);
        org.junit.Assert.assertNotNull(matrix17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertArrayEquals(doubleArray22, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertArrayEquals(doubleArray25, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertNotNull(matrixArray33);
        org.junit.Assert.assertNotNull(matrix35);
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertArrayEquals(doubleArray38, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertArrayEquals(doubleArray41, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertNotNull(matrix46);
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertArrayEquals(doubleArray49, new double[] { 137.90576492663388d, (-1.0d) }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertArrayEquals(doubleArray50, new double[] { (-24.931892522286255d), (-135.63701830716116d) }, 1.0E-15);
        org.junit.Assert.assertNotNull(matrix51);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + true + "'", boolean54 == true);
        org.junit.Assert.assertNotNull(matrixArray55);
        org.junit.Assert.assertNotNull(matrix56);
        org.junit.Assert.assertNotNull(matrix59);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 2 + "'", int60 == 2);
        org.junit.Assert.assertNotNull(matrix63);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 2 + "'", int64 == 2);
        org.junit.Assert.assertNotNull(matrix66);
        org.junit.Assert.assertNotNull(matrix67);
        org.junit.Assert.assertNotNull(matrix70);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 2 + "'", int71 == 2);
        org.junit.Assert.assertNotNull(matrix77);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertNotNull(matrix81);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertTrue("'" + int84 + "' != '" + 2 + "'", int84 == 2);
        org.junit.Assert.assertNotNull(matrixArray85);
        org.junit.Assert.assertNotNull(matrix88);
        org.junit.Assert.assertTrue("'" + int89 + "' != '" + 2 + "'", int89 == 2);
        org.junit.Assert.assertNotNull(matrix91);
        org.junit.Assert.assertTrue("'" + double92 + "' != '" + 10.0d + "'", double92 == 10.0d);
        org.junit.Assert.assertTrue("'" + int93 + "' != '" + 2 + "'", int93 == 2);
        org.junit.Assert.assertNotNull(matrix94);
        org.junit.Assert.assertTrue("'" + int95 + "' != '" + 2 + "'", int95 == 2);
        org.junit.Assert.assertNotNull(matrix97);
        org.junit.Assert.assertNotNull(matrix98);
    }

    @Test
    public void test4992() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4992");
        com.operations.Matrix.Matrix matrix4 = com.operations.Matrix.MatrixUtils.generateRandomMatrix(97, 52, 35, (int) (short) 10);
        double double5 = com.operations.Matrix.MatrixUtils.frobeniusNorm(matrix4);
        org.junit.Assert.assertNotNull(matrix4);
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 1687.019623799696d + "'", double5 == 1687.019623799696d);
    }

    @Test
    public void test4993() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4993");
        com.operations.Matrix.Matrix matrix4 = com.operations.Matrix.MatrixUtils.generateRandomMatrix((int) (byte) 10, 35, (int) (byte) 10, 52);
        com.operations.Matrix.Matrix matrix5 = com.operations.Matrix.MatrixOperations.transpose(matrix4);
        org.junit.Assert.assertNotNull(matrix4);
        org.junit.Assert.assertNotNull(matrix5);
    }

    @Test
    public void test4994() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4994");
        com.operations.Matrix.Matrix matrix2 = com.operations.Matrix.MatrixTransformations.scale2D((double) 100L, 1.0d);
        com.operations.Matrix.Matrix matrix5 = com.operations.Matrix.MatrixTransformations.scale2D((double) (byte) 100, 260.95643973734866d);
        com.operations.Matrix.Matrix matrix8 = com.operations.Matrix.MatrixTransformations.project2D((double) ' ', 0.0d);
        double[] doubleArray11 = new double[] { 10, 'a' };
        double[] doubleArray14 = new double[] { 10, 'a' };
        double[][] doubleArray15 = new double[][] { doubleArray11, doubleArray14 };
        com.operations.Matrix.Matrix matrix16 = new com.operations.Matrix.Matrix(doubleArray15);
        int int17 = matrix16.getCols();
        boolean boolean18 = com.operations.Matrix.MatrixUtils.isSquare(matrix16);
        com.operations.Matrix.Matrix matrix19 = com.operations.Matrix.MatrixOperations.transpose(matrix16);
        int int20 = matrix19.getRows();
        com.operations.Matrix.Matrix matrix23 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0L, (double) (byte) 10);
        double[] doubleArray26 = new double[] { 10, 'a' };
        double[] doubleArray29 = new double[] { 10, 'a' };
        double[][] doubleArray30 = new double[][] { doubleArray26, doubleArray29 };
        com.operations.Matrix.Matrix matrix31 = new com.operations.Matrix.Matrix(doubleArray30);
        int int32 = matrix31.getCols();
        int int33 = matrix31.getCols();
        int int34 = matrix31.getCols();
        com.operations.Matrix.Matrix[] matrixArray35 = com.operations.Matrix.MatrixDecompositions.luDecomposition(matrix31);
        com.operations.Matrix.Matrix matrix36 = com.operations.Matrix.MatrixOperations.multiply(matrix23, matrix31);
        com.operations.Matrix.Matrix matrix38 = com.operations.Matrix.MatrixTransformations.rotate2D((double) (short) 100);
        boolean boolean40 = com.operations.Matrix.MatrixUtils.compare(matrix31, matrix38, (double) (byte) 0);
        com.operations.Matrix.Matrix matrix41 = com.operations.Matrix.MatrixOperations.multiply(matrix19, matrix31);
        com.operations.Matrix.Matrix matrix42 = com.operations.Matrix.MatrixOperations.add(matrix8, matrix31);
        com.operations.Matrix.Matrix matrix43 = com.operations.Matrix.MatrixOperations.transpose(matrix8);
        matrix8.print();
        com.operations.Matrix.Matrix matrix45 = com.operations.Matrix.MatrixOperations.transpose(matrix8);
        com.operations.Matrix.Matrix matrix46 = com.operations.Matrix.MatrixOperations.subtract(matrix5, matrix45);
        com.operations.Matrix.Matrix matrix47 = com.operations.Matrix.MatrixOperations.subtract(matrix2, matrix45);
        // The following exception was thrown during execution in test generation
        try {
            matrix45.setValue((int) (short) 10, 10, 145.11374848717816d);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: Index 10 out of bounds for length 2");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(matrix2);
        org.junit.Assert.assertNotNull(matrix5);
        org.junit.Assert.assertNotNull(matrix8);
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertArrayEquals(doubleArray11, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertArrayEquals(doubleArray14, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 2 + "'", int17 == 2);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(matrix19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 2 + "'", int20 == 2);
        org.junit.Assert.assertNotNull(matrix23);
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertArrayEquals(doubleArray26, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertArrayEquals(doubleArray29, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 2 + "'", int32 == 2);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 2 + "'", int33 == 2);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 2 + "'", int34 == 2);
        org.junit.Assert.assertNotNull(matrixArray35);
        org.junit.Assert.assertNotNull(matrix36);
        org.junit.Assert.assertNotNull(matrix38);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(matrix41);
        org.junit.Assert.assertNotNull(matrix42);
        org.junit.Assert.assertNotNull(matrix43);
        org.junit.Assert.assertNotNull(matrix45);
        org.junit.Assert.assertNotNull(matrix46);
        org.junit.Assert.assertNotNull(matrix47);
    }

    @Test
    public void test4995() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4995");
        com.operations.Matrix.Matrix matrix1 = com.operations.Matrix.MatrixTransformations.rotate2D((double) (short) 100);
        double[] doubleArray4 = new double[] { 137.90576492663388d, (byte) -1 };
        double[] doubleArray5 = com.operations.Matrix.MatrixSolver.solveGaussian(matrix1, doubleArray4);
        com.operations.Matrix.Matrix matrix8 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0L, (double) (byte) 10);
        double[] doubleArray11 = new double[] { 10, 'a' };
        double[] doubleArray14 = new double[] { 10, 'a' };
        double[][] doubleArray15 = new double[][] { doubleArray11, doubleArray14 };
        com.operations.Matrix.Matrix matrix16 = new com.operations.Matrix.Matrix(doubleArray15);
        int int17 = matrix16.getCols();
        int int18 = matrix16.getCols();
        int int19 = matrix16.getCols();
        com.operations.Matrix.Matrix[] matrixArray20 = com.operations.Matrix.MatrixDecompositions.luDecomposition(matrix16);
        com.operations.Matrix.Matrix matrix21 = com.operations.Matrix.MatrixOperations.multiply(matrix8, matrix16);
        boolean boolean23 = com.operations.Matrix.MatrixUtils.compare(matrix1, matrix8, (double) (-1L));
        com.operations.Matrix.Matrix matrix25 = com.operations.Matrix.MatrixTransformations.rotate2D((-1.0d));
        com.operations.Matrix.Matrix matrix27 = com.operations.Matrix.MatrixTransformations.rotate2D((double) (-1L));
        com.operations.Matrix.Matrix matrix29 = com.operations.Matrix.MatrixTransformations.rotate2D((double) (short) 100);
        double[] doubleArray32 = new double[] { 137.90576492663388d, (byte) -1 };
        double[] doubleArray33 = com.operations.Matrix.MatrixSolver.solveGaussian(matrix29, doubleArray32);
        double[] doubleArray34 = com.operations.Matrix.MatrixSolver.solveGaussian(matrix27, doubleArray32);
        double[] doubleArray35 = com.operations.Matrix.MatrixSolver.solveGaussian(matrix25, doubleArray32);
        boolean boolean37 = com.operations.Matrix.MatrixUtils.compare(matrix8, matrix25, (double) '4');
        double[] doubleArray40 = new double[] { 10, 'a' };
        double[] doubleArray43 = new double[] { 10, 'a' };
        double[][] doubleArray44 = new double[][] { doubleArray40, doubleArray43 };
        com.operations.Matrix.Matrix matrix45 = new com.operations.Matrix.Matrix(doubleArray44);
        com.operations.Matrix.Matrix matrix46 = new com.operations.Matrix.Matrix(doubleArray44);
        com.operations.Matrix.Matrix matrix47 = new com.operations.Matrix.Matrix(doubleArray44);
        com.operations.Matrix.Matrix matrix48 = new com.operations.Matrix.Matrix(doubleArray44);
        com.operations.Matrix.Matrix matrix49 = new com.operations.Matrix.Matrix(doubleArray44);
        com.operations.Matrix.Matrix matrix51 = com.operations.Matrix.MatrixTransformations.rotate2D((double) 1.0f);
        com.operations.Matrix.Matrix matrix54 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0L, (double) (byte) 10);
        int int55 = matrix54.getRows();
        com.operations.Matrix.Matrix matrix57 = com.operations.Matrix.MatrixOperations.scalarMultiply(matrix54, (double) 2);
        double double58 = com.operations.Matrix.MatrixUtils.frobeniusNorm(matrix54);
        com.operations.Matrix.Matrix matrix61 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0L, (double) (byte) 10);
        int int62 = matrix61.getRows();
        com.operations.Matrix.Matrix matrix64 = com.operations.Matrix.MatrixOperations.scalarMultiply(matrix61, (double) 2);
        com.operations.Matrix.Matrix matrix65 = com.operations.Matrix.MatrixOperations.subtract(matrix54, matrix64);
        com.operations.Matrix.Matrix matrix66 = com.operations.Matrix.MatrixOperations.add(matrix51, matrix64);
        matrix51.print();
        double[] doubleArray70 = new double[] { 10, 'a' };
        double[] doubleArray73 = new double[] { 10, 'a' };
        double[][] doubleArray74 = new double[][] { doubleArray70, doubleArray73 };
        com.operations.Matrix.Matrix matrix75 = new com.operations.Matrix.Matrix(doubleArray74);
        com.operations.Matrix.Matrix matrix76 = com.operations.Matrix.MatrixOperations.transpose(matrix75);
        com.operations.Matrix.Matrix matrix79 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0L, (double) (byte) 10);
        int int80 = matrix79.getRows();
        com.operations.Matrix.Matrix matrix86 = com.operations.Matrix.MatrixUtils.generateRandomMatrix(100, (int) (byte) 1, (int) '#', (int) '#', 1L);
        boolean boolean88 = com.operations.Matrix.MatrixUtils.compare(matrix79, matrix86, (double) 1.0f);
        com.operations.Matrix.Matrix matrix90 = com.operations.Matrix.MatrixOperations.scalarMultiply(matrix79, (double) 1L);
        matrix79.print();
        com.operations.Matrix.Matrix matrix92 = com.operations.Matrix.MatrixOperations.multiply(matrix76, matrix79);
        com.operations.Matrix.Matrix matrix93 = com.operations.Matrix.MatrixOperations.multiply(matrix51, matrix79);
        int int94 = matrix79.getCols();
        boolean boolean96 = com.operations.Matrix.MatrixUtils.compare(matrix49, matrix79, 146.4308710620817d);
        com.operations.Matrix.Matrix matrix97 = com.operations.Matrix.MatrixOperations.multiply(matrix8, matrix79);
        boolean boolean98 = com.operations.Matrix.MatrixUtils.isSquare(matrix79);
        java.lang.Class<?> wildcardClass99 = matrix79.getClass();
        org.junit.Assert.assertNotNull(matrix1);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertArrayEquals(doubleArray4, new double[] { 137.90576492663388d, (-1.0d) }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertArrayEquals(doubleArray5, new double[] { (-24.931892522286255d), (-135.63701830716116d) }, 1.0E-15);
        org.junit.Assert.assertNotNull(matrix8);
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertArrayEquals(doubleArray11, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertArrayEquals(doubleArray14, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 2 + "'", int17 == 2);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 2 + "'", int18 == 2);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 2 + "'", int19 == 2);
        org.junit.Assert.assertNotNull(matrixArray20);
        org.junit.Assert.assertNotNull(matrix21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(matrix25);
        org.junit.Assert.assertNotNull(matrix27);
        org.junit.Assert.assertNotNull(matrix29);
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertArrayEquals(doubleArray32, new double[] { 137.90576492663388d, (-1.0d) }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertArrayEquals(doubleArray33, new double[] { (-24.931892522286255d), (-135.63701830716116d) }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertArrayEquals(doubleArray34, new double[] { 137.90221361711127d, 1.4069397643877004d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertArrayEquals(doubleArray35, new double[] { 137.90221361711127d, 1.4069397643877004d }, 1.0E-15);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertArrayEquals(doubleArray40, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertArrayEquals(doubleArray43, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertNotNull(matrix51);
        org.junit.Assert.assertNotNull(matrix54);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 2 + "'", int55 == 2);
        org.junit.Assert.assertNotNull(matrix57);
        org.junit.Assert.assertTrue("'" + double58 + "' != '" + 10.0d + "'", double58 == 10.0d);
        org.junit.Assert.assertNotNull(matrix61);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 2 + "'", int62 == 2);
        org.junit.Assert.assertNotNull(matrix64);
        org.junit.Assert.assertNotNull(matrix65);
        org.junit.Assert.assertNotNull(matrix66);
        org.junit.Assert.assertNotNull(doubleArray70);
        org.junit.Assert.assertArrayEquals(doubleArray70, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray73);
        org.junit.Assert.assertArrayEquals(doubleArray73, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray74);
        org.junit.Assert.assertNotNull(matrix76);
        org.junit.Assert.assertNotNull(matrix79);
        org.junit.Assert.assertTrue("'" + int80 + "' != '" + 2 + "'", int80 == 2);
        org.junit.Assert.assertNotNull(matrix86);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
        org.junit.Assert.assertNotNull(matrix90);
        org.junit.Assert.assertNotNull(matrix92);
        org.junit.Assert.assertNotNull(matrix93);
        org.junit.Assert.assertTrue("'" + int94 + "' != '" + 2 + "'", int94 == 2);
        org.junit.Assert.assertTrue("'" + boolean96 + "' != '" + true + "'", boolean96 == true);
        org.junit.Assert.assertNotNull(matrix97);
        org.junit.Assert.assertTrue("'" + boolean98 + "' != '" + true + "'", boolean98 == true);
        org.junit.Assert.assertNotNull(wildcardClass99);
    }

    @Test
    public void test4996() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4996");
        com.operations.Matrix.Matrix matrix5 = com.operations.Matrix.MatrixUtils.generateRandomMatrix(100, (int) (byte) 1, (int) '#', (int) '#', 1L);
        double double8 = matrix5.getValue((int) '4', 0);
        matrix5.print();
        com.operations.Matrix.Matrix matrix10 = com.operations.Matrix.MatrixOperations.transpose(matrix5);
        boolean boolean11 = com.operations.Matrix.MatrixUtils.isSquare(matrix10);
        int int12 = matrix10.getRows();
        org.junit.Assert.assertNotNull(matrix5);
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 35.0d + "'", double8 == 35.0d);
        org.junit.Assert.assertNotNull(matrix10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 1 + "'", int12 == 1);
    }

    @Test
    public void test4997() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4997");
        com.operations.Matrix.Matrix matrix2 = com.operations.Matrix.MatrixTransformations.project2D((double) 1L, 12.751772028997056d);
        boolean boolean3 = com.operations.Matrix.MatrixUtils.isSquare(matrix2);
        org.junit.Assert.assertNotNull(matrix2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
    }

    @Test
    public void test4998() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4998");
        com.operations.Matrix.Matrix matrix2 = com.operations.Matrix.MatrixTransformations.project2D(0.0d, (double) 0);
        boolean boolean3 = com.operations.Matrix.MatrixUtils.isSquare(matrix2);
        org.junit.Assert.assertNotNull(matrix2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
    }

    @Test
    public void test4999() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test4999");
        com.operations.Matrix.Matrix matrix2 = new com.operations.Matrix.Matrix((int) ' ', 0);
        matrix2.print();
        // The following exception was thrown during execution in test generation
        try {
            com.operations.Matrix.Matrix[] matrixArray4 = com.operations.Matrix.MatrixDecompositions.luDecomposition(matrix2);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Matrix must be square for LU decomposition.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test5000() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test5000");
        com.operations.Matrix.Matrix matrix2 = com.operations.Matrix.MatrixTransformations.project2D((double) ' ', 0.0d);
        double[] doubleArray5 = new double[] { 10, 'a' };
        double[] doubleArray8 = new double[] { 10, 'a' };
        double[][] doubleArray9 = new double[][] { doubleArray5, doubleArray8 };
        com.operations.Matrix.Matrix matrix10 = new com.operations.Matrix.Matrix(doubleArray9);
        int int11 = matrix10.getCols();
        boolean boolean12 = com.operations.Matrix.MatrixUtils.isSquare(matrix10);
        com.operations.Matrix.Matrix matrix13 = com.operations.Matrix.MatrixOperations.transpose(matrix10);
        int int14 = matrix13.getRows();
        com.operations.Matrix.Matrix matrix17 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0L, (double) (byte) 10);
        double[] doubleArray20 = new double[] { 10, 'a' };
        double[] doubleArray23 = new double[] { 10, 'a' };
        double[][] doubleArray24 = new double[][] { doubleArray20, doubleArray23 };
        com.operations.Matrix.Matrix matrix25 = new com.operations.Matrix.Matrix(doubleArray24);
        int int26 = matrix25.getCols();
        int int27 = matrix25.getCols();
        int int28 = matrix25.getCols();
        com.operations.Matrix.Matrix[] matrixArray29 = com.operations.Matrix.MatrixDecompositions.luDecomposition(matrix25);
        com.operations.Matrix.Matrix matrix30 = com.operations.Matrix.MatrixOperations.multiply(matrix17, matrix25);
        com.operations.Matrix.Matrix matrix32 = com.operations.Matrix.MatrixTransformations.rotate2D((double) (short) 100);
        boolean boolean34 = com.operations.Matrix.MatrixUtils.compare(matrix25, matrix32, (double) (byte) 0);
        com.operations.Matrix.Matrix matrix35 = com.operations.Matrix.MatrixOperations.multiply(matrix13, matrix25);
        com.operations.Matrix.Matrix matrix36 = com.operations.Matrix.MatrixOperations.add(matrix2, matrix25);
        com.operations.Matrix.Matrix matrix37 = com.operations.Matrix.MatrixOperations.transpose(matrix2);
        com.operations.Matrix.Matrix matrix40 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0L, (double) (byte) 10);
        double[] doubleArray43 = new double[] { 10, 'a' };
        double[] doubleArray46 = new double[] { 10, 'a' };
        double[][] doubleArray47 = new double[][] { doubleArray43, doubleArray46 };
        com.operations.Matrix.Matrix matrix48 = new com.operations.Matrix.Matrix(doubleArray47);
        int int49 = matrix48.getCols();
        int int50 = matrix48.getCols();
        int int51 = matrix48.getCols();
        com.operations.Matrix.Matrix[] matrixArray52 = com.operations.Matrix.MatrixDecompositions.luDecomposition(matrix48);
        com.operations.Matrix.Matrix matrix53 = com.operations.Matrix.MatrixOperations.multiply(matrix40, matrix48);
        com.operations.Matrix.Matrix matrix55 = com.operations.Matrix.MatrixTransformations.rotate2D((double) (short) 100);
        boolean boolean57 = com.operations.Matrix.MatrixUtils.compare(matrix48, matrix55, (double) (byte) 0);
        double[] doubleArray60 = new double[] { 10, 'a' };
        double[] doubleArray63 = new double[] { 10, 'a' };
        double[][] doubleArray64 = new double[][] { doubleArray60, doubleArray63 };
        com.operations.Matrix.Matrix matrix65 = new com.operations.Matrix.Matrix(doubleArray64);
        com.operations.Matrix.Matrix matrix66 = new com.operations.Matrix.Matrix(doubleArray64);
        com.operations.Matrix.Matrix matrix67 = new com.operations.Matrix.Matrix(doubleArray64);
        boolean boolean69 = com.operations.Matrix.MatrixUtils.compare(matrix48, matrix67, (double) (-1));
        com.operations.Matrix.Matrix matrix71 = com.operations.Matrix.MatrixTransformations.rotate2D((double) (short) 100);
        double[] doubleArray74 = new double[] { 137.90576492663388d, (byte) -1 };
        double[] doubleArray75 = com.operations.Matrix.MatrixSolver.solveGaussian(matrix71, doubleArray74);
        com.operations.Matrix.Matrix matrix78 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0L, (double) (byte) 10);
        double[] doubleArray81 = new double[] { 10, 'a' };
        double[] doubleArray84 = new double[] { 10, 'a' };
        double[][] doubleArray85 = new double[][] { doubleArray81, doubleArray84 };
        com.operations.Matrix.Matrix matrix86 = new com.operations.Matrix.Matrix(doubleArray85);
        int int87 = matrix86.getCols();
        int int88 = matrix86.getCols();
        int int89 = matrix86.getCols();
        com.operations.Matrix.Matrix[] matrixArray90 = com.operations.Matrix.MatrixDecompositions.luDecomposition(matrix86);
        com.operations.Matrix.Matrix matrix91 = com.operations.Matrix.MatrixOperations.multiply(matrix78, matrix86);
        boolean boolean93 = com.operations.Matrix.MatrixUtils.compare(matrix71, matrix78, (double) (-1L));
        com.operations.Matrix.Matrix matrix94 = com.operations.Matrix.MatrixOperations.add(matrix67, matrix78);
        com.operations.Matrix.Matrix matrix95 = com.operations.Matrix.MatrixOperations.subtract(matrix37, matrix94);
        boolean boolean96 = com.operations.Matrix.MatrixUtils.isSymmetric(matrix95);
        org.junit.Assert.assertNotNull(matrix2);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertArrayEquals(doubleArray5, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertArrayEquals(doubleArray8, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 2 + "'", int11 == 2);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(matrix13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 2 + "'", int14 == 2);
        org.junit.Assert.assertNotNull(matrix17);
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertArrayEquals(doubleArray20, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertArrayEquals(doubleArray23, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 2 + "'", int26 == 2);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 2 + "'", int27 == 2);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 2 + "'", int28 == 2);
        org.junit.Assert.assertNotNull(matrixArray29);
        org.junit.Assert.assertNotNull(matrix30);
        org.junit.Assert.assertNotNull(matrix32);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(matrix35);
        org.junit.Assert.assertNotNull(matrix36);
        org.junit.Assert.assertNotNull(matrix37);
        org.junit.Assert.assertNotNull(matrix40);
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertArrayEquals(doubleArray43, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray46);
        org.junit.Assert.assertArrayEquals(doubleArray46, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 2 + "'", int49 == 2);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 2 + "'", int50 == 2);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 2 + "'", int51 == 2);
        org.junit.Assert.assertNotNull(matrixArray52);
        org.junit.Assert.assertNotNull(matrix53);
        org.junit.Assert.assertNotNull(matrix55);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNotNull(doubleArray60);
        org.junit.Assert.assertArrayEquals(doubleArray60, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray63);
        org.junit.Assert.assertArrayEquals(doubleArray63, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray64);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertNotNull(matrix71);
        org.junit.Assert.assertNotNull(doubleArray74);
        org.junit.Assert.assertArrayEquals(doubleArray74, new double[] { 137.90576492663388d, (-1.0d) }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray75);
        org.junit.Assert.assertArrayEquals(doubleArray75, new double[] { (-24.931892522286255d), (-135.63701830716116d) }, 1.0E-15);
        org.junit.Assert.assertNotNull(matrix78);
        org.junit.Assert.assertNotNull(doubleArray81);
        org.junit.Assert.assertArrayEquals(doubleArray81, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray84);
        org.junit.Assert.assertArrayEquals(doubleArray84, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray85);
        org.junit.Assert.assertTrue("'" + int87 + "' != '" + 2 + "'", int87 == 2);
        org.junit.Assert.assertTrue("'" + int88 + "' != '" + 2 + "'", int88 == 2);
        org.junit.Assert.assertTrue("'" + int89 + "' != '" + 2 + "'", int89 == 2);
        org.junit.Assert.assertNotNull(matrixArray90);
        org.junit.Assert.assertNotNull(matrix91);
        org.junit.Assert.assertTrue("'" + boolean93 + "' != '" + false + "'", boolean93 == false);
        org.junit.Assert.assertNotNull(matrix94);
        org.junit.Assert.assertNotNull(matrix95);
        org.junit.Assert.assertTrue("'" + boolean96 + "' != '" + false + "'", boolean96 == false);
    }
}

