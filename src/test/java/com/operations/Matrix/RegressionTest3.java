package com.operations.Matrix;
import org.junit.FixMethodOrder;
import org.junit.Test;
import org.junit.runners.MethodSorters;

@FixMethodOrder(MethodSorters.NAME_ASCENDING)
public class RegressionTest3 {

    public static boolean debug = false;

    @Test
    public void test1501() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1501");
        com.operations.Matrix.Matrix matrix2 = com.operations.Matrix.MatrixTransformations.scale2D(100.00499987500625d, 0.0d);
        org.junit.Assert.assertNotNull(matrix2);
    }

    @Test
    public void test1502() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1502");
        com.operations.Matrix.Matrix matrix2 = com.operations.Matrix.MatrixTransformations.project2D(10.0d, (double) '#');
        double double3 = com.operations.Matrix.MatrixUtils.frobeniusNorm(matrix2);
        com.operations.Matrix.Matrix matrix6 = com.operations.Matrix.MatrixTransformations.scale2D((double) 1.0f, (double) 1);
        com.operations.Matrix.Matrix matrix8 = com.operations.Matrix.MatrixTransformations.rotate2D((double) 1.0f);
        com.operations.Matrix.Matrix matrix11 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0L, (double) (byte) 10);
        int int12 = matrix11.getRows();
        com.operations.Matrix.Matrix matrix14 = com.operations.Matrix.MatrixOperations.scalarMultiply(matrix11, (double) 2);
        double double15 = com.operations.Matrix.MatrixUtils.frobeniusNorm(matrix11);
        com.operations.Matrix.Matrix matrix18 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0L, (double) (byte) 10);
        int int19 = matrix18.getRows();
        com.operations.Matrix.Matrix matrix21 = com.operations.Matrix.MatrixOperations.scalarMultiply(matrix18, (double) 2);
        com.operations.Matrix.Matrix matrix22 = com.operations.Matrix.MatrixOperations.subtract(matrix11, matrix21);
        com.operations.Matrix.Matrix matrix23 = com.operations.Matrix.MatrixOperations.add(matrix8, matrix21);
        boolean boolean25 = com.operations.Matrix.MatrixUtils.compare(matrix6, matrix8, (double) (byte) -1);
        com.operations.Matrix.Matrix matrix26 = com.operations.Matrix.MatrixOperations.transpose(matrix8);
        com.operations.Matrix.Matrix matrix29 = com.operations.Matrix.MatrixTransformations.project2D((double) 10L, 10.0d);
        com.operations.Matrix.Matrix matrix31 = com.operations.Matrix.MatrixTransformations.rotate2D((double) (short) 100);
        double[] doubleArray34 = new double[] { 137.90576492663388d, (byte) -1 };
        double[] doubleArray35 = com.operations.Matrix.MatrixSolver.solveGaussian(matrix31, doubleArray34);
        com.operations.Matrix.Matrix matrix38 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0L, (double) (byte) 10);
        double[] doubleArray41 = new double[] { 10, 'a' };
        double[] doubleArray44 = new double[] { 10, 'a' };
        double[][] doubleArray45 = new double[][] { doubleArray41, doubleArray44 };
        com.operations.Matrix.Matrix matrix46 = new com.operations.Matrix.Matrix(doubleArray45);
        int int47 = matrix46.getCols();
        int int48 = matrix46.getCols();
        int int49 = matrix46.getCols();
        com.operations.Matrix.Matrix[] matrixArray50 = com.operations.Matrix.MatrixDecompositions.luDecomposition(matrix46);
        com.operations.Matrix.Matrix matrix51 = com.operations.Matrix.MatrixOperations.multiply(matrix38, matrix46);
        boolean boolean53 = com.operations.Matrix.MatrixUtils.compare(matrix31, matrix38, (double) (-1L));
        double[][] doubleArray54 = matrix31.getData();
        com.operations.Matrix.Matrix matrix56 = com.operations.Matrix.MatrixTransformations.rotate2D((double) (short) 100);
        double[] doubleArray59 = new double[] { 137.90576492663388d, (byte) -1 };
        double[] doubleArray60 = com.operations.Matrix.MatrixSolver.solveGaussian(matrix56, doubleArray59);
        double[] doubleArray61 = com.operations.Matrix.MatrixSolver.solveGaussian(matrix31, doubleArray59);
        double[] doubleArray62 = com.operations.Matrix.MatrixSolver.solveGaussian(matrix29, doubleArray61);
        double[] doubleArray63 = com.operations.Matrix.MatrixSolver.solveGaussian(matrix8, doubleArray62);
        com.operations.Matrix.Matrix matrix64 = com.operations.Matrix.MatrixDecompositions.choleskyDecomposition(matrix8);
        matrix8.print();
        boolean boolean67 = com.operations.Matrix.MatrixUtils.compare(matrix2, matrix8, 100.00499987500625d);
        java.lang.Class<?> wildcardClass68 = matrix2.getClass();
        org.junit.Assert.assertNotNull(matrix2);
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + 36.40054944640259d + "'", double3 == 36.40054944640259d);
        org.junit.Assert.assertNotNull(matrix6);
        org.junit.Assert.assertNotNull(matrix8);
        org.junit.Assert.assertNotNull(matrix11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 2 + "'", int12 == 2);
        org.junit.Assert.assertNotNull(matrix14);
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 10.0d + "'", double15 == 10.0d);
        org.junit.Assert.assertNotNull(matrix18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 2 + "'", int19 == 2);
        org.junit.Assert.assertNotNull(matrix21);
        org.junit.Assert.assertNotNull(matrix22);
        org.junit.Assert.assertNotNull(matrix23);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(matrix26);
        org.junit.Assert.assertNotNull(matrix29);
        org.junit.Assert.assertNotNull(matrix31);
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertArrayEquals(doubleArray34, new double[] { 137.90576492663388d, (-1.0d) }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertArrayEquals(doubleArray35, new double[] { (-24.931892522286255d), (-135.63701830716116d) }, 1.0E-15);
        org.junit.Assert.assertNotNull(matrix38);
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertArrayEquals(doubleArray41, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertArrayEquals(doubleArray44, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 2 + "'", int47 == 2);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 2 + "'", int48 == 2);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 2 + "'", int49 == 2);
        org.junit.Assert.assertNotNull(matrixArray50);
        org.junit.Assert.assertNotNull(matrix51);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(doubleArray54);
        org.junit.Assert.assertNotNull(matrix56);
        org.junit.Assert.assertNotNull(doubleArray59);
        org.junit.Assert.assertArrayEquals(doubleArray59, new double[] { 137.90576492663388d, (-1.0d) }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray60);
        org.junit.Assert.assertArrayEquals(doubleArray60, new double[] { (-24.931892522286255d), (-135.63701830716116d) }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray61);
        org.junit.Assert.assertArrayEquals(doubleArray61, new double[] { (-24.931892522286255d), (-135.63701830716116d) }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray62);
        org.junit.Assert.assertArrayEquals(doubleArray62, new double[] { (-2.4931892522286256d), (-13.563701830716116d) }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray63);
        org.junit.Assert.assertArrayEquals(doubleArray63, new double[] { (-2.7295287645732618d), (-13.518123861075072d) }, 1.0E-15);
        org.junit.Assert.assertNotNull(matrix64);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + true + "'", boolean67 == true);
        org.junit.Assert.assertNotNull(wildcardClass68);
    }

    @Test
    public void test1503() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1503");
        com.operations.Matrix.Matrix matrix5 = com.operations.Matrix.MatrixUtils.generateRandomMatrix((int) '#', 32, 35, (int) (short) 1, 0L);
        double double6 = com.operations.Matrix.MatrixUtils.frobeniusNorm(matrix5);
        com.operations.Matrix.Matrix matrix9 = com.operations.Matrix.MatrixTransformations.scale2D((double) (-1L), (double) '4');
        com.operations.Matrix.Matrix matrix10 = com.operations.Matrix.MatrixOperations.transpose(matrix9);
        double[] doubleArray13 = new double[] { 10, 'a' };
        double[] doubleArray16 = new double[] { 10, 'a' };
        double[][] doubleArray17 = new double[][] { doubleArray13, doubleArray16 };
        com.operations.Matrix.Matrix matrix18 = new com.operations.Matrix.Matrix(doubleArray17);
        com.operations.Matrix.Matrix matrix19 = new com.operations.Matrix.Matrix(doubleArray17);
        com.operations.Matrix.Matrix matrix21 = com.operations.Matrix.MatrixTransformations.rotate2D((double) (short) 100);
        double[] doubleArray24 = new double[] { 137.90576492663388d, (byte) -1 };
        double[] doubleArray25 = com.operations.Matrix.MatrixSolver.solveGaussian(matrix21, doubleArray24);
        com.operations.Matrix.Matrix matrix26 = com.operations.Matrix.MatrixOperations.add(matrix19, matrix21);
        com.operations.Matrix.Matrix matrix27 = com.operations.Matrix.MatrixOperations.transpose(matrix21);
        com.operations.Matrix.Matrix matrix28 = com.operations.Matrix.MatrixOperations.multiply(matrix10, matrix21);
        com.operations.Matrix.Matrix matrix29 = com.operations.Matrix.MatrixOperations.transpose(matrix10);
        // The following exception was thrown during execution in test generation
        try {
            com.operations.Matrix.Matrix matrix30 = com.operations.Matrix.MatrixOperations.add(matrix5, matrix29);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Matrices must have the same dimensions for addition.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(matrix5);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 693.7418269995209d + "'", double6 == 693.7418269995209d);
        org.junit.Assert.assertNotNull(matrix9);
        org.junit.Assert.assertNotNull(matrix10);
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertArrayEquals(doubleArray13, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertArrayEquals(doubleArray16, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertNotNull(matrix21);
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertArrayEquals(doubleArray24, new double[] { 137.90576492663388d, (-1.0d) }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertArrayEquals(doubleArray25, new double[] { (-24.931892522286255d), (-135.63701830716116d) }, 1.0E-15);
        org.junit.Assert.assertNotNull(matrix26);
        org.junit.Assert.assertNotNull(matrix27);
        org.junit.Assert.assertNotNull(matrix28);
        org.junit.Assert.assertNotNull(matrix29);
    }

    @Test
    public void test1504() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1504");
        com.operations.Matrix.Matrix matrix1 = com.operations.Matrix.MatrixTransformations.rotate2D(100.0d);
        int int2 = matrix1.getCols();
        com.operations.Matrix.Matrix matrix5 = com.operations.Matrix.MatrixTransformations.project2D((double) 1, 364.0054944640259d);
        com.operations.Matrix.Matrix matrix6 = com.operations.Matrix.MatrixOperations.multiply(matrix1, matrix5);
        com.operations.Matrix.Matrix matrix7 = com.operations.Matrix.MatrixDecompositions.choleskyDecomposition(matrix5);
        // The following exception was thrown during execution in test generation
        try {
            double double10 = matrix5.getValue((int) (short) 100, (int) '#');
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(matrix1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 2 + "'", int2 == 2);
        org.junit.Assert.assertNotNull(matrix5);
        org.junit.Assert.assertNotNull(matrix6);
        org.junit.Assert.assertNotNull(matrix7);
    }

    @Test
    public void test1505() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1505");
        com.operations.Matrix.Matrix matrix2 = com.operations.Matrix.MatrixTransformations.scale2D((double) (byte) 10, (double) 10);
        double[] doubleArray5 = new double[] { 10, 'a' };
        double[] doubleArray8 = new double[] { 10, 'a' };
        double[][] doubleArray9 = new double[][] { doubleArray5, doubleArray8 };
        com.operations.Matrix.Matrix matrix10 = new com.operations.Matrix.Matrix(doubleArray9);
        com.operations.Matrix.Matrix matrix11 = new com.operations.Matrix.Matrix(doubleArray9);
        boolean boolean12 = com.operations.Matrix.MatrixUtils.isSquare(matrix11);
        double[] doubleArray15 = new double[] { 10, 'a' };
        double[] doubleArray18 = new double[] { 10, 'a' };
        double[][] doubleArray19 = new double[][] { doubleArray15, doubleArray18 };
        com.operations.Matrix.Matrix matrix20 = new com.operations.Matrix.Matrix(doubleArray19);
        int int21 = matrix20.getCols();
        int int22 = matrix20.getCols();
        matrix20.print();
        double[] doubleArray26 = new double[] { 10, 'a' };
        double[] doubleArray29 = new double[] { 10, 'a' };
        double[][] doubleArray30 = new double[][] { doubleArray26, doubleArray29 };
        com.operations.Matrix.Matrix matrix31 = new com.operations.Matrix.Matrix(doubleArray30);
        boolean boolean33 = com.operations.Matrix.MatrixUtils.compare(matrix20, matrix31, (double) (-1));
        com.operations.Matrix.Matrix matrix34 = com.operations.Matrix.MatrixOperations.subtract(matrix11, matrix31);
        com.operations.Matrix.Matrix[] matrixArray35 = com.operations.Matrix.MatrixDecompositions.luDecomposition(matrix34);
        double[][] doubleArray36 = matrix34.getData();
        com.operations.Matrix.Matrix matrix37 = new com.operations.Matrix.Matrix(doubleArray36);
        com.operations.Matrix.Matrix matrix38 = com.operations.Matrix.MatrixOperations.multiply(matrix2, matrix37);
        com.operations.Matrix.Matrix matrix40 = com.operations.Matrix.MatrixOperations.scalarMultiply(matrix37, (double) (short) -1);
        double[] doubleArray43 = new double[] { 10, 'a' };
        double[] doubleArray46 = new double[] { 10, 'a' };
        double[][] doubleArray47 = new double[][] { doubleArray43, doubleArray46 };
        com.operations.Matrix.Matrix matrix48 = new com.operations.Matrix.Matrix(doubleArray47);
        com.operations.Matrix.Matrix matrix49 = new com.operations.Matrix.Matrix(doubleArray47);
        com.operations.Matrix.Matrix[] matrixArray50 = com.operations.Matrix.MatrixDecompositions.luDecomposition(matrix49);
        com.operations.Matrix.Matrix matrix53 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0, (double) 100L);
        com.operations.Matrix.Matrix matrix54 = com.operations.Matrix.MatrixOperations.subtract(matrix49, matrix53);
        com.operations.Matrix.Matrix matrix56 = com.operations.Matrix.MatrixTransformations.rotate2D((double) (short) 100);
        double[] doubleArray59 = new double[] { 137.90576492663388d, (byte) -1 };
        double[] doubleArray60 = com.operations.Matrix.MatrixSolver.solveGaussian(matrix56, doubleArray59);
        com.operations.Matrix.Matrix matrix63 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0L, (double) (byte) 10);
        double[] doubleArray66 = new double[] { 10, 'a' };
        double[] doubleArray69 = new double[] { 10, 'a' };
        double[][] doubleArray70 = new double[][] { doubleArray66, doubleArray69 };
        com.operations.Matrix.Matrix matrix71 = new com.operations.Matrix.Matrix(doubleArray70);
        int int72 = matrix71.getCols();
        int int73 = matrix71.getCols();
        int int74 = matrix71.getCols();
        com.operations.Matrix.Matrix[] matrixArray75 = com.operations.Matrix.MatrixDecompositions.luDecomposition(matrix71);
        com.operations.Matrix.Matrix matrix76 = com.operations.Matrix.MatrixOperations.multiply(matrix63, matrix71);
        boolean boolean78 = com.operations.Matrix.MatrixUtils.compare(matrix56, matrix63, (double) (-1L));
        com.operations.Matrix.Matrix matrix79 = com.operations.Matrix.MatrixOperations.add(matrix49, matrix56);
        com.operations.Matrix.Matrix matrix80 = com.operations.Matrix.MatrixOperations.multiply(matrix37, matrix79);
        com.operations.Matrix.Matrix matrix82 = com.operations.Matrix.MatrixTransformations.rotate2D((double) (short) 0);
        com.operations.Matrix.Matrix matrix85 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0L, (double) (byte) 10);
        int int86 = matrix85.getRows();
        com.operations.Matrix.Matrix matrix88 = com.operations.Matrix.MatrixOperations.scalarMultiply(matrix85, (double) 2);
        double double89 = com.operations.Matrix.MatrixUtils.frobeniusNorm(matrix85);
        com.operations.Matrix.Matrix matrix92 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0L, (double) (byte) 10);
        int int93 = matrix92.getRows();
        com.operations.Matrix.Matrix matrix95 = com.operations.Matrix.MatrixOperations.scalarMultiply(matrix92, (double) 2);
        com.operations.Matrix.Matrix matrix96 = com.operations.Matrix.MatrixOperations.subtract(matrix85, matrix95);
        com.operations.Matrix.Matrix matrix97 = com.operations.Matrix.MatrixOperations.add(matrix82, matrix85);
        com.operations.Matrix.Matrix matrix98 = com.operations.Matrix.MatrixOperations.multiply(matrix79, matrix85);
        int int99 = matrix79.getCols();
        org.junit.Assert.assertNotNull(matrix2);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertArrayEquals(doubleArray5, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertArrayEquals(doubleArray8, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertArrayEquals(doubleArray15, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertArrayEquals(doubleArray18, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 2 + "'", int21 == 2);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 2 + "'", int22 == 2);
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertArrayEquals(doubleArray26, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertArrayEquals(doubleArray29, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(matrix34);
        org.junit.Assert.assertNotNull(matrixArray35);
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertNotNull(matrix38);
        org.junit.Assert.assertNotNull(matrix40);
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertArrayEquals(doubleArray43, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray46);
        org.junit.Assert.assertArrayEquals(doubleArray46, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertNotNull(matrixArray50);
        org.junit.Assert.assertNotNull(matrix53);
        org.junit.Assert.assertNotNull(matrix54);
        org.junit.Assert.assertNotNull(matrix56);
        org.junit.Assert.assertNotNull(doubleArray59);
        org.junit.Assert.assertArrayEquals(doubleArray59, new double[] { 137.90576492663388d, (-1.0d) }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray60);
        org.junit.Assert.assertArrayEquals(doubleArray60, new double[] { (-24.931892522286255d), (-135.63701830716116d) }, 1.0E-15);
        org.junit.Assert.assertNotNull(matrix63);
        org.junit.Assert.assertNotNull(doubleArray66);
        org.junit.Assert.assertArrayEquals(doubleArray66, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray69);
        org.junit.Assert.assertArrayEquals(doubleArray69, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray70);
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 2 + "'", int72 == 2);
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + 2 + "'", int73 == 2);
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 2 + "'", int74 == 2);
        org.junit.Assert.assertNotNull(matrixArray75);
        org.junit.Assert.assertNotNull(matrix76);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertNotNull(matrix79);
        org.junit.Assert.assertNotNull(matrix80);
        org.junit.Assert.assertNotNull(matrix82);
        org.junit.Assert.assertNotNull(matrix85);
        org.junit.Assert.assertTrue("'" + int86 + "' != '" + 2 + "'", int86 == 2);
        org.junit.Assert.assertNotNull(matrix88);
        org.junit.Assert.assertTrue("'" + double89 + "' != '" + 10.0d + "'", double89 == 10.0d);
        org.junit.Assert.assertNotNull(matrix92);
        org.junit.Assert.assertTrue("'" + int93 + "' != '" + 2 + "'", int93 == 2);
        org.junit.Assert.assertNotNull(matrix95);
        org.junit.Assert.assertNotNull(matrix96);
        org.junit.Assert.assertNotNull(matrix97);
        org.junit.Assert.assertNotNull(matrix98);
        org.junit.Assert.assertTrue("'" + int99 + "' != '" + 2 + "'", int99 == 2);
    }

    @Test
    public void test1506() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1506");
        com.operations.Matrix.Matrix matrix2 = com.operations.Matrix.MatrixTransformations.project2D(137.15495886388925d, 146781.22563870353d);
        com.operations.Matrix.Matrix[] matrixArray3 = com.operations.Matrix.MatrixDecompositions.luDecomposition(matrix2);
        org.junit.Assert.assertNotNull(matrix2);
        org.junit.Assert.assertNotNull(matrixArray3);
    }

    @Test
    public void test1507() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1507");
        com.operations.Matrix.Matrix matrix1 = com.operations.Matrix.MatrixTransformations.rotate2D(1.414213562373095d);
        double[][] doubleArray2 = matrix1.getData();
        com.operations.Matrix.Matrix matrix3 = new com.operations.Matrix.Matrix(doubleArray2);
        double[] doubleArray6 = new double[] { 10, 'a' };
        double[] doubleArray9 = new double[] { 10, 'a' };
        double[][] doubleArray10 = new double[][] { doubleArray6, doubleArray9 };
        com.operations.Matrix.Matrix matrix11 = new com.operations.Matrix.Matrix(doubleArray10);
        com.operations.Matrix.Matrix matrix12 = new com.operations.Matrix.Matrix(doubleArray10);
        com.operations.Matrix.Matrix matrix14 = com.operations.Matrix.MatrixTransformations.rotate2D((double) (short) 100);
        double[] doubleArray17 = new double[] { 137.90576492663388d, (byte) -1 };
        double[] doubleArray18 = com.operations.Matrix.MatrixSolver.solveGaussian(matrix14, doubleArray17);
        com.operations.Matrix.Matrix matrix19 = com.operations.Matrix.MatrixOperations.add(matrix12, matrix14);
        com.operations.Matrix.Matrix matrix20 = com.operations.Matrix.MatrixOperations.transpose(matrix14);
        int int21 = matrix14.getCols();
        int int22 = matrix14.getRows();
        double[] doubleArray25 = new double[] { 10, 'a' };
        double[] doubleArray28 = new double[] { 10, 'a' };
        double[][] doubleArray29 = new double[][] { doubleArray25, doubleArray28 };
        com.operations.Matrix.Matrix matrix30 = new com.operations.Matrix.Matrix(doubleArray29);
        int int31 = matrix30.getCols();
        int int32 = matrix30.getCols();
        matrix30.print();
        double[] doubleArray36 = new double[] { 10, 'a' };
        double[] doubleArray39 = new double[] { 10, 'a' };
        double[][] doubleArray40 = new double[][] { doubleArray36, doubleArray39 };
        com.operations.Matrix.Matrix matrix41 = new com.operations.Matrix.Matrix(doubleArray40);
        boolean boolean43 = com.operations.Matrix.MatrixUtils.compare(matrix30, matrix41, (double) (-1));
        com.operations.Matrix.Matrix matrix44 = com.operations.Matrix.MatrixOperations.multiply(matrix14, matrix30);
        double double47 = matrix14.getValue((int) (short) 0, 0);
        com.operations.Matrix.Matrix matrix48 = com.operations.Matrix.MatrixOperations.transpose(matrix14);
        boolean boolean50 = com.operations.Matrix.MatrixUtils.compare(matrix3, matrix48, (double) '4');
        com.operations.Matrix.Matrix matrix51 = com.operations.Matrix.MatrixOperations.transpose(matrix3);
        org.junit.Assert.assertNotNull(matrix1);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertArrayEquals(doubleArray6, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertArrayEquals(doubleArray9, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertNotNull(matrix14);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertArrayEquals(doubleArray17, new double[] { 137.90576492663388d, (-1.0d) }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertArrayEquals(doubleArray18, new double[] { (-24.931892522286255d), (-135.63701830716116d) }, 1.0E-15);
        org.junit.Assert.assertNotNull(matrix19);
        org.junit.Assert.assertNotNull(matrix20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 2 + "'", int21 == 2);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 2 + "'", int22 == 2);
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertArrayEquals(doubleArray25, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertArrayEquals(doubleArray28, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 2 + "'", int31 == 2);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 2 + "'", int32 == 2);
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertArrayEquals(doubleArray36, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertArrayEquals(doubleArray39, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(matrix44);
        org.junit.Assert.assertTrue("'" + double47 + "' != '" + (-0.1736481776669303d) + "'", double47 == (-0.1736481776669303d));
        org.junit.Assert.assertNotNull(matrix48);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
        org.junit.Assert.assertNotNull(matrix51);
    }

    @Test
    public void test1508() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1508");
        com.operations.Matrix.Matrix matrix1 = com.operations.Matrix.MatrixTransformations.rotate2D(100.0d);
        int int2 = matrix1.getCols();
        int int3 = matrix1.getRows();
        double[] doubleArray6 = new double[] { 10, 'a' };
        double[] doubleArray9 = new double[] { 10, 'a' };
        double[][] doubleArray10 = new double[][] { doubleArray6, doubleArray9 };
        com.operations.Matrix.Matrix matrix11 = new com.operations.Matrix.Matrix(doubleArray10);
        com.operations.Matrix.Matrix matrix12 = com.operations.Matrix.MatrixOperations.transpose(matrix11);
        com.operations.Matrix.Matrix matrix15 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0L, (double) (byte) 10);
        int int16 = matrix15.getRows();
        com.operations.Matrix.Matrix matrix22 = com.operations.Matrix.MatrixUtils.generateRandomMatrix(100, (int) (byte) 1, (int) '#', (int) '#', 1L);
        boolean boolean24 = com.operations.Matrix.MatrixUtils.compare(matrix15, matrix22, (double) 1.0f);
        com.operations.Matrix.Matrix matrix26 = com.operations.Matrix.MatrixOperations.scalarMultiply(matrix15, (double) 1L);
        matrix15.print();
        com.operations.Matrix.Matrix matrix28 = com.operations.Matrix.MatrixOperations.multiply(matrix12, matrix15);
        boolean boolean29 = com.operations.Matrix.MatrixUtils.isSymmetric(matrix15);
        com.operations.Matrix.Matrix matrix30 = com.operations.Matrix.MatrixOperations.subtract(matrix1, matrix15);
        com.operations.Matrix.Matrix[] matrixArray31 = com.operations.Matrix.MatrixDecompositions.luDecomposition(matrix1);
        // The following exception was thrown during execution in test generation
        try {
            com.operations.Matrix.Matrix matrix32 = com.operations.Matrix.MatrixDecompositions.choleskyDecomposition(matrix1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Matrix is not positive definite.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(matrix1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 2 + "'", int2 == 2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 2 + "'", int3 == 2);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertArrayEquals(doubleArray6, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertArrayEquals(doubleArray9, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertNotNull(matrix12);
        org.junit.Assert.assertNotNull(matrix15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 2 + "'", int16 == 2);
        org.junit.Assert.assertNotNull(matrix22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(matrix26);
        org.junit.Assert.assertNotNull(matrix28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertNotNull(matrix30);
        org.junit.Assert.assertNotNull(matrixArray31);
    }

    @Test
    public void test1509() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1509");
        com.operations.Matrix.Matrix matrix2 = new com.operations.Matrix.Matrix((int) (byte) 1, (int) (byte) 10);
        // The following exception was thrown during execution in test generation
        try {
            com.operations.Matrix.Matrix matrix3 = com.operations.Matrix.MatrixDecompositions.choleskyDecomposition(matrix2);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Matrix must be square for Cholesky decomposition.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test1510() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1510");
        com.operations.Matrix.Matrix matrix4 = com.operations.Matrix.MatrixUtils.generateRandomMatrix((int) '4', (int) '4', 2, (int) (byte) 1);
        double[][] doubleArray5 = matrix4.getData();
        com.operations.Matrix.Matrix matrix6 = new com.operations.Matrix.Matrix(doubleArray5);
        int int7 = matrix6.getRows();
        org.junit.Assert.assertNotNull(matrix4);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 52 + "'", int7 == 52);
    }

    @Test
    public void test1511() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1511");
        com.operations.Matrix.Matrix matrix0 = null;
        com.operations.Matrix.Matrix matrix2 = com.operations.Matrix.MatrixTransformations.rotate2D((double) (byte) -1);
        com.operations.Matrix.Matrix matrix5 = com.operations.Matrix.MatrixTransformations.project2D((double) (-1L), (-1.0d));
        com.operations.Matrix.Matrix matrix8 = com.operations.Matrix.MatrixTransformations.scale2D((double) 1.0f, (double) 1);
        com.operations.Matrix.Matrix matrix10 = com.operations.Matrix.MatrixTransformations.rotate2D((double) 1.0f);
        com.operations.Matrix.Matrix matrix13 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0L, (double) (byte) 10);
        int int14 = matrix13.getRows();
        com.operations.Matrix.Matrix matrix16 = com.operations.Matrix.MatrixOperations.scalarMultiply(matrix13, (double) 2);
        double double17 = com.operations.Matrix.MatrixUtils.frobeniusNorm(matrix13);
        com.operations.Matrix.Matrix matrix20 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0L, (double) (byte) 10);
        int int21 = matrix20.getRows();
        com.operations.Matrix.Matrix matrix23 = com.operations.Matrix.MatrixOperations.scalarMultiply(matrix20, (double) 2);
        com.operations.Matrix.Matrix matrix24 = com.operations.Matrix.MatrixOperations.subtract(matrix13, matrix23);
        com.operations.Matrix.Matrix matrix25 = com.operations.Matrix.MatrixOperations.add(matrix10, matrix23);
        boolean boolean27 = com.operations.Matrix.MatrixUtils.compare(matrix8, matrix10, (double) (byte) -1);
        com.operations.Matrix.Matrix matrix28 = com.operations.Matrix.MatrixOperations.transpose(matrix10);
        com.operations.Matrix.Matrix matrix31 = com.operations.Matrix.MatrixTransformations.project2D((double) 10L, 10.0d);
        com.operations.Matrix.Matrix matrix33 = com.operations.Matrix.MatrixTransformations.rotate2D((double) (short) 100);
        double[] doubleArray36 = new double[] { 137.90576492663388d, (byte) -1 };
        double[] doubleArray37 = com.operations.Matrix.MatrixSolver.solveGaussian(matrix33, doubleArray36);
        com.operations.Matrix.Matrix matrix40 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0L, (double) (byte) 10);
        double[] doubleArray43 = new double[] { 10, 'a' };
        double[] doubleArray46 = new double[] { 10, 'a' };
        double[][] doubleArray47 = new double[][] { doubleArray43, doubleArray46 };
        com.operations.Matrix.Matrix matrix48 = new com.operations.Matrix.Matrix(doubleArray47);
        int int49 = matrix48.getCols();
        int int50 = matrix48.getCols();
        int int51 = matrix48.getCols();
        com.operations.Matrix.Matrix[] matrixArray52 = com.operations.Matrix.MatrixDecompositions.luDecomposition(matrix48);
        com.operations.Matrix.Matrix matrix53 = com.operations.Matrix.MatrixOperations.multiply(matrix40, matrix48);
        boolean boolean55 = com.operations.Matrix.MatrixUtils.compare(matrix33, matrix40, (double) (-1L));
        double[][] doubleArray56 = matrix33.getData();
        com.operations.Matrix.Matrix matrix58 = com.operations.Matrix.MatrixTransformations.rotate2D((double) (short) 100);
        double[] doubleArray61 = new double[] { 137.90576492663388d, (byte) -1 };
        double[] doubleArray62 = com.operations.Matrix.MatrixSolver.solveGaussian(matrix58, doubleArray61);
        double[] doubleArray63 = com.operations.Matrix.MatrixSolver.solveGaussian(matrix33, doubleArray61);
        double[] doubleArray64 = com.operations.Matrix.MatrixSolver.solveGaussian(matrix31, doubleArray63);
        double[] doubleArray65 = com.operations.Matrix.MatrixSolver.solveGaussian(matrix10, doubleArray64);
        double[] doubleArray66 = com.operations.Matrix.MatrixSolver.solveGaussian(matrix5, doubleArray64);
        double[] doubleArray67 = com.operations.Matrix.MatrixSolver.solveGaussian(matrix2, doubleArray64);
        // The following exception was thrown during execution in test generation
        try {
            double[] doubleArray68 = com.operations.Matrix.MatrixSolver.solveGaussian(matrix0, doubleArray67);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(matrix2);
        org.junit.Assert.assertNotNull(matrix5);
        org.junit.Assert.assertNotNull(matrix8);
        org.junit.Assert.assertNotNull(matrix10);
        org.junit.Assert.assertNotNull(matrix13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 2 + "'", int14 == 2);
        org.junit.Assert.assertNotNull(matrix16);
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + 10.0d + "'", double17 == 10.0d);
        org.junit.Assert.assertNotNull(matrix20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 2 + "'", int21 == 2);
        org.junit.Assert.assertNotNull(matrix23);
        org.junit.Assert.assertNotNull(matrix24);
        org.junit.Assert.assertNotNull(matrix25);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(matrix28);
        org.junit.Assert.assertNotNull(matrix31);
        org.junit.Assert.assertNotNull(matrix33);
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertArrayEquals(doubleArray36, new double[] { 137.90576492663388d, (-1.0d) }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertArrayEquals(doubleArray37, new double[] { (-24.931892522286255d), (-135.63701830716116d) }, 1.0E-15);
        org.junit.Assert.assertNotNull(matrix40);
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertArrayEquals(doubleArray43, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray46);
        org.junit.Assert.assertArrayEquals(doubleArray46, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 2 + "'", int49 == 2);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 2 + "'", int50 == 2);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 2 + "'", int51 == 2);
        org.junit.Assert.assertNotNull(matrixArray52);
        org.junit.Assert.assertNotNull(matrix53);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNotNull(doubleArray56);
        org.junit.Assert.assertNotNull(matrix58);
        org.junit.Assert.assertNotNull(doubleArray61);
        org.junit.Assert.assertArrayEquals(doubleArray61, new double[] { 137.90576492663388d, (-1.0d) }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray62);
        org.junit.Assert.assertArrayEquals(doubleArray62, new double[] { (-24.931892522286255d), (-135.63701830716116d) }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray63);
        org.junit.Assert.assertArrayEquals(doubleArray63, new double[] { (-24.931892522286255d), (-135.63701830716116d) }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray64);
        org.junit.Assert.assertArrayEquals(doubleArray64, new double[] { (-2.4931892522286256d), (-13.563701830716116d) }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray65);
        org.junit.Assert.assertArrayEquals(doubleArray65, new double[] { (-2.7295287645732618d), (-13.518123861075072d) }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray66);
        org.junit.Assert.assertArrayEquals(doubleArray66, new double[] { 2.4931892522286256d, 13.563701830716116d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray67);
        org.junit.Assert.assertArrayEquals(doubleArray67, new double[] { (-2.2560902902856936d), (-13.605148165384993d) }, 1.0E-15);
    }

    @Test
    public void test1512() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1512");
        com.operations.Matrix.Matrix matrix5 = com.operations.Matrix.MatrixUtils.generateRandomMatrix(32, 0, (int) (short) 100, (int) (short) -1, (long) 32);
        matrix5.print();
        // The following exception was thrown during execution in test generation
        try {
            com.operations.Matrix.Matrix[] matrixArray7 = com.operations.Matrix.MatrixDecompositions.luDecomposition(matrix5);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Matrix must be square for LU decomposition.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(matrix5);
    }

    @Test
    public void test1513() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1513");
        com.operations.Matrix.Matrix matrix2 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0L, (double) (byte) 10);
        int int3 = matrix2.getRows();
        com.operations.Matrix.Matrix matrix6 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0L, (double) (byte) 10);
        int int7 = matrix6.getRows();
        com.operations.Matrix.Matrix matrix9 = com.operations.Matrix.MatrixOperations.scalarMultiply(matrix6, (double) 2);
        com.operations.Matrix.Matrix matrix10 = com.operations.Matrix.MatrixOperations.subtract(matrix2, matrix6);
        com.operations.Matrix.Matrix matrix13 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0L, (double) (byte) 10);
        int int14 = matrix13.getRows();
        com.operations.Matrix.Matrix matrix20 = com.operations.Matrix.MatrixUtils.generateRandomMatrix(100, (int) (byte) 1, (int) '#', (int) '#', 1L);
        boolean boolean22 = com.operations.Matrix.MatrixUtils.compare(matrix13, matrix20, (double) 1.0f);
        com.operations.Matrix.Matrix matrix24 = com.operations.Matrix.MatrixOperations.scalarMultiply(matrix13, (double) 1L);
        boolean boolean26 = com.operations.Matrix.MatrixUtils.compare(matrix10, matrix24, 0.0d);
        // The following exception was thrown during execution in test generation
        try {
            matrix10.setValue((int) (byte) -1, 32, (double) 97);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: Index -1 out of bounds for length 2");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(matrix2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 2 + "'", int3 == 2);
        org.junit.Assert.assertNotNull(matrix6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 2 + "'", int7 == 2);
        org.junit.Assert.assertNotNull(matrix9);
        org.junit.Assert.assertNotNull(matrix10);
        org.junit.Assert.assertNotNull(matrix13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 2 + "'", int14 == 2);
        org.junit.Assert.assertNotNull(matrix20);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(matrix24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
    }

    @Test
    public void test1514() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1514");
        com.operations.Matrix.Matrix matrix1 = com.operations.Matrix.MatrixTransformations.rotate2D((double) 1.0f);
        com.operations.Matrix.Matrix matrix4 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0L, (double) (byte) 10);
        int int5 = matrix4.getRows();
        com.operations.Matrix.Matrix matrix7 = com.operations.Matrix.MatrixOperations.scalarMultiply(matrix4, (double) 2);
        double double8 = com.operations.Matrix.MatrixUtils.frobeniusNorm(matrix4);
        com.operations.Matrix.Matrix matrix11 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0L, (double) (byte) 10);
        int int12 = matrix11.getRows();
        com.operations.Matrix.Matrix matrix14 = com.operations.Matrix.MatrixOperations.scalarMultiply(matrix11, (double) 2);
        com.operations.Matrix.Matrix matrix15 = com.operations.Matrix.MatrixOperations.subtract(matrix4, matrix14);
        com.operations.Matrix.Matrix matrix16 = com.operations.Matrix.MatrixOperations.add(matrix1, matrix14);
        matrix1.print();
        double[] doubleArray20 = new double[] { 10, 'a' };
        double[] doubleArray23 = new double[] { 10, 'a' };
        double[][] doubleArray24 = new double[][] { doubleArray20, doubleArray23 };
        com.operations.Matrix.Matrix matrix25 = new com.operations.Matrix.Matrix(doubleArray24);
        com.operations.Matrix.Matrix matrix26 = com.operations.Matrix.MatrixOperations.transpose(matrix25);
        com.operations.Matrix.Matrix matrix29 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0L, (double) (byte) 10);
        int int30 = matrix29.getRows();
        com.operations.Matrix.Matrix matrix36 = com.operations.Matrix.MatrixUtils.generateRandomMatrix(100, (int) (byte) 1, (int) '#', (int) '#', 1L);
        boolean boolean38 = com.operations.Matrix.MatrixUtils.compare(matrix29, matrix36, (double) 1.0f);
        com.operations.Matrix.Matrix matrix40 = com.operations.Matrix.MatrixOperations.scalarMultiply(matrix29, (double) 1L);
        matrix29.print();
        com.operations.Matrix.Matrix matrix42 = com.operations.Matrix.MatrixOperations.multiply(matrix26, matrix29);
        com.operations.Matrix.Matrix matrix43 = com.operations.Matrix.MatrixOperations.multiply(matrix1, matrix29);
        com.operations.Matrix.Matrix matrix45 = com.operations.Matrix.MatrixTransformations.rotate2D((double) 1.0f);
        boolean boolean47 = com.operations.Matrix.MatrixUtils.compare(matrix29, matrix45, (double) (short) 0);
        com.operations.Matrix.Matrix matrix49 = com.operations.Matrix.MatrixOperations.scalarMultiply(matrix29, 1.0d);
        // The following exception was thrown during execution in test generation
        try {
            matrix29.setValue(52, 35, (double) (byte) 1);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: Index 52 out of bounds for length 2");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(matrix1);
        org.junit.Assert.assertNotNull(matrix4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 2 + "'", int5 == 2);
        org.junit.Assert.assertNotNull(matrix7);
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 10.0d + "'", double8 == 10.0d);
        org.junit.Assert.assertNotNull(matrix11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 2 + "'", int12 == 2);
        org.junit.Assert.assertNotNull(matrix14);
        org.junit.Assert.assertNotNull(matrix15);
        org.junit.Assert.assertNotNull(matrix16);
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertArrayEquals(doubleArray20, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertArrayEquals(doubleArray23, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertNotNull(matrix26);
        org.junit.Assert.assertNotNull(matrix29);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 2 + "'", int30 == 2);
        org.junit.Assert.assertNotNull(matrix36);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(matrix40);
        org.junit.Assert.assertNotNull(matrix42);
        org.junit.Assert.assertNotNull(matrix43);
        org.junit.Assert.assertNotNull(matrix45);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(matrix49);
    }

    @Test
    public void test1515() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1515");
        com.operations.Matrix.Matrix matrix1 = com.operations.Matrix.MatrixTransformations.rotate2D(100.0d);
        int int2 = matrix1.getCols();
        matrix1.print();
        com.operations.Matrix.Matrix matrix5 = com.operations.Matrix.MatrixOperations.scalarMultiply(matrix1, (double) (byte) 1);
        boolean boolean6 = com.operations.Matrix.MatrixUtils.isSymmetric(matrix1);
        com.operations.Matrix.Matrix matrix8 = com.operations.Matrix.MatrixTransformations.rotate2D((-1.0d));
        com.operations.Matrix.Matrix matrix10 = com.operations.Matrix.MatrixTransformations.rotate2D((double) (-1L));
        com.operations.Matrix.Matrix matrix12 = com.operations.Matrix.MatrixTransformations.rotate2D((double) (short) 100);
        double[] doubleArray15 = new double[] { 137.90576492663388d, (byte) -1 };
        double[] doubleArray16 = com.operations.Matrix.MatrixSolver.solveGaussian(matrix12, doubleArray15);
        double[] doubleArray17 = com.operations.Matrix.MatrixSolver.solveGaussian(matrix10, doubleArray15);
        double[] doubleArray18 = com.operations.Matrix.MatrixSolver.solveGaussian(matrix8, doubleArray15);
        double[] doubleArray19 = com.operations.Matrix.MatrixSolver.solveGaussian(matrix1, doubleArray18);
        // The following exception was thrown during execution in test generation
        try {
            double double22 = matrix1.getValue((int) '4', 35);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(matrix1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 2 + "'", int2 == 2);
        org.junit.Assert.assertNotNull(matrix5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(matrix8);
        org.junit.Assert.assertNotNull(matrix10);
        org.junit.Assert.assertNotNull(matrix12);
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertArrayEquals(doubleArray15, new double[] { 137.90576492663388d, (-1.0d) }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertArrayEquals(doubleArray16, new double[] { (-24.931892522286255d), (-135.63701830716116d) }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertArrayEquals(doubleArray17, new double[] { 137.90221361711127d, 1.4069397643877004d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertArrayEquals(doubleArray18, new double[] { 137.90221361711127d, 1.4069397643877004d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertArrayEquals(doubleArray19, new double[] { (-22.56090290285694d), (-136.05148165384995d) }, 1.0E-15);
    }

    @Test
    public void test1516() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1516");
        double[] doubleArray2 = new double[] { 10, 'a' };
        double[] doubleArray5 = new double[] { 10, 'a' };
        double[][] doubleArray6 = new double[][] { doubleArray2, doubleArray5 };
        com.operations.Matrix.Matrix matrix7 = new com.operations.Matrix.Matrix(doubleArray6);
        com.operations.Matrix.Matrix matrix8 = new com.operations.Matrix.Matrix(doubleArray6);
        com.operations.Matrix.Matrix matrix10 = com.operations.Matrix.MatrixTransformations.rotate2D((double) (short) 100);
        double[] doubleArray13 = new double[] { 137.90576492663388d, (byte) -1 };
        double[] doubleArray14 = com.operations.Matrix.MatrixSolver.solveGaussian(matrix10, doubleArray13);
        com.operations.Matrix.Matrix matrix15 = com.operations.Matrix.MatrixOperations.add(matrix8, matrix10);
        com.operations.Matrix.Matrix matrix16 = com.operations.Matrix.MatrixOperations.transpose(matrix10);
        double double17 = com.operations.Matrix.MatrixUtils.frobeniusNorm(matrix16);
        double[][] doubleArray18 = matrix16.getData();
        com.operations.Matrix.Matrix matrix20 = com.operations.Matrix.MatrixOperations.scalarMultiply(matrix16, (double) 'a');
        double double21 = com.operations.Matrix.MatrixUtils.frobeniusNorm(matrix16);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertArrayEquals(doubleArray2, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertArrayEquals(doubleArray5, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertNotNull(matrix10);
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertArrayEquals(doubleArray13, new double[] { 137.90576492663388d, (-1.0d) }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertArrayEquals(doubleArray14, new double[] { (-24.931892522286255d), (-135.63701830716116d) }, 1.0E-15);
        org.junit.Assert.assertNotNull(matrix15);
        org.junit.Assert.assertNotNull(matrix16);
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + 1.414213562373095d + "'", double17 == 1.414213562373095d);
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertNotNull(matrix20);
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 1.414213562373095d + "'", double21 == 1.414213562373095d);
    }

    @Test
    public void test1517() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1517");
        com.operations.Matrix.Matrix matrix2 = com.operations.Matrix.MatrixTransformations.project2D((double) 1, 364.0054944640259d);
        com.operations.Matrix.Matrix matrix4 = com.operations.Matrix.MatrixOperations.scalarMultiply(matrix2, (double) (-1));
        com.operations.Matrix.Matrix[] matrixArray5 = com.operations.Matrix.MatrixDecompositions.luDecomposition(matrix4);
        org.junit.Assert.assertNotNull(matrix2);
        org.junit.Assert.assertNotNull(matrix4);
        org.junit.Assert.assertNotNull(matrixArray5);
    }

    @Test
    public void test1518() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1518");
        com.operations.Matrix.Matrix matrix5 = com.operations.Matrix.MatrixUtils.generateRandomMatrix((int) 'a', (int) '4', 1, 0, (long) (short) 0);
        double double6 = com.operations.Matrix.MatrixUtils.frobeniusNorm(matrix5);
        matrix5.setValue((int) (short) 1, 0, (double) (-1));
        org.junit.Assert.assertNotNull(matrix5);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 41.14922324710797d + "'", double6 == 41.14922324710797d);
    }

    @Test
    public void test1519() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1519");
        com.operations.Matrix.Matrix matrix2 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0L, (double) (byte) 10);
        int int3 = matrix2.getRows();
        com.operations.Matrix.Matrix matrix9 = com.operations.Matrix.MatrixUtils.generateRandomMatrix(100, (int) (byte) 1, (int) '#', (int) '#', 1L);
        boolean boolean11 = com.operations.Matrix.MatrixUtils.compare(matrix2, matrix9, (double) 1.0f);
        com.operations.Matrix.Matrix matrix13 = com.operations.Matrix.MatrixOperations.scalarMultiply(matrix2, (double) 1L);
        double[] doubleArray16 = new double[] { 10, 'a' };
        double[] doubleArray19 = new double[] { 10, 'a' };
        double[][] doubleArray20 = new double[][] { doubleArray16, doubleArray19 };
        com.operations.Matrix.Matrix matrix21 = new com.operations.Matrix.Matrix(doubleArray20);
        com.operations.Matrix.Matrix matrix22 = new com.operations.Matrix.Matrix(doubleArray20);
        com.operations.Matrix.Matrix matrix24 = com.operations.Matrix.MatrixTransformations.rotate2D((double) (short) 100);
        double[] doubleArray27 = new double[] { 137.90576492663388d, (byte) -1 };
        double[] doubleArray28 = com.operations.Matrix.MatrixSolver.solveGaussian(matrix24, doubleArray27);
        com.operations.Matrix.Matrix matrix29 = com.operations.Matrix.MatrixOperations.add(matrix22, matrix24);
        com.operations.Matrix.Matrix matrix30 = com.operations.Matrix.MatrixDecompositions.choleskyDecomposition(matrix22);
        com.operations.Matrix.Matrix matrix33 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0L, (double) (byte) 10);
        double[] doubleArray36 = new double[] { 10, 'a' };
        double[] doubleArray39 = new double[] { 10, 'a' };
        double[][] doubleArray40 = new double[][] { doubleArray36, doubleArray39 };
        com.operations.Matrix.Matrix matrix41 = new com.operations.Matrix.Matrix(doubleArray40);
        int int42 = matrix41.getCols();
        int int43 = matrix41.getCols();
        int int44 = matrix41.getCols();
        com.operations.Matrix.Matrix[] matrixArray45 = com.operations.Matrix.MatrixDecompositions.luDecomposition(matrix41);
        com.operations.Matrix.Matrix matrix46 = com.operations.Matrix.MatrixOperations.multiply(matrix33, matrix41);
        com.operations.Matrix.Matrix matrix48 = com.operations.Matrix.MatrixTransformations.rotate2D((double) (short) 100);
        boolean boolean50 = com.operations.Matrix.MatrixUtils.compare(matrix41, matrix48, (double) (byte) 0);
        com.operations.Matrix.Matrix matrix51 = com.operations.Matrix.MatrixOperations.transpose(matrix41);
        com.operations.Matrix.Matrix matrix53 = com.operations.Matrix.MatrixOperations.scalarMultiply(matrix51, (double) 10);
        com.operations.Matrix.Matrix matrix54 = com.operations.Matrix.MatrixOperations.add(matrix30, matrix51);
        com.operations.Matrix.Matrix matrix55 = com.operations.Matrix.MatrixOperations.multiply(matrix13, matrix54);
        com.operations.Matrix.Matrix[] matrixArray56 = com.operations.Matrix.MatrixDecompositions.luDecomposition(matrix13);
        org.junit.Assert.assertNotNull(matrix2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 2 + "'", int3 == 2);
        org.junit.Assert.assertNotNull(matrix9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(matrix13);
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertArrayEquals(doubleArray16, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertArrayEquals(doubleArray19, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertNotNull(matrix24);
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertArrayEquals(doubleArray27, new double[] { 137.90576492663388d, (-1.0d) }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertArrayEquals(doubleArray28, new double[] { (-24.931892522286255d), (-135.63701830716116d) }, 1.0E-15);
        org.junit.Assert.assertNotNull(matrix29);
        org.junit.Assert.assertNotNull(matrix30);
        org.junit.Assert.assertNotNull(matrix33);
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertArrayEquals(doubleArray36, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertArrayEquals(doubleArray39, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 2 + "'", int42 == 2);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 2 + "'", int43 == 2);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 2 + "'", int44 == 2);
        org.junit.Assert.assertNotNull(matrixArray45);
        org.junit.Assert.assertNotNull(matrix46);
        org.junit.Assert.assertNotNull(matrix48);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(matrix51);
        org.junit.Assert.assertNotNull(matrix53);
        org.junit.Assert.assertNotNull(matrix54);
        org.junit.Assert.assertNotNull(matrix55);
        org.junit.Assert.assertNotNull(matrixArray56);
    }

    @Test
    public void test1520() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1520");
        double[] doubleArray2 = new double[] { 10, 'a' };
        double[] doubleArray5 = new double[] { 10, 'a' };
        double[][] doubleArray6 = new double[][] { doubleArray2, doubleArray5 };
        com.operations.Matrix.Matrix matrix7 = new com.operations.Matrix.Matrix(doubleArray6);
        com.operations.Matrix.Matrix matrix8 = new com.operations.Matrix.Matrix(doubleArray6);
        com.operations.Matrix.Matrix[] matrixArray9 = com.operations.Matrix.MatrixDecompositions.luDecomposition(matrix8);
        double double10 = com.operations.Matrix.MatrixUtils.frobeniusNorm(matrix8);
        double[] doubleArray13 = new double[] { 10, 'a' };
        double[] doubleArray16 = new double[] { 10, 'a' };
        double[][] doubleArray17 = new double[][] { doubleArray13, doubleArray16 };
        com.operations.Matrix.Matrix matrix18 = new com.operations.Matrix.Matrix(doubleArray17);
        com.operations.Matrix.Matrix matrix19 = new com.operations.Matrix.Matrix(doubleArray17);
        boolean boolean20 = com.operations.Matrix.MatrixUtils.isSquare(matrix19);
        double[] doubleArray23 = new double[] { 10, 'a' };
        double[] doubleArray26 = new double[] { 10, 'a' };
        double[][] doubleArray27 = new double[][] { doubleArray23, doubleArray26 };
        com.operations.Matrix.Matrix matrix28 = new com.operations.Matrix.Matrix(doubleArray27);
        int int29 = matrix28.getCols();
        int int30 = matrix28.getCols();
        matrix28.print();
        double[] doubleArray34 = new double[] { 10, 'a' };
        double[] doubleArray37 = new double[] { 10, 'a' };
        double[][] doubleArray38 = new double[][] { doubleArray34, doubleArray37 };
        com.operations.Matrix.Matrix matrix39 = new com.operations.Matrix.Matrix(doubleArray38);
        boolean boolean41 = com.operations.Matrix.MatrixUtils.compare(matrix28, matrix39, (double) (-1));
        com.operations.Matrix.Matrix matrix42 = com.operations.Matrix.MatrixOperations.subtract(matrix19, matrix39);
        com.operations.Matrix.Matrix[] matrixArray43 = com.operations.Matrix.MatrixDecompositions.luDecomposition(matrix42);
        double[][] doubleArray44 = matrix42.getData();
        com.operations.Matrix.Matrix matrix47 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0L, (double) (byte) 10);
        double[] doubleArray50 = new double[] { 10, 'a' };
        double[] doubleArray53 = new double[] { 10, 'a' };
        double[][] doubleArray54 = new double[][] { doubleArray50, doubleArray53 };
        com.operations.Matrix.Matrix matrix55 = new com.operations.Matrix.Matrix(doubleArray54);
        int int56 = matrix55.getCols();
        int int57 = matrix55.getCols();
        int int58 = matrix55.getCols();
        com.operations.Matrix.Matrix[] matrixArray59 = com.operations.Matrix.MatrixDecompositions.luDecomposition(matrix55);
        com.operations.Matrix.Matrix matrix60 = com.operations.Matrix.MatrixOperations.multiply(matrix47, matrix55);
        int int61 = matrix55.getRows();
        com.operations.Matrix.Matrix matrix62 = com.operations.Matrix.MatrixOperations.multiply(matrix42, matrix55);
        boolean boolean64 = com.operations.Matrix.MatrixUtils.compare(matrix8, matrix62, (double) 2);
        com.operations.Matrix.Matrix matrix65 = com.operations.Matrix.MatrixOperations.transpose(matrix62);
        com.operations.Matrix.Matrix matrix66 = com.operations.Matrix.MatrixOperations.transpose(matrix65);
        // The following exception was thrown during execution in test generation
        try {
            matrix65.setValue(10, 10, 52.009614495783374d);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: Index 10 out of bounds for length 2");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertArrayEquals(doubleArray2, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertArrayEquals(doubleArray5, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertNotNull(matrixArray9);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 137.90576492663388d + "'", double10 == 137.90576492663388d);
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertArrayEquals(doubleArray13, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertArrayEquals(doubleArray16, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertArrayEquals(doubleArray23, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertArrayEquals(doubleArray26, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 2 + "'", int29 == 2);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 2 + "'", int30 == 2);
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertArrayEquals(doubleArray34, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertArrayEquals(doubleArray37, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(matrix42);
        org.junit.Assert.assertNotNull(matrixArray43);
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertNotNull(matrix47);
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertArrayEquals(doubleArray50, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertArrayEquals(doubleArray53, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray54);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 2 + "'", int56 == 2);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 2 + "'", int57 == 2);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 2 + "'", int58 == 2);
        org.junit.Assert.assertNotNull(matrixArray59);
        org.junit.Assert.assertNotNull(matrix60);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 2 + "'", int61 == 2);
        org.junit.Assert.assertNotNull(matrix62);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertNotNull(matrix65);
        org.junit.Assert.assertNotNull(matrix66);
    }

    @Test
    public void test1521() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1521");
        com.operations.Matrix.Matrix matrix5 = com.operations.Matrix.MatrixUtils.generateRandomMatrix(100, 32, (int) (byte) 1, 10, (long) 1);
        org.junit.Assert.assertNotNull(matrix5);
    }

    @Test
    public void test1522() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1522");
        com.operations.Matrix.Matrix matrix2 = new com.operations.Matrix.Matrix(100, (int) (byte) 0);
        int int3 = matrix2.getCols();
        // The following exception was thrown during execution in test generation
        try {
            com.operations.Matrix.Matrix matrix4 = com.operations.Matrix.MatrixOperations.transpose(matrix2);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: Index 0 out of bounds for length 0");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
    }

    @Test
    public void test1523() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1523");
        com.operations.Matrix.Matrix matrix2 = com.operations.Matrix.MatrixTransformations.scale2D((double) 1.0f, (double) 1);
        com.operations.Matrix.Matrix matrix4 = com.operations.Matrix.MatrixTransformations.rotate2D((double) 1.0f);
        com.operations.Matrix.Matrix matrix7 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0L, (double) (byte) 10);
        int int8 = matrix7.getRows();
        com.operations.Matrix.Matrix matrix10 = com.operations.Matrix.MatrixOperations.scalarMultiply(matrix7, (double) 2);
        double double11 = com.operations.Matrix.MatrixUtils.frobeniusNorm(matrix7);
        com.operations.Matrix.Matrix matrix14 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0L, (double) (byte) 10);
        int int15 = matrix14.getRows();
        com.operations.Matrix.Matrix matrix17 = com.operations.Matrix.MatrixOperations.scalarMultiply(matrix14, (double) 2);
        com.operations.Matrix.Matrix matrix18 = com.operations.Matrix.MatrixOperations.subtract(matrix7, matrix17);
        com.operations.Matrix.Matrix matrix19 = com.operations.Matrix.MatrixOperations.add(matrix4, matrix17);
        boolean boolean21 = com.operations.Matrix.MatrixUtils.compare(matrix2, matrix4, (double) (byte) -1);
        com.operations.Matrix.Matrix matrix22 = com.operations.Matrix.MatrixOperations.transpose(matrix4);
        com.operations.Matrix.Matrix matrix25 = com.operations.Matrix.MatrixTransformations.project2D((double) 10L, 10.0d);
        com.operations.Matrix.Matrix matrix27 = com.operations.Matrix.MatrixTransformations.rotate2D((double) (short) 100);
        double[] doubleArray30 = new double[] { 137.90576492663388d, (byte) -1 };
        double[] doubleArray31 = com.operations.Matrix.MatrixSolver.solveGaussian(matrix27, doubleArray30);
        com.operations.Matrix.Matrix matrix34 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0L, (double) (byte) 10);
        double[] doubleArray37 = new double[] { 10, 'a' };
        double[] doubleArray40 = new double[] { 10, 'a' };
        double[][] doubleArray41 = new double[][] { doubleArray37, doubleArray40 };
        com.operations.Matrix.Matrix matrix42 = new com.operations.Matrix.Matrix(doubleArray41);
        int int43 = matrix42.getCols();
        int int44 = matrix42.getCols();
        int int45 = matrix42.getCols();
        com.operations.Matrix.Matrix[] matrixArray46 = com.operations.Matrix.MatrixDecompositions.luDecomposition(matrix42);
        com.operations.Matrix.Matrix matrix47 = com.operations.Matrix.MatrixOperations.multiply(matrix34, matrix42);
        boolean boolean49 = com.operations.Matrix.MatrixUtils.compare(matrix27, matrix34, (double) (-1L));
        double[][] doubleArray50 = matrix27.getData();
        com.operations.Matrix.Matrix matrix52 = com.operations.Matrix.MatrixTransformations.rotate2D((double) (short) 100);
        double[] doubleArray55 = new double[] { 137.90576492663388d, (byte) -1 };
        double[] doubleArray56 = com.operations.Matrix.MatrixSolver.solveGaussian(matrix52, doubleArray55);
        double[] doubleArray57 = com.operations.Matrix.MatrixSolver.solveGaussian(matrix27, doubleArray55);
        double[] doubleArray58 = com.operations.Matrix.MatrixSolver.solveGaussian(matrix25, doubleArray57);
        double[] doubleArray59 = com.operations.Matrix.MatrixSolver.solveGaussian(matrix4, doubleArray58);
        java.lang.Class<?> wildcardClass60 = matrix4.getClass();
        org.junit.Assert.assertNotNull(matrix2);
        org.junit.Assert.assertNotNull(matrix4);
        org.junit.Assert.assertNotNull(matrix7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 2 + "'", int8 == 2);
        org.junit.Assert.assertNotNull(matrix10);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 10.0d + "'", double11 == 10.0d);
        org.junit.Assert.assertNotNull(matrix14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 2 + "'", int15 == 2);
        org.junit.Assert.assertNotNull(matrix17);
        org.junit.Assert.assertNotNull(matrix18);
        org.junit.Assert.assertNotNull(matrix19);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(matrix22);
        org.junit.Assert.assertNotNull(matrix25);
        org.junit.Assert.assertNotNull(matrix27);
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertArrayEquals(doubleArray30, new double[] { 137.90576492663388d, (-1.0d) }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertArrayEquals(doubleArray31, new double[] { (-24.931892522286255d), (-135.63701830716116d) }, 1.0E-15);
        org.junit.Assert.assertNotNull(matrix34);
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertArrayEquals(doubleArray37, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertArrayEquals(doubleArray40, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 2 + "'", int43 == 2);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 2 + "'", int44 == 2);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 2 + "'", int45 == 2);
        org.junit.Assert.assertNotNull(matrixArray46);
        org.junit.Assert.assertNotNull(matrix47);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertNotNull(matrix52);
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertArrayEquals(doubleArray55, new double[] { 137.90576492663388d, (-1.0d) }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray56);
        org.junit.Assert.assertArrayEquals(doubleArray56, new double[] { (-24.931892522286255d), (-135.63701830716116d) }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray57);
        org.junit.Assert.assertArrayEquals(doubleArray57, new double[] { (-24.931892522286255d), (-135.63701830716116d) }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray58);
        org.junit.Assert.assertArrayEquals(doubleArray58, new double[] { (-2.4931892522286256d), (-13.563701830716116d) }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray59);
        org.junit.Assert.assertArrayEquals(doubleArray59, new double[] { (-2.7295287645732618d), (-13.518123861075072d) }, 1.0E-15);
        org.junit.Assert.assertNotNull(wildcardClass60);
    }

    @Test
    public void test1524() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1524");
        com.operations.Matrix.Matrix matrix2 = new com.operations.Matrix.Matrix((int) (short) 1, 0);
        com.operations.Matrix.Matrix matrix4 = com.operations.Matrix.MatrixTransformations.rotate2D((double) (short) 100);
        double[] doubleArray7 = new double[] { 137.90576492663388d, (byte) -1 };
        double[] doubleArray8 = com.operations.Matrix.MatrixSolver.solveGaussian(matrix4, doubleArray7);
        com.operations.Matrix.Matrix matrix11 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0L, (double) (byte) 10);
        double[] doubleArray14 = new double[] { 10, 'a' };
        double[] doubleArray17 = new double[] { 10, 'a' };
        double[][] doubleArray18 = new double[][] { doubleArray14, doubleArray17 };
        com.operations.Matrix.Matrix matrix19 = new com.operations.Matrix.Matrix(doubleArray18);
        int int20 = matrix19.getCols();
        int int21 = matrix19.getCols();
        int int22 = matrix19.getCols();
        com.operations.Matrix.Matrix[] matrixArray23 = com.operations.Matrix.MatrixDecompositions.luDecomposition(matrix19);
        com.operations.Matrix.Matrix matrix24 = com.operations.Matrix.MatrixOperations.multiply(matrix11, matrix19);
        boolean boolean26 = com.operations.Matrix.MatrixUtils.compare(matrix4, matrix11, (double) (-1L));
        com.operations.Matrix.Matrix matrix28 = com.operations.Matrix.MatrixTransformations.rotate2D((-1.0d));
        com.operations.Matrix.Matrix matrix30 = com.operations.Matrix.MatrixTransformations.rotate2D((double) (-1L));
        com.operations.Matrix.Matrix matrix32 = com.operations.Matrix.MatrixTransformations.rotate2D((double) (short) 100);
        double[] doubleArray35 = new double[] { 137.90576492663388d, (byte) -1 };
        double[] doubleArray36 = com.operations.Matrix.MatrixSolver.solveGaussian(matrix32, doubleArray35);
        double[] doubleArray37 = com.operations.Matrix.MatrixSolver.solveGaussian(matrix30, doubleArray35);
        double[] doubleArray38 = com.operations.Matrix.MatrixSolver.solveGaussian(matrix28, doubleArray35);
        boolean boolean40 = com.operations.Matrix.MatrixUtils.compare(matrix11, matrix28, (double) '4');
        com.operations.Matrix.Matrix matrix42 = com.operations.Matrix.MatrixTransformations.rotate2D((double) (short) 100);
        double[] doubleArray45 = new double[] { 137.90576492663388d, (byte) -1 };
        double[] doubleArray46 = com.operations.Matrix.MatrixSolver.solveGaussian(matrix42, doubleArray45);
        com.operations.Matrix.Matrix matrix49 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0L, (double) (byte) 10);
        double[] doubleArray52 = new double[] { 10, 'a' };
        double[] doubleArray55 = new double[] { 10, 'a' };
        double[][] doubleArray56 = new double[][] { doubleArray52, doubleArray55 };
        com.operations.Matrix.Matrix matrix57 = new com.operations.Matrix.Matrix(doubleArray56);
        int int58 = matrix57.getCols();
        int int59 = matrix57.getCols();
        int int60 = matrix57.getCols();
        com.operations.Matrix.Matrix[] matrixArray61 = com.operations.Matrix.MatrixDecompositions.luDecomposition(matrix57);
        com.operations.Matrix.Matrix matrix62 = com.operations.Matrix.MatrixOperations.multiply(matrix49, matrix57);
        boolean boolean64 = com.operations.Matrix.MatrixUtils.compare(matrix42, matrix49, (double) (-1L));
        double[][] doubleArray65 = matrix42.getData();
        com.operations.Matrix.Matrix matrix67 = com.operations.Matrix.MatrixTransformations.rotate2D((double) (short) 100);
        double[] doubleArray70 = new double[] { 137.90576492663388d, (byte) -1 };
        double[] doubleArray71 = com.operations.Matrix.MatrixSolver.solveGaussian(matrix67, doubleArray70);
        double[] doubleArray72 = com.operations.Matrix.MatrixSolver.solveGaussian(matrix42, doubleArray70);
        double[] doubleArray73 = com.operations.Matrix.MatrixSolver.solveGaussian(matrix28, doubleArray72);
        // The following exception was thrown during execution in test generation
        try {
            double[] doubleArray74 = com.operations.Matrix.MatrixSolver.solveGaussian(matrix2, doubleArray72);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Matrix must be square to solve equations.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(matrix4);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertArrayEquals(doubleArray7, new double[] { 137.90576492663388d, (-1.0d) }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertArrayEquals(doubleArray8, new double[] { (-24.931892522286255d), (-135.63701830716116d) }, 1.0E-15);
        org.junit.Assert.assertNotNull(matrix11);
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertArrayEquals(doubleArray14, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertArrayEquals(doubleArray17, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 2 + "'", int20 == 2);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 2 + "'", int21 == 2);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 2 + "'", int22 == 2);
        org.junit.Assert.assertNotNull(matrixArray23);
        org.junit.Assert.assertNotNull(matrix24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(matrix28);
        org.junit.Assert.assertNotNull(matrix30);
        org.junit.Assert.assertNotNull(matrix32);
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertArrayEquals(doubleArray35, new double[] { 137.90576492663388d, (-1.0d) }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertArrayEquals(doubleArray36, new double[] { (-24.931892522286255d), (-135.63701830716116d) }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertArrayEquals(doubleArray37, new double[] { 137.90221361711127d, 1.4069397643877004d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertArrayEquals(doubleArray38, new double[] { 137.90221361711127d, 1.4069397643877004d }, 1.0E-15);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertNotNull(matrix42);
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertArrayEquals(doubleArray45, new double[] { 137.90576492663388d, (-1.0d) }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray46);
        org.junit.Assert.assertArrayEquals(doubleArray46, new double[] { (-24.931892522286255d), (-135.63701830716116d) }, 1.0E-15);
        org.junit.Assert.assertNotNull(matrix49);
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertArrayEquals(doubleArray52, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertArrayEquals(doubleArray55, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray56);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 2 + "'", int58 == 2);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 2 + "'", int59 == 2);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 2 + "'", int60 == 2);
        org.junit.Assert.assertNotNull(matrixArray61);
        org.junit.Assert.assertNotNull(matrix62);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertNotNull(doubleArray65);
        org.junit.Assert.assertNotNull(matrix67);
        org.junit.Assert.assertNotNull(doubleArray70);
        org.junit.Assert.assertArrayEquals(doubleArray70, new double[] { 137.90576492663388d, (-1.0d) }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray71);
        org.junit.Assert.assertArrayEquals(doubleArray71, new double[] { (-24.931892522286255d), (-135.63701830716116d) }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray72);
        org.junit.Assert.assertArrayEquals(doubleArray72, new double[] { (-24.931892522286255d), (-135.63701830716116d) }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray73);
        org.junit.Assert.assertArrayEquals(doubleArray73, new double[] { (-22.560902902856938d), (-136.05148165384992d) }, 1.0E-15);
    }

    @Test
    public void test1525() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1525");
        // The following exception was thrown during execution in test generation
        try {
            com.operations.Matrix.Matrix matrix2 = new com.operations.Matrix.Matrix((-1), 2);
            org.junit.Assert.fail("Expected exception of type java.lang.NegativeArraySizeException; message: -1");
        } catch (java.lang.NegativeArraySizeException e) {
            // Expected exception.
        }
    }

    @Test
    public void test1526() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1526");
        com.operations.Matrix.Matrix matrix5 = com.operations.Matrix.MatrixUtils.generateRandomMatrix(1, 32, (int) (byte) 0, 0, (long) (-1));
        org.junit.Assert.assertNotNull(matrix5);
    }

    @Test
    public void test1527() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1527");
        com.operations.Matrix.Matrix matrix1 = com.operations.Matrix.MatrixTransformations.rotate2D((double) (byte) 100);
        double double2 = com.operations.Matrix.MatrixUtils.frobeniusNorm(matrix1);
        com.operations.Matrix.Matrix matrix5 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0.0f, (double) (-1));
        com.operations.Matrix.Matrix matrix8 = com.operations.Matrix.MatrixTransformations.scale2D(146.4308710620817d, (double) 10L);
        com.operations.Matrix.Matrix matrix9 = com.operations.Matrix.MatrixOperations.multiply(matrix5, matrix8);
        com.operations.Matrix.Matrix matrix11 = com.operations.Matrix.MatrixTransformations.rotate2D((double) 1.0f);
        com.operations.Matrix.Matrix matrix14 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0L, (double) (byte) 10);
        int int15 = matrix14.getRows();
        com.operations.Matrix.Matrix matrix17 = com.operations.Matrix.MatrixOperations.scalarMultiply(matrix14, (double) 2);
        double double18 = com.operations.Matrix.MatrixUtils.frobeniusNorm(matrix14);
        com.operations.Matrix.Matrix matrix21 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0L, (double) (byte) 10);
        int int22 = matrix21.getRows();
        com.operations.Matrix.Matrix matrix24 = com.operations.Matrix.MatrixOperations.scalarMultiply(matrix21, (double) 2);
        com.operations.Matrix.Matrix matrix25 = com.operations.Matrix.MatrixOperations.subtract(matrix14, matrix24);
        com.operations.Matrix.Matrix matrix26 = com.operations.Matrix.MatrixOperations.add(matrix11, matrix24);
        matrix11.print();
        double[] doubleArray30 = new double[] { 10, 'a' };
        double[] doubleArray33 = new double[] { 10, 'a' };
        double[][] doubleArray34 = new double[][] { doubleArray30, doubleArray33 };
        com.operations.Matrix.Matrix matrix35 = new com.operations.Matrix.Matrix(doubleArray34);
        com.operations.Matrix.Matrix matrix36 = com.operations.Matrix.MatrixOperations.transpose(matrix35);
        com.operations.Matrix.Matrix matrix39 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0L, (double) (byte) 10);
        int int40 = matrix39.getRows();
        com.operations.Matrix.Matrix matrix46 = com.operations.Matrix.MatrixUtils.generateRandomMatrix(100, (int) (byte) 1, (int) '#', (int) '#', 1L);
        boolean boolean48 = com.operations.Matrix.MatrixUtils.compare(matrix39, matrix46, (double) 1.0f);
        com.operations.Matrix.Matrix matrix50 = com.operations.Matrix.MatrixOperations.scalarMultiply(matrix39, (double) 1L);
        matrix39.print();
        com.operations.Matrix.Matrix matrix52 = com.operations.Matrix.MatrixOperations.multiply(matrix36, matrix39);
        com.operations.Matrix.Matrix matrix53 = com.operations.Matrix.MatrixOperations.multiply(matrix11, matrix39);
        com.operations.Matrix.Matrix matrix54 = com.operations.Matrix.MatrixOperations.subtract(matrix5, matrix39);
        com.operations.Matrix.Matrix matrix55 = com.operations.Matrix.MatrixOperations.subtract(matrix1, matrix5);
        com.operations.Matrix.Matrix matrix57 = com.operations.Matrix.MatrixTransformations.rotate2D((double) (-1L));
        com.operations.Matrix.Matrix matrix59 = com.operations.Matrix.MatrixTransformations.rotate2D((double) (short) 100);
        double[] doubleArray62 = new double[] { 137.90576492663388d, (byte) -1 };
        double[] doubleArray63 = com.operations.Matrix.MatrixSolver.solveGaussian(matrix59, doubleArray62);
        double[] doubleArray64 = com.operations.Matrix.MatrixSolver.solveGaussian(matrix57, doubleArray62);
        com.operations.Matrix.Matrix matrix65 = com.operations.Matrix.MatrixOperations.add(matrix1, matrix57);
        java.lang.Class<?> wildcardClass66 = matrix57.getClass();
        org.junit.Assert.assertNotNull(matrix1);
        org.junit.Assert.assertTrue("'" + double2 + "' != '" + 1.414213562373095d + "'", double2 == 1.414213562373095d);
        org.junit.Assert.assertNotNull(matrix5);
        org.junit.Assert.assertNotNull(matrix8);
        org.junit.Assert.assertNotNull(matrix9);
        org.junit.Assert.assertNotNull(matrix11);
        org.junit.Assert.assertNotNull(matrix14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 2 + "'", int15 == 2);
        org.junit.Assert.assertNotNull(matrix17);
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 10.0d + "'", double18 == 10.0d);
        org.junit.Assert.assertNotNull(matrix21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 2 + "'", int22 == 2);
        org.junit.Assert.assertNotNull(matrix24);
        org.junit.Assert.assertNotNull(matrix25);
        org.junit.Assert.assertNotNull(matrix26);
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertArrayEquals(doubleArray30, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertArrayEquals(doubleArray33, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertNotNull(matrix36);
        org.junit.Assert.assertNotNull(matrix39);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 2 + "'", int40 == 2);
        org.junit.Assert.assertNotNull(matrix46);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(matrix50);
        org.junit.Assert.assertNotNull(matrix52);
        org.junit.Assert.assertNotNull(matrix53);
        org.junit.Assert.assertNotNull(matrix54);
        org.junit.Assert.assertNotNull(matrix55);
        org.junit.Assert.assertNotNull(matrix57);
        org.junit.Assert.assertNotNull(matrix59);
        org.junit.Assert.assertNotNull(doubleArray62);
        org.junit.Assert.assertArrayEquals(doubleArray62, new double[] { 137.90576492663388d, (-1.0d) }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray63);
        org.junit.Assert.assertArrayEquals(doubleArray63, new double[] { (-24.931892522286255d), (-135.63701830716116d) }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray64);
        org.junit.Assert.assertArrayEquals(doubleArray64, new double[] { 137.90221361711127d, 1.4069397643877004d }, 1.0E-15);
        org.junit.Assert.assertNotNull(matrix65);
        org.junit.Assert.assertNotNull(wildcardClass66);
    }

    @Test
    public void test1528() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1528");
        com.operations.Matrix.Matrix matrix2 = com.operations.Matrix.MatrixTransformations.scale2D((double) (byte) 10, (double) 10);
        double[] doubleArray5 = new double[] { 10, 'a' };
        double[] doubleArray8 = new double[] { 10, 'a' };
        double[][] doubleArray9 = new double[][] { doubleArray5, doubleArray8 };
        com.operations.Matrix.Matrix matrix10 = new com.operations.Matrix.Matrix(doubleArray9);
        com.operations.Matrix.Matrix matrix11 = new com.operations.Matrix.Matrix(doubleArray9);
        boolean boolean12 = com.operations.Matrix.MatrixUtils.isSquare(matrix11);
        double[] doubleArray15 = new double[] { 10, 'a' };
        double[] doubleArray18 = new double[] { 10, 'a' };
        double[][] doubleArray19 = new double[][] { doubleArray15, doubleArray18 };
        com.operations.Matrix.Matrix matrix20 = new com.operations.Matrix.Matrix(doubleArray19);
        int int21 = matrix20.getCols();
        int int22 = matrix20.getCols();
        matrix20.print();
        double[] doubleArray26 = new double[] { 10, 'a' };
        double[] doubleArray29 = new double[] { 10, 'a' };
        double[][] doubleArray30 = new double[][] { doubleArray26, doubleArray29 };
        com.operations.Matrix.Matrix matrix31 = new com.operations.Matrix.Matrix(doubleArray30);
        boolean boolean33 = com.operations.Matrix.MatrixUtils.compare(matrix20, matrix31, (double) (-1));
        com.operations.Matrix.Matrix matrix34 = com.operations.Matrix.MatrixOperations.subtract(matrix11, matrix31);
        com.operations.Matrix.Matrix[] matrixArray35 = com.operations.Matrix.MatrixDecompositions.luDecomposition(matrix34);
        double[][] doubleArray36 = matrix34.getData();
        com.operations.Matrix.Matrix matrix37 = new com.operations.Matrix.Matrix(doubleArray36);
        com.operations.Matrix.Matrix matrix38 = com.operations.Matrix.MatrixOperations.multiply(matrix2, matrix37);
        com.operations.Matrix.Matrix matrix40 = com.operations.Matrix.MatrixTransformations.rotate2D((double) 1.0f);
        com.operations.Matrix.Matrix matrix43 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0L, (double) (byte) 10);
        int int44 = matrix43.getRows();
        com.operations.Matrix.Matrix matrix46 = com.operations.Matrix.MatrixOperations.scalarMultiply(matrix43, (double) 2);
        double double47 = com.operations.Matrix.MatrixUtils.frobeniusNorm(matrix43);
        com.operations.Matrix.Matrix matrix50 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0L, (double) (byte) 10);
        int int51 = matrix50.getRows();
        com.operations.Matrix.Matrix matrix53 = com.operations.Matrix.MatrixOperations.scalarMultiply(matrix50, (double) 2);
        com.operations.Matrix.Matrix matrix54 = com.operations.Matrix.MatrixOperations.subtract(matrix43, matrix53);
        com.operations.Matrix.Matrix matrix55 = com.operations.Matrix.MatrixOperations.add(matrix40, matrix53);
        com.operations.Matrix.Matrix[] matrixArray56 = com.operations.Matrix.MatrixDecompositions.luDecomposition(matrix53);
        boolean boolean57 = com.operations.Matrix.MatrixUtils.isSquare(matrix53);
        com.operations.Matrix.Matrix matrix58 = com.operations.Matrix.MatrixOperations.transpose(matrix53);
        com.operations.Matrix.Matrix matrix60 = com.operations.Matrix.MatrixOperations.scalarMultiply(matrix53, (double) ' ');
        com.operations.Matrix.Matrix matrix63 = com.operations.Matrix.MatrixTransformations.project2D(0.0d, (double) 0);
        double[][] doubleArray64 = matrix63.getData();
        com.operations.Matrix.Matrix matrix65 = new com.operations.Matrix.Matrix(doubleArray64);
        com.operations.Matrix.Matrix matrix66 = new com.operations.Matrix.Matrix(doubleArray64);
        com.operations.Matrix.Matrix matrix67 = com.operations.Matrix.MatrixOperations.multiply(matrix53, matrix66);
        com.operations.Matrix.Matrix matrix68 = com.operations.Matrix.MatrixOperations.transpose(matrix53);
        com.operations.Matrix.Matrix matrix71 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0L, (double) (byte) 10);
        int int72 = matrix71.getRows();
        com.operations.Matrix.Matrix matrix75 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0L, (double) (byte) 10);
        int int76 = matrix75.getRows();
        com.operations.Matrix.Matrix matrix78 = com.operations.Matrix.MatrixOperations.scalarMultiply(matrix75, (double) 2);
        com.operations.Matrix.Matrix matrix79 = com.operations.Matrix.MatrixOperations.subtract(matrix71, matrix75);
        com.operations.Matrix.Matrix matrix82 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0L, (double) (byte) 10);
        int int83 = matrix82.getRows();
        com.operations.Matrix.Matrix matrix89 = com.operations.Matrix.MatrixUtils.generateRandomMatrix(100, (int) (byte) 1, (int) '#', (int) '#', 1L);
        boolean boolean91 = com.operations.Matrix.MatrixUtils.compare(matrix82, matrix89, (double) 1.0f);
        com.operations.Matrix.Matrix matrix93 = com.operations.Matrix.MatrixOperations.scalarMultiply(matrix82, (double) 1L);
        boolean boolean95 = com.operations.Matrix.MatrixUtils.compare(matrix79, matrix93, 0.0d);
        boolean boolean97 = com.operations.Matrix.MatrixUtils.compare(matrix68, matrix93, (-1.0d));
        com.operations.Matrix.Matrix matrix98 = com.operations.Matrix.MatrixOperations.multiply(matrix38, matrix68);
        org.junit.Assert.assertNotNull(matrix2);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertArrayEquals(doubleArray5, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertArrayEquals(doubleArray8, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertArrayEquals(doubleArray15, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertArrayEquals(doubleArray18, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 2 + "'", int21 == 2);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 2 + "'", int22 == 2);
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertArrayEquals(doubleArray26, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertArrayEquals(doubleArray29, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(matrix34);
        org.junit.Assert.assertNotNull(matrixArray35);
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertNotNull(matrix38);
        org.junit.Assert.assertNotNull(matrix40);
        org.junit.Assert.assertNotNull(matrix43);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 2 + "'", int44 == 2);
        org.junit.Assert.assertNotNull(matrix46);
        org.junit.Assert.assertTrue("'" + double47 + "' != '" + 10.0d + "'", double47 == 10.0d);
        org.junit.Assert.assertNotNull(matrix50);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 2 + "'", int51 == 2);
        org.junit.Assert.assertNotNull(matrix53);
        org.junit.Assert.assertNotNull(matrix54);
        org.junit.Assert.assertNotNull(matrix55);
        org.junit.Assert.assertNotNull(matrixArray56);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + true + "'", boolean57 == true);
        org.junit.Assert.assertNotNull(matrix58);
        org.junit.Assert.assertNotNull(matrix60);
        org.junit.Assert.assertNotNull(matrix63);
        org.junit.Assert.assertNotNull(doubleArray64);
        org.junit.Assert.assertNotNull(matrix67);
        org.junit.Assert.assertNotNull(matrix68);
        org.junit.Assert.assertNotNull(matrix71);
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 2 + "'", int72 == 2);
        org.junit.Assert.assertNotNull(matrix75);
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 2 + "'", int76 == 2);
        org.junit.Assert.assertNotNull(matrix78);
        org.junit.Assert.assertNotNull(matrix79);
        org.junit.Assert.assertNotNull(matrix82);
        org.junit.Assert.assertTrue("'" + int83 + "' != '" + 2 + "'", int83 == 2);
        org.junit.Assert.assertNotNull(matrix89);
        org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + false + "'", boolean91 == false);
        org.junit.Assert.assertNotNull(matrix93);
        org.junit.Assert.assertTrue("'" + boolean95 + "' != '" + false + "'", boolean95 == false);
        org.junit.Assert.assertTrue("'" + boolean97 + "' != '" + false + "'", boolean97 == false);
        org.junit.Assert.assertNotNull(matrix98);
    }

    @Test
    public void test1529() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1529");
        com.operations.Matrix.Matrix matrix1 = com.operations.Matrix.MatrixTransformations.rotate2D(1.414213562373095d);
        double[][] doubleArray2 = matrix1.getData();
        com.operations.Matrix.Matrix matrix3 = new com.operations.Matrix.Matrix(doubleArray2);
        com.operations.Matrix.Matrix[] matrixArray4 = com.operations.Matrix.MatrixDecompositions.luDecomposition(matrix3);
        java.lang.Class<?> wildcardClass5 = matrixArray4.getClass();
        org.junit.Assert.assertNotNull(matrix1);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertNotNull(matrixArray4);
        org.junit.Assert.assertNotNull(wildcardClass5);
    }

    @Test
    public void test1530() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1530");
        com.operations.Matrix.Matrix matrix2 = com.operations.Matrix.MatrixTransformations.scale2D(146.4308710620817d, 4826.701772432185d);
        org.junit.Assert.assertNotNull(matrix2);
    }

    @Test
    public void test1531() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1531");
        com.operations.Matrix.Matrix matrix2 = com.operations.Matrix.MatrixTransformations.scale2D((double) '4', 975.1410154434076d);
        matrix2.print();
        // The following exception was thrown during execution in test generation
        try {
            matrix2.setValue((int) ' ', 2, 22.360679774997898d);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: Index 32 out of bounds for length 2");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(matrix2);
    }

    @Test
    public void test1532() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1532");
        com.operations.Matrix.Matrix matrix2 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0L, (double) (byte) 10);
        int int3 = matrix2.getRows();
        com.operations.Matrix.Matrix matrix5 = com.operations.Matrix.MatrixOperations.scalarMultiply(matrix2, (double) 2);
        matrix2.print();
        com.operations.Matrix.Matrix matrix8 = com.operations.Matrix.MatrixOperations.scalarMultiply(matrix2, 100.00499987500625d);
        com.operations.Matrix.Matrix matrix10 = com.operations.Matrix.MatrixOperations.scalarMultiply(matrix8, 35.0d);
        int int11 = matrix10.getRows();
        org.junit.Assert.assertNotNull(matrix2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 2 + "'", int3 == 2);
        org.junit.Assert.assertNotNull(matrix5);
        org.junit.Assert.assertNotNull(matrix8);
        org.junit.Assert.assertNotNull(matrix10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 2 + "'", int11 == 2);
    }

    @Test
    public void test1533() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1533");
        com.operations.Matrix.Matrix matrix4 = com.operations.Matrix.MatrixUtils.generateRandomMatrix(100, 0, (int) ' ', (int) (byte) 1);
        matrix4.print();
        boolean boolean6 = com.operations.Matrix.MatrixUtils.isSymmetric(matrix4);
        boolean boolean7 = com.operations.Matrix.MatrixUtils.isSquare(matrix4);
        org.junit.Assert.assertNotNull(matrix4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
    }

    @Test
    public void test1534() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1534");
        com.operations.Matrix.Matrix matrix2 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0L, (double) (byte) 10);
        double[] doubleArray5 = new double[] { 10, 'a' };
        double[] doubleArray8 = new double[] { 10, 'a' };
        double[][] doubleArray9 = new double[][] { doubleArray5, doubleArray8 };
        com.operations.Matrix.Matrix matrix10 = new com.operations.Matrix.Matrix(doubleArray9);
        int int11 = matrix10.getCols();
        int int12 = matrix10.getCols();
        int int13 = matrix10.getCols();
        com.operations.Matrix.Matrix[] matrixArray14 = com.operations.Matrix.MatrixDecompositions.luDecomposition(matrix10);
        com.operations.Matrix.Matrix matrix15 = com.operations.Matrix.MatrixOperations.multiply(matrix2, matrix10);
        com.operations.Matrix.Matrix matrix17 = com.operations.Matrix.MatrixTransformations.rotate2D((double) (short) 100);
        boolean boolean19 = com.operations.Matrix.MatrixUtils.compare(matrix10, matrix17, (double) (byte) 0);
        double[] doubleArray22 = new double[] { 10, 'a' };
        double[] doubleArray25 = new double[] { 10, 'a' };
        double[][] doubleArray26 = new double[][] { doubleArray22, doubleArray25 };
        com.operations.Matrix.Matrix matrix27 = new com.operations.Matrix.Matrix(doubleArray26);
        com.operations.Matrix.Matrix matrix28 = new com.operations.Matrix.Matrix(doubleArray26);
        com.operations.Matrix.Matrix matrix29 = new com.operations.Matrix.Matrix(doubleArray26);
        boolean boolean31 = com.operations.Matrix.MatrixUtils.compare(matrix10, matrix29, (double) (-1));
        com.operations.Matrix.Matrix matrix33 = com.operations.Matrix.MatrixTransformations.rotate2D((double) (short) 100);
        double[] doubleArray36 = new double[] { 137.90576492663388d, (byte) -1 };
        double[] doubleArray37 = com.operations.Matrix.MatrixSolver.solveGaussian(matrix33, doubleArray36);
        com.operations.Matrix.Matrix matrix40 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0L, (double) (byte) 10);
        double[] doubleArray43 = new double[] { 10, 'a' };
        double[] doubleArray46 = new double[] { 10, 'a' };
        double[][] doubleArray47 = new double[][] { doubleArray43, doubleArray46 };
        com.operations.Matrix.Matrix matrix48 = new com.operations.Matrix.Matrix(doubleArray47);
        int int49 = matrix48.getCols();
        int int50 = matrix48.getCols();
        int int51 = matrix48.getCols();
        com.operations.Matrix.Matrix[] matrixArray52 = com.operations.Matrix.MatrixDecompositions.luDecomposition(matrix48);
        com.operations.Matrix.Matrix matrix53 = com.operations.Matrix.MatrixOperations.multiply(matrix40, matrix48);
        boolean boolean55 = com.operations.Matrix.MatrixUtils.compare(matrix33, matrix40, (double) (-1L));
        com.operations.Matrix.Matrix matrix56 = com.operations.Matrix.MatrixOperations.add(matrix29, matrix40);
        double double57 = com.operations.Matrix.MatrixUtils.frobeniusNorm(matrix29);
        int int58 = matrix29.getRows();
        // The following exception was thrown during execution in test generation
        try {
            double double61 = matrix29.getValue((int) (short) 10, (int) (short) 10);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(matrix2);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertArrayEquals(doubleArray5, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertArrayEquals(doubleArray8, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 2 + "'", int11 == 2);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 2 + "'", int12 == 2);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 2 + "'", int13 == 2);
        org.junit.Assert.assertNotNull(matrixArray14);
        org.junit.Assert.assertNotNull(matrix15);
        org.junit.Assert.assertNotNull(matrix17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertArrayEquals(doubleArray22, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertArrayEquals(doubleArray25, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(matrix33);
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertArrayEquals(doubleArray36, new double[] { 137.90576492663388d, (-1.0d) }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertArrayEquals(doubleArray37, new double[] { (-24.931892522286255d), (-135.63701830716116d) }, 1.0E-15);
        org.junit.Assert.assertNotNull(matrix40);
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertArrayEquals(doubleArray43, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray46);
        org.junit.Assert.assertArrayEquals(doubleArray46, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 2 + "'", int49 == 2);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 2 + "'", int50 == 2);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 2 + "'", int51 == 2);
        org.junit.Assert.assertNotNull(matrixArray52);
        org.junit.Assert.assertNotNull(matrix53);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNotNull(matrix56);
        org.junit.Assert.assertTrue("'" + double57 + "' != '" + 137.90576492663388d + "'", double57 == 137.90576492663388d);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 2 + "'", int58 == 2);
    }

    @Test
    public void test1535() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1535");
        // The following exception was thrown during execution in test generation
        try {
            com.operations.Matrix.Matrix matrix5 = com.operations.Matrix.MatrixUtils.generateRandomMatrix(52, (-1), 32, (-1), (long) 'a');
            org.junit.Assert.fail("Expected exception of type java.lang.NegativeArraySizeException; message: -1");
        } catch (java.lang.NegativeArraySizeException e) {
            // Expected exception.
        }
    }

    @Test
    public void test1536() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1536");
        com.operations.Matrix.Matrix matrix4 = com.operations.Matrix.MatrixUtils.generateRandomMatrix((int) (byte) 10, (int) 'a', (int) '4', (int) ' ');
        double[][] doubleArray5 = matrix4.getData();
        double[][] doubleArray6 = matrix4.getData();
        com.operations.Matrix.Matrix matrix7 = new com.operations.Matrix.Matrix(doubleArray6);
        com.operations.Matrix.Matrix matrix9 = com.operations.Matrix.MatrixTransformations.rotate2D((double) 1.0f);
        com.operations.Matrix.Matrix matrix12 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0L, (double) (byte) 10);
        int int13 = matrix12.getRows();
        com.operations.Matrix.Matrix matrix15 = com.operations.Matrix.MatrixOperations.scalarMultiply(matrix12, (double) 2);
        boolean boolean17 = com.operations.Matrix.MatrixUtils.compare(matrix9, matrix15, (double) 10.0f);
        com.operations.Matrix.Matrix[] matrixArray18 = com.operations.Matrix.MatrixDecompositions.luDecomposition(matrix15);
        double double19 = com.operations.Matrix.MatrixUtils.frobeniusNorm(matrix15);
        com.operations.Matrix.Matrix matrix22 = com.operations.Matrix.MatrixTransformations.project2D(0.0d, (double) 0);
        com.operations.Matrix.Matrix[] matrixArray23 = com.operations.Matrix.MatrixDecompositions.luDecomposition(matrix22);
        com.operations.Matrix.Matrix matrix26 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0L, (double) (byte) 10);
        int int27 = matrix26.getRows();
        com.operations.Matrix.Matrix matrix29 = com.operations.Matrix.MatrixOperations.scalarMultiply(matrix26, (double) 2);
        double double30 = com.operations.Matrix.MatrixUtils.frobeniusNorm(matrix26);
        int int31 = matrix26.getRows();
        com.operations.Matrix.Matrix matrix32 = com.operations.Matrix.MatrixOperations.transpose(matrix26);
        com.operations.Matrix.Matrix matrix33 = com.operations.Matrix.MatrixOperations.multiply(matrix22, matrix32);
        com.operations.Matrix.Matrix matrix34 = com.operations.Matrix.MatrixOperations.multiply(matrix15, matrix32);
        // The following exception was thrown during execution in test generation
        try {
            com.operations.Matrix.Matrix matrix35 = com.operations.Matrix.MatrixOperations.multiply(matrix7, matrix32);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Matrix A's columns must match Matrix B's rows for multiplication.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(matrix4);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertNotNull(matrix9);
        org.junit.Assert.assertNotNull(matrix12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 2 + "'", int13 == 2);
        org.junit.Assert.assertNotNull(matrix15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(matrixArray18);
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 20.0d + "'", double19 == 20.0d);
        org.junit.Assert.assertNotNull(matrix22);
        org.junit.Assert.assertNotNull(matrixArray23);
        org.junit.Assert.assertNotNull(matrix26);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 2 + "'", int27 == 2);
        org.junit.Assert.assertNotNull(matrix29);
        org.junit.Assert.assertTrue("'" + double30 + "' != '" + 10.0d + "'", double30 == 10.0d);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 2 + "'", int31 == 2);
        org.junit.Assert.assertNotNull(matrix32);
        org.junit.Assert.assertNotNull(matrix33);
        org.junit.Assert.assertNotNull(matrix34);
    }

    @Test
    public void test1537() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1537");
        com.operations.Matrix.Matrix matrix5 = com.operations.Matrix.MatrixUtils.generateRandomMatrix(100, (int) (byte) 1, (int) '#', (int) '#', 1L);
        double double8 = matrix5.getValue((int) '4', 0);
        matrix5.print();
        com.operations.Matrix.Matrix matrix10 = com.operations.Matrix.MatrixOperations.transpose(matrix5);
        double[][] doubleArray11 = matrix10.getData();
        // The following exception was thrown during execution in test generation
        try {
            com.operations.Matrix.Matrix matrix12 = com.operations.Matrix.MatrixDecompositions.choleskyDecomposition(matrix10);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Matrix must be square for Cholesky decomposition.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(matrix5);
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 35.0d + "'", double8 == 35.0d);
        org.junit.Assert.assertNotNull(matrix10);
        org.junit.Assert.assertNotNull(doubleArray11);
    }

    @Test
    public void test1538() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1538");
        com.operations.Matrix.Matrix matrix2 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0L, (double) (byte) 10);
        int int3 = matrix2.getRows();
        com.operations.Matrix.Matrix matrix9 = com.operations.Matrix.MatrixUtils.generateRandomMatrix(100, (int) (byte) 1, (int) '#', (int) '#', 1L);
        boolean boolean11 = com.operations.Matrix.MatrixUtils.compare(matrix2, matrix9, (double) 1.0f);
        double[] doubleArray14 = new double[] { 10, 'a' };
        double[] doubleArray17 = new double[] { 10, 'a' };
        double[][] doubleArray18 = new double[][] { doubleArray14, doubleArray17 };
        com.operations.Matrix.Matrix matrix19 = new com.operations.Matrix.Matrix(doubleArray18);
        int int20 = matrix19.getCols();
        int int21 = matrix19.getCols();
        int int22 = matrix19.getCols();
        com.operations.Matrix.Matrix matrix28 = com.operations.Matrix.MatrixUtils.generateRandomMatrix(100, (int) (byte) 1, (int) '#', (int) '#', 1L);
        double double31 = matrix28.getValue((int) '4', 0);
        double double32 = com.operations.Matrix.MatrixUtils.frobeniusNorm(matrix28);
        boolean boolean33 = com.operations.Matrix.MatrixUtils.isSquare(matrix28);
        boolean boolean35 = com.operations.Matrix.MatrixUtils.compare(matrix19, matrix28, (double) 100L);
        com.operations.Matrix.Matrix matrix36 = com.operations.Matrix.MatrixDecompositions.choleskyDecomposition(matrix19);
        double[] doubleArray39 = new double[] { 10, 'a' };
        double[] doubleArray42 = new double[] { 10, 'a' };
        double[][] doubleArray43 = new double[][] { doubleArray39, doubleArray42 };
        com.operations.Matrix.Matrix matrix44 = new com.operations.Matrix.Matrix(doubleArray43);
        int int45 = matrix44.getCols();
        int int46 = matrix44.getCols();
        int int47 = matrix44.getCols();
        com.operations.Matrix.Matrix matrix49 = com.operations.Matrix.MatrixOperations.scalarMultiply(matrix44, (double) 0.0f);
        boolean boolean51 = com.operations.Matrix.MatrixUtils.compare(matrix36, matrix44, (double) '4');
        matrix44.print();
        boolean boolean54 = com.operations.Matrix.MatrixUtils.compare(matrix9, matrix44, 137.90576492663388d);
        double[][] doubleArray55 = matrix44.getData();
        com.operations.Matrix.Matrix matrix56 = new com.operations.Matrix.Matrix(doubleArray55);
        com.operations.Matrix.Matrix matrix57 = new com.operations.Matrix.Matrix(doubleArray55);
        org.junit.Assert.assertNotNull(matrix2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 2 + "'", int3 == 2);
        org.junit.Assert.assertNotNull(matrix9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertArrayEquals(doubleArray14, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertArrayEquals(doubleArray17, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 2 + "'", int20 == 2);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 2 + "'", int21 == 2);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 2 + "'", int22 == 2);
        org.junit.Assert.assertNotNull(matrix28);
        org.junit.Assert.assertTrue("'" + double31 + "' != '" + 35.0d + "'", double31 == 35.0d);
        org.junit.Assert.assertTrue("'" + double32 + "' != '" + 350.0d + "'", double32 == 350.0d);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(matrix36);
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertArrayEquals(doubleArray39, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertArrayEquals(doubleArray42, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 2 + "'", int45 == 2);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 2 + "'", int46 == 2);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 2 + "'", int47 == 2);
        org.junit.Assert.assertNotNull(matrix49);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(doubleArray55);
    }

    @Test
    public void test1539() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1539");
        double[] doubleArray2 = new double[] { 10, 'a' };
        double[] doubleArray5 = new double[] { 10, 'a' };
        double[][] doubleArray6 = new double[][] { doubleArray2, doubleArray5 };
        com.operations.Matrix.Matrix matrix7 = new com.operations.Matrix.Matrix(doubleArray6);
        com.operations.Matrix.Matrix matrix8 = new com.operations.Matrix.Matrix(doubleArray6);
        com.operations.Matrix.Matrix[] matrixArray9 = com.operations.Matrix.MatrixDecompositions.luDecomposition(matrix8);
        double double10 = com.operations.Matrix.MatrixUtils.frobeniusNorm(matrix8);
        int int11 = matrix8.getRows();
        com.operations.Matrix.Matrix matrix13 = com.operations.Matrix.MatrixOperations.scalarMultiply(matrix8, 400.0d);
        double[] doubleArray16 = new double[] { 10, 'a' };
        double[] doubleArray19 = new double[] { 10, 'a' };
        double[][] doubleArray20 = new double[][] { doubleArray16, doubleArray19 };
        com.operations.Matrix.Matrix matrix21 = new com.operations.Matrix.Matrix(doubleArray20);
        com.operations.Matrix.Matrix matrix22 = new com.operations.Matrix.Matrix(doubleArray20);
        boolean boolean23 = com.operations.Matrix.MatrixUtils.isSquare(matrix22);
        double[] doubleArray26 = new double[] { 10, 'a' };
        double[] doubleArray29 = new double[] { 10, 'a' };
        double[][] doubleArray30 = new double[][] { doubleArray26, doubleArray29 };
        com.operations.Matrix.Matrix matrix31 = new com.operations.Matrix.Matrix(doubleArray30);
        int int32 = matrix31.getCols();
        int int33 = matrix31.getCols();
        matrix31.print();
        double[] doubleArray37 = new double[] { 10, 'a' };
        double[] doubleArray40 = new double[] { 10, 'a' };
        double[][] doubleArray41 = new double[][] { doubleArray37, doubleArray40 };
        com.operations.Matrix.Matrix matrix42 = new com.operations.Matrix.Matrix(doubleArray41);
        boolean boolean44 = com.operations.Matrix.MatrixUtils.compare(matrix31, matrix42, (double) (-1));
        com.operations.Matrix.Matrix matrix45 = com.operations.Matrix.MatrixOperations.subtract(matrix22, matrix42);
        com.operations.Matrix.Matrix[] matrixArray46 = com.operations.Matrix.MatrixDecompositions.luDecomposition(matrix45);
        double[][] doubleArray47 = matrix45.getData();
        com.operations.Matrix.Matrix matrix48 = com.operations.Matrix.MatrixOperations.multiply(matrix13, matrix45);
        com.operations.Matrix.Matrix matrix51 = com.operations.Matrix.MatrixTransformations.project2D((double) 100.0f, (double) 1);
        com.operations.Matrix.Matrix matrix53 = com.operations.Matrix.MatrixTransformations.rotate2D((double) 'a');
        com.operations.Matrix.Matrix matrix55 = com.operations.Matrix.MatrixTransformations.rotate2D((double) 1.0f);
        com.operations.Matrix.Matrix matrix56 = com.operations.Matrix.MatrixOperations.add(matrix53, matrix55);
        com.operations.Matrix.Matrix matrix57 = com.operations.Matrix.MatrixOperations.subtract(matrix51, matrix56);
        com.operations.Matrix.Matrix matrix58 = com.operations.Matrix.MatrixOperations.add(matrix13, matrix51);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertArrayEquals(doubleArray2, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertArrayEquals(doubleArray5, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertNotNull(matrixArray9);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 137.90576492663388d + "'", double10 == 137.90576492663388d);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 2 + "'", int11 == 2);
        org.junit.Assert.assertNotNull(matrix13);
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertArrayEquals(doubleArray16, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertArrayEquals(doubleArray19, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertArrayEquals(doubleArray26, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertArrayEquals(doubleArray29, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 2 + "'", int32 == 2);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 2 + "'", int33 == 2);
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertArrayEquals(doubleArray37, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertArrayEquals(doubleArray40, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(matrix45);
        org.junit.Assert.assertNotNull(matrixArray46);
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertNotNull(matrix48);
        org.junit.Assert.assertNotNull(matrix51);
        org.junit.Assert.assertNotNull(matrix53);
        org.junit.Assert.assertNotNull(matrix55);
        org.junit.Assert.assertNotNull(matrix56);
        org.junit.Assert.assertNotNull(matrix57);
        org.junit.Assert.assertNotNull(matrix58);
    }

    @Test
    public void test1540() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1540");
        com.operations.Matrix.Matrix matrix2 = com.operations.Matrix.MatrixTransformations.project2D((double) ' ', 0.0d);
        double[] doubleArray5 = new double[] { 10, 'a' };
        double[] doubleArray8 = new double[] { 10, 'a' };
        double[][] doubleArray9 = new double[][] { doubleArray5, doubleArray8 };
        com.operations.Matrix.Matrix matrix10 = new com.operations.Matrix.Matrix(doubleArray9);
        int int11 = matrix10.getCols();
        boolean boolean12 = com.operations.Matrix.MatrixUtils.isSquare(matrix10);
        com.operations.Matrix.Matrix matrix13 = com.operations.Matrix.MatrixOperations.transpose(matrix10);
        int int14 = matrix13.getRows();
        com.operations.Matrix.Matrix matrix17 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0L, (double) (byte) 10);
        double[] doubleArray20 = new double[] { 10, 'a' };
        double[] doubleArray23 = new double[] { 10, 'a' };
        double[][] doubleArray24 = new double[][] { doubleArray20, doubleArray23 };
        com.operations.Matrix.Matrix matrix25 = new com.operations.Matrix.Matrix(doubleArray24);
        int int26 = matrix25.getCols();
        int int27 = matrix25.getCols();
        int int28 = matrix25.getCols();
        com.operations.Matrix.Matrix[] matrixArray29 = com.operations.Matrix.MatrixDecompositions.luDecomposition(matrix25);
        com.operations.Matrix.Matrix matrix30 = com.operations.Matrix.MatrixOperations.multiply(matrix17, matrix25);
        com.operations.Matrix.Matrix matrix32 = com.operations.Matrix.MatrixTransformations.rotate2D((double) (short) 100);
        boolean boolean34 = com.operations.Matrix.MatrixUtils.compare(matrix25, matrix32, (double) (byte) 0);
        com.operations.Matrix.Matrix matrix35 = com.operations.Matrix.MatrixOperations.multiply(matrix13, matrix25);
        com.operations.Matrix.Matrix matrix36 = com.operations.Matrix.MatrixOperations.add(matrix2, matrix25);
        java.lang.Class<?> wildcardClass37 = matrix2.getClass();
        org.junit.Assert.assertNotNull(matrix2);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertArrayEquals(doubleArray5, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertArrayEquals(doubleArray8, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 2 + "'", int11 == 2);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(matrix13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 2 + "'", int14 == 2);
        org.junit.Assert.assertNotNull(matrix17);
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertArrayEquals(doubleArray20, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertArrayEquals(doubleArray23, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 2 + "'", int26 == 2);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 2 + "'", int27 == 2);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 2 + "'", int28 == 2);
        org.junit.Assert.assertNotNull(matrixArray29);
        org.junit.Assert.assertNotNull(matrix30);
        org.junit.Assert.assertNotNull(matrix32);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(matrix35);
        org.junit.Assert.assertNotNull(matrix36);
        org.junit.Assert.assertNotNull(wildcardClass37);
    }

    @Test
    public void test1541() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1541");
        // The following exception was thrown during execution in test generation
        try {
            com.operations.Matrix.Matrix matrix2 = new com.operations.Matrix.Matrix((int) (byte) 1, (int) (byte) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.NegativeArraySizeException; message: -1");
        } catch (java.lang.NegativeArraySizeException e) {
            // Expected exception.
        }
    }

    @Test
    public void test1542() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1542");
        com.operations.Matrix.Matrix matrix4 = com.operations.Matrix.MatrixUtils.generateRandomMatrix((int) (byte) 10, (int) 'a', (int) '4', (int) ' ');
        double[][] doubleArray5 = matrix4.getData();
        double[][] doubleArray6 = matrix4.getData();
        com.operations.Matrix.Matrix matrix7 = new com.operations.Matrix.Matrix(doubleArray6);
        int int8 = matrix7.getCols();
        org.junit.Assert.assertNotNull(matrix4);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 97 + "'", int8 == 97);
    }

    @Test
    public void test1543() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1543");
        // The following exception was thrown during execution in test generation
        try {
            com.operations.Matrix.Matrix matrix2 = new com.operations.Matrix.Matrix(10, (int) (short) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.NegativeArraySizeException; message: -1");
        } catch (java.lang.NegativeArraySizeException e) {
            // Expected exception.
        }
    }

    @Test
    public void test1544() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1544");
        double[] doubleArray2 = new double[] { 10, 'a' };
        double[] doubleArray5 = new double[] { 10, 'a' };
        double[][] doubleArray6 = new double[][] { doubleArray2, doubleArray5 };
        com.operations.Matrix.Matrix matrix7 = new com.operations.Matrix.Matrix(doubleArray6);
        com.operations.Matrix.Matrix matrix8 = new com.operations.Matrix.Matrix(doubleArray6);
        com.operations.Matrix.Matrix[] matrixArray9 = com.operations.Matrix.MatrixDecompositions.luDecomposition(matrix8);
        com.operations.Matrix.Matrix matrix12 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0, (double) 100L);
        com.operations.Matrix.Matrix matrix13 = com.operations.Matrix.MatrixOperations.subtract(matrix8, matrix12);
        double[][] doubleArray14 = matrix13.getData();
        com.operations.Matrix.Matrix matrix15 = new com.operations.Matrix.Matrix(doubleArray14);
        com.operations.Matrix.Matrix[] matrixArray16 = com.operations.Matrix.MatrixDecompositions.luDecomposition(matrix15);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertArrayEquals(doubleArray2, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertArrayEquals(doubleArray5, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertNotNull(matrixArray9);
        org.junit.Assert.assertNotNull(matrix12);
        org.junit.Assert.assertNotNull(matrix13);
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertNotNull(matrixArray16);
    }

    @Test
    public void test1545() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1545");
        com.operations.Matrix.Matrix matrix2 = new com.operations.Matrix.Matrix((int) '4', (int) (byte) 1);
    }

    @Test
    public void test1546() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1546");
        com.operations.Matrix.Matrix matrix2 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0L, (double) (byte) 10);
        int int3 = matrix2.getRows();
        com.operations.Matrix.Matrix matrix5 = com.operations.Matrix.MatrixOperations.scalarMultiply(matrix2, (double) 2);
        matrix2.print();
        com.operations.Matrix.Matrix matrix12 = com.operations.Matrix.MatrixUtils.generateRandomMatrix((int) (short) 10, (int) (short) 100, (int) (byte) -1, (-1), (long) (byte) 10);
        boolean boolean14 = com.operations.Matrix.MatrixUtils.compare(matrix2, matrix12, (double) (short) 10);
        double double15 = com.operations.Matrix.MatrixUtils.frobeniusNorm(matrix2);
        boolean boolean16 = com.operations.Matrix.MatrixUtils.isSymmetric(matrix2);
        org.junit.Assert.assertNotNull(matrix2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 2 + "'", int3 == 2);
        org.junit.Assert.assertNotNull(matrix5);
        org.junit.Assert.assertNotNull(matrix12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 10.0d + "'", double15 == 10.0d);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
    }

    @Test
    public void test1547() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1547");
        com.operations.Matrix.Matrix matrix2 = com.operations.Matrix.MatrixTransformations.scale2D((double) 1.0f, (double) 1);
        com.operations.Matrix.Matrix matrix4 = com.operations.Matrix.MatrixTransformations.rotate2D((double) 1.0f);
        com.operations.Matrix.Matrix matrix7 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0L, (double) (byte) 10);
        int int8 = matrix7.getRows();
        com.operations.Matrix.Matrix matrix10 = com.operations.Matrix.MatrixOperations.scalarMultiply(matrix7, (double) 2);
        double double11 = com.operations.Matrix.MatrixUtils.frobeniusNorm(matrix7);
        com.operations.Matrix.Matrix matrix14 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0L, (double) (byte) 10);
        int int15 = matrix14.getRows();
        com.operations.Matrix.Matrix matrix17 = com.operations.Matrix.MatrixOperations.scalarMultiply(matrix14, (double) 2);
        com.operations.Matrix.Matrix matrix18 = com.operations.Matrix.MatrixOperations.subtract(matrix7, matrix17);
        com.operations.Matrix.Matrix matrix19 = com.operations.Matrix.MatrixOperations.add(matrix4, matrix17);
        boolean boolean21 = com.operations.Matrix.MatrixUtils.compare(matrix2, matrix4, (double) (byte) -1);
        com.operations.Matrix.Matrix matrix22 = com.operations.Matrix.MatrixOperations.transpose(matrix4);
        com.operations.Matrix.Matrix matrix25 = com.operations.Matrix.MatrixTransformations.project2D((double) 10L, 10.0d);
        com.operations.Matrix.Matrix matrix27 = com.operations.Matrix.MatrixTransformations.rotate2D((double) (short) 100);
        double[] doubleArray30 = new double[] { 137.90576492663388d, (byte) -1 };
        double[] doubleArray31 = com.operations.Matrix.MatrixSolver.solveGaussian(matrix27, doubleArray30);
        com.operations.Matrix.Matrix matrix34 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0L, (double) (byte) 10);
        double[] doubleArray37 = new double[] { 10, 'a' };
        double[] doubleArray40 = new double[] { 10, 'a' };
        double[][] doubleArray41 = new double[][] { doubleArray37, doubleArray40 };
        com.operations.Matrix.Matrix matrix42 = new com.operations.Matrix.Matrix(doubleArray41);
        int int43 = matrix42.getCols();
        int int44 = matrix42.getCols();
        int int45 = matrix42.getCols();
        com.operations.Matrix.Matrix[] matrixArray46 = com.operations.Matrix.MatrixDecompositions.luDecomposition(matrix42);
        com.operations.Matrix.Matrix matrix47 = com.operations.Matrix.MatrixOperations.multiply(matrix34, matrix42);
        boolean boolean49 = com.operations.Matrix.MatrixUtils.compare(matrix27, matrix34, (double) (-1L));
        double[][] doubleArray50 = matrix27.getData();
        com.operations.Matrix.Matrix matrix52 = com.operations.Matrix.MatrixTransformations.rotate2D((double) (short) 100);
        double[] doubleArray55 = new double[] { 137.90576492663388d, (byte) -1 };
        double[] doubleArray56 = com.operations.Matrix.MatrixSolver.solveGaussian(matrix52, doubleArray55);
        double[] doubleArray57 = com.operations.Matrix.MatrixSolver.solveGaussian(matrix27, doubleArray55);
        double[] doubleArray58 = com.operations.Matrix.MatrixSolver.solveGaussian(matrix25, doubleArray57);
        double[] doubleArray59 = com.operations.Matrix.MatrixSolver.solveGaussian(matrix4, doubleArray58);
        com.operations.Matrix.Matrix matrix62 = com.operations.Matrix.MatrixTransformations.scale2D((double) ' ', (double) 0L);
        double double63 = com.operations.Matrix.MatrixUtils.frobeniusNorm(matrix62);
        com.operations.Matrix.Matrix matrix65 = com.operations.Matrix.MatrixOperations.scalarMultiply(matrix62, (double) 10L);
        boolean boolean67 = com.operations.Matrix.MatrixUtils.compare(matrix4, matrix62, 12.751772028997056d);
        com.operations.Matrix.Matrix matrix68 = com.operations.Matrix.MatrixDecompositions.choleskyDecomposition(matrix4);
        org.junit.Assert.assertNotNull(matrix2);
        org.junit.Assert.assertNotNull(matrix4);
        org.junit.Assert.assertNotNull(matrix7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 2 + "'", int8 == 2);
        org.junit.Assert.assertNotNull(matrix10);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 10.0d + "'", double11 == 10.0d);
        org.junit.Assert.assertNotNull(matrix14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 2 + "'", int15 == 2);
        org.junit.Assert.assertNotNull(matrix17);
        org.junit.Assert.assertNotNull(matrix18);
        org.junit.Assert.assertNotNull(matrix19);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(matrix22);
        org.junit.Assert.assertNotNull(matrix25);
        org.junit.Assert.assertNotNull(matrix27);
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertArrayEquals(doubleArray30, new double[] { 137.90576492663388d, (-1.0d) }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertArrayEquals(doubleArray31, new double[] { (-24.931892522286255d), (-135.63701830716116d) }, 1.0E-15);
        org.junit.Assert.assertNotNull(matrix34);
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertArrayEquals(doubleArray37, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertArrayEquals(doubleArray40, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 2 + "'", int43 == 2);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 2 + "'", int44 == 2);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 2 + "'", int45 == 2);
        org.junit.Assert.assertNotNull(matrixArray46);
        org.junit.Assert.assertNotNull(matrix47);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertNotNull(matrix52);
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertArrayEquals(doubleArray55, new double[] { 137.90576492663388d, (-1.0d) }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray56);
        org.junit.Assert.assertArrayEquals(doubleArray56, new double[] { (-24.931892522286255d), (-135.63701830716116d) }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray57);
        org.junit.Assert.assertArrayEquals(doubleArray57, new double[] { (-24.931892522286255d), (-135.63701830716116d) }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray58);
        org.junit.Assert.assertArrayEquals(doubleArray58, new double[] { (-2.4931892522286256d), (-13.563701830716116d) }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray59);
        org.junit.Assert.assertArrayEquals(doubleArray59, new double[] { (-2.7295287645732618d), (-13.518123861075072d) }, 1.0E-15);
        org.junit.Assert.assertNotNull(matrix62);
        org.junit.Assert.assertTrue("'" + double63 + "' != '" + 32.0d + "'", double63 == 32.0d);
        org.junit.Assert.assertNotNull(matrix65);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertNotNull(matrix68);
    }

    @Test
    public void test1548() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1548");
        com.operations.Matrix.Matrix matrix2 = com.operations.Matrix.MatrixTransformations.project2D(137.90576492663388d, 0.0d);
        double[][] doubleArray3 = matrix2.getData();
        com.operations.Matrix.Matrix matrix6 = com.operations.Matrix.MatrixTransformations.scale2D((double) (-1), (double) (short) 0);
        com.operations.Matrix.Matrix matrix7 = com.operations.Matrix.MatrixOperations.add(matrix2, matrix6);
        double[] doubleArray10 = new double[] { 10, 'a' };
        double[] doubleArray13 = new double[] { 10, 'a' };
        double[][] doubleArray14 = new double[][] { doubleArray10, doubleArray13 };
        com.operations.Matrix.Matrix matrix15 = new com.operations.Matrix.Matrix(doubleArray14);
        int int16 = matrix15.getCols();
        int int17 = matrix15.getCols();
        matrix15.print();
        double[] doubleArray21 = new double[] { 10, 'a' };
        double[] doubleArray24 = new double[] { 10, 'a' };
        double[][] doubleArray25 = new double[][] { doubleArray21, doubleArray24 };
        com.operations.Matrix.Matrix matrix26 = new com.operations.Matrix.Matrix(doubleArray25);
        boolean boolean28 = com.operations.Matrix.MatrixUtils.compare(matrix15, matrix26, (double) (-1));
        boolean boolean29 = com.operations.Matrix.MatrixUtils.isSymmetric(matrix15);
        int int30 = matrix15.getRows();
        com.operations.Matrix.Matrix matrix31 = com.operations.Matrix.MatrixDecompositions.choleskyDecomposition(matrix15);
        double[] doubleArray34 = new double[] { 10, 'a' };
        double[] doubleArray37 = new double[] { 10, 'a' };
        double[][] doubleArray38 = new double[][] { doubleArray34, doubleArray37 };
        com.operations.Matrix.Matrix matrix39 = new com.operations.Matrix.Matrix(doubleArray38);
        com.operations.Matrix.Matrix matrix40 = new com.operations.Matrix.Matrix(doubleArray38);
        com.operations.Matrix.Matrix matrix42 = com.operations.Matrix.MatrixTransformations.rotate2D((double) (short) 100);
        double[] doubleArray45 = new double[] { 137.90576492663388d, (byte) -1 };
        double[] doubleArray46 = com.operations.Matrix.MatrixSolver.solveGaussian(matrix42, doubleArray45);
        com.operations.Matrix.Matrix matrix47 = com.operations.Matrix.MatrixOperations.add(matrix40, matrix42);
        com.operations.Matrix.Matrix matrix48 = com.operations.Matrix.MatrixOperations.transpose(matrix42);
        int int49 = matrix42.getCols();
        com.operations.Matrix.Matrix matrix52 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0L, (double) (byte) 10);
        double[] doubleArray55 = new double[] { 10, 'a' };
        double[] doubleArray58 = new double[] { 10, 'a' };
        double[][] doubleArray59 = new double[][] { doubleArray55, doubleArray58 };
        com.operations.Matrix.Matrix matrix60 = new com.operations.Matrix.Matrix(doubleArray59);
        int int61 = matrix60.getCols();
        int int62 = matrix60.getCols();
        int int63 = matrix60.getCols();
        com.operations.Matrix.Matrix[] matrixArray64 = com.operations.Matrix.MatrixDecompositions.luDecomposition(matrix60);
        com.operations.Matrix.Matrix matrix65 = com.operations.Matrix.MatrixOperations.multiply(matrix52, matrix60);
        com.operations.Matrix.Matrix matrix67 = com.operations.Matrix.MatrixTransformations.rotate2D((double) (short) 100);
        boolean boolean69 = com.operations.Matrix.MatrixUtils.compare(matrix60, matrix67, (double) (byte) 0);
        boolean boolean70 = com.operations.Matrix.MatrixUtils.isSymmetric(matrix67);
        boolean boolean71 = com.operations.Matrix.MatrixUtils.isSquare(matrix67);
        com.operations.Matrix.Matrix matrix73 = com.operations.Matrix.MatrixTransformations.rotate2D((double) (short) 100);
        boolean boolean75 = com.operations.Matrix.MatrixUtils.compare(matrix67, matrix73, (double) (byte) 100);
        matrix73.print();
        com.operations.Matrix.Matrix matrix77 = com.operations.Matrix.MatrixOperations.add(matrix42, matrix73);
        com.operations.Matrix.Matrix matrix78 = com.operations.Matrix.MatrixOperations.subtract(matrix31, matrix73);
        boolean boolean80 = com.operations.Matrix.MatrixUtils.compare(matrix7, matrix78, (-0.1736481776669303d));
        org.junit.Assert.assertNotNull(matrix2);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertNotNull(matrix6);
        org.junit.Assert.assertNotNull(matrix7);
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertArrayEquals(doubleArray10, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertArrayEquals(doubleArray13, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 2 + "'", int16 == 2);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 2 + "'", int17 == 2);
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertArrayEquals(doubleArray21, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertArrayEquals(doubleArray24, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 2 + "'", int30 == 2);
        org.junit.Assert.assertNotNull(matrix31);
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertArrayEquals(doubleArray34, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertArrayEquals(doubleArray37, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertNotNull(matrix42);
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertArrayEquals(doubleArray45, new double[] { 137.90576492663388d, (-1.0d) }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray46);
        org.junit.Assert.assertArrayEquals(doubleArray46, new double[] { (-24.931892522286255d), (-135.63701830716116d) }, 1.0E-15);
        org.junit.Assert.assertNotNull(matrix47);
        org.junit.Assert.assertNotNull(matrix48);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 2 + "'", int49 == 2);
        org.junit.Assert.assertNotNull(matrix52);
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertArrayEquals(doubleArray55, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray58);
        org.junit.Assert.assertArrayEquals(doubleArray58, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray59);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 2 + "'", int61 == 2);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 2 + "'", int62 == 2);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 2 + "'", int63 == 2);
        org.junit.Assert.assertNotNull(matrixArray64);
        org.junit.Assert.assertNotNull(matrix65);
        org.junit.Assert.assertNotNull(matrix67);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + true + "'", boolean71 == true);
        org.junit.Assert.assertNotNull(matrix73);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + true + "'", boolean75 == true);
        org.junit.Assert.assertNotNull(matrix77);
        org.junit.Assert.assertNotNull(matrix78);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
    }

    @Test
    public void test1549() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1549");
        com.operations.Matrix.Matrix matrix2 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0L, 100.00499987500625d);
        boolean boolean3 = com.operations.Matrix.MatrixUtils.isSquare(matrix2);
        com.operations.Matrix.Matrix matrix5 = com.operations.Matrix.MatrixOperations.scalarMultiply(matrix2, (double) '#');
        org.junit.Assert.assertNotNull(matrix2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNotNull(matrix5);
    }

    @Test
    public void test1550() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1550");
        com.operations.Matrix.Matrix matrix2 = com.operations.Matrix.MatrixTransformations.project2D((double) ' ', 0.0d);
        double[] doubleArray5 = new double[] { 10, 'a' };
        double[] doubleArray8 = new double[] { 10, 'a' };
        double[][] doubleArray9 = new double[][] { doubleArray5, doubleArray8 };
        com.operations.Matrix.Matrix matrix10 = new com.operations.Matrix.Matrix(doubleArray9);
        int int11 = matrix10.getCols();
        boolean boolean12 = com.operations.Matrix.MatrixUtils.isSquare(matrix10);
        com.operations.Matrix.Matrix matrix13 = com.operations.Matrix.MatrixOperations.transpose(matrix10);
        int int14 = matrix13.getRows();
        com.operations.Matrix.Matrix matrix17 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0L, (double) (byte) 10);
        double[] doubleArray20 = new double[] { 10, 'a' };
        double[] doubleArray23 = new double[] { 10, 'a' };
        double[][] doubleArray24 = new double[][] { doubleArray20, doubleArray23 };
        com.operations.Matrix.Matrix matrix25 = new com.operations.Matrix.Matrix(doubleArray24);
        int int26 = matrix25.getCols();
        int int27 = matrix25.getCols();
        int int28 = matrix25.getCols();
        com.operations.Matrix.Matrix[] matrixArray29 = com.operations.Matrix.MatrixDecompositions.luDecomposition(matrix25);
        com.operations.Matrix.Matrix matrix30 = com.operations.Matrix.MatrixOperations.multiply(matrix17, matrix25);
        com.operations.Matrix.Matrix matrix32 = com.operations.Matrix.MatrixTransformations.rotate2D((double) (short) 100);
        boolean boolean34 = com.operations.Matrix.MatrixUtils.compare(matrix25, matrix32, (double) (byte) 0);
        com.operations.Matrix.Matrix matrix35 = com.operations.Matrix.MatrixOperations.multiply(matrix13, matrix25);
        com.operations.Matrix.Matrix matrix36 = com.operations.Matrix.MatrixOperations.add(matrix2, matrix25);
        matrix25.print();
        com.operations.Matrix.Matrix[] matrixArray38 = com.operations.Matrix.MatrixDecompositions.luDecomposition(matrix25);
        boolean boolean39 = com.operations.Matrix.MatrixUtils.isSquare(matrix25);
        com.operations.Matrix.Matrix[] matrixArray40 = com.operations.Matrix.MatrixDecompositions.luDecomposition(matrix25);
        int int41 = matrix25.getCols();
        java.lang.Class<?> wildcardClass42 = matrix25.getClass();
        org.junit.Assert.assertNotNull(matrix2);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertArrayEquals(doubleArray5, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertArrayEquals(doubleArray8, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 2 + "'", int11 == 2);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(matrix13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 2 + "'", int14 == 2);
        org.junit.Assert.assertNotNull(matrix17);
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertArrayEquals(doubleArray20, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertArrayEquals(doubleArray23, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 2 + "'", int26 == 2);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 2 + "'", int27 == 2);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 2 + "'", int28 == 2);
        org.junit.Assert.assertNotNull(matrixArray29);
        org.junit.Assert.assertNotNull(matrix30);
        org.junit.Assert.assertNotNull(matrix32);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(matrix35);
        org.junit.Assert.assertNotNull(matrix36);
        org.junit.Assert.assertNotNull(matrixArray38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertNotNull(matrixArray40);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 2 + "'", int41 == 2);
        org.junit.Assert.assertNotNull(wildcardClass42);
    }

    @Test
    public void test1551() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1551");
        double[] doubleArray2 = new double[] { 10, 'a' };
        double[] doubleArray5 = new double[] { 10, 'a' };
        double[][] doubleArray6 = new double[][] { doubleArray2, doubleArray5 };
        com.operations.Matrix.Matrix matrix7 = new com.operations.Matrix.Matrix(doubleArray6);
        com.operations.Matrix.Matrix matrix8 = new com.operations.Matrix.Matrix(doubleArray6);
        com.operations.Matrix.Matrix matrix10 = com.operations.Matrix.MatrixTransformations.rotate2D((double) (short) 100);
        double[] doubleArray13 = new double[] { 137.90576492663388d, (byte) -1 };
        double[] doubleArray14 = com.operations.Matrix.MatrixSolver.solveGaussian(matrix10, doubleArray13);
        com.operations.Matrix.Matrix matrix15 = com.operations.Matrix.MatrixOperations.add(matrix8, matrix10);
        boolean boolean16 = com.operations.Matrix.MatrixUtils.isSymmetric(matrix15);
        com.operations.Matrix.Matrix matrix19 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0.0f, (double) (-1));
        com.operations.Matrix.Matrix matrix22 = com.operations.Matrix.MatrixTransformations.scale2D(146.4308710620817d, (double) 10L);
        com.operations.Matrix.Matrix matrix23 = com.operations.Matrix.MatrixOperations.multiply(matrix19, matrix22);
        com.operations.Matrix.Matrix matrix24 = com.operations.Matrix.MatrixOperations.multiply(matrix15, matrix19);
        int int25 = matrix19.getCols();
        // The following exception was thrown during execution in test generation
        try {
            com.operations.Matrix.Matrix matrix26 = com.operations.Matrix.MatrixDecompositions.choleskyDecomposition(matrix19);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Matrix is not positive definite.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertArrayEquals(doubleArray2, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertArrayEquals(doubleArray5, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertNotNull(matrix10);
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertArrayEquals(doubleArray13, new double[] { 137.90576492663388d, (-1.0d) }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertArrayEquals(doubleArray14, new double[] { (-24.931892522286255d), (-135.63701830716116d) }, 1.0E-15);
        org.junit.Assert.assertNotNull(matrix15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(matrix19);
        org.junit.Assert.assertNotNull(matrix22);
        org.junit.Assert.assertNotNull(matrix23);
        org.junit.Assert.assertNotNull(matrix24);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 2 + "'", int25 == 2);
    }

    @Test
    public void test1552() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1552");
        com.operations.Matrix.Matrix matrix2 = com.operations.Matrix.MatrixTransformations.project2D(19018.0d, 365.68429006453096d);
        org.junit.Assert.assertNotNull(matrix2);
    }

    @Test
    public void test1553() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1553");
        // The following exception was thrown during execution in test generation
        try {
            com.operations.Matrix.Matrix matrix4 = com.operations.Matrix.MatrixUtils.generateRandomMatrix(0, (int) '#', (int) (short) 100, 32);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
    }

    @Test
    public void test1554() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1554");
        com.operations.Matrix.Matrix matrix2 = com.operations.Matrix.MatrixTransformations.project2D((double) (byte) 0, (double) 10);
        org.junit.Assert.assertNotNull(matrix2);
    }

    @Test
    public void test1555() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1555");
        com.operations.Matrix.Matrix matrix2 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0L, (double) (byte) 10);
        int int3 = matrix2.getRows();
        com.operations.Matrix.Matrix matrix5 = com.operations.Matrix.MatrixOperations.scalarMultiply(matrix2, (double) 2);
        com.operations.Matrix.Matrix[] matrixArray6 = com.operations.Matrix.MatrixDecompositions.luDecomposition(matrix5);
        matrix5.print();
        // The following exception was thrown during execution in test generation
        try {
            matrix5.setValue((int) (byte) 10, (int) (short) -1, (double) (byte) 1);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: Index 10 out of bounds for length 2");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(matrix2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 2 + "'", int3 == 2);
        org.junit.Assert.assertNotNull(matrix5);
        org.junit.Assert.assertNotNull(matrixArray6);
    }

    @Test
    public void test1556() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1556");
        // The following exception was thrown during execution in test generation
        try {
            com.operations.Matrix.Matrix matrix4 = com.operations.Matrix.MatrixUtils.generateRandomMatrix(0, 0, (int) (short) 1, 1);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
    }

    @Test
    public void test1557() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1557");
        // The following exception was thrown during execution in test generation
        try {
            com.operations.Matrix.Matrix matrix5 = com.operations.Matrix.MatrixUtils.generateRandomMatrix(0, 100, (int) '4', 52, (long) 'a');
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
    }

    @Test
    public void test1558() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1558");
        com.operations.Matrix.Matrix matrix1 = com.operations.Matrix.MatrixTransformations.rotate2D((double) 1.0f);
        com.operations.Matrix.Matrix matrix4 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0L, (double) (byte) 10);
        int int5 = matrix4.getRows();
        com.operations.Matrix.Matrix matrix7 = com.operations.Matrix.MatrixOperations.scalarMultiply(matrix4, (double) 2);
        double double8 = com.operations.Matrix.MatrixUtils.frobeniusNorm(matrix4);
        com.operations.Matrix.Matrix matrix11 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0L, (double) (byte) 10);
        int int12 = matrix11.getRows();
        com.operations.Matrix.Matrix matrix14 = com.operations.Matrix.MatrixOperations.scalarMultiply(matrix11, (double) 2);
        com.operations.Matrix.Matrix matrix15 = com.operations.Matrix.MatrixOperations.subtract(matrix4, matrix14);
        com.operations.Matrix.Matrix matrix16 = com.operations.Matrix.MatrixOperations.add(matrix1, matrix14);
        com.operations.Matrix.Matrix matrix18 = com.operations.Matrix.MatrixOperations.scalarMultiply(matrix16, (double) 0L);
        boolean boolean19 = com.operations.Matrix.MatrixUtils.isSquare(matrix18);
        matrix18.print();
        org.junit.Assert.assertNotNull(matrix1);
        org.junit.Assert.assertNotNull(matrix4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 2 + "'", int5 == 2);
        org.junit.Assert.assertNotNull(matrix7);
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 10.0d + "'", double8 == 10.0d);
        org.junit.Assert.assertNotNull(matrix11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 2 + "'", int12 == 2);
        org.junit.Assert.assertNotNull(matrix14);
        org.junit.Assert.assertNotNull(matrix15);
        org.junit.Assert.assertNotNull(matrix16);
        org.junit.Assert.assertNotNull(matrix18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
    }

    @Test
    public void test1559() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1559");
        // The following exception was thrown during execution in test generation
        try {
            com.operations.Matrix.Matrix matrix2 = new com.operations.Matrix.Matrix((int) (short) 10, (int) (short) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.NegativeArraySizeException; message: -1");
        } catch (java.lang.NegativeArraySizeException e) {
            // Expected exception.
        }
    }

    @Test
    public void test1560() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1560");
        com.operations.Matrix.Matrix matrix2 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0L, (double) (byte) 10);
        com.operations.Matrix.Matrix matrix3 = com.operations.Matrix.MatrixOperations.transpose(matrix2);
        java.lang.Class<?> wildcardClass4 = matrix3.getClass();
        org.junit.Assert.assertNotNull(matrix2);
        org.junit.Assert.assertNotNull(matrix3);
        org.junit.Assert.assertNotNull(wildcardClass4);
    }

    @Test
    public void test1561() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1561");
        com.operations.Matrix.Matrix matrix2 = com.operations.Matrix.MatrixTransformations.project2D((double) (short) 100, (double) 0L);
        boolean boolean3 = com.operations.Matrix.MatrixUtils.isSquare(matrix2);
        double[] doubleArray6 = new double[] { 10, 'a' };
        double[] doubleArray9 = new double[] { 10, 'a' };
        double[][] doubleArray10 = new double[][] { doubleArray6, doubleArray9 };
        com.operations.Matrix.Matrix matrix11 = new com.operations.Matrix.Matrix(doubleArray10);
        com.operations.Matrix.Matrix matrix12 = new com.operations.Matrix.Matrix(doubleArray10);
        com.operations.Matrix.Matrix matrix14 = com.operations.Matrix.MatrixTransformations.rotate2D((double) (short) 100);
        double[] doubleArray17 = new double[] { 137.90576492663388d, (byte) -1 };
        double[] doubleArray18 = com.operations.Matrix.MatrixSolver.solveGaussian(matrix14, doubleArray17);
        com.operations.Matrix.Matrix matrix19 = com.operations.Matrix.MatrixOperations.add(matrix12, matrix14);
        com.operations.Matrix.Matrix matrix20 = com.operations.Matrix.MatrixOperations.transpose(matrix14);
        int int21 = matrix14.getCols();
        int int22 = matrix14.getRows();
        double[] doubleArray25 = new double[] { 10, 'a' };
        double[] doubleArray28 = new double[] { 10, 'a' };
        double[][] doubleArray29 = new double[][] { doubleArray25, doubleArray28 };
        com.operations.Matrix.Matrix matrix30 = new com.operations.Matrix.Matrix(doubleArray29);
        int int31 = matrix30.getCols();
        int int32 = matrix30.getCols();
        matrix30.print();
        double[] doubleArray36 = new double[] { 10, 'a' };
        double[] doubleArray39 = new double[] { 10, 'a' };
        double[][] doubleArray40 = new double[][] { doubleArray36, doubleArray39 };
        com.operations.Matrix.Matrix matrix41 = new com.operations.Matrix.Matrix(doubleArray40);
        boolean boolean43 = com.operations.Matrix.MatrixUtils.compare(matrix30, matrix41, (double) (-1));
        com.operations.Matrix.Matrix matrix44 = com.operations.Matrix.MatrixOperations.multiply(matrix14, matrix30);
        double double47 = matrix14.getValue((int) (short) 0, 0);
        com.operations.Matrix.Matrix matrix48 = com.operations.Matrix.MatrixOperations.add(matrix2, matrix14);
        com.operations.Matrix.Matrix matrix50 = com.operations.Matrix.MatrixOperations.scalarMultiply(matrix14, 100.00499987500625d);
        double[][] doubleArray51 = matrix50.getData();
        org.junit.Assert.assertNotNull(matrix2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertArrayEquals(doubleArray6, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertArrayEquals(doubleArray9, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertNotNull(matrix14);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertArrayEquals(doubleArray17, new double[] { 137.90576492663388d, (-1.0d) }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertArrayEquals(doubleArray18, new double[] { (-24.931892522286255d), (-135.63701830716116d) }, 1.0E-15);
        org.junit.Assert.assertNotNull(matrix19);
        org.junit.Assert.assertNotNull(matrix20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 2 + "'", int21 == 2);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 2 + "'", int22 == 2);
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertArrayEquals(doubleArray25, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertArrayEquals(doubleArray28, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 2 + "'", int31 == 2);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 2 + "'", int32 == 2);
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertArrayEquals(doubleArray36, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertArrayEquals(doubleArray39, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(matrix44);
        org.junit.Assert.assertTrue("'" + double47 + "' != '" + (-0.1736481776669303d) + "'", double47 == (-0.1736481776669303d));
        org.junit.Assert.assertNotNull(matrix48);
        org.junit.Assert.assertNotNull(matrix50);
        org.junit.Assert.assertNotNull(doubleArray51);
    }

    @Test
    public void test1562() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1562");
        double[] doubleArray2 = new double[] { 10, 'a' };
        double[] doubleArray5 = new double[] { 10, 'a' };
        double[][] doubleArray6 = new double[][] { doubleArray2, doubleArray5 };
        com.operations.Matrix.Matrix matrix7 = new com.operations.Matrix.Matrix(doubleArray6);
        com.operations.Matrix.Matrix matrix8 = new com.operations.Matrix.Matrix(doubleArray6);
        com.operations.Matrix.Matrix matrix10 = com.operations.Matrix.MatrixTransformations.rotate2D((double) (short) 100);
        double[] doubleArray13 = new double[] { 137.90576492663388d, (byte) -1 };
        double[] doubleArray14 = com.operations.Matrix.MatrixSolver.solveGaussian(matrix10, doubleArray13);
        com.operations.Matrix.Matrix matrix15 = com.operations.Matrix.MatrixOperations.add(matrix8, matrix10);
        com.operations.Matrix.Matrix matrix16 = com.operations.Matrix.MatrixOperations.transpose(matrix10);
        int int17 = matrix10.getCols();
        com.operations.Matrix.Matrix matrix20 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0L, (double) (byte) 10);
        double[] doubleArray23 = new double[] { 10, 'a' };
        double[] doubleArray26 = new double[] { 10, 'a' };
        double[][] doubleArray27 = new double[][] { doubleArray23, doubleArray26 };
        com.operations.Matrix.Matrix matrix28 = new com.operations.Matrix.Matrix(doubleArray27);
        int int29 = matrix28.getCols();
        int int30 = matrix28.getCols();
        int int31 = matrix28.getCols();
        com.operations.Matrix.Matrix[] matrixArray32 = com.operations.Matrix.MatrixDecompositions.luDecomposition(matrix28);
        com.operations.Matrix.Matrix matrix33 = com.operations.Matrix.MatrixOperations.multiply(matrix20, matrix28);
        com.operations.Matrix.Matrix matrix35 = com.operations.Matrix.MatrixTransformations.rotate2D((double) (short) 100);
        boolean boolean37 = com.operations.Matrix.MatrixUtils.compare(matrix28, matrix35, (double) (byte) 0);
        boolean boolean38 = com.operations.Matrix.MatrixUtils.isSymmetric(matrix35);
        boolean boolean39 = com.operations.Matrix.MatrixUtils.isSquare(matrix35);
        com.operations.Matrix.Matrix matrix41 = com.operations.Matrix.MatrixTransformations.rotate2D((double) (short) 100);
        boolean boolean43 = com.operations.Matrix.MatrixUtils.compare(matrix35, matrix41, (double) (byte) 100);
        matrix41.print();
        com.operations.Matrix.Matrix matrix45 = com.operations.Matrix.MatrixOperations.add(matrix10, matrix41);
        com.operations.Matrix.Matrix matrix48 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0L, (double) (byte) 10);
        int int49 = matrix48.getRows();
        com.operations.Matrix.Matrix matrix51 = com.operations.Matrix.MatrixOperations.scalarMultiply(matrix48, (double) 2);
        matrix48.print();
        com.operations.Matrix.Matrix matrix54 = com.operations.Matrix.MatrixOperations.scalarMultiply(matrix48, 100.00499987500625d);
        com.operations.Matrix.Matrix matrix57 = new com.operations.Matrix.Matrix(10, (int) (byte) 1);
        boolean boolean59 = com.operations.Matrix.MatrixUtils.compare(matrix54, matrix57, (double) 100L);
        com.operations.Matrix.Matrix matrix60 = com.operations.Matrix.MatrixOperations.add(matrix41, matrix54);
        double double61 = com.operations.Matrix.MatrixUtils.frobeniusNorm(matrix41);
        boolean boolean62 = com.operations.Matrix.MatrixUtils.isSquare(matrix41);
        int int63 = matrix41.getCols();
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertArrayEquals(doubleArray2, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertArrayEquals(doubleArray5, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertNotNull(matrix10);
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertArrayEquals(doubleArray13, new double[] { 137.90576492663388d, (-1.0d) }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertArrayEquals(doubleArray14, new double[] { (-24.931892522286255d), (-135.63701830716116d) }, 1.0E-15);
        org.junit.Assert.assertNotNull(matrix15);
        org.junit.Assert.assertNotNull(matrix16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 2 + "'", int17 == 2);
        org.junit.Assert.assertNotNull(matrix20);
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertArrayEquals(doubleArray23, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertArrayEquals(doubleArray26, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 2 + "'", int29 == 2);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 2 + "'", int30 == 2);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 2 + "'", int31 == 2);
        org.junit.Assert.assertNotNull(matrixArray32);
        org.junit.Assert.assertNotNull(matrix33);
        org.junit.Assert.assertNotNull(matrix35);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertNotNull(matrix41);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertNotNull(matrix45);
        org.junit.Assert.assertNotNull(matrix48);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 2 + "'", int49 == 2);
        org.junit.Assert.assertNotNull(matrix51);
        org.junit.Assert.assertNotNull(matrix54);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNotNull(matrix60);
        org.junit.Assert.assertTrue("'" + double61 + "' != '" + 1.414213562373095d + "'", double61 == 1.414213562373095d);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + true + "'", boolean62 == true);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 2 + "'", int63 == 2);
    }

    @Test
    public void test1563() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1563");
        com.operations.Matrix.Matrix matrix4 = com.operations.Matrix.MatrixUtils.generateRandomMatrix((int) '#', (int) (byte) 0, 10, (int) (short) -1);
        com.operations.Matrix.Matrix matrix6 = com.operations.Matrix.MatrixOperations.scalarMultiply(matrix4, (double) 100L);
        com.operations.Matrix.Matrix matrix8 = com.operations.Matrix.MatrixOperations.scalarMultiply(matrix4, (double) 100.0f);
        // The following exception was thrown during execution in test generation
        try {
            com.operations.Matrix.Matrix matrix9 = com.operations.Matrix.MatrixOperations.transpose(matrix4);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: Index 0 out of bounds for length 0");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(matrix4);
        org.junit.Assert.assertNotNull(matrix6);
        org.junit.Assert.assertNotNull(matrix8);
    }

    @Test
    public void test1564() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1564");
        com.operations.Matrix.Matrix matrix1 = com.operations.Matrix.MatrixTransformations.rotate2D((double) 'a');
        com.operations.Matrix.Matrix matrix3 = com.operations.Matrix.MatrixTransformations.rotate2D((double) 1.0f);
        com.operations.Matrix.Matrix matrix4 = com.operations.Matrix.MatrixOperations.add(matrix1, matrix3);
        com.operations.Matrix.Matrix matrix5 = com.operations.Matrix.MatrixOperations.transpose(matrix1);
        org.junit.Assert.assertNotNull(matrix1);
        org.junit.Assert.assertNotNull(matrix3);
        org.junit.Assert.assertNotNull(matrix4);
        org.junit.Assert.assertNotNull(matrix5);
    }

    @Test
    public void test1565() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1565");
        com.operations.Matrix.Matrix matrix2 = com.operations.Matrix.MatrixTransformations.scale2D((double) 10.0f, 145.11374848717816d);
        org.junit.Assert.assertNotNull(matrix2);
    }

    @Test
    public void test1566() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1566");
        // The following exception was thrown during execution in test generation
        try {
            com.operations.Matrix.Matrix matrix4 = com.operations.Matrix.MatrixUtils.generateRandomMatrix(35, (-1), (int) (byte) 100, 10);
            org.junit.Assert.fail("Expected exception of type java.lang.NegativeArraySizeException; message: -1");
        } catch (java.lang.NegativeArraySizeException e) {
            // Expected exception.
        }
    }

    @Test
    public void test1567() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1567");
        double[] doubleArray2 = new double[] { 10, 'a' };
        double[] doubleArray5 = new double[] { 10, 'a' };
        double[][] doubleArray6 = new double[][] { doubleArray2, doubleArray5 };
        com.operations.Matrix.Matrix matrix7 = new com.operations.Matrix.Matrix(doubleArray6);
        int int8 = matrix7.getCols();
        int int9 = matrix7.getCols();
        int int10 = matrix7.getCols();
        com.operations.Matrix.Matrix matrix16 = com.operations.Matrix.MatrixUtils.generateRandomMatrix(100, (int) (byte) 1, (int) '#', (int) '#', 1L);
        double double19 = matrix16.getValue((int) '4', 0);
        double double20 = com.operations.Matrix.MatrixUtils.frobeniusNorm(matrix16);
        boolean boolean21 = com.operations.Matrix.MatrixUtils.isSquare(matrix16);
        boolean boolean23 = com.operations.Matrix.MatrixUtils.compare(matrix7, matrix16, (double) 100L);
        double[][] doubleArray24 = matrix7.getData();
        com.operations.Matrix.Matrix matrix25 = com.operations.Matrix.MatrixDecompositions.choleskyDecomposition(matrix7);
        double[] doubleArray28 = new double[] { 10, 'a' };
        double[] doubleArray31 = new double[] { 10, 'a' };
        double[][] doubleArray32 = new double[][] { doubleArray28, doubleArray31 };
        com.operations.Matrix.Matrix matrix33 = new com.operations.Matrix.Matrix(doubleArray32);
        com.operations.Matrix.Matrix matrix34 = new com.operations.Matrix.Matrix(doubleArray32);
        com.operations.Matrix.Matrix[] matrixArray35 = com.operations.Matrix.MatrixDecompositions.luDecomposition(matrix34);
        com.operations.Matrix.Matrix matrix38 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0, (double) 100L);
        com.operations.Matrix.Matrix matrix39 = com.operations.Matrix.MatrixOperations.subtract(matrix34, matrix38);
        boolean boolean40 = com.operations.Matrix.MatrixUtils.isSymmetric(matrix34);
        com.operations.Matrix.Matrix matrix43 = com.operations.Matrix.MatrixTransformations.project2D(0.0d, (double) 0);
        double[][] doubleArray44 = matrix43.getData();
        com.operations.Matrix.Matrix matrix47 = com.operations.Matrix.MatrixTransformations.project2D((double) ' ', 0.0d);
        double[] doubleArray50 = new double[] { 10, 'a' };
        double[] doubleArray53 = new double[] { 10, 'a' };
        double[][] doubleArray54 = new double[][] { doubleArray50, doubleArray53 };
        com.operations.Matrix.Matrix matrix55 = new com.operations.Matrix.Matrix(doubleArray54);
        int int56 = matrix55.getCols();
        boolean boolean57 = com.operations.Matrix.MatrixUtils.isSquare(matrix55);
        com.operations.Matrix.Matrix matrix58 = com.operations.Matrix.MatrixOperations.transpose(matrix55);
        int int59 = matrix58.getRows();
        com.operations.Matrix.Matrix matrix62 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0L, (double) (byte) 10);
        double[] doubleArray65 = new double[] { 10, 'a' };
        double[] doubleArray68 = new double[] { 10, 'a' };
        double[][] doubleArray69 = new double[][] { doubleArray65, doubleArray68 };
        com.operations.Matrix.Matrix matrix70 = new com.operations.Matrix.Matrix(doubleArray69);
        int int71 = matrix70.getCols();
        int int72 = matrix70.getCols();
        int int73 = matrix70.getCols();
        com.operations.Matrix.Matrix[] matrixArray74 = com.operations.Matrix.MatrixDecompositions.luDecomposition(matrix70);
        com.operations.Matrix.Matrix matrix75 = com.operations.Matrix.MatrixOperations.multiply(matrix62, matrix70);
        com.operations.Matrix.Matrix matrix77 = com.operations.Matrix.MatrixTransformations.rotate2D((double) (short) 100);
        boolean boolean79 = com.operations.Matrix.MatrixUtils.compare(matrix70, matrix77, (double) (byte) 0);
        com.operations.Matrix.Matrix matrix80 = com.operations.Matrix.MatrixOperations.multiply(matrix58, matrix70);
        com.operations.Matrix.Matrix matrix81 = com.operations.Matrix.MatrixOperations.add(matrix47, matrix70);
        com.operations.Matrix.Matrix matrix82 = com.operations.Matrix.MatrixOperations.transpose(matrix47);
        boolean boolean84 = com.operations.Matrix.MatrixUtils.compare(matrix43, matrix47, (double) 0L);
        com.operations.Matrix.Matrix matrix85 = com.operations.Matrix.MatrixOperations.multiply(matrix34, matrix43);
        com.operations.Matrix.Matrix[] matrixArray86 = com.operations.Matrix.MatrixDecompositions.luDecomposition(matrix85);
        com.operations.Matrix.Matrix matrix87 = com.operations.Matrix.MatrixOperations.multiply(matrix7, matrix85);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertArrayEquals(doubleArray2, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertArrayEquals(doubleArray5, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 2 + "'", int8 == 2);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 2 + "'", int9 == 2);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 2 + "'", int10 == 2);
        org.junit.Assert.assertNotNull(matrix16);
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 35.0d + "'", double19 == 35.0d);
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 350.0d + "'", double20 == 350.0d);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertNotNull(matrix25);
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertArrayEquals(doubleArray28, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertArrayEquals(doubleArray31, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertNotNull(matrixArray35);
        org.junit.Assert.assertNotNull(matrix38);
        org.junit.Assert.assertNotNull(matrix39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(matrix43);
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertNotNull(matrix47);
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertArrayEquals(doubleArray50, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertArrayEquals(doubleArray53, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray54);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 2 + "'", int56 == 2);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + true + "'", boolean57 == true);
        org.junit.Assert.assertNotNull(matrix58);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 2 + "'", int59 == 2);
        org.junit.Assert.assertNotNull(matrix62);
        org.junit.Assert.assertNotNull(doubleArray65);
        org.junit.Assert.assertArrayEquals(doubleArray65, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray68);
        org.junit.Assert.assertArrayEquals(doubleArray68, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray69);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 2 + "'", int71 == 2);
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 2 + "'", int72 == 2);
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + 2 + "'", int73 == 2);
        org.junit.Assert.assertNotNull(matrixArray74);
        org.junit.Assert.assertNotNull(matrix75);
        org.junit.Assert.assertNotNull(matrix77);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertNotNull(matrix80);
        org.junit.Assert.assertNotNull(matrix81);
        org.junit.Assert.assertNotNull(matrix82);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
        org.junit.Assert.assertNotNull(matrix85);
        org.junit.Assert.assertNotNull(matrixArray86);
        org.junit.Assert.assertNotNull(matrix87);
    }

    @Test
    public void test1568() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1568");
        com.operations.Matrix.Matrix matrix2 = com.operations.Matrix.MatrixTransformations.scale2D(18.985133644271098d, (double) (byte) 1);
        org.junit.Assert.assertNotNull(matrix2);
    }

    @Test
    public void test1569() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1569");
        com.operations.Matrix.Matrix matrix2 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0.0f, 350.0d);
        com.operations.Matrix.Matrix matrix5 = com.operations.Matrix.MatrixTransformations.project2D(0.0d, (double) 0);
        com.operations.Matrix.Matrix[] matrixArray6 = com.operations.Matrix.MatrixDecompositions.luDecomposition(matrix5);
        com.operations.Matrix.Matrix matrix9 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0L, (double) (byte) 10);
        int int10 = matrix9.getRows();
        com.operations.Matrix.Matrix matrix12 = com.operations.Matrix.MatrixOperations.scalarMultiply(matrix9, (double) 2);
        double double13 = com.operations.Matrix.MatrixUtils.frobeniusNorm(matrix9);
        int int14 = matrix9.getRows();
        com.operations.Matrix.Matrix matrix15 = com.operations.Matrix.MatrixOperations.transpose(matrix9);
        com.operations.Matrix.Matrix matrix16 = com.operations.Matrix.MatrixOperations.multiply(matrix5, matrix15);
        com.operations.Matrix.Matrix matrix17 = com.operations.Matrix.MatrixOperations.multiply(matrix2, matrix15);
        com.operations.Matrix.Matrix matrix18 = com.operations.Matrix.MatrixOperations.transpose(matrix17);
        double double19 = com.operations.Matrix.MatrixUtils.frobeniusNorm(matrix18);
        com.operations.Matrix.Matrix matrix22 = new com.operations.Matrix.Matrix(10, (int) (byte) 10);
        // The following exception was thrown during execution in test generation
        try {
            com.operations.Matrix.Matrix matrix23 = com.operations.Matrix.MatrixOperations.add(matrix18, matrix22);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Matrices must have the same dimensions for addition.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(matrix2);
        org.junit.Assert.assertNotNull(matrix5);
        org.junit.Assert.assertNotNull(matrixArray6);
        org.junit.Assert.assertNotNull(matrix9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 2 + "'", int10 == 2);
        org.junit.Assert.assertNotNull(matrix12);
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 10.0d + "'", double13 == 10.0d);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 2 + "'", int14 == 2);
        org.junit.Assert.assertNotNull(matrix15);
        org.junit.Assert.assertNotNull(matrix16);
        org.junit.Assert.assertNotNull(matrix17);
        org.junit.Assert.assertNotNull(matrix18);
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 3500.0d + "'", double19 == 3500.0d);
    }

    @Test
    public void test1570() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1570");
        com.operations.Matrix.Matrix matrix2 = com.operations.Matrix.MatrixTransformations.scale2D(145.11374848717816d, 41.14922324710797d);
        org.junit.Assert.assertNotNull(matrix2);
    }

    @Test
    public void test1571() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1571");
        com.operations.Matrix.Matrix matrix2 = com.operations.Matrix.MatrixTransformations.project2D((double) 0.0f, (double) '#');
        // The following exception was thrown during execution in test generation
        try {
            double double5 = matrix2.getValue(10, (int) (short) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(matrix2);
    }

    @Test
    public void test1572() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1572");
        com.operations.Matrix.Matrix matrix2 = com.operations.Matrix.MatrixTransformations.project2D(3500.0d, 0.9998476951563913d);
        boolean boolean3 = com.operations.Matrix.MatrixUtils.isSymmetric(matrix2);
        int int4 = matrix2.getCols();
        org.junit.Assert.assertNotNull(matrix2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 2 + "'", int4 == 2);
    }

    @Test
    public void test1573() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1573");
        double[] doubleArray2 = new double[] { 10, 'a' };
        double[] doubleArray5 = new double[] { 10, 'a' };
        double[][] doubleArray6 = new double[][] { doubleArray2, doubleArray5 };
        com.operations.Matrix.Matrix matrix7 = new com.operations.Matrix.Matrix(doubleArray6);
        com.operations.Matrix.Matrix matrix8 = new com.operations.Matrix.Matrix(doubleArray6);
        com.operations.Matrix.Matrix[] matrixArray9 = com.operations.Matrix.MatrixDecompositions.luDecomposition(matrix8);
        double double10 = com.operations.Matrix.MatrixUtils.frobeniusNorm(matrix8);
        double[] doubleArray13 = new double[] { 10, 'a' };
        double[] doubleArray16 = new double[] { 10, 'a' };
        double[][] doubleArray17 = new double[][] { doubleArray13, doubleArray16 };
        com.operations.Matrix.Matrix matrix18 = new com.operations.Matrix.Matrix(doubleArray17);
        com.operations.Matrix.Matrix matrix19 = new com.operations.Matrix.Matrix(doubleArray17);
        boolean boolean20 = com.operations.Matrix.MatrixUtils.isSquare(matrix19);
        double[] doubleArray23 = new double[] { 10, 'a' };
        double[] doubleArray26 = new double[] { 10, 'a' };
        double[][] doubleArray27 = new double[][] { doubleArray23, doubleArray26 };
        com.operations.Matrix.Matrix matrix28 = new com.operations.Matrix.Matrix(doubleArray27);
        int int29 = matrix28.getCols();
        int int30 = matrix28.getCols();
        matrix28.print();
        double[] doubleArray34 = new double[] { 10, 'a' };
        double[] doubleArray37 = new double[] { 10, 'a' };
        double[][] doubleArray38 = new double[][] { doubleArray34, doubleArray37 };
        com.operations.Matrix.Matrix matrix39 = new com.operations.Matrix.Matrix(doubleArray38);
        boolean boolean41 = com.operations.Matrix.MatrixUtils.compare(matrix28, matrix39, (double) (-1));
        com.operations.Matrix.Matrix matrix42 = com.operations.Matrix.MatrixOperations.subtract(matrix19, matrix39);
        com.operations.Matrix.Matrix[] matrixArray43 = com.operations.Matrix.MatrixDecompositions.luDecomposition(matrix42);
        double[][] doubleArray44 = matrix42.getData();
        com.operations.Matrix.Matrix matrix47 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0L, (double) (byte) 10);
        double[] doubleArray50 = new double[] { 10, 'a' };
        double[] doubleArray53 = new double[] { 10, 'a' };
        double[][] doubleArray54 = new double[][] { doubleArray50, doubleArray53 };
        com.operations.Matrix.Matrix matrix55 = new com.operations.Matrix.Matrix(doubleArray54);
        int int56 = matrix55.getCols();
        int int57 = matrix55.getCols();
        int int58 = matrix55.getCols();
        com.operations.Matrix.Matrix[] matrixArray59 = com.operations.Matrix.MatrixDecompositions.luDecomposition(matrix55);
        com.operations.Matrix.Matrix matrix60 = com.operations.Matrix.MatrixOperations.multiply(matrix47, matrix55);
        int int61 = matrix55.getRows();
        com.operations.Matrix.Matrix matrix62 = com.operations.Matrix.MatrixOperations.multiply(matrix42, matrix55);
        boolean boolean64 = com.operations.Matrix.MatrixUtils.compare(matrix8, matrix62, (double) 2);
        com.operations.Matrix.Matrix matrix65 = com.operations.Matrix.MatrixOperations.transpose(matrix8);
        com.operations.Matrix.Matrix[] matrixArray66 = com.operations.Matrix.MatrixDecompositions.luDecomposition(matrix8);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertArrayEquals(doubleArray2, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertArrayEquals(doubleArray5, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertNotNull(matrixArray9);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 137.90576492663388d + "'", double10 == 137.90576492663388d);
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertArrayEquals(doubleArray13, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertArrayEquals(doubleArray16, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertArrayEquals(doubleArray23, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertArrayEquals(doubleArray26, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 2 + "'", int29 == 2);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 2 + "'", int30 == 2);
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertArrayEquals(doubleArray34, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertArrayEquals(doubleArray37, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(matrix42);
        org.junit.Assert.assertNotNull(matrixArray43);
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertNotNull(matrix47);
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertArrayEquals(doubleArray50, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertArrayEquals(doubleArray53, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray54);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 2 + "'", int56 == 2);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 2 + "'", int57 == 2);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 2 + "'", int58 == 2);
        org.junit.Assert.assertNotNull(matrixArray59);
        org.junit.Assert.assertNotNull(matrix60);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 2 + "'", int61 == 2);
        org.junit.Assert.assertNotNull(matrix62);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertNotNull(matrix65);
        org.junit.Assert.assertNotNull(matrixArray66);
    }

    @Test
    public void test1574() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1574");
        double[] doubleArray2 = new double[] { 10, 'a' };
        double[] doubleArray5 = new double[] { 10, 'a' };
        double[][] doubleArray6 = new double[][] { doubleArray2, doubleArray5 };
        com.operations.Matrix.Matrix matrix7 = new com.operations.Matrix.Matrix(doubleArray6);
        int int8 = matrix7.getCols();
        int int9 = matrix7.getCols();
        int int10 = matrix7.getCols();
        com.operations.Matrix.Matrix matrix16 = com.operations.Matrix.MatrixUtils.generateRandomMatrix(100, (int) (byte) 1, (int) '#', (int) '#', 1L);
        double double19 = matrix16.getValue((int) '4', 0);
        double double20 = com.operations.Matrix.MatrixUtils.frobeniusNorm(matrix16);
        boolean boolean21 = com.operations.Matrix.MatrixUtils.isSquare(matrix16);
        boolean boolean23 = com.operations.Matrix.MatrixUtils.compare(matrix7, matrix16, (double) 100L);
        com.operations.Matrix.Matrix matrix25 = com.operations.Matrix.MatrixTransformations.rotate2D((double) (short) 100);
        double[] doubleArray28 = new double[] { 137.90576492663388d, (byte) -1 };
        double[] doubleArray29 = com.operations.Matrix.MatrixSolver.solveGaussian(matrix25, doubleArray28);
        com.operations.Matrix.Matrix matrix32 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0L, (double) (byte) 10);
        double[] doubleArray35 = new double[] { 10, 'a' };
        double[] doubleArray38 = new double[] { 10, 'a' };
        double[][] doubleArray39 = new double[][] { doubleArray35, doubleArray38 };
        com.operations.Matrix.Matrix matrix40 = new com.operations.Matrix.Matrix(doubleArray39);
        int int41 = matrix40.getCols();
        int int42 = matrix40.getCols();
        int int43 = matrix40.getCols();
        com.operations.Matrix.Matrix[] matrixArray44 = com.operations.Matrix.MatrixDecompositions.luDecomposition(matrix40);
        com.operations.Matrix.Matrix matrix45 = com.operations.Matrix.MatrixOperations.multiply(matrix32, matrix40);
        boolean boolean47 = com.operations.Matrix.MatrixUtils.compare(matrix25, matrix32, (double) (-1L));
        com.operations.Matrix.Matrix matrix48 = com.operations.Matrix.MatrixOperations.subtract(matrix7, matrix32);
        double[] doubleArray51 = new double[] { 10, 'a' };
        double[] doubleArray54 = new double[] { 10, 'a' };
        double[][] doubleArray55 = new double[][] { doubleArray51, doubleArray54 };
        com.operations.Matrix.Matrix matrix56 = new com.operations.Matrix.Matrix(doubleArray55);
        com.operations.Matrix.Matrix matrix57 = new com.operations.Matrix.Matrix(doubleArray55);
        com.operations.Matrix.Matrix[] matrixArray58 = com.operations.Matrix.MatrixDecompositions.luDecomposition(matrix57);
        com.operations.Matrix.Matrix matrix59 = com.operations.Matrix.MatrixDecompositions.choleskyDecomposition(matrix57);
        boolean boolean61 = com.operations.Matrix.MatrixUtils.compare(matrix48, matrix59, (double) 0);
        boolean boolean62 = com.operations.Matrix.MatrixUtils.isSymmetric(matrix59);
        com.operations.Matrix.Matrix matrix64 = com.operations.Matrix.MatrixOperations.scalarMultiply(matrix59, (double) (byte) -1);
        // The following exception was thrown during execution in test generation
        try {
            matrix59.setValue(32, (int) (byte) 100, 375.213087380171d);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: Index 32 out of bounds for length 2");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertArrayEquals(doubleArray2, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertArrayEquals(doubleArray5, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 2 + "'", int8 == 2);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 2 + "'", int9 == 2);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 2 + "'", int10 == 2);
        org.junit.Assert.assertNotNull(matrix16);
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 35.0d + "'", double19 == 35.0d);
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 350.0d + "'", double20 == 350.0d);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(matrix25);
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertArrayEquals(doubleArray28, new double[] { 137.90576492663388d, (-1.0d) }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertArrayEquals(doubleArray29, new double[] { (-24.931892522286255d), (-135.63701830716116d) }, 1.0E-15);
        org.junit.Assert.assertNotNull(matrix32);
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertArrayEquals(doubleArray35, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertArrayEquals(doubleArray38, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 2 + "'", int41 == 2);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 2 + "'", int42 == 2);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 2 + "'", int43 == 2);
        org.junit.Assert.assertNotNull(matrixArray44);
        org.junit.Assert.assertNotNull(matrix45);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(matrix48);
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertArrayEquals(doubleArray51, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray54);
        org.junit.Assert.assertArrayEquals(doubleArray54, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertNotNull(matrixArray58);
        org.junit.Assert.assertNotNull(matrix59);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertNotNull(matrix64);
    }

    @Test
    public void test1575() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1575");
        double[] doubleArray2 = new double[] { 10, 'a' };
        double[] doubleArray5 = new double[] { 10, 'a' };
        double[][] doubleArray6 = new double[][] { doubleArray2, doubleArray5 };
        com.operations.Matrix.Matrix matrix7 = new com.operations.Matrix.Matrix(doubleArray6);
        com.operations.Matrix.Matrix matrix8 = new com.operations.Matrix.Matrix(doubleArray6);
        boolean boolean9 = com.operations.Matrix.MatrixUtils.isSquare(matrix8);
        double[] doubleArray12 = new double[] { 10, 'a' };
        double[] doubleArray15 = new double[] { 10, 'a' };
        double[][] doubleArray16 = new double[][] { doubleArray12, doubleArray15 };
        com.operations.Matrix.Matrix matrix17 = new com.operations.Matrix.Matrix(doubleArray16);
        int int18 = matrix17.getCols();
        int int19 = matrix17.getCols();
        matrix17.print();
        double[] doubleArray23 = new double[] { 10, 'a' };
        double[] doubleArray26 = new double[] { 10, 'a' };
        double[][] doubleArray27 = new double[][] { doubleArray23, doubleArray26 };
        com.operations.Matrix.Matrix matrix28 = new com.operations.Matrix.Matrix(doubleArray27);
        boolean boolean30 = com.operations.Matrix.MatrixUtils.compare(matrix17, matrix28, (double) (-1));
        com.operations.Matrix.Matrix matrix31 = com.operations.Matrix.MatrixOperations.subtract(matrix8, matrix28);
        com.operations.Matrix.Matrix matrix33 = com.operations.Matrix.MatrixOperations.scalarMultiply(matrix8, (double) 0.0f);
        int int34 = matrix8.getCols();
        com.operations.Matrix.Matrix matrix35 = com.operations.Matrix.MatrixDecompositions.choleskyDecomposition(matrix8);
        com.operations.Matrix.Matrix[] matrixArray36 = com.operations.Matrix.MatrixDecompositions.luDecomposition(matrix8);
        int int37 = matrix8.getCols();
        boolean boolean38 = com.operations.Matrix.MatrixUtils.isSquare(matrix8);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertArrayEquals(doubleArray2, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertArrayEquals(doubleArray5, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertArrayEquals(doubleArray12, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertArrayEquals(doubleArray15, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 2 + "'", int18 == 2);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 2 + "'", int19 == 2);
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertArrayEquals(doubleArray23, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertArrayEquals(doubleArray26, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(matrix31);
        org.junit.Assert.assertNotNull(matrix33);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 2 + "'", int34 == 2);
        org.junit.Assert.assertNotNull(matrix35);
        org.junit.Assert.assertNotNull(matrixArray36);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 2 + "'", int37 == 2);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
    }

    @Test
    public void test1576() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1576");
        com.operations.Matrix.Matrix matrix2 = com.operations.Matrix.MatrixTransformations.scale2D(0.0d, 0.0d);
        com.operations.Matrix.Matrix matrix5 = com.operations.Matrix.MatrixTransformations.scale2D((double) 1, (-1.0d));
        com.operations.Matrix.Matrix matrix8 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0L, (double) (byte) 10);
        double[] doubleArray11 = new double[] { 10, 'a' };
        double[] doubleArray14 = new double[] { 10, 'a' };
        double[][] doubleArray15 = new double[][] { doubleArray11, doubleArray14 };
        com.operations.Matrix.Matrix matrix16 = new com.operations.Matrix.Matrix(doubleArray15);
        int int17 = matrix16.getCols();
        int int18 = matrix16.getCols();
        int int19 = matrix16.getCols();
        com.operations.Matrix.Matrix[] matrixArray20 = com.operations.Matrix.MatrixDecompositions.luDecomposition(matrix16);
        com.operations.Matrix.Matrix matrix21 = com.operations.Matrix.MatrixOperations.multiply(matrix8, matrix16);
        int int22 = matrix16.getRows();
        int int23 = matrix16.getCols();
        com.operations.Matrix.Matrix matrix26 = com.operations.Matrix.MatrixTransformations.project2D((double) (-1L), (double) (short) 100);
        com.operations.Matrix.Matrix matrix27 = com.operations.Matrix.MatrixOperations.subtract(matrix16, matrix26);
        com.operations.Matrix.Matrix matrix28 = com.operations.Matrix.MatrixOperations.add(matrix5, matrix27);
        com.operations.Matrix.Matrix matrix29 = com.operations.Matrix.MatrixOperations.add(matrix2, matrix5);
        double[] doubleArray32 = new double[] { 10, 'a' };
        double[] doubleArray35 = new double[] { 10, 'a' };
        double[][] doubleArray36 = new double[][] { doubleArray32, doubleArray35 };
        com.operations.Matrix.Matrix matrix37 = new com.operations.Matrix.Matrix(doubleArray36);
        com.operations.Matrix.Matrix matrix38 = new com.operations.Matrix.Matrix(doubleArray36);
        com.operations.Matrix.Matrix matrix40 = com.operations.Matrix.MatrixTransformations.rotate2D((double) (short) 100);
        double[] doubleArray43 = new double[] { 137.90576492663388d, (byte) -1 };
        double[] doubleArray44 = com.operations.Matrix.MatrixSolver.solveGaussian(matrix40, doubleArray43);
        com.operations.Matrix.Matrix matrix45 = com.operations.Matrix.MatrixOperations.add(matrix38, matrix40);
        com.operations.Matrix.Matrix matrix46 = com.operations.Matrix.MatrixOperations.transpose(matrix40);
        int int47 = matrix40.getCols();
        com.operations.Matrix.Matrix matrix50 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0L, (double) (byte) 10);
        double[] doubleArray53 = new double[] { 10, 'a' };
        double[] doubleArray56 = new double[] { 10, 'a' };
        double[][] doubleArray57 = new double[][] { doubleArray53, doubleArray56 };
        com.operations.Matrix.Matrix matrix58 = new com.operations.Matrix.Matrix(doubleArray57);
        int int59 = matrix58.getCols();
        int int60 = matrix58.getCols();
        int int61 = matrix58.getCols();
        com.operations.Matrix.Matrix[] matrixArray62 = com.operations.Matrix.MatrixDecompositions.luDecomposition(matrix58);
        com.operations.Matrix.Matrix matrix63 = com.operations.Matrix.MatrixOperations.multiply(matrix50, matrix58);
        com.operations.Matrix.Matrix matrix65 = com.operations.Matrix.MatrixTransformations.rotate2D((double) (short) 100);
        boolean boolean67 = com.operations.Matrix.MatrixUtils.compare(matrix58, matrix65, (double) (byte) 0);
        boolean boolean68 = com.operations.Matrix.MatrixUtils.isSymmetric(matrix65);
        boolean boolean69 = com.operations.Matrix.MatrixUtils.isSquare(matrix65);
        com.operations.Matrix.Matrix matrix71 = com.operations.Matrix.MatrixTransformations.rotate2D((double) (short) 100);
        boolean boolean73 = com.operations.Matrix.MatrixUtils.compare(matrix65, matrix71, (double) (byte) 100);
        matrix71.print();
        com.operations.Matrix.Matrix matrix75 = com.operations.Matrix.MatrixOperations.add(matrix40, matrix71);
        com.operations.Matrix.Matrix matrix76 = com.operations.Matrix.MatrixOperations.subtract(matrix2, matrix40);
        com.operations.Matrix.Matrix matrix78 = com.operations.Matrix.MatrixOperations.scalarMultiply(matrix40, (double) (short) -1);
        boolean boolean79 = com.operations.Matrix.MatrixUtils.isSquare(matrix78);
        org.junit.Assert.assertNotNull(matrix2);
        org.junit.Assert.assertNotNull(matrix5);
        org.junit.Assert.assertNotNull(matrix8);
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertArrayEquals(doubleArray11, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertArrayEquals(doubleArray14, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 2 + "'", int17 == 2);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 2 + "'", int18 == 2);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 2 + "'", int19 == 2);
        org.junit.Assert.assertNotNull(matrixArray20);
        org.junit.Assert.assertNotNull(matrix21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 2 + "'", int22 == 2);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 2 + "'", int23 == 2);
        org.junit.Assert.assertNotNull(matrix26);
        org.junit.Assert.assertNotNull(matrix27);
        org.junit.Assert.assertNotNull(matrix28);
        org.junit.Assert.assertNotNull(matrix29);
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertArrayEquals(doubleArray32, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertArrayEquals(doubleArray35, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertNotNull(matrix40);
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertArrayEquals(doubleArray43, new double[] { 137.90576492663388d, (-1.0d) }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertArrayEquals(doubleArray44, new double[] { (-24.931892522286255d), (-135.63701830716116d) }, 1.0E-15);
        org.junit.Assert.assertNotNull(matrix45);
        org.junit.Assert.assertNotNull(matrix46);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 2 + "'", int47 == 2);
        org.junit.Assert.assertNotNull(matrix50);
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertArrayEquals(doubleArray53, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray56);
        org.junit.Assert.assertArrayEquals(doubleArray56, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray57);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 2 + "'", int59 == 2);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 2 + "'", int60 == 2);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 2 + "'", int61 == 2);
        org.junit.Assert.assertNotNull(matrixArray62);
        org.junit.Assert.assertNotNull(matrix63);
        org.junit.Assert.assertNotNull(matrix65);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + true + "'", boolean69 == true);
        org.junit.Assert.assertNotNull(matrix71);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + true + "'", boolean73 == true);
        org.junit.Assert.assertNotNull(matrix75);
        org.junit.Assert.assertNotNull(matrix76);
        org.junit.Assert.assertNotNull(matrix78);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + true + "'", boolean79 == true);
    }

    @Test
    public void test1577() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1577");
        // The following exception was thrown during execution in test generation
        try {
            com.operations.Matrix.Matrix matrix4 = com.operations.Matrix.MatrixUtils.generateRandomMatrix((int) (short) 10, (-1), (int) (short) 10, 0);
            org.junit.Assert.fail("Expected exception of type java.lang.NegativeArraySizeException; message: -1");
        } catch (java.lang.NegativeArraySizeException e) {
            // Expected exception.
        }
    }

    @Test
    public void test1578() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1578");
        double[] doubleArray2 = new double[] { 10, 'a' };
        double[] doubleArray5 = new double[] { 10, 'a' };
        double[][] doubleArray6 = new double[][] { doubleArray2, doubleArray5 };
        com.operations.Matrix.Matrix matrix7 = new com.operations.Matrix.Matrix(doubleArray6);
        int int8 = matrix7.getCols();
        boolean boolean9 = com.operations.Matrix.MatrixUtils.isSquare(matrix7);
        com.operations.Matrix.Matrix matrix10 = com.operations.Matrix.MatrixOperations.transpose(matrix7);
        int int11 = matrix7.getRows();
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertArrayEquals(doubleArray2, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertArrayEquals(doubleArray5, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 2 + "'", int8 == 2);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertNotNull(matrix10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 2 + "'", int11 == 2);
    }

    @Test
    public void test1579() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1579");
        com.operations.Matrix.Matrix matrix2 = com.operations.Matrix.MatrixTransformations.project2D((double) 35, (double) 97);
        org.junit.Assert.assertNotNull(matrix2);
    }

    @Test
    public void test1580() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1580");
        com.operations.Matrix.Matrix matrix2 = com.operations.Matrix.MatrixTransformations.scale2D((double) 100.0f, (double) (byte) 1);
        com.operations.Matrix.Matrix matrix5 = com.operations.Matrix.MatrixTransformations.scale2D((double) 1.0f, (double) 1);
        com.operations.Matrix.Matrix matrix7 = com.operations.Matrix.MatrixTransformations.rotate2D((double) 1.0f);
        com.operations.Matrix.Matrix matrix10 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0L, (double) (byte) 10);
        int int11 = matrix10.getRows();
        com.operations.Matrix.Matrix matrix13 = com.operations.Matrix.MatrixOperations.scalarMultiply(matrix10, (double) 2);
        double double14 = com.operations.Matrix.MatrixUtils.frobeniusNorm(matrix10);
        com.operations.Matrix.Matrix matrix17 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0L, (double) (byte) 10);
        int int18 = matrix17.getRows();
        com.operations.Matrix.Matrix matrix20 = com.operations.Matrix.MatrixOperations.scalarMultiply(matrix17, (double) 2);
        com.operations.Matrix.Matrix matrix21 = com.operations.Matrix.MatrixOperations.subtract(matrix10, matrix20);
        com.operations.Matrix.Matrix matrix22 = com.operations.Matrix.MatrixOperations.add(matrix7, matrix20);
        boolean boolean24 = com.operations.Matrix.MatrixUtils.compare(matrix5, matrix7, (double) (byte) -1);
        com.operations.Matrix.Matrix matrix25 = com.operations.Matrix.MatrixOperations.transpose(matrix7);
        com.operations.Matrix.Matrix matrix28 = com.operations.Matrix.MatrixTransformations.project2D((double) 10L, 10.0d);
        com.operations.Matrix.Matrix matrix30 = com.operations.Matrix.MatrixTransformations.rotate2D((double) (short) 100);
        double[] doubleArray33 = new double[] { 137.90576492663388d, (byte) -1 };
        double[] doubleArray34 = com.operations.Matrix.MatrixSolver.solveGaussian(matrix30, doubleArray33);
        com.operations.Matrix.Matrix matrix37 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0L, (double) (byte) 10);
        double[] doubleArray40 = new double[] { 10, 'a' };
        double[] doubleArray43 = new double[] { 10, 'a' };
        double[][] doubleArray44 = new double[][] { doubleArray40, doubleArray43 };
        com.operations.Matrix.Matrix matrix45 = new com.operations.Matrix.Matrix(doubleArray44);
        int int46 = matrix45.getCols();
        int int47 = matrix45.getCols();
        int int48 = matrix45.getCols();
        com.operations.Matrix.Matrix[] matrixArray49 = com.operations.Matrix.MatrixDecompositions.luDecomposition(matrix45);
        com.operations.Matrix.Matrix matrix50 = com.operations.Matrix.MatrixOperations.multiply(matrix37, matrix45);
        boolean boolean52 = com.operations.Matrix.MatrixUtils.compare(matrix30, matrix37, (double) (-1L));
        double[][] doubleArray53 = matrix30.getData();
        com.operations.Matrix.Matrix matrix55 = com.operations.Matrix.MatrixTransformations.rotate2D((double) (short) 100);
        double[] doubleArray58 = new double[] { 137.90576492663388d, (byte) -1 };
        double[] doubleArray59 = com.operations.Matrix.MatrixSolver.solveGaussian(matrix55, doubleArray58);
        double[] doubleArray60 = com.operations.Matrix.MatrixSolver.solveGaussian(matrix30, doubleArray58);
        double[] doubleArray61 = com.operations.Matrix.MatrixSolver.solveGaussian(matrix28, doubleArray60);
        double[] doubleArray62 = com.operations.Matrix.MatrixSolver.solveGaussian(matrix7, doubleArray61);
        double[] doubleArray63 = com.operations.Matrix.MatrixSolver.solveGaussian(matrix2, doubleArray62);
        com.operations.Matrix.Matrix matrix65 = com.operations.Matrix.MatrixTransformations.rotate2D((double) (byte) 10);
        boolean boolean67 = com.operations.Matrix.MatrixUtils.compare(matrix2, matrix65, 260.95643973734866d);
        com.operations.Matrix.Matrix matrix68 = com.operations.Matrix.MatrixOperations.transpose(matrix65);
        com.operations.Matrix.Matrix[] matrixArray69 = com.operations.Matrix.MatrixDecompositions.luDecomposition(matrix68);
        org.junit.Assert.assertNotNull(matrix2);
        org.junit.Assert.assertNotNull(matrix5);
        org.junit.Assert.assertNotNull(matrix7);
        org.junit.Assert.assertNotNull(matrix10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 2 + "'", int11 == 2);
        org.junit.Assert.assertNotNull(matrix13);
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 10.0d + "'", double14 == 10.0d);
        org.junit.Assert.assertNotNull(matrix17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 2 + "'", int18 == 2);
        org.junit.Assert.assertNotNull(matrix20);
        org.junit.Assert.assertNotNull(matrix21);
        org.junit.Assert.assertNotNull(matrix22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(matrix25);
        org.junit.Assert.assertNotNull(matrix28);
        org.junit.Assert.assertNotNull(matrix30);
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertArrayEquals(doubleArray33, new double[] { 137.90576492663388d, (-1.0d) }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertArrayEquals(doubleArray34, new double[] { (-24.931892522286255d), (-135.63701830716116d) }, 1.0E-15);
        org.junit.Assert.assertNotNull(matrix37);
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertArrayEquals(doubleArray40, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertArrayEquals(doubleArray43, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 2 + "'", int46 == 2);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 2 + "'", int47 == 2);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 2 + "'", int48 == 2);
        org.junit.Assert.assertNotNull(matrixArray49);
        org.junit.Assert.assertNotNull(matrix50);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertNotNull(matrix55);
        org.junit.Assert.assertNotNull(doubleArray58);
        org.junit.Assert.assertArrayEquals(doubleArray58, new double[] { 137.90576492663388d, (-1.0d) }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray59);
        org.junit.Assert.assertArrayEquals(doubleArray59, new double[] { (-24.931892522286255d), (-135.63701830716116d) }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray60);
        org.junit.Assert.assertArrayEquals(doubleArray60, new double[] { (-24.931892522286255d), (-135.63701830716116d) }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray61);
        org.junit.Assert.assertArrayEquals(doubleArray61, new double[] { (-2.4931892522286256d), (-13.563701830716116d) }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray62);
        org.junit.Assert.assertArrayEquals(doubleArray62, new double[] { (-2.7295287645732618d), (-13.518123861075072d) }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray63);
        org.junit.Assert.assertArrayEquals(doubleArray63, new double[] { (-0.027295287645732618d), (-13.518123861075072d) }, 1.0E-15);
        org.junit.Assert.assertNotNull(matrix65);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + true + "'", boolean67 == true);
        org.junit.Assert.assertNotNull(matrix68);
        org.junit.Assert.assertNotNull(matrixArray69);
    }

    @Test
    public void test1581() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1581");
        com.operations.Matrix.Matrix matrix2 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0L, (double) (byte) 10);
        double[] doubleArray5 = new double[] { 10, 'a' };
        double[] doubleArray8 = new double[] { 10, 'a' };
        double[][] doubleArray9 = new double[][] { doubleArray5, doubleArray8 };
        com.operations.Matrix.Matrix matrix10 = new com.operations.Matrix.Matrix(doubleArray9);
        int int11 = matrix10.getCols();
        int int12 = matrix10.getCols();
        int int13 = matrix10.getCols();
        com.operations.Matrix.Matrix[] matrixArray14 = com.operations.Matrix.MatrixDecompositions.luDecomposition(matrix10);
        com.operations.Matrix.Matrix matrix15 = com.operations.Matrix.MatrixOperations.multiply(matrix2, matrix10);
        com.operations.Matrix.Matrix matrix17 = com.operations.Matrix.MatrixTransformations.rotate2D((double) (short) 100);
        boolean boolean19 = com.operations.Matrix.MatrixUtils.compare(matrix10, matrix17, (double) (byte) 0);
        com.operations.Matrix.Matrix matrix21 = com.operations.Matrix.MatrixOperations.scalarMultiply(matrix17, (double) 10.0f);
        int int22 = matrix17.getCols();
        // The following exception was thrown during execution in test generation
        try {
            com.operations.Matrix.Matrix matrix23 = com.operations.Matrix.MatrixDecompositions.choleskyDecomposition(matrix17);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Matrix is not positive definite.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(matrix2);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertArrayEquals(doubleArray5, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertArrayEquals(doubleArray8, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 2 + "'", int11 == 2);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 2 + "'", int12 == 2);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 2 + "'", int13 == 2);
        org.junit.Assert.assertNotNull(matrixArray14);
        org.junit.Assert.assertNotNull(matrix15);
        org.junit.Assert.assertNotNull(matrix17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(matrix21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 2 + "'", int22 == 2);
    }

    @Test
    public void test1582() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1582");
        double[] doubleArray2 = new double[] { 10, 'a' };
        double[] doubleArray5 = new double[] { 10, 'a' };
        double[][] doubleArray6 = new double[][] { doubleArray2, doubleArray5 };
        com.operations.Matrix.Matrix matrix7 = new com.operations.Matrix.Matrix(doubleArray6);
        com.operations.Matrix.Matrix matrix8 = new com.operations.Matrix.Matrix(doubleArray6);
        boolean boolean9 = com.operations.Matrix.MatrixUtils.isSquare(matrix8);
        double[] doubleArray12 = new double[] { 10, 'a' };
        double[] doubleArray15 = new double[] { 10, 'a' };
        double[][] doubleArray16 = new double[][] { doubleArray12, doubleArray15 };
        com.operations.Matrix.Matrix matrix17 = new com.operations.Matrix.Matrix(doubleArray16);
        int int18 = matrix17.getCols();
        int int19 = matrix17.getCols();
        matrix17.print();
        double[] doubleArray23 = new double[] { 10, 'a' };
        double[] doubleArray26 = new double[] { 10, 'a' };
        double[][] doubleArray27 = new double[][] { doubleArray23, doubleArray26 };
        com.operations.Matrix.Matrix matrix28 = new com.operations.Matrix.Matrix(doubleArray27);
        boolean boolean30 = com.operations.Matrix.MatrixUtils.compare(matrix17, matrix28, (double) (-1));
        com.operations.Matrix.Matrix matrix31 = com.operations.Matrix.MatrixOperations.subtract(matrix8, matrix28);
        com.operations.Matrix.Matrix matrix33 = com.operations.Matrix.MatrixOperations.scalarMultiply(matrix8, (double) 0.0f);
        double double34 = com.operations.Matrix.MatrixUtils.frobeniusNorm(matrix33);
        matrix33.setValue((int) (short) 0, 0, 0.0d);
        com.operations.Matrix.Matrix matrix40 = com.operations.Matrix.MatrixTransformations.rotate2D((double) '4');
        com.operations.Matrix.Matrix matrix43 = com.operations.Matrix.MatrixTransformations.project2D((double) ' ', 0.0d);
        boolean boolean44 = com.operations.Matrix.MatrixUtils.isSymmetric(matrix43);
        boolean boolean46 = com.operations.Matrix.MatrixUtils.compare(matrix40, matrix43, 1.4142135623730951d);
        com.operations.Matrix.Matrix matrix47 = com.operations.Matrix.MatrixOperations.multiply(matrix33, matrix40);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertArrayEquals(doubleArray2, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertArrayEquals(doubleArray5, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertArrayEquals(doubleArray12, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertArrayEquals(doubleArray15, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 2 + "'", int18 == 2);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 2 + "'", int19 == 2);
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertArrayEquals(doubleArray23, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertArrayEquals(doubleArray26, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(matrix31);
        org.junit.Assert.assertNotNull(matrix33);
        org.junit.Assert.assertTrue("'" + double34 + "' != '" + 0.0d + "'", double34 == 0.0d);
        org.junit.Assert.assertNotNull(matrix40);
        org.junit.Assert.assertNotNull(matrix43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(matrix47);
    }

    @Test
    public void test1583() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1583");
        com.operations.Matrix.Matrix matrix2 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0L, (double) (byte) 10);
        int int3 = matrix2.getRows();
        com.operations.Matrix.Matrix matrix6 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0L, (double) (byte) 10);
        int int7 = matrix6.getRows();
        com.operations.Matrix.Matrix matrix9 = com.operations.Matrix.MatrixOperations.scalarMultiply(matrix6, (double) 2);
        com.operations.Matrix.Matrix matrix10 = com.operations.Matrix.MatrixOperations.subtract(matrix2, matrix6);
        com.operations.Matrix.Matrix matrix13 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0L, (double) (byte) 10);
        int int14 = matrix13.getRows();
        com.operations.Matrix.Matrix matrix20 = com.operations.Matrix.MatrixUtils.generateRandomMatrix(100, (int) (byte) 1, (int) '#', (int) '#', 1L);
        boolean boolean22 = com.operations.Matrix.MatrixUtils.compare(matrix13, matrix20, (double) 1.0f);
        com.operations.Matrix.Matrix matrix24 = com.operations.Matrix.MatrixOperations.scalarMultiply(matrix13, (double) 1L);
        boolean boolean26 = com.operations.Matrix.MatrixUtils.compare(matrix10, matrix24, 0.0d);
        com.operations.Matrix.Matrix matrix29 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0L, (double) (byte) 10);
        int int30 = matrix29.getRows();
        com.operations.Matrix.Matrix matrix33 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0L, (double) (byte) 10);
        int int34 = matrix33.getRows();
        com.operations.Matrix.Matrix matrix36 = com.operations.Matrix.MatrixOperations.scalarMultiply(matrix33, (double) 2);
        com.operations.Matrix.Matrix matrix37 = com.operations.Matrix.MatrixOperations.subtract(matrix29, matrix33);
        com.operations.Matrix.Matrix matrix40 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0L, (double) (byte) 10);
        int int41 = matrix40.getRows();
        com.operations.Matrix.Matrix matrix47 = com.operations.Matrix.MatrixUtils.generateRandomMatrix(100, (int) (byte) 1, (int) '#', (int) '#', 1L);
        boolean boolean49 = com.operations.Matrix.MatrixUtils.compare(matrix40, matrix47, (double) 1.0f);
        com.operations.Matrix.Matrix matrix51 = com.operations.Matrix.MatrixOperations.scalarMultiply(matrix40, (double) 1L);
        boolean boolean53 = com.operations.Matrix.MatrixUtils.compare(matrix37, matrix51, 0.0d);
        com.operations.Matrix.Matrix matrix54 = com.operations.Matrix.MatrixOperations.transpose(matrix37);
        boolean boolean56 = com.operations.Matrix.MatrixUtils.compare(matrix24, matrix37, 260.95643973734866d);
        // The following exception was thrown during execution in test generation
        try {
            double double59 = matrix37.getValue((int) (short) 100, (int) '4');
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(matrix2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 2 + "'", int3 == 2);
        org.junit.Assert.assertNotNull(matrix6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 2 + "'", int7 == 2);
        org.junit.Assert.assertNotNull(matrix9);
        org.junit.Assert.assertNotNull(matrix10);
        org.junit.Assert.assertNotNull(matrix13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 2 + "'", int14 == 2);
        org.junit.Assert.assertNotNull(matrix20);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(matrix24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(matrix29);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 2 + "'", int30 == 2);
        org.junit.Assert.assertNotNull(matrix33);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 2 + "'", int34 == 2);
        org.junit.Assert.assertNotNull(matrix36);
        org.junit.Assert.assertNotNull(matrix37);
        org.junit.Assert.assertNotNull(matrix40);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 2 + "'", int41 == 2);
        org.junit.Assert.assertNotNull(matrix47);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(matrix51);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(matrix54);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + true + "'", boolean56 == true);
    }

    @Test
    public void test1584() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1584");
        com.operations.Matrix.Matrix matrix5 = com.operations.Matrix.MatrixUtils.generateRandomMatrix((int) (short) 10, (int) (short) 100, (int) (byte) -1, (-1), (long) (byte) 10);
        boolean boolean6 = com.operations.Matrix.MatrixUtils.isSquare(matrix5);
        org.junit.Assert.assertNotNull(matrix5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
    }

    @Test
    public void test1585() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1585");
        com.operations.Matrix.Matrix matrix1 = com.operations.Matrix.MatrixTransformations.rotate2D(1.414213562373095d);
        double[][] doubleArray2 = matrix1.getData();
        com.operations.Matrix.Matrix matrix3 = new com.operations.Matrix.Matrix(doubleArray2);
        com.operations.Matrix.Matrix[] matrixArray4 = com.operations.Matrix.MatrixDecompositions.luDecomposition(matrix3);
        // The following exception was thrown during execution in test generation
        try {
            double double7 = matrix3.getValue((int) (byte) 100, 52);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(matrix1);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertNotNull(matrixArray4);
    }

    @Test
    public void test1586() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1586");
        com.operations.Matrix.Matrix matrix2 = com.operations.Matrix.MatrixTransformations.project2D(0.0d, (double) 0);
        double[][] doubleArray3 = matrix2.getData();
        com.operations.Matrix.Matrix matrix4 = new com.operations.Matrix.Matrix(doubleArray3);
        com.operations.Matrix.Matrix[] matrixArray5 = com.operations.Matrix.MatrixDecompositions.luDecomposition(matrix4);
        int int6 = matrix4.getRows();
        int int7 = matrix4.getCols();
        org.junit.Assert.assertNotNull(matrix2);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertNotNull(matrixArray5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 2 + "'", int6 == 2);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 2 + "'", int7 == 2);
    }

    @Test
    public void test1587() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1587");
        com.operations.Matrix.Matrix matrix2 = com.operations.Matrix.MatrixTransformations.project2D(4826.701772432185d, (double) 52);
        org.junit.Assert.assertNotNull(matrix2);
    }

    @Test
    public void test1588() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1588");
        com.operations.Matrix.Matrix matrix1 = com.operations.Matrix.MatrixTransformations.rotate2D(1480.1439709090816d);
        org.junit.Assert.assertNotNull(matrix1);
    }

    @Test
    public void test1589() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1589");
        com.operations.Matrix.Matrix matrix1 = com.operations.Matrix.MatrixTransformations.rotate2D(8.603303277930165d);
        org.junit.Assert.assertNotNull(matrix1);
    }

    @Test
    public void test1590() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1590");
        com.operations.Matrix.Matrix matrix2 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0L, (double) (byte) 10);
        double[] doubleArray5 = new double[] { 10, 'a' };
        double[] doubleArray8 = new double[] { 10, 'a' };
        double[][] doubleArray9 = new double[][] { doubleArray5, doubleArray8 };
        com.operations.Matrix.Matrix matrix10 = new com.operations.Matrix.Matrix(doubleArray9);
        int int11 = matrix10.getCols();
        int int12 = matrix10.getCols();
        int int13 = matrix10.getCols();
        com.operations.Matrix.Matrix[] matrixArray14 = com.operations.Matrix.MatrixDecompositions.luDecomposition(matrix10);
        com.operations.Matrix.Matrix matrix15 = com.operations.Matrix.MatrixOperations.multiply(matrix2, matrix10);
        com.operations.Matrix.Matrix matrix17 = com.operations.Matrix.MatrixTransformations.rotate2D((double) (short) 100);
        boolean boolean19 = com.operations.Matrix.MatrixUtils.compare(matrix10, matrix17, (double) (byte) 0);
        double[] doubleArray22 = new double[] { 10, 'a' };
        double[] doubleArray25 = new double[] { 10, 'a' };
        double[][] doubleArray26 = new double[][] { doubleArray22, doubleArray25 };
        com.operations.Matrix.Matrix matrix27 = new com.operations.Matrix.Matrix(doubleArray26);
        com.operations.Matrix.Matrix matrix28 = new com.operations.Matrix.Matrix(doubleArray26);
        com.operations.Matrix.Matrix matrix29 = new com.operations.Matrix.Matrix(doubleArray26);
        boolean boolean31 = com.operations.Matrix.MatrixUtils.compare(matrix10, matrix29, (double) (-1));
        double[] doubleArray34 = new double[] { 10, 'a' };
        double[] doubleArray37 = new double[] { 10, 'a' };
        double[][] doubleArray38 = new double[][] { doubleArray34, doubleArray37 };
        com.operations.Matrix.Matrix matrix39 = new com.operations.Matrix.Matrix(doubleArray38);
        com.operations.Matrix.Matrix matrix40 = new com.operations.Matrix.Matrix(doubleArray38);
        boolean boolean41 = com.operations.Matrix.MatrixUtils.isSquare(matrix40);
        com.operations.Matrix.Matrix matrix42 = com.operations.Matrix.MatrixOperations.multiply(matrix29, matrix40);
        double[][] doubleArray43 = matrix40.getData();
        com.operations.Matrix.Matrix matrix44 = new com.operations.Matrix.Matrix(doubleArray43);
        com.operations.Matrix.Matrix matrix45 = com.operations.Matrix.MatrixOperations.transpose(matrix44);
        boolean boolean46 = com.operations.Matrix.MatrixUtils.isSymmetric(matrix44);
        com.operations.Matrix.Matrix matrix48 = com.operations.Matrix.MatrixOperations.scalarMultiply(matrix44, (double) 2);
        com.operations.Matrix.Matrix matrix51 = com.operations.Matrix.MatrixTransformations.project2D((double) 100, 35.0d);
        boolean boolean53 = com.operations.Matrix.MatrixUtils.compare(matrix48, matrix51, (double) (byte) 10);
        com.operations.Matrix.Matrix matrix56 = com.operations.Matrix.MatrixTransformations.scale2D((double) 'a', (double) '4');
        com.operations.Matrix.Matrix matrix58 = com.operations.Matrix.MatrixOperations.scalarMultiply(matrix56, 100.0d);
        com.operations.Matrix.Matrix matrix59 = com.operations.Matrix.MatrixOperations.subtract(matrix51, matrix56);
        int int60 = matrix51.getRows();
        org.junit.Assert.assertNotNull(matrix2);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertArrayEquals(doubleArray5, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertArrayEquals(doubleArray8, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 2 + "'", int11 == 2);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 2 + "'", int12 == 2);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 2 + "'", int13 == 2);
        org.junit.Assert.assertNotNull(matrixArray14);
        org.junit.Assert.assertNotNull(matrix15);
        org.junit.Assert.assertNotNull(matrix17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertArrayEquals(doubleArray22, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertArrayEquals(doubleArray25, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertArrayEquals(doubleArray34, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertArrayEquals(doubleArray37, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertNotNull(matrix42);
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertNotNull(matrix45);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(matrix48);
        org.junit.Assert.assertNotNull(matrix51);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(matrix56);
        org.junit.Assert.assertNotNull(matrix58);
        org.junit.Assert.assertNotNull(matrix59);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 2 + "'", int60 == 2);
    }

    @Test
    public void test1591() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1591");
        // The following exception was thrown during execution in test generation
        try {
            com.operations.Matrix.Matrix matrix5 = com.operations.Matrix.MatrixUtils.generateRandomMatrix(0, 32, 2, (int) (byte) 10, (long) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
    }

    @Test
    public void test1592() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1592");
        com.operations.Matrix.Matrix matrix4 = com.operations.Matrix.MatrixUtils.generateRandomMatrix((int) '#', (int) (byte) 0, 10, (int) (short) -1);
        com.operations.Matrix.Matrix matrix6 = com.operations.Matrix.MatrixOperations.scalarMultiply(matrix4, (double) 100L);
        com.operations.Matrix.Matrix matrix9 = com.operations.Matrix.MatrixTransformations.project2D(0.0d, (double) 0);
        com.operations.Matrix.Matrix[] matrixArray10 = com.operations.Matrix.MatrixDecompositions.luDecomposition(matrix9);
        com.operations.Matrix.Matrix matrix13 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0L, (double) (byte) 10);
        int int14 = matrix13.getRows();
        com.operations.Matrix.Matrix matrix16 = com.operations.Matrix.MatrixOperations.scalarMultiply(matrix13, (double) 2);
        double double17 = com.operations.Matrix.MatrixUtils.frobeniusNorm(matrix13);
        int int18 = matrix13.getRows();
        com.operations.Matrix.Matrix matrix19 = com.operations.Matrix.MatrixOperations.transpose(matrix13);
        com.operations.Matrix.Matrix matrix20 = com.operations.Matrix.MatrixOperations.multiply(matrix9, matrix19);
        double[] doubleArray23 = new double[] { 10, 'a' };
        double[] doubleArray26 = new double[] { 10, 'a' };
        double[][] doubleArray27 = new double[][] { doubleArray23, doubleArray26 };
        com.operations.Matrix.Matrix matrix28 = new com.operations.Matrix.Matrix(doubleArray27);
        com.operations.Matrix.Matrix matrix29 = new com.operations.Matrix.Matrix(doubleArray27);
        com.operations.Matrix.Matrix[] matrixArray30 = com.operations.Matrix.MatrixDecompositions.luDecomposition(matrix29);
        com.operations.Matrix.Matrix matrix33 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0, (double) 100L);
        com.operations.Matrix.Matrix matrix34 = com.operations.Matrix.MatrixOperations.subtract(matrix29, matrix33);
        double[][] doubleArray35 = matrix34.getData();
        com.operations.Matrix.Matrix matrix36 = new com.operations.Matrix.Matrix(doubleArray35);
        boolean boolean38 = com.operations.Matrix.MatrixUtils.compare(matrix19, matrix36, 32.0d);
        boolean boolean40 = com.operations.Matrix.MatrixUtils.compare(matrix4, matrix19, 146781.22563870353d);
        com.operations.Matrix.Matrix matrix43 = new com.operations.Matrix.Matrix(0, 1);
        com.operations.Matrix.Matrix matrix44 = com.operations.Matrix.MatrixOperations.multiply(matrix4, matrix43);
        matrix44.print();
        double[] doubleArray48 = new double[] { 10, 'a' };
        double[] doubleArray51 = new double[] { 10, 'a' };
        double[][] doubleArray52 = new double[][] { doubleArray48, doubleArray51 };
        com.operations.Matrix.Matrix matrix53 = new com.operations.Matrix.Matrix(doubleArray52);
        com.operations.Matrix.Matrix matrix54 = new com.operations.Matrix.Matrix(doubleArray52);
        boolean boolean55 = com.operations.Matrix.MatrixUtils.isSquare(matrix54);
        double[] doubleArray58 = new double[] { 10, 'a' };
        double[] doubleArray61 = new double[] { 10, 'a' };
        double[][] doubleArray62 = new double[][] { doubleArray58, doubleArray61 };
        com.operations.Matrix.Matrix matrix63 = new com.operations.Matrix.Matrix(doubleArray62);
        int int64 = matrix63.getCols();
        int int65 = matrix63.getCols();
        matrix63.print();
        double[] doubleArray69 = new double[] { 10, 'a' };
        double[] doubleArray72 = new double[] { 10, 'a' };
        double[][] doubleArray73 = new double[][] { doubleArray69, doubleArray72 };
        com.operations.Matrix.Matrix matrix74 = new com.operations.Matrix.Matrix(doubleArray73);
        boolean boolean76 = com.operations.Matrix.MatrixUtils.compare(matrix63, matrix74, (double) (-1));
        com.operations.Matrix.Matrix matrix77 = com.operations.Matrix.MatrixOperations.subtract(matrix54, matrix74);
        com.operations.Matrix.Matrix matrix79 = com.operations.Matrix.MatrixOperations.scalarMultiply(matrix54, (double) 0.0f);
        com.operations.Matrix.Matrix matrix81 = com.operations.Matrix.MatrixTransformations.rotate2D((double) 100L);
        com.operations.Matrix.Matrix matrix83 = com.operations.Matrix.MatrixOperations.scalarMultiply(matrix81, (double) ' ');
        boolean boolean85 = com.operations.Matrix.MatrixUtils.compare(matrix79, matrix81, (double) 2);
        com.operations.Matrix.Matrix matrix86 = com.operations.Matrix.MatrixOperations.transpose(matrix81);
        // The following exception was thrown during execution in test generation
        try {
            com.operations.Matrix.Matrix matrix87 = com.operations.Matrix.MatrixOperations.subtract(matrix44, matrix86);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Matrices must have the same dimensions for subtraction.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(matrix4);
        org.junit.Assert.assertNotNull(matrix6);
        org.junit.Assert.assertNotNull(matrix9);
        org.junit.Assert.assertNotNull(matrixArray10);
        org.junit.Assert.assertNotNull(matrix13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 2 + "'", int14 == 2);
        org.junit.Assert.assertNotNull(matrix16);
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + 10.0d + "'", double17 == 10.0d);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 2 + "'", int18 == 2);
        org.junit.Assert.assertNotNull(matrix19);
        org.junit.Assert.assertNotNull(matrix20);
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertArrayEquals(doubleArray23, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertArrayEquals(doubleArray26, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertNotNull(matrixArray30);
        org.junit.Assert.assertNotNull(matrix33);
        org.junit.Assert.assertNotNull(matrix34);
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(matrix44);
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertArrayEquals(doubleArray48, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertArrayEquals(doubleArray51, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + true + "'", boolean55 == true);
        org.junit.Assert.assertNotNull(doubleArray58);
        org.junit.Assert.assertArrayEquals(doubleArray58, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray61);
        org.junit.Assert.assertArrayEquals(doubleArray61, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray62);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 2 + "'", int64 == 2);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 2 + "'", int65 == 2);
        org.junit.Assert.assertNotNull(doubleArray69);
        org.junit.Assert.assertArrayEquals(doubleArray69, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray72);
        org.junit.Assert.assertArrayEquals(doubleArray72, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray73);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertNotNull(matrix77);
        org.junit.Assert.assertNotNull(matrix79);
        org.junit.Assert.assertNotNull(matrix81);
        org.junit.Assert.assertNotNull(matrix83);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + true + "'", boolean85 == true);
        org.junit.Assert.assertNotNull(matrix86);
    }

    @Test
    public void test1593() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1593");
        com.operations.Matrix.Matrix matrix2 = com.operations.Matrix.MatrixTransformations.scale2D((double) 100.0f, (double) (short) -1);
        matrix2.print();
        org.junit.Assert.assertNotNull(matrix2);
    }

    @Test
    public void test1594() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1594");
        com.operations.Matrix.Matrix matrix2 = new com.operations.Matrix.Matrix((int) (short) 1, 0);
        com.operations.Matrix.Matrix matrix5 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0.0f, 350.0d);
        com.operations.Matrix.Matrix matrix8 = com.operations.Matrix.MatrixTransformations.project2D(0.0d, (double) 0);
        com.operations.Matrix.Matrix[] matrixArray9 = com.operations.Matrix.MatrixDecompositions.luDecomposition(matrix8);
        com.operations.Matrix.Matrix matrix12 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0L, (double) (byte) 10);
        int int13 = matrix12.getRows();
        com.operations.Matrix.Matrix matrix15 = com.operations.Matrix.MatrixOperations.scalarMultiply(matrix12, (double) 2);
        double double16 = com.operations.Matrix.MatrixUtils.frobeniusNorm(matrix12);
        int int17 = matrix12.getRows();
        com.operations.Matrix.Matrix matrix18 = com.operations.Matrix.MatrixOperations.transpose(matrix12);
        com.operations.Matrix.Matrix matrix19 = com.operations.Matrix.MatrixOperations.multiply(matrix8, matrix18);
        com.operations.Matrix.Matrix matrix20 = com.operations.Matrix.MatrixOperations.multiply(matrix5, matrix18);
        matrix20.print();
        matrix20.print();
        com.operations.Matrix.Matrix matrix27 = com.operations.Matrix.MatrixUtils.generateRandomMatrix(2, (int) (short) 10, 1, 97);
        com.operations.Matrix.Matrix matrix28 = com.operations.Matrix.MatrixOperations.multiply(matrix20, matrix27);
        // The following exception was thrown during execution in test generation
        try {
            com.operations.Matrix.Matrix matrix29 = com.operations.Matrix.MatrixOperations.add(matrix2, matrix28);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Matrices must have the same dimensions for addition.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(matrix5);
        org.junit.Assert.assertNotNull(matrix8);
        org.junit.Assert.assertNotNull(matrixArray9);
        org.junit.Assert.assertNotNull(matrix12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 2 + "'", int13 == 2);
        org.junit.Assert.assertNotNull(matrix15);
        org.junit.Assert.assertTrue("'" + double16 + "' != '" + 10.0d + "'", double16 == 10.0d);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 2 + "'", int17 == 2);
        org.junit.Assert.assertNotNull(matrix18);
        org.junit.Assert.assertNotNull(matrix19);
        org.junit.Assert.assertNotNull(matrix20);
        org.junit.Assert.assertNotNull(matrix27);
        org.junit.Assert.assertNotNull(matrix28);
    }

    @Test
    public void test1595() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1595");
        double[] doubleArray2 = new double[] { 10, 'a' };
        double[] doubleArray5 = new double[] { 10, 'a' };
        double[][] doubleArray6 = new double[][] { doubleArray2, doubleArray5 };
        com.operations.Matrix.Matrix matrix7 = new com.operations.Matrix.Matrix(doubleArray6);
        int int8 = matrix7.getCols();
        int int9 = matrix7.getCols();
        boolean boolean10 = com.operations.Matrix.MatrixUtils.isSquare(matrix7);
        com.operations.Matrix.Matrix matrix11 = com.operations.Matrix.MatrixDecompositions.choleskyDecomposition(matrix7);
        double double12 = com.operations.Matrix.MatrixUtils.frobeniusNorm(matrix11);
        // The following exception was thrown during execution in test generation
        try {
            double double15 = matrix11.getValue(2, 97);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertArrayEquals(doubleArray2, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertArrayEquals(doubleArray5, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 2 + "'", int8 == 2);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 2 + "'", int9 == 2);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(matrix11);
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 10.344080432788601d + "'", double12 == 10.344080432788601d);
    }

    @Test
    public void test1596() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1596");
        com.operations.Matrix.Matrix matrix2 = com.operations.Matrix.MatrixTransformations.project2D((double) (short) -1, (double) (short) 10);
        java.lang.Class<?> wildcardClass3 = matrix2.getClass();
        org.junit.Assert.assertNotNull(matrix2);
        org.junit.Assert.assertNotNull(wildcardClass3);
    }

    @Test
    public void test1597() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1597");
        double[] doubleArray2 = new double[] { 10, 'a' };
        double[] doubleArray5 = new double[] { 10, 'a' };
        double[][] doubleArray6 = new double[][] { doubleArray2, doubleArray5 };
        com.operations.Matrix.Matrix matrix7 = new com.operations.Matrix.Matrix(doubleArray6);
        int int8 = matrix7.getCols();
        int int9 = matrix7.getCols();
        int int10 = matrix7.getCols();
        com.operations.Matrix.Matrix matrix16 = com.operations.Matrix.MatrixUtils.generateRandomMatrix(100, (int) (byte) 1, (int) '#', (int) '#', 1L);
        double double19 = matrix16.getValue((int) '4', 0);
        double double20 = com.operations.Matrix.MatrixUtils.frobeniusNorm(matrix16);
        boolean boolean21 = com.operations.Matrix.MatrixUtils.isSquare(matrix16);
        boolean boolean23 = com.operations.Matrix.MatrixUtils.compare(matrix7, matrix16, (double) 100L);
        double[][] doubleArray24 = matrix7.getData();
        com.operations.Matrix.Matrix matrix26 = com.operations.Matrix.MatrixOperations.scalarMultiply(matrix7, (double) 100);
        com.operations.Matrix.Matrix matrix29 = com.operations.Matrix.MatrixTransformations.scale2D((double) (byte) 10, (double) 10);
        double[] doubleArray32 = new double[] { 10, 'a' };
        double[] doubleArray35 = new double[] { 10, 'a' };
        double[][] doubleArray36 = new double[][] { doubleArray32, doubleArray35 };
        com.operations.Matrix.Matrix matrix37 = new com.operations.Matrix.Matrix(doubleArray36);
        com.operations.Matrix.Matrix matrix38 = new com.operations.Matrix.Matrix(doubleArray36);
        boolean boolean39 = com.operations.Matrix.MatrixUtils.isSquare(matrix38);
        double[] doubleArray42 = new double[] { 10, 'a' };
        double[] doubleArray45 = new double[] { 10, 'a' };
        double[][] doubleArray46 = new double[][] { doubleArray42, doubleArray45 };
        com.operations.Matrix.Matrix matrix47 = new com.operations.Matrix.Matrix(doubleArray46);
        int int48 = matrix47.getCols();
        int int49 = matrix47.getCols();
        matrix47.print();
        double[] doubleArray53 = new double[] { 10, 'a' };
        double[] doubleArray56 = new double[] { 10, 'a' };
        double[][] doubleArray57 = new double[][] { doubleArray53, doubleArray56 };
        com.operations.Matrix.Matrix matrix58 = new com.operations.Matrix.Matrix(doubleArray57);
        boolean boolean60 = com.operations.Matrix.MatrixUtils.compare(matrix47, matrix58, (double) (-1));
        com.operations.Matrix.Matrix matrix61 = com.operations.Matrix.MatrixOperations.subtract(matrix38, matrix58);
        com.operations.Matrix.Matrix[] matrixArray62 = com.operations.Matrix.MatrixDecompositions.luDecomposition(matrix61);
        double[][] doubleArray63 = matrix61.getData();
        com.operations.Matrix.Matrix matrix64 = new com.operations.Matrix.Matrix(doubleArray63);
        com.operations.Matrix.Matrix matrix65 = com.operations.Matrix.MatrixOperations.multiply(matrix29, matrix64);
        com.operations.Matrix.Matrix matrix67 = com.operations.Matrix.MatrixOperations.scalarMultiply(matrix64, (double) (short) -1);
        com.operations.Matrix.Matrix matrix70 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0L, (double) (byte) 10);
        int int71 = matrix70.getRows();
        com.operations.Matrix.Matrix matrix73 = com.operations.Matrix.MatrixOperations.scalarMultiply(matrix70, (double) 2);
        matrix70.print();
        com.operations.Matrix.Matrix matrix76 = com.operations.Matrix.MatrixOperations.scalarMultiply(matrix70, 100.00499987500625d);
        int int77 = matrix76.getCols();
        com.operations.Matrix.Matrix matrix78 = com.operations.Matrix.MatrixOperations.multiply(matrix64, matrix76);
        com.operations.Matrix.Matrix matrix79 = com.operations.Matrix.MatrixOperations.multiply(matrix7, matrix64);
        matrix7.print();
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertArrayEquals(doubleArray2, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertArrayEquals(doubleArray5, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 2 + "'", int8 == 2);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 2 + "'", int9 == 2);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 2 + "'", int10 == 2);
        org.junit.Assert.assertNotNull(matrix16);
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 35.0d + "'", double19 == 35.0d);
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 350.0d + "'", double20 == 350.0d);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertNotNull(matrix26);
        org.junit.Assert.assertNotNull(matrix29);
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertArrayEquals(doubleArray32, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertArrayEquals(doubleArray35, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertArrayEquals(doubleArray42, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertArrayEquals(doubleArray45, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray46);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 2 + "'", int48 == 2);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 2 + "'", int49 == 2);
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertArrayEquals(doubleArray53, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray56);
        org.junit.Assert.assertArrayEquals(doubleArray56, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray57);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertNotNull(matrix61);
        org.junit.Assert.assertNotNull(matrixArray62);
        org.junit.Assert.assertNotNull(doubleArray63);
        org.junit.Assert.assertNotNull(matrix65);
        org.junit.Assert.assertNotNull(matrix67);
        org.junit.Assert.assertNotNull(matrix70);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 2 + "'", int71 == 2);
        org.junit.Assert.assertNotNull(matrix73);
        org.junit.Assert.assertNotNull(matrix76);
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + 2 + "'", int77 == 2);
        org.junit.Assert.assertNotNull(matrix78);
        org.junit.Assert.assertNotNull(matrix79);
    }

    @Test
    public void test1598() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1598");
        com.operations.Matrix.Matrix matrix1 = com.operations.Matrix.MatrixTransformations.rotate2D((double) 1.0f);
        com.operations.Matrix.Matrix matrix4 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0L, (double) (byte) 10);
        int int5 = matrix4.getRows();
        com.operations.Matrix.Matrix matrix7 = com.operations.Matrix.MatrixOperations.scalarMultiply(matrix4, (double) 2);
        double double8 = com.operations.Matrix.MatrixUtils.frobeniusNorm(matrix4);
        com.operations.Matrix.Matrix matrix11 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0L, (double) (byte) 10);
        int int12 = matrix11.getRows();
        com.operations.Matrix.Matrix matrix14 = com.operations.Matrix.MatrixOperations.scalarMultiply(matrix11, (double) 2);
        com.operations.Matrix.Matrix matrix15 = com.operations.Matrix.MatrixOperations.subtract(matrix4, matrix14);
        com.operations.Matrix.Matrix matrix16 = com.operations.Matrix.MatrixOperations.add(matrix1, matrix14);
        com.operations.Matrix.Matrix[] matrixArray17 = com.operations.Matrix.MatrixDecompositions.luDecomposition(matrix14);
        boolean boolean18 = com.operations.Matrix.MatrixUtils.isSquare(matrix14);
        com.operations.Matrix.Matrix matrix19 = com.operations.Matrix.MatrixOperations.transpose(matrix14);
        com.operations.Matrix.Matrix matrix22 = new com.operations.Matrix.Matrix((int) 'a', (int) (short) 100);
        double double23 = com.operations.Matrix.MatrixUtils.frobeniusNorm(matrix22);
        double[][] doubleArray24 = matrix22.getData();
        // The following exception was thrown during execution in test generation
        try {
            com.operations.Matrix.Matrix matrix25 = com.operations.Matrix.MatrixOperations.multiply(matrix19, matrix22);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Matrix A's columns must match Matrix B's rows for multiplication.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(matrix1);
        org.junit.Assert.assertNotNull(matrix4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 2 + "'", int5 == 2);
        org.junit.Assert.assertNotNull(matrix7);
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 10.0d + "'", double8 == 10.0d);
        org.junit.Assert.assertNotNull(matrix11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 2 + "'", int12 == 2);
        org.junit.Assert.assertNotNull(matrix14);
        org.junit.Assert.assertNotNull(matrix15);
        org.junit.Assert.assertNotNull(matrix16);
        org.junit.Assert.assertNotNull(matrixArray17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(matrix19);
        org.junit.Assert.assertTrue("'" + double23 + "' != '" + 0.0d + "'", double23 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray24);
    }

    @Test
    public void test1599() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1599");
        double[] doubleArray2 = new double[] { 10, 'a' };
        double[] doubleArray5 = new double[] { 10, 'a' };
        double[][] doubleArray6 = new double[][] { doubleArray2, doubleArray5 };
        com.operations.Matrix.Matrix matrix7 = new com.operations.Matrix.Matrix(doubleArray6);
        com.operations.Matrix.Matrix matrix8 = new com.operations.Matrix.Matrix(doubleArray6);
        com.operations.Matrix.Matrix[] matrixArray9 = com.operations.Matrix.MatrixDecompositions.luDecomposition(matrix8);
        double double10 = com.operations.Matrix.MatrixUtils.frobeniusNorm(matrix8);
        double[] doubleArray13 = new double[] { 10, 'a' };
        double[] doubleArray16 = new double[] { 10, 'a' };
        double[][] doubleArray17 = new double[][] { doubleArray13, doubleArray16 };
        com.operations.Matrix.Matrix matrix18 = new com.operations.Matrix.Matrix(doubleArray17);
        com.operations.Matrix.Matrix matrix19 = new com.operations.Matrix.Matrix(doubleArray17);
        boolean boolean20 = com.operations.Matrix.MatrixUtils.isSquare(matrix19);
        double[] doubleArray23 = new double[] { 10, 'a' };
        double[] doubleArray26 = new double[] { 10, 'a' };
        double[][] doubleArray27 = new double[][] { doubleArray23, doubleArray26 };
        com.operations.Matrix.Matrix matrix28 = new com.operations.Matrix.Matrix(doubleArray27);
        int int29 = matrix28.getCols();
        int int30 = matrix28.getCols();
        matrix28.print();
        double[] doubleArray34 = new double[] { 10, 'a' };
        double[] doubleArray37 = new double[] { 10, 'a' };
        double[][] doubleArray38 = new double[][] { doubleArray34, doubleArray37 };
        com.operations.Matrix.Matrix matrix39 = new com.operations.Matrix.Matrix(doubleArray38);
        boolean boolean41 = com.operations.Matrix.MatrixUtils.compare(matrix28, matrix39, (double) (-1));
        com.operations.Matrix.Matrix matrix42 = com.operations.Matrix.MatrixOperations.subtract(matrix19, matrix39);
        com.operations.Matrix.Matrix[] matrixArray43 = com.operations.Matrix.MatrixDecompositions.luDecomposition(matrix42);
        double[][] doubleArray44 = matrix42.getData();
        com.operations.Matrix.Matrix matrix47 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0L, (double) (byte) 10);
        double[] doubleArray50 = new double[] { 10, 'a' };
        double[] doubleArray53 = new double[] { 10, 'a' };
        double[][] doubleArray54 = new double[][] { doubleArray50, doubleArray53 };
        com.operations.Matrix.Matrix matrix55 = new com.operations.Matrix.Matrix(doubleArray54);
        int int56 = matrix55.getCols();
        int int57 = matrix55.getCols();
        int int58 = matrix55.getCols();
        com.operations.Matrix.Matrix[] matrixArray59 = com.operations.Matrix.MatrixDecompositions.luDecomposition(matrix55);
        com.operations.Matrix.Matrix matrix60 = com.operations.Matrix.MatrixOperations.multiply(matrix47, matrix55);
        int int61 = matrix55.getRows();
        com.operations.Matrix.Matrix matrix62 = com.operations.Matrix.MatrixOperations.multiply(matrix42, matrix55);
        boolean boolean64 = com.operations.Matrix.MatrixUtils.compare(matrix8, matrix62, (double) 2);
        com.operations.Matrix.Matrix matrix65 = null;
        // The following exception was thrown during execution in test generation
        try {
            com.operations.Matrix.Matrix matrix66 = com.operations.Matrix.MatrixOperations.multiply(matrix62, matrix65);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertArrayEquals(doubleArray2, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertArrayEquals(doubleArray5, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertNotNull(matrixArray9);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 137.90576492663388d + "'", double10 == 137.90576492663388d);
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertArrayEquals(doubleArray13, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertArrayEquals(doubleArray16, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertArrayEquals(doubleArray23, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertArrayEquals(doubleArray26, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 2 + "'", int29 == 2);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 2 + "'", int30 == 2);
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertArrayEquals(doubleArray34, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertArrayEquals(doubleArray37, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(matrix42);
        org.junit.Assert.assertNotNull(matrixArray43);
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertNotNull(matrix47);
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertArrayEquals(doubleArray50, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertArrayEquals(doubleArray53, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray54);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 2 + "'", int56 == 2);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 2 + "'", int57 == 2);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 2 + "'", int58 == 2);
        org.junit.Assert.assertNotNull(matrixArray59);
        org.junit.Assert.assertNotNull(matrix60);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 2 + "'", int61 == 2);
        org.junit.Assert.assertNotNull(matrix62);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
    }

    @Test
    public void test1600() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1600");
        com.operations.Matrix.Matrix matrix2 = com.operations.Matrix.MatrixTransformations.scale2D(1.7320508075688774d, 3.618031071604718d);
        org.junit.Assert.assertNotNull(matrix2);
    }

    @Test
    public void test1601() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1601");
        double[] doubleArray2 = new double[] { 10, 'a' };
        double[] doubleArray5 = new double[] { 10, 'a' };
        double[][] doubleArray6 = new double[][] { doubleArray2, doubleArray5 };
        com.operations.Matrix.Matrix matrix7 = new com.operations.Matrix.Matrix(doubleArray6);
        com.operations.Matrix.Matrix matrix8 = new com.operations.Matrix.Matrix(doubleArray6);
        boolean boolean9 = com.operations.Matrix.MatrixUtils.isSquare(matrix8);
        double[] doubleArray12 = new double[] { 10, 'a' };
        double[] doubleArray15 = new double[] { 10, 'a' };
        double[][] doubleArray16 = new double[][] { doubleArray12, doubleArray15 };
        com.operations.Matrix.Matrix matrix17 = new com.operations.Matrix.Matrix(doubleArray16);
        int int18 = matrix17.getCols();
        int int19 = matrix17.getCols();
        matrix17.print();
        double[] doubleArray23 = new double[] { 10, 'a' };
        double[] doubleArray26 = new double[] { 10, 'a' };
        double[][] doubleArray27 = new double[][] { doubleArray23, doubleArray26 };
        com.operations.Matrix.Matrix matrix28 = new com.operations.Matrix.Matrix(doubleArray27);
        boolean boolean30 = com.operations.Matrix.MatrixUtils.compare(matrix17, matrix28, (double) (-1));
        com.operations.Matrix.Matrix matrix31 = com.operations.Matrix.MatrixOperations.subtract(matrix8, matrix28);
        com.operations.Matrix.Matrix matrix33 = com.operations.Matrix.MatrixOperations.scalarMultiply(matrix8, (double) 0.0f);
        com.operations.Matrix.Matrix matrix35 = com.operations.Matrix.MatrixTransformations.rotate2D((double) 100L);
        com.operations.Matrix.Matrix matrix37 = com.operations.Matrix.MatrixOperations.scalarMultiply(matrix35, (double) ' ');
        boolean boolean39 = com.operations.Matrix.MatrixUtils.compare(matrix33, matrix35, (double) 2);
        com.operations.Matrix.Matrix matrix40 = com.operations.Matrix.MatrixOperations.transpose(matrix35);
        // The following exception was thrown during execution in test generation
        try {
            matrix40.setValue(100, (int) ' ', (double) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: Index 100 out of bounds for length 2");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertArrayEquals(doubleArray2, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertArrayEquals(doubleArray5, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertArrayEquals(doubleArray12, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertArrayEquals(doubleArray15, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 2 + "'", int18 == 2);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 2 + "'", int19 == 2);
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertArrayEquals(doubleArray23, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertArrayEquals(doubleArray26, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(matrix31);
        org.junit.Assert.assertNotNull(matrix33);
        org.junit.Assert.assertNotNull(matrix35);
        org.junit.Assert.assertNotNull(matrix37);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertNotNull(matrix40);
    }

    @Test
    public void test1602() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1602");
        // The following exception was thrown during execution in test generation
        try {
            com.operations.Matrix.Matrix matrix4 = com.operations.Matrix.MatrixUtils.generateRandomMatrix((int) (short) -1, 52, (int) (byte) 10, (int) (byte) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.NegativeArraySizeException; message: -1");
        } catch (java.lang.NegativeArraySizeException e) {
            // Expected exception.
        }
    }

    @Test
    public void test1603() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1603");
        com.operations.Matrix.Matrix matrix5 = com.operations.Matrix.MatrixUtils.generateRandomMatrix((int) '4', (int) ' ', (int) (short) 100, (int) (byte) 100, (long) (short) 10);
        int int6 = matrix5.getCols();
        com.operations.Matrix.Matrix matrix9 = com.operations.Matrix.MatrixTransformations.scale2D((double) (byte) 10, (double) 10);
        double[] doubleArray12 = new double[] { 10, 'a' };
        double[] doubleArray15 = new double[] { 10, 'a' };
        double[][] doubleArray16 = new double[][] { doubleArray12, doubleArray15 };
        com.operations.Matrix.Matrix matrix17 = new com.operations.Matrix.Matrix(doubleArray16);
        com.operations.Matrix.Matrix matrix18 = new com.operations.Matrix.Matrix(doubleArray16);
        boolean boolean19 = com.operations.Matrix.MatrixUtils.isSquare(matrix18);
        double[] doubleArray22 = new double[] { 10, 'a' };
        double[] doubleArray25 = new double[] { 10, 'a' };
        double[][] doubleArray26 = new double[][] { doubleArray22, doubleArray25 };
        com.operations.Matrix.Matrix matrix27 = new com.operations.Matrix.Matrix(doubleArray26);
        int int28 = matrix27.getCols();
        int int29 = matrix27.getCols();
        matrix27.print();
        double[] doubleArray33 = new double[] { 10, 'a' };
        double[] doubleArray36 = new double[] { 10, 'a' };
        double[][] doubleArray37 = new double[][] { doubleArray33, doubleArray36 };
        com.operations.Matrix.Matrix matrix38 = new com.operations.Matrix.Matrix(doubleArray37);
        boolean boolean40 = com.operations.Matrix.MatrixUtils.compare(matrix27, matrix38, (double) (-1));
        com.operations.Matrix.Matrix matrix41 = com.operations.Matrix.MatrixOperations.subtract(matrix18, matrix38);
        com.operations.Matrix.Matrix[] matrixArray42 = com.operations.Matrix.MatrixDecompositions.luDecomposition(matrix41);
        double[][] doubleArray43 = matrix41.getData();
        com.operations.Matrix.Matrix matrix44 = new com.operations.Matrix.Matrix(doubleArray43);
        com.operations.Matrix.Matrix matrix45 = com.operations.Matrix.MatrixOperations.multiply(matrix9, matrix44);
        boolean boolean46 = com.operations.Matrix.MatrixUtils.isSymmetric(matrix9);
        com.operations.Matrix.Matrix matrix47 = com.operations.Matrix.MatrixOperations.transpose(matrix9);
        // The following exception was thrown during execution in test generation
        try {
            com.operations.Matrix.Matrix matrix48 = com.operations.Matrix.MatrixOperations.add(matrix5, matrix47);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Matrices must have the same dimensions for addition.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(matrix5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 32 + "'", int6 == 32);
        org.junit.Assert.assertNotNull(matrix9);
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertArrayEquals(doubleArray12, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertArrayEquals(doubleArray15, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertArrayEquals(doubleArray22, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertArrayEquals(doubleArray25, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 2 + "'", int28 == 2);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 2 + "'", int29 == 2);
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertArrayEquals(doubleArray33, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertArrayEquals(doubleArray36, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(matrix41);
        org.junit.Assert.assertNotNull(matrixArray42);
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertNotNull(matrix45);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertNotNull(matrix47);
    }

    @Test
    public void test1604() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1604");
        com.operations.Matrix.Matrix matrix2 = com.operations.Matrix.MatrixTransformations.scale2D(1.0d, (-0.1736481776669303d));
        boolean boolean3 = com.operations.Matrix.MatrixUtils.isSymmetric(matrix2);
        org.junit.Assert.assertNotNull(matrix2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
    }

    @Test
    public void test1605() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1605");
        com.operations.Matrix.Matrix matrix2 = com.operations.Matrix.MatrixTransformations.scale2D(350.0d, 100.00499987500625d);
        com.operations.Matrix.Matrix matrix5 = com.operations.Matrix.MatrixTransformations.scale2D((double) 10L, 35.0d);
        matrix5.print();
        boolean boolean7 = com.operations.Matrix.MatrixUtils.isSquare(matrix5);
        com.operations.Matrix.Matrix matrix9 = com.operations.Matrix.MatrixTransformations.rotate2D((-1.0d));
        com.operations.Matrix.Matrix matrix11 = com.operations.Matrix.MatrixTransformations.rotate2D((double) (-1L));
        com.operations.Matrix.Matrix matrix13 = com.operations.Matrix.MatrixTransformations.rotate2D((double) (short) 100);
        double[] doubleArray16 = new double[] { 137.90576492663388d, (byte) -1 };
        double[] doubleArray17 = com.operations.Matrix.MatrixSolver.solveGaussian(matrix13, doubleArray16);
        double[] doubleArray18 = com.operations.Matrix.MatrixSolver.solveGaussian(matrix11, doubleArray16);
        double[] doubleArray19 = com.operations.Matrix.MatrixSolver.solveGaussian(matrix9, doubleArray16);
        double[] doubleArray20 = com.operations.Matrix.MatrixSolver.solveGaussian(matrix5, doubleArray16);
        double[] doubleArray21 = com.operations.Matrix.MatrixSolver.solveGaussian(matrix2, doubleArray20);
        org.junit.Assert.assertNotNull(matrix2);
        org.junit.Assert.assertNotNull(matrix5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNotNull(matrix9);
        org.junit.Assert.assertNotNull(matrix11);
        org.junit.Assert.assertNotNull(matrix13);
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertArrayEquals(doubleArray16, new double[] { 137.90576492663388d, (-1.0d) }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertArrayEquals(doubleArray17, new double[] { (-24.931892522286255d), (-135.63701830716116d) }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertArrayEquals(doubleArray18, new double[] { 137.90221361711127d, 1.4069397643877004d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertArrayEquals(doubleArray19, new double[] { 137.90221361711127d, 1.4069397643877004d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertArrayEquals(doubleArray20, new double[] { 13.790576492663387d, (-0.02857142857142857d) }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertArrayEquals(doubleArray21, new double[] { 0.039401647121895395d, (-2.857000010713393E-4d) }, 1.0E-15);
    }

    @Test
    public void test1606() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1606");
        com.operations.Matrix.Matrix matrix2 = com.operations.Matrix.MatrixTransformations.scale2D(0.0d, 137.90576492663385d);
        com.operations.Matrix.Matrix[] matrixArray3 = com.operations.Matrix.MatrixDecompositions.luDecomposition(matrix2);
        org.junit.Assert.assertNotNull(matrix2);
        org.junit.Assert.assertNotNull(matrixArray3);
    }

    @Test
    public void test1607() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1607");
        com.operations.Matrix.Matrix matrix1 = com.operations.Matrix.MatrixTransformations.rotate2D(693.7418269995209d);
        org.junit.Assert.assertNotNull(matrix1);
    }

    @Test
    public void test1608() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1608");
        com.operations.Matrix.Matrix matrix2 = com.operations.Matrix.MatrixTransformations.scale2D(1.969615506024416d, 131.06486943494812d);
        org.junit.Assert.assertNotNull(matrix2);
    }

    @Test
    public void test1609() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1609");
        com.operations.Matrix.Matrix matrix2 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0L, (double) (byte) 10);
        int int3 = matrix2.getRows();
        com.operations.Matrix.Matrix matrix9 = com.operations.Matrix.MatrixUtils.generateRandomMatrix(100, (int) (byte) 1, (int) '#', (int) '#', 1L);
        boolean boolean11 = com.operations.Matrix.MatrixUtils.compare(matrix2, matrix9, (double) 1.0f);
        boolean boolean12 = com.operations.Matrix.MatrixUtils.isSquare(matrix9);
        com.operations.Matrix.Matrix matrix15 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0L, (double) (byte) 10);
        double[] doubleArray18 = new double[] { 10, 'a' };
        double[] doubleArray21 = new double[] { 10, 'a' };
        double[][] doubleArray22 = new double[][] { doubleArray18, doubleArray21 };
        com.operations.Matrix.Matrix matrix23 = new com.operations.Matrix.Matrix(doubleArray22);
        int int24 = matrix23.getCols();
        int int25 = matrix23.getCols();
        int int26 = matrix23.getCols();
        com.operations.Matrix.Matrix[] matrixArray27 = com.operations.Matrix.MatrixDecompositions.luDecomposition(matrix23);
        com.operations.Matrix.Matrix matrix28 = com.operations.Matrix.MatrixOperations.multiply(matrix15, matrix23);
        com.operations.Matrix.Matrix matrix30 = com.operations.Matrix.MatrixTransformations.rotate2D((double) (short) 100);
        boolean boolean32 = com.operations.Matrix.MatrixUtils.compare(matrix23, matrix30, (double) (byte) 0);
        double[] doubleArray35 = new double[] { 10, 'a' };
        double[] doubleArray38 = new double[] { 10, 'a' };
        double[][] doubleArray39 = new double[][] { doubleArray35, doubleArray38 };
        com.operations.Matrix.Matrix matrix40 = new com.operations.Matrix.Matrix(doubleArray39);
        com.operations.Matrix.Matrix matrix41 = new com.operations.Matrix.Matrix(doubleArray39);
        com.operations.Matrix.Matrix matrix42 = new com.operations.Matrix.Matrix(doubleArray39);
        boolean boolean44 = com.operations.Matrix.MatrixUtils.compare(matrix23, matrix42, (double) (-1));
        double[] doubleArray47 = new double[] { 10, 'a' };
        double[] doubleArray50 = new double[] { 10, 'a' };
        double[][] doubleArray51 = new double[][] { doubleArray47, doubleArray50 };
        com.operations.Matrix.Matrix matrix52 = new com.operations.Matrix.Matrix(doubleArray51);
        com.operations.Matrix.Matrix matrix53 = new com.operations.Matrix.Matrix(doubleArray51);
        boolean boolean54 = com.operations.Matrix.MatrixUtils.isSquare(matrix53);
        com.operations.Matrix.Matrix matrix55 = com.operations.Matrix.MatrixOperations.multiply(matrix42, matrix53);
        com.operations.Matrix.Matrix matrix57 = com.operations.Matrix.MatrixOperations.scalarMultiply(matrix53, (double) (short) -1);
        com.operations.Matrix.Matrix matrix58 = com.operations.Matrix.MatrixOperations.transpose(matrix53);
        // The following exception was thrown during execution in test generation
        try {
            com.operations.Matrix.Matrix matrix59 = com.operations.Matrix.MatrixOperations.multiply(matrix9, matrix58);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Matrix A's columns must match Matrix B's rows for multiplication.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(matrix2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 2 + "'", int3 == 2);
        org.junit.Assert.assertNotNull(matrix9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(matrix15);
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertArrayEquals(doubleArray18, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertArrayEquals(doubleArray21, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 2 + "'", int24 == 2);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 2 + "'", int25 == 2);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 2 + "'", int26 == 2);
        org.junit.Assert.assertNotNull(matrixArray27);
        org.junit.Assert.assertNotNull(matrix28);
        org.junit.Assert.assertNotNull(matrix30);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertArrayEquals(doubleArray35, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertArrayEquals(doubleArray38, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertArrayEquals(doubleArray47, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertArrayEquals(doubleArray50, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + true + "'", boolean54 == true);
        org.junit.Assert.assertNotNull(matrix55);
        org.junit.Assert.assertNotNull(matrix57);
        org.junit.Assert.assertNotNull(matrix58);
    }

    @Test
    public void test1610() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1610");
        com.operations.Matrix.Matrix matrix4 = com.operations.Matrix.MatrixUtils.generateRandomMatrix((int) '#', 2, 0, (int) (byte) 100);
        com.operations.Matrix.Matrix matrix7 = com.operations.Matrix.MatrixTransformations.scale2D(260.95643973734866d, 975.1410154434076d);
        // The following exception was thrown during execution in test generation
        try {
            com.operations.Matrix.Matrix matrix8 = com.operations.Matrix.MatrixOperations.add(matrix4, matrix7);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Matrices must have the same dimensions for addition.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(matrix4);
        org.junit.Assert.assertNotNull(matrix7);
    }

    @Test
    public void test1611() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1611");
        // The following exception was thrown during execution in test generation
        try {
            com.operations.Matrix.Matrix matrix4 = com.operations.Matrix.MatrixUtils.generateRandomMatrix((int) '4', (int) (byte) -1, (int) '#', (int) (byte) 10);
            org.junit.Assert.fail("Expected exception of type java.lang.NegativeArraySizeException; message: -1");
        } catch (java.lang.NegativeArraySizeException e) {
            // Expected exception.
        }
    }

    @Test
    public void test1612() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1612");
        double[] doubleArray2 = new double[] { 10, 'a' };
        double[] doubleArray5 = new double[] { 10, 'a' };
        double[][] doubleArray6 = new double[][] { doubleArray2, doubleArray5 };
        com.operations.Matrix.Matrix matrix7 = new com.operations.Matrix.Matrix(doubleArray6);
        com.operations.Matrix.Matrix matrix8 = new com.operations.Matrix.Matrix(doubleArray6);
        boolean boolean9 = com.operations.Matrix.MatrixUtils.isSquare(matrix8);
        double[] doubleArray12 = new double[] { 10, 'a' };
        double[] doubleArray15 = new double[] { 10, 'a' };
        double[][] doubleArray16 = new double[][] { doubleArray12, doubleArray15 };
        com.operations.Matrix.Matrix matrix17 = new com.operations.Matrix.Matrix(doubleArray16);
        int int18 = matrix17.getCols();
        int int19 = matrix17.getCols();
        matrix17.print();
        double[] doubleArray23 = new double[] { 10, 'a' };
        double[] doubleArray26 = new double[] { 10, 'a' };
        double[][] doubleArray27 = new double[][] { doubleArray23, doubleArray26 };
        com.operations.Matrix.Matrix matrix28 = new com.operations.Matrix.Matrix(doubleArray27);
        boolean boolean30 = com.operations.Matrix.MatrixUtils.compare(matrix17, matrix28, (double) (-1));
        com.operations.Matrix.Matrix matrix31 = com.operations.Matrix.MatrixOperations.subtract(matrix8, matrix28);
        com.operations.Matrix.Matrix matrix33 = com.operations.Matrix.MatrixOperations.scalarMultiply(matrix8, (double) 0.0f);
        boolean boolean34 = com.operations.Matrix.MatrixUtils.isSymmetric(matrix33);
        com.operations.Matrix.Matrix matrix36 = com.operations.Matrix.MatrixOperations.scalarMultiply(matrix33, (double) 'a');
        boolean boolean37 = com.operations.Matrix.MatrixUtils.isSquare(matrix33);
        // The following exception was thrown during execution in test generation
        try {
            com.operations.Matrix.Matrix matrix38 = com.operations.Matrix.MatrixDecompositions.choleskyDecomposition(matrix33);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Matrix is not positive definite.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertArrayEquals(doubleArray2, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertArrayEquals(doubleArray5, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertArrayEquals(doubleArray12, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertArrayEquals(doubleArray15, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 2 + "'", int18 == 2);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 2 + "'", int19 == 2);
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertArrayEquals(doubleArray23, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertArrayEquals(doubleArray26, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(matrix31);
        org.junit.Assert.assertNotNull(matrix33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertNotNull(matrix36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
    }

    @Test
    public void test1613() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1613");
        com.operations.Matrix.Matrix matrix2 = com.operations.Matrix.MatrixTransformations.project2D((double) 2, 18.985133644271098d);
        int int3 = matrix2.getCols();
        org.junit.Assert.assertNotNull(matrix2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 2 + "'", int3 == 2);
    }

    @Test
    public void test1614() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1614");
        com.operations.Matrix.Matrix matrix2 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0L, (double) (byte) 10);
        double[] doubleArray5 = new double[] { 10, 'a' };
        double[] doubleArray8 = new double[] { 10, 'a' };
        double[][] doubleArray9 = new double[][] { doubleArray5, doubleArray8 };
        com.operations.Matrix.Matrix matrix10 = new com.operations.Matrix.Matrix(doubleArray9);
        int int11 = matrix10.getCols();
        int int12 = matrix10.getCols();
        int int13 = matrix10.getCols();
        com.operations.Matrix.Matrix[] matrixArray14 = com.operations.Matrix.MatrixDecompositions.luDecomposition(matrix10);
        com.operations.Matrix.Matrix matrix15 = com.operations.Matrix.MatrixOperations.multiply(matrix2, matrix10);
        com.operations.Matrix.Matrix matrix17 = com.operations.Matrix.MatrixTransformations.rotate2D((double) (short) 100);
        boolean boolean19 = com.operations.Matrix.MatrixUtils.compare(matrix10, matrix17, (double) (byte) 0);
        com.operations.Matrix.Matrix[] matrixArray20 = com.operations.Matrix.MatrixDecompositions.luDecomposition(matrix10);
        com.operations.Matrix.Matrix matrix21 = com.operations.Matrix.MatrixDecompositions.choleskyDecomposition(matrix10);
        java.lang.Class<?> wildcardClass22 = matrix21.getClass();
        org.junit.Assert.assertNotNull(matrix2);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertArrayEquals(doubleArray5, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertArrayEquals(doubleArray8, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 2 + "'", int11 == 2);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 2 + "'", int12 == 2);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 2 + "'", int13 == 2);
        org.junit.Assert.assertNotNull(matrixArray14);
        org.junit.Assert.assertNotNull(matrix15);
        org.junit.Assert.assertNotNull(matrix17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(matrixArray20);
        org.junit.Assert.assertNotNull(matrix21);
        org.junit.Assert.assertNotNull(wildcardClass22);
    }

    @Test
    public void test1615() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1615");
        com.operations.Matrix.Matrix matrix2 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0L, (double) (byte) 10);
        double[] doubleArray5 = new double[] { 10, 'a' };
        double[] doubleArray8 = new double[] { 10, 'a' };
        double[][] doubleArray9 = new double[][] { doubleArray5, doubleArray8 };
        com.operations.Matrix.Matrix matrix10 = new com.operations.Matrix.Matrix(doubleArray9);
        int int11 = matrix10.getCols();
        int int12 = matrix10.getCols();
        int int13 = matrix10.getCols();
        com.operations.Matrix.Matrix[] matrixArray14 = com.operations.Matrix.MatrixDecompositions.luDecomposition(matrix10);
        com.operations.Matrix.Matrix matrix15 = com.operations.Matrix.MatrixOperations.multiply(matrix2, matrix10);
        com.operations.Matrix.Matrix matrix17 = com.operations.Matrix.MatrixTransformations.rotate2D((double) (short) 100);
        boolean boolean19 = com.operations.Matrix.MatrixUtils.compare(matrix10, matrix17, (double) (byte) 0);
        double[] doubleArray22 = new double[] { 10, 'a' };
        double[] doubleArray25 = new double[] { 10, 'a' };
        double[][] doubleArray26 = new double[][] { doubleArray22, doubleArray25 };
        com.operations.Matrix.Matrix matrix27 = new com.operations.Matrix.Matrix(doubleArray26);
        com.operations.Matrix.Matrix matrix28 = new com.operations.Matrix.Matrix(doubleArray26);
        com.operations.Matrix.Matrix matrix29 = new com.operations.Matrix.Matrix(doubleArray26);
        boolean boolean31 = com.operations.Matrix.MatrixUtils.compare(matrix10, matrix29, (double) (-1));
        int int32 = matrix10.getRows();
        java.lang.Class<?> wildcardClass33 = matrix10.getClass();
        org.junit.Assert.assertNotNull(matrix2);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertArrayEquals(doubleArray5, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertArrayEquals(doubleArray8, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 2 + "'", int11 == 2);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 2 + "'", int12 == 2);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 2 + "'", int13 == 2);
        org.junit.Assert.assertNotNull(matrixArray14);
        org.junit.Assert.assertNotNull(matrix15);
        org.junit.Assert.assertNotNull(matrix17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertArrayEquals(doubleArray22, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertArrayEquals(doubleArray25, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 2 + "'", int32 == 2);
        org.junit.Assert.assertNotNull(wildcardClass33);
    }

    @Test
    public void test1616() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1616");
        com.operations.Matrix.Matrix matrix0 = null;
        com.operations.Matrix.Matrix matrix2 = com.operations.Matrix.MatrixTransformations.rotate2D((double) 'a');
        com.operations.Matrix.Matrix matrix4 = com.operations.Matrix.MatrixTransformations.rotate2D((double) 1.0f);
        com.operations.Matrix.Matrix matrix5 = com.operations.Matrix.MatrixOperations.add(matrix2, matrix4);
        com.operations.Matrix.Matrix matrix8 = com.operations.Matrix.MatrixTransformations.project2D((double) (-1L), (-1.0d));
        com.operations.Matrix.Matrix matrix11 = com.operations.Matrix.MatrixTransformations.scale2D((double) 1.0f, (double) 1);
        com.operations.Matrix.Matrix matrix13 = com.operations.Matrix.MatrixTransformations.rotate2D((double) 1.0f);
        com.operations.Matrix.Matrix matrix16 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0L, (double) (byte) 10);
        int int17 = matrix16.getRows();
        com.operations.Matrix.Matrix matrix19 = com.operations.Matrix.MatrixOperations.scalarMultiply(matrix16, (double) 2);
        double double20 = com.operations.Matrix.MatrixUtils.frobeniusNorm(matrix16);
        com.operations.Matrix.Matrix matrix23 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0L, (double) (byte) 10);
        int int24 = matrix23.getRows();
        com.operations.Matrix.Matrix matrix26 = com.operations.Matrix.MatrixOperations.scalarMultiply(matrix23, (double) 2);
        com.operations.Matrix.Matrix matrix27 = com.operations.Matrix.MatrixOperations.subtract(matrix16, matrix26);
        com.operations.Matrix.Matrix matrix28 = com.operations.Matrix.MatrixOperations.add(matrix13, matrix26);
        boolean boolean30 = com.operations.Matrix.MatrixUtils.compare(matrix11, matrix13, (double) (byte) -1);
        com.operations.Matrix.Matrix matrix31 = com.operations.Matrix.MatrixOperations.transpose(matrix13);
        com.operations.Matrix.Matrix matrix34 = com.operations.Matrix.MatrixTransformations.project2D((double) 10L, 10.0d);
        com.operations.Matrix.Matrix matrix36 = com.operations.Matrix.MatrixTransformations.rotate2D((double) (short) 100);
        double[] doubleArray39 = new double[] { 137.90576492663388d, (byte) -1 };
        double[] doubleArray40 = com.operations.Matrix.MatrixSolver.solveGaussian(matrix36, doubleArray39);
        com.operations.Matrix.Matrix matrix43 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0L, (double) (byte) 10);
        double[] doubleArray46 = new double[] { 10, 'a' };
        double[] doubleArray49 = new double[] { 10, 'a' };
        double[][] doubleArray50 = new double[][] { doubleArray46, doubleArray49 };
        com.operations.Matrix.Matrix matrix51 = new com.operations.Matrix.Matrix(doubleArray50);
        int int52 = matrix51.getCols();
        int int53 = matrix51.getCols();
        int int54 = matrix51.getCols();
        com.operations.Matrix.Matrix[] matrixArray55 = com.operations.Matrix.MatrixDecompositions.luDecomposition(matrix51);
        com.operations.Matrix.Matrix matrix56 = com.operations.Matrix.MatrixOperations.multiply(matrix43, matrix51);
        boolean boolean58 = com.operations.Matrix.MatrixUtils.compare(matrix36, matrix43, (double) (-1L));
        double[][] doubleArray59 = matrix36.getData();
        com.operations.Matrix.Matrix matrix61 = com.operations.Matrix.MatrixTransformations.rotate2D((double) (short) 100);
        double[] doubleArray64 = new double[] { 137.90576492663388d, (byte) -1 };
        double[] doubleArray65 = com.operations.Matrix.MatrixSolver.solveGaussian(matrix61, doubleArray64);
        double[] doubleArray66 = com.operations.Matrix.MatrixSolver.solveGaussian(matrix36, doubleArray64);
        double[] doubleArray67 = com.operations.Matrix.MatrixSolver.solveGaussian(matrix34, doubleArray66);
        double[] doubleArray68 = com.operations.Matrix.MatrixSolver.solveGaussian(matrix13, doubleArray67);
        double[] doubleArray69 = com.operations.Matrix.MatrixSolver.solveGaussian(matrix8, doubleArray67);
        double[] doubleArray70 = com.operations.Matrix.MatrixSolver.solveGaussian(matrix2, doubleArray67);
        // The following exception was thrown during execution in test generation
        try {
            double[] doubleArray71 = com.operations.Matrix.MatrixSolver.solveGaussian(matrix0, doubleArray70);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(matrix2);
        org.junit.Assert.assertNotNull(matrix4);
        org.junit.Assert.assertNotNull(matrix5);
        org.junit.Assert.assertNotNull(matrix8);
        org.junit.Assert.assertNotNull(matrix11);
        org.junit.Assert.assertNotNull(matrix13);
        org.junit.Assert.assertNotNull(matrix16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 2 + "'", int17 == 2);
        org.junit.Assert.assertNotNull(matrix19);
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 10.0d + "'", double20 == 10.0d);
        org.junit.Assert.assertNotNull(matrix23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 2 + "'", int24 == 2);
        org.junit.Assert.assertNotNull(matrix26);
        org.junit.Assert.assertNotNull(matrix27);
        org.junit.Assert.assertNotNull(matrix28);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(matrix31);
        org.junit.Assert.assertNotNull(matrix34);
        org.junit.Assert.assertNotNull(matrix36);
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertArrayEquals(doubleArray39, new double[] { 137.90576492663388d, (-1.0d) }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertArrayEquals(doubleArray40, new double[] { (-24.931892522286255d), (-135.63701830716116d) }, 1.0E-15);
        org.junit.Assert.assertNotNull(matrix43);
        org.junit.Assert.assertNotNull(doubleArray46);
        org.junit.Assert.assertArrayEquals(doubleArray46, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertArrayEquals(doubleArray49, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 2 + "'", int52 == 2);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 2 + "'", int53 == 2);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 2 + "'", int54 == 2);
        org.junit.Assert.assertNotNull(matrixArray55);
        org.junit.Assert.assertNotNull(matrix56);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(doubleArray59);
        org.junit.Assert.assertNotNull(matrix61);
        org.junit.Assert.assertNotNull(doubleArray64);
        org.junit.Assert.assertArrayEquals(doubleArray64, new double[] { 137.90576492663388d, (-1.0d) }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray65);
        org.junit.Assert.assertArrayEquals(doubleArray65, new double[] { (-24.931892522286255d), (-135.63701830716116d) }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray66);
        org.junit.Assert.assertArrayEquals(doubleArray66, new double[] { (-24.931892522286255d), (-135.63701830716116d) }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray67);
        org.junit.Assert.assertArrayEquals(doubleArray67, new double[] { (-2.4931892522286256d), (-13.563701830716116d) }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray68);
        org.junit.Assert.assertArrayEquals(doubleArray68, new double[] { (-2.7295287645732618d), (-13.518123861075072d) }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray69);
        org.junit.Assert.assertArrayEquals(doubleArray69, new double[] { 2.4931892522286256d, 13.563701830716116d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray70);
        org.junit.Assert.assertArrayEquals(doubleArray70, new double[] { (-13.158756716933762d), 4.127604833865596d }, 1.0E-15);
    }

    @Test
    public void test1617() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1617");
        com.operations.Matrix.Matrix matrix2 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0L, (double) (byte) 10);
        double[] doubleArray5 = new double[] { 10, 'a' };
        double[] doubleArray8 = new double[] { 10, 'a' };
        double[][] doubleArray9 = new double[][] { doubleArray5, doubleArray8 };
        com.operations.Matrix.Matrix matrix10 = new com.operations.Matrix.Matrix(doubleArray9);
        int int11 = matrix10.getCols();
        int int12 = matrix10.getCols();
        int int13 = matrix10.getCols();
        com.operations.Matrix.Matrix[] matrixArray14 = com.operations.Matrix.MatrixDecompositions.luDecomposition(matrix10);
        com.operations.Matrix.Matrix matrix15 = com.operations.Matrix.MatrixOperations.multiply(matrix2, matrix10);
        com.operations.Matrix.Matrix matrix17 = com.operations.Matrix.MatrixTransformations.rotate2D((double) (short) 100);
        boolean boolean19 = com.operations.Matrix.MatrixUtils.compare(matrix10, matrix17, (double) (byte) 0);
        double[] doubleArray22 = new double[] { 10, 'a' };
        double[] doubleArray25 = new double[] { 10, 'a' };
        double[][] doubleArray26 = new double[][] { doubleArray22, doubleArray25 };
        com.operations.Matrix.Matrix matrix27 = new com.operations.Matrix.Matrix(doubleArray26);
        com.operations.Matrix.Matrix matrix28 = new com.operations.Matrix.Matrix(doubleArray26);
        com.operations.Matrix.Matrix matrix29 = new com.operations.Matrix.Matrix(doubleArray26);
        boolean boolean31 = com.operations.Matrix.MatrixUtils.compare(matrix10, matrix29, (double) (-1));
        double[] doubleArray34 = new double[] { 10, 'a' };
        double[] doubleArray37 = new double[] { 10, 'a' };
        double[][] doubleArray38 = new double[][] { doubleArray34, doubleArray37 };
        com.operations.Matrix.Matrix matrix39 = new com.operations.Matrix.Matrix(doubleArray38);
        com.operations.Matrix.Matrix matrix40 = new com.operations.Matrix.Matrix(doubleArray38);
        boolean boolean41 = com.operations.Matrix.MatrixUtils.isSquare(matrix40);
        com.operations.Matrix.Matrix matrix42 = com.operations.Matrix.MatrixOperations.multiply(matrix29, matrix40);
        double[][] doubleArray43 = matrix40.getData();
        com.operations.Matrix.Matrix matrix44 = new com.operations.Matrix.Matrix(doubleArray43);
        com.operations.Matrix.Matrix matrix45 = com.operations.Matrix.MatrixOperations.transpose(matrix44);
        boolean boolean46 = com.operations.Matrix.MatrixUtils.isSymmetric(matrix44);
        com.operations.Matrix.Matrix matrix48 = com.operations.Matrix.MatrixOperations.scalarMultiply(matrix44, (double) 2);
        boolean boolean49 = com.operations.Matrix.MatrixUtils.isSymmetric(matrix48);
        org.junit.Assert.assertNotNull(matrix2);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertArrayEquals(doubleArray5, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertArrayEquals(doubleArray8, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 2 + "'", int11 == 2);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 2 + "'", int12 == 2);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 2 + "'", int13 == 2);
        org.junit.Assert.assertNotNull(matrixArray14);
        org.junit.Assert.assertNotNull(matrix15);
        org.junit.Assert.assertNotNull(matrix17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertArrayEquals(doubleArray22, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertArrayEquals(doubleArray25, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertArrayEquals(doubleArray34, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertArrayEquals(doubleArray37, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertNotNull(matrix42);
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertNotNull(matrix45);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(matrix48);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
    }

    @Test
    public void test1618() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1618");
        com.operations.Matrix.Matrix matrix0 = null;
        // The following exception was thrown during execution in test generation
        try {
            com.operations.Matrix.Matrix matrix2 = com.operations.Matrix.MatrixOperations.scalarMultiply(matrix0, (-1.0d));
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test1619() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1619");
        com.operations.Matrix.Matrix matrix2 = new com.operations.Matrix.Matrix((int) (byte) 10, (int) (short) 1);
    }

    @Test
    public void test1620() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1620");
        com.operations.Matrix.Matrix matrix2 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0L, (double) (byte) 10);
        double[] doubleArray5 = new double[] { 10, 'a' };
        double[] doubleArray8 = new double[] { 10, 'a' };
        double[][] doubleArray9 = new double[][] { doubleArray5, doubleArray8 };
        com.operations.Matrix.Matrix matrix10 = new com.operations.Matrix.Matrix(doubleArray9);
        int int11 = matrix10.getCols();
        int int12 = matrix10.getCols();
        int int13 = matrix10.getCols();
        com.operations.Matrix.Matrix[] matrixArray14 = com.operations.Matrix.MatrixDecompositions.luDecomposition(matrix10);
        com.operations.Matrix.Matrix matrix15 = com.operations.Matrix.MatrixOperations.multiply(matrix2, matrix10);
        com.operations.Matrix.Matrix matrix17 = com.operations.Matrix.MatrixTransformations.rotate2D((double) (short) 100);
        boolean boolean19 = com.operations.Matrix.MatrixUtils.compare(matrix10, matrix17, (double) (byte) 0);
        double[] doubleArray22 = new double[] { 10, 'a' };
        double[] doubleArray25 = new double[] { 10, 'a' };
        double[][] doubleArray26 = new double[][] { doubleArray22, doubleArray25 };
        com.operations.Matrix.Matrix matrix27 = new com.operations.Matrix.Matrix(doubleArray26);
        com.operations.Matrix.Matrix matrix28 = new com.operations.Matrix.Matrix(doubleArray26);
        com.operations.Matrix.Matrix matrix29 = new com.operations.Matrix.Matrix(doubleArray26);
        boolean boolean31 = com.operations.Matrix.MatrixUtils.compare(matrix10, matrix29, (double) (-1));
        double[] doubleArray34 = new double[] { 10, 'a' };
        double[] doubleArray37 = new double[] { 10, 'a' };
        double[][] doubleArray38 = new double[][] { doubleArray34, doubleArray37 };
        com.operations.Matrix.Matrix matrix39 = new com.operations.Matrix.Matrix(doubleArray38);
        com.operations.Matrix.Matrix matrix40 = new com.operations.Matrix.Matrix(doubleArray38);
        boolean boolean41 = com.operations.Matrix.MatrixUtils.isSquare(matrix40);
        com.operations.Matrix.Matrix matrix42 = com.operations.Matrix.MatrixOperations.multiply(matrix29, matrix40);
        com.operations.Matrix.Matrix matrix43 = com.operations.Matrix.MatrixDecompositions.choleskyDecomposition(matrix29);
        com.operations.Matrix.Matrix matrix46 = com.operations.Matrix.MatrixTransformations.project2D(1363.6076983299943d, (double) 52);
        com.operations.Matrix.Matrix matrix47 = com.operations.Matrix.MatrixOperations.multiply(matrix43, matrix46);
        // The following exception was thrown during execution in test generation
        try {
            matrix46.setValue((int) '4', 0, (double) 0L);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: Index 52 out of bounds for length 2");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(matrix2);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertArrayEquals(doubleArray5, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertArrayEquals(doubleArray8, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 2 + "'", int11 == 2);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 2 + "'", int12 == 2);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 2 + "'", int13 == 2);
        org.junit.Assert.assertNotNull(matrixArray14);
        org.junit.Assert.assertNotNull(matrix15);
        org.junit.Assert.assertNotNull(matrix17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertArrayEquals(doubleArray22, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertArrayEquals(doubleArray25, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertArrayEquals(doubleArray34, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertArrayEquals(doubleArray37, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertNotNull(matrix42);
        org.junit.Assert.assertNotNull(matrix43);
        org.junit.Assert.assertNotNull(matrix46);
        org.junit.Assert.assertNotNull(matrix47);
    }

    @Test
    public void test1621() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1621");
        // The following exception was thrown during execution in test generation
        try {
            com.operations.Matrix.Matrix matrix5 = com.operations.Matrix.MatrixUtils.generateRandomMatrix((int) (byte) 0, (int) ' ', (int) (byte) 0, 52, 0L);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
    }

    @Test
    public void test1622() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1622");
        com.operations.Matrix.Matrix matrix1 = com.operations.Matrix.MatrixTransformations.rotate2D((double) (short) 100);
        double[] doubleArray4 = new double[] { 137.90576492663388d, (byte) -1 };
        double[] doubleArray5 = com.operations.Matrix.MatrixSolver.solveGaussian(matrix1, doubleArray4);
        com.operations.Matrix.Matrix matrix8 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0L, (double) (byte) 10);
        double[] doubleArray11 = new double[] { 10, 'a' };
        double[] doubleArray14 = new double[] { 10, 'a' };
        double[][] doubleArray15 = new double[][] { doubleArray11, doubleArray14 };
        com.operations.Matrix.Matrix matrix16 = new com.operations.Matrix.Matrix(doubleArray15);
        int int17 = matrix16.getCols();
        int int18 = matrix16.getCols();
        int int19 = matrix16.getCols();
        com.operations.Matrix.Matrix[] matrixArray20 = com.operations.Matrix.MatrixDecompositions.luDecomposition(matrix16);
        com.operations.Matrix.Matrix matrix21 = com.operations.Matrix.MatrixOperations.multiply(matrix8, matrix16);
        boolean boolean23 = com.operations.Matrix.MatrixUtils.compare(matrix1, matrix8, (double) (-1L));
        double[][] doubleArray24 = matrix1.getData();
        double double25 = com.operations.Matrix.MatrixUtils.frobeniusNorm(matrix1);
        double[][] doubleArray26 = matrix1.getData();
        org.junit.Assert.assertNotNull(matrix1);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertArrayEquals(doubleArray4, new double[] { 137.90576492663388d, (-1.0d) }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertArrayEquals(doubleArray5, new double[] { (-24.931892522286255d), (-135.63701830716116d) }, 1.0E-15);
        org.junit.Assert.assertNotNull(matrix8);
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertArrayEquals(doubleArray11, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertArrayEquals(doubleArray14, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 2 + "'", int17 == 2);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 2 + "'", int18 == 2);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 2 + "'", int19 == 2);
        org.junit.Assert.assertNotNull(matrixArray20);
        org.junit.Assert.assertNotNull(matrix21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertTrue("'" + double25 + "' != '" + 1.414213562373095d + "'", double25 == 1.414213562373095d);
        org.junit.Assert.assertNotNull(doubleArray26);
    }

    @Test
    public void test1623() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1623");
        com.operations.Matrix.Matrix matrix2 = com.operations.Matrix.MatrixTransformations.scale2D((double) (short) 1, (double) 0L);
        com.operations.Matrix.Matrix matrix3 = com.operations.Matrix.MatrixOperations.transpose(matrix2);
        double[][] doubleArray4 = matrix2.getData();
        org.junit.Assert.assertNotNull(matrix2);
        org.junit.Assert.assertNotNull(matrix3);
        org.junit.Assert.assertNotNull(doubleArray4);
    }

    @Test
    public void test1624() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1624");
        com.operations.Matrix.Matrix matrix2 = com.operations.Matrix.MatrixTransformations.project2D((double) 97, 0.0d);
        org.junit.Assert.assertNotNull(matrix2);
    }

    @Test
    public void test1625() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1625");
        com.operations.Matrix.Matrix matrix4 = com.operations.Matrix.MatrixUtils.generateRandomMatrix((int) (byte) 10, 32, 35, (int) '#');
        double double5 = com.operations.Matrix.MatrixUtils.frobeniusNorm(matrix4);
        org.junit.Assert.assertNotNull(matrix4);
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 626.0990336999411d + "'", double5 == 626.0990336999411d);
    }

    @Test
    public void test1626() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1626");
        com.operations.Matrix.Matrix matrix2 = com.operations.Matrix.MatrixTransformations.project2D(0.0d, 975.1410154434076d);
        org.junit.Assert.assertNotNull(matrix2);
    }

    @Test
    public void test1627() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1627");
        com.operations.Matrix.Matrix matrix5 = com.operations.Matrix.MatrixUtils.generateRandomMatrix(100, (int) (byte) 1, (int) '#', (int) '#', 1L);
        double double8 = matrix5.getValue((int) '4', 0);
        matrix5.print();
        com.operations.Matrix.Matrix matrix10 = com.operations.Matrix.MatrixOperations.transpose(matrix5);
        // The following exception was thrown during execution in test generation
        try {
            com.operations.Matrix.Matrix[] matrixArray11 = com.operations.Matrix.MatrixDecompositions.luDecomposition(matrix5);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Matrix must be square for LU decomposition.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(matrix5);
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 35.0d + "'", double8 == 35.0d);
        org.junit.Assert.assertNotNull(matrix10);
    }

    @Test
    public void test1628() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1628");
        double[] doubleArray2 = new double[] { 10, 'a' };
        double[] doubleArray5 = new double[] { 10, 'a' };
        double[][] doubleArray6 = new double[][] { doubleArray2, doubleArray5 };
        com.operations.Matrix.Matrix matrix7 = new com.operations.Matrix.Matrix(doubleArray6);
        com.operations.Matrix.Matrix matrix8 = new com.operations.Matrix.Matrix(doubleArray6);
        com.operations.Matrix.Matrix matrix10 = com.operations.Matrix.MatrixTransformations.rotate2D((double) (short) 100);
        double[] doubleArray13 = new double[] { 137.90576492663388d, (byte) -1 };
        double[] doubleArray14 = com.operations.Matrix.MatrixSolver.solveGaussian(matrix10, doubleArray13);
        com.operations.Matrix.Matrix matrix15 = com.operations.Matrix.MatrixOperations.add(matrix8, matrix10);
        com.operations.Matrix.Matrix matrix20 = com.operations.Matrix.MatrixUtils.generateRandomMatrix((int) (byte) 1, 2, 10, (int) ' ');
        // The following exception was thrown during execution in test generation
        try {
            com.operations.Matrix.Matrix matrix21 = com.operations.Matrix.MatrixOperations.multiply(matrix15, matrix20);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Matrix A's columns must match Matrix B's rows for multiplication.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertArrayEquals(doubleArray2, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertArrayEquals(doubleArray5, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertNotNull(matrix10);
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertArrayEquals(doubleArray13, new double[] { 137.90576492663388d, (-1.0d) }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertArrayEquals(doubleArray14, new double[] { (-24.931892522286255d), (-135.63701830716116d) }, 1.0E-15);
        org.junit.Assert.assertNotNull(matrix15);
        org.junit.Assert.assertNotNull(matrix20);
    }

    @Test
    public void test1629() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1629");
        com.operations.Matrix.Matrix matrix1 = com.operations.Matrix.MatrixTransformations.rotate2D((double) 0.0f);
        com.operations.Matrix.Matrix matrix4 = com.operations.Matrix.MatrixTransformations.project2D((double) (-1L), (-1.0d));
        com.operations.Matrix.Matrix matrix7 = com.operations.Matrix.MatrixTransformations.scale2D((double) 1.0f, (double) 1);
        com.operations.Matrix.Matrix matrix9 = com.operations.Matrix.MatrixTransformations.rotate2D((double) 1.0f);
        com.operations.Matrix.Matrix matrix12 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0L, (double) (byte) 10);
        int int13 = matrix12.getRows();
        com.operations.Matrix.Matrix matrix15 = com.operations.Matrix.MatrixOperations.scalarMultiply(matrix12, (double) 2);
        double double16 = com.operations.Matrix.MatrixUtils.frobeniusNorm(matrix12);
        com.operations.Matrix.Matrix matrix19 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0L, (double) (byte) 10);
        int int20 = matrix19.getRows();
        com.operations.Matrix.Matrix matrix22 = com.operations.Matrix.MatrixOperations.scalarMultiply(matrix19, (double) 2);
        com.operations.Matrix.Matrix matrix23 = com.operations.Matrix.MatrixOperations.subtract(matrix12, matrix22);
        com.operations.Matrix.Matrix matrix24 = com.operations.Matrix.MatrixOperations.add(matrix9, matrix22);
        boolean boolean26 = com.operations.Matrix.MatrixUtils.compare(matrix7, matrix9, (double) (byte) -1);
        com.operations.Matrix.Matrix matrix27 = com.operations.Matrix.MatrixOperations.transpose(matrix9);
        com.operations.Matrix.Matrix matrix30 = com.operations.Matrix.MatrixTransformations.project2D((double) 10L, 10.0d);
        com.operations.Matrix.Matrix matrix32 = com.operations.Matrix.MatrixTransformations.rotate2D((double) (short) 100);
        double[] doubleArray35 = new double[] { 137.90576492663388d, (byte) -1 };
        double[] doubleArray36 = com.operations.Matrix.MatrixSolver.solveGaussian(matrix32, doubleArray35);
        com.operations.Matrix.Matrix matrix39 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0L, (double) (byte) 10);
        double[] doubleArray42 = new double[] { 10, 'a' };
        double[] doubleArray45 = new double[] { 10, 'a' };
        double[][] doubleArray46 = new double[][] { doubleArray42, doubleArray45 };
        com.operations.Matrix.Matrix matrix47 = new com.operations.Matrix.Matrix(doubleArray46);
        int int48 = matrix47.getCols();
        int int49 = matrix47.getCols();
        int int50 = matrix47.getCols();
        com.operations.Matrix.Matrix[] matrixArray51 = com.operations.Matrix.MatrixDecompositions.luDecomposition(matrix47);
        com.operations.Matrix.Matrix matrix52 = com.operations.Matrix.MatrixOperations.multiply(matrix39, matrix47);
        boolean boolean54 = com.operations.Matrix.MatrixUtils.compare(matrix32, matrix39, (double) (-1L));
        double[][] doubleArray55 = matrix32.getData();
        com.operations.Matrix.Matrix matrix57 = com.operations.Matrix.MatrixTransformations.rotate2D((double) (short) 100);
        double[] doubleArray60 = new double[] { 137.90576492663388d, (byte) -1 };
        double[] doubleArray61 = com.operations.Matrix.MatrixSolver.solveGaussian(matrix57, doubleArray60);
        double[] doubleArray62 = com.operations.Matrix.MatrixSolver.solveGaussian(matrix32, doubleArray60);
        double[] doubleArray63 = com.operations.Matrix.MatrixSolver.solveGaussian(matrix30, doubleArray62);
        double[] doubleArray64 = com.operations.Matrix.MatrixSolver.solveGaussian(matrix9, doubleArray63);
        double[] doubleArray65 = com.operations.Matrix.MatrixSolver.solveGaussian(matrix4, doubleArray63);
        double[] doubleArray66 = com.operations.Matrix.MatrixSolver.solveGaussian(matrix1, doubleArray65);
        com.operations.Matrix.Matrix matrix67 = null;
        // The following exception was thrown during execution in test generation
        try {
            com.operations.Matrix.Matrix matrix68 = com.operations.Matrix.MatrixOperations.add(matrix1, matrix67);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot invoke \"com.operations.Matrix.Matrix.getRows()\" because \"b\" is null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(matrix1);
        org.junit.Assert.assertNotNull(matrix4);
        org.junit.Assert.assertNotNull(matrix7);
        org.junit.Assert.assertNotNull(matrix9);
        org.junit.Assert.assertNotNull(matrix12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 2 + "'", int13 == 2);
        org.junit.Assert.assertNotNull(matrix15);
        org.junit.Assert.assertTrue("'" + double16 + "' != '" + 10.0d + "'", double16 == 10.0d);
        org.junit.Assert.assertNotNull(matrix19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 2 + "'", int20 == 2);
        org.junit.Assert.assertNotNull(matrix22);
        org.junit.Assert.assertNotNull(matrix23);
        org.junit.Assert.assertNotNull(matrix24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(matrix27);
        org.junit.Assert.assertNotNull(matrix30);
        org.junit.Assert.assertNotNull(matrix32);
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertArrayEquals(doubleArray35, new double[] { 137.90576492663388d, (-1.0d) }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertArrayEquals(doubleArray36, new double[] { (-24.931892522286255d), (-135.63701830716116d) }, 1.0E-15);
        org.junit.Assert.assertNotNull(matrix39);
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertArrayEquals(doubleArray42, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertArrayEquals(doubleArray45, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray46);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 2 + "'", int48 == 2);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 2 + "'", int49 == 2);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 2 + "'", int50 == 2);
        org.junit.Assert.assertNotNull(matrixArray51);
        org.junit.Assert.assertNotNull(matrix52);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertNotNull(matrix57);
        org.junit.Assert.assertNotNull(doubleArray60);
        org.junit.Assert.assertArrayEquals(doubleArray60, new double[] { 137.90576492663388d, (-1.0d) }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray61);
        org.junit.Assert.assertArrayEquals(doubleArray61, new double[] { (-24.931892522286255d), (-135.63701830716116d) }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray62);
        org.junit.Assert.assertArrayEquals(doubleArray62, new double[] { (-24.931892522286255d), (-135.63701830716116d) }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray63);
        org.junit.Assert.assertArrayEquals(doubleArray63, new double[] { (-2.4931892522286256d), (-13.563701830716116d) }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray64);
        org.junit.Assert.assertArrayEquals(doubleArray64, new double[] { (-2.7295287645732618d), (-13.518123861075072d) }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray65);
        org.junit.Assert.assertArrayEquals(doubleArray65, new double[] { 2.4931892522286256d, 13.563701830716116d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray66);
        org.junit.Assert.assertArrayEquals(doubleArray66, new double[] { 2.4931892522286256d, 13.563701830716116d }, 1.0E-15);
    }

    @Test
    public void test1630() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1630");
        double[] doubleArray2 = new double[] { 10, 'a' };
        double[] doubleArray5 = new double[] { 10, 'a' };
        double[][] doubleArray6 = new double[][] { doubleArray2, doubleArray5 };
        com.operations.Matrix.Matrix matrix7 = new com.operations.Matrix.Matrix(doubleArray6);
        com.operations.Matrix.Matrix matrix8 = new com.operations.Matrix.Matrix(doubleArray6);
        com.operations.Matrix.Matrix[] matrixArray9 = com.operations.Matrix.MatrixDecompositions.luDecomposition(matrix8);
        double double10 = com.operations.Matrix.MatrixUtils.frobeniusNorm(matrix8);
        int int11 = matrix8.getRows();
        com.operations.Matrix.Matrix matrix13 = com.operations.Matrix.MatrixOperations.scalarMultiply(matrix8, 400.0d);
        double[] doubleArray16 = new double[] { 10, 'a' };
        double[] doubleArray19 = new double[] { 10, 'a' };
        double[][] doubleArray20 = new double[][] { doubleArray16, doubleArray19 };
        com.operations.Matrix.Matrix matrix21 = new com.operations.Matrix.Matrix(doubleArray20);
        com.operations.Matrix.Matrix matrix22 = new com.operations.Matrix.Matrix(doubleArray20);
        boolean boolean23 = com.operations.Matrix.MatrixUtils.isSquare(matrix22);
        double[] doubleArray26 = new double[] { 10, 'a' };
        double[] doubleArray29 = new double[] { 10, 'a' };
        double[][] doubleArray30 = new double[][] { doubleArray26, doubleArray29 };
        com.operations.Matrix.Matrix matrix31 = new com.operations.Matrix.Matrix(doubleArray30);
        int int32 = matrix31.getCols();
        int int33 = matrix31.getCols();
        matrix31.print();
        double[] doubleArray37 = new double[] { 10, 'a' };
        double[] doubleArray40 = new double[] { 10, 'a' };
        double[][] doubleArray41 = new double[][] { doubleArray37, doubleArray40 };
        com.operations.Matrix.Matrix matrix42 = new com.operations.Matrix.Matrix(doubleArray41);
        boolean boolean44 = com.operations.Matrix.MatrixUtils.compare(matrix31, matrix42, (double) (-1));
        com.operations.Matrix.Matrix matrix45 = com.operations.Matrix.MatrixOperations.subtract(matrix22, matrix42);
        com.operations.Matrix.Matrix[] matrixArray46 = com.operations.Matrix.MatrixDecompositions.luDecomposition(matrix45);
        double[][] doubleArray47 = matrix45.getData();
        com.operations.Matrix.Matrix matrix48 = com.operations.Matrix.MatrixOperations.multiply(matrix13, matrix45);
        com.operations.Matrix.Matrix matrix49 = com.operations.Matrix.MatrixOperations.transpose(matrix48);
        int int50 = matrix48.getCols();
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertArrayEquals(doubleArray2, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertArrayEquals(doubleArray5, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertNotNull(matrixArray9);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 137.90576492663388d + "'", double10 == 137.90576492663388d);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 2 + "'", int11 == 2);
        org.junit.Assert.assertNotNull(matrix13);
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertArrayEquals(doubleArray16, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertArrayEquals(doubleArray19, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertArrayEquals(doubleArray26, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertArrayEquals(doubleArray29, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 2 + "'", int32 == 2);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 2 + "'", int33 == 2);
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertArrayEquals(doubleArray37, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertArrayEquals(doubleArray40, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(matrix45);
        org.junit.Assert.assertNotNull(matrixArray46);
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertNotNull(matrix48);
        org.junit.Assert.assertNotNull(matrix49);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 2 + "'", int50 == 2);
    }

    @Test
    public void test1631() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1631");
        com.operations.Matrix.Matrix matrix2 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0L, (double) (byte) 10);
        int int3 = matrix2.getRows();
        com.operations.Matrix.Matrix matrix5 = com.operations.Matrix.MatrixOperations.scalarMultiply(matrix2, (double) 2);
        double double6 = com.operations.Matrix.MatrixUtils.frobeniusNorm(matrix2);
        com.operations.Matrix.Matrix matrix9 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0L, (double) (byte) 10);
        int int10 = matrix9.getRows();
        com.operations.Matrix.Matrix matrix12 = com.operations.Matrix.MatrixOperations.scalarMultiply(matrix9, (double) 2);
        com.operations.Matrix.Matrix matrix13 = com.operations.Matrix.MatrixOperations.subtract(matrix2, matrix12);
        com.operations.Matrix.Matrix matrix15 = com.operations.Matrix.MatrixTransformations.rotate2D((double) (short) 100);
        double[] doubleArray18 = new double[] { 137.90576492663388d, (byte) -1 };
        double[] doubleArray19 = com.operations.Matrix.MatrixSolver.solveGaussian(matrix15, doubleArray18);
        com.operations.Matrix.Matrix matrix22 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0L, (double) (byte) 10);
        double[] doubleArray25 = new double[] { 10, 'a' };
        double[] doubleArray28 = new double[] { 10, 'a' };
        double[][] doubleArray29 = new double[][] { doubleArray25, doubleArray28 };
        com.operations.Matrix.Matrix matrix30 = new com.operations.Matrix.Matrix(doubleArray29);
        int int31 = matrix30.getCols();
        int int32 = matrix30.getCols();
        int int33 = matrix30.getCols();
        com.operations.Matrix.Matrix[] matrixArray34 = com.operations.Matrix.MatrixDecompositions.luDecomposition(matrix30);
        com.operations.Matrix.Matrix matrix35 = com.operations.Matrix.MatrixOperations.multiply(matrix22, matrix30);
        boolean boolean37 = com.operations.Matrix.MatrixUtils.compare(matrix15, matrix22, (double) (-1L));
        double[][] doubleArray38 = matrix15.getData();
        com.operations.Matrix.Matrix matrix41 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0L, (double) 10L);
        boolean boolean43 = com.operations.Matrix.MatrixUtils.compare(matrix15, matrix41, 146.4308710620817d);
        com.operations.Matrix.Matrix matrix44 = com.operations.Matrix.MatrixOperations.subtract(matrix13, matrix41);
        com.operations.Matrix.Matrix matrix47 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0L, (double) (byte) 10);
        double[] doubleArray50 = new double[] { 10, 'a' };
        double[] doubleArray53 = new double[] { 10, 'a' };
        double[][] doubleArray54 = new double[][] { doubleArray50, doubleArray53 };
        com.operations.Matrix.Matrix matrix55 = new com.operations.Matrix.Matrix(doubleArray54);
        int int56 = matrix55.getCols();
        int int57 = matrix55.getCols();
        int int58 = matrix55.getCols();
        com.operations.Matrix.Matrix[] matrixArray59 = com.operations.Matrix.MatrixDecompositions.luDecomposition(matrix55);
        com.operations.Matrix.Matrix matrix60 = com.operations.Matrix.MatrixOperations.multiply(matrix47, matrix55);
        com.operations.Matrix.Matrix matrix62 = com.operations.Matrix.MatrixTransformations.rotate2D((double) (short) 100);
        boolean boolean64 = com.operations.Matrix.MatrixUtils.compare(matrix55, matrix62, (double) (byte) 0);
        com.operations.Matrix.Matrix[] matrixArray65 = com.operations.Matrix.MatrixDecompositions.luDecomposition(matrix55);
        com.operations.Matrix.Matrix matrix66 = com.operations.Matrix.MatrixOperations.transpose(matrix55);
        com.operations.Matrix.Matrix matrix69 = com.operations.Matrix.MatrixTransformations.scale2D((double) 1.0f, (double) 1);
        com.operations.Matrix.Matrix matrix71 = com.operations.Matrix.MatrixTransformations.rotate2D((double) 1.0f);
        com.operations.Matrix.Matrix matrix74 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0L, (double) (byte) 10);
        int int75 = matrix74.getRows();
        com.operations.Matrix.Matrix matrix77 = com.operations.Matrix.MatrixOperations.scalarMultiply(matrix74, (double) 2);
        double double78 = com.operations.Matrix.MatrixUtils.frobeniusNorm(matrix74);
        com.operations.Matrix.Matrix matrix81 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0L, (double) (byte) 10);
        int int82 = matrix81.getRows();
        com.operations.Matrix.Matrix matrix84 = com.operations.Matrix.MatrixOperations.scalarMultiply(matrix81, (double) 2);
        com.operations.Matrix.Matrix matrix85 = com.operations.Matrix.MatrixOperations.subtract(matrix74, matrix84);
        com.operations.Matrix.Matrix matrix86 = com.operations.Matrix.MatrixOperations.add(matrix71, matrix84);
        boolean boolean88 = com.operations.Matrix.MatrixUtils.compare(matrix69, matrix71, (double) (byte) -1);
        com.operations.Matrix.Matrix matrix89 = com.operations.Matrix.MatrixOperations.subtract(matrix66, matrix69);
        matrix66.print();
        com.operations.Matrix.Matrix matrix91 = com.operations.Matrix.MatrixOperations.add(matrix41, matrix66);
        int int92 = matrix41.getRows();
        org.junit.Assert.assertNotNull(matrix2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 2 + "'", int3 == 2);
        org.junit.Assert.assertNotNull(matrix5);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 10.0d + "'", double6 == 10.0d);
        org.junit.Assert.assertNotNull(matrix9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 2 + "'", int10 == 2);
        org.junit.Assert.assertNotNull(matrix12);
        org.junit.Assert.assertNotNull(matrix13);
        org.junit.Assert.assertNotNull(matrix15);
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertArrayEquals(doubleArray18, new double[] { 137.90576492663388d, (-1.0d) }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertArrayEquals(doubleArray19, new double[] { (-24.931892522286255d), (-135.63701830716116d) }, 1.0E-15);
        org.junit.Assert.assertNotNull(matrix22);
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertArrayEquals(doubleArray25, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertArrayEquals(doubleArray28, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 2 + "'", int31 == 2);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 2 + "'", int32 == 2);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 2 + "'", int33 == 2);
        org.junit.Assert.assertNotNull(matrixArray34);
        org.junit.Assert.assertNotNull(matrix35);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertNotNull(matrix41);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertNotNull(matrix44);
        org.junit.Assert.assertNotNull(matrix47);
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertArrayEquals(doubleArray50, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertArrayEquals(doubleArray53, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray54);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 2 + "'", int56 == 2);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 2 + "'", int57 == 2);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 2 + "'", int58 == 2);
        org.junit.Assert.assertNotNull(matrixArray59);
        org.junit.Assert.assertNotNull(matrix60);
        org.junit.Assert.assertNotNull(matrix62);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertNotNull(matrixArray65);
        org.junit.Assert.assertNotNull(matrix66);
        org.junit.Assert.assertNotNull(matrix69);
        org.junit.Assert.assertNotNull(matrix71);
        org.junit.Assert.assertNotNull(matrix74);
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + 2 + "'", int75 == 2);
        org.junit.Assert.assertNotNull(matrix77);
        org.junit.Assert.assertTrue("'" + double78 + "' != '" + 10.0d + "'", double78 == 10.0d);
        org.junit.Assert.assertNotNull(matrix81);
        org.junit.Assert.assertTrue("'" + int82 + "' != '" + 2 + "'", int82 == 2);
        org.junit.Assert.assertNotNull(matrix84);
        org.junit.Assert.assertNotNull(matrix85);
        org.junit.Assert.assertNotNull(matrix86);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
        org.junit.Assert.assertNotNull(matrix89);
        org.junit.Assert.assertNotNull(matrix91);
        org.junit.Assert.assertTrue("'" + int92 + "' != '" + 2 + "'", int92 == 2);
    }

    @Test
    public void test1632() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1632");
        com.operations.Matrix.Matrix matrix2 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0L, (double) (byte) 10);
        double[] doubleArray5 = new double[] { 10, 'a' };
        double[] doubleArray8 = new double[] { 10, 'a' };
        double[][] doubleArray9 = new double[][] { doubleArray5, doubleArray8 };
        com.operations.Matrix.Matrix matrix10 = new com.operations.Matrix.Matrix(doubleArray9);
        int int11 = matrix10.getCols();
        int int12 = matrix10.getCols();
        int int13 = matrix10.getCols();
        com.operations.Matrix.Matrix[] matrixArray14 = com.operations.Matrix.MatrixDecompositions.luDecomposition(matrix10);
        com.operations.Matrix.Matrix matrix15 = com.operations.Matrix.MatrixOperations.multiply(matrix2, matrix10);
        com.operations.Matrix.Matrix matrix17 = com.operations.Matrix.MatrixTransformations.rotate2D((double) (short) 100);
        boolean boolean19 = com.operations.Matrix.MatrixUtils.compare(matrix10, matrix17, (double) (byte) 0);
        com.operations.Matrix.Matrix matrix21 = com.operations.Matrix.MatrixOperations.scalarMultiply(matrix17, (double) 10.0f);
        com.operations.Matrix.Matrix matrix22 = com.operations.Matrix.MatrixOperations.transpose(matrix21);
        com.operations.Matrix.Matrix matrix23 = null;
        // The following exception was thrown during execution in test generation
        try {
            com.operations.Matrix.Matrix matrix24 = com.operations.Matrix.MatrixOperations.multiply(matrix21, matrix23);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(matrix2);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertArrayEquals(doubleArray5, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertArrayEquals(doubleArray8, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 2 + "'", int11 == 2);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 2 + "'", int12 == 2);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 2 + "'", int13 == 2);
        org.junit.Assert.assertNotNull(matrixArray14);
        org.junit.Assert.assertNotNull(matrix15);
        org.junit.Assert.assertNotNull(matrix17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(matrix21);
        org.junit.Assert.assertNotNull(matrix22);
    }

    @Test
    public void test1633() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1633");
        com.operations.Matrix.Matrix matrix0 = null;
        com.operations.Matrix.Matrix matrix1 = null;
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean3 = com.operations.Matrix.MatrixUtils.compare(matrix0, matrix1, (double) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot invoke \"com.operations.Matrix.Matrix.getRows()\" because \"a\" is null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test1634() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1634");
        com.operations.Matrix.Matrix matrix1 = com.operations.Matrix.MatrixTransformations.rotate2D((double) 1.0f);
        com.operations.Matrix.Matrix matrix4 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0L, (double) (byte) 10);
        int int5 = matrix4.getRows();
        com.operations.Matrix.Matrix matrix7 = com.operations.Matrix.MatrixOperations.scalarMultiply(matrix4, (double) 2);
        double double8 = com.operations.Matrix.MatrixUtils.frobeniusNorm(matrix4);
        com.operations.Matrix.Matrix matrix11 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0L, (double) (byte) 10);
        int int12 = matrix11.getRows();
        com.operations.Matrix.Matrix matrix14 = com.operations.Matrix.MatrixOperations.scalarMultiply(matrix11, (double) 2);
        com.operations.Matrix.Matrix matrix15 = com.operations.Matrix.MatrixOperations.subtract(matrix4, matrix14);
        com.operations.Matrix.Matrix matrix16 = com.operations.Matrix.MatrixOperations.add(matrix1, matrix14);
        com.operations.Matrix.Matrix matrix19 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0L, (double) (byte) 10);
        double[] doubleArray22 = new double[] { 10, 'a' };
        double[] doubleArray25 = new double[] { 10, 'a' };
        double[][] doubleArray26 = new double[][] { doubleArray22, doubleArray25 };
        com.operations.Matrix.Matrix matrix27 = new com.operations.Matrix.Matrix(doubleArray26);
        int int28 = matrix27.getCols();
        int int29 = matrix27.getCols();
        int int30 = matrix27.getCols();
        com.operations.Matrix.Matrix[] matrixArray31 = com.operations.Matrix.MatrixDecompositions.luDecomposition(matrix27);
        com.operations.Matrix.Matrix matrix32 = com.operations.Matrix.MatrixOperations.multiply(matrix19, matrix27);
        com.operations.Matrix.Matrix matrix34 = com.operations.Matrix.MatrixTransformations.rotate2D((double) (short) 100);
        boolean boolean36 = com.operations.Matrix.MatrixUtils.compare(matrix27, matrix34, (double) (byte) 0);
        com.operations.Matrix.Matrix[] matrixArray37 = com.operations.Matrix.MatrixDecompositions.luDecomposition(matrix27);
        com.operations.Matrix.Matrix matrix38 = com.operations.Matrix.MatrixOperations.transpose(matrix27);
        com.operations.Matrix.Matrix matrix41 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0L, (double) (byte) 10);
        int int42 = matrix41.getRows();
        com.operations.Matrix.Matrix matrix45 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0L, (double) (byte) 10);
        int int46 = matrix45.getRows();
        com.operations.Matrix.Matrix matrix48 = com.operations.Matrix.MatrixOperations.scalarMultiply(matrix45, (double) 2);
        com.operations.Matrix.Matrix matrix49 = com.operations.Matrix.MatrixOperations.subtract(matrix41, matrix45);
        boolean boolean51 = com.operations.Matrix.MatrixUtils.compare(matrix27, matrix41, (double) ' ');
        com.operations.Matrix.Matrix matrix54 = com.operations.Matrix.MatrixTransformations.project2D((double) ' ', 0.0d);
        double[] doubleArray57 = new double[] { 10, 'a' };
        double[] doubleArray60 = new double[] { 10, 'a' };
        double[][] doubleArray61 = new double[][] { doubleArray57, doubleArray60 };
        com.operations.Matrix.Matrix matrix62 = new com.operations.Matrix.Matrix(doubleArray61);
        int int63 = matrix62.getCols();
        boolean boolean64 = com.operations.Matrix.MatrixUtils.isSquare(matrix62);
        com.operations.Matrix.Matrix matrix65 = com.operations.Matrix.MatrixOperations.transpose(matrix62);
        int int66 = matrix65.getRows();
        com.operations.Matrix.Matrix matrix69 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0L, (double) (byte) 10);
        double[] doubleArray72 = new double[] { 10, 'a' };
        double[] doubleArray75 = new double[] { 10, 'a' };
        double[][] doubleArray76 = new double[][] { doubleArray72, doubleArray75 };
        com.operations.Matrix.Matrix matrix77 = new com.operations.Matrix.Matrix(doubleArray76);
        int int78 = matrix77.getCols();
        int int79 = matrix77.getCols();
        int int80 = matrix77.getCols();
        com.operations.Matrix.Matrix[] matrixArray81 = com.operations.Matrix.MatrixDecompositions.luDecomposition(matrix77);
        com.operations.Matrix.Matrix matrix82 = com.operations.Matrix.MatrixOperations.multiply(matrix69, matrix77);
        com.operations.Matrix.Matrix matrix84 = com.operations.Matrix.MatrixTransformations.rotate2D((double) (short) 100);
        boolean boolean86 = com.operations.Matrix.MatrixUtils.compare(matrix77, matrix84, (double) (byte) 0);
        com.operations.Matrix.Matrix matrix87 = com.operations.Matrix.MatrixOperations.multiply(matrix65, matrix77);
        com.operations.Matrix.Matrix matrix88 = com.operations.Matrix.MatrixOperations.add(matrix54, matrix77);
        com.operations.Matrix.Matrix matrix89 = com.operations.Matrix.MatrixOperations.transpose(matrix54);
        matrix54.print();
        com.operations.Matrix.Matrix matrix91 = com.operations.Matrix.MatrixOperations.add(matrix41, matrix54);
        double double92 = com.operations.Matrix.MatrixUtils.frobeniusNorm(matrix91);
        boolean boolean94 = com.operations.Matrix.MatrixUtils.compare(matrix14, matrix91, 1.0d);
        // The following exception was thrown during execution in test generation
        try {
            com.operations.Matrix.Matrix matrix95 = com.operations.Matrix.MatrixDecompositions.choleskyDecomposition(matrix14);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Matrix is not positive definite.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(matrix1);
        org.junit.Assert.assertNotNull(matrix4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 2 + "'", int5 == 2);
        org.junit.Assert.assertNotNull(matrix7);
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 10.0d + "'", double8 == 10.0d);
        org.junit.Assert.assertNotNull(matrix11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 2 + "'", int12 == 2);
        org.junit.Assert.assertNotNull(matrix14);
        org.junit.Assert.assertNotNull(matrix15);
        org.junit.Assert.assertNotNull(matrix16);
        org.junit.Assert.assertNotNull(matrix19);
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertArrayEquals(doubleArray22, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertArrayEquals(doubleArray25, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 2 + "'", int28 == 2);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 2 + "'", int29 == 2);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 2 + "'", int30 == 2);
        org.junit.Assert.assertNotNull(matrixArray31);
        org.junit.Assert.assertNotNull(matrix32);
        org.junit.Assert.assertNotNull(matrix34);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(matrixArray37);
        org.junit.Assert.assertNotNull(matrix38);
        org.junit.Assert.assertNotNull(matrix41);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 2 + "'", int42 == 2);
        org.junit.Assert.assertNotNull(matrix45);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 2 + "'", int46 == 2);
        org.junit.Assert.assertNotNull(matrix48);
        org.junit.Assert.assertNotNull(matrix49);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(matrix54);
        org.junit.Assert.assertNotNull(doubleArray57);
        org.junit.Assert.assertArrayEquals(doubleArray57, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray60);
        org.junit.Assert.assertArrayEquals(doubleArray60, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray61);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 2 + "'", int63 == 2);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + true + "'", boolean64 == true);
        org.junit.Assert.assertNotNull(matrix65);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 2 + "'", int66 == 2);
        org.junit.Assert.assertNotNull(matrix69);
        org.junit.Assert.assertNotNull(doubleArray72);
        org.junit.Assert.assertArrayEquals(doubleArray72, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray75);
        org.junit.Assert.assertArrayEquals(doubleArray75, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray76);
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + 2 + "'", int78 == 2);
        org.junit.Assert.assertTrue("'" + int79 + "' != '" + 2 + "'", int79 == 2);
        org.junit.Assert.assertTrue("'" + int80 + "' != '" + 2 + "'", int80 == 2);
        org.junit.Assert.assertNotNull(matrixArray81);
        org.junit.Assert.assertNotNull(matrix82);
        org.junit.Assert.assertNotNull(matrix84);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
        org.junit.Assert.assertNotNull(matrix87);
        org.junit.Assert.assertNotNull(matrix88);
        org.junit.Assert.assertNotNull(matrix89);
        org.junit.Assert.assertNotNull(matrix91);
        org.junit.Assert.assertTrue("'" + double92 + "' != '" + 33.52610922848042d + "'", double92 == 33.52610922848042d);
        org.junit.Assert.assertTrue("'" + boolean94 + "' != '" + false + "'", boolean94 == false);
    }

    @Test
    public void test1635() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1635");
        com.operations.Matrix.Matrix matrix2 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0L, (double) (byte) 10);
        double[] doubleArray5 = new double[] { 10, 'a' };
        double[] doubleArray8 = new double[] { 10, 'a' };
        double[][] doubleArray9 = new double[][] { doubleArray5, doubleArray8 };
        com.operations.Matrix.Matrix matrix10 = new com.operations.Matrix.Matrix(doubleArray9);
        int int11 = matrix10.getCols();
        int int12 = matrix10.getCols();
        int int13 = matrix10.getCols();
        com.operations.Matrix.Matrix[] matrixArray14 = com.operations.Matrix.MatrixDecompositions.luDecomposition(matrix10);
        com.operations.Matrix.Matrix matrix15 = com.operations.Matrix.MatrixOperations.multiply(matrix2, matrix10);
        int int16 = matrix10.getRows();
        com.operations.Matrix.Matrix matrix18 = com.operations.Matrix.MatrixOperations.scalarMultiply(matrix10, (double) (-1L));
        com.operations.Matrix.Matrix matrix20 = com.operations.Matrix.MatrixTransformations.rotate2D(35.0d);
        matrix20.print();
        int int22 = matrix20.getRows();
        com.operations.Matrix.Matrix matrix23 = com.operations.Matrix.MatrixOperations.subtract(matrix10, matrix20);
        com.operations.Matrix.Matrix matrix24 = com.operations.Matrix.MatrixOperations.transpose(matrix20);
        double[][] doubleArray25 = matrix20.getData();
        org.junit.Assert.assertNotNull(matrix2);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertArrayEquals(doubleArray5, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertArrayEquals(doubleArray8, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 2 + "'", int11 == 2);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 2 + "'", int12 == 2);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 2 + "'", int13 == 2);
        org.junit.Assert.assertNotNull(matrixArray14);
        org.junit.Assert.assertNotNull(matrix15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 2 + "'", int16 == 2);
        org.junit.Assert.assertNotNull(matrix18);
        org.junit.Assert.assertNotNull(matrix20);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 2 + "'", int22 == 2);
        org.junit.Assert.assertNotNull(matrix23);
        org.junit.Assert.assertNotNull(matrix24);
        org.junit.Assert.assertNotNull(doubleArray25);
    }

    @Test
    public void test1636() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1636");
        com.operations.Matrix.Matrix matrix1 = com.operations.Matrix.MatrixTransformations.rotate2D((double) 'a');
        com.operations.Matrix.Matrix matrix3 = com.operations.Matrix.MatrixTransformations.rotate2D((double) 1.0f);
        com.operations.Matrix.Matrix matrix4 = com.operations.Matrix.MatrixOperations.add(matrix1, matrix3);
        com.operations.Matrix.Matrix matrix6 = com.operations.Matrix.MatrixTransformations.rotate2D((double) '4');
        double[] doubleArray9 = new double[] { 10, 'a' };
        double[] doubleArray12 = new double[] { 10, 'a' };
        double[][] doubleArray13 = new double[][] { doubleArray9, doubleArray12 };
        com.operations.Matrix.Matrix matrix14 = new com.operations.Matrix.Matrix(doubleArray13);
        com.operations.Matrix.Matrix matrix15 = new com.operations.Matrix.Matrix(doubleArray13);
        com.operations.Matrix.Matrix matrix17 = com.operations.Matrix.MatrixTransformations.rotate2D((double) (short) 100);
        double[] doubleArray20 = new double[] { 137.90576492663388d, (byte) -1 };
        double[] doubleArray21 = com.operations.Matrix.MatrixSolver.solveGaussian(matrix17, doubleArray20);
        com.operations.Matrix.Matrix matrix22 = com.operations.Matrix.MatrixOperations.add(matrix15, matrix17);
        boolean boolean23 = com.operations.Matrix.MatrixUtils.isSymmetric(matrix22);
        boolean boolean25 = com.operations.Matrix.MatrixUtils.compare(matrix6, matrix22, 364.0054944640259d);
        com.operations.Matrix.Matrix[] matrixArray26 = com.operations.Matrix.MatrixDecompositions.luDecomposition(matrix22);
        com.operations.Matrix.Matrix matrix28 = com.operations.Matrix.MatrixOperations.scalarMultiply(matrix22, (double) 1L);
        com.operations.Matrix.Matrix matrix31 = com.operations.Matrix.MatrixTransformations.scale2D((double) 100.0f, (double) (byte) 1);
        com.operations.Matrix.Matrix matrix34 = com.operations.Matrix.MatrixTransformations.scale2D((double) 1.0f, (double) 1);
        com.operations.Matrix.Matrix matrix36 = com.operations.Matrix.MatrixTransformations.rotate2D((double) 1.0f);
        com.operations.Matrix.Matrix matrix39 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0L, (double) (byte) 10);
        int int40 = matrix39.getRows();
        com.operations.Matrix.Matrix matrix42 = com.operations.Matrix.MatrixOperations.scalarMultiply(matrix39, (double) 2);
        double double43 = com.operations.Matrix.MatrixUtils.frobeniusNorm(matrix39);
        com.operations.Matrix.Matrix matrix46 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0L, (double) (byte) 10);
        int int47 = matrix46.getRows();
        com.operations.Matrix.Matrix matrix49 = com.operations.Matrix.MatrixOperations.scalarMultiply(matrix46, (double) 2);
        com.operations.Matrix.Matrix matrix50 = com.operations.Matrix.MatrixOperations.subtract(matrix39, matrix49);
        com.operations.Matrix.Matrix matrix51 = com.operations.Matrix.MatrixOperations.add(matrix36, matrix49);
        boolean boolean53 = com.operations.Matrix.MatrixUtils.compare(matrix34, matrix36, (double) (byte) -1);
        com.operations.Matrix.Matrix matrix54 = com.operations.Matrix.MatrixOperations.transpose(matrix36);
        com.operations.Matrix.Matrix matrix57 = com.operations.Matrix.MatrixTransformations.project2D((double) 10L, 10.0d);
        com.operations.Matrix.Matrix matrix59 = com.operations.Matrix.MatrixTransformations.rotate2D((double) (short) 100);
        double[] doubleArray62 = new double[] { 137.90576492663388d, (byte) -1 };
        double[] doubleArray63 = com.operations.Matrix.MatrixSolver.solveGaussian(matrix59, doubleArray62);
        com.operations.Matrix.Matrix matrix66 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0L, (double) (byte) 10);
        double[] doubleArray69 = new double[] { 10, 'a' };
        double[] doubleArray72 = new double[] { 10, 'a' };
        double[][] doubleArray73 = new double[][] { doubleArray69, doubleArray72 };
        com.operations.Matrix.Matrix matrix74 = new com.operations.Matrix.Matrix(doubleArray73);
        int int75 = matrix74.getCols();
        int int76 = matrix74.getCols();
        int int77 = matrix74.getCols();
        com.operations.Matrix.Matrix[] matrixArray78 = com.operations.Matrix.MatrixDecompositions.luDecomposition(matrix74);
        com.operations.Matrix.Matrix matrix79 = com.operations.Matrix.MatrixOperations.multiply(matrix66, matrix74);
        boolean boolean81 = com.operations.Matrix.MatrixUtils.compare(matrix59, matrix66, (double) (-1L));
        double[][] doubleArray82 = matrix59.getData();
        com.operations.Matrix.Matrix matrix84 = com.operations.Matrix.MatrixTransformations.rotate2D((double) (short) 100);
        double[] doubleArray87 = new double[] { 137.90576492663388d, (byte) -1 };
        double[] doubleArray88 = com.operations.Matrix.MatrixSolver.solveGaussian(matrix84, doubleArray87);
        double[] doubleArray89 = com.operations.Matrix.MatrixSolver.solveGaussian(matrix59, doubleArray87);
        double[] doubleArray90 = com.operations.Matrix.MatrixSolver.solveGaussian(matrix57, doubleArray89);
        double[] doubleArray91 = com.operations.Matrix.MatrixSolver.solveGaussian(matrix36, doubleArray90);
        double[] doubleArray92 = com.operations.Matrix.MatrixSolver.solveGaussian(matrix31, doubleArray91);
        double[] doubleArray93 = com.operations.Matrix.MatrixSolver.solveGaussian(matrix22, doubleArray91);
        double[] doubleArray94 = com.operations.Matrix.MatrixSolver.solveGaussian(matrix4, doubleArray93);
        int int95 = matrix4.getCols();
        org.junit.Assert.assertNotNull(matrix1);
        org.junit.Assert.assertNotNull(matrix3);
        org.junit.Assert.assertNotNull(matrix4);
        org.junit.Assert.assertNotNull(matrix6);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertArrayEquals(doubleArray9, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertArrayEquals(doubleArray12, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertNotNull(matrix17);
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertArrayEquals(doubleArray20, new double[] { 137.90576492663388d, (-1.0d) }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertArrayEquals(doubleArray21, new double[] { (-24.931892522286255d), (-135.63701830716116d) }, 1.0E-15);
        org.junit.Assert.assertNotNull(matrix22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertNotNull(matrixArray26);
        org.junit.Assert.assertNotNull(matrix28);
        org.junit.Assert.assertNotNull(matrix31);
        org.junit.Assert.assertNotNull(matrix34);
        org.junit.Assert.assertNotNull(matrix36);
        org.junit.Assert.assertNotNull(matrix39);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 2 + "'", int40 == 2);
        org.junit.Assert.assertNotNull(matrix42);
        org.junit.Assert.assertTrue("'" + double43 + "' != '" + 10.0d + "'", double43 == 10.0d);
        org.junit.Assert.assertNotNull(matrix46);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 2 + "'", int47 == 2);
        org.junit.Assert.assertNotNull(matrix49);
        org.junit.Assert.assertNotNull(matrix50);
        org.junit.Assert.assertNotNull(matrix51);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(matrix54);
        org.junit.Assert.assertNotNull(matrix57);
        org.junit.Assert.assertNotNull(matrix59);
        org.junit.Assert.assertNotNull(doubleArray62);
        org.junit.Assert.assertArrayEquals(doubleArray62, new double[] { 137.90576492663388d, (-1.0d) }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray63);
        org.junit.Assert.assertArrayEquals(doubleArray63, new double[] { (-24.931892522286255d), (-135.63701830716116d) }, 1.0E-15);
        org.junit.Assert.assertNotNull(matrix66);
        org.junit.Assert.assertNotNull(doubleArray69);
        org.junit.Assert.assertArrayEquals(doubleArray69, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray72);
        org.junit.Assert.assertArrayEquals(doubleArray72, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray73);
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + 2 + "'", int75 == 2);
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 2 + "'", int76 == 2);
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + 2 + "'", int77 == 2);
        org.junit.Assert.assertNotNull(matrixArray78);
        org.junit.Assert.assertNotNull(matrix79);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
        org.junit.Assert.assertNotNull(doubleArray82);
        org.junit.Assert.assertNotNull(matrix84);
        org.junit.Assert.assertNotNull(doubleArray87);
        org.junit.Assert.assertArrayEquals(doubleArray87, new double[] { 137.90576492663388d, (-1.0d) }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray88);
        org.junit.Assert.assertArrayEquals(doubleArray88, new double[] { (-24.931892522286255d), (-135.63701830716116d) }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray89);
        org.junit.Assert.assertArrayEquals(doubleArray89, new double[] { (-24.931892522286255d), (-135.63701830716116d) }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray90);
        org.junit.Assert.assertArrayEquals(doubleArray90, new double[] { (-2.4931892522286256d), (-13.563701830716116d) }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray91);
        org.junit.Assert.assertArrayEquals(doubleArray91, new double[] { (-2.7295287645732618d), (-13.518123861075072d) }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray92);
        org.junit.Assert.assertArrayEquals(doubleArray92, new double[] { (-0.027295287645732618d), (-13.518123861075072d) }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray93);
        org.junit.Assert.assertArrayEquals(doubleArray93, new double[] { (-10.010349291411998d), 0.996047427487017d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray94);
        org.junit.Assert.assertArrayEquals(doubleArray94, new double[] { (-4.345678889017899d), 6.133610046906377d }, 1.0E-15);
        org.junit.Assert.assertTrue("'" + int95 + "' != '" + 2 + "'", int95 == 2);
    }

    @Test
    public void test1637() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1637");
        com.operations.Matrix.Matrix matrix2 = com.operations.Matrix.MatrixTransformations.scale2D((double) (byte) 10, (double) 10);
        double[] doubleArray5 = new double[] { 10, 'a' };
        double[] doubleArray8 = new double[] { 10, 'a' };
        double[][] doubleArray9 = new double[][] { doubleArray5, doubleArray8 };
        com.operations.Matrix.Matrix matrix10 = new com.operations.Matrix.Matrix(doubleArray9);
        com.operations.Matrix.Matrix matrix11 = new com.operations.Matrix.Matrix(doubleArray9);
        boolean boolean12 = com.operations.Matrix.MatrixUtils.isSquare(matrix11);
        double[] doubleArray15 = new double[] { 10, 'a' };
        double[] doubleArray18 = new double[] { 10, 'a' };
        double[][] doubleArray19 = new double[][] { doubleArray15, doubleArray18 };
        com.operations.Matrix.Matrix matrix20 = new com.operations.Matrix.Matrix(doubleArray19);
        int int21 = matrix20.getCols();
        int int22 = matrix20.getCols();
        matrix20.print();
        double[] doubleArray26 = new double[] { 10, 'a' };
        double[] doubleArray29 = new double[] { 10, 'a' };
        double[][] doubleArray30 = new double[][] { doubleArray26, doubleArray29 };
        com.operations.Matrix.Matrix matrix31 = new com.operations.Matrix.Matrix(doubleArray30);
        boolean boolean33 = com.operations.Matrix.MatrixUtils.compare(matrix20, matrix31, (double) (-1));
        com.operations.Matrix.Matrix matrix34 = com.operations.Matrix.MatrixOperations.subtract(matrix11, matrix31);
        com.operations.Matrix.Matrix[] matrixArray35 = com.operations.Matrix.MatrixDecompositions.luDecomposition(matrix34);
        double[][] doubleArray36 = matrix34.getData();
        com.operations.Matrix.Matrix matrix37 = new com.operations.Matrix.Matrix(doubleArray36);
        com.operations.Matrix.Matrix matrix38 = com.operations.Matrix.MatrixOperations.multiply(matrix2, matrix37);
        boolean boolean39 = com.operations.Matrix.MatrixUtils.isSymmetric(matrix2);
        com.operations.Matrix.Matrix matrix41 = com.operations.Matrix.MatrixTransformations.rotate2D(350.0d);
        com.operations.Matrix.Matrix matrix42 = com.operations.Matrix.MatrixDecompositions.choleskyDecomposition(matrix41);
        int int43 = matrix41.getRows();
        com.operations.Matrix.Matrix matrix44 = com.operations.Matrix.MatrixOperations.subtract(matrix2, matrix41);
        double[] doubleArray47 = new double[] { 10, 'a' };
        double[] doubleArray50 = new double[] { 10, 'a' };
        double[][] doubleArray51 = new double[][] { doubleArray47, doubleArray50 };
        com.operations.Matrix.Matrix matrix52 = new com.operations.Matrix.Matrix(doubleArray51);
        int int53 = matrix52.getCols();
        int int54 = matrix52.getCols();
        boolean boolean55 = com.operations.Matrix.MatrixUtils.isSquare(matrix52);
        com.operations.Matrix.Matrix matrix56 = com.operations.Matrix.MatrixDecompositions.choleskyDecomposition(matrix52);
        com.operations.Matrix.Matrix matrix59 = com.operations.Matrix.MatrixTransformations.project2D(0.0d, (double) 0);
        com.operations.Matrix.Matrix matrix60 = com.operations.Matrix.MatrixOperations.subtract(matrix56, matrix59);
        com.operations.Matrix.Matrix matrix61 = com.operations.Matrix.MatrixOperations.transpose(matrix59);
        com.operations.Matrix.Matrix matrix62 = com.operations.Matrix.MatrixOperations.subtract(matrix2, matrix61);
        com.operations.Matrix.Matrix matrix64 = com.operations.Matrix.MatrixOperations.scalarMultiply(matrix62, (-0.1736481776669303d));
        // The following exception was thrown during execution in test generation
        try {
            com.operations.Matrix.Matrix matrix65 = com.operations.Matrix.MatrixDecompositions.choleskyDecomposition(matrix64);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Matrix is not positive definite.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(matrix2);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertArrayEquals(doubleArray5, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertArrayEquals(doubleArray8, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertArrayEquals(doubleArray15, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertArrayEquals(doubleArray18, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 2 + "'", int21 == 2);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 2 + "'", int22 == 2);
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertArrayEquals(doubleArray26, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertArrayEquals(doubleArray29, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(matrix34);
        org.junit.Assert.assertNotNull(matrixArray35);
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertNotNull(matrix38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertNotNull(matrix41);
        org.junit.Assert.assertNotNull(matrix42);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 2 + "'", int43 == 2);
        org.junit.Assert.assertNotNull(matrix44);
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertArrayEquals(doubleArray47, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertArrayEquals(doubleArray50, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 2 + "'", int53 == 2);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 2 + "'", int54 == 2);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + true + "'", boolean55 == true);
        org.junit.Assert.assertNotNull(matrix56);
        org.junit.Assert.assertNotNull(matrix59);
        org.junit.Assert.assertNotNull(matrix60);
        org.junit.Assert.assertNotNull(matrix61);
        org.junit.Assert.assertNotNull(matrix62);
        org.junit.Assert.assertNotNull(matrix64);
    }

    @Test
    public void test1638() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1638");
        com.operations.Matrix.Matrix matrix2 = com.operations.Matrix.MatrixTransformations.scale2D((double) 100, (double) (short) 1);
        com.operations.Matrix.Matrix matrix5 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0L, (double) (byte) 10);
        int int6 = matrix5.getRows();
        com.operations.Matrix.Matrix matrix12 = com.operations.Matrix.MatrixUtils.generateRandomMatrix(100, (int) (byte) 1, (int) '#', (int) '#', 1L);
        boolean boolean14 = com.operations.Matrix.MatrixUtils.compare(matrix5, matrix12, (double) 1.0f);
        matrix12.print();
        com.operations.Matrix.Matrix matrix16 = com.operations.Matrix.MatrixOperations.transpose(matrix12);
        com.operations.Matrix.Matrix matrix17 = com.operations.Matrix.MatrixOperations.transpose(matrix12);
        com.operations.Matrix.Matrix matrix18 = com.operations.Matrix.MatrixOperations.transpose(matrix12);
        matrix18.print();
        boolean boolean21 = com.operations.Matrix.MatrixUtils.compare(matrix2, matrix18, (double) 10);
        boolean boolean22 = com.operations.Matrix.MatrixUtils.isSymmetric(matrix2);
        org.junit.Assert.assertNotNull(matrix2);
        org.junit.Assert.assertNotNull(matrix5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 2 + "'", int6 == 2);
        org.junit.Assert.assertNotNull(matrix12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(matrix16);
        org.junit.Assert.assertNotNull(matrix17);
        org.junit.Assert.assertNotNull(matrix18);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
    }

    @Test
    public void test1639() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1639");
        com.operations.Matrix.Matrix matrix2 = new com.operations.Matrix.Matrix((int) '4', 0);
        matrix2.print();
    }

    @Test
    public void test1640() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1640");
        com.operations.Matrix.Matrix matrix0 = null;
        com.operations.Matrix.Matrix matrix3 = com.operations.Matrix.MatrixTransformations.scale2D((double) 1.0f, (double) 1);
        com.operations.Matrix.Matrix matrix5 = com.operations.Matrix.MatrixTransformations.rotate2D((double) 1.0f);
        com.operations.Matrix.Matrix matrix8 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0L, (double) (byte) 10);
        int int9 = matrix8.getRows();
        com.operations.Matrix.Matrix matrix11 = com.operations.Matrix.MatrixOperations.scalarMultiply(matrix8, (double) 2);
        double double12 = com.operations.Matrix.MatrixUtils.frobeniusNorm(matrix8);
        com.operations.Matrix.Matrix matrix15 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0L, (double) (byte) 10);
        int int16 = matrix15.getRows();
        com.operations.Matrix.Matrix matrix18 = com.operations.Matrix.MatrixOperations.scalarMultiply(matrix15, (double) 2);
        com.operations.Matrix.Matrix matrix19 = com.operations.Matrix.MatrixOperations.subtract(matrix8, matrix18);
        com.operations.Matrix.Matrix matrix20 = com.operations.Matrix.MatrixOperations.add(matrix5, matrix18);
        boolean boolean22 = com.operations.Matrix.MatrixUtils.compare(matrix3, matrix5, (double) (byte) -1);
        com.operations.Matrix.Matrix matrix23 = com.operations.Matrix.MatrixOperations.transpose(matrix5);
        com.operations.Matrix.Matrix matrix26 = com.operations.Matrix.MatrixTransformations.project2D((double) 10L, 10.0d);
        com.operations.Matrix.Matrix matrix28 = com.operations.Matrix.MatrixTransformations.rotate2D((double) (short) 100);
        double[] doubleArray31 = new double[] { 137.90576492663388d, (byte) -1 };
        double[] doubleArray32 = com.operations.Matrix.MatrixSolver.solveGaussian(matrix28, doubleArray31);
        com.operations.Matrix.Matrix matrix35 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0L, (double) (byte) 10);
        double[] doubleArray38 = new double[] { 10, 'a' };
        double[] doubleArray41 = new double[] { 10, 'a' };
        double[][] doubleArray42 = new double[][] { doubleArray38, doubleArray41 };
        com.operations.Matrix.Matrix matrix43 = new com.operations.Matrix.Matrix(doubleArray42);
        int int44 = matrix43.getCols();
        int int45 = matrix43.getCols();
        int int46 = matrix43.getCols();
        com.operations.Matrix.Matrix[] matrixArray47 = com.operations.Matrix.MatrixDecompositions.luDecomposition(matrix43);
        com.operations.Matrix.Matrix matrix48 = com.operations.Matrix.MatrixOperations.multiply(matrix35, matrix43);
        boolean boolean50 = com.operations.Matrix.MatrixUtils.compare(matrix28, matrix35, (double) (-1L));
        double[][] doubleArray51 = matrix28.getData();
        com.operations.Matrix.Matrix matrix53 = com.operations.Matrix.MatrixTransformations.rotate2D((double) (short) 100);
        double[] doubleArray56 = new double[] { 137.90576492663388d, (byte) -1 };
        double[] doubleArray57 = com.operations.Matrix.MatrixSolver.solveGaussian(matrix53, doubleArray56);
        double[] doubleArray58 = com.operations.Matrix.MatrixSolver.solveGaussian(matrix28, doubleArray56);
        double[] doubleArray59 = com.operations.Matrix.MatrixSolver.solveGaussian(matrix26, doubleArray58);
        double[] doubleArray60 = com.operations.Matrix.MatrixSolver.solveGaussian(matrix5, doubleArray59);
        // The following exception was thrown during execution in test generation
        try {
            double[] doubleArray61 = com.operations.Matrix.MatrixSolver.solveGaussian(matrix0, doubleArray60);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(matrix3);
        org.junit.Assert.assertNotNull(matrix5);
        org.junit.Assert.assertNotNull(matrix8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 2 + "'", int9 == 2);
        org.junit.Assert.assertNotNull(matrix11);
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 10.0d + "'", double12 == 10.0d);
        org.junit.Assert.assertNotNull(matrix15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 2 + "'", int16 == 2);
        org.junit.Assert.assertNotNull(matrix18);
        org.junit.Assert.assertNotNull(matrix19);
        org.junit.Assert.assertNotNull(matrix20);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(matrix23);
        org.junit.Assert.assertNotNull(matrix26);
        org.junit.Assert.assertNotNull(matrix28);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertArrayEquals(doubleArray31, new double[] { 137.90576492663388d, (-1.0d) }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertArrayEquals(doubleArray32, new double[] { (-24.931892522286255d), (-135.63701830716116d) }, 1.0E-15);
        org.junit.Assert.assertNotNull(matrix35);
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertArrayEquals(doubleArray38, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertArrayEquals(doubleArray41, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 2 + "'", int44 == 2);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 2 + "'", int45 == 2);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 2 + "'", int46 == 2);
        org.junit.Assert.assertNotNull(matrixArray47);
        org.junit.Assert.assertNotNull(matrix48);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertNotNull(matrix53);
        org.junit.Assert.assertNotNull(doubleArray56);
        org.junit.Assert.assertArrayEquals(doubleArray56, new double[] { 137.90576492663388d, (-1.0d) }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray57);
        org.junit.Assert.assertArrayEquals(doubleArray57, new double[] { (-24.931892522286255d), (-135.63701830716116d) }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray58);
        org.junit.Assert.assertArrayEquals(doubleArray58, new double[] { (-24.931892522286255d), (-135.63701830716116d) }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray59);
        org.junit.Assert.assertArrayEquals(doubleArray59, new double[] { (-2.4931892522286256d), (-13.563701830716116d) }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray60);
        org.junit.Assert.assertArrayEquals(doubleArray60, new double[] { (-2.7295287645732618d), (-13.518123861075072d) }, 1.0E-15);
    }

    @Test
    public void test1641() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1641");
        com.operations.Matrix.Matrix matrix1 = com.operations.Matrix.MatrixTransformations.rotate2D((double) (short) 100);
        double[][] doubleArray2 = matrix1.getData();
        com.operations.Matrix.Matrix matrix3 = new com.operations.Matrix.Matrix(doubleArray2);
        int int4 = matrix3.getCols();
        boolean boolean5 = com.operations.Matrix.MatrixUtils.isSymmetric(matrix3);
        // The following exception was thrown during execution in test generation
        try {
            double double8 = matrix3.getValue(35, 100);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(matrix1);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 2 + "'", int4 == 2);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
    }

    @Test
    public void test1642() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1642");
        com.operations.Matrix.Matrix matrix4 = com.operations.Matrix.MatrixUtils.generateRandomMatrix(1, (int) 'a', 0, (int) (byte) 1);
        org.junit.Assert.assertNotNull(matrix4);
    }

    @Test
    public void test1643() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1643");
        com.operations.Matrix.Matrix matrix2 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0L, (double) (byte) 10);
        int int3 = matrix2.getRows();
        com.operations.Matrix.Matrix matrix5 = com.operations.Matrix.MatrixOperations.scalarMultiply(matrix2, (double) 2);
        double double6 = com.operations.Matrix.MatrixUtils.frobeniusNorm(matrix2);
        com.operations.Matrix.Matrix matrix9 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0L, (double) (byte) 10);
        int int10 = matrix9.getRows();
        com.operations.Matrix.Matrix matrix12 = com.operations.Matrix.MatrixOperations.scalarMultiply(matrix9, (double) 2);
        com.operations.Matrix.Matrix matrix13 = com.operations.Matrix.MatrixOperations.subtract(matrix2, matrix12);
        com.operations.Matrix.Matrix matrix15 = com.operations.Matrix.MatrixTransformations.rotate2D((double) (short) 100);
        double[] doubleArray18 = new double[] { 137.90576492663388d, (byte) -1 };
        double[] doubleArray19 = com.operations.Matrix.MatrixSolver.solveGaussian(matrix15, doubleArray18);
        com.operations.Matrix.Matrix matrix22 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0L, (double) (byte) 10);
        double[] doubleArray25 = new double[] { 10, 'a' };
        double[] doubleArray28 = new double[] { 10, 'a' };
        double[][] doubleArray29 = new double[][] { doubleArray25, doubleArray28 };
        com.operations.Matrix.Matrix matrix30 = new com.operations.Matrix.Matrix(doubleArray29);
        int int31 = matrix30.getCols();
        int int32 = matrix30.getCols();
        int int33 = matrix30.getCols();
        com.operations.Matrix.Matrix[] matrixArray34 = com.operations.Matrix.MatrixDecompositions.luDecomposition(matrix30);
        com.operations.Matrix.Matrix matrix35 = com.operations.Matrix.MatrixOperations.multiply(matrix22, matrix30);
        boolean boolean37 = com.operations.Matrix.MatrixUtils.compare(matrix15, matrix22, (double) (-1L));
        double[][] doubleArray38 = matrix15.getData();
        com.operations.Matrix.Matrix matrix41 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0L, (double) 10L);
        boolean boolean43 = com.operations.Matrix.MatrixUtils.compare(matrix15, matrix41, 146.4308710620817d);
        com.operations.Matrix.Matrix matrix44 = com.operations.Matrix.MatrixOperations.subtract(matrix13, matrix41);
        com.operations.Matrix.Matrix matrix45 = com.operations.Matrix.MatrixOperations.transpose(matrix13);
        double[][] doubleArray46 = matrix13.getData();
        com.operations.Matrix.Matrix matrix47 = new com.operations.Matrix.Matrix(doubleArray46);
        // The following exception was thrown during execution in test generation
        try {
            com.operations.Matrix.Matrix matrix48 = com.operations.Matrix.MatrixDecompositions.choleskyDecomposition(matrix47);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Matrix is not positive definite.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(matrix2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 2 + "'", int3 == 2);
        org.junit.Assert.assertNotNull(matrix5);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 10.0d + "'", double6 == 10.0d);
        org.junit.Assert.assertNotNull(matrix9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 2 + "'", int10 == 2);
        org.junit.Assert.assertNotNull(matrix12);
        org.junit.Assert.assertNotNull(matrix13);
        org.junit.Assert.assertNotNull(matrix15);
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertArrayEquals(doubleArray18, new double[] { 137.90576492663388d, (-1.0d) }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertArrayEquals(doubleArray19, new double[] { (-24.931892522286255d), (-135.63701830716116d) }, 1.0E-15);
        org.junit.Assert.assertNotNull(matrix22);
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertArrayEquals(doubleArray25, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertArrayEquals(doubleArray28, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 2 + "'", int31 == 2);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 2 + "'", int32 == 2);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 2 + "'", int33 == 2);
        org.junit.Assert.assertNotNull(matrixArray34);
        org.junit.Assert.assertNotNull(matrix35);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertNotNull(matrix41);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertNotNull(matrix44);
        org.junit.Assert.assertNotNull(matrix45);
        org.junit.Assert.assertNotNull(doubleArray46);
    }

    @Test
    public void test1644() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1644");
        com.operations.Matrix.Matrix matrix4 = com.operations.Matrix.MatrixUtils.generateRandomMatrix(10, (int) (byte) 1, 1, (int) (short) 1);
        org.junit.Assert.assertNotNull(matrix4);
    }

    @Test
    public void test1645() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1645");
        com.operations.Matrix.Matrix matrix5 = com.operations.Matrix.MatrixUtils.generateRandomMatrix((int) (short) 1, (int) (short) 10, (int) (byte) 10, (int) (short) -1, (long) 10);
        boolean boolean6 = com.operations.Matrix.MatrixUtils.isSymmetric(matrix5);
        com.operations.Matrix.Matrix matrix8 = com.operations.Matrix.MatrixTransformations.rotate2D((double) (short) 0);
        com.operations.Matrix.Matrix matrix11 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0L, (double) (byte) 10);
        int int12 = matrix11.getRows();
        com.operations.Matrix.Matrix matrix14 = com.operations.Matrix.MatrixOperations.scalarMultiply(matrix11, (double) 2);
        double double15 = com.operations.Matrix.MatrixUtils.frobeniusNorm(matrix11);
        com.operations.Matrix.Matrix matrix18 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0L, (double) (byte) 10);
        int int19 = matrix18.getRows();
        com.operations.Matrix.Matrix matrix21 = com.operations.Matrix.MatrixOperations.scalarMultiply(matrix18, (double) 2);
        com.operations.Matrix.Matrix matrix22 = com.operations.Matrix.MatrixOperations.subtract(matrix11, matrix21);
        com.operations.Matrix.Matrix matrix23 = com.operations.Matrix.MatrixOperations.add(matrix8, matrix11);
        // The following exception was thrown during execution in test generation
        try {
            com.operations.Matrix.Matrix matrix24 = com.operations.Matrix.MatrixOperations.multiply(matrix5, matrix23);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Matrix A's columns must match Matrix B's rows for multiplication.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(matrix5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(matrix8);
        org.junit.Assert.assertNotNull(matrix11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 2 + "'", int12 == 2);
        org.junit.Assert.assertNotNull(matrix14);
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 10.0d + "'", double15 == 10.0d);
        org.junit.Assert.assertNotNull(matrix18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 2 + "'", int19 == 2);
        org.junit.Assert.assertNotNull(matrix21);
        org.junit.Assert.assertNotNull(matrix22);
        org.junit.Assert.assertNotNull(matrix23);
    }

    @Test
    public void test1646() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1646");
        double[] doubleArray2 = new double[] { 10, 'a' };
        double[] doubleArray5 = new double[] { 10, 'a' };
        double[][] doubleArray6 = new double[][] { doubleArray2, doubleArray5 };
        com.operations.Matrix.Matrix matrix7 = new com.operations.Matrix.Matrix(doubleArray6);
        com.operations.Matrix.Matrix matrix8 = new com.operations.Matrix.Matrix(doubleArray6);
        boolean boolean9 = com.operations.Matrix.MatrixUtils.isSquare(matrix8);
        double[] doubleArray12 = new double[] { 10, 'a' };
        double[] doubleArray15 = new double[] { 10, 'a' };
        double[][] doubleArray16 = new double[][] { doubleArray12, doubleArray15 };
        com.operations.Matrix.Matrix matrix17 = new com.operations.Matrix.Matrix(doubleArray16);
        int int18 = matrix17.getCols();
        int int19 = matrix17.getCols();
        matrix17.print();
        double[] doubleArray23 = new double[] { 10, 'a' };
        double[] doubleArray26 = new double[] { 10, 'a' };
        double[][] doubleArray27 = new double[][] { doubleArray23, doubleArray26 };
        com.operations.Matrix.Matrix matrix28 = new com.operations.Matrix.Matrix(doubleArray27);
        boolean boolean30 = com.operations.Matrix.MatrixUtils.compare(matrix17, matrix28, (double) (-1));
        com.operations.Matrix.Matrix matrix31 = com.operations.Matrix.MatrixOperations.subtract(matrix8, matrix28);
        com.operations.Matrix.Matrix matrix33 = com.operations.Matrix.MatrixOperations.scalarMultiply(matrix8, (double) 0.0f);
        int int34 = matrix8.getCols();
        com.operations.Matrix.Matrix matrix35 = com.operations.Matrix.MatrixDecompositions.choleskyDecomposition(matrix8);
        com.operations.Matrix.Matrix matrix38 = com.operations.Matrix.MatrixTransformations.scale2D((double) 100L, 1.0d);
        com.operations.Matrix.Matrix matrix39 = com.operations.Matrix.MatrixOperations.transpose(matrix38);
        com.operations.Matrix.Matrix matrix40 = com.operations.Matrix.MatrixOperations.add(matrix35, matrix39);
        double[][] doubleArray41 = matrix35.getData();
        com.operations.Matrix.Matrix matrix42 = new com.operations.Matrix.Matrix(doubleArray41);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertArrayEquals(doubleArray2, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertArrayEquals(doubleArray5, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertArrayEquals(doubleArray12, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertArrayEquals(doubleArray15, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 2 + "'", int18 == 2);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 2 + "'", int19 == 2);
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertArrayEquals(doubleArray23, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertArrayEquals(doubleArray26, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(matrix31);
        org.junit.Assert.assertNotNull(matrix33);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 2 + "'", int34 == 2);
        org.junit.Assert.assertNotNull(matrix35);
        org.junit.Assert.assertNotNull(matrix38);
        org.junit.Assert.assertNotNull(matrix39);
        org.junit.Assert.assertNotNull(matrix40);
        org.junit.Assert.assertNotNull(doubleArray41);
    }

    @Test
    public void test1647() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1647");
        com.operations.Matrix.Matrix matrix2 = new com.operations.Matrix.Matrix((int) (byte) 100, (int) (byte) 10);
        com.operations.Matrix.Matrix matrix5 = com.operations.Matrix.MatrixTransformations.project2D((-1.0d), (double) 1L);
        double double6 = com.operations.Matrix.MatrixUtils.frobeniusNorm(matrix5);
        com.operations.Matrix.Matrix matrix9 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0L, (double) (byte) 10);
        double[] doubleArray12 = new double[] { 10, 'a' };
        double[] doubleArray15 = new double[] { 10, 'a' };
        double[][] doubleArray16 = new double[][] { doubleArray12, doubleArray15 };
        com.operations.Matrix.Matrix matrix17 = new com.operations.Matrix.Matrix(doubleArray16);
        int int18 = matrix17.getCols();
        int int19 = matrix17.getCols();
        int int20 = matrix17.getCols();
        com.operations.Matrix.Matrix[] matrixArray21 = com.operations.Matrix.MatrixDecompositions.luDecomposition(matrix17);
        com.operations.Matrix.Matrix matrix22 = com.operations.Matrix.MatrixOperations.multiply(matrix9, matrix17);
        com.operations.Matrix.Matrix matrix24 = com.operations.Matrix.MatrixTransformations.rotate2D((double) (short) 100);
        boolean boolean26 = com.operations.Matrix.MatrixUtils.compare(matrix17, matrix24, (double) (byte) 0);
        com.operations.Matrix.Matrix[] matrixArray27 = com.operations.Matrix.MatrixDecompositions.luDecomposition(matrix17);
        com.operations.Matrix.Matrix matrix28 = com.operations.Matrix.MatrixOperations.transpose(matrix17);
        com.operations.Matrix.Matrix matrix31 = com.operations.Matrix.MatrixTransformations.scale2D((double) 1.0f, (double) 1);
        com.operations.Matrix.Matrix matrix33 = com.operations.Matrix.MatrixTransformations.rotate2D((double) 1.0f);
        com.operations.Matrix.Matrix matrix36 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0L, (double) (byte) 10);
        int int37 = matrix36.getRows();
        com.operations.Matrix.Matrix matrix39 = com.operations.Matrix.MatrixOperations.scalarMultiply(matrix36, (double) 2);
        double double40 = com.operations.Matrix.MatrixUtils.frobeniusNorm(matrix36);
        com.operations.Matrix.Matrix matrix43 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0L, (double) (byte) 10);
        int int44 = matrix43.getRows();
        com.operations.Matrix.Matrix matrix46 = com.operations.Matrix.MatrixOperations.scalarMultiply(matrix43, (double) 2);
        com.operations.Matrix.Matrix matrix47 = com.operations.Matrix.MatrixOperations.subtract(matrix36, matrix46);
        com.operations.Matrix.Matrix matrix48 = com.operations.Matrix.MatrixOperations.add(matrix33, matrix46);
        boolean boolean50 = com.operations.Matrix.MatrixUtils.compare(matrix31, matrix33, (double) (byte) -1);
        com.operations.Matrix.Matrix matrix51 = com.operations.Matrix.MatrixOperations.subtract(matrix28, matrix31);
        com.operations.Matrix.Matrix matrix52 = com.operations.Matrix.MatrixOperations.multiply(matrix5, matrix31);
        com.operations.Matrix.Matrix matrix54 = com.operations.Matrix.MatrixTransformations.rotate2D((double) (-1L));
        com.operations.Matrix.Matrix matrix56 = com.operations.Matrix.MatrixTransformations.rotate2D((double) (short) 100);
        double[] doubleArray59 = new double[] { 137.90576492663388d, (byte) -1 };
        double[] doubleArray60 = com.operations.Matrix.MatrixSolver.solveGaussian(matrix56, doubleArray59);
        double[] doubleArray61 = com.operations.Matrix.MatrixSolver.solveGaussian(matrix54, doubleArray59);
        double[] doubleArray62 = com.operations.Matrix.MatrixSolver.solveGaussian(matrix52, doubleArray59);
        // The following exception was thrown during execution in test generation
        try {
            double[] doubleArray63 = com.operations.Matrix.MatrixSolver.solveGaussian(matrix2, doubleArray62);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Matrix must be square to solve equations.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(matrix5);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 1.4142135623730951d + "'", double6 == 1.4142135623730951d);
        org.junit.Assert.assertNotNull(matrix9);
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertArrayEquals(doubleArray12, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertArrayEquals(doubleArray15, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 2 + "'", int18 == 2);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 2 + "'", int19 == 2);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 2 + "'", int20 == 2);
        org.junit.Assert.assertNotNull(matrixArray21);
        org.junit.Assert.assertNotNull(matrix22);
        org.junit.Assert.assertNotNull(matrix24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(matrixArray27);
        org.junit.Assert.assertNotNull(matrix28);
        org.junit.Assert.assertNotNull(matrix31);
        org.junit.Assert.assertNotNull(matrix33);
        org.junit.Assert.assertNotNull(matrix36);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 2 + "'", int37 == 2);
        org.junit.Assert.assertNotNull(matrix39);
        org.junit.Assert.assertTrue("'" + double40 + "' != '" + 10.0d + "'", double40 == 10.0d);
        org.junit.Assert.assertNotNull(matrix43);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 2 + "'", int44 == 2);
        org.junit.Assert.assertNotNull(matrix46);
        org.junit.Assert.assertNotNull(matrix47);
        org.junit.Assert.assertNotNull(matrix48);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(matrix51);
        org.junit.Assert.assertNotNull(matrix52);
        org.junit.Assert.assertNotNull(matrix54);
        org.junit.Assert.assertNotNull(matrix56);
        org.junit.Assert.assertNotNull(doubleArray59);
        org.junit.Assert.assertArrayEquals(doubleArray59, new double[] { 137.90576492663388d, (-1.0d) }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray60);
        org.junit.Assert.assertArrayEquals(doubleArray60, new double[] { (-24.931892522286255d), (-135.63701830716116d) }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray61);
        org.junit.Assert.assertArrayEquals(doubleArray61, new double[] { 137.90221361711127d, 1.4069397643877004d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray62);
        org.junit.Assert.assertArrayEquals(doubleArray62, new double[] { (-137.90576492663388d), (-1.0d) }, 1.0E-15);
    }

    @Test
    public void test1648() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1648");
        com.operations.Matrix.Matrix matrix2 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0, (double) 100L);
        boolean boolean3 = com.operations.Matrix.MatrixUtils.isSquare(matrix2);
        // The following exception was thrown during execution in test generation
        try {
            matrix2.setValue(35, 35, (double) 'a');
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: Index 35 out of bounds for length 2");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(matrix2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
    }

    @Test
    public void test1649() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1649");
        com.operations.Matrix.Matrix matrix4 = com.operations.Matrix.MatrixUtils.generateRandomMatrix(97, (int) 'a', 2, (int) (byte) 1);
        org.junit.Assert.assertNotNull(matrix4);
    }

    @Test
    public void test1650() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1650");
        com.operations.Matrix.Matrix matrix2 = com.operations.Matrix.MatrixTransformations.scale2D(1.414213562373095d, 36.40054944640259d);
        com.operations.Matrix.Matrix matrix3 = com.operations.Matrix.MatrixOperations.transpose(matrix2);
        com.operations.Matrix.Matrix matrix5 = com.operations.Matrix.MatrixOperations.scalarMultiply(matrix2, 1.414213562373095d);
        com.operations.Matrix.Matrix matrix7 = com.operations.Matrix.MatrixTransformations.rotate2D(100.00499987500625d);
        double[][] doubleArray8 = matrix7.getData();
        com.operations.Matrix.Matrix matrix9 = com.operations.Matrix.MatrixOperations.multiply(matrix2, matrix7);
        matrix7.print();
        org.junit.Assert.assertNotNull(matrix2);
        org.junit.Assert.assertNotNull(matrix3);
        org.junit.Assert.assertNotNull(matrix5);
        org.junit.Assert.assertNotNull(matrix7);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertNotNull(matrix9);
    }

    @Test
    public void test1651() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1651");
        com.operations.Matrix.Matrix matrix2 = com.operations.Matrix.MatrixTransformations.project2D((double) (byte) 100, 32.0d);
        boolean boolean3 = com.operations.Matrix.MatrixUtils.isSquare(matrix2);
        com.operations.Matrix.Matrix matrix4 = com.operations.Matrix.MatrixDecompositions.choleskyDecomposition(matrix2);
        com.operations.Matrix.Matrix matrix7 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0.0f, 350.0d);
        com.operations.Matrix.Matrix matrix10 = com.operations.Matrix.MatrixTransformations.project2D(0.0d, (double) 0);
        com.operations.Matrix.Matrix[] matrixArray11 = com.operations.Matrix.MatrixDecompositions.luDecomposition(matrix10);
        com.operations.Matrix.Matrix matrix14 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0L, (double) (byte) 10);
        int int15 = matrix14.getRows();
        com.operations.Matrix.Matrix matrix17 = com.operations.Matrix.MatrixOperations.scalarMultiply(matrix14, (double) 2);
        double double18 = com.operations.Matrix.MatrixUtils.frobeniusNorm(matrix14);
        int int19 = matrix14.getRows();
        com.operations.Matrix.Matrix matrix20 = com.operations.Matrix.MatrixOperations.transpose(matrix14);
        com.operations.Matrix.Matrix matrix21 = com.operations.Matrix.MatrixOperations.multiply(matrix10, matrix20);
        com.operations.Matrix.Matrix matrix22 = com.operations.Matrix.MatrixOperations.multiply(matrix7, matrix20);
        com.operations.Matrix.Matrix matrix23 = com.operations.Matrix.MatrixOperations.transpose(matrix22);
        com.operations.Matrix.Matrix matrix24 = com.operations.Matrix.MatrixOperations.add(matrix2, matrix23);
        boolean boolean25 = com.operations.Matrix.MatrixUtils.isSymmetric(matrix2);
        com.operations.Matrix.Matrix matrix31 = com.operations.Matrix.MatrixUtils.generateRandomMatrix((int) 'a', (int) (short) 0, (int) (short) 100, (int) (byte) 1, 1L);
        // The following exception was thrown during execution in test generation
        try {
            com.operations.Matrix.Matrix matrix32 = com.operations.Matrix.MatrixOperations.add(matrix2, matrix31);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Matrices must have the same dimensions for addition.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(matrix2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNotNull(matrix4);
        org.junit.Assert.assertNotNull(matrix7);
        org.junit.Assert.assertNotNull(matrix10);
        org.junit.Assert.assertNotNull(matrixArray11);
        org.junit.Assert.assertNotNull(matrix14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 2 + "'", int15 == 2);
        org.junit.Assert.assertNotNull(matrix17);
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 10.0d + "'", double18 == 10.0d);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 2 + "'", int19 == 2);
        org.junit.Assert.assertNotNull(matrix20);
        org.junit.Assert.assertNotNull(matrix21);
        org.junit.Assert.assertNotNull(matrix22);
        org.junit.Assert.assertNotNull(matrix23);
        org.junit.Assert.assertNotNull(matrix24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertNotNull(matrix31);
    }

    @Test
    public void test1652() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1652");
        com.operations.Matrix.Matrix matrix2 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0L, (double) (byte) 10);
        double[] doubleArray5 = new double[] { 10, 'a' };
        double[] doubleArray8 = new double[] { 10, 'a' };
        double[][] doubleArray9 = new double[][] { doubleArray5, doubleArray8 };
        com.operations.Matrix.Matrix matrix10 = new com.operations.Matrix.Matrix(doubleArray9);
        int int11 = matrix10.getCols();
        int int12 = matrix10.getCols();
        int int13 = matrix10.getCols();
        com.operations.Matrix.Matrix[] matrixArray14 = com.operations.Matrix.MatrixDecompositions.luDecomposition(matrix10);
        com.operations.Matrix.Matrix matrix15 = com.operations.Matrix.MatrixOperations.multiply(matrix2, matrix10);
        com.operations.Matrix.Matrix matrix17 = com.operations.Matrix.MatrixTransformations.rotate2D((double) (short) 100);
        boolean boolean19 = com.operations.Matrix.MatrixUtils.compare(matrix10, matrix17, (double) (byte) 0);
        double[] doubleArray22 = new double[] { 10, 'a' };
        double[] doubleArray25 = new double[] { 10, 'a' };
        double[][] doubleArray26 = new double[][] { doubleArray22, doubleArray25 };
        com.operations.Matrix.Matrix matrix27 = new com.operations.Matrix.Matrix(doubleArray26);
        com.operations.Matrix.Matrix matrix28 = new com.operations.Matrix.Matrix(doubleArray26);
        com.operations.Matrix.Matrix matrix29 = new com.operations.Matrix.Matrix(doubleArray26);
        boolean boolean31 = com.operations.Matrix.MatrixUtils.compare(matrix10, matrix29, (double) (-1));
        double[][] doubleArray32 = matrix29.getData();
        com.operations.Matrix.Matrix[] matrixArray33 = com.operations.Matrix.MatrixDecompositions.luDecomposition(matrix29);
        com.operations.Matrix.Matrix matrix34 = null;
        // The following exception was thrown during execution in test generation
        try {
            com.operations.Matrix.Matrix matrix35 = com.operations.Matrix.MatrixOperations.subtract(matrix29, matrix34);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot invoke \"com.operations.Matrix.Matrix.getRows()\" because \"b\" is null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(matrix2);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertArrayEquals(doubleArray5, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertArrayEquals(doubleArray8, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 2 + "'", int11 == 2);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 2 + "'", int12 == 2);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 2 + "'", int13 == 2);
        org.junit.Assert.assertNotNull(matrixArray14);
        org.junit.Assert.assertNotNull(matrix15);
        org.junit.Assert.assertNotNull(matrix17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertArrayEquals(doubleArray22, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertArrayEquals(doubleArray25, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertNotNull(matrixArray33);
    }

    @Test
    public void test1653() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1653");
        com.operations.Matrix.Matrix matrix2 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0L, (double) (byte) 10);
        int int3 = matrix2.getRows();
        com.operations.Matrix.Matrix matrix9 = com.operations.Matrix.MatrixUtils.generateRandomMatrix(100, (int) (byte) 1, (int) '#', (int) '#', 1L);
        boolean boolean11 = com.operations.Matrix.MatrixUtils.compare(matrix2, matrix9, (double) 1.0f);
        int int12 = matrix2.getCols();
        com.operations.Matrix.Matrix matrix14 = com.operations.Matrix.MatrixTransformations.rotate2D((double) (short) 100);
        double[] doubleArray17 = new double[] { 137.90576492663388d, (byte) -1 };
        double[] doubleArray18 = com.operations.Matrix.MatrixSolver.solveGaussian(matrix14, doubleArray17);
        com.operations.Matrix.Matrix matrix21 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0L, (double) (byte) 10);
        double[] doubleArray24 = new double[] { 10, 'a' };
        double[] doubleArray27 = new double[] { 10, 'a' };
        double[][] doubleArray28 = new double[][] { doubleArray24, doubleArray27 };
        com.operations.Matrix.Matrix matrix29 = new com.operations.Matrix.Matrix(doubleArray28);
        int int30 = matrix29.getCols();
        int int31 = matrix29.getCols();
        int int32 = matrix29.getCols();
        com.operations.Matrix.Matrix[] matrixArray33 = com.operations.Matrix.MatrixDecompositions.luDecomposition(matrix29);
        com.operations.Matrix.Matrix matrix34 = com.operations.Matrix.MatrixOperations.multiply(matrix21, matrix29);
        boolean boolean36 = com.operations.Matrix.MatrixUtils.compare(matrix14, matrix21, (double) (-1L));
        boolean boolean38 = com.operations.Matrix.MatrixUtils.compare(matrix2, matrix14, (double) 'a');
        int int39 = matrix14.getCols();
        int int40 = matrix14.getRows();
        com.operations.Matrix.Matrix[] matrixArray41 = com.operations.Matrix.MatrixDecompositions.luDecomposition(matrix14);
        org.junit.Assert.assertNotNull(matrix2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 2 + "'", int3 == 2);
        org.junit.Assert.assertNotNull(matrix9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 2 + "'", int12 == 2);
        org.junit.Assert.assertNotNull(matrix14);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertArrayEquals(doubleArray17, new double[] { 137.90576492663388d, (-1.0d) }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertArrayEquals(doubleArray18, new double[] { (-24.931892522286255d), (-135.63701830716116d) }, 1.0E-15);
        org.junit.Assert.assertNotNull(matrix21);
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertArrayEquals(doubleArray24, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertArrayEquals(doubleArray27, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 2 + "'", int30 == 2);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 2 + "'", int31 == 2);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 2 + "'", int32 == 2);
        org.junit.Assert.assertNotNull(matrixArray33);
        org.junit.Assert.assertNotNull(matrix34);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 2 + "'", int39 == 2);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 2 + "'", int40 == 2);
        org.junit.Assert.assertNotNull(matrixArray41);
    }

    @Test
    public void test1654() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1654");
        com.operations.Matrix.Matrix matrix1 = com.operations.Matrix.MatrixTransformations.rotate2D(350.0d);
        com.operations.Matrix.Matrix matrix3 = com.operations.Matrix.MatrixTransformations.rotate2D((double) (short) 100);
        double[] doubleArray6 = new double[] { 137.90576492663388d, (byte) -1 };
        double[] doubleArray7 = com.operations.Matrix.MatrixSolver.solveGaussian(matrix3, doubleArray6);
        double[] doubleArray8 = com.operations.Matrix.MatrixSolver.solveGaussian(matrix1, doubleArray7);
        com.operations.Matrix.Matrix matrix11 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0L, (double) (byte) 10);
        double[] doubleArray14 = new double[] { 10, 'a' };
        double[] doubleArray17 = new double[] { 10, 'a' };
        double[][] doubleArray18 = new double[][] { doubleArray14, doubleArray17 };
        com.operations.Matrix.Matrix matrix19 = new com.operations.Matrix.Matrix(doubleArray18);
        int int20 = matrix19.getCols();
        int int21 = matrix19.getCols();
        int int22 = matrix19.getCols();
        com.operations.Matrix.Matrix[] matrixArray23 = com.operations.Matrix.MatrixDecompositions.luDecomposition(matrix19);
        com.operations.Matrix.Matrix matrix24 = com.operations.Matrix.MatrixOperations.multiply(matrix11, matrix19);
        com.operations.Matrix.Matrix matrix26 = com.operations.Matrix.MatrixTransformations.rotate2D((double) (short) 100);
        boolean boolean28 = com.operations.Matrix.MatrixUtils.compare(matrix19, matrix26, (double) (byte) 0);
        double[] doubleArray31 = new double[] { 10, 'a' };
        double[] doubleArray34 = new double[] { 10, 'a' };
        double[][] doubleArray35 = new double[][] { doubleArray31, doubleArray34 };
        com.operations.Matrix.Matrix matrix36 = new com.operations.Matrix.Matrix(doubleArray35);
        com.operations.Matrix.Matrix matrix37 = new com.operations.Matrix.Matrix(doubleArray35);
        com.operations.Matrix.Matrix matrix38 = new com.operations.Matrix.Matrix(doubleArray35);
        boolean boolean40 = com.operations.Matrix.MatrixUtils.compare(matrix19, matrix38, (double) (-1));
        double[] doubleArray43 = new double[] { 10, 'a' };
        double[] doubleArray46 = new double[] { 10, 'a' };
        double[][] doubleArray47 = new double[][] { doubleArray43, doubleArray46 };
        com.operations.Matrix.Matrix matrix48 = new com.operations.Matrix.Matrix(doubleArray47);
        com.operations.Matrix.Matrix matrix49 = new com.operations.Matrix.Matrix(doubleArray47);
        boolean boolean50 = com.operations.Matrix.MatrixUtils.isSquare(matrix49);
        com.operations.Matrix.Matrix matrix51 = com.operations.Matrix.MatrixOperations.multiply(matrix38, matrix49);
        double[][] doubleArray52 = matrix49.getData();
        com.operations.Matrix.Matrix matrix53 = new com.operations.Matrix.Matrix(doubleArray52);
        com.operations.Matrix.Matrix matrix54 = new com.operations.Matrix.Matrix(doubleArray52);
        boolean boolean55 = com.operations.Matrix.MatrixUtils.isSymmetric(matrix54);
        com.operations.Matrix.Matrix matrix56 = com.operations.Matrix.MatrixOperations.subtract(matrix1, matrix54);
        int int57 = matrix54.getRows();
        double[][] doubleArray58 = matrix54.getData();
        double double59 = com.operations.Matrix.MatrixUtils.frobeniusNorm(matrix54);
        org.junit.Assert.assertNotNull(matrix1);
        org.junit.Assert.assertNotNull(matrix3);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertArrayEquals(doubleArray6, new double[] { 137.90576492663388d, (-1.0d) }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertArrayEquals(doubleArray7, new double[] { (-24.931892522286255d), (-135.63701830716116d) }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertArrayEquals(doubleArray8, new double[] { (-0.9999999999999858d), (-137.90576492663388d) }, 1.0E-15);
        org.junit.Assert.assertNotNull(matrix11);
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertArrayEquals(doubleArray14, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertArrayEquals(doubleArray17, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 2 + "'", int20 == 2);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 2 + "'", int21 == 2);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 2 + "'", int22 == 2);
        org.junit.Assert.assertNotNull(matrixArray23);
        org.junit.Assert.assertNotNull(matrix24);
        org.junit.Assert.assertNotNull(matrix26);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertArrayEquals(doubleArray31, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertArrayEquals(doubleArray34, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertArrayEquals(doubleArray43, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray46);
        org.junit.Assert.assertArrayEquals(doubleArray46, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
        org.junit.Assert.assertNotNull(matrix51);
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNotNull(matrix56);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 2 + "'", int57 == 2);
        org.junit.Assert.assertNotNull(doubleArray58);
        org.junit.Assert.assertTrue("'" + double59 + "' != '" + 137.90576492663388d + "'", double59 == 137.90576492663388d);
    }

    @Test
    public void test1655() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1655");
        com.operations.Matrix.Matrix matrix2 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0.0f, (double) (-1));
        com.operations.Matrix.Matrix matrix5 = com.operations.Matrix.MatrixTransformations.scale2D(146.4308710620817d, (double) 10L);
        com.operations.Matrix.Matrix matrix6 = com.operations.Matrix.MatrixOperations.multiply(matrix2, matrix5);
        double double9 = matrix2.getValue((int) (short) 0, (int) (byte) 1);
        double double10 = com.operations.Matrix.MatrixUtils.frobeniusNorm(matrix2);
        com.operations.Matrix.Matrix matrix13 = com.operations.Matrix.MatrixTransformations.project2D((double) ' ', 0.0d);
        double[] doubleArray16 = new double[] { 10, 'a' };
        double[] doubleArray19 = new double[] { 10, 'a' };
        double[][] doubleArray20 = new double[][] { doubleArray16, doubleArray19 };
        com.operations.Matrix.Matrix matrix21 = new com.operations.Matrix.Matrix(doubleArray20);
        int int22 = matrix21.getCols();
        boolean boolean23 = com.operations.Matrix.MatrixUtils.isSquare(matrix21);
        com.operations.Matrix.Matrix matrix24 = com.operations.Matrix.MatrixOperations.transpose(matrix21);
        int int25 = matrix24.getRows();
        com.operations.Matrix.Matrix matrix28 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0L, (double) (byte) 10);
        double[] doubleArray31 = new double[] { 10, 'a' };
        double[] doubleArray34 = new double[] { 10, 'a' };
        double[][] doubleArray35 = new double[][] { doubleArray31, doubleArray34 };
        com.operations.Matrix.Matrix matrix36 = new com.operations.Matrix.Matrix(doubleArray35);
        int int37 = matrix36.getCols();
        int int38 = matrix36.getCols();
        int int39 = matrix36.getCols();
        com.operations.Matrix.Matrix[] matrixArray40 = com.operations.Matrix.MatrixDecompositions.luDecomposition(matrix36);
        com.operations.Matrix.Matrix matrix41 = com.operations.Matrix.MatrixOperations.multiply(matrix28, matrix36);
        com.operations.Matrix.Matrix matrix43 = com.operations.Matrix.MatrixTransformations.rotate2D((double) (short) 100);
        boolean boolean45 = com.operations.Matrix.MatrixUtils.compare(matrix36, matrix43, (double) (byte) 0);
        com.operations.Matrix.Matrix matrix46 = com.operations.Matrix.MatrixOperations.multiply(matrix24, matrix36);
        com.operations.Matrix.Matrix matrix47 = com.operations.Matrix.MatrixOperations.add(matrix13, matrix36);
        com.operations.Matrix.Matrix matrix48 = com.operations.Matrix.MatrixOperations.transpose(matrix13);
        com.operations.Matrix.Matrix matrix51 = com.operations.Matrix.MatrixTransformations.scale2D((double) (byte) 100, 350.0d);
        double double52 = com.operations.Matrix.MatrixUtils.frobeniusNorm(matrix51);
        int int53 = matrix51.getCols();
        com.operations.Matrix.Matrix matrix54 = com.operations.Matrix.MatrixOperations.multiply(matrix13, matrix51);
        com.operations.Matrix.Matrix matrix57 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0L, (double) (byte) 10);
        int int58 = matrix57.getRows();
        com.operations.Matrix.Matrix matrix60 = com.operations.Matrix.MatrixOperations.scalarMultiply(matrix57, (double) 2);
        double double61 = com.operations.Matrix.MatrixUtils.frobeniusNorm(matrix57);
        int int62 = matrix57.getRows();
        com.operations.Matrix.Matrix matrix63 = com.operations.Matrix.MatrixOperations.transpose(matrix57);
        com.operations.Matrix.Matrix matrix64 = com.operations.Matrix.MatrixOperations.add(matrix54, matrix63);
        com.operations.Matrix.Matrix matrix65 = com.operations.Matrix.MatrixOperations.subtract(matrix2, matrix64);
        java.lang.Class<?> wildcardClass66 = matrix65.getClass();
        org.junit.Assert.assertNotNull(matrix2);
        org.junit.Assert.assertNotNull(matrix5);
        org.junit.Assert.assertNotNull(matrix6);
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 0.0d + "'", double9 == 0.0d);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 1.0d + "'", double10 == 1.0d);
        org.junit.Assert.assertNotNull(matrix13);
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertArrayEquals(doubleArray16, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertArrayEquals(doubleArray19, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 2 + "'", int22 == 2);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertNotNull(matrix24);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 2 + "'", int25 == 2);
        org.junit.Assert.assertNotNull(matrix28);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertArrayEquals(doubleArray31, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertArrayEquals(doubleArray34, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 2 + "'", int37 == 2);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 2 + "'", int38 == 2);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 2 + "'", int39 == 2);
        org.junit.Assert.assertNotNull(matrixArray40);
        org.junit.Assert.assertNotNull(matrix41);
        org.junit.Assert.assertNotNull(matrix43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(matrix46);
        org.junit.Assert.assertNotNull(matrix47);
        org.junit.Assert.assertNotNull(matrix48);
        org.junit.Assert.assertNotNull(matrix51);
        org.junit.Assert.assertTrue("'" + double52 + "' != '" + 364.0054944640259d + "'", double52 == 364.0054944640259d);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 2 + "'", int53 == 2);
        org.junit.Assert.assertNotNull(matrix54);
        org.junit.Assert.assertNotNull(matrix57);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 2 + "'", int58 == 2);
        org.junit.Assert.assertNotNull(matrix60);
        org.junit.Assert.assertTrue("'" + double61 + "' != '" + 10.0d + "'", double61 == 10.0d);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 2 + "'", int62 == 2);
        org.junit.Assert.assertNotNull(matrix63);
        org.junit.Assert.assertNotNull(matrix64);
        org.junit.Assert.assertNotNull(matrix65);
        org.junit.Assert.assertNotNull(wildcardClass66);
    }

    @Test
    public void test1656() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1656");
        com.operations.Matrix.Matrix matrix2 = com.operations.Matrix.MatrixTransformations.scale2D(30.0d, 641.7761389614766d);
        boolean boolean3 = com.operations.Matrix.MatrixUtils.isSquare(matrix2);
        org.junit.Assert.assertNotNull(matrix2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
    }

    @Test
    public void test1657() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1657");
        // The following exception was thrown during execution in test generation
        try {
            com.operations.Matrix.Matrix matrix4 = com.operations.Matrix.MatrixUtils.generateRandomMatrix(2, (-1), (int) ' ', 10);
            org.junit.Assert.fail("Expected exception of type java.lang.NegativeArraySizeException; message: -1");
        } catch (java.lang.NegativeArraySizeException e) {
            // Expected exception.
        }
    }

    @Test
    public void test1658() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1658");
        com.operations.Matrix.Matrix matrix2 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0L, (double) (byte) 10);
        double[] doubleArray5 = new double[] { 10, 'a' };
        double[] doubleArray8 = new double[] { 10, 'a' };
        double[][] doubleArray9 = new double[][] { doubleArray5, doubleArray8 };
        com.operations.Matrix.Matrix matrix10 = new com.operations.Matrix.Matrix(doubleArray9);
        int int11 = matrix10.getCols();
        int int12 = matrix10.getCols();
        int int13 = matrix10.getCols();
        com.operations.Matrix.Matrix[] matrixArray14 = com.operations.Matrix.MatrixDecompositions.luDecomposition(matrix10);
        com.operations.Matrix.Matrix matrix15 = com.operations.Matrix.MatrixOperations.multiply(matrix2, matrix10);
        com.operations.Matrix.Matrix matrix17 = com.operations.Matrix.MatrixTransformations.rotate2D((double) (short) 100);
        boolean boolean19 = com.operations.Matrix.MatrixUtils.compare(matrix10, matrix17, (double) (byte) 0);
        double[] doubleArray22 = new double[] { 10, 'a' };
        double[] doubleArray25 = new double[] { 10, 'a' };
        double[][] doubleArray26 = new double[][] { doubleArray22, doubleArray25 };
        com.operations.Matrix.Matrix matrix27 = new com.operations.Matrix.Matrix(doubleArray26);
        com.operations.Matrix.Matrix matrix28 = new com.operations.Matrix.Matrix(doubleArray26);
        com.operations.Matrix.Matrix matrix29 = new com.operations.Matrix.Matrix(doubleArray26);
        boolean boolean31 = com.operations.Matrix.MatrixUtils.compare(matrix10, matrix29, (double) (-1));
        double double32 = com.operations.Matrix.MatrixUtils.frobeniusNorm(matrix10);
        com.operations.Matrix.Matrix matrix34 = com.operations.Matrix.MatrixOperations.scalarMultiply(matrix10, (double) '#');
        matrix34.print();
        org.junit.Assert.assertNotNull(matrix2);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertArrayEquals(doubleArray5, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertArrayEquals(doubleArray8, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 2 + "'", int11 == 2);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 2 + "'", int12 == 2);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 2 + "'", int13 == 2);
        org.junit.Assert.assertNotNull(matrixArray14);
        org.junit.Assert.assertNotNull(matrix15);
        org.junit.Assert.assertNotNull(matrix17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertArrayEquals(doubleArray22, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertArrayEquals(doubleArray25, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + double32 + "' != '" + 137.90576492663388d + "'", double32 == 137.90576492663388d);
        org.junit.Assert.assertNotNull(matrix34);
    }

    @Test
    public void test1659() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1659");
        // The following exception was thrown during execution in test generation
        try {
            com.operations.Matrix.Matrix matrix2 = new com.operations.Matrix.Matrix((int) 'a', (int) (byte) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.NegativeArraySizeException; message: -1");
        } catch (java.lang.NegativeArraySizeException e) {
            // Expected exception.
        }
    }

    @Test
    public void test1660() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1660");
        com.operations.Matrix.Matrix matrix2 = com.operations.Matrix.MatrixTransformations.project2D(36.40054944640259d, 626.0990336999411d);
        org.junit.Assert.assertNotNull(matrix2);
    }

    @Test
    public void test1661() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1661");
        com.operations.Matrix.Matrix matrix2 = com.operations.Matrix.MatrixTransformations.scale2D((double) '4', 975.1410154434076d);
        com.operations.Matrix.Matrix matrix3 = com.operations.Matrix.MatrixDecompositions.choleskyDecomposition(matrix2);
        com.operations.Matrix.Matrix matrix5 = com.operations.Matrix.MatrixOperations.scalarMultiply(matrix3, 1.414213562373095d);
        double[] doubleArray8 = new double[] { 10, 'a' };
        double[] doubleArray11 = new double[] { 10, 'a' };
        double[][] doubleArray12 = new double[][] { doubleArray8, doubleArray11 };
        com.operations.Matrix.Matrix matrix13 = new com.operations.Matrix.Matrix(doubleArray12);
        int int14 = matrix13.getCols();
        int int15 = matrix13.getCols();
        int int16 = matrix13.getCols();
        com.operations.Matrix.Matrix matrix22 = com.operations.Matrix.MatrixUtils.generateRandomMatrix(100, (int) (byte) 1, (int) '#', (int) '#', 1L);
        double double25 = matrix22.getValue((int) '4', 0);
        double double26 = com.operations.Matrix.MatrixUtils.frobeniusNorm(matrix22);
        boolean boolean27 = com.operations.Matrix.MatrixUtils.isSquare(matrix22);
        boolean boolean29 = com.operations.Matrix.MatrixUtils.compare(matrix13, matrix22, (double) 100L);
        double[][] doubleArray30 = matrix13.getData();
        double double31 = com.operations.Matrix.MatrixUtils.frobeniusNorm(matrix13);
        boolean boolean33 = com.operations.Matrix.MatrixUtils.compare(matrix5, matrix13, (double) 10L);
        org.junit.Assert.assertNotNull(matrix2);
        org.junit.Assert.assertNotNull(matrix3);
        org.junit.Assert.assertNotNull(matrix5);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertArrayEquals(doubleArray8, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertArrayEquals(doubleArray11, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 2 + "'", int14 == 2);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 2 + "'", int15 == 2);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 2 + "'", int16 == 2);
        org.junit.Assert.assertNotNull(matrix22);
        org.junit.Assert.assertTrue("'" + double25 + "' != '" + 35.0d + "'", double25 == 35.0d);
        org.junit.Assert.assertTrue("'" + double26 + "' != '" + 350.0d + "'", double26 == 350.0d);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertTrue("'" + double31 + "' != '" + 137.90576492663388d + "'", double31 == 137.90576492663388d);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
    }

    @Test
    public void test1662() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1662");
        com.operations.Matrix.Matrix matrix2 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0L, (double) (byte) 10);
        double[] doubleArray5 = new double[] { 10, 'a' };
        double[] doubleArray8 = new double[] { 10, 'a' };
        double[][] doubleArray9 = new double[][] { doubleArray5, doubleArray8 };
        com.operations.Matrix.Matrix matrix10 = new com.operations.Matrix.Matrix(doubleArray9);
        int int11 = matrix10.getCols();
        int int12 = matrix10.getCols();
        int int13 = matrix10.getCols();
        com.operations.Matrix.Matrix[] matrixArray14 = com.operations.Matrix.MatrixDecompositions.luDecomposition(matrix10);
        com.operations.Matrix.Matrix matrix15 = com.operations.Matrix.MatrixOperations.multiply(matrix2, matrix10);
        int int16 = matrix10.getRows();
        int int17 = matrix10.getCols();
        double[][] doubleArray18 = matrix10.getData();
        double double19 = com.operations.Matrix.MatrixUtils.frobeniusNorm(matrix10);
        int int20 = matrix10.getCols();
        java.lang.Class<?> wildcardClass21 = matrix10.getClass();
        org.junit.Assert.assertNotNull(matrix2);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertArrayEquals(doubleArray5, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertArrayEquals(doubleArray8, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 2 + "'", int11 == 2);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 2 + "'", int12 == 2);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 2 + "'", int13 == 2);
        org.junit.Assert.assertNotNull(matrixArray14);
        org.junit.Assert.assertNotNull(matrix15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 2 + "'", int16 == 2);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 2 + "'", int17 == 2);
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 137.90576492663388d + "'", double19 == 137.90576492663388d);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 2 + "'", int20 == 2);
        org.junit.Assert.assertNotNull(wildcardClass21);
    }

    @Test
    public void test1663() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1663");
        com.operations.Matrix.Matrix matrix2 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0L, (double) (byte) 10);
        double[] doubleArray5 = new double[] { 10, 'a' };
        double[] doubleArray8 = new double[] { 10, 'a' };
        double[][] doubleArray9 = new double[][] { doubleArray5, doubleArray8 };
        com.operations.Matrix.Matrix matrix10 = new com.operations.Matrix.Matrix(doubleArray9);
        int int11 = matrix10.getCols();
        int int12 = matrix10.getCols();
        int int13 = matrix10.getCols();
        com.operations.Matrix.Matrix[] matrixArray14 = com.operations.Matrix.MatrixDecompositions.luDecomposition(matrix10);
        com.operations.Matrix.Matrix matrix15 = com.operations.Matrix.MatrixOperations.multiply(matrix2, matrix10);
        com.operations.Matrix.Matrix matrix17 = com.operations.Matrix.MatrixTransformations.rotate2D((double) (short) 100);
        boolean boolean19 = com.operations.Matrix.MatrixUtils.compare(matrix10, matrix17, (double) (byte) 0);
        double[] doubleArray22 = new double[] { 10, 'a' };
        double[] doubleArray25 = new double[] { 10, 'a' };
        double[][] doubleArray26 = new double[][] { doubleArray22, doubleArray25 };
        com.operations.Matrix.Matrix matrix27 = new com.operations.Matrix.Matrix(doubleArray26);
        com.operations.Matrix.Matrix matrix28 = new com.operations.Matrix.Matrix(doubleArray26);
        com.operations.Matrix.Matrix matrix29 = new com.operations.Matrix.Matrix(doubleArray26);
        boolean boolean31 = com.operations.Matrix.MatrixUtils.compare(matrix10, matrix29, (double) (-1));
        double[] doubleArray34 = new double[] { 10, 'a' };
        double[] doubleArray37 = new double[] { 10, 'a' };
        double[][] doubleArray38 = new double[][] { doubleArray34, doubleArray37 };
        com.operations.Matrix.Matrix matrix39 = new com.operations.Matrix.Matrix(doubleArray38);
        com.operations.Matrix.Matrix matrix40 = new com.operations.Matrix.Matrix(doubleArray38);
        boolean boolean41 = com.operations.Matrix.MatrixUtils.isSquare(matrix40);
        com.operations.Matrix.Matrix matrix42 = com.operations.Matrix.MatrixOperations.multiply(matrix29, matrix40);
        double[][] doubleArray43 = matrix40.getData();
        com.operations.Matrix.Matrix matrix44 = new com.operations.Matrix.Matrix(doubleArray43);
        com.operations.Matrix.Matrix matrix45 = com.operations.Matrix.MatrixOperations.transpose(matrix44);
        boolean boolean46 = com.operations.Matrix.MatrixUtils.isSymmetric(matrix44);
        com.operations.Matrix.Matrix matrix48 = com.operations.Matrix.MatrixOperations.scalarMultiply(matrix44, (double) 2);
        double[] doubleArray51 = new double[] { 10, 'a' };
        double[] doubleArray54 = new double[] { 10, 'a' };
        double[][] doubleArray55 = new double[][] { doubleArray51, doubleArray54 };
        com.operations.Matrix.Matrix matrix56 = new com.operations.Matrix.Matrix(doubleArray55);
        com.operations.Matrix.Matrix matrix57 = new com.operations.Matrix.Matrix(doubleArray55);
        com.operations.Matrix.Matrix[] matrixArray58 = com.operations.Matrix.MatrixDecompositions.luDecomposition(matrix57);
        com.operations.Matrix.Matrix matrix61 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0, (double) 100L);
        com.operations.Matrix.Matrix matrix62 = com.operations.Matrix.MatrixOperations.subtract(matrix57, matrix61);
        com.operations.Matrix.Matrix matrix63 = com.operations.Matrix.MatrixOperations.multiply(matrix44, matrix61);
        com.operations.Matrix.Matrix matrix65 = com.operations.Matrix.MatrixOperations.scalarMultiply(matrix63, (double) 0.0f);
        boolean boolean66 = com.operations.Matrix.MatrixUtils.isSquare(matrix63);
        org.junit.Assert.assertNotNull(matrix2);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertArrayEquals(doubleArray5, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertArrayEquals(doubleArray8, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 2 + "'", int11 == 2);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 2 + "'", int12 == 2);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 2 + "'", int13 == 2);
        org.junit.Assert.assertNotNull(matrixArray14);
        org.junit.Assert.assertNotNull(matrix15);
        org.junit.Assert.assertNotNull(matrix17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertArrayEquals(doubleArray22, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertArrayEquals(doubleArray25, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertArrayEquals(doubleArray34, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertArrayEquals(doubleArray37, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertNotNull(matrix42);
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertNotNull(matrix45);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(matrix48);
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertArrayEquals(doubleArray51, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray54);
        org.junit.Assert.assertArrayEquals(doubleArray54, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertNotNull(matrixArray58);
        org.junit.Assert.assertNotNull(matrix61);
        org.junit.Assert.assertNotNull(matrix62);
        org.junit.Assert.assertNotNull(matrix63);
        org.junit.Assert.assertNotNull(matrix65);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + true + "'", boolean66 == true);
    }

    @Test
    public void test1664() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1664");
        com.operations.Matrix.Matrix matrix4 = com.operations.Matrix.MatrixUtils.generateRandomMatrix((int) (short) 1, 0, (int) (byte) 10, 10);
        // The following exception was thrown during execution in test generation
        try {
            com.operations.Matrix.Matrix matrix5 = com.operations.Matrix.MatrixDecompositions.choleskyDecomposition(matrix4);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Matrix must be square for Cholesky decomposition.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(matrix4);
    }

    @Test
    public void test1665() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1665");
        double[] doubleArray2 = new double[] { 10, 'a' };
        double[] doubleArray5 = new double[] { 10, 'a' };
        double[][] doubleArray6 = new double[][] { doubleArray2, doubleArray5 };
        com.operations.Matrix.Matrix matrix7 = new com.operations.Matrix.Matrix(doubleArray6);
        int int8 = matrix7.getCols();
        int int9 = matrix7.getCols();
        int int10 = matrix7.getCols();
        com.operations.Matrix.Matrix matrix12 = com.operations.Matrix.MatrixOperations.scalarMultiply(matrix7, (double) 0.0f);
        double[][] doubleArray13 = matrix12.getData();
        com.operations.Matrix.Matrix matrix14 = new com.operations.Matrix.Matrix(doubleArray13);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertArrayEquals(doubleArray2, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertArrayEquals(doubleArray5, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 2 + "'", int8 == 2);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 2 + "'", int9 == 2);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 2 + "'", int10 == 2);
        org.junit.Assert.assertNotNull(matrix12);
        org.junit.Assert.assertNotNull(doubleArray13);
    }

    @Test
    public void test1666() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1666");
        com.operations.Matrix.Matrix matrix1 = com.operations.Matrix.MatrixTransformations.rotate2D((double) 1.0f);
        com.operations.Matrix.Matrix matrix4 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0L, (double) (byte) 10);
        int int5 = matrix4.getRows();
        com.operations.Matrix.Matrix matrix7 = com.operations.Matrix.MatrixOperations.scalarMultiply(matrix4, (double) 2);
        double double8 = com.operations.Matrix.MatrixUtils.frobeniusNorm(matrix4);
        com.operations.Matrix.Matrix matrix11 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0L, (double) (byte) 10);
        int int12 = matrix11.getRows();
        com.operations.Matrix.Matrix matrix14 = com.operations.Matrix.MatrixOperations.scalarMultiply(matrix11, (double) 2);
        com.operations.Matrix.Matrix matrix15 = com.operations.Matrix.MatrixOperations.subtract(matrix4, matrix14);
        com.operations.Matrix.Matrix matrix16 = com.operations.Matrix.MatrixOperations.add(matrix1, matrix14);
        com.operations.Matrix.Matrix[] matrixArray17 = com.operations.Matrix.MatrixDecompositions.luDecomposition(matrix14);
        boolean boolean18 = com.operations.Matrix.MatrixUtils.isSquare(matrix14);
        com.operations.Matrix.Matrix matrix19 = com.operations.Matrix.MatrixOperations.transpose(matrix14);
        com.operations.Matrix.Matrix matrix21 = com.operations.Matrix.MatrixOperations.scalarMultiply(matrix14, (double) ' ');
        com.operations.Matrix.Matrix matrix24 = com.operations.Matrix.MatrixTransformations.project2D(0.0d, (double) 0);
        double[][] doubleArray25 = matrix24.getData();
        com.operations.Matrix.Matrix matrix26 = new com.operations.Matrix.Matrix(doubleArray25);
        com.operations.Matrix.Matrix matrix27 = new com.operations.Matrix.Matrix(doubleArray25);
        com.operations.Matrix.Matrix matrix28 = com.operations.Matrix.MatrixOperations.multiply(matrix14, matrix27);
        com.operations.Matrix.Matrix matrix29 = com.operations.Matrix.MatrixOperations.transpose(matrix14);
        double[][] doubleArray30 = matrix14.getData();
        org.junit.Assert.assertNotNull(matrix1);
        org.junit.Assert.assertNotNull(matrix4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 2 + "'", int5 == 2);
        org.junit.Assert.assertNotNull(matrix7);
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 10.0d + "'", double8 == 10.0d);
        org.junit.Assert.assertNotNull(matrix11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 2 + "'", int12 == 2);
        org.junit.Assert.assertNotNull(matrix14);
        org.junit.Assert.assertNotNull(matrix15);
        org.junit.Assert.assertNotNull(matrix16);
        org.junit.Assert.assertNotNull(matrixArray17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(matrix19);
        org.junit.Assert.assertNotNull(matrix21);
        org.junit.Assert.assertNotNull(matrix24);
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertNotNull(matrix28);
        org.junit.Assert.assertNotNull(matrix29);
        org.junit.Assert.assertNotNull(doubleArray30);
    }

    @Test
    public void test1667() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1667");
        com.operations.Matrix.Matrix matrix2 = com.operations.Matrix.MatrixTransformations.project2D((double) ' ', 0.0d);
        double[] doubleArray5 = new double[] { 10, 'a' };
        double[] doubleArray8 = new double[] { 10, 'a' };
        double[][] doubleArray9 = new double[][] { doubleArray5, doubleArray8 };
        com.operations.Matrix.Matrix matrix10 = new com.operations.Matrix.Matrix(doubleArray9);
        int int11 = matrix10.getCols();
        boolean boolean12 = com.operations.Matrix.MatrixUtils.isSquare(matrix10);
        com.operations.Matrix.Matrix matrix13 = com.operations.Matrix.MatrixOperations.transpose(matrix10);
        int int14 = matrix13.getRows();
        com.operations.Matrix.Matrix matrix17 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0L, (double) (byte) 10);
        double[] doubleArray20 = new double[] { 10, 'a' };
        double[] doubleArray23 = new double[] { 10, 'a' };
        double[][] doubleArray24 = new double[][] { doubleArray20, doubleArray23 };
        com.operations.Matrix.Matrix matrix25 = new com.operations.Matrix.Matrix(doubleArray24);
        int int26 = matrix25.getCols();
        int int27 = matrix25.getCols();
        int int28 = matrix25.getCols();
        com.operations.Matrix.Matrix[] matrixArray29 = com.operations.Matrix.MatrixDecompositions.luDecomposition(matrix25);
        com.operations.Matrix.Matrix matrix30 = com.operations.Matrix.MatrixOperations.multiply(matrix17, matrix25);
        com.operations.Matrix.Matrix matrix32 = com.operations.Matrix.MatrixTransformations.rotate2D((double) (short) 100);
        boolean boolean34 = com.operations.Matrix.MatrixUtils.compare(matrix25, matrix32, (double) (byte) 0);
        com.operations.Matrix.Matrix matrix35 = com.operations.Matrix.MatrixOperations.multiply(matrix13, matrix25);
        com.operations.Matrix.Matrix matrix36 = com.operations.Matrix.MatrixOperations.add(matrix2, matrix25);
        com.operations.Matrix.Matrix matrix37 = com.operations.Matrix.MatrixOperations.transpose(matrix2);
        // The following exception was thrown during execution in test generation
        try {
            double double40 = matrix37.getValue(1, 10);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(matrix2);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertArrayEquals(doubleArray5, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertArrayEquals(doubleArray8, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 2 + "'", int11 == 2);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(matrix13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 2 + "'", int14 == 2);
        org.junit.Assert.assertNotNull(matrix17);
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertArrayEquals(doubleArray20, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertArrayEquals(doubleArray23, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 2 + "'", int26 == 2);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 2 + "'", int27 == 2);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 2 + "'", int28 == 2);
        org.junit.Assert.assertNotNull(matrixArray29);
        org.junit.Assert.assertNotNull(matrix30);
        org.junit.Assert.assertNotNull(matrix32);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(matrix35);
        org.junit.Assert.assertNotNull(matrix36);
        org.junit.Assert.assertNotNull(matrix37);
    }

    @Test
    public void test1668() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1668");
        // The following exception was thrown during execution in test generation
        try {
            com.operations.Matrix.Matrix matrix4 = com.operations.Matrix.MatrixUtils.generateRandomMatrix(0, (int) (byte) 0, 2, 32);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
    }

    @Test
    public void test1669() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1669");
        // The following exception was thrown during execution in test generation
        try {
            com.operations.Matrix.Matrix matrix2 = new com.operations.Matrix.Matrix(52, (int) (short) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.NegativeArraySizeException; message: -1");
        } catch (java.lang.NegativeArraySizeException e) {
            // Expected exception.
        }
    }

    @Test
    public void test1670() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1670");
        com.operations.Matrix.Matrix matrix1 = com.operations.Matrix.MatrixTransformations.rotate2D((double) 1.0f);
        com.operations.Matrix.Matrix matrix4 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0L, (double) (byte) 10);
        int int5 = matrix4.getRows();
        com.operations.Matrix.Matrix matrix7 = com.operations.Matrix.MatrixOperations.scalarMultiply(matrix4, (double) 2);
        double double8 = com.operations.Matrix.MatrixUtils.frobeniusNorm(matrix4);
        com.operations.Matrix.Matrix matrix11 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0L, (double) (byte) 10);
        int int12 = matrix11.getRows();
        com.operations.Matrix.Matrix matrix14 = com.operations.Matrix.MatrixOperations.scalarMultiply(matrix11, (double) 2);
        com.operations.Matrix.Matrix matrix15 = com.operations.Matrix.MatrixOperations.subtract(matrix4, matrix14);
        com.operations.Matrix.Matrix matrix16 = com.operations.Matrix.MatrixOperations.add(matrix1, matrix14);
        int int17 = matrix14.getRows();
        org.junit.Assert.assertNotNull(matrix1);
        org.junit.Assert.assertNotNull(matrix4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 2 + "'", int5 == 2);
        org.junit.Assert.assertNotNull(matrix7);
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 10.0d + "'", double8 == 10.0d);
        org.junit.Assert.assertNotNull(matrix11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 2 + "'", int12 == 2);
        org.junit.Assert.assertNotNull(matrix14);
        org.junit.Assert.assertNotNull(matrix15);
        org.junit.Assert.assertNotNull(matrix16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 2 + "'", int17 == 2);
    }

    @Test
    public void test1671() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1671");
        com.operations.Matrix.Matrix matrix2 = com.operations.Matrix.MatrixTransformations.project2D(21.023651153076518d, 146781.22563870353d);
        com.operations.Matrix.Matrix matrix5 = new com.operations.Matrix.Matrix((int) (short) 0, (int) (short) 0);
        // The following exception was thrown during execution in test generation
        try {
            com.operations.Matrix.Matrix matrix6 = com.operations.Matrix.MatrixOperations.subtract(matrix2, matrix5);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Matrices must have the same dimensions for subtraction.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(matrix2);
    }

    @Test
    public void test1672() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1672");
        double[] doubleArray2 = new double[] { 10, 'a' };
        double[] doubleArray5 = new double[] { 10, 'a' };
        double[][] doubleArray6 = new double[][] { doubleArray2, doubleArray5 };
        com.operations.Matrix.Matrix matrix7 = new com.operations.Matrix.Matrix(doubleArray6);
        com.operations.Matrix.Matrix matrix8 = com.operations.Matrix.MatrixOperations.transpose(matrix7);
        com.operations.Matrix.Matrix matrix11 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0L, (double) (byte) 10);
        int int12 = matrix11.getRows();
        com.operations.Matrix.Matrix matrix18 = com.operations.Matrix.MatrixUtils.generateRandomMatrix(100, (int) (byte) 1, (int) '#', (int) '#', 1L);
        boolean boolean20 = com.operations.Matrix.MatrixUtils.compare(matrix11, matrix18, (double) 1.0f);
        com.operations.Matrix.Matrix matrix22 = com.operations.Matrix.MatrixOperations.scalarMultiply(matrix11, (double) 1L);
        matrix11.print();
        com.operations.Matrix.Matrix matrix24 = com.operations.Matrix.MatrixOperations.multiply(matrix8, matrix11);
        com.operations.Matrix.Matrix[] matrixArray25 = com.operations.Matrix.MatrixDecompositions.luDecomposition(matrix11);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertArrayEquals(doubleArray2, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertArrayEquals(doubleArray5, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertNotNull(matrix8);
        org.junit.Assert.assertNotNull(matrix11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 2 + "'", int12 == 2);
        org.junit.Assert.assertNotNull(matrix18);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(matrix22);
        org.junit.Assert.assertNotNull(matrix24);
        org.junit.Assert.assertNotNull(matrixArray25);
    }

    @Test
    public void test1673() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1673");
        com.operations.Matrix.Matrix matrix2 = com.operations.Matrix.MatrixTransformations.project2D((-1.0d), (double) 1L);
        double double3 = com.operations.Matrix.MatrixUtils.frobeniusNorm(matrix2);
        com.operations.Matrix.Matrix matrix6 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0L, (double) (byte) 10);
        double[] doubleArray9 = new double[] { 10, 'a' };
        double[] doubleArray12 = new double[] { 10, 'a' };
        double[][] doubleArray13 = new double[][] { doubleArray9, doubleArray12 };
        com.operations.Matrix.Matrix matrix14 = new com.operations.Matrix.Matrix(doubleArray13);
        int int15 = matrix14.getCols();
        int int16 = matrix14.getCols();
        int int17 = matrix14.getCols();
        com.operations.Matrix.Matrix[] matrixArray18 = com.operations.Matrix.MatrixDecompositions.luDecomposition(matrix14);
        com.operations.Matrix.Matrix matrix19 = com.operations.Matrix.MatrixOperations.multiply(matrix6, matrix14);
        com.operations.Matrix.Matrix matrix21 = com.operations.Matrix.MatrixTransformations.rotate2D((double) (short) 100);
        boolean boolean23 = com.operations.Matrix.MatrixUtils.compare(matrix14, matrix21, (double) (byte) 0);
        com.operations.Matrix.Matrix[] matrixArray24 = com.operations.Matrix.MatrixDecompositions.luDecomposition(matrix14);
        com.operations.Matrix.Matrix matrix25 = com.operations.Matrix.MatrixOperations.transpose(matrix14);
        com.operations.Matrix.Matrix matrix28 = com.operations.Matrix.MatrixTransformations.scale2D((double) 1.0f, (double) 1);
        com.operations.Matrix.Matrix matrix30 = com.operations.Matrix.MatrixTransformations.rotate2D((double) 1.0f);
        com.operations.Matrix.Matrix matrix33 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0L, (double) (byte) 10);
        int int34 = matrix33.getRows();
        com.operations.Matrix.Matrix matrix36 = com.operations.Matrix.MatrixOperations.scalarMultiply(matrix33, (double) 2);
        double double37 = com.operations.Matrix.MatrixUtils.frobeniusNorm(matrix33);
        com.operations.Matrix.Matrix matrix40 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0L, (double) (byte) 10);
        int int41 = matrix40.getRows();
        com.operations.Matrix.Matrix matrix43 = com.operations.Matrix.MatrixOperations.scalarMultiply(matrix40, (double) 2);
        com.operations.Matrix.Matrix matrix44 = com.operations.Matrix.MatrixOperations.subtract(matrix33, matrix43);
        com.operations.Matrix.Matrix matrix45 = com.operations.Matrix.MatrixOperations.add(matrix30, matrix43);
        boolean boolean47 = com.operations.Matrix.MatrixUtils.compare(matrix28, matrix30, (double) (byte) -1);
        com.operations.Matrix.Matrix matrix48 = com.operations.Matrix.MatrixOperations.subtract(matrix25, matrix28);
        com.operations.Matrix.Matrix matrix49 = com.operations.Matrix.MatrixOperations.multiply(matrix2, matrix28);
        // The following exception was thrown during execution in test generation
        try {
            double double52 = matrix28.getValue((-1), 32);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(matrix2);
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + 1.4142135623730951d + "'", double3 == 1.4142135623730951d);
        org.junit.Assert.assertNotNull(matrix6);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertArrayEquals(doubleArray9, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertArrayEquals(doubleArray12, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 2 + "'", int15 == 2);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 2 + "'", int16 == 2);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 2 + "'", int17 == 2);
        org.junit.Assert.assertNotNull(matrixArray18);
        org.junit.Assert.assertNotNull(matrix19);
        org.junit.Assert.assertNotNull(matrix21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(matrixArray24);
        org.junit.Assert.assertNotNull(matrix25);
        org.junit.Assert.assertNotNull(matrix28);
        org.junit.Assert.assertNotNull(matrix30);
        org.junit.Assert.assertNotNull(matrix33);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 2 + "'", int34 == 2);
        org.junit.Assert.assertNotNull(matrix36);
        org.junit.Assert.assertTrue("'" + double37 + "' != '" + 10.0d + "'", double37 == 10.0d);
        org.junit.Assert.assertNotNull(matrix40);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 2 + "'", int41 == 2);
        org.junit.Assert.assertNotNull(matrix43);
        org.junit.Assert.assertNotNull(matrix44);
        org.junit.Assert.assertNotNull(matrix45);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(matrix48);
        org.junit.Assert.assertNotNull(matrix49);
    }

    @Test
    public void test1674() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1674");
        com.operations.Matrix.Matrix matrix2 = new com.operations.Matrix.Matrix((int) (short) 0, 0);
        com.operations.Matrix.Matrix matrix5 = com.operations.Matrix.MatrixTransformations.project2D(3500.0d, 0.9998476951563913d);
        boolean boolean6 = com.operations.Matrix.MatrixUtils.isSymmetric(matrix5);
        com.operations.Matrix.Matrix matrix9 = com.operations.Matrix.MatrixTransformations.project2D((double) ' ', 36.40054944640259d);
        com.operations.Matrix.Matrix matrix11 = com.operations.Matrix.MatrixOperations.scalarMultiply(matrix9, (double) (byte) 1);
        com.operations.Matrix.Matrix matrix14 = com.operations.Matrix.MatrixTransformations.project2D(10.0d, 1.4142135623730951d);
        int int15 = matrix14.getRows();
        com.operations.Matrix.Matrix matrix18 = com.operations.Matrix.MatrixTransformations.project2D((double) (short) 100, 35.0d);
        com.operations.Matrix.Matrix matrix20 = com.operations.Matrix.MatrixTransformations.rotate2D((double) (-1L));
        com.operations.Matrix.Matrix matrix22 = com.operations.Matrix.MatrixTransformations.rotate2D((double) (short) 100);
        double[] doubleArray25 = new double[] { 137.90576492663388d, (byte) -1 };
        double[] doubleArray26 = com.operations.Matrix.MatrixSolver.solveGaussian(matrix22, doubleArray25);
        double[] doubleArray27 = com.operations.Matrix.MatrixSolver.solveGaussian(matrix20, doubleArray25);
        double[] doubleArray28 = com.operations.Matrix.MatrixSolver.solveGaussian(matrix18, doubleArray27);
        double[] doubleArray29 = com.operations.Matrix.MatrixSolver.solveGaussian(matrix14, doubleArray27);
        double[] doubleArray30 = com.operations.Matrix.MatrixSolver.solveGaussian(matrix11, doubleArray29);
        double[] doubleArray31 = com.operations.Matrix.MatrixSolver.solveGaussian(matrix5, doubleArray29);
        // The following exception was thrown during execution in test generation
        try {
            double[] doubleArray32 = com.operations.Matrix.MatrixSolver.solveGaussian(matrix2, doubleArray29);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Constant vector size must match matrix size.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(matrix5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(matrix9);
        org.junit.Assert.assertNotNull(matrix11);
        org.junit.Assert.assertNotNull(matrix14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 2 + "'", int15 == 2);
        org.junit.Assert.assertNotNull(matrix18);
        org.junit.Assert.assertNotNull(matrix20);
        org.junit.Assert.assertNotNull(matrix22);
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertArrayEquals(doubleArray25, new double[] { 137.90576492663388d, (-1.0d) }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertArrayEquals(doubleArray26, new double[] { (-24.931892522286255d), (-135.63701830716116d) }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertArrayEquals(doubleArray27, new double[] { 137.90221361711127d, 1.4069397643877004d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertArrayEquals(doubleArray28, new double[] { 1.3790221361711128d, 0.04019827898250573d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertArrayEquals(doubleArray29, new double[] { 13.790221361711128d, 0.9948566481195463d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertArrayEquals(doubleArray30, new double[] { 0.43094441755347274d, 0.02733081404676067d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertArrayEquals(doubleArray31, new double[] { 0.003940063246203179d, 0.9950081926867229d }, 1.0E-15);
    }

    @Test
    public void test1675() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1675");
        double[] doubleArray2 = new double[] { 10, 'a' };
        double[] doubleArray5 = new double[] { 10, 'a' };
        double[][] doubleArray6 = new double[][] { doubleArray2, doubleArray5 };
        com.operations.Matrix.Matrix matrix7 = new com.operations.Matrix.Matrix(doubleArray6);
        int int8 = matrix7.getCols();
        int int9 = matrix7.getCols();
        int int10 = matrix7.getCols();
        com.operations.Matrix.Matrix matrix16 = com.operations.Matrix.MatrixUtils.generateRandomMatrix(100, (int) (byte) 1, (int) '#', (int) '#', 1L);
        double double19 = matrix16.getValue((int) '4', 0);
        double double20 = com.operations.Matrix.MatrixUtils.frobeniusNorm(matrix16);
        boolean boolean21 = com.operations.Matrix.MatrixUtils.isSquare(matrix16);
        boolean boolean23 = com.operations.Matrix.MatrixUtils.compare(matrix7, matrix16, (double) 100L);
        com.operations.Matrix.Matrix matrix24 = com.operations.Matrix.MatrixDecompositions.choleskyDecomposition(matrix7);
        double[] doubleArray27 = new double[] { 10, 'a' };
        double[] doubleArray30 = new double[] { 10, 'a' };
        double[][] doubleArray31 = new double[][] { doubleArray27, doubleArray30 };
        com.operations.Matrix.Matrix matrix32 = new com.operations.Matrix.Matrix(doubleArray31);
        int int33 = matrix32.getCols();
        int int34 = matrix32.getCols();
        int int35 = matrix32.getCols();
        com.operations.Matrix.Matrix matrix37 = com.operations.Matrix.MatrixOperations.scalarMultiply(matrix32, (double) 0.0f);
        boolean boolean39 = com.operations.Matrix.MatrixUtils.compare(matrix24, matrix32, (double) '4');
        com.operations.Matrix.Matrix matrix42 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0L, (double) 10L);
        double[][] doubleArray43 = matrix42.getData();
        com.operations.Matrix.Matrix matrix44 = com.operations.Matrix.MatrixOperations.add(matrix32, matrix42);
        com.operations.Matrix.Matrix matrix46 = com.operations.Matrix.MatrixTransformations.rotate2D((double) '4');
        double[] doubleArray49 = new double[] { 10, 'a' };
        double[] doubleArray52 = new double[] { 10, 'a' };
        double[][] doubleArray53 = new double[][] { doubleArray49, doubleArray52 };
        com.operations.Matrix.Matrix matrix54 = new com.operations.Matrix.Matrix(doubleArray53);
        com.operations.Matrix.Matrix matrix55 = new com.operations.Matrix.Matrix(doubleArray53);
        com.operations.Matrix.Matrix matrix57 = com.operations.Matrix.MatrixTransformations.rotate2D((double) (short) 100);
        double[] doubleArray60 = new double[] { 137.90576492663388d, (byte) -1 };
        double[] doubleArray61 = com.operations.Matrix.MatrixSolver.solveGaussian(matrix57, doubleArray60);
        com.operations.Matrix.Matrix matrix62 = com.operations.Matrix.MatrixOperations.add(matrix55, matrix57);
        boolean boolean63 = com.operations.Matrix.MatrixUtils.isSymmetric(matrix62);
        boolean boolean65 = com.operations.Matrix.MatrixUtils.compare(matrix46, matrix62, 364.0054944640259d);
        com.operations.Matrix.Matrix matrix68 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0L, (double) (byte) 10);
        int int69 = matrix68.getRows();
        com.operations.Matrix.Matrix matrix71 = com.operations.Matrix.MatrixOperations.scalarMultiply(matrix68, (double) 2);
        matrix68.print();
        com.operations.Matrix.Matrix matrix73 = com.operations.Matrix.MatrixOperations.multiply(matrix62, matrix68);
        com.operations.Matrix.Matrix matrix74 = com.operations.Matrix.MatrixOperations.multiply(matrix42, matrix62);
        // The following exception was thrown during execution in test generation
        try {
            com.operations.Matrix.Matrix matrix75 = com.operations.Matrix.MatrixDecompositions.choleskyDecomposition(matrix74);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Matrix is not positive definite.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertArrayEquals(doubleArray2, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertArrayEquals(doubleArray5, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 2 + "'", int8 == 2);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 2 + "'", int9 == 2);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 2 + "'", int10 == 2);
        org.junit.Assert.assertNotNull(matrix16);
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 35.0d + "'", double19 == 35.0d);
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 350.0d + "'", double20 == 350.0d);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(matrix24);
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertArrayEquals(doubleArray27, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertArrayEquals(doubleArray30, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 2 + "'", int33 == 2);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 2 + "'", int34 == 2);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 2 + "'", int35 == 2);
        org.junit.Assert.assertNotNull(matrix37);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(matrix42);
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertNotNull(matrix44);
        org.junit.Assert.assertNotNull(matrix46);
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertArrayEquals(doubleArray49, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertArrayEquals(doubleArray52, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertNotNull(matrix57);
        org.junit.Assert.assertNotNull(doubleArray60);
        org.junit.Assert.assertArrayEquals(doubleArray60, new double[] { 137.90576492663388d, (-1.0d) }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray61);
        org.junit.Assert.assertArrayEquals(doubleArray61, new double[] { (-24.931892522286255d), (-135.63701830716116d) }, 1.0E-15);
        org.junit.Assert.assertNotNull(matrix62);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + true + "'", boolean65 == true);
        org.junit.Assert.assertNotNull(matrix68);
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 2 + "'", int69 == 2);
        org.junit.Assert.assertNotNull(matrix71);
        org.junit.Assert.assertNotNull(matrix73);
        org.junit.Assert.assertNotNull(matrix74);
    }

    @Test
    public void test1676() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1676");
        com.operations.Matrix.Matrix matrix2 = com.operations.Matrix.MatrixTransformations.project2D((double) ' ', 0.0d);
        double[] doubleArray5 = new double[] { 10, 'a' };
        double[] doubleArray8 = new double[] { 10, 'a' };
        double[][] doubleArray9 = new double[][] { doubleArray5, doubleArray8 };
        com.operations.Matrix.Matrix matrix10 = new com.operations.Matrix.Matrix(doubleArray9);
        int int11 = matrix10.getCols();
        boolean boolean12 = com.operations.Matrix.MatrixUtils.isSquare(matrix10);
        com.operations.Matrix.Matrix matrix13 = com.operations.Matrix.MatrixOperations.transpose(matrix10);
        int int14 = matrix13.getRows();
        com.operations.Matrix.Matrix matrix17 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0L, (double) (byte) 10);
        double[] doubleArray20 = new double[] { 10, 'a' };
        double[] doubleArray23 = new double[] { 10, 'a' };
        double[][] doubleArray24 = new double[][] { doubleArray20, doubleArray23 };
        com.operations.Matrix.Matrix matrix25 = new com.operations.Matrix.Matrix(doubleArray24);
        int int26 = matrix25.getCols();
        int int27 = matrix25.getCols();
        int int28 = matrix25.getCols();
        com.operations.Matrix.Matrix[] matrixArray29 = com.operations.Matrix.MatrixDecompositions.luDecomposition(matrix25);
        com.operations.Matrix.Matrix matrix30 = com.operations.Matrix.MatrixOperations.multiply(matrix17, matrix25);
        com.operations.Matrix.Matrix matrix32 = com.operations.Matrix.MatrixTransformations.rotate2D((double) (short) 100);
        boolean boolean34 = com.operations.Matrix.MatrixUtils.compare(matrix25, matrix32, (double) (byte) 0);
        com.operations.Matrix.Matrix matrix35 = com.operations.Matrix.MatrixOperations.multiply(matrix13, matrix25);
        com.operations.Matrix.Matrix matrix36 = com.operations.Matrix.MatrixOperations.add(matrix2, matrix25);
        matrix25.print();
        com.operations.Matrix.Matrix[] matrixArray38 = com.operations.Matrix.MatrixDecompositions.luDecomposition(matrix25);
        com.operations.Matrix.Matrix matrix39 = com.operations.Matrix.MatrixDecompositions.choleskyDecomposition(matrix25);
        org.junit.Assert.assertNotNull(matrix2);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertArrayEquals(doubleArray5, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertArrayEquals(doubleArray8, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 2 + "'", int11 == 2);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(matrix13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 2 + "'", int14 == 2);
        org.junit.Assert.assertNotNull(matrix17);
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertArrayEquals(doubleArray20, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertArrayEquals(doubleArray23, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 2 + "'", int26 == 2);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 2 + "'", int27 == 2);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 2 + "'", int28 == 2);
        org.junit.Assert.assertNotNull(matrixArray29);
        org.junit.Assert.assertNotNull(matrix30);
        org.junit.Assert.assertNotNull(matrix32);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(matrix35);
        org.junit.Assert.assertNotNull(matrix36);
        org.junit.Assert.assertNotNull(matrixArray38);
        org.junit.Assert.assertNotNull(matrix39);
    }

    @Test
    public void test1677() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1677");
        com.operations.Matrix.Matrix matrix2 = com.operations.Matrix.MatrixTransformations.scale2D((double) ' ', (double) 0L);
        double double3 = com.operations.Matrix.MatrixUtils.frobeniusNorm(matrix2);
        com.operations.Matrix.Matrix matrix5 = com.operations.Matrix.MatrixOperations.scalarMultiply(matrix2, 33.52610922848042d);
        org.junit.Assert.assertNotNull(matrix2);
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + 32.0d + "'", double3 == 32.0d);
        org.junit.Assert.assertNotNull(matrix5);
    }

    @Test
    public void test1678() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1678");
        com.operations.Matrix.Matrix matrix5 = com.operations.Matrix.MatrixUtils.generateRandomMatrix(100, (int) (byte) 1, (int) '#', (int) '#', 1L);
        double double8 = matrix5.getValue((int) '4', 0);
        double double9 = com.operations.Matrix.MatrixUtils.frobeniusNorm(matrix5);
        int int10 = matrix5.getCols();
        com.operations.Matrix.Matrix matrix12 = com.operations.Matrix.MatrixOperations.scalarMultiply(matrix5, (double) (short) 100);
        boolean boolean13 = com.operations.Matrix.MatrixUtils.isSymmetric(matrix12);
        // The following exception was thrown during execution in test generation
        try {
            matrix12.setValue(0, (-1), 693.7418269995209d);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: Index -1 out of bounds for length 1");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(matrix5);
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 35.0d + "'", double8 == 35.0d);
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 350.0d + "'", double9 == 350.0d);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1 + "'", int10 == 1);
        org.junit.Assert.assertNotNull(matrix12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
    }

    @Test
    public void test1679() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1679");
        com.operations.Matrix.Matrix matrix2 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0L, (double) (byte) 10);
        double[] doubleArray5 = new double[] { 10, 'a' };
        double[] doubleArray8 = new double[] { 10, 'a' };
        double[][] doubleArray9 = new double[][] { doubleArray5, doubleArray8 };
        com.operations.Matrix.Matrix matrix10 = new com.operations.Matrix.Matrix(doubleArray9);
        int int11 = matrix10.getCols();
        int int12 = matrix10.getCols();
        int int13 = matrix10.getCols();
        com.operations.Matrix.Matrix[] matrixArray14 = com.operations.Matrix.MatrixDecompositions.luDecomposition(matrix10);
        com.operations.Matrix.Matrix matrix15 = com.operations.Matrix.MatrixOperations.multiply(matrix2, matrix10);
        com.operations.Matrix.Matrix matrix17 = com.operations.Matrix.MatrixTransformations.rotate2D((double) (short) 100);
        boolean boolean19 = com.operations.Matrix.MatrixUtils.compare(matrix10, matrix17, (double) (byte) 0);
        com.operations.Matrix.Matrix[] matrixArray20 = com.operations.Matrix.MatrixDecompositions.luDecomposition(matrix10);
        com.operations.Matrix.Matrix matrix21 = com.operations.Matrix.MatrixOperations.transpose(matrix10);
        com.operations.Matrix.Matrix matrix24 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0L, (double) (byte) 10);
        int int25 = matrix24.getRows();
        com.operations.Matrix.Matrix matrix28 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0L, (double) (byte) 10);
        int int29 = matrix28.getRows();
        com.operations.Matrix.Matrix matrix31 = com.operations.Matrix.MatrixOperations.scalarMultiply(matrix28, (double) 2);
        com.operations.Matrix.Matrix matrix32 = com.operations.Matrix.MatrixOperations.subtract(matrix24, matrix28);
        boolean boolean34 = com.operations.Matrix.MatrixUtils.compare(matrix10, matrix24, (double) ' ');
        com.operations.Matrix.Matrix matrix37 = com.operations.Matrix.MatrixTransformations.project2D((double) ' ', 0.0d);
        double[] doubleArray40 = new double[] { 10, 'a' };
        double[] doubleArray43 = new double[] { 10, 'a' };
        double[][] doubleArray44 = new double[][] { doubleArray40, doubleArray43 };
        com.operations.Matrix.Matrix matrix45 = new com.operations.Matrix.Matrix(doubleArray44);
        int int46 = matrix45.getCols();
        boolean boolean47 = com.operations.Matrix.MatrixUtils.isSquare(matrix45);
        com.operations.Matrix.Matrix matrix48 = com.operations.Matrix.MatrixOperations.transpose(matrix45);
        int int49 = matrix48.getRows();
        com.operations.Matrix.Matrix matrix52 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0L, (double) (byte) 10);
        double[] doubleArray55 = new double[] { 10, 'a' };
        double[] doubleArray58 = new double[] { 10, 'a' };
        double[][] doubleArray59 = new double[][] { doubleArray55, doubleArray58 };
        com.operations.Matrix.Matrix matrix60 = new com.operations.Matrix.Matrix(doubleArray59);
        int int61 = matrix60.getCols();
        int int62 = matrix60.getCols();
        int int63 = matrix60.getCols();
        com.operations.Matrix.Matrix[] matrixArray64 = com.operations.Matrix.MatrixDecompositions.luDecomposition(matrix60);
        com.operations.Matrix.Matrix matrix65 = com.operations.Matrix.MatrixOperations.multiply(matrix52, matrix60);
        com.operations.Matrix.Matrix matrix67 = com.operations.Matrix.MatrixTransformations.rotate2D((double) (short) 100);
        boolean boolean69 = com.operations.Matrix.MatrixUtils.compare(matrix60, matrix67, (double) (byte) 0);
        com.operations.Matrix.Matrix matrix70 = com.operations.Matrix.MatrixOperations.multiply(matrix48, matrix60);
        com.operations.Matrix.Matrix matrix71 = com.operations.Matrix.MatrixOperations.add(matrix37, matrix60);
        com.operations.Matrix.Matrix matrix72 = com.operations.Matrix.MatrixOperations.transpose(matrix37);
        matrix37.print();
        com.operations.Matrix.Matrix matrix74 = com.operations.Matrix.MatrixOperations.add(matrix24, matrix37);
        int int75 = matrix37.getCols();
        org.junit.Assert.assertNotNull(matrix2);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertArrayEquals(doubleArray5, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertArrayEquals(doubleArray8, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 2 + "'", int11 == 2);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 2 + "'", int12 == 2);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 2 + "'", int13 == 2);
        org.junit.Assert.assertNotNull(matrixArray14);
        org.junit.Assert.assertNotNull(matrix15);
        org.junit.Assert.assertNotNull(matrix17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(matrixArray20);
        org.junit.Assert.assertNotNull(matrix21);
        org.junit.Assert.assertNotNull(matrix24);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 2 + "'", int25 == 2);
        org.junit.Assert.assertNotNull(matrix28);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 2 + "'", int29 == 2);
        org.junit.Assert.assertNotNull(matrix31);
        org.junit.Assert.assertNotNull(matrix32);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(matrix37);
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertArrayEquals(doubleArray40, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertArrayEquals(doubleArray43, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 2 + "'", int46 == 2);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        org.junit.Assert.assertNotNull(matrix48);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 2 + "'", int49 == 2);
        org.junit.Assert.assertNotNull(matrix52);
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertArrayEquals(doubleArray55, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray58);
        org.junit.Assert.assertArrayEquals(doubleArray58, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray59);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 2 + "'", int61 == 2);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 2 + "'", int62 == 2);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 2 + "'", int63 == 2);
        org.junit.Assert.assertNotNull(matrixArray64);
        org.junit.Assert.assertNotNull(matrix65);
        org.junit.Assert.assertNotNull(matrix67);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertNotNull(matrix70);
        org.junit.Assert.assertNotNull(matrix71);
        org.junit.Assert.assertNotNull(matrix72);
        org.junit.Assert.assertNotNull(matrix74);
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + 2 + "'", int75 == 2);
    }

    @Test
    public void test1680() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1680");
        com.operations.Matrix.Matrix matrix2 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0.0f, 350.0d);
        double[] doubleArray5 = new double[] { 10, 'a' };
        double[] doubleArray8 = new double[] { 10, 'a' };
        double[][] doubleArray9 = new double[][] { doubleArray5, doubleArray8 };
        com.operations.Matrix.Matrix matrix10 = new com.operations.Matrix.Matrix(doubleArray9);
        com.operations.Matrix.Matrix matrix11 = new com.operations.Matrix.Matrix(doubleArray9);
        boolean boolean12 = com.operations.Matrix.MatrixUtils.isSquare(matrix11);
        double[] doubleArray15 = new double[] { 10, 'a' };
        double[] doubleArray18 = new double[] { 10, 'a' };
        double[][] doubleArray19 = new double[][] { doubleArray15, doubleArray18 };
        com.operations.Matrix.Matrix matrix20 = new com.operations.Matrix.Matrix(doubleArray19);
        int int21 = matrix20.getCols();
        int int22 = matrix20.getCols();
        matrix20.print();
        double[] doubleArray26 = new double[] { 10, 'a' };
        double[] doubleArray29 = new double[] { 10, 'a' };
        double[][] doubleArray30 = new double[][] { doubleArray26, doubleArray29 };
        com.operations.Matrix.Matrix matrix31 = new com.operations.Matrix.Matrix(doubleArray30);
        boolean boolean33 = com.operations.Matrix.MatrixUtils.compare(matrix20, matrix31, (double) (-1));
        com.operations.Matrix.Matrix matrix34 = com.operations.Matrix.MatrixOperations.subtract(matrix11, matrix31);
        com.operations.Matrix.Matrix[] matrixArray35 = com.operations.Matrix.MatrixDecompositions.luDecomposition(matrix34);
        com.operations.Matrix.Matrix matrix37 = com.operations.Matrix.MatrixTransformations.rotate2D((double) 1.0f);
        com.operations.Matrix.Matrix matrix40 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0L, (double) (byte) 10);
        int int41 = matrix40.getRows();
        com.operations.Matrix.Matrix matrix43 = com.operations.Matrix.MatrixOperations.scalarMultiply(matrix40, (double) 2);
        double double44 = com.operations.Matrix.MatrixUtils.frobeniusNorm(matrix40);
        com.operations.Matrix.Matrix matrix47 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0L, (double) (byte) 10);
        int int48 = matrix47.getRows();
        com.operations.Matrix.Matrix matrix50 = com.operations.Matrix.MatrixOperations.scalarMultiply(matrix47, (double) 2);
        com.operations.Matrix.Matrix matrix51 = com.operations.Matrix.MatrixOperations.subtract(matrix40, matrix50);
        com.operations.Matrix.Matrix matrix52 = com.operations.Matrix.MatrixOperations.add(matrix37, matrix50);
        matrix37.print();
        double[] doubleArray56 = new double[] { 10, 'a' };
        double[] doubleArray59 = new double[] { 10, 'a' };
        double[][] doubleArray60 = new double[][] { doubleArray56, doubleArray59 };
        com.operations.Matrix.Matrix matrix61 = new com.operations.Matrix.Matrix(doubleArray60);
        com.operations.Matrix.Matrix matrix62 = com.operations.Matrix.MatrixOperations.transpose(matrix61);
        com.operations.Matrix.Matrix matrix65 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0L, (double) (byte) 10);
        int int66 = matrix65.getRows();
        com.operations.Matrix.Matrix matrix72 = com.operations.Matrix.MatrixUtils.generateRandomMatrix(100, (int) (byte) 1, (int) '#', (int) '#', 1L);
        boolean boolean74 = com.operations.Matrix.MatrixUtils.compare(matrix65, matrix72, (double) 1.0f);
        com.operations.Matrix.Matrix matrix76 = com.operations.Matrix.MatrixOperations.scalarMultiply(matrix65, (double) 1L);
        matrix65.print();
        com.operations.Matrix.Matrix matrix78 = com.operations.Matrix.MatrixOperations.multiply(matrix62, matrix65);
        com.operations.Matrix.Matrix matrix79 = com.operations.Matrix.MatrixOperations.multiply(matrix37, matrix65);
        boolean boolean81 = com.operations.Matrix.MatrixUtils.compare(matrix34, matrix79, (double) (byte) 0);
        com.operations.Matrix.Matrix matrix82 = com.operations.Matrix.MatrixOperations.multiply(matrix2, matrix79);
        // The following exception was thrown during execution in test generation
        try {
            matrix82.setValue(1, (int) (byte) -1, (double) (short) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: Index -1 out of bounds for length 2");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(matrix2);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertArrayEquals(doubleArray5, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertArrayEquals(doubleArray8, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertArrayEquals(doubleArray15, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertArrayEquals(doubleArray18, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 2 + "'", int21 == 2);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 2 + "'", int22 == 2);
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertArrayEquals(doubleArray26, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertArrayEquals(doubleArray29, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(matrix34);
        org.junit.Assert.assertNotNull(matrixArray35);
        org.junit.Assert.assertNotNull(matrix37);
        org.junit.Assert.assertNotNull(matrix40);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 2 + "'", int41 == 2);
        org.junit.Assert.assertNotNull(matrix43);
        org.junit.Assert.assertTrue("'" + double44 + "' != '" + 10.0d + "'", double44 == 10.0d);
        org.junit.Assert.assertNotNull(matrix47);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 2 + "'", int48 == 2);
        org.junit.Assert.assertNotNull(matrix50);
        org.junit.Assert.assertNotNull(matrix51);
        org.junit.Assert.assertNotNull(matrix52);
        org.junit.Assert.assertNotNull(doubleArray56);
        org.junit.Assert.assertArrayEquals(doubleArray56, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray59);
        org.junit.Assert.assertArrayEquals(doubleArray59, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray60);
        org.junit.Assert.assertNotNull(matrix62);
        org.junit.Assert.assertNotNull(matrix65);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 2 + "'", int66 == 2);
        org.junit.Assert.assertNotNull(matrix72);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertNotNull(matrix76);
        org.junit.Assert.assertNotNull(matrix78);
        org.junit.Assert.assertNotNull(matrix79);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
        org.junit.Assert.assertNotNull(matrix82);
    }

    @Test
    public void test1681() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1681");
        com.operations.Matrix.Matrix matrix2 = new com.operations.Matrix.Matrix(100, 100);
        int int3 = matrix2.getCols();
        com.operations.Matrix.Matrix matrix6 = com.operations.Matrix.MatrixTransformations.project2D(10.0d, (double) 1);
        double[][] doubleArray7 = matrix6.getData();
        boolean boolean9 = com.operations.Matrix.MatrixUtils.compare(matrix2, matrix6, (double) (byte) 1);
        com.operations.Matrix.Matrix matrix12 = com.operations.Matrix.MatrixTransformations.project2D((-1.0d), (double) 1L);
        double double13 = com.operations.Matrix.MatrixUtils.frobeniusNorm(matrix12);
        com.operations.Matrix.Matrix matrix16 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0L, (double) (byte) 10);
        double[] doubleArray19 = new double[] { 10, 'a' };
        double[] doubleArray22 = new double[] { 10, 'a' };
        double[][] doubleArray23 = new double[][] { doubleArray19, doubleArray22 };
        com.operations.Matrix.Matrix matrix24 = new com.operations.Matrix.Matrix(doubleArray23);
        int int25 = matrix24.getCols();
        int int26 = matrix24.getCols();
        int int27 = matrix24.getCols();
        com.operations.Matrix.Matrix[] matrixArray28 = com.operations.Matrix.MatrixDecompositions.luDecomposition(matrix24);
        com.operations.Matrix.Matrix matrix29 = com.operations.Matrix.MatrixOperations.multiply(matrix16, matrix24);
        com.operations.Matrix.Matrix matrix31 = com.operations.Matrix.MatrixTransformations.rotate2D((double) (short) 100);
        boolean boolean33 = com.operations.Matrix.MatrixUtils.compare(matrix24, matrix31, (double) (byte) 0);
        com.operations.Matrix.Matrix[] matrixArray34 = com.operations.Matrix.MatrixDecompositions.luDecomposition(matrix24);
        com.operations.Matrix.Matrix matrix35 = com.operations.Matrix.MatrixOperations.transpose(matrix24);
        com.operations.Matrix.Matrix matrix38 = com.operations.Matrix.MatrixTransformations.scale2D((double) 1.0f, (double) 1);
        com.operations.Matrix.Matrix matrix40 = com.operations.Matrix.MatrixTransformations.rotate2D((double) 1.0f);
        com.operations.Matrix.Matrix matrix43 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0L, (double) (byte) 10);
        int int44 = matrix43.getRows();
        com.operations.Matrix.Matrix matrix46 = com.operations.Matrix.MatrixOperations.scalarMultiply(matrix43, (double) 2);
        double double47 = com.operations.Matrix.MatrixUtils.frobeniusNorm(matrix43);
        com.operations.Matrix.Matrix matrix50 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0L, (double) (byte) 10);
        int int51 = matrix50.getRows();
        com.operations.Matrix.Matrix matrix53 = com.operations.Matrix.MatrixOperations.scalarMultiply(matrix50, (double) 2);
        com.operations.Matrix.Matrix matrix54 = com.operations.Matrix.MatrixOperations.subtract(matrix43, matrix53);
        com.operations.Matrix.Matrix matrix55 = com.operations.Matrix.MatrixOperations.add(matrix40, matrix53);
        boolean boolean57 = com.operations.Matrix.MatrixUtils.compare(matrix38, matrix40, (double) (byte) -1);
        com.operations.Matrix.Matrix matrix58 = com.operations.Matrix.MatrixOperations.subtract(matrix35, matrix38);
        com.operations.Matrix.Matrix matrix59 = com.operations.Matrix.MatrixOperations.multiply(matrix12, matrix38);
        com.operations.Matrix.Matrix matrix61 = com.operations.Matrix.MatrixTransformations.rotate2D((double) (-1L));
        com.operations.Matrix.Matrix matrix63 = com.operations.Matrix.MatrixTransformations.rotate2D((double) (short) 100);
        double[] doubleArray66 = new double[] { 137.90576492663388d, (byte) -1 };
        double[] doubleArray67 = com.operations.Matrix.MatrixSolver.solveGaussian(matrix63, doubleArray66);
        double[] doubleArray68 = com.operations.Matrix.MatrixSolver.solveGaussian(matrix61, doubleArray66);
        double[] doubleArray69 = com.operations.Matrix.MatrixSolver.solveGaussian(matrix59, doubleArray66);
        // The following exception was thrown during execution in test generation
        try {
            double[] doubleArray70 = com.operations.Matrix.MatrixSolver.solveGaussian(matrix2, doubleArray66);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Constant vector size must match matrix size.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 100 + "'", int3 == 100);
        org.junit.Assert.assertNotNull(matrix6);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(matrix12);
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 1.4142135623730951d + "'", double13 == 1.4142135623730951d);
        org.junit.Assert.assertNotNull(matrix16);
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertArrayEquals(doubleArray19, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertArrayEquals(doubleArray22, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 2 + "'", int25 == 2);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 2 + "'", int26 == 2);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 2 + "'", int27 == 2);
        org.junit.Assert.assertNotNull(matrixArray28);
        org.junit.Assert.assertNotNull(matrix29);
        org.junit.Assert.assertNotNull(matrix31);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(matrixArray34);
        org.junit.Assert.assertNotNull(matrix35);
        org.junit.Assert.assertNotNull(matrix38);
        org.junit.Assert.assertNotNull(matrix40);
        org.junit.Assert.assertNotNull(matrix43);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 2 + "'", int44 == 2);
        org.junit.Assert.assertNotNull(matrix46);
        org.junit.Assert.assertTrue("'" + double47 + "' != '" + 10.0d + "'", double47 == 10.0d);
        org.junit.Assert.assertNotNull(matrix50);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 2 + "'", int51 == 2);
        org.junit.Assert.assertNotNull(matrix53);
        org.junit.Assert.assertNotNull(matrix54);
        org.junit.Assert.assertNotNull(matrix55);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNotNull(matrix58);
        org.junit.Assert.assertNotNull(matrix59);
        org.junit.Assert.assertNotNull(matrix61);
        org.junit.Assert.assertNotNull(matrix63);
        org.junit.Assert.assertNotNull(doubleArray66);
        org.junit.Assert.assertArrayEquals(doubleArray66, new double[] { 137.90576492663388d, (-1.0d) }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray67);
        org.junit.Assert.assertArrayEquals(doubleArray67, new double[] { (-24.931892522286255d), (-135.63701830716116d) }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray68);
        org.junit.Assert.assertArrayEquals(doubleArray68, new double[] { 137.90221361711127d, 1.4069397643877004d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray69);
        org.junit.Assert.assertArrayEquals(doubleArray69, new double[] { (-137.90576492663388d), (-1.0d) }, 1.0E-15);
    }

    @Test
    public void test1682() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1682");
        com.operations.Matrix.Matrix matrix2 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0L, (double) (byte) 10);
        double[] doubleArray5 = new double[] { 10, 'a' };
        double[] doubleArray8 = new double[] { 10, 'a' };
        double[][] doubleArray9 = new double[][] { doubleArray5, doubleArray8 };
        com.operations.Matrix.Matrix matrix10 = new com.operations.Matrix.Matrix(doubleArray9);
        int int11 = matrix10.getCols();
        int int12 = matrix10.getCols();
        int int13 = matrix10.getCols();
        com.operations.Matrix.Matrix[] matrixArray14 = com.operations.Matrix.MatrixDecompositions.luDecomposition(matrix10);
        com.operations.Matrix.Matrix matrix15 = com.operations.Matrix.MatrixOperations.multiply(matrix2, matrix10);
        com.operations.Matrix.Matrix matrix17 = com.operations.Matrix.MatrixTransformations.rotate2D((double) (short) 100);
        boolean boolean19 = com.operations.Matrix.MatrixUtils.compare(matrix10, matrix17, (double) (byte) 0);
        com.operations.Matrix.Matrix[] matrixArray20 = com.operations.Matrix.MatrixDecompositions.luDecomposition(matrix10);
        com.operations.Matrix.Matrix matrix21 = com.operations.Matrix.MatrixOperations.transpose(matrix10);
        com.operations.Matrix.Matrix matrix24 = com.operations.Matrix.MatrixTransformations.scale2D((double) 1.0f, (double) 1);
        com.operations.Matrix.Matrix matrix26 = com.operations.Matrix.MatrixTransformations.rotate2D((double) 1.0f);
        com.operations.Matrix.Matrix matrix29 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0L, (double) (byte) 10);
        int int30 = matrix29.getRows();
        com.operations.Matrix.Matrix matrix32 = com.operations.Matrix.MatrixOperations.scalarMultiply(matrix29, (double) 2);
        double double33 = com.operations.Matrix.MatrixUtils.frobeniusNorm(matrix29);
        com.operations.Matrix.Matrix matrix36 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0L, (double) (byte) 10);
        int int37 = matrix36.getRows();
        com.operations.Matrix.Matrix matrix39 = com.operations.Matrix.MatrixOperations.scalarMultiply(matrix36, (double) 2);
        com.operations.Matrix.Matrix matrix40 = com.operations.Matrix.MatrixOperations.subtract(matrix29, matrix39);
        com.operations.Matrix.Matrix matrix41 = com.operations.Matrix.MatrixOperations.add(matrix26, matrix39);
        boolean boolean43 = com.operations.Matrix.MatrixUtils.compare(matrix24, matrix26, (double) (byte) -1);
        com.operations.Matrix.Matrix matrix44 = com.operations.Matrix.MatrixOperations.subtract(matrix21, matrix24);
        com.operations.Matrix.Matrix matrix47 = com.operations.Matrix.MatrixTransformations.scale2D((double) (-1L), (double) '4');
        com.operations.Matrix.Matrix matrix48 = com.operations.Matrix.MatrixOperations.transpose(matrix47);
        double[] doubleArray51 = new double[] { 10, 'a' };
        double[] doubleArray54 = new double[] { 10, 'a' };
        double[][] doubleArray55 = new double[][] { doubleArray51, doubleArray54 };
        com.operations.Matrix.Matrix matrix56 = new com.operations.Matrix.Matrix(doubleArray55);
        com.operations.Matrix.Matrix matrix57 = new com.operations.Matrix.Matrix(doubleArray55);
        com.operations.Matrix.Matrix matrix59 = com.operations.Matrix.MatrixTransformations.rotate2D((double) (short) 100);
        double[] doubleArray62 = new double[] { 137.90576492663388d, (byte) -1 };
        double[] doubleArray63 = com.operations.Matrix.MatrixSolver.solveGaussian(matrix59, doubleArray62);
        com.operations.Matrix.Matrix matrix64 = com.operations.Matrix.MatrixOperations.add(matrix57, matrix59);
        com.operations.Matrix.Matrix matrix65 = com.operations.Matrix.MatrixOperations.transpose(matrix59);
        com.operations.Matrix.Matrix matrix66 = com.operations.Matrix.MatrixOperations.multiply(matrix48, matrix59);
        com.operations.Matrix.Matrix matrix67 = com.operations.Matrix.MatrixOperations.multiply(matrix44, matrix48);
        double double68 = com.operations.Matrix.MatrixUtils.frobeniusNorm(matrix48);
        org.junit.Assert.assertNotNull(matrix2);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertArrayEquals(doubleArray5, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertArrayEquals(doubleArray8, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 2 + "'", int11 == 2);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 2 + "'", int12 == 2);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 2 + "'", int13 == 2);
        org.junit.Assert.assertNotNull(matrixArray14);
        org.junit.Assert.assertNotNull(matrix15);
        org.junit.Assert.assertNotNull(matrix17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(matrixArray20);
        org.junit.Assert.assertNotNull(matrix21);
        org.junit.Assert.assertNotNull(matrix24);
        org.junit.Assert.assertNotNull(matrix26);
        org.junit.Assert.assertNotNull(matrix29);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 2 + "'", int30 == 2);
        org.junit.Assert.assertNotNull(matrix32);
        org.junit.Assert.assertTrue("'" + double33 + "' != '" + 10.0d + "'", double33 == 10.0d);
        org.junit.Assert.assertNotNull(matrix36);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 2 + "'", int37 == 2);
        org.junit.Assert.assertNotNull(matrix39);
        org.junit.Assert.assertNotNull(matrix40);
        org.junit.Assert.assertNotNull(matrix41);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(matrix44);
        org.junit.Assert.assertNotNull(matrix47);
        org.junit.Assert.assertNotNull(matrix48);
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertArrayEquals(doubleArray51, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray54);
        org.junit.Assert.assertArrayEquals(doubleArray54, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertNotNull(matrix59);
        org.junit.Assert.assertNotNull(doubleArray62);
        org.junit.Assert.assertArrayEquals(doubleArray62, new double[] { 137.90576492663388d, (-1.0d) }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray63);
        org.junit.Assert.assertArrayEquals(doubleArray63, new double[] { (-24.931892522286255d), (-135.63701830716116d) }, 1.0E-15);
        org.junit.Assert.assertNotNull(matrix64);
        org.junit.Assert.assertNotNull(matrix65);
        org.junit.Assert.assertNotNull(matrix66);
        org.junit.Assert.assertNotNull(matrix67);
        org.junit.Assert.assertTrue("'" + double68 + "' != '" + 52.009614495783374d + "'", double68 == 52.009614495783374d);
    }

    @Test
    public void test1683() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1683");
        double[] doubleArray2 = new double[] { 10, 'a' };
        double[] doubleArray5 = new double[] { 10, 'a' };
        double[][] doubleArray6 = new double[][] { doubleArray2, doubleArray5 };
        com.operations.Matrix.Matrix matrix7 = new com.operations.Matrix.Matrix(doubleArray6);
        com.operations.Matrix.Matrix matrix8 = new com.operations.Matrix.Matrix(doubleArray6);
        boolean boolean9 = com.operations.Matrix.MatrixUtils.isSquare(matrix8);
        com.operations.Matrix.Matrix matrix11 = com.operations.Matrix.MatrixOperations.scalarMultiply(matrix8, (double) 1.0f);
        com.operations.Matrix.Matrix matrix13 = com.operations.Matrix.MatrixTransformations.rotate2D((double) '4');
        com.operations.Matrix.Matrix matrix16 = com.operations.Matrix.MatrixTransformations.project2D((double) ' ', 0.0d);
        boolean boolean17 = com.operations.Matrix.MatrixUtils.isSymmetric(matrix16);
        boolean boolean19 = com.operations.Matrix.MatrixUtils.compare(matrix13, matrix16, 1.4142135623730951d);
        boolean boolean20 = com.operations.Matrix.MatrixUtils.isSquare(matrix16);
        boolean boolean22 = com.operations.Matrix.MatrixUtils.compare(matrix11, matrix16, (double) 100);
        com.operations.Matrix.Matrix matrix25 = com.operations.Matrix.MatrixTransformations.project2D((-1.0d), (double) 1L);
        double double26 = com.operations.Matrix.MatrixUtils.frobeniusNorm(matrix25);
        com.operations.Matrix.Matrix matrix29 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0L, (double) (byte) 10);
        double[] doubleArray32 = new double[] { 10, 'a' };
        double[] doubleArray35 = new double[] { 10, 'a' };
        double[][] doubleArray36 = new double[][] { doubleArray32, doubleArray35 };
        com.operations.Matrix.Matrix matrix37 = new com.operations.Matrix.Matrix(doubleArray36);
        int int38 = matrix37.getCols();
        int int39 = matrix37.getCols();
        int int40 = matrix37.getCols();
        com.operations.Matrix.Matrix[] matrixArray41 = com.operations.Matrix.MatrixDecompositions.luDecomposition(matrix37);
        com.operations.Matrix.Matrix matrix42 = com.operations.Matrix.MatrixOperations.multiply(matrix29, matrix37);
        com.operations.Matrix.Matrix matrix44 = com.operations.Matrix.MatrixTransformations.rotate2D((double) (short) 100);
        boolean boolean46 = com.operations.Matrix.MatrixUtils.compare(matrix37, matrix44, (double) (byte) 0);
        com.operations.Matrix.Matrix[] matrixArray47 = com.operations.Matrix.MatrixDecompositions.luDecomposition(matrix37);
        com.operations.Matrix.Matrix matrix48 = com.operations.Matrix.MatrixOperations.transpose(matrix37);
        com.operations.Matrix.Matrix matrix51 = com.operations.Matrix.MatrixTransformations.scale2D((double) 1.0f, (double) 1);
        com.operations.Matrix.Matrix matrix53 = com.operations.Matrix.MatrixTransformations.rotate2D((double) 1.0f);
        com.operations.Matrix.Matrix matrix56 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0L, (double) (byte) 10);
        int int57 = matrix56.getRows();
        com.operations.Matrix.Matrix matrix59 = com.operations.Matrix.MatrixOperations.scalarMultiply(matrix56, (double) 2);
        double double60 = com.operations.Matrix.MatrixUtils.frobeniusNorm(matrix56);
        com.operations.Matrix.Matrix matrix63 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0L, (double) (byte) 10);
        int int64 = matrix63.getRows();
        com.operations.Matrix.Matrix matrix66 = com.operations.Matrix.MatrixOperations.scalarMultiply(matrix63, (double) 2);
        com.operations.Matrix.Matrix matrix67 = com.operations.Matrix.MatrixOperations.subtract(matrix56, matrix66);
        com.operations.Matrix.Matrix matrix68 = com.operations.Matrix.MatrixOperations.add(matrix53, matrix66);
        boolean boolean70 = com.operations.Matrix.MatrixUtils.compare(matrix51, matrix53, (double) (byte) -1);
        com.operations.Matrix.Matrix matrix71 = com.operations.Matrix.MatrixOperations.subtract(matrix48, matrix51);
        com.operations.Matrix.Matrix matrix72 = com.operations.Matrix.MatrixOperations.multiply(matrix25, matrix51);
        com.operations.Matrix.Matrix matrix74 = com.operations.Matrix.MatrixTransformations.rotate2D((double) (-1L));
        com.operations.Matrix.Matrix matrix76 = com.operations.Matrix.MatrixTransformations.rotate2D((double) (short) 100);
        double[] doubleArray79 = new double[] { 137.90576492663388d, (byte) -1 };
        double[] doubleArray80 = com.operations.Matrix.MatrixSolver.solveGaussian(matrix76, doubleArray79);
        double[] doubleArray81 = com.operations.Matrix.MatrixSolver.solveGaussian(matrix74, doubleArray79);
        double[] doubleArray82 = com.operations.Matrix.MatrixSolver.solveGaussian(matrix72, doubleArray79);
        // The following exception was thrown during execution in test generation
        try {
            double[] doubleArray83 = com.operations.Matrix.MatrixSolver.solveGaussian(matrix16, doubleArray79);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Matrix is singular or nearly singular.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertArrayEquals(doubleArray2, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertArrayEquals(doubleArray5, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertNotNull(matrix11);
        org.junit.Assert.assertNotNull(matrix13);
        org.junit.Assert.assertNotNull(matrix16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertNotNull(matrix25);
        org.junit.Assert.assertTrue("'" + double26 + "' != '" + 1.4142135623730951d + "'", double26 == 1.4142135623730951d);
        org.junit.Assert.assertNotNull(matrix29);
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertArrayEquals(doubleArray32, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertArrayEquals(doubleArray35, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 2 + "'", int38 == 2);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 2 + "'", int39 == 2);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 2 + "'", int40 == 2);
        org.junit.Assert.assertNotNull(matrixArray41);
        org.junit.Assert.assertNotNull(matrix42);
        org.junit.Assert.assertNotNull(matrix44);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(matrixArray47);
        org.junit.Assert.assertNotNull(matrix48);
        org.junit.Assert.assertNotNull(matrix51);
        org.junit.Assert.assertNotNull(matrix53);
        org.junit.Assert.assertNotNull(matrix56);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 2 + "'", int57 == 2);
        org.junit.Assert.assertNotNull(matrix59);
        org.junit.Assert.assertTrue("'" + double60 + "' != '" + 10.0d + "'", double60 == 10.0d);
        org.junit.Assert.assertNotNull(matrix63);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 2 + "'", int64 == 2);
        org.junit.Assert.assertNotNull(matrix66);
        org.junit.Assert.assertNotNull(matrix67);
        org.junit.Assert.assertNotNull(matrix68);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertNotNull(matrix71);
        org.junit.Assert.assertNotNull(matrix72);
        org.junit.Assert.assertNotNull(matrix74);
        org.junit.Assert.assertNotNull(matrix76);
        org.junit.Assert.assertNotNull(doubleArray79);
        org.junit.Assert.assertArrayEquals(doubleArray79, new double[] { 137.90576492663388d, (-1.0d) }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray80);
        org.junit.Assert.assertArrayEquals(doubleArray80, new double[] { (-24.931892522286255d), (-135.63701830716116d) }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray81);
        org.junit.Assert.assertArrayEquals(doubleArray81, new double[] { 137.90221361711127d, 1.4069397643877004d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray82);
        org.junit.Assert.assertArrayEquals(doubleArray82, new double[] { (-137.90576492663388d), (-1.0d) }, 1.0E-15);
    }

    @Test
    public void test1684() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1684");
        com.operations.Matrix.Matrix matrix2 = com.operations.Matrix.MatrixTransformations.project2D((double) ' ', 0.0d);
        boolean boolean3 = com.operations.Matrix.MatrixUtils.isSymmetric(matrix2);
        com.operations.Matrix.Matrix matrix4 = com.operations.Matrix.MatrixOperations.transpose(matrix2);
        com.operations.Matrix.Matrix matrix6 = com.operations.Matrix.MatrixOperations.scalarMultiply(matrix2, 3500.0d);
        int int7 = matrix6.getRows();
        org.junit.Assert.assertNotNull(matrix2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNotNull(matrix4);
        org.junit.Assert.assertNotNull(matrix6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 2 + "'", int7 == 2);
    }

    @Test
    public void test1685() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1685");
        com.operations.Matrix.Matrix matrix2 = com.operations.Matrix.MatrixTransformations.project2D(137.90576492663388d, 0.0d);
        com.operations.Matrix.Matrix matrix5 = com.operations.Matrix.MatrixTransformations.scale2D(1.414213562373095d, (double) 1);
        com.operations.Matrix.Matrix matrix6 = com.operations.Matrix.MatrixOperations.add(matrix2, matrix5);
        int int7 = matrix2.getCols();
        matrix2.print();
        org.junit.Assert.assertNotNull(matrix2);
        org.junit.Assert.assertNotNull(matrix5);
        org.junit.Assert.assertNotNull(matrix6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 2 + "'", int7 == 2);
    }

    @Test
    public void test1686() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1686");
        // The following exception was thrown during execution in test generation
        try {
            com.operations.Matrix.Matrix matrix4 = com.operations.Matrix.MatrixUtils.generateRandomMatrix(35, (int) (short) -1, 2, (int) (byte) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.NegativeArraySizeException; message: -1");
        } catch (java.lang.NegativeArraySizeException e) {
            // Expected exception.
        }
    }

    @Test
    public void test1687() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1687");
        com.operations.Matrix.Matrix matrix2 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0L, (double) (byte) 10);
        double[] doubleArray5 = new double[] { 10, 'a' };
        double[] doubleArray8 = new double[] { 10, 'a' };
        double[][] doubleArray9 = new double[][] { doubleArray5, doubleArray8 };
        com.operations.Matrix.Matrix matrix10 = new com.operations.Matrix.Matrix(doubleArray9);
        int int11 = matrix10.getCols();
        int int12 = matrix10.getCols();
        int int13 = matrix10.getCols();
        com.operations.Matrix.Matrix[] matrixArray14 = com.operations.Matrix.MatrixDecompositions.luDecomposition(matrix10);
        com.operations.Matrix.Matrix matrix15 = com.operations.Matrix.MatrixOperations.multiply(matrix2, matrix10);
        com.operations.Matrix.Matrix matrix17 = com.operations.Matrix.MatrixTransformations.rotate2D((double) (short) 100);
        boolean boolean19 = com.operations.Matrix.MatrixUtils.compare(matrix10, matrix17, (double) (byte) 0);
        com.operations.Matrix.Matrix matrix21 = com.operations.Matrix.MatrixTransformations.rotate2D((double) 1.0f);
        com.operations.Matrix.Matrix matrix24 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0L, (double) (byte) 10);
        int int25 = matrix24.getRows();
        com.operations.Matrix.Matrix matrix27 = com.operations.Matrix.MatrixOperations.scalarMultiply(matrix24, (double) 2);
        double double28 = com.operations.Matrix.MatrixUtils.frobeniusNorm(matrix24);
        com.operations.Matrix.Matrix matrix31 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0L, (double) (byte) 10);
        int int32 = matrix31.getRows();
        com.operations.Matrix.Matrix matrix34 = com.operations.Matrix.MatrixOperations.scalarMultiply(matrix31, (double) 2);
        com.operations.Matrix.Matrix matrix35 = com.operations.Matrix.MatrixOperations.subtract(matrix24, matrix34);
        com.operations.Matrix.Matrix matrix36 = com.operations.Matrix.MatrixOperations.add(matrix21, matrix34);
        double[] doubleArray39 = new double[] { 10, 'a' };
        double[] doubleArray42 = new double[] { 10, 'a' };
        double[][] doubleArray43 = new double[][] { doubleArray39, doubleArray42 };
        com.operations.Matrix.Matrix matrix44 = new com.operations.Matrix.Matrix(doubleArray43);
        int int45 = matrix44.getCols();
        int int46 = matrix44.getCols();
        int int47 = matrix44.getCols();
        com.operations.Matrix.Matrix matrix53 = com.operations.Matrix.MatrixUtils.generateRandomMatrix(100, (int) (byte) 1, (int) '#', (int) '#', 1L);
        double double56 = matrix53.getValue((int) '4', 0);
        double double57 = com.operations.Matrix.MatrixUtils.frobeniusNorm(matrix53);
        boolean boolean58 = com.operations.Matrix.MatrixUtils.isSquare(matrix53);
        boolean boolean60 = com.operations.Matrix.MatrixUtils.compare(matrix44, matrix53, (double) 100L);
        com.operations.Matrix.Matrix matrix62 = com.operations.Matrix.MatrixTransformations.rotate2D((double) (short) 100);
        double[] doubleArray65 = new double[] { 137.90576492663388d, (byte) -1 };
        double[] doubleArray66 = com.operations.Matrix.MatrixSolver.solveGaussian(matrix62, doubleArray65);
        com.operations.Matrix.Matrix matrix69 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0L, (double) (byte) 10);
        double[] doubleArray72 = new double[] { 10, 'a' };
        double[] doubleArray75 = new double[] { 10, 'a' };
        double[][] doubleArray76 = new double[][] { doubleArray72, doubleArray75 };
        com.operations.Matrix.Matrix matrix77 = new com.operations.Matrix.Matrix(doubleArray76);
        int int78 = matrix77.getCols();
        int int79 = matrix77.getCols();
        int int80 = matrix77.getCols();
        com.operations.Matrix.Matrix[] matrixArray81 = com.operations.Matrix.MatrixDecompositions.luDecomposition(matrix77);
        com.operations.Matrix.Matrix matrix82 = com.operations.Matrix.MatrixOperations.multiply(matrix69, matrix77);
        boolean boolean84 = com.operations.Matrix.MatrixUtils.compare(matrix62, matrix69, (double) (-1L));
        com.operations.Matrix.Matrix matrix85 = com.operations.Matrix.MatrixOperations.subtract(matrix44, matrix69);
        com.operations.Matrix.Matrix matrix86 = com.operations.Matrix.MatrixOperations.add(matrix34, matrix69);
        com.operations.Matrix.Matrix matrix87 = com.operations.Matrix.MatrixOperations.add(matrix17, matrix86);
        double double88 = com.operations.Matrix.MatrixUtils.frobeniusNorm(matrix17);
        com.operations.Matrix.Matrix[] matrixArray89 = com.operations.Matrix.MatrixDecompositions.luDecomposition(matrix17);
        com.operations.Matrix.Matrix matrix91 = com.operations.Matrix.MatrixTransformations.rotate2D(1.414213562373095d);
        com.operations.Matrix.Matrix matrix93 = com.operations.Matrix.MatrixOperations.scalarMultiply(matrix91, 21.023651153076518d);
        com.operations.Matrix.Matrix matrix94 = com.operations.Matrix.MatrixOperations.add(matrix17, matrix93);
        // The following exception was thrown during execution in test generation
        try {
            matrix94.setValue((int) (short) -1, (int) (byte) 10, (double) 52);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: Index -1 out of bounds for length 2");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(matrix2);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertArrayEquals(doubleArray5, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertArrayEquals(doubleArray8, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 2 + "'", int11 == 2);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 2 + "'", int12 == 2);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 2 + "'", int13 == 2);
        org.junit.Assert.assertNotNull(matrixArray14);
        org.junit.Assert.assertNotNull(matrix15);
        org.junit.Assert.assertNotNull(matrix17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(matrix21);
        org.junit.Assert.assertNotNull(matrix24);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 2 + "'", int25 == 2);
        org.junit.Assert.assertNotNull(matrix27);
        org.junit.Assert.assertTrue("'" + double28 + "' != '" + 10.0d + "'", double28 == 10.0d);
        org.junit.Assert.assertNotNull(matrix31);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 2 + "'", int32 == 2);
        org.junit.Assert.assertNotNull(matrix34);
        org.junit.Assert.assertNotNull(matrix35);
        org.junit.Assert.assertNotNull(matrix36);
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertArrayEquals(doubleArray39, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertArrayEquals(doubleArray42, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 2 + "'", int45 == 2);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 2 + "'", int46 == 2);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 2 + "'", int47 == 2);
        org.junit.Assert.assertNotNull(matrix53);
        org.junit.Assert.assertTrue("'" + double56 + "' != '" + 35.0d + "'", double56 == 35.0d);
        org.junit.Assert.assertTrue("'" + double57 + "' != '" + 350.0d + "'", double57 == 350.0d);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertNotNull(matrix62);
        org.junit.Assert.assertNotNull(doubleArray65);
        org.junit.Assert.assertArrayEquals(doubleArray65, new double[] { 137.90576492663388d, (-1.0d) }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray66);
        org.junit.Assert.assertArrayEquals(doubleArray66, new double[] { (-24.931892522286255d), (-135.63701830716116d) }, 1.0E-15);
        org.junit.Assert.assertNotNull(matrix69);
        org.junit.Assert.assertNotNull(doubleArray72);
        org.junit.Assert.assertArrayEquals(doubleArray72, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray75);
        org.junit.Assert.assertArrayEquals(doubleArray75, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray76);
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + 2 + "'", int78 == 2);
        org.junit.Assert.assertTrue("'" + int79 + "' != '" + 2 + "'", int79 == 2);
        org.junit.Assert.assertTrue("'" + int80 + "' != '" + 2 + "'", int80 == 2);
        org.junit.Assert.assertNotNull(matrixArray81);
        org.junit.Assert.assertNotNull(matrix82);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
        org.junit.Assert.assertNotNull(matrix85);
        org.junit.Assert.assertNotNull(matrix86);
        org.junit.Assert.assertNotNull(matrix87);
        org.junit.Assert.assertTrue("'" + double88 + "' != '" + 1.414213562373095d + "'", double88 == 1.414213562373095d);
        org.junit.Assert.assertNotNull(matrixArray89);
        org.junit.Assert.assertNotNull(matrix91);
        org.junit.Assert.assertNotNull(matrix93);
        org.junit.Assert.assertNotNull(matrix94);
    }

    @Test
    public void test1688() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1688");
        com.operations.Matrix.Matrix matrix5 = com.operations.Matrix.MatrixUtils.generateRandomMatrix(52, 0, 32, (-1), (long) (short) -1);
        double[][] doubleArray6 = matrix5.getData();
        com.operations.Matrix.Matrix matrix8 = com.operations.Matrix.MatrixTransformations.rotate2D((double) '4');
        double[] doubleArray11 = new double[] { 10, 'a' };
        double[] doubleArray14 = new double[] { 10, 'a' };
        double[][] doubleArray15 = new double[][] { doubleArray11, doubleArray14 };
        com.operations.Matrix.Matrix matrix16 = new com.operations.Matrix.Matrix(doubleArray15);
        com.operations.Matrix.Matrix matrix17 = new com.operations.Matrix.Matrix(doubleArray15);
        com.operations.Matrix.Matrix matrix19 = com.operations.Matrix.MatrixTransformations.rotate2D((double) (short) 100);
        double[] doubleArray22 = new double[] { 137.90576492663388d, (byte) -1 };
        double[] doubleArray23 = com.operations.Matrix.MatrixSolver.solveGaussian(matrix19, doubleArray22);
        com.operations.Matrix.Matrix matrix24 = com.operations.Matrix.MatrixOperations.add(matrix17, matrix19);
        boolean boolean25 = com.operations.Matrix.MatrixUtils.isSymmetric(matrix24);
        boolean boolean27 = com.operations.Matrix.MatrixUtils.compare(matrix8, matrix24, 364.0054944640259d);
        com.operations.Matrix.Matrix[] matrixArray28 = com.operations.Matrix.MatrixDecompositions.luDecomposition(matrix24);
        com.operations.Matrix.Matrix matrix30 = com.operations.Matrix.MatrixOperations.scalarMultiply(matrix24, (double) 1L);
        com.operations.Matrix.Matrix matrix33 = com.operations.Matrix.MatrixTransformations.scale2D((double) 100.0f, (double) (byte) 1);
        com.operations.Matrix.Matrix matrix36 = com.operations.Matrix.MatrixTransformations.scale2D((double) 1.0f, (double) 1);
        com.operations.Matrix.Matrix matrix38 = com.operations.Matrix.MatrixTransformations.rotate2D((double) 1.0f);
        com.operations.Matrix.Matrix matrix41 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0L, (double) (byte) 10);
        int int42 = matrix41.getRows();
        com.operations.Matrix.Matrix matrix44 = com.operations.Matrix.MatrixOperations.scalarMultiply(matrix41, (double) 2);
        double double45 = com.operations.Matrix.MatrixUtils.frobeniusNorm(matrix41);
        com.operations.Matrix.Matrix matrix48 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0L, (double) (byte) 10);
        int int49 = matrix48.getRows();
        com.operations.Matrix.Matrix matrix51 = com.operations.Matrix.MatrixOperations.scalarMultiply(matrix48, (double) 2);
        com.operations.Matrix.Matrix matrix52 = com.operations.Matrix.MatrixOperations.subtract(matrix41, matrix51);
        com.operations.Matrix.Matrix matrix53 = com.operations.Matrix.MatrixOperations.add(matrix38, matrix51);
        boolean boolean55 = com.operations.Matrix.MatrixUtils.compare(matrix36, matrix38, (double) (byte) -1);
        com.operations.Matrix.Matrix matrix56 = com.operations.Matrix.MatrixOperations.transpose(matrix38);
        com.operations.Matrix.Matrix matrix59 = com.operations.Matrix.MatrixTransformations.project2D((double) 10L, 10.0d);
        com.operations.Matrix.Matrix matrix61 = com.operations.Matrix.MatrixTransformations.rotate2D((double) (short) 100);
        double[] doubleArray64 = new double[] { 137.90576492663388d, (byte) -1 };
        double[] doubleArray65 = com.operations.Matrix.MatrixSolver.solveGaussian(matrix61, doubleArray64);
        com.operations.Matrix.Matrix matrix68 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0L, (double) (byte) 10);
        double[] doubleArray71 = new double[] { 10, 'a' };
        double[] doubleArray74 = new double[] { 10, 'a' };
        double[][] doubleArray75 = new double[][] { doubleArray71, doubleArray74 };
        com.operations.Matrix.Matrix matrix76 = new com.operations.Matrix.Matrix(doubleArray75);
        int int77 = matrix76.getCols();
        int int78 = matrix76.getCols();
        int int79 = matrix76.getCols();
        com.operations.Matrix.Matrix[] matrixArray80 = com.operations.Matrix.MatrixDecompositions.luDecomposition(matrix76);
        com.operations.Matrix.Matrix matrix81 = com.operations.Matrix.MatrixOperations.multiply(matrix68, matrix76);
        boolean boolean83 = com.operations.Matrix.MatrixUtils.compare(matrix61, matrix68, (double) (-1L));
        double[][] doubleArray84 = matrix61.getData();
        com.operations.Matrix.Matrix matrix86 = com.operations.Matrix.MatrixTransformations.rotate2D((double) (short) 100);
        double[] doubleArray89 = new double[] { 137.90576492663388d, (byte) -1 };
        double[] doubleArray90 = com.operations.Matrix.MatrixSolver.solveGaussian(matrix86, doubleArray89);
        double[] doubleArray91 = com.operations.Matrix.MatrixSolver.solveGaussian(matrix61, doubleArray89);
        double[] doubleArray92 = com.operations.Matrix.MatrixSolver.solveGaussian(matrix59, doubleArray91);
        double[] doubleArray93 = com.operations.Matrix.MatrixSolver.solveGaussian(matrix38, doubleArray92);
        double[] doubleArray94 = com.operations.Matrix.MatrixSolver.solveGaussian(matrix33, doubleArray93);
        double[] doubleArray95 = com.operations.Matrix.MatrixSolver.solveGaussian(matrix24, doubleArray93);
        // The following exception was thrown during execution in test generation
        try {
            com.operations.Matrix.Matrix matrix96 = com.operations.Matrix.MatrixOperations.subtract(matrix5, matrix24);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Matrices must have the same dimensions for subtraction.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(matrix5);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertNotNull(matrix8);
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertArrayEquals(doubleArray11, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertArrayEquals(doubleArray14, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertNotNull(matrix19);
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertArrayEquals(doubleArray22, new double[] { 137.90576492663388d, (-1.0d) }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertArrayEquals(doubleArray23, new double[] { (-24.931892522286255d), (-135.63701830716116d) }, 1.0E-15);
        org.junit.Assert.assertNotNull(matrix24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertNotNull(matrixArray28);
        org.junit.Assert.assertNotNull(matrix30);
        org.junit.Assert.assertNotNull(matrix33);
        org.junit.Assert.assertNotNull(matrix36);
        org.junit.Assert.assertNotNull(matrix38);
        org.junit.Assert.assertNotNull(matrix41);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 2 + "'", int42 == 2);
        org.junit.Assert.assertNotNull(matrix44);
        org.junit.Assert.assertTrue("'" + double45 + "' != '" + 10.0d + "'", double45 == 10.0d);
        org.junit.Assert.assertNotNull(matrix48);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 2 + "'", int49 == 2);
        org.junit.Assert.assertNotNull(matrix51);
        org.junit.Assert.assertNotNull(matrix52);
        org.junit.Assert.assertNotNull(matrix53);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNotNull(matrix56);
        org.junit.Assert.assertNotNull(matrix59);
        org.junit.Assert.assertNotNull(matrix61);
        org.junit.Assert.assertNotNull(doubleArray64);
        org.junit.Assert.assertArrayEquals(doubleArray64, new double[] { 137.90576492663388d, (-1.0d) }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray65);
        org.junit.Assert.assertArrayEquals(doubleArray65, new double[] { (-24.931892522286255d), (-135.63701830716116d) }, 1.0E-15);
        org.junit.Assert.assertNotNull(matrix68);
        org.junit.Assert.assertNotNull(doubleArray71);
        org.junit.Assert.assertArrayEquals(doubleArray71, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray74);
        org.junit.Assert.assertArrayEquals(doubleArray74, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray75);
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + 2 + "'", int77 == 2);
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + 2 + "'", int78 == 2);
        org.junit.Assert.assertTrue("'" + int79 + "' != '" + 2 + "'", int79 == 2);
        org.junit.Assert.assertNotNull(matrixArray80);
        org.junit.Assert.assertNotNull(matrix81);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertNotNull(doubleArray84);
        org.junit.Assert.assertNotNull(matrix86);
        org.junit.Assert.assertNotNull(doubleArray89);
        org.junit.Assert.assertArrayEquals(doubleArray89, new double[] { 137.90576492663388d, (-1.0d) }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray90);
        org.junit.Assert.assertArrayEquals(doubleArray90, new double[] { (-24.931892522286255d), (-135.63701830716116d) }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray91);
        org.junit.Assert.assertArrayEquals(doubleArray91, new double[] { (-24.931892522286255d), (-135.63701830716116d) }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray92);
        org.junit.Assert.assertArrayEquals(doubleArray92, new double[] { (-2.4931892522286256d), (-13.563701830716116d) }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray93);
        org.junit.Assert.assertArrayEquals(doubleArray93, new double[] { (-2.7295287645732618d), (-13.518123861075072d) }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray94);
        org.junit.Assert.assertArrayEquals(doubleArray94, new double[] { (-0.027295287645732618d), (-13.518123861075072d) }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray95);
        org.junit.Assert.assertArrayEquals(doubleArray95, new double[] { (-10.010349291411998d), 0.996047427487017d }, 1.0E-15);
    }

    @Test
    public void test1689() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1689");
        com.operations.Matrix.Matrix matrix0 = null;
        com.operations.Matrix.Matrix matrix3 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0L, (double) 10L);
        com.operations.Matrix.Matrix matrix6 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0L, (double) (byte) 10);
        double[] doubleArray9 = new double[] { 10, 'a' };
        double[] doubleArray12 = new double[] { 10, 'a' };
        double[][] doubleArray13 = new double[][] { doubleArray9, doubleArray12 };
        com.operations.Matrix.Matrix matrix14 = new com.operations.Matrix.Matrix(doubleArray13);
        int int15 = matrix14.getCols();
        int int16 = matrix14.getCols();
        int int17 = matrix14.getCols();
        com.operations.Matrix.Matrix[] matrixArray18 = com.operations.Matrix.MatrixDecompositions.luDecomposition(matrix14);
        com.operations.Matrix.Matrix matrix19 = com.operations.Matrix.MatrixOperations.multiply(matrix6, matrix14);
        com.operations.Matrix.Matrix matrix21 = com.operations.Matrix.MatrixTransformations.rotate2D((double) (short) 100);
        boolean boolean23 = com.operations.Matrix.MatrixUtils.compare(matrix14, matrix21, (double) (byte) 0);
        double[] doubleArray26 = new double[] { 10, 'a' };
        double[] doubleArray29 = new double[] { 10, 'a' };
        double[][] doubleArray30 = new double[][] { doubleArray26, doubleArray29 };
        com.operations.Matrix.Matrix matrix31 = new com.operations.Matrix.Matrix(doubleArray30);
        com.operations.Matrix.Matrix matrix32 = new com.operations.Matrix.Matrix(doubleArray30);
        com.operations.Matrix.Matrix matrix33 = new com.operations.Matrix.Matrix(doubleArray30);
        boolean boolean35 = com.operations.Matrix.MatrixUtils.compare(matrix14, matrix33, (double) (-1));
        com.operations.Matrix.Matrix matrix37 = com.operations.Matrix.MatrixTransformations.rotate2D((double) (short) 100);
        double[] doubleArray40 = new double[] { 137.90576492663388d, (byte) -1 };
        double[] doubleArray41 = com.operations.Matrix.MatrixSolver.solveGaussian(matrix37, doubleArray40);
        com.operations.Matrix.Matrix matrix44 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0L, (double) (byte) 10);
        double[] doubleArray47 = new double[] { 10, 'a' };
        double[] doubleArray50 = new double[] { 10, 'a' };
        double[][] doubleArray51 = new double[][] { doubleArray47, doubleArray50 };
        com.operations.Matrix.Matrix matrix52 = new com.operations.Matrix.Matrix(doubleArray51);
        int int53 = matrix52.getCols();
        int int54 = matrix52.getCols();
        int int55 = matrix52.getCols();
        com.operations.Matrix.Matrix[] matrixArray56 = com.operations.Matrix.MatrixDecompositions.luDecomposition(matrix52);
        com.operations.Matrix.Matrix matrix57 = com.operations.Matrix.MatrixOperations.multiply(matrix44, matrix52);
        boolean boolean59 = com.operations.Matrix.MatrixUtils.compare(matrix37, matrix44, (double) (-1L));
        com.operations.Matrix.Matrix matrix60 = com.operations.Matrix.MatrixOperations.add(matrix33, matrix44);
        boolean boolean62 = com.operations.Matrix.MatrixUtils.compare(matrix3, matrix60, 146.4308710620817d);
        com.operations.Matrix.Matrix matrix64 = com.operations.Matrix.MatrixOperations.scalarMultiply(matrix60, (double) 100L);
        com.operations.Matrix.Matrix matrix65 = com.operations.Matrix.MatrixDecompositions.choleskyDecomposition(matrix64);
        // The following exception was thrown during execution in test generation
        try {
            com.operations.Matrix.Matrix matrix66 = com.operations.Matrix.MatrixOperations.multiply(matrix0, matrix65);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(matrix3);
        org.junit.Assert.assertNotNull(matrix6);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertArrayEquals(doubleArray9, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertArrayEquals(doubleArray12, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 2 + "'", int15 == 2);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 2 + "'", int16 == 2);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 2 + "'", int17 == 2);
        org.junit.Assert.assertNotNull(matrixArray18);
        org.junit.Assert.assertNotNull(matrix19);
        org.junit.Assert.assertNotNull(matrix21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertArrayEquals(doubleArray26, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertArrayEquals(doubleArray29, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(matrix37);
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertArrayEquals(doubleArray40, new double[] { 137.90576492663388d, (-1.0d) }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertArrayEquals(doubleArray41, new double[] { (-24.931892522286255d), (-135.63701830716116d) }, 1.0E-15);
        org.junit.Assert.assertNotNull(matrix44);
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertArrayEquals(doubleArray47, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertArrayEquals(doubleArray50, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 2 + "'", int53 == 2);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 2 + "'", int54 == 2);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 2 + "'", int55 == 2);
        org.junit.Assert.assertNotNull(matrixArray56);
        org.junit.Assert.assertNotNull(matrix57);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNotNull(matrix60);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + true + "'", boolean62 == true);
        org.junit.Assert.assertNotNull(matrix64);
        org.junit.Assert.assertNotNull(matrix65);
    }

    @Test
    public void test1690() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1690");
        com.operations.Matrix.Matrix matrix2 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0L, (double) (byte) 10);
        double[] doubleArray5 = new double[] { 10, 'a' };
        double[] doubleArray8 = new double[] { 10, 'a' };
        double[][] doubleArray9 = new double[][] { doubleArray5, doubleArray8 };
        com.operations.Matrix.Matrix matrix10 = new com.operations.Matrix.Matrix(doubleArray9);
        int int11 = matrix10.getCols();
        int int12 = matrix10.getCols();
        int int13 = matrix10.getCols();
        com.operations.Matrix.Matrix[] matrixArray14 = com.operations.Matrix.MatrixDecompositions.luDecomposition(matrix10);
        com.operations.Matrix.Matrix matrix15 = com.operations.Matrix.MatrixOperations.multiply(matrix2, matrix10);
        com.operations.Matrix.Matrix matrix17 = com.operations.Matrix.MatrixTransformations.rotate2D((double) (short) 100);
        boolean boolean19 = com.operations.Matrix.MatrixUtils.compare(matrix10, matrix17, (double) (byte) 0);
        com.operations.Matrix.Matrix matrix20 = com.operations.Matrix.MatrixOperations.transpose(matrix10);
        com.operations.Matrix.Matrix matrix22 = com.operations.Matrix.MatrixOperations.scalarMultiply(matrix20, (double) 10);
        com.operations.Matrix.Matrix matrix25 = new com.operations.Matrix.Matrix(52, 2);
        int int26 = matrix25.getRows();
        boolean boolean28 = com.operations.Matrix.MatrixUtils.compare(matrix22, matrix25, 30.0d);
        boolean boolean29 = com.operations.Matrix.MatrixUtils.isSquare(matrix22);
        org.junit.Assert.assertNotNull(matrix2);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertArrayEquals(doubleArray5, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertArrayEquals(doubleArray8, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 2 + "'", int11 == 2);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 2 + "'", int12 == 2);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 2 + "'", int13 == 2);
        org.junit.Assert.assertNotNull(matrixArray14);
        org.junit.Assert.assertNotNull(matrix15);
        org.junit.Assert.assertNotNull(matrix17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(matrix20);
        org.junit.Assert.assertNotNull(matrix22);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 52 + "'", int26 == 52);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
    }

    @Test
    public void test1691() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1691");
        com.operations.Matrix.Matrix matrix2 = com.operations.Matrix.MatrixTransformations.project2D((double) ' ', 0.0d);
        boolean boolean3 = com.operations.Matrix.MatrixUtils.isSymmetric(matrix2);
        int int4 = matrix2.getRows();
        double[][] doubleArray5 = matrix2.getData();
        java.lang.Class<?> wildcardClass6 = doubleArray5.getClass();
        org.junit.Assert.assertNotNull(matrix2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 2 + "'", int4 == 2);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertNotNull(wildcardClass6);
    }

    @Test
    public void test1692() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1692");
        // The following exception was thrown during execution in test generation
        try {
            com.operations.Matrix.Matrix matrix4 = com.operations.Matrix.MatrixUtils.generateRandomMatrix((int) (short) -1, (int) '4', (int) (byte) 10, (int) (byte) 0);
            org.junit.Assert.fail("Expected exception of type java.lang.NegativeArraySizeException; message: -1");
        } catch (java.lang.NegativeArraySizeException e) {
            // Expected exception.
        }
    }

    @Test
    public void test1693() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1693");
        com.operations.Matrix.Matrix matrix2 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0L, (double) (byte) 10);
        double[] doubleArray5 = new double[] { 10, 'a' };
        double[] doubleArray8 = new double[] { 10, 'a' };
        double[][] doubleArray9 = new double[][] { doubleArray5, doubleArray8 };
        com.operations.Matrix.Matrix matrix10 = new com.operations.Matrix.Matrix(doubleArray9);
        int int11 = matrix10.getCols();
        int int12 = matrix10.getCols();
        int int13 = matrix10.getCols();
        com.operations.Matrix.Matrix[] matrixArray14 = com.operations.Matrix.MatrixDecompositions.luDecomposition(matrix10);
        com.operations.Matrix.Matrix matrix15 = com.operations.Matrix.MatrixOperations.multiply(matrix2, matrix10);
        int int16 = matrix10.getRows();
        int int17 = matrix10.getCols();
        boolean boolean18 = com.operations.Matrix.MatrixUtils.isSquare(matrix10);
        org.junit.Assert.assertNotNull(matrix2);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertArrayEquals(doubleArray5, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertArrayEquals(doubleArray8, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 2 + "'", int11 == 2);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 2 + "'", int12 == 2);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 2 + "'", int13 == 2);
        org.junit.Assert.assertNotNull(matrixArray14);
        org.junit.Assert.assertNotNull(matrix15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 2 + "'", int16 == 2);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 2 + "'", int17 == 2);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
    }

    @Test
    public void test1694() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1694");
        com.operations.Matrix.Matrix matrix2 = com.operations.Matrix.MatrixTransformations.project2D((double) ' ', (double) (byte) 0);
        com.operations.Matrix.Matrix matrix3 = null;
        // The following exception was thrown during execution in test generation
        try {
            com.operations.Matrix.Matrix matrix4 = com.operations.Matrix.MatrixOperations.add(matrix2, matrix3);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot invoke \"com.operations.Matrix.Matrix.getRows()\" because \"b\" is null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(matrix2);
    }

    @Test
    public void test1695() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1695");
        com.operations.Matrix.Matrix matrix2 = com.operations.Matrix.MatrixTransformations.scale2D(8.603303277930165d, 137.90576492663385d);
        org.junit.Assert.assertNotNull(matrix2);
    }

    @Test
    public void test1696() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1696");
        double[] doubleArray2 = new double[] { 10, 'a' };
        double[] doubleArray5 = new double[] { 10, 'a' };
        double[][] doubleArray6 = new double[][] { doubleArray2, doubleArray5 };
        com.operations.Matrix.Matrix matrix7 = new com.operations.Matrix.Matrix(doubleArray6);
        com.operations.Matrix.Matrix matrix8 = new com.operations.Matrix.Matrix(doubleArray6);
        boolean boolean9 = com.operations.Matrix.MatrixUtils.isSquare(matrix8);
        double[] doubleArray12 = new double[] { 10, 'a' };
        double[] doubleArray15 = new double[] { 10, 'a' };
        double[][] doubleArray16 = new double[][] { doubleArray12, doubleArray15 };
        com.operations.Matrix.Matrix matrix17 = new com.operations.Matrix.Matrix(doubleArray16);
        int int18 = matrix17.getCols();
        int int19 = matrix17.getCols();
        matrix17.print();
        double[] doubleArray23 = new double[] { 10, 'a' };
        double[] doubleArray26 = new double[] { 10, 'a' };
        double[][] doubleArray27 = new double[][] { doubleArray23, doubleArray26 };
        com.operations.Matrix.Matrix matrix28 = new com.operations.Matrix.Matrix(doubleArray27);
        boolean boolean30 = com.operations.Matrix.MatrixUtils.compare(matrix17, matrix28, (double) (-1));
        com.operations.Matrix.Matrix matrix31 = com.operations.Matrix.MatrixOperations.subtract(matrix8, matrix28);
        com.operations.Matrix.Matrix matrix33 = com.operations.Matrix.MatrixOperations.scalarMultiply(matrix8, (double) 0.0f);
        com.operations.Matrix.Matrix matrix34 = com.operations.Matrix.MatrixOperations.transpose(matrix8);
        double[][] doubleArray35 = matrix8.getData();
        matrix8.print();
        matrix8.print();
        // The following exception was thrown during execution in test generation
        try {
            matrix8.setValue((int) 'a', (int) (short) -1, 99.83621769912266d);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: Index 97 out of bounds for length 2");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertArrayEquals(doubleArray2, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertArrayEquals(doubleArray5, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertArrayEquals(doubleArray12, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertArrayEquals(doubleArray15, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 2 + "'", int18 == 2);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 2 + "'", int19 == 2);
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertArrayEquals(doubleArray23, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertArrayEquals(doubleArray26, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(matrix31);
        org.junit.Assert.assertNotNull(matrix33);
        org.junit.Assert.assertNotNull(matrix34);
        org.junit.Assert.assertNotNull(doubleArray35);
    }

    @Test
    public void test1697() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1697");
        com.operations.Matrix.Matrix matrix2 = com.operations.Matrix.MatrixTransformations.scale2D(0.0d, 0.0d);
        java.lang.Class<?> wildcardClass3 = matrix2.getClass();
        org.junit.Assert.assertNotNull(matrix2);
        org.junit.Assert.assertNotNull(wildcardClass3);
    }

    @Test
    public void test1698() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1698");
        com.operations.Matrix.Matrix matrix2 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0L, (double) (byte) 10);
        double[] doubleArray5 = new double[] { 10, 'a' };
        double[] doubleArray8 = new double[] { 10, 'a' };
        double[][] doubleArray9 = new double[][] { doubleArray5, doubleArray8 };
        com.operations.Matrix.Matrix matrix10 = new com.operations.Matrix.Matrix(doubleArray9);
        int int11 = matrix10.getCols();
        int int12 = matrix10.getCols();
        int int13 = matrix10.getCols();
        com.operations.Matrix.Matrix[] matrixArray14 = com.operations.Matrix.MatrixDecompositions.luDecomposition(matrix10);
        com.operations.Matrix.Matrix matrix15 = com.operations.Matrix.MatrixOperations.multiply(matrix2, matrix10);
        com.operations.Matrix.Matrix matrix17 = com.operations.Matrix.MatrixTransformations.rotate2D((double) (short) 100);
        boolean boolean19 = com.operations.Matrix.MatrixUtils.compare(matrix10, matrix17, (double) (byte) 0);
        com.operations.Matrix.Matrix matrix20 = com.operations.Matrix.MatrixOperations.transpose(matrix10);
        com.operations.Matrix.Matrix matrix22 = com.operations.Matrix.MatrixOperations.scalarMultiply(matrix20, (double) 10);
        com.operations.Matrix.Matrix matrix28 = com.operations.Matrix.MatrixUtils.generateRandomMatrix(10, (int) (byte) 1, 10, 1, (long) 100);
        // The following exception was thrown during execution in test generation
        try {
            com.operations.Matrix.Matrix matrix29 = com.operations.Matrix.MatrixOperations.add(matrix22, matrix28);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Matrices must have the same dimensions for addition.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(matrix2);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertArrayEquals(doubleArray5, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertArrayEquals(doubleArray8, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 2 + "'", int11 == 2);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 2 + "'", int12 == 2);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 2 + "'", int13 == 2);
        org.junit.Assert.assertNotNull(matrixArray14);
        org.junit.Assert.assertNotNull(matrix15);
        org.junit.Assert.assertNotNull(matrix17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(matrix20);
        org.junit.Assert.assertNotNull(matrix22);
        org.junit.Assert.assertNotNull(matrix28);
    }

    @Test
    public void test1699() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1699");
        com.operations.Matrix.Matrix matrix4 = com.operations.Matrix.MatrixUtils.generateRandomMatrix(10, (int) '#', (-1), 2);
        org.junit.Assert.assertNotNull(matrix4);
    }

    @Test
    public void test1700() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1700");
        com.operations.Matrix.Matrix matrix2 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0L, (double) (byte) 10);
        double[] doubleArray5 = new double[] { 10, 'a' };
        double[] doubleArray8 = new double[] { 10, 'a' };
        double[][] doubleArray9 = new double[][] { doubleArray5, doubleArray8 };
        com.operations.Matrix.Matrix matrix10 = new com.operations.Matrix.Matrix(doubleArray9);
        int int11 = matrix10.getCols();
        int int12 = matrix10.getCols();
        int int13 = matrix10.getCols();
        com.operations.Matrix.Matrix[] matrixArray14 = com.operations.Matrix.MatrixDecompositions.luDecomposition(matrix10);
        com.operations.Matrix.Matrix matrix15 = com.operations.Matrix.MatrixOperations.multiply(matrix2, matrix10);
        com.operations.Matrix.Matrix matrix17 = com.operations.Matrix.MatrixTransformations.rotate2D((double) (short) 100);
        boolean boolean19 = com.operations.Matrix.MatrixUtils.compare(matrix10, matrix17, (double) (byte) 0);
        double[] doubleArray22 = new double[] { 10, 'a' };
        double[] doubleArray25 = new double[] { 10, 'a' };
        double[][] doubleArray26 = new double[][] { doubleArray22, doubleArray25 };
        com.operations.Matrix.Matrix matrix27 = new com.operations.Matrix.Matrix(doubleArray26);
        com.operations.Matrix.Matrix matrix28 = new com.operations.Matrix.Matrix(doubleArray26);
        com.operations.Matrix.Matrix matrix29 = new com.operations.Matrix.Matrix(doubleArray26);
        boolean boolean31 = com.operations.Matrix.MatrixUtils.compare(matrix10, matrix29, (double) (-1));
        double[] doubleArray34 = new double[] { 10, 'a' };
        double[] doubleArray37 = new double[] { 10, 'a' };
        double[][] doubleArray38 = new double[][] { doubleArray34, doubleArray37 };
        com.operations.Matrix.Matrix matrix39 = new com.operations.Matrix.Matrix(doubleArray38);
        com.operations.Matrix.Matrix matrix40 = new com.operations.Matrix.Matrix(doubleArray38);
        boolean boolean41 = com.operations.Matrix.MatrixUtils.isSquare(matrix40);
        com.operations.Matrix.Matrix matrix42 = com.operations.Matrix.MatrixOperations.multiply(matrix29, matrix40);
        com.operations.Matrix.Matrix matrix45 = com.operations.Matrix.MatrixTransformations.project2D((double) ' ', 0.0d);
        double[] doubleArray48 = new double[] { 10, 'a' };
        double[] doubleArray51 = new double[] { 10, 'a' };
        double[][] doubleArray52 = new double[][] { doubleArray48, doubleArray51 };
        com.operations.Matrix.Matrix matrix53 = new com.operations.Matrix.Matrix(doubleArray52);
        int int54 = matrix53.getCols();
        boolean boolean55 = com.operations.Matrix.MatrixUtils.isSquare(matrix53);
        com.operations.Matrix.Matrix matrix56 = com.operations.Matrix.MatrixOperations.transpose(matrix53);
        int int57 = matrix56.getRows();
        com.operations.Matrix.Matrix matrix60 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0L, (double) (byte) 10);
        double[] doubleArray63 = new double[] { 10, 'a' };
        double[] doubleArray66 = new double[] { 10, 'a' };
        double[][] doubleArray67 = new double[][] { doubleArray63, doubleArray66 };
        com.operations.Matrix.Matrix matrix68 = new com.operations.Matrix.Matrix(doubleArray67);
        int int69 = matrix68.getCols();
        int int70 = matrix68.getCols();
        int int71 = matrix68.getCols();
        com.operations.Matrix.Matrix[] matrixArray72 = com.operations.Matrix.MatrixDecompositions.luDecomposition(matrix68);
        com.operations.Matrix.Matrix matrix73 = com.operations.Matrix.MatrixOperations.multiply(matrix60, matrix68);
        com.operations.Matrix.Matrix matrix75 = com.operations.Matrix.MatrixTransformations.rotate2D((double) (short) 100);
        boolean boolean77 = com.operations.Matrix.MatrixUtils.compare(matrix68, matrix75, (double) (byte) 0);
        com.operations.Matrix.Matrix matrix78 = com.operations.Matrix.MatrixOperations.multiply(matrix56, matrix68);
        com.operations.Matrix.Matrix matrix79 = com.operations.Matrix.MatrixOperations.add(matrix45, matrix68);
        com.operations.Matrix.Matrix matrix80 = com.operations.Matrix.MatrixOperations.transpose(matrix45);
        com.operations.Matrix.Matrix matrix83 = com.operations.Matrix.MatrixTransformations.scale2D((double) (byte) 100, 350.0d);
        double double84 = com.operations.Matrix.MatrixUtils.frobeniusNorm(matrix83);
        int int85 = matrix83.getCols();
        com.operations.Matrix.Matrix matrix86 = com.operations.Matrix.MatrixOperations.multiply(matrix45, matrix83);
        int int87 = matrix45.getRows();
        com.operations.Matrix.Matrix matrix88 = com.operations.Matrix.MatrixOperations.multiply(matrix42, matrix45);
        double double89 = com.operations.Matrix.MatrixUtils.frobeniusNorm(matrix45);
        com.operations.Matrix.Matrix matrix91 = com.operations.Matrix.MatrixOperations.scalarMultiply(matrix45, 0.01745240643728351d);
        // The following exception was thrown during execution in test generation
        try {
            com.operations.Matrix.Matrix matrix92 = com.operations.Matrix.MatrixDecompositions.choleskyDecomposition(matrix91);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Matrix is not positive definite.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(matrix2);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertArrayEquals(doubleArray5, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertArrayEquals(doubleArray8, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 2 + "'", int11 == 2);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 2 + "'", int12 == 2);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 2 + "'", int13 == 2);
        org.junit.Assert.assertNotNull(matrixArray14);
        org.junit.Assert.assertNotNull(matrix15);
        org.junit.Assert.assertNotNull(matrix17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertArrayEquals(doubleArray22, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertArrayEquals(doubleArray25, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertArrayEquals(doubleArray34, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertArrayEquals(doubleArray37, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertNotNull(matrix42);
        org.junit.Assert.assertNotNull(matrix45);
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertArrayEquals(doubleArray48, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertArrayEquals(doubleArray51, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 2 + "'", int54 == 2);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + true + "'", boolean55 == true);
        org.junit.Assert.assertNotNull(matrix56);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 2 + "'", int57 == 2);
        org.junit.Assert.assertNotNull(matrix60);
        org.junit.Assert.assertNotNull(doubleArray63);
        org.junit.Assert.assertArrayEquals(doubleArray63, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray66);
        org.junit.Assert.assertArrayEquals(doubleArray66, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray67);
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 2 + "'", int69 == 2);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 2 + "'", int70 == 2);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 2 + "'", int71 == 2);
        org.junit.Assert.assertNotNull(matrixArray72);
        org.junit.Assert.assertNotNull(matrix73);
        org.junit.Assert.assertNotNull(matrix75);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertNotNull(matrix78);
        org.junit.Assert.assertNotNull(matrix79);
        org.junit.Assert.assertNotNull(matrix80);
        org.junit.Assert.assertNotNull(matrix83);
        org.junit.Assert.assertTrue("'" + double84 + "' != '" + 364.0054944640259d + "'", double84 == 364.0054944640259d);
        org.junit.Assert.assertTrue("'" + int85 + "' != '" + 2 + "'", int85 == 2);
        org.junit.Assert.assertNotNull(matrix86);
        org.junit.Assert.assertTrue("'" + int87 + "' != '" + 2 + "'", int87 == 2);
        org.junit.Assert.assertNotNull(matrix88);
        org.junit.Assert.assertTrue("'" + double89 + "' != '" + 32.0d + "'", double89 == 32.0d);
        org.junit.Assert.assertNotNull(matrix91);
    }

    @Test
    public void test1701() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1701");
        double[] doubleArray2 = new double[] { 10, 'a' };
        double[] doubleArray5 = new double[] { 10, 'a' };
        double[][] doubleArray6 = new double[][] { doubleArray2, doubleArray5 };
        com.operations.Matrix.Matrix matrix7 = new com.operations.Matrix.Matrix(doubleArray6);
        com.operations.Matrix.Matrix matrix8 = new com.operations.Matrix.Matrix(doubleArray6);
        com.operations.Matrix.Matrix matrix10 = com.operations.Matrix.MatrixTransformations.rotate2D((double) (short) 100);
        double[] doubleArray13 = new double[] { 137.90576492663388d, (byte) -1 };
        double[] doubleArray14 = com.operations.Matrix.MatrixSolver.solveGaussian(matrix10, doubleArray13);
        com.operations.Matrix.Matrix matrix15 = com.operations.Matrix.MatrixOperations.add(matrix8, matrix10);
        com.operations.Matrix.Matrix matrix16 = com.operations.Matrix.MatrixDecompositions.choleskyDecomposition(matrix8);
        com.operations.Matrix.Matrix matrix19 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0L, (double) (byte) 10);
        double[] doubleArray22 = new double[] { 10, 'a' };
        double[] doubleArray25 = new double[] { 10, 'a' };
        double[][] doubleArray26 = new double[][] { doubleArray22, doubleArray25 };
        com.operations.Matrix.Matrix matrix27 = new com.operations.Matrix.Matrix(doubleArray26);
        int int28 = matrix27.getCols();
        int int29 = matrix27.getCols();
        int int30 = matrix27.getCols();
        com.operations.Matrix.Matrix[] matrixArray31 = com.operations.Matrix.MatrixDecompositions.luDecomposition(matrix27);
        com.operations.Matrix.Matrix matrix32 = com.operations.Matrix.MatrixOperations.multiply(matrix19, matrix27);
        com.operations.Matrix.Matrix matrix34 = com.operations.Matrix.MatrixTransformations.rotate2D((double) (short) 100);
        boolean boolean36 = com.operations.Matrix.MatrixUtils.compare(matrix27, matrix34, (double) (byte) 0);
        com.operations.Matrix.Matrix matrix37 = com.operations.Matrix.MatrixOperations.transpose(matrix27);
        com.operations.Matrix.Matrix matrix39 = com.operations.Matrix.MatrixOperations.scalarMultiply(matrix37, (double) 10);
        com.operations.Matrix.Matrix matrix40 = com.operations.Matrix.MatrixOperations.add(matrix16, matrix37);
        com.operations.Matrix.Matrix matrix42 = com.operations.Matrix.MatrixOperations.scalarMultiply(matrix16, 400.0d);
        // The following exception was thrown during execution in test generation
        try {
            matrix42.setValue((int) (byte) 0, 100, 1.969615506024416d);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: Index 100 out of bounds for length 2");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertArrayEquals(doubleArray2, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertArrayEquals(doubleArray5, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertNotNull(matrix10);
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertArrayEquals(doubleArray13, new double[] { 137.90576492663388d, (-1.0d) }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertArrayEquals(doubleArray14, new double[] { (-24.931892522286255d), (-135.63701830716116d) }, 1.0E-15);
        org.junit.Assert.assertNotNull(matrix15);
        org.junit.Assert.assertNotNull(matrix16);
        org.junit.Assert.assertNotNull(matrix19);
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertArrayEquals(doubleArray22, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertArrayEquals(doubleArray25, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 2 + "'", int28 == 2);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 2 + "'", int29 == 2);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 2 + "'", int30 == 2);
        org.junit.Assert.assertNotNull(matrixArray31);
        org.junit.Assert.assertNotNull(matrix32);
        org.junit.Assert.assertNotNull(matrix34);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(matrix37);
        org.junit.Assert.assertNotNull(matrix39);
        org.junit.Assert.assertNotNull(matrix40);
        org.junit.Assert.assertNotNull(matrix42);
    }

    @Test
    public void test1702() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1702");
        com.operations.Matrix.Matrix matrix2 = com.operations.Matrix.MatrixTransformations.scale2D((double) (-1), 400.0d);
        org.junit.Assert.assertNotNull(matrix2);
    }

    @Test
    public void test1703() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1703");
        com.operations.Matrix.Matrix matrix2 = com.operations.Matrix.MatrixTransformations.scale2D((double) 100, 350.0d);
        org.junit.Assert.assertNotNull(matrix2);
    }

    @Test
    public void test1704() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1704");
        double[] doubleArray2 = new double[] { 10, 'a' };
        double[] doubleArray5 = new double[] { 10, 'a' };
        double[][] doubleArray6 = new double[][] { doubleArray2, doubleArray5 };
        com.operations.Matrix.Matrix matrix7 = new com.operations.Matrix.Matrix(doubleArray6);
        int int8 = matrix7.getCols();
        boolean boolean9 = com.operations.Matrix.MatrixUtils.isSquare(matrix7);
        com.operations.Matrix.Matrix matrix10 = com.operations.Matrix.MatrixOperations.transpose(matrix7);
        int int11 = matrix10.getRows();
        com.operations.Matrix.Matrix matrix14 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0L, (double) (byte) 10);
        double[] doubleArray17 = new double[] { 10, 'a' };
        double[] doubleArray20 = new double[] { 10, 'a' };
        double[][] doubleArray21 = new double[][] { doubleArray17, doubleArray20 };
        com.operations.Matrix.Matrix matrix22 = new com.operations.Matrix.Matrix(doubleArray21);
        int int23 = matrix22.getCols();
        int int24 = matrix22.getCols();
        int int25 = matrix22.getCols();
        com.operations.Matrix.Matrix[] matrixArray26 = com.operations.Matrix.MatrixDecompositions.luDecomposition(matrix22);
        com.operations.Matrix.Matrix matrix27 = com.operations.Matrix.MatrixOperations.multiply(matrix14, matrix22);
        com.operations.Matrix.Matrix matrix29 = com.operations.Matrix.MatrixTransformations.rotate2D((double) (short) 100);
        boolean boolean31 = com.operations.Matrix.MatrixUtils.compare(matrix22, matrix29, (double) (byte) 0);
        com.operations.Matrix.Matrix matrix32 = com.operations.Matrix.MatrixOperations.multiply(matrix10, matrix22);
        int int33 = matrix10.getCols();
        com.operations.Matrix.Matrix matrix35 = com.operations.Matrix.MatrixTransformations.rotate2D((double) (short) 0);
        boolean boolean37 = com.operations.Matrix.MatrixUtils.compare(matrix10, matrix35, (double) (short) 100);
        double[] doubleArray40 = new double[] { 10, 'a' };
        double[] doubleArray43 = new double[] { 10, 'a' };
        double[][] doubleArray44 = new double[][] { doubleArray40, doubleArray43 };
        com.operations.Matrix.Matrix matrix45 = new com.operations.Matrix.Matrix(doubleArray44);
        com.operations.Matrix.Matrix matrix46 = new com.operations.Matrix.Matrix(doubleArray44);
        int int47 = matrix46.getCols();
        com.operations.Matrix.Matrix matrix48 = com.operations.Matrix.MatrixOperations.add(matrix35, matrix46);
        int int49 = matrix46.getRows();
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertArrayEquals(doubleArray2, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertArrayEquals(doubleArray5, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 2 + "'", int8 == 2);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertNotNull(matrix10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 2 + "'", int11 == 2);
        org.junit.Assert.assertNotNull(matrix14);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertArrayEquals(doubleArray17, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertArrayEquals(doubleArray20, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 2 + "'", int23 == 2);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 2 + "'", int24 == 2);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 2 + "'", int25 == 2);
        org.junit.Assert.assertNotNull(matrixArray26);
        org.junit.Assert.assertNotNull(matrix27);
        org.junit.Assert.assertNotNull(matrix29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(matrix32);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 2 + "'", int33 == 2);
        org.junit.Assert.assertNotNull(matrix35);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertArrayEquals(doubleArray40, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertArrayEquals(doubleArray43, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 2 + "'", int47 == 2);
        org.junit.Assert.assertNotNull(matrix48);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 2 + "'", int49 == 2);
    }

    @Test
    public void test1705() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1705");
        com.operations.Matrix.Matrix matrix2 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0L, (double) (byte) 10);
        int int3 = matrix2.getRows();
        com.operations.Matrix.Matrix matrix9 = com.operations.Matrix.MatrixUtils.generateRandomMatrix(100, (int) (byte) 1, (int) '#', (int) '#', 1L);
        boolean boolean11 = com.operations.Matrix.MatrixUtils.compare(matrix2, matrix9, (double) 1.0f);
        int int12 = matrix2.getCols();
        com.operations.Matrix.Matrix matrix15 = com.operations.Matrix.MatrixTransformations.project2D((double) 100.0f, (double) (short) -1);
        com.operations.Matrix.Matrix matrix16 = com.operations.Matrix.MatrixOperations.add(matrix2, matrix15);
        com.operations.Matrix.Matrix matrix17 = com.operations.Matrix.MatrixOperations.transpose(matrix15);
        matrix17.print();
        org.junit.Assert.assertNotNull(matrix2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 2 + "'", int3 == 2);
        org.junit.Assert.assertNotNull(matrix9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 2 + "'", int12 == 2);
        org.junit.Assert.assertNotNull(matrix15);
        org.junit.Assert.assertNotNull(matrix16);
        org.junit.Assert.assertNotNull(matrix17);
    }

    @Test
    public void test1706() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1706");
        com.operations.Matrix.Matrix matrix2 = com.operations.Matrix.MatrixTransformations.project2D(3500.0d, 0.9998476951563913d);
        java.lang.Class<?> wildcardClass3 = matrix2.getClass();
        org.junit.Assert.assertNotNull(matrix2);
        org.junit.Assert.assertNotNull(wildcardClass3);
    }

    @Test
    public void test1707() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1707");
        com.operations.Matrix.Matrix matrix5 = com.operations.Matrix.MatrixUtils.generateRandomMatrix(100, (int) (short) 10, 0, (-1), (long) (byte) -1);
        com.operations.Matrix.Matrix matrix8 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0L, (double) (byte) 10);
        double[] doubleArray11 = new double[] { 10, 'a' };
        double[] doubleArray14 = new double[] { 10, 'a' };
        double[][] doubleArray15 = new double[][] { doubleArray11, doubleArray14 };
        com.operations.Matrix.Matrix matrix16 = new com.operations.Matrix.Matrix(doubleArray15);
        int int17 = matrix16.getCols();
        int int18 = matrix16.getCols();
        int int19 = matrix16.getCols();
        com.operations.Matrix.Matrix[] matrixArray20 = com.operations.Matrix.MatrixDecompositions.luDecomposition(matrix16);
        com.operations.Matrix.Matrix matrix21 = com.operations.Matrix.MatrixOperations.multiply(matrix8, matrix16);
        com.operations.Matrix.Matrix matrix23 = com.operations.Matrix.MatrixTransformations.rotate2D((double) (short) 100);
        boolean boolean25 = com.operations.Matrix.MatrixUtils.compare(matrix16, matrix23, (double) (byte) 0);
        double[] doubleArray28 = new double[] { 10, 'a' };
        double[] doubleArray31 = new double[] { 10, 'a' };
        double[][] doubleArray32 = new double[][] { doubleArray28, doubleArray31 };
        com.operations.Matrix.Matrix matrix33 = new com.operations.Matrix.Matrix(doubleArray32);
        com.operations.Matrix.Matrix matrix34 = new com.operations.Matrix.Matrix(doubleArray32);
        com.operations.Matrix.Matrix matrix35 = new com.operations.Matrix.Matrix(doubleArray32);
        boolean boolean37 = com.operations.Matrix.MatrixUtils.compare(matrix16, matrix35, (double) (-1));
        com.operations.Matrix.Matrix matrix40 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0L, (double) (byte) 10);
        double[] doubleArray43 = new double[] { 10, 'a' };
        double[] doubleArray46 = new double[] { 10, 'a' };
        double[][] doubleArray47 = new double[][] { doubleArray43, doubleArray46 };
        com.operations.Matrix.Matrix matrix48 = new com.operations.Matrix.Matrix(doubleArray47);
        int int49 = matrix48.getCols();
        int int50 = matrix48.getCols();
        int int51 = matrix48.getCols();
        com.operations.Matrix.Matrix[] matrixArray52 = com.operations.Matrix.MatrixDecompositions.luDecomposition(matrix48);
        com.operations.Matrix.Matrix matrix53 = com.operations.Matrix.MatrixOperations.multiply(matrix40, matrix48);
        boolean boolean55 = com.operations.Matrix.MatrixUtils.compare(matrix35, matrix40, (double) 10L);
        int int56 = matrix35.getRows();
        com.operations.Matrix.Matrix matrix57 = com.operations.Matrix.MatrixDecompositions.choleskyDecomposition(matrix35);
        boolean boolean59 = com.operations.Matrix.MatrixUtils.compare(matrix5, matrix35, (double) (-1.0f));
        double double60 = com.operations.Matrix.MatrixUtils.frobeniusNorm(matrix5);
        org.junit.Assert.assertNotNull(matrix5);
        org.junit.Assert.assertNotNull(matrix8);
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertArrayEquals(doubleArray11, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertArrayEquals(doubleArray14, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 2 + "'", int17 == 2);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 2 + "'", int18 == 2);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 2 + "'", int19 == 2);
        org.junit.Assert.assertNotNull(matrixArray20);
        org.junit.Assert.assertNotNull(matrix21);
        org.junit.Assert.assertNotNull(matrix23);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertArrayEquals(doubleArray28, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertArrayEquals(doubleArray31, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(matrix40);
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertArrayEquals(doubleArray43, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray46);
        org.junit.Assert.assertArrayEquals(doubleArray46, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 2 + "'", int49 == 2);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 2 + "'", int50 == 2);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 2 + "'", int51 == 2);
        org.junit.Assert.assertNotNull(matrixArray52);
        org.junit.Assert.assertNotNull(matrix53);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 2 + "'", int56 == 2);
        org.junit.Assert.assertNotNull(matrix57);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertTrue("'" + double60 + "' != '" + 18.14229652832025d + "'", double60 == 18.14229652832025d);
    }

    @Test
    public void test1708() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1708");
        com.operations.Matrix.Matrix matrix2 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0L, (double) (byte) 10);
        int int3 = matrix2.getRows();
        com.operations.Matrix.Matrix matrix5 = com.operations.Matrix.MatrixOperations.scalarMultiply(matrix2, (double) 2);
        double double6 = com.operations.Matrix.MatrixUtils.frobeniusNorm(matrix2);
        int int7 = matrix2.getRows();
        com.operations.Matrix.Matrix matrix8 = com.operations.Matrix.MatrixOperations.transpose(matrix2);
        double[][] doubleArray9 = matrix2.getData();
        org.junit.Assert.assertNotNull(matrix2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 2 + "'", int3 == 2);
        org.junit.Assert.assertNotNull(matrix5);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 10.0d + "'", double6 == 10.0d);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 2 + "'", int7 == 2);
        org.junit.Assert.assertNotNull(matrix8);
        org.junit.Assert.assertNotNull(doubleArray9);
    }

    @Test
    public void test1709() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1709");
        com.operations.Matrix.Matrix matrix2 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0L, (double) 10L);
        com.operations.Matrix.Matrix matrix5 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0L, (double) (byte) 10);
        double[] doubleArray8 = new double[] { 10, 'a' };
        double[] doubleArray11 = new double[] { 10, 'a' };
        double[][] doubleArray12 = new double[][] { doubleArray8, doubleArray11 };
        com.operations.Matrix.Matrix matrix13 = new com.operations.Matrix.Matrix(doubleArray12);
        int int14 = matrix13.getCols();
        int int15 = matrix13.getCols();
        int int16 = matrix13.getCols();
        com.operations.Matrix.Matrix[] matrixArray17 = com.operations.Matrix.MatrixDecompositions.luDecomposition(matrix13);
        com.operations.Matrix.Matrix matrix18 = com.operations.Matrix.MatrixOperations.multiply(matrix5, matrix13);
        com.operations.Matrix.Matrix matrix20 = com.operations.Matrix.MatrixTransformations.rotate2D((double) (short) 100);
        boolean boolean22 = com.operations.Matrix.MatrixUtils.compare(matrix13, matrix20, (double) (byte) 0);
        double[] doubleArray25 = new double[] { 10, 'a' };
        double[] doubleArray28 = new double[] { 10, 'a' };
        double[][] doubleArray29 = new double[][] { doubleArray25, doubleArray28 };
        com.operations.Matrix.Matrix matrix30 = new com.operations.Matrix.Matrix(doubleArray29);
        com.operations.Matrix.Matrix matrix31 = new com.operations.Matrix.Matrix(doubleArray29);
        com.operations.Matrix.Matrix matrix32 = new com.operations.Matrix.Matrix(doubleArray29);
        boolean boolean34 = com.operations.Matrix.MatrixUtils.compare(matrix13, matrix32, (double) (-1));
        com.operations.Matrix.Matrix matrix36 = com.operations.Matrix.MatrixTransformations.rotate2D((double) (short) 100);
        double[] doubleArray39 = new double[] { 137.90576492663388d, (byte) -1 };
        double[] doubleArray40 = com.operations.Matrix.MatrixSolver.solveGaussian(matrix36, doubleArray39);
        com.operations.Matrix.Matrix matrix43 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0L, (double) (byte) 10);
        double[] doubleArray46 = new double[] { 10, 'a' };
        double[] doubleArray49 = new double[] { 10, 'a' };
        double[][] doubleArray50 = new double[][] { doubleArray46, doubleArray49 };
        com.operations.Matrix.Matrix matrix51 = new com.operations.Matrix.Matrix(doubleArray50);
        int int52 = matrix51.getCols();
        int int53 = matrix51.getCols();
        int int54 = matrix51.getCols();
        com.operations.Matrix.Matrix[] matrixArray55 = com.operations.Matrix.MatrixDecompositions.luDecomposition(matrix51);
        com.operations.Matrix.Matrix matrix56 = com.operations.Matrix.MatrixOperations.multiply(matrix43, matrix51);
        boolean boolean58 = com.operations.Matrix.MatrixUtils.compare(matrix36, matrix43, (double) (-1L));
        com.operations.Matrix.Matrix matrix59 = com.operations.Matrix.MatrixOperations.add(matrix32, matrix43);
        boolean boolean61 = com.operations.Matrix.MatrixUtils.compare(matrix2, matrix59, 146.4308710620817d);
        double double62 = com.operations.Matrix.MatrixUtils.frobeniusNorm(matrix2);
        org.junit.Assert.assertNotNull(matrix2);
        org.junit.Assert.assertNotNull(matrix5);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertArrayEquals(doubleArray8, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertArrayEquals(doubleArray11, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 2 + "'", int14 == 2);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 2 + "'", int15 == 2);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 2 + "'", int16 == 2);
        org.junit.Assert.assertNotNull(matrixArray17);
        org.junit.Assert.assertNotNull(matrix18);
        org.junit.Assert.assertNotNull(matrix20);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertArrayEquals(doubleArray25, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertArrayEquals(doubleArray28, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(matrix36);
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertArrayEquals(doubleArray39, new double[] { 137.90576492663388d, (-1.0d) }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertArrayEquals(doubleArray40, new double[] { (-24.931892522286255d), (-135.63701830716116d) }, 1.0E-15);
        org.junit.Assert.assertNotNull(matrix43);
        org.junit.Assert.assertNotNull(doubleArray46);
        org.junit.Assert.assertArrayEquals(doubleArray46, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertArrayEquals(doubleArray49, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 2 + "'", int52 == 2);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 2 + "'", int53 == 2);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 2 + "'", int54 == 2);
        org.junit.Assert.assertNotNull(matrixArray55);
        org.junit.Assert.assertNotNull(matrix56);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(matrix59);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + true + "'", boolean61 == true);
        org.junit.Assert.assertTrue("'" + double62 + "' != '" + 10.0d + "'", double62 == 10.0d);
    }

    @Test
    public void test1710() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1710");
        // The following exception was thrown during execution in test generation
        try {
            com.operations.Matrix.Matrix matrix5 = com.operations.Matrix.MatrixUtils.generateRandomMatrix((int) '#', (-1), (-1), (int) (byte) 10, (long) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.NegativeArraySizeException; message: -1");
        } catch (java.lang.NegativeArraySizeException e) {
            // Expected exception.
        }
    }

    @Test
    public void test1711() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1711");
        com.operations.Matrix.Matrix matrix2 = com.operations.Matrix.MatrixTransformations.scale2D((double) (byte) 10, (double) 10);
        double[] doubleArray5 = new double[] { 10, 'a' };
        double[] doubleArray8 = new double[] { 10, 'a' };
        double[][] doubleArray9 = new double[][] { doubleArray5, doubleArray8 };
        com.operations.Matrix.Matrix matrix10 = new com.operations.Matrix.Matrix(doubleArray9);
        com.operations.Matrix.Matrix matrix11 = new com.operations.Matrix.Matrix(doubleArray9);
        boolean boolean12 = com.operations.Matrix.MatrixUtils.isSquare(matrix11);
        double[] doubleArray15 = new double[] { 10, 'a' };
        double[] doubleArray18 = new double[] { 10, 'a' };
        double[][] doubleArray19 = new double[][] { doubleArray15, doubleArray18 };
        com.operations.Matrix.Matrix matrix20 = new com.operations.Matrix.Matrix(doubleArray19);
        int int21 = matrix20.getCols();
        int int22 = matrix20.getCols();
        matrix20.print();
        double[] doubleArray26 = new double[] { 10, 'a' };
        double[] doubleArray29 = new double[] { 10, 'a' };
        double[][] doubleArray30 = new double[][] { doubleArray26, doubleArray29 };
        com.operations.Matrix.Matrix matrix31 = new com.operations.Matrix.Matrix(doubleArray30);
        boolean boolean33 = com.operations.Matrix.MatrixUtils.compare(matrix20, matrix31, (double) (-1));
        com.operations.Matrix.Matrix matrix34 = com.operations.Matrix.MatrixOperations.subtract(matrix11, matrix31);
        com.operations.Matrix.Matrix[] matrixArray35 = com.operations.Matrix.MatrixDecompositions.luDecomposition(matrix34);
        double[][] doubleArray36 = matrix34.getData();
        com.operations.Matrix.Matrix matrix37 = new com.operations.Matrix.Matrix(doubleArray36);
        com.operations.Matrix.Matrix matrix38 = com.operations.Matrix.MatrixOperations.multiply(matrix2, matrix37);
        com.operations.Matrix.Matrix matrix40 = com.operations.Matrix.MatrixOperations.scalarMultiply(matrix37, (double) (short) -1);
        com.operations.Matrix.Matrix matrix41 = com.operations.Matrix.MatrixOperations.transpose(matrix40);
        double[][] doubleArray42 = matrix41.getData();
        com.operations.Matrix.Matrix matrix43 = new com.operations.Matrix.Matrix(doubleArray42);
        boolean boolean44 = com.operations.Matrix.MatrixUtils.isSymmetric(matrix43);
        org.junit.Assert.assertNotNull(matrix2);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertArrayEquals(doubleArray5, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertArrayEquals(doubleArray8, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertArrayEquals(doubleArray15, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertArrayEquals(doubleArray18, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 2 + "'", int21 == 2);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 2 + "'", int22 == 2);
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertArrayEquals(doubleArray26, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertArrayEquals(doubleArray29, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(matrix34);
        org.junit.Assert.assertNotNull(matrixArray35);
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertNotNull(matrix38);
        org.junit.Assert.assertNotNull(matrix40);
        org.junit.Assert.assertNotNull(matrix41);
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
    }

    @Test
    public void test1712() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1712");
        com.operations.Matrix.Matrix matrix2 = com.operations.Matrix.MatrixTransformations.scale2D((double) 100, (double) (short) 1);
        double[][] doubleArray3 = matrix2.getData();
        org.junit.Assert.assertNotNull(matrix2);
        org.junit.Assert.assertNotNull(doubleArray3);
    }

    @Test
    public void test1713() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1713");
        com.operations.Matrix.Matrix matrix2 = com.operations.Matrix.MatrixTransformations.project2D(137.90576492663388d, (double) (byte) 10);
        org.junit.Assert.assertNotNull(matrix2);
    }

    @Test
    public void test1714() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1714");
        com.operations.Matrix.Matrix matrix1 = com.operations.Matrix.MatrixTransformations.rotate2D(350.0d);
        int int2 = matrix1.getRows();
        org.junit.Assert.assertNotNull(matrix1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 2 + "'", int2 == 2);
    }

    @Test
    public void test1715() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1715");
        com.operations.Matrix.Matrix matrix2 = com.operations.Matrix.MatrixTransformations.project2D(260.95643973734866d, 137.15495886388925d);
        double[][] doubleArray3 = matrix2.getData();
        com.operations.Matrix.Matrix matrix6 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0L, (double) (byte) 10);
        int int7 = matrix6.getRows();
        com.operations.Matrix.Matrix matrix9 = com.operations.Matrix.MatrixOperations.scalarMultiply(matrix6, (double) 2);
        matrix6.print();
        com.operations.Matrix.Matrix matrix16 = com.operations.Matrix.MatrixUtils.generateRandomMatrix((int) (short) 10, (int) (short) 100, (int) (byte) -1, (-1), (long) (byte) 10);
        boolean boolean18 = com.operations.Matrix.MatrixUtils.compare(matrix6, matrix16, (double) (short) 10);
        boolean boolean20 = com.operations.Matrix.MatrixUtils.compare(matrix2, matrix6, (double) 100L);
        matrix2.print();
        java.lang.Class<?> wildcardClass22 = matrix2.getClass();
        org.junit.Assert.assertNotNull(matrix2);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertNotNull(matrix6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 2 + "'", int7 == 2);
        org.junit.Assert.assertNotNull(matrix9);
        org.junit.Assert.assertNotNull(matrix16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(wildcardClass22);
    }

    @Test
    public void test1716() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1716");
        com.operations.Matrix.Matrix matrix1 = com.operations.Matrix.MatrixTransformations.rotate2D(100.0d);
        int int2 = matrix1.getCols();
        double[][] doubleArray3 = matrix1.getData();
        double double4 = com.operations.Matrix.MatrixUtils.frobeniusNorm(matrix1);
        com.operations.Matrix.Matrix matrix6 = com.operations.Matrix.MatrixOperations.scalarMultiply(matrix1, (double) (short) 10);
        com.operations.Matrix.Matrix[] matrixArray7 = com.operations.Matrix.MatrixDecompositions.luDecomposition(matrix1);
        com.operations.Matrix.Matrix[] matrixArray8 = com.operations.Matrix.MatrixDecompositions.luDecomposition(matrix1);
        com.operations.Matrix.Matrix matrix11 = com.operations.Matrix.MatrixTransformations.project2D((double) ' ', 0.0d);
        double[] doubleArray14 = new double[] { 10, 'a' };
        double[] doubleArray17 = new double[] { 10, 'a' };
        double[][] doubleArray18 = new double[][] { doubleArray14, doubleArray17 };
        com.operations.Matrix.Matrix matrix19 = new com.operations.Matrix.Matrix(doubleArray18);
        int int20 = matrix19.getCols();
        boolean boolean21 = com.operations.Matrix.MatrixUtils.isSquare(matrix19);
        com.operations.Matrix.Matrix matrix22 = com.operations.Matrix.MatrixOperations.transpose(matrix19);
        int int23 = matrix22.getRows();
        com.operations.Matrix.Matrix matrix26 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0L, (double) (byte) 10);
        double[] doubleArray29 = new double[] { 10, 'a' };
        double[] doubleArray32 = new double[] { 10, 'a' };
        double[][] doubleArray33 = new double[][] { doubleArray29, doubleArray32 };
        com.operations.Matrix.Matrix matrix34 = new com.operations.Matrix.Matrix(doubleArray33);
        int int35 = matrix34.getCols();
        int int36 = matrix34.getCols();
        int int37 = matrix34.getCols();
        com.operations.Matrix.Matrix[] matrixArray38 = com.operations.Matrix.MatrixDecompositions.luDecomposition(matrix34);
        com.operations.Matrix.Matrix matrix39 = com.operations.Matrix.MatrixOperations.multiply(matrix26, matrix34);
        com.operations.Matrix.Matrix matrix41 = com.operations.Matrix.MatrixTransformations.rotate2D((double) (short) 100);
        boolean boolean43 = com.operations.Matrix.MatrixUtils.compare(matrix34, matrix41, (double) (byte) 0);
        com.operations.Matrix.Matrix matrix44 = com.operations.Matrix.MatrixOperations.multiply(matrix22, matrix34);
        com.operations.Matrix.Matrix matrix45 = com.operations.Matrix.MatrixOperations.add(matrix11, matrix34);
        com.operations.Matrix.Matrix matrix46 = com.operations.Matrix.MatrixOperations.transpose(matrix11);
        com.operations.Matrix.Matrix matrix49 = com.operations.Matrix.MatrixTransformations.scale2D((double) (byte) 100, 350.0d);
        double double50 = com.operations.Matrix.MatrixUtils.frobeniusNorm(matrix49);
        int int51 = matrix49.getCols();
        com.operations.Matrix.Matrix matrix52 = com.operations.Matrix.MatrixOperations.multiply(matrix11, matrix49);
        int int53 = matrix11.getRows();
        com.operations.Matrix.Matrix matrix54 = com.operations.Matrix.MatrixOperations.add(matrix1, matrix11);
        boolean boolean55 = com.operations.Matrix.MatrixUtils.isSquare(matrix1);
        org.junit.Assert.assertNotNull(matrix1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 2 + "'", int2 == 2);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertTrue("'" + double4 + "' != '" + 1.414213562373095d + "'", double4 == 1.414213562373095d);
        org.junit.Assert.assertNotNull(matrix6);
        org.junit.Assert.assertNotNull(matrixArray7);
        org.junit.Assert.assertNotNull(matrixArray8);
        org.junit.Assert.assertNotNull(matrix11);
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertArrayEquals(doubleArray14, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertArrayEquals(doubleArray17, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 2 + "'", int20 == 2);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertNotNull(matrix22);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 2 + "'", int23 == 2);
        org.junit.Assert.assertNotNull(matrix26);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertArrayEquals(doubleArray29, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertArrayEquals(doubleArray32, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 2 + "'", int35 == 2);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 2 + "'", int36 == 2);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 2 + "'", int37 == 2);
        org.junit.Assert.assertNotNull(matrixArray38);
        org.junit.Assert.assertNotNull(matrix39);
        org.junit.Assert.assertNotNull(matrix41);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(matrix44);
        org.junit.Assert.assertNotNull(matrix45);
        org.junit.Assert.assertNotNull(matrix46);
        org.junit.Assert.assertNotNull(matrix49);
        org.junit.Assert.assertTrue("'" + double50 + "' != '" + 364.0054944640259d + "'", double50 == 364.0054944640259d);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 2 + "'", int51 == 2);
        org.junit.Assert.assertNotNull(matrix52);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 2 + "'", int53 == 2);
        org.junit.Assert.assertNotNull(matrix54);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + true + "'", boolean55 == true);
    }

    @Test
    public void test1717() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1717");
        com.operations.Matrix.Matrix matrix2 = com.operations.Matrix.MatrixTransformations.project2D(35.0d, 32.0d);
        int int3 = matrix2.getRows();
        org.junit.Assert.assertNotNull(matrix2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 2 + "'", int3 == 2);
    }

    @Test
    public void test1718() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1718");
        com.operations.Matrix.Matrix matrix1 = com.operations.Matrix.MatrixTransformations.rotate2D((double) 1.0f);
        com.operations.Matrix.Matrix matrix4 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0L, (double) (byte) 10);
        int int5 = matrix4.getRows();
        com.operations.Matrix.Matrix matrix7 = com.operations.Matrix.MatrixOperations.scalarMultiply(matrix4, (double) 2);
        double double8 = com.operations.Matrix.MatrixUtils.frobeniusNorm(matrix4);
        com.operations.Matrix.Matrix matrix11 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0L, (double) (byte) 10);
        int int12 = matrix11.getRows();
        com.operations.Matrix.Matrix matrix14 = com.operations.Matrix.MatrixOperations.scalarMultiply(matrix11, (double) 2);
        com.operations.Matrix.Matrix matrix15 = com.operations.Matrix.MatrixOperations.subtract(matrix4, matrix14);
        com.operations.Matrix.Matrix matrix16 = com.operations.Matrix.MatrixOperations.add(matrix1, matrix14);
        matrix1.print();
        double[] doubleArray20 = new double[] { 10, 'a' };
        double[] doubleArray23 = new double[] { 10, 'a' };
        double[][] doubleArray24 = new double[][] { doubleArray20, doubleArray23 };
        com.operations.Matrix.Matrix matrix25 = new com.operations.Matrix.Matrix(doubleArray24);
        com.operations.Matrix.Matrix matrix26 = com.operations.Matrix.MatrixOperations.transpose(matrix25);
        com.operations.Matrix.Matrix matrix29 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0L, (double) (byte) 10);
        int int30 = matrix29.getRows();
        com.operations.Matrix.Matrix matrix36 = com.operations.Matrix.MatrixUtils.generateRandomMatrix(100, (int) (byte) 1, (int) '#', (int) '#', 1L);
        boolean boolean38 = com.operations.Matrix.MatrixUtils.compare(matrix29, matrix36, (double) 1.0f);
        com.operations.Matrix.Matrix matrix40 = com.operations.Matrix.MatrixOperations.scalarMultiply(matrix29, (double) 1L);
        matrix29.print();
        com.operations.Matrix.Matrix matrix42 = com.operations.Matrix.MatrixOperations.multiply(matrix26, matrix29);
        com.operations.Matrix.Matrix matrix43 = com.operations.Matrix.MatrixOperations.multiply(matrix1, matrix29);
        com.operations.Matrix.Matrix matrix46 = com.operations.Matrix.MatrixTransformations.project2D((double) 100, 35.0d);
        com.operations.Matrix.Matrix matrix47 = com.operations.Matrix.MatrixOperations.subtract(matrix29, matrix46);
        matrix47.print();
        // The following exception was thrown during execution in test generation
        try {
            com.operations.Matrix.Matrix matrix49 = com.operations.Matrix.MatrixDecompositions.choleskyDecomposition(matrix47);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Matrix is not positive definite.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(matrix1);
        org.junit.Assert.assertNotNull(matrix4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 2 + "'", int5 == 2);
        org.junit.Assert.assertNotNull(matrix7);
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 10.0d + "'", double8 == 10.0d);
        org.junit.Assert.assertNotNull(matrix11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 2 + "'", int12 == 2);
        org.junit.Assert.assertNotNull(matrix14);
        org.junit.Assert.assertNotNull(matrix15);
        org.junit.Assert.assertNotNull(matrix16);
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertArrayEquals(doubleArray20, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertArrayEquals(doubleArray23, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertNotNull(matrix26);
        org.junit.Assert.assertNotNull(matrix29);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 2 + "'", int30 == 2);
        org.junit.Assert.assertNotNull(matrix36);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(matrix40);
        org.junit.Assert.assertNotNull(matrix42);
        org.junit.Assert.assertNotNull(matrix43);
        org.junit.Assert.assertNotNull(matrix46);
        org.junit.Assert.assertNotNull(matrix47);
    }

    @Test
    public void test1719() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1719");
        com.operations.Matrix.Matrix matrix2 = com.operations.Matrix.MatrixTransformations.project2D(3500.0d, 137.15495886388925d);
        org.junit.Assert.assertNotNull(matrix2);
    }

    @Test
    public void test1720() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1720");
        com.operations.Matrix.Matrix matrix2 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0L, (double) (byte) 10);
        double[] doubleArray5 = new double[] { 10, 'a' };
        double[] doubleArray8 = new double[] { 10, 'a' };
        double[][] doubleArray9 = new double[][] { doubleArray5, doubleArray8 };
        com.operations.Matrix.Matrix matrix10 = new com.operations.Matrix.Matrix(doubleArray9);
        int int11 = matrix10.getCols();
        int int12 = matrix10.getCols();
        int int13 = matrix10.getCols();
        com.operations.Matrix.Matrix[] matrixArray14 = com.operations.Matrix.MatrixDecompositions.luDecomposition(matrix10);
        com.operations.Matrix.Matrix matrix15 = com.operations.Matrix.MatrixOperations.multiply(matrix2, matrix10);
        com.operations.Matrix.Matrix matrix17 = com.operations.Matrix.MatrixTransformations.rotate2D((double) (short) 100);
        boolean boolean19 = com.operations.Matrix.MatrixUtils.compare(matrix10, matrix17, (double) (byte) 0);
        boolean boolean20 = com.operations.Matrix.MatrixUtils.isSymmetric(matrix17);
        boolean boolean21 = com.operations.Matrix.MatrixUtils.isSquare(matrix17);
        com.operations.Matrix.Matrix matrix23 = com.operations.Matrix.MatrixOperations.scalarMultiply(matrix17, (double) 2);
        com.operations.Matrix.Matrix matrix24 = com.operations.Matrix.MatrixOperations.transpose(matrix23);
        com.operations.Matrix.Matrix matrix27 = com.operations.Matrix.MatrixTransformations.project2D(137.90576492663388d, (double) (byte) 0);
        com.operations.Matrix.Matrix matrix28 = com.operations.Matrix.MatrixOperations.multiply(matrix23, matrix27);
        // The following exception was thrown during execution in test generation
        try {
            com.operations.Matrix.Matrix matrix29 = com.operations.Matrix.MatrixDecompositions.choleskyDecomposition(matrix27);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Matrix is not positive definite.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(matrix2);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertArrayEquals(doubleArray5, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertArrayEquals(doubleArray8, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 2 + "'", int11 == 2);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 2 + "'", int12 == 2);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 2 + "'", int13 == 2);
        org.junit.Assert.assertNotNull(matrixArray14);
        org.junit.Assert.assertNotNull(matrix15);
        org.junit.Assert.assertNotNull(matrix17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertNotNull(matrix23);
        org.junit.Assert.assertNotNull(matrix24);
        org.junit.Assert.assertNotNull(matrix27);
        org.junit.Assert.assertNotNull(matrix28);
    }

    @Test
    public void test1721() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1721");
        com.operations.Matrix.Matrix matrix2 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0L, (double) (byte) 10);
        int int3 = matrix2.getRows();
        com.operations.Matrix.Matrix matrix9 = com.operations.Matrix.MatrixUtils.generateRandomMatrix(100, (int) (byte) 1, (int) '#', (int) '#', 1L);
        boolean boolean11 = com.operations.Matrix.MatrixUtils.compare(matrix2, matrix9, (double) 1.0f);
        int int12 = matrix2.getCols();
        com.operations.Matrix.Matrix matrix14 = com.operations.Matrix.MatrixTransformations.rotate2D((double) (short) 100);
        double[] doubleArray17 = new double[] { 137.90576492663388d, (byte) -1 };
        double[] doubleArray18 = com.operations.Matrix.MatrixSolver.solveGaussian(matrix14, doubleArray17);
        com.operations.Matrix.Matrix matrix21 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0L, (double) (byte) 10);
        double[] doubleArray24 = new double[] { 10, 'a' };
        double[] doubleArray27 = new double[] { 10, 'a' };
        double[][] doubleArray28 = new double[][] { doubleArray24, doubleArray27 };
        com.operations.Matrix.Matrix matrix29 = new com.operations.Matrix.Matrix(doubleArray28);
        int int30 = matrix29.getCols();
        int int31 = matrix29.getCols();
        int int32 = matrix29.getCols();
        com.operations.Matrix.Matrix[] matrixArray33 = com.operations.Matrix.MatrixDecompositions.luDecomposition(matrix29);
        com.operations.Matrix.Matrix matrix34 = com.operations.Matrix.MatrixOperations.multiply(matrix21, matrix29);
        boolean boolean36 = com.operations.Matrix.MatrixUtils.compare(matrix14, matrix21, (double) (-1L));
        boolean boolean38 = com.operations.Matrix.MatrixUtils.compare(matrix2, matrix14, (double) 'a');
        int int39 = matrix14.getCols();
        com.operations.Matrix.Matrix matrix42 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0L, (double) (byte) 10);
        double[] doubleArray45 = new double[] { 10, 'a' };
        double[] doubleArray48 = new double[] { 10, 'a' };
        double[][] doubleArray49 = new double[][] { doubleArray45, doubleArray48 };
        com.operations.Matrix.Matrix matrix50 = new com.operations.Matrix.Matrix(doubleArray49);
        int int51 = matrix50.getCols();
        int int52 = matrix50.getCols();
        int int53 = matrix50.getCols();
        com.operations.Matrix.Matrix[] matrixArray54 = com.operations.Matrix.MatrixDecompositions.luDecomposition(matrix50);
        com.operations.Matrix.Matrix matrix55 = com.operations.Matrix.MatrixOperations.multiply(matrix42, matrix50);
        com.operations.Matrix.Matrix matrix57 = com.operations.Matrix.MatrixTransformations.rotate2D((double) (short) 100);
        boolean boolean59 = com.operations.Matrix.MatrixUtils.compare(matrix50, matrix57, (double) (byte) 0);
        double[] doubleArray62 = new double[] { 10, 'a' };
        double[] doubleArray65 = new double[] { 10, 'a' };
        double[][] doubleArray66 = new double[][] { doubleArray62, doubleArray65 };
        com.operations.Matrix.Matrix matrix67 = new com.operations.Matrix.Matrix(doubleArray66);
        com.operations.Matrix.Matrix matrix68 = new com.operations.Matrix.Matrix(doubleArray66);
        com.operations.Matrix.Matrix matrix69 = new com.operations.Matrix.Matrix(doubleArray66);
        boolean boolean71 = com.operations.Matrix.MatrixUtils.compare(matrix50, matrix69, (double) (-1));
        com.operations.Matrix.Matrix matrix73 = com.operations.Matrix.MatrixTransformations.rotate2D((double) (short) 100);
        double[] doubleArray76 = new double[] { 137.90576492663388d, (byte) -1 };
        double[] doubleArray77 = com.operations.Matrix.MatrixSolver.solveGaussian(matrix73, doubleArray76);
        com.operations.Matrix.Matrix matrix80 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0L, (double) (byte) 10);
        double[] doubleArray83 = new double[] { 10, 'a' };
        double[] doubleArray86 = new double[] { 10, 'a' };
        double[][] doubleArray87 = new double[][] { doubleArray83, doubleArray86 };
        com.operations.Matrix.Matrix matrix88 = new com.operations.Matrix.Matrix(doubleArray87);
        int int89 = matrix88.getCols();
        int int90 = matrix88.getCols();
        int int91 = matrix88.getCols();
        com.operations.Matrix.Matrix[] matrixArray92 = com.operations.Matrix.MatrixDecompositions.luDecomposition(matrix88);
        com.operations.Matrix.Matrix matrix93 = com.operations.Matrix.MatrixOperations.multiply(matrix80, matrix88);
        boolean boolean95 = com.operations.Matrix.MatrixUtils.compare(matrix73, matrix80, (double) (-1L));
        com.operations.Matrix.Matrix matrix96 = com.operations.Matrix.MatrixOperations.add(matrix69, matrix80);
        com.operations.Matrix.Matrix[] matrixArray97 = com.operations.Matrix.MatrixDecompositions.luDecomposition(matrix69);
        com.operations.Matrix.Matrix matrix98 = com.operations.Matrix.MatrixOperations.multiply(matrix14, matrix69);
        matrix98.print();
        org.junit.Assert.assertNotNull(matrix2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 2 + "'", int3 == 2);
        org.junit.Assert.assertNotNull(matrix9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 2 + "'", int12 == 2);
        org.junit.Assert.assertNotNull(matrix14);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertArrayEquals(doubleArray17, new double[] { 137.90576492663388d, (-1.0d) }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertArrayEquals(doubleArray18, new double[] { (-24.931892522286255d), (-135.63701830716116d) }, 1.0E-15);
        org.junit.Assert.assertNotNull(matrix21);
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertArrayEquals(doubleArray24, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertArrayEquals(doubleArray27, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 2 + "'", int30 == 2);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 2 + "'", int31 == 2);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 2 + "'", int32 == 2);
        org.junit.Assert.assertNotNull(matrixArray33);
        org.junit.Assert.assertNotNull(matrix34);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 2 + "'", int39 == 2);
        org.junit.Assert.assertNotNull(matrix42);
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertArrayEquals(doubleArray45, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertArrayEquals(doubleArray48, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 2 + "'", int51 == 2);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 2 + "'", int52 == 2);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 2 + "'", int53 == 2);
        org.junit.Assert.assertNotNull(matrixArray54);
        org.junit.Assert.assertNotNull(matrix55);
        org.junit.Assert.assertNotNull(matrix57);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNotNull(doubleArray62);
        org.junit.Assert.assertArrayEquals(doubleArray62, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray65);
        org.junit.Assert.assertArrayEquals(doubleArray65, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray66);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertNotNull(matrix73);
        org.junit.Assert.assertNotNull(doubleArray76);
        org.junit.Assert.assertArrayEquals(doubleArray76, new double[] { 137.90576492663388d, (-1.0d) }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray77);
        org.junit.Assert.assertArrayEquals(doubleArray77, new double[] { (-24.931892522286255d), (-135.63701830716116d) }, 1.0E-15);
        org.junit.Assert.assertNotNull(matrix80);
        org.junit.Assert.assertNotNull(doubleArray83);
        org.junit.Assert.assertArrayEquals(doubleArray83, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray86);
        org.junit.Assert.assertArrayEquals(doubleArray86, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray87);
        org.junit.Assert.assertTrue("'" + int89 + "' != '" + 2 + "'", int89 == 2);
        org.junit.Assert.assertTrue("'" + int90 + "' != '" + 2 + "'", int90 == 2);
        org.junit.Assert.assertTrue("'" + int91 + "' != '" + 2 + "'", int91 == 2);
        org.junit.Assert.assertNotNull(matrixArray92);
        org.junit.Assert.assertNotNull(matrix93);
        org.junit.Assert.assertTrue("'" + boolean95 + "' != '" + false + "'", boolean95 == false);
        org.junit.Assert.assertNotNull(matrix96);
        org.junit.Assert.assertNotNull(matrixArray97);
        org.junit.Assert.assertNotNull(matrix98);
    }

    @Test
    public void test1722() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1722");
        com.operations.Matrix.Matrix matrix0 = null;
        com.operations.Matrix.Matrix matrix3 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0L, (double) (byte) 10);
        double[] doubleArray6 = new double[] { 10, 'a' };
        double[] doubleArray9 = new double[] { 10, 'a' };
        double[][] doubleArray10 = new double[][] { doubleArray6, doubleArray9 };
        com.operations.Matrix.Matrix matrix11 = new com.operations.Matrix.Matrix(doubleArray10);
        int int12 = matrix11.getCols();
        int int13 = matrix11.getCols();
        int int14 = matrix11.getCols();
        com.operations.Matrix.Matrix[] matrixArray15 = com.operations.Matrix.MatrixDecompositions.luDecomposition(matrix11);
        com.operations.Matrix.Matrix matrix16 = com.operations.Matrix.MatrixOperations.multiply(matrix3, matrix11);
        com.operations.Matrix.Matrix matrix18 = com.operations.Matrix.MatrixTransformations.rotate2D((double) (short) 100);
        boolean boolean20 = com.operations.Matrix.MatrixUtils.compare(matrix11, matrix18, (double) (byte) 0);
        com.operations.Matrix.Matrix matrix22 = com.operations.Matrix.MatrixOperations.scalarMultiply(matrix18, (double) 10.0f);
        com.operations.Matrix.Matrix matrix25 = com.operations.Matrix.MatrixTransformations.project2D((double) (short) 100, 35.0d);
        com.operations.Matrix.Matrix matrix27 = com.operations.Matrix.MatrixTransformations.rotate2D((double) (-1L));
        com.operations.Matrix.Matrix matrix29 = com.operations.Matrix.MatrixTransformations.rotate2D((double) (short) 100);
        double[] doubleArray32 = new double[] { 137.90576492663388d, (byte) -1 };
        double[] doubleArray33 = com.operations.Matrix.MatrixSolver.solveGaussian(matrix29, doubleArray32);
        double[] doubleArray34 = com.operations.Matrix.MatrixSolver.solveGaussian(matrix27, doubleArray32);
        double[] doubleArray35 = com.operations.Matrix.MatrixSolver.solveGaussian(matrix25, doubleArray34);
        double[] doubleArray36 = com.operations.Matrix.MatrixSolver.solveGaussian(matrix18, doubleArray35);
        // The following exception was thrown during execution in test generation
        try {
            double[] doubleArray37 = com.operations.Matrix.MatrixSolver.solveGaussian(matrix0, doubleArray35);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(matrix3);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertArrayEquals(doubleArray6, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertArrayEquals(doubleArray9, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 2 + "'", int12 == 2);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 2 + "'", int13 == 2);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 2 + "'", int14 == 2);
        org.junit.Assert.assertNotNull(matrixArray15);
        org.junit.Assert.assertNotNull(matrix16);
        org.junit.Assert.assertNotNull(matrix18);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(matrix22);
        org.junit.Assert.assertNotNull(matrix25);
        org.junit.Assert.assertNotNull(matrix27);
        org.junit.Assert.assertNotNull(matrix29);
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertArrayEquals(doubleArray32, new double[] { 137.90576492663388d, (-1.0d) }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertArrayEquals(doubleArray33, new double[] { (-24.931892522286255d), (-135.63701830716116d) }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertArrayEquals(doubleArray34, new double[] { 137.90221361711127d, 1.4069397643877004d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertArrayEquals(doubleArray35, new double[] { 1.3790221361711128d, 0.04019827898250573d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertArrayEquals(doubleArray36, new double[] { (-0.19987710410875187d), (-1.3650520491674278d) }, 1.0E-15);
    }

    @Test
    public void test1723() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1723");
        double[] doubleArray2 = new double[] { 10, 'a' };
        double[] doubleArray5 = new double[] { 10, 'a' };
        double[][] doubleArray6 = new double[][] { doubleArray2, doubleArray5 };
        com.operations.Matrix.Matrix matrix7 = new com.operations.Matrix.Matrix(doubleArray6);
        com.operations.Matrix.Matrix matrix8 = new com.operations.Matrix.Matrix(doubleArray6);
        boolean boolean9 = com.operations.Matrix.MatrixUtils.isSquare(matrix8);
        double[] doubleArray12 = new double[] { 10, 'a' };
        double[] doubleArray15 = new double[] { 10, 'a' };
        double[][] doubleArray16 = new double[][] { doubleArray12, doubleArray15 };
        com.operations.Matrix.Matrix matrix17 = new com.operations.Matrix.Matrix(doubleArray16);
        int int18 = matrix17.getCols();
        int int19 = matrix17.getCols();
        matrix17.print();
        double[] doubleArray23 = new double[] { 10, 'a' };
        double[] doubleArray26 = new double[] { 10, 'a' };
        double[][] doubleArray27 = new double[][] { doubleArray23, doubleArray26 };
        com.operations.Matrix.Matrix matrix28 = new com.operations.Matrix.Matrix(doubleArray27);
        boolean boolean30 = com.operations.Matrix.MatrixUtils.compare(matrix17, matrix28, (double) (-1));
        com.operations.Matrix.Matrix matrix31 = com.operations.Matrix.MatrixOperations.subtract(matrix8, matrix28);
        double[] doubleArray34 = new double[] { 10, 'a' };
        double[] doubleArray37 = new double[] { 10, 'a' };
        double[][] doubleArray38 = new double[][] { doubleArray34, doubleArray37 };
        com.operations.Matrix.Matrix matrix39 = new com.operations.Matrix.Matrix(doubleArray38);
        com.operations.Matrix.Matrix matrix40 = new com.operations.Matrix.Matrix(doubleArray38);
        boolean boolean41 = com.operations.Matrix.MatrixUtils.isSquare(matrix40);
        double[] doubleArray44 = new double[] { 10, 'a' };
        double[] doubleArray47 = new double[] { 10, 'a' };
        double[][] doubleArray48 = new double[][] { doubleArray44, doubleArray47 };
        com.operations.Matrix.Matrix matrix49 = new com.operations.Matrix.Matrix(doubleArray48);
        int int50 = matrix49.getCols();
        int int51 = matrix49.getCols();
        matrix49.print();
        double[] doubleArray55 = new double[] { 10, 'a' };
        double[] doubleArray58 = new double[] { 10, 'a' };
        double[][] doubleArray59 = new double[][] { doubleArray55, doubleArray58 };
        com.operations.Matrix.Matrix matrix60 = new com.operations.Matrix.Matrix(doubleArray59);
        boolean boolean62 = com.operations.Matrix.MatrixUtils.compare(matrix49, matrix60, (double) (-1));
        com.operations.Matrix.Matrix matrix63 = com.operations.Matrix.MatrixOperations.subtract(matrix40, matrix60);
        com.operations.Matrix.Matrix matrix64 = com.operations.Matrix.MatrixOperations.add(matrix8, matrix63);
        double double65 = com.operations.Matrix.MatrixUtils.frobeniusNorm(matrix63);
        int int66 = matrix63.getRows();
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertArrayEquals(doubleArray2, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertArrayEquals(doubleArray5, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertArrayEquals(doubleArray12, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertArrayEquals(doubleArray15, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 2 + "'", int18 == 2);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 2 + "'", int19 == 2);
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertArrayEquals(doubleArray23, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertArrayEquals(doubleArray26, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(matrix31);
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertArrayEquals(doubleArray34, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertArrayEquals(doubleArray37, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertArrayEquals(doubleArray44, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertArrayEquals(doubleArray47, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 2 + "'", int50 == 2);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 2 + "'", int51 == 2);
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertArrayEquals(doubleArray55, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray58);
        org.junit.Assert.assertArrayEquals(doubleArray58, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray59);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertNotNull(matrix63);
        org.junit.Assert.assertNotNull(matrix64);
        org.junit.Assert.assertTrue("'" + double65 + "' != '" + 0.0d + "'", double65 == 0.0d);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 2 + "'", int66 == 2);
    }

    @Test
    public void test1724() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1724");
        com.operations.Matrix.Matrix matrix5 = com.operations.Matrix.MatrixUtils.generateRandomMatrix((int) (short) 1, (int) (short) 1, 100, (int) (short) 100, (long) (short) 1);
        org.junit.Assert.assertNotNull(matrix5);
    }

    @Test
    public void test1725() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1725");
        double[] doubleArray2 = new double[] { 10, 'a' };
        double[] doubleArray5 = new double[] { 10, 'a' };
        double[][] doubleArray6 = new double[][] { doubleArray2, doubleArray5 };
        com.operations.Matrix.Matrix matrix7 = new com.operations.Matrix.Matrix(doubleArray6);
        com.operations.Matrix.Matrix matrix8 = new com.operations.Matrix.Matrix(doubleArray6);
        com.operations.Matrix.Matrix[] matrixArray9 = com.operations.Matrix.MatrixDecompositions.luDecomposition(matrix8);
        double double10 = com.operations.Matrix.MatrixUtils.frobeniusNorm(matrix8);
        double[] doubleArray13 = new double[] { 10, 'a' };
        double[] doubleArray16 = new double[] { 10, 'a' };
        double[][] doubleArray17 = new double[][] { doubleArray13, doubleArray16 };
        com.operations.Matrix.Matrix matrix18 = new com.operations.Matrix.Matrix(doubleArray17);
        com.operations.Matrix.Matrix matrix19 = new com.operations.Matrix.Matrix(doubleArray17);
        boolean boolean20 = com.operations.Matrix.MatrixUtils.isSquare(matrix19);
        double[] doubleArray23 = new double[] { 10, 'a' };
        double[] doubleArray26 = new double[] { 10, 'a' };
        double[][] doubleArray27 = new double[][] { doubleArray23, doubleArray26 };
        com.operations.Matrix.Matrix matrix28 = new com.operations.Matrix.Matrix(doubleArray27);
        int int29 = matrix28.getCols();
        int int30 = matrix28.getCols();
        matrix28.print();
        double[] doubleArray34 = new double[] { 10, 'a' };
        double[] doubleArray37 = new double[] { 10, 'a' };
        double[][] doubleArray38 = new double[][] { doubleArray34, doubleArray37 };
        com.operations.Matrix.Matrix matrix39 = new com.operations.Matrix.Matrix(doubleArray38);
        boolean boolean41 = com.operations.Matrix.MatrixUtils.compare(matrix28, matrix39, (double) (-1));
        com.operations.Matrix.Matrix matrix42 = com.operations.Matrix.MatrixOperations.subtract(matrix19, matrix39);
        com.operations.Matrix.Matrix[] matrixArray43 = com.operations.Matrix.MatrixDecompositions.luDecomposition(matrix42);
        double[][] doubleArray44 = matrix42.getData();
        com.operations.Matrix.Matrix matrix47 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0L, (double) (byte) 10);
        double[] doubleArray50 = new double[] { 10, 'a' };
        double[] doubleArray53 = new double[] { 10, 'a' };
        double[][] doubleArray54 = new double[][] { doubleArray50, doubleArray53 };
        com.operations.Matrix.Matrix matrix55 = new com.operations.Matrix.Matrix(doubleArray54);
        int int56 = matrix55.getCols();
        int int57 = matrix55.getCols();
        int int58 = matrix55.getCols();
        com.operations.Matrix.Matrix[] matrixArray59 = com.operations.Matrix.MatrixDecompositions.luDecomposition(matrix55);
        com.operations.Matrix.Matrix matrix60 = com.operations.Matrix.MatrixOperations.multiply(matrix47, matrix55);
        int int61 = matrix55.getRows();
        com.operations.Matrix.Matrix matrix62 = com.operations.Matrix.MatrixOperations.multiply(matrix42, matrix55);
        boolean boolean64 = com.operations.Matrix.MatrixUtils.compare(matrix8, matrix62, (double) 2);
        com.operations.Matrix.Matrix matrix65 = com.operations.Matrix.MatrixOperations.transpose(matrix62);
        com.operations.Matrix.Matrix matrix68 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0L, (double) (byte) 10);
        double[] doubleArray71 = new double[] { 10, 'a' };
        double[] doubleArray74 = new double[] { 10, 'a' };
        double[][] doubleArray75 = new double[][] { doubleArray71, doubleArray74 };
        com.operations.Matrix.Matrix matrix76 = new com.operations.Matrix.Matrix(doubleArray75);
        int int77 = matrix76.getCols();
        int int78 = matrix76.getCols();
        int int79 = matrix76.getCols();
        com.operations.Matrix.Matrix[] matrixArray80 = com.operations.Matrix.MatrixDecompositions.luDecomposition(matrix76);
        com.operations.Matrix.Matrix matrix81 = com.operations.Matrix.MatrixOperations.multiply(matrix68, matrix76);
        com.operations.Matrix.Matrix matrix83 = com.operations.Matrix.MatrixTransformations.rotate2D((double) (short) 100);
        boolean boolean85 = com.operations.Matrix.MatrixUtils.compare(matrix76, matrix83, (double) (byte) 0);
        boolean boolean86 = com.operations.Matrix.MatrixUtils.isSymmetric(matrix83);
        boolean boolean87 = com.operations.Matrix.MatrixUtils.isSquare(matrix83);
        com.operations.Matrix.Matrix matrix89 = com.operations.Matrix.MatrixTransformations.rotate2D((double) (short) 100);
        boolean boolean91 = com.operations.Matrix.MatrixUtils.compare(matrix83, matrix89, (double) (byte) 100);
        com.operations.Matrix.Matrix matrix92 = com.operations.Matrix.MatrixOperations.subtract(matrix65, matrix89);
        com.operations.Matrix.Matrix matrix93 = com.operations.Matrix.MatrixOperations.transpose(matrix65);
        com.operations.Matrix.Matrix[] matrixArray94 = com.operations.Matrix.MatrixDecompositions.luDecomposition(matrix93);
        // The following exception was thrown during execution in test generation
        try {
            double double97 = matrix93.getValue(100, (int) 'a');
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertArrayEquals(doubleArray2, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertArrayEquals(doubleArray5, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertNotNull(matrixArray9);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 137.90576492663388d + "'", double10 == 137.90576492663388d);
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertArrayEquals(doubleArray13, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertArrayEquals(doubleArray16, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertArrayEquals(doubleArray23, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertArrayEquals(doubleArray26, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 2 + "'", int29 == 2);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 2 + "'", int30 == 2);
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertArrayEquals(doubleArray34, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertArrayEquals(doubleArray37, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(matrix42);
        org.junit.Assert.assertNotNull(matrixArray43);
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertNotNull(matrix47);
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertArrayEquals(doubleArray50, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertArrayEquals(doubleArray53, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray54);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 2 + "'", int56 == 2);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 2 + "'", int57 == 2);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 2 + "'", int58 == 2);
        org.junit.Assert.assertNotNull(matrixArray59);
        org.junit.Assert.assertNotNull(matrix60);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 2 + "'", int61 == 2);
        org.junit.Assert.assertNotNull(matrix62);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertNotNull(matrix65);
        org.junit.Assert.assertNotNull(matrix68);
        org.junit.Assert.assertNotNull(doubleArray71);
        org.junit.Assert.assertArrayEquals(doubleArray71, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray74);
        org.junit.Assert.assertArrayEquals(doubleArray74, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray75);
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + 2 + "'", int77 == 2);
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + 2 + "'", int78 == 2);
        org.junit.Assert.assertTrue("'" + int79 + "' != '" + 2 + "'", int79 == 2);
        org.junit.Assert.assertNotNull(matrixArray80);
        org.junit.Assert.assertNotNull(matrix81);
        org.junit.Assert.assertNotNull(matrix83);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + true + "'", boolean87 == true);
        org.junit.Assert.assertNotNull(matrix89);
        org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + true + "'", boolean91 == true);
        org.junit.Assert.assertNotNull(matrix92);
        org.junit.Assert.assertNotNull(matrix93);
        org.junit.Assert.assertNotNull(matrixArray94);
    }

    @Test
    public void test1726() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1726");
        com.operations.Matrix.Matrix matrix2 = new com.operations.Matrix.Matrix(0, (int) (short) 0);
        java.lang.Class<?> wildcardClass3 = matrix2.getClass();
        org.junit.Assert.assertNotNull(wildcardClass3);
    }

    @Test
    public void test1727() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1727");
        com.operations.Matrix.Matrix matrix2 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0L, (double) (byte) 10);
        double[] doubleArray5 = new double[] { 10, 'a' };
        double[] doubleArray8 = new double[] { 10, 'a' };
        double[][] doubleArray9 = new double[][] { doubleArray5, doubleArray8 };
        com.operations.Matrix.Matrix matrix10 = new com.operations.Matrix.Matrix(doubleArray9);
        int int11 = matrix10.getCols();
        int int12 = matrix10.getCols();
        int int13 = matrix10.getCols();
        com.operations.Matrix.Matrix[] matrixArray14 = com.operations.Matrix.MatrixDecompositions.luDecomposition(matrix10);
        com.operations.Matrix.Matrix matrix15 = com.operations.Matrix.MatrixOperations.multiply(matrix2, matrix10);
        com.operations.Matrix.Matrix matrix17 = com.operations.Matrix.MatrixTransformations.rotate2D((double) (short) 100);
        boolean boolean19 = com.operations.Matrix.MatrixUtils.compare(matrix10, matrix17, (double) (byte) 0);
        com.operations.Matrix.Matrix[] matrixArray20 = com.operations.Matrix.MatrixDecompositions.luDecomposition(matrix10);
        com.operations.Matrix.Matrix matrix21 = com.operations.Matrix.MatrixDecompositions.choleskyDecomposition(matrix10);
        com.operations.Matrix.Matrix matrix22 = com.operations.Matrix.MatrixOperations.transpose(matrix21);
        com.operations.Matrix.Matrix matrix23 = com.operations.Matrix.MatrixDecompositions.choleskyDecomposition(matrix22);
        double[][] doubleArray24 = matrix22.getData();
        matrix22.print();
        org.junit.Assert.assertNotNull(matrix2);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertArrayEquals(doubleArray5, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertArrayEquals(doubleArray8, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 2 + "'", int11 == 2);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 2 + "'", int12 == 2);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 2 + "'", int13 == 2);
        org.junit.Assert.assertNotNull(matrixArray14);
        org.junit.Assert.assertNotNull(matrix15);
        org.junit.Assert.assertNotNull(matrix17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(matrixArray20);
        org.junit.Assert.assertNotNull(matrix21);
        org.junit.Assert.assertNotNull(matrix22);
        org.junit.Assert.assertNotNull(matrix23);
        org.junit.Assert.assertNotNull(doubleArray24);
    }

    @Test
    public void test1728() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1728");
        // The following exception was thrown during execution in test generation
        try {
            com.operations.Matrix.Matrix matrix4 = com.operations.Matrix.MatrixUtils.generateRandomMatrix(100, (int) (byte) -1, (int) (short) 0, (int) '4');
            org.junit.Assert.fail("Expected exception of type java.lang.NegativeArraySizeException; message: -1");
        } catch (java.lang.NegativeArraySizeException e) {
            // Expected exception.
        }
    }

    @Test
    public void test1729() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1729");
        com.operations.Matrix.Matrix matrix2 = new com.operations.Matrix.Matrix(0, (int) (byte) 1);
    }

    @Test
    public void test1730() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1730");
        com.operations.Matrix.Matrix matrix2 = com.operations.Matrix.MatrixTransformations.project2D(260.95643973734866d, 137.15495886388925d);
        boolean boolean3 = com.operations.Matrix.MatrixUtils.isSquare(matrix2);
        org.junit.Assert.assertNotNull(matrix2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
    }

    @Test
    public void test1731() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1731");
        com.operations.Matrix.Matrix matrix1 = com.operations.Matrix.MatrixTransformations.rotate2D((double) (byte) 100);
        double double2 = com.operations.Matrix.MatrixUtils.frobeniusNorm(matrix1);
        com.operations.Matrix.Matrix matrix5 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0.0f, (double) (-1));
        com.operations.Matrix.Matrix matrix8 = com.operations.Matrix.MatrixTransformations.scale2D(146.4308710620817d, (double) 10L);
        com.operations.Matrix.Matrix matrix9 = com.operations.Matrix.MatrixOperations.multiply(matrix5, matrix8);
        com.operations.Matrix.Matrix matrix11 = com.operations.Matrix.MatrixTransformations.rotate2D((double) 1.0f);
        com.operations.Matrix.Matrix matrix14 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0L, (double) (byte) 10);
        int int15 = matrix14.getRows();
        com.operations.Matrix.Matrix matrix17 = com.operations.Matrix.MatrixOperations.scalarMultiply(matrix14, (double) 2);
        double double18 = com.operations.Matrix.MatrixUtils.frobeniusNorm(matrix14);
        com.operations.Matrix.Matrix matrix21 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0L, (double) (byte) 10);
        int int22 = matrix21.getRows();
        com.operations.Matrix.Matrix matrix24 = com.operations.Matrix.MatrixOperations.scalarMultiply(matrix21, (double) 2);
        com.operations.Matrix.Matrix matrix25 = com.operations.Matrix.MatrixOperations.subtract(matrix14, matrix24);
        com.operations.Matrix.Matrix matrix26 = com.operations.Matrix.MatrixOperations.add(matrix11, matrix24);
        matrix11.print();
        double[] doubleArray30 = new double[] { 10, 'a' };
        double[] doubleArray33 = new double[] { 10, 'a' };
        double[][] doubleArray34 = new double[][] { doubleArray30, doubleArray33 };
        com.operations.Matrix.Matrix matrix35 = new com.operations.Matrix.Matrix(doubleArray34);
        com.operations.Matrix.Matrix matrix36 = com.operations.Matrix.MatrixOperations.transpose(matrix35);
        com.operations.Matrix.Matrix matrix39 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0L, (double) (byte) 10);
        int int40 = matrix39.getRows();
        com.operations.Matrix.Matrix matrix46 = com.operations.Matrix.MatrixUtils.generateRandomMatrix(100, (int) (byte) 1, (int) '#', (int) '#', 1L);
        boolean boolean48 = com.operations.Matrix.MatrixUtils.compare(matrix39, matrix46, (double) 1.0f);
        com.operations.Matrix.Matrix matrix50 = com.operations.Matrix.MatrixOperations.scalarMultiply(matrix39, (double) 1L);
        matrix39.print();
        com.operations.Matrix.Matrix matrix52 = com.operations.Matrix.MatrixOperations.multiply(matrix36, matrix39);
        com.operations.Matrix.Matrix matrix53 = com.operations.Matrix.MatrixOperations.multiply(matrix11, matrix39);
        com.operations.Matrix.Matrix matrix54 = com.operations.Matrix.MatrixOperations.subtract(matrix5, matrix39);
        com.operations.Matrix.Matrix matrix55 = com.operations.Matrix.MatrixOperations.subtract(matrix1, matrix5);
        com.operations.Matrix.Matrix matrix57 = com.operations.Matrix.MatrixTransformations.rotate2D((double) (-1L));
        com.operations.Matrix.Matrix matrix59 = com.operations.Matrix.MatrixTransformations.rotate2D((double) (short) 100);
        double[] doubleArray62 = new double[] { 137.90576492663388d, (byte) -1 };
        double[] doubleArray63 = com.operations.Matrix.MatrixSolver.solveGaussian(matrix59, doubleArray62);
        double[] doubleArray64 = com.operations.Matrix.MatrixSolver.solveGaussian(matrix57, doubleArray62);
        com.operations.Matrix.Matrix matrix65 = com.operations.Matrix.MatrixOperations.add(matrix1, matrix57);
        com.operations.Matrix.Matrix matrix66 = com.operations.Matrix.MatrixOperations.transpose(matrix65);
        com.operations.Matrix.Matrix matrix68 = com.operations.Matrix.MatrixOperations.scalarMultiply(matrix65, (double) (short) 0);
        // The following exception was thrown during execution in test generation
        try {
            com.operations.Matrix.Matrix matrix69 = com.operations.Matrix.MatrixDecompositions.choleskyDecomposition(matrix68);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Matrix is not positive definite.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(matrix1);
        org.junit.Assert.assertTrue("'" + double2 + "' != '" + 1.414213562373095d + "'", double2 == 1.414213562373095d);
        org.junit.Assert.assertNotNull(matrix5);
        org.junit.Assert.assertNotNull(matrix8);
        org.junit.Assert.assertNotNull(matrix9);
        org.junit.Assert.assertNotNull(matrix11);
        org.junit.Assert.assertNotNull(matrix14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 2 + "'", int15 == 2);
        org.junit.Assert.assertNotNull(matrix17);
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 10.0d + "'", double18 == 10.0d);
        org.junit.Assert.assertNotNull(matrix21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 2 + "'", int22 == 2);
        org.junit.Assert.assertNotNull(matrix24);
        org.junit.Assert.assertNotNull(matrix25);
        org.junit.Assert.assertNotNull(matrix26);
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertArrayEquals(doubleArray30, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertArrayEquals(doubleArray33, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertNotNull(matrix36);
        org.junit.Assert.assertNotNull(matrix39);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 2 + "'", int40 == 2);
        org.junit.Assert.assertNotNull(matrix46);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(matrix50);
        org.junit.Assert.assertNotNull(matrix52);
        org.junit.Assert.assertNotNull(matrix53);
        org.junit.Assert.assertNotNull(matrix54);
        org.junit.Assert.assertNotNull(matrix55);
        org.junit.Assert.assertNotNull(matrix57);
        org.junit.Assert.assertNotNull(matrix59);
        org.junit.Assert.assertNotNull(doubleArray62);
        org.junit.Assert.assertArrayEquals(doubleArray62, new double[] { 137.90576492663388d, (-1.0d) }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray63);
        org.junit.Assert.assertArrayEquals(doubleArray63, new double[] { (-24.931892522286255d), (-135.63701830716116d) }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray64);
        org.junit.Assert.assertArrayEquals(doubleArray64, new double[] { 137.90221361711127d, 1.4069397643877004d }, 1.0E-15);
        org.junit.Assert.assertNotNull(matrix65);
        org.junit.Assert.assertNotNull(matrix66);
        org.junit.Assert.assertNotNull(matrix68);
    }

    @Test
    public void test1732() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1732");
        com.operations.Matrix.Matrix matrix2 = new com.operations.Matrix.Matrix((int) (short) 10, (int) (short) 0);
        // The following exception was thrown during execution in test generation
        try {
            com.operations.Matrix.Matrix matrix3 = com.operations.Matrix.MatrixDecompositions.choleskyDecomposition(matrix2);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Matrix must be square for Cholesky decomposition.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test1733() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1733");
        double[] doubleArray2 = new double[] { 10, 'a' };
        double[] doubleArray5 = new double[] { 10, 'a' };
        double[][] doubleArray6 = new double[][] { doubleArray2, doubleArray5 };
        com.operations.Matrix.Matrix matrix7 = new com.operations.Matrix.Matrix(doubleArray6);
        int int8 = matrix7.getCols();
        boolean boolean9 = com.operations.Matrix.MatrixUtils.isSquare(matrix7);
        com.operations.Matrix.Matrix matrix10 = com.operations.Matrix.MatrixOperations.transpose(matrix7);
        int int11 = matrix10.getRows();
        com.operations.Matrix.Matrix matrix14 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0L, (double) (byte) 10);
        double[] doubleArray17 = new double[] { 10, 'a' };
        double[] doubleArray20 = new double[] { 10, 'a' };
        double[][] doubleArray21 = new double[][] { doubleArray17, doubleArray20 };
        com.operations.Matrix.Matrix matrix22 = new com.operations.Matrix.Matrix(doubleArray21);
        int int23 = matrix22.getCols();
        int int24 = matrix22.getCols();
        int int25 = matrix22.getCols();
        com.operations.Matrix.Matrix[] matrixArray26 = com.operations.Matrix.MatrixDecompositions.luDecomposition(matrix22);
        com.operations.Matrix.Matrix matrix27 = com.operations.Matrix.MatrixOperations.multiply(matrix14, matrix22);
        com.operations.Matrix.Matrix matrix29 = com.operations.Matrix.MatrixTransformations.rotate2D((double) (short) 100);
        boolean boolean31 = com.operations.Matrix.MatrixUtils.compare(matrix22, matrix29, (double) (byte) 0);
        com.operations.Matrix.Matrix matrix32 = com.operations.Matrix.MatrixOperations.multiply(matrix10, matrix22);
        int int33 = matrix10.getCols();
        double[][] doubleArray34 = matrix10.getData();
        com.operations.Matrix.Matrix matrix37 = com.operations.Matrix.MatrixTransformations.project2D((double) 10L, 10.0d);
        com.operations.Matrix.Matrix matrix39 = com.operations.Matrix.MatrixTransformations.rotate2D((double) (short) 100);
        double[] doubleArray42 = new double[] { 137.90576492663388d, (byte) -1 };
        double[] doubleArray43 = com.operations.Matrix.MatrixSolver.solveGaussian(matrix39, doubleArray42);
        com.operations.Matrix.Matrix matrix46 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0L, (double) (byte) 10);
        double[] doubleArray49 = new double[] { 10, 'a' };
        double[] doubleArray52 = new double[] { 10, 'a' };
        double[][] doubleArray53 = new double[][] { doubleArray49, doubleArray52 };
        com.operations.Matrix.Matrix matrix54 = new com.operations.Matrix.Matrix(doubleArray53);
        int int55 = matrix54.getCols();
        int int56 = matrix54.getCols();
        int int57 = matrix54.getCols();
        com.operations.Matrix.Matrix[] matrixArray58 = com.operations.Matrix.MatrixDecompositions.luDecomposition(matrix54);
        com.operations.Matrix.Matrix matrix59 = com.operations.Matrix.MatrixOperations.multiply(matrix46, matrix54);
        boolean boolean61 = com.operations.Matrix.MatrixUtils.compare(matrix39, matrix46, (double) (-1L));
        double[][] doubleArray62 = matrix39.getData();
        com.operations.Matrix.Matrix matrix64 = com.operations.Matrix.MatrixTransformations.rotate2D((double) (short) 100);
        double[] doubleArray67 = new double[] { 137.90576492663388d, (byte) -1 };
        double[] doubleArray68 = com.operations.Matrix.MatrixSolver.solveGaussian(matrix64, doubleArray67);
        double[] doubleArray69 = com.operations.Matrix.MatrixSolver.solveGaussian(matrix39, doubleArray67);
        double[] doubleArray70 = com.operations.Matrix.MatrixSolver.solveGaussian(matrix37, doubleArray69);
        boolean boolean72 = com.operations.Matrix.MatrixUtils.compare(matrix10, matrix37, (double) 100.0f);
        com.operations.Matrix.Matrix matrix74 = com.operations.Matrix.MatrixOperations.scalarMultiply(matrix10, (-1.0d));
        com.operations.Matrix.Matrix[] matrixArray75 = com.operations.Matrix.MatrixDecompositions.luDecomposition(matrix10);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertArrayEquals(doubleArray2, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertArrayEquals(doubleArray5, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 2 + "'", int8 == 2);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertNotNull(matrix10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 2 + "'", int11 == 2);
        org.junit.Assert.assertNotNull(matrix14);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertArrayEquals(doubleArray17, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertArrayEquals(doubleArray20, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 2 + "'", int23 == 2);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 2 + "'", int24 == 2);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 2 + "'", int25 == 2);
        org.junit.Assert.assertNotNull(matrixArray26);
        org.junit.Assert.assertNotNull(matrix27);
        org.junit.Assert.assertNotNull(matrix29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(matrix32);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 2 + "'", int33 == 2);
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertNotNull(matrix37);
        org.junit.Assert.assertNotNull(matrix39);
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertArrayEquals(doubleArray42, new double[] { 137.90576492663388d, (-1.0d) }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertArrayEquals(doubleArray43, new double[] { (-24.931892522286255d), (-135.63701830716116d) }, 1.0E-15);
        org.junit.Assert.assertNotNull(matrix46);
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertArrayEquals(doubleArray49, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertArrayEquals(doubleArray52, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 2 + "'", int55 == 2);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 2 + "'", int56 == 2);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 2 + "'", int57 == 2);
        org.junit.Assert.assertNotNull(matrixArray58);
        org.junit.Assert.assertNotNull(matrix59);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNotNull(doubleArray62);
        org.junit.Assert.assertNotNull(matrix64);
        org.junit.Assert.assertNotNull(doubleArray67);
        org.junit.Assert.assertArrayEquals(doubleArray67, new double[] { 137.90576492663388d, (-1.0d) }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray68);
        org.junit.Assert.assertArrayEquals(doubleArray68, new double[] { (-24.931892522286255d), (-135.63701830716116d) }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray69);
        org.junit.Assert.assertArrayEquals(doubleArray69, new double[] { (-24.931892522286255d), (-135.63701830716116d) }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray70);
        org.junit.Assert.assertArrayEquals(doubleArray70, new double[] { (-2.4931892522286256d), (-13.563701830716116d) }, 1.0E-15);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + true + "'", boolean72 == true);
        org.junit.Assert.assertNotNull(matrix74);
        org.junit.Assert.assertNotNull(matrixArray75);
    }

    @Test
    public void test1734() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1734");
        com.operations.Matrix.Matrix matrix5 = com.operations.Matrix.MatrixUtils.generateRandomMatrix((int) (byte) 1, (int) (byte) 0, 100, (-1), (long) (short) -1);
        com.operations.Matrix.Matrix matrix7 = com.operations.Matrix.MatrixOperations.scalarMultiply(matrix5, 10.0d);
        double[][] doubleArray8 = matrix7.getData();
        boolean boolean9 = com.operations.Matrix.MatrixUtils.isSymmetric(matrix7);
        com.operations.Matrix.Matrix matrix11 = com.operations.Matrix.MatrixTransformations.rotate2D(350.0d);
        com.operations.Matrix.Matrix matrix12 = com.operations.Matrix.MatrixDecompositions.choleskyDecomposition(matrix11);
        com.operations.Matrix.Matrix matrix14 = com.operations.Matrix.MatrixTransformations.rotate2D(32.0d);
        com.operations.Matrix.Matrix matrix17 = com.operations.Matrix.MatrixTransformations.scale2D((double) 10L, 35.0d);
        matrix17.print();
        boolean boolean19 = com.operations.Matrix.MatrixUtils.isSquare(matrix17);
        com.operations.Matrix.Matrix matrix21 = com.operations.Matrix.MatrixTransformations.rotate2D((-1.0d));
        com.operations.Matrix.Matrix matrix23 = com.operations.Matrix.MatrixTransformations.rotate2D((double) (-1L));
        com.operations.Matrix.Matrix matrix25 = com.operations.Matrix.MatrixTransformations.rotate2D((double) (short) 100);
        double[] doubleArray28 = new double[] { 137.90576492663388d, (byte) -1 };
        double[] doubleArray29 = com.operations.Matrix.MatrixSolver.solveGaussian(matrix25, doubleArray28);
        double[] doubleArray30 = com.operations.Matrix.MatrixSolver.solveGaussian(matrix23, doubleArray28);
        double[] doubleArray31 = com.operations.Matrix.MatrixSolver.solveGaussian(matrix21, doubleArray28);
        double[] doubleArray32 = com.operations.Matrix.MatrixSolver.solveGaussian(matrix17, doubleArray28);
        double[] doubleArray33 = com.operations.Matrix.MatrixSolver.solveGaussian(matrix14, doubleArray28);
        double[] doubleArray34 = com.operations.Matrix.MatrixSolver.solveGaussian(matrix12, doubleArray28);
        // The following exception was thrown during execution in test generation
        try {
            double[] doubleArray35 = com.operations.Matrix.MatrixSolver.solveGaussian(matrix7, doubleArray28);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Matrix must be square to solve equations.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(matrix5);
        org.junit.Assert.assertNotNull(matrix7);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(matrix11);
        org.junit.Assert.assertNotNull(matrix12);
        org.junit.Assert.assertNotNull(matrix14);
        org.junit.Assert.assertNotNull(matrix17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNotNull(matrix21);
        org.junit.Assert.assertNotNull(matrix23);
        org.junit.Assert.assertNotNull(matrix25);
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertArrayEquals(doubleArray28, new double[] { 137.90576492663388d, (-1.0d) }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertArrayEquals(doubleArray29, new double[] { (-24.931892522286255d), (-135.63701830716116d) }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertArrayEquals(doubleArray30, new double[] { 137.90221361711127d, 1.4069397643877004d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertArrayEquals(doubleArray31, new double[] { 137.90221361711127d, 1.4069397643877004d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertArrayEquals(doubleArray32, new double[] { 13.790576492663387d, (-0.02857142857142857d) }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertArrayEquals(doubleArray33, new double[] { 116.4208021307943d, (-73.92696957959556d) }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertArrayEquals(doubleArray34, new double[] { 138.96540326586003d, 23.86966446838909d }, 1.0E-15);
    }

    @Test
    public void test1735() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1735");
        double[] doubleArray2 = new double[] { 10, 'a' };
        double[] doubleArray5 = new double[] { 10, 'a' };
        double[][] doubleArray6 = new double[][] { doubleArray2, doubleArray5 };
        com.operations.Matrix.Matrix matrix7 = new com.operations.Matrix.Matrix(doubleArray6);
        com.operations.Matrix.Matrix matrix8 = new com.operations.Matrix.Matrix(doubleArray6);
        boolean boolean9 = com.operations.Matrix.MatrixUtils.isSquare(matrix8);
        double[] doubleArray12 = new double[] { 10, 'a' };
        double[] doubleArray15 = new double[] { 10, 'a' };
        double[][] doubleArray16 = new double[][] { doubleArray12, doubleArray15 };
        com.operations.Matrix.Matrix matrix17 = new com.operations.Matrix.Matrix(doubleArray16);
        int int18 = matrix17.getCols();
        int int19 = matrix17.getCols();
        matrix17.print();
        double[] doubleArray23 = new double[] { 10, 'a' };
        double[] doubleArray26 = new double[] { 10, 'a' };
        double[][] doubleArray27 = new double[][] { doubleArray23, doubleArray26 };
        com.operations.Matrix.Matrix matrix28 = new com.operations.Matrix.Matrix(doubleArray27);
        boolean boolean30 = com.operations.Matrix.MatrixUtils.compare(matrix17, matrix28, (double) (-1));
        com.operations.Matrix.Matrix matrix31 = com.operations.Matrix.MatrixOperations.subtract(matrix8, matrix28);
        com.operations.Matrix.Matrix[] matrixArray32 = com.operations.Matrix.MatrixDecompositions.luDecomposition(matrix31);
        double[][] doubleArray33 = matrix31.getData();
        boolean boolean34 = com.operations.Matrix.MatrixUtils.isSquare(matrix31);
        com.operations.Matrix.Matrix matrix35 = com.operations.Matrix.MatrixOperations.transpose(matrix31);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertArrayEquals(doubleArray2, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertArrayEquals(doubleArray5, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertArrayEquals(doubleArray12, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertArrayEquals(doubleArray15, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 2 + "'", int18 == 2);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 2 + "'", int19 == 2);
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertArrayEquals(doubleArray23, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertArrayEquals(doubleArray26, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(matrix31);
        org.junit.Assert.assertNotNull(matrixArray32);
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertNotNull(matrix35);
    }

    @Test
    public void test1736() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1736");
        com.operations.Matrix.Matrix matrix5 = com.operations.Matrix.MatrixUtils.generateRandomMatrix((int) (byte) 10, 97, 35, (int) (short) 1, (long) 35);
        boolean boolean6 = com.operations.Matrix.MatrixUtils.isSymmetric(matrix5);
        // The following exception was thrown during execution in test generation
        try {
            double double9 = matrix5.getValue((int) (byte) -1, 32);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(matrix5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
    }

    @Test
    public void test1737() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1737");
        com.operations.Matrix.Matrix matrix2 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0L, (double) (byte) 10);
        int int3 = matrix2.getRows();
        com.operations.Matrix.Matrix matrix9 = com.operations.Matrix.MatrixUtils.generateRandomMatrix(100, (int) (byte) 1, (int) '#', (int) '#', 1L);
        boolean boolean11 = com.operations.Matrix.MatrixUtils.compare(matrix2, matrix9, (double) 1.0f);
        int int12 = matrix2.getCols();
        com.operations.Matrix.Matrix matrix14 = com.operations.Matrix.MatrixTransformations.rotate2D((double) (short) 100);
        double[] doubleArray17 = new double[] { 137.90576492663388d, (byte) -1 };
        double[] doubleArray18 = com.operations.Matrix.MatrixSolver.solveGaussian(matrix14, doubleArray17);
        com.operations.Matrix.Matrix matrix21 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0L, (double) (byte) 10);
        double[] doubleArray24 = new double[] { 10, 'a' };
        double[] doubleArray27 = new double[] { 10, 'a' };
        double[][] doubleArray28 = new double[][] { doubleArray24, doubleArray27 };
        com.operations.Matrix.Matrix matrix29 = new com.operations.Matrix.Matrix(doubleArray28);
        int int30 = matrix29.getCols();
        int int31 = matrix29.getCols();
        int int32 = matrix29.getCols();
        com.operations.Matrix.Matrix[] matrixArray33 = com.operations.Matrix.MatrixDecompositions.luDecomposition(matrix29);
        com.operations.Matrix.Matrix matrix34 = com.operations.Matrix.MatrixOperations.multiply(matrix21, matrix29);
        boolean boolean36 = com.operations.Matrix.MatrixUtils.compare(matrix14, matrix21, (double) (-1L));
        boolean boolean38 = com.operations.Matrix.MatrixUtils.compare(matrix2, matrix14, (double) 'a');
        int int39 = matrix14.getCols();
        int int40 = matrix14.getRows();
        com.operations.Matrix.Matrix matrix43 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0L, (double) (byte) 10);
        int int44 = matrix43.getRows();
        com.operations.Matrix.Matrix matrix46 = com.operations.Matrix.MatrixOperations.scalarMultiply(matrix43, (double) 2);
        com.operations.Matrix.Matrix[] matrixArray47 = com.operations.Matrix.MatrixDecompositions.luDecomposition(matrix46);
        com.operations.Matrix.Matrix matrix48 = com.operations.Matrix.MatrixOperations.transpose(matrix46);
        com.operations.Matrix.Matrix matrix49 = com.operations.Matrix.MatrixOperations.transpose(matrix46);
        com.operations.Matrix.Matrix matrix50 = com.operations.Matrix.MatrixOperations.multiply(matrix14, matrix49);
        // The following exception was thrown during execution in test generation
        try {
            com.operations.Matrix.Matrix matrix51 = com.operations.Matrix.MatrixDecompositions.choleskyDecomposition(matrix50);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Matrix is not positive definite.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(matrix2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 2 + "'", int3 == 2);
        org.junit.Assert.assertNotNull(matrix9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 2 + "'", int12 == 2);
        org.junit.Assert.assertNotNull(matrix14);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertArrayEquals(doubleArray17, new double[] { 137.90576492663388d, (-1.0d) }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertArrayEquals(doubleArray18, new double[] { (-24.931892522286255d), (-135.63701830716116d) }, 1.0E-15);
        org.junit.Assert.assertNotNull(matrix21);
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertArrayEquals(doubleArray24, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertArrayEquals(doubleArray27, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 2 + "'", int30 == 2);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 2 + "'", int31 == 2);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 2 + "'", int32 == 2);
        org.junit.Assert.assertNotNull(matrixArray33);
        org.junit.Assert.assertNotNull(matrix34);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 2 + "'", int39 == 2);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 2 + "'", int40 == 2);
        org.junit.Assert.assertNotNull(matrix43);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 2 + "'", int44 == 2);
        org.junit.Assert.assertNotNull(matrix46);
        org.junit.Assert.assertNotNull(matrixArray47);
        org.junit.Assert.assertNotNull(matrix48);
        org.junit.Assert.assertNotNull(matrix49);
        org.junit.Assert.assertNotNull(matrix50);
    }

    @Test
    public void test1738() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1738");
        com.operations.Matrix.Matrix matrix2 = com.operations.Matrix.MatrixTransformations.scale2D(1363.6076983299943d, 100.0d);
        org.junit.Assert.assertNotNull(matrix2);
    }

    @Test
    public void test1739() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1739");
        com.operations.Matrix.Matrix matrix2 = com.operations.Matrix.MatrixTransformations.project2D((double) (-1L), (-1.0d));
        java.lang.Class<?> wildcardClass3 = matrix2.getClass();
        org.junit.Assert.assertNotNull(matrix2);
        org.junit.Assert.assertNotNull(wildcardClass3);
    }

    @Test
    public void test1740() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1740");
        com.operations.Matrix.Matrix matrix1 = com.operations.Matrix.MatrixTransformations.rotate2D((double) 1.0f);
        com.operations.Matrix.Matrix matrix4 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0L, (double) (byte) 10);
        int int5 = matrix4.getRows();
        com.operations.Matrix.Matrix matrix7 = com.operations.Matrix.MatrixOperations.scalarMultiply(matrix4, (double) 2);
        double double8 = com.operations.Matrix.MatrixUtils.frobeniusNorm(matrix4);
        com.operations.Matrix.Matrix matrix11 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0L, (double) (byte) 10);
        int int12 = matrix11.getRows();
        com.operations.Matrix.Matrix matrix14 = com.operations.Matrix.MatrixOperations.scalarMultiply(matrix11, (double) 2);
        com.operations.Matrix.Matrix matrix15 = com.operations.Matrix.MatrixOperations.subtract(matrix4, matrix14);
        com.operations.Matrix.Matrix matrix16 = com.operations.Matrix.MatrixOperations.add(matrix1, matrix14);
        com.operations.Matrix.Matrix[] matrixArray17 = com.operations.Matrix.MatrixDecompositions.luDecomposition(matrix14);
        boolean boolean18 = com.operations.Matrix.MatrixUtils.isSquare(matrix14);
        com.operations.Matrix.Matrix matrix19 = com.operations.Matrix.MatrixOperations.transpose(matrix14);
        com.operations.Matrix.Matrix matrix21 = com.operations.Matrix.MatrixOperations.scalarMultiply(matrix14, (double) ' ');
        com.operations.Matrix.Matrix matrix24 = com.operations.Matrix.MatrixTransformations.project2D(0.0d, (double) 0);
        double[][] doubleArray25 = matrix24.getData();
        com.operations.Matrix.Matrix matrix26 = new com.operations.Matrix.Matrix(doubleArray25);
        com.operations.Matrix.Matrix matrix27 = new com.operations.Matrix.Matrix(doubleArray25);
        com.operations.Matrix.Matrix matrix28 = com.operations.Matrix.MatrixOperations.multiply(matrix14, matrix27);
        com.operations.Matrix.Matrix matrix29 = com.operations.Matrix.MatrixOperations.transpose(matrix28);
        // The following exception was thrown during execution in test generation
        try {
            com.operations.Matrix.Matrix matrix30 = com.operations.Matrix.MatrixDecompositions.choleskyDecomposition(matrix28);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Matrix is not positive definite.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(matrix1);
        org.junit.Assert.assertNotNull(matrix4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 2 + "'", int5 == 2);
        org.junit.Assert.assertNotNull(matrix7);
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 10.0d + "'", double8 == 10.0d);
        org.junit.Assert.assertNotNull(matrix11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 2 + "'", int12 == 2);
        org.junit.Assert.assertNotNull(matrix14);
        org.junit.Assert.assertNotNull(matrix15);
        org.junit.Assert.assertNotNull(matrix16);
        org.junit.Assert.assertNotNull(matrixArray17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(matrix19);
        org.junit.Assert.assertNotNull(matrix21);
        org.junit.Assert.assertNotNull(matrix24);
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertNotNull(matrix28);
        org.junit.Assert.assertNotNull(matrix29);
    }

    @Test
    public void test1741() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1741");
        com.operations.Matrix.Matrix matrix5 = com.operations.Matrix.MatrixUtils.generateRandomMatrix((int) (short) 100, 1, 10, (int) (short) 10, (long) 0);
        com.operations.Matrix.Matrix matrix8 = com.operations.Matrix.MatrixTransformations.project2D((double) 0L, 99.83621769912266d);
        // The following exception was thrown during execution in test generation
        try {
            com.operations.Matrix.Matrix matrix9 = com.operations.Matrix.MatrixOperations.multiply(matrix5, matrix8);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Matrix A's columns must match Matrix B's rows for multiplication.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(matrix5);
        org.junit.Assert.assertNotNull(matrix8);
    }

    @Test
    public void test1742() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1742");
        com.operations.Matrix.Matrix matrix2 = com.operations.Matrix.MatrixTransformations.scale2D(146.4308710620817d, (double) 10L);
        boolean boolean3 = com.operations.Matrix.MatrixUtils.isSymmetric(matrix2);
        double[][] doubleArray4 = matrix2.getData();
        org.junit.Assert.assertNotNull(matrix2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNotNull(doubleArray4);
    }

    @Test
    public void test1743() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1743");
        com.operations.Matrix.Matrix matrix2 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0L, (double) (byte) 10);
        int int3 = matrix2.getRows();
        com.operations.Matrix.Matrix matrix6 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0L, (double) (byte) 10);
        int int7 = matrix6.getRows();
        com.operations.Matrix.Matrix matrix9 = com.operations.Matrix.MatrixOperations.scalarMultiply(matrix6, (double) 2);
        com.operations.Matrix.Matrix matrix10 = com.operations.Matrix.MatrixOperations.subtract(matrix2, matrix6);
        com.operations.Matrix.Matrix matrix13 = com.operations.Matrix.MatrixTransformations.scale2D(146.4308710620817d, (double) 10L);
        boolean boolean15 = com.operations.Matrix.MatrixUtils.compare(matrix6, matrix13, (double) (byte) 1);
        com.operations.Matrix.Matrix matrix18 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0L, (double) (byte) 10);
        int int19 = matrix18.getRows();
        com.operations.Matrix.Matrix matrix21 = com.operations.Matrix.MatrixOperations.scalarMultiply(matrix18, (double) 2);
        double double22 = com.operations.Matrix.MatrixUtils.frobeniusNorm(matrix18);
        com.operations.Matrix.Matrix matrix25 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0L, (double) (byte) 10);
        int int26 = matrix25.getRows();
        com.operations.Matrix.Matrix matrix28 = com.operations.Matrix.MatrixOperations.scalarMultiply(matrix25, (double) 2);
        com.operations.Matrix.Matrix matrix29 = com.operations.Matrix.MatrixOperations.subtract(matrix18, matrix28);
        com.operations.Matrix.Matrix matrix30 = com.operations.Matrix.MatrixOperations.transpose(matrix18);
        double[] doubleArray33 = new double[] { 10, 'a' };
        double[] doubleArray36 = new double[] { 10, 'a' };
        double[][] doubleArray37 = new double[][] { doubleArray33, doubleArray36 };
        com.operations.Matrix.Matrix matrix38 = new com.operations.Matrix.Matrix(doubleArray37);
        com.operations.Matrix.Matrix matrix39 = new com.operations.Matrix.Matrix(doubleArray37);
        boolean boolean40 = com.operations.Matrix.MatrixUtils.isSquare(matrix39);
        double[] doubleArray43 = new double[] { 10, 'a' };
        double[] doubleArray46 = new double[] { 10, 'a' };
        double[][] doubleArray47 = new double[][] { doubleArray43, doubleArray46 };
        com.operations.Matrix.Matrix matrix48 = new com.operations.Matrix.Matrix(doubleArray47);
        int int49 = matrix48.getCols();
        int int50 = matrix48.getCols();
        matrix48.print();
        double[] doubleArray54 = new double[] { 10, 'a' };
        double[] doubleArray57 = new double[] { 10, 'a' };
        double[][] doubleArray58 = new double[][] { doubleArray54, doubleArray57 };
        com.operations.Matrix.Matrix matrix59 = new com.operations.Matrix.Matrix(doubleArray58);
        boolean boolean61 = com.operations.Matrix.MatrixUtils.compare(matrix48, matrix59, (double) (-1));
        com.operations.Matrix.Matrix matrix62 = com.operations.Matrix.MatrixOperations.subtract(matrix39, matrix59);
        com.operations.Matrix.Matrix matrix63 = com.operations.Matrix.MatrixOperations.subtract(matrix30, matrix39);
        com.operations.Matrix.Matrix matrix64 = com.operations.Matrix.MatrixOperations.multiply(matrix6, matrix39);
        java.lang.Class<?> wildcardClass65 = matrix39.getClass();
        org.junit.Assert.assertNotNull(matrix2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 2 + "'", int3 == 2);
        org.junit.Assert.assertNotNull(matrix6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 2 + "'", int7 == 2);
        org.junit.Assert.assertNotNull(matrix9);
        org.junit.Assert.assertNotNull(matrix10);
        org.junit.Assert.assertNotNull(matrix13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(matrix18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 2 + "'", int19 == 2);
        org.junit.Assert.assertNotNull(matrix21);
        org.junit.Assert.assertTrue("'" + double22 + "' != '" + 10.0d + "'", double22 == 10.0d);
        org.junit.Assert.assertNotNull(matrix25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 2 + "'", int26 == 2);
        org.junit.Assert.assertNotNull(matrix28);
        org.junit.Assert.assertNotNull(matrix29);
        org.junit.Assert.assertNotNull(matrix30);
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertArrayEquals(doubleArray33, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertArrayEquals(doubleArray36, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertArrayEquals(doubleArray43, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray46);
        org.junit.Assert.assertArrayEquals(doubleArray46, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 2 + "'", int49 == 2);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 2 + "'", int50 == 2);
        org.junit.Assert.assertNotNull(doubleArray54);
        org.junit.Assert.assertArrayEquals(doubleArray54, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray57);
        org.junit.Assert.assertArrayEquals(doubleArray57, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray58);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNotNull(matrix62);
        org.junit.Assert.assertNotNull(matrix63);
        org.junit.Assert.assertNotNull(matrix64);
        org.junit.Assert.assertNotNull(wildcardClass65);
    }

    @Test
    public void test1744() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1744");
        com.operations.Matrix.Matrix matrix2 = new com.operations.Matrix.Matrix((int) (byte) 0, (int) ' ');
    }

    @Test
    public void test1745() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1745");
        com.operations.Matrix.Matrix matrix2 = com.operations.Matrix.MatrixTransformations.project2D((double) ' ', 0.0d);
        boolean boolean3 = com.operations.Matrix.MatrixUtils.isSymmetric(matrix2);
        com.operations.Matrix.Matrix matrix4 = com.operations.Matrix.MatrixOperations.transpose(matrix2);
        matrix2.print();
        org.junit.Assert.assertNotNull(matrix2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNotNull(matrix4);
    }

    @Test
    public void test1746() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1746");
        com.operations.Matrix.Matrix matrix0 = null;
        // The following exception was thrown during execution in test generation
        try {
            com.operations.Matrix.Matrix matrix2 = com.operations.Matrix.MatrixOperations.scalarMultiply(matrix0, 1.969615506024416d);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test1747() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1747");
        double[] doubleArray2 = new double[] { 10, 'a' };
        double[] doubleArray5 = new double[] { 10, 'a' };
        double[][] doubleArray6 = new double[][] { doubleArray2, doubleArray5 };
        com.operations.Matrix.Matrix matrix7 = new com.operations.Matrix.Matrix(doubleArray6);
        int int8 = matrix7.getCols();
        int int9 = matrix7.getCols();
        matrix7.print();
        boolean boolean11 = com.operations.Matrix.MatrixUtils.isSymmetric(matrix7);
        com.operations.Matrix.Matrix matrix14 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0L, (double) (byte) 10);
        double[] doubleArray17 = new double[] { 10, 'a' };
        double[] doubleArray20 = new double[] { 10, 'a' };
        double[][] doubleArray21 = new double[][] { doubleArray17, doubleArray20 };
        com.operations.Matrix.Matrix matrix22 = new com.operations.Matrix.Matrix(doubleArray21);
        int int23 = matrix22.getCols();
        int int24 = matrix22.getCols();
        int int25 = matrix22.getCols();
        com.operations.Matrix.Matrix[] matrixArray26 = com.operations.Matrix.MatrixDecompositions.luDecomposition(matrix22);
        com.operations.Matrix.Matrix matrix27 = com.operations.Matrix.MatrixOperations.multiply(matrix14, matrix22);
        int int28 = matrix22.getRows();
        com.operations.Matrix.Matrix matrix30 = com.operations.Matrix.MatrixOperations.scalarMultiply(matrix22, (double) (-1L));
        com.operations.Matrix.Matrix matrix33 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0L, (double) (byte) 10);
        int int34 = matrix33.getRows();
        com.operations.Matrix.Matrix matrix36 = com.operations.Matrix.MatrixOperations.scalarMultiply(matrix33, (double) 2);
        com.operations.Matrix.Matrix[] matrixArray37 = com.operations.Matrix.MatrixDecompositions.luDecomposition(matrix36);
        com.operations.Matrix.Matrix matrix38 = com.operations.Matrix.MatrixOperations.transpose(matrix36);
        com.operations.Matrix.Matrix matrix39 = com.operations.Matrix.MatrixOperations.add(matrix22, matrix36);
        com.operations.Matrix.Matrix matrix40 = com.operations.Matrix.MatrixOperations.subtract(matrix7, matrix36);
        com.operations.Matrix.Matrix matrix41 = com.operations.Matrix.MatrixOperations.transpose(matrix40);
        boolean boolean42 = com.operations.Matrix.MatrixUtils.isSymmetric(matrix41);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertArrayEquals(doubleArray2, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertArrayEquals(doubleArray5, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 2 + "'", int8 == 2);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 2 + "'", int9 == 2);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(matrix14);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertArrayEquals(doubleArray17, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertArrayEquals(doubleArray20, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 2 + "'", int23 == 2);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 2 + "'", int24 == 2);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 2 + "'", int25 == 2);
        org.junit.Assert.assertNotNull(matrixArray26);
        org.junit.Assert.assertNotNull(matrix27);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 2 + "'", int28 == 2);
        org.junit.Assert.assertNotNull(matrix30);
        org.junit.Assert.assertNotNull(matrix33);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 2 + "'", int34 == 2);
        org.junit.Assert.assertNotNull(matrix36);
        org.junit.Assert.assertNotNull(matrixArray37);
        org.junit.Assert.assertNotNull(matrix38);
        org.junit.Assert.assertNotNull(matrix39);
        org.junit.Assert.assertNotNull(matrix40);
        org.junit.Assert.assertNotNull(matrix41);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
    }

    @Test
    public void test1748() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1748");
        com.operations.Matrix.Matrix matrix1 = com.operations.Matrix.MatrixTransformations.rotate2D((double) '4');
        double[] doubleArray4 = new double[] { 10, 'a' };
        double[] doubleArray7 = new double[] { 10, 'a' };
        double[][] doubleArray8 = new double[][] { doubleArray4, doubleArray7 };
        com.operations.Matrix.Matrix matrix9 = new com.operations.Matrix.Matrix(doubleArray8);
        com.operations.Matrix.Matrix matrix10 = new com.operations.Matrix.Matrix(doubleArray8);
        com.operations.Matrix.Matrix matrix12 = com.operations.Matrix.MatrixTransformations.rotate2D((double) (short) 100);
        double[] doubleArray15 = new double[] { 137.90576492663388d, (byte) -1 };
        double[] doubleArray16 = com.operations.Matrix.MatrixSolver.solveGaussian(matrix12, doubleArray15);
        com.operations.Matrix.Matrix matrix17 = com.operations.Matrix.MatrixOperations.add(matrix10, matrix12);
        boolean boolean18 = com.operations.Matrix.MatrixUtils.isSymmetric(matrix17);
        boolean boolean20 = com.operations.Matrix.MatrixUtils.compare(matrix1, matrix17, 364.0054944640259d);
        com.operations.Matrix.Matrix matrix23 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0L, (double) (byte) 10);
        double[] doubleArray26 = new double[] { 10, 'a' };
        double[] doubleArray29 = new double[] { 10, 'a' };
        double[][] doubleArray30 = new double[][] { doubleArray26, doubleArray29 };
        com.operations.Matrix.Matrix matrix31 = new com.operations.Matrix.Matrix(doubleArray30);
        int int32 = matrix31.getCols();
        int int33 = matrix31.getCols();
        int int34 = matrix31.getCols();
        com.operations.Matrix.Matrix[] matrixArray35 = com.operations.Matrix.MatrixDecompositions.luDecomposition(matrix31);
        com.operations.Matrix.Matrix matrix36 = com.operations.Matrix.MatrixOperations.multiply(matrix23, matrix31);
        com.operations.Matrix.Matrix matrix38 = com.operations.Matrix.MatrixTransformations.rotate2D((double) (short) 100);
        boolean boolean40 = com.operations.Matrix.MatrixUtils.compare(matrix31, matrix38, (double) (byte) 0);
        com.operations.Matrix.Matrix[] matrixArray41 = com.operations.Matrix.MatrixDecompositions.luDecomposition(matrix31);
        com.operations.Matrix.Matrix matrix42 = com.operations.Matrix.MatrixOperations.transpose(matrix31);
        com.operations.Matrix.Matrix matrix45 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0L, (double) (byte) 10);
        int int46 = matrix45.getRows();
        com.operations.Matrix.Matrix matrix49 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0L, (double) (byte) 10);
        int int50 = matrix49.getRows();
        com.operations.Matrix.Matrix matrix52 = com.operations.Matrix.MatrixOperations.scalarMultiply(matrix49, (double) 2);
        com.operations.Matrix.Matrix matrix53 = com.operations.Matrix.MatrixOperations.subtract(matrix45, matrix49);
        boolean boolean55 = com.operations.Matrix.MatrixUtils.compare(matrix31, matrix45, (double) ' ');
        boolean boolean57 = com.operations.Matrix.MatrixUtils.compare(matrix17, matrix31, (double) 0L);
        com.operations.Matrix.Matrix matrix58 = com.operations.Matrix.MatrixDecompositions.choleskyDecomposition(matrix17);
        int int59 = matrix17.getCols();
        org.junit.Assert.assertNotNull(matrix1);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertArrayEquals(doubleArray4, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertArrayEquals(doubleArray7, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertNotNull(matrix12);
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertArrayEquals(doubleArray15, new double[] { 137.90576492663388d, (-1.0d) }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertArrayEquals(doubleArray16, new double[] { (-24.931892522286255d), (-135.63701830716116d) }, 1.0E-15);
        org.junit.Assert.assertNotNull(matrix17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertNotNull(matrix23);
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertArrayEquals(doubleArray26, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertArrayEquals(doubleArray29, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 2 + "'", int32 == 2);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 2 + "'", int33 == 2);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 2 + "'", int34 == 2);
        org.junit.Assert.assertNotNull(matrixArray35);
        org.junit.Assert.assertNotNull(matrix36);
        org.junit.Assert.assertNotNull(matrix38);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(matrixArray41);
        org.junit.Assert.assertNotNull(matrix42);
        org.junit.Assert.assertNotNull(matrix45);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 2 + "'", int46 == 2);
        org.junit.Assert.assertNotNull(matrix49);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 2 + "'", int50 == 2);
        org.junit.Assert.assertNotNull(matrix52);
        org.junit.Assert.assertNotNull(matrix53);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNotNull(matrix58);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 2 + "'", int59 == 2);
    }

    @Test
    public void test1749() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1749");
        com.operations.Matrix.Matrix matrix2 = com.operations.Matrix.MatrixTransformations.project2D((double) (short) 100, (double) 0L);
        boolean boolean3 = com.operations.Matrix.MatrixUtils.isSquare(matrix2);
        double[] doubleArray6 = new double[] { 10, 'a' };
        double[] doubleArray9 = new double[] { 10, 'a' };
        double[][] doubleArray10 = new double[][] { doubleArray6, doubleArray9 };
        com.operations.Matrix.Matrix matrix11 = new com.operations.Matrix.Matrix(doubleArray10);
        com.operations.Matrix.Matrix matrix12 = new com.operations.Matrix.Matrix(doubleArray10);
        com.operations.Matrix.Matrix matrix14 = com.operations.Matrix.MatrixTransformations.rotate2D((double) (short) 100);
        double[] doubleArray17 = new double[] { 137.90576492663388d, (byte) -1 };
        double[] doubleArray18 = com.operations.Matrix.MatrixSolver.solveGaussian(matrix14, doubleArray17);
        com.operations.Matrix.Matrix matrix19 = com.operations.Matrix.MatrixOperations.add(matrix12, matrix14);
        com.operations.Matrix.Matrix matrix20 = com.operations.Matrix.MatrixOperations.transpose(matrix14);
        int int21 = matrix14.getCols();
        int int22 = matrix14.getRows();
        double[] doubleArray25 = new double[] { 10, 'a' };
        double[] doubleArray28 = new double[] { 10, 'a' };
        double[][] doubleArray29 = new double[][] { doubleArray25, doubleArray28 };
        com.operations.Matrix.Matrix matrix30 = new com.operations.Matrix.Matrix(doubleArray29);
        int int31 = matrix30.getCols();
        int int32 = matrix30.getCols();
        matrix30.print();
        double[] doubleArray36 = new double[] { 10, 'a' };
        double[] doubleArray39 = new double[] { 10, 'a' };
        double[][] doubleArray40 = new double[][] { doubleArray36, doubleArray39 };
        com.operations.Matrix.Matrix matrix41 = new com.operations.Matrix.Matrix(doubleArray40);
        boolean boolean43 = com.operations.Matrix.MatrixUtils.compare(matrix30, matrix41, (double) (-1));
        com.operations.Matrix.Matrix matrix44 = com.operations.Matrix.MatrixOperations.multiply(matrix14, matrix30);
        double double47 = matrix14.getValue((int) (short) 0, 0);
        com.operations.Matrix.Matrix matrix48 = com.operations.Matrix.MatrixOperations.add(matrix2, matrix14);
        com.operations.Matrix.Matrix matrix50 = com.operations.Matrix.MatrixOperations.scalarMultiply(matrix48, 0.0d);
        double[][] doubleArray51 = matrix50.getData();
        // The following exception was thrown during execution in test generation
        try {
            matrix50.setValue(52, (int) (short) -1, 260.95643973734866d);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: Index 52 out of bounds for length 2");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(matrix2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertArrayEquals(doubleArray6, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertArrayEquals(doubleArray9, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertNotNull(matrix14);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertArrayEquals(doubleArray17, new double[] { 137.90576492663388d, (-1.0d) }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertArrayEquals(doubleArray18, new double[] { (-24.931892522286255d), (-135.63701830716116d) }, 1.0E-15);
        org.junit.Assert.assertNotNull(matrix19);
        org.junit.Assert.assertNotNull(matrix20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 2 + "'", int21 == 2);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 2 + "'", int22 == 2);
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertArrayEquals(doubleArray25, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertArrayEquals(doubleArray28, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 2 + "'", int31 == 2);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 2 + "'", int32 == 2);
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertArrayEquals(doubleArray36, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertArrayEquals(doubleArray39, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(matrix44);
        org.junit.Assert.assertTrue("'" + double47 + "' != '" + (-0.1736481776669303d) + "'", double47 == (-0.1736481776669303d));
        org.junit.Assert.assertNotNull(matrix48);
        org.junit.Assert.assertNotNull(matrix50);
        org.junit.Assert.assertNotNull(doubleArray51);
    }

    @Test
    public void test1750() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1750");
        // The following exception was thrown during execution in test generation
        try {
            com.operations.Matrix.Matrix matrix5 = com.operations.Matrix.MatrixUtils.generateRandomMatrix((-1), 0, 52, 0, (long) (byte) 1);
            org.junit.Assert.fail("Expected exception of type java.lang.NegativeArraySizeException; message: -1");
        } catch (java.lang.NegativeArraySizeException e) {
            // Expected exception.
        }
    }

    @Test
    public void test1751() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1751");
        double[] doubleArray2 = new double[] { 10, 'a' };
        double[] doubleArray5 = new double[] { 10, 'a' };
        double[][] doubleArray6 = new double[][] { doubleArray2, doubleArray5 };
        com.operations.Matrix.Matrix matrix7 = new com.operations.Matrix.Matrix(doubleArray6);
        int int8 = matrix7.getCols();
        int int9 = matrix7.getCols();
        matrix7.print();
        boolean boolean11 = com.operations.Matrix.MatrixUtils.isSymmetric(matrix7);
        com.operations.Matrix.Matrix matrix14 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0L, (double) (byte) 10);
        double[] doubleArray17 = new double[] { 10, 'a' };
        double[] doubleArray20 = new double[] { 10, 'a' };
        double[][] doubleArray21 = new double[][] { doubleArray17, doubleArray20 };
        com.operations.Matrix.Matrix matrix22 = new com.operations.Matrix.Matrix(doubleArray21);
        int int23 = matrix22.getCols();
        int int24 = matrix22.getCols();
        int int25 = matrix22.getCols();
        com.operations.Matrix.Matrix[] matrixArray26 = com.operations.Matrix.MatrixDecompositions.luDecomposition(matrix22);
        com.operations.Matrix.Matrix matrix27 = com.operations.Matrix.MatrixOperations.multiply(matrix14, matrix22);
        int int28 = matrix22.getRows();
        com.operations.Matrix.Matrix matrix30 = com.operations.Matrix.MatrixOperations.scalarMultiply(matrix22, (double) (-1L));
        com.operations.Matrix.Matrix matrix33 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0L, (double) (byte) 10);
        int int34 = matrix33.getRows();
        com.operations.Matrix.Matrix matrix36 = com.operations.Matrix.MatrixOperations.scalarMultiply(matrix33, (double) 2);
        com.operations.Matrix.Matrix[] matrixArray37 = com.operations.Matrix.MatrixDecompositions.luDecomposition(matrix36);
        com.operations.Matrix.Matrix matrix38 = com.operations.Matrix.MatrixOperations.transpose(matrix36);
        com.operations.Matrix.Matrix matrix39 = com.operations.Matrix.MatrixOperations.add(matrix22, matrix36);
        com.operations.Matrix.Matrix matrix40 = com.operations.Matrix.MatrixOperations.subtract(matrix7, matrix36);
        com.operations.Matrix.Matrix matrix41 = com.operations.Matrix.MatrixOperations.transpose(matrix40);
        matrix40.print();
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertArrayEquals(doubleArray2, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertArrayEquals(doubleArray5, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 2 + "'", int8 == 2);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 2 + "'", int9 == 2);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(matrix14);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertArrayEquals(doubleArray17, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertArrayEquals(doubleArray20, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 2 + "'", int23 == 2);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 2 + "'", int24 == 2);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 2 + "'", int25 == 2);
        org.junit.Assert.assertNotNull(matrixArray26);
        org.junit.Assert.assertNotNull(matrix27);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 2 + "'", int28 == 2);
        org.junit.Assert.assertNotNull(matrix30);
        org.junit.Assert.assertNotNull(matrix33);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 2 + "'", int34 == 2);
        org.junit.Assert.assertNotNull(matrix36);
        org.junit.Assert.assertNotNull(matrixArray37);
        org.junit.Assert.assertNotNull(matrix38);
        org.junit.Assert.assertNotNull(matrix39);
        org.junit.Assert.assertNotNull(matrix40);
        org.junit.Assert.assertNotNull(matrix41);
    }

    @Test
    public void test1752() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1752");
        com.operations.Matrix.Matrix matrix5 = com.operations.Matrix.MatrixUtils.generateRandomMatrix((int) (byte) 100, 0, (int) (byte) 1, 2, (long) 32);
        boolean boolean6 = com.operations.Matrix.MatrixUtils.isSymmetric(matrix5);
        int int7 = matrix5.getCols();
        org.junit.Assert.assertNotNull(matrix5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
    }

    @Test
    public void test1753() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1753");
        double[] doubleArray2 = new double[] { 10, 'a' };
        double[] doubleArray5 = new double[] { 10, 'a' };
        double[][] doubleArray6 = new double[][] { doubleArray2, doubleArray5 };
        com.operations.Matrix.Matrix matrix7 = new com.operations.Matrix.Matrix(doubleArray6);
        com.operations.Matrix.Matrix matrix8 = new com.operations.Matrix.Matrix(doubleArray6);
        boolean boolean9 = com.operations.Matrix.MatrixUtils.isSquare(matrix8);
        double[] doubleArray12 = new double[] { 10, 'a' };
        double[] doubleArray15 = new double[] { 10, 'a' };
        double[][] doubleArray16 = new double[][] { doubleArray12, doubleArray15 };
        com.operations.Matrix.Matrix matrix17 = new com.operations.Matrix.Matrix(doubleArray16);
        int int18 = matrix17.getCols();
        int int19 = matrix17.getCols();
        matrix17.print();
        double[] doubleArray23 = new double[] { 10, 'a' };
        double[] doubleArray26 = new double[] { 10, 'a' };
        double[][] doubleArray27 = new double[][] { doubleArray23, doubleArray26 };
        com.operations.Matrix.Matrix matrix28 = new com.operations.Matrix.Matrix(doubleArray27);
        boolean boolean30 = com.operations.Matrix.MatrixUtils.compare(matrix17, matrix28, (double) (-1));
        com.operations.Matrix.Matrix matrix31 = com.operations.Matrix.MatrixOperations.subtract(matrix8, matrix28);
        boolean boolean32 = com.operations.Matrix.MatrixUtils.isSymmetric(matrix31);
        com.operations.Matrix.Matrix matrix35 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0L, (double) 10L);
        com.operations.Matrix.Matrix matrix38 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0L, (double) (byte) 10);
        double[] doubleArray41 = new double[] { 10, 'a' };
        double[] doubleArray44 = new double[] { 10, 'a' };
        double[][] doubleArray45 = new double[][] { doubleArray41, doubleArray44 };
        com.operations.Matrix.Matrix matrix46 = new com.operations.Matrix.Matrix(doubleArray45);
        int int47 = matrix46.getCols();
        int int48 = matrix46.getCols();
        int int49 = matrix46.getCols();
        com.operations.Matrix.Matrix[] matrixArray50 = com.operations.Matrix.MatrixDecompositions.luDecomposition(matrix46);
        com.operations.Matrix.Matrix matrix51 = com.operations.Matrix.MatrixOperations.multiply(matrix38, matrix46);
        com.operations.Matrix.Matrix matrix53 = com.operations.Matrix.MatrixTransformations.rotate2D((double) (short) 100);
        boolean boolean55 = com.operations.Matrix.MatrixUtils.compare(matrix46, matrix53, (double) (byte) 0);
        double[] doubleArray58 = new double[] { 10, 'a' };
        double[] doubleArray61 = new double[] { 10, 'a' };
        double[][] doubleArray62 = new double[][] { doubleArray58, doubleArray61 };
        com.operations.Matrix.Matrix matrix63 = new com.operations.Matrix.Matrix(doubleArray62);
        com.operations.Matrix.Matrix matrix64 = new com.operations.Matrix.Matrix(doubleArray62);
        com.operations.Matrix.Matrix matrix65 = new com.operations.Matrix.Matrix(doubleArray62);
        boolean boolean67 = com.operations.Matrix.MatrixUtils.compare(matrix46, matrix65, (double) (-1));
        com.operations.Matrix.Matrix matrix69 = com.operations.Matrix.MatrixTransformations.rotate2D((double) (short) 100);
        double[] doubleArray72 = new double[] { 137.90576492663388d, (byte) -1 };
        double[] doubleArray73 = com.operations.Matrix.MatrixSolver.solveGaussian(matrix69, doubleArray72);
        com.operations.Matrix.Matrix matrix76 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0L, (double) (byte) 10);
        double[] doubleArray79 = new double[] { 10, 'a' };
        double[] doubleArray82 = new double[] { 10, 'a' };
        double[][] doubleArray83 = new double[][] { doubleArray79, doubleArray82 };
        com.operations.Matrix.Matrix matrix84 = new com.operations.Matrix.Matrix(doubleArray83);
        int int85 = matrix84.getCols();
        int int86 = matrix84.getCols();
        int int87 = matrix84.getCols();
        com.operations.Matrix.Matrix[] matrixArray88 = com.operations.Matrix.MatrixDecompositions.luDecomposition(matrix84);
        com.operations.Matrix.Matrix matrix89 = com.operations.Matrix.MatrixOperations.multiply(matrix76, matrix84);
        boolean boolean91 = com.operations.Matrix.MatrixUtils.compare(matrix69, matrix76, (double) (-1L));
        com.operations.Matrix.Matrix matrix92 = com.operations.Matrix.MatrixOperations.add(matrix65, matrix76);
        boolean boolean94 = com.operations.Matrix.MatrixUtils.compare(matrix35, matrix92, 146.4308710620817d);
        com.operations.Matrix.Matrix matrix96 = com.operations.Matrix.MatrixOperations.scalarMultiply(matrix92, (double) 100L);
        com.operations.Matrix.Matrix matrix97 = com.operations.Matrix.MatrixDecompositions.choleskyDecomposition(matrix92);
        com.operations.Matrix.Matrix matrix98 = com.operations.Matrix.MatrixOperations.add(matrix31, matrix97);
        com.operations.Matrix.Matrix[] matrixArray99 = com.operations.Matrix.MatrixDecompositions.luDecomposition(matrix98);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertArrayEquals(doubleArray2, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertArrayEquals(doubleArray5, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertArrayEquals(doubleArray12, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertArrayEquals(doubleArray15, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 2 + "'", int18 == 2);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 2 + "'", int19 == 2);
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertArrayEquals(doubleArray23, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertArrayEquals(doubleArray26, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(matrix31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertNotNull(matrix35);
        org.junit.Assert.assertNotNull(matrix38);
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertArrayEquals(doubleArray41, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertArrayEquals(doubleArray44, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 2 + "'", int47 == 2);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 2 + "'", int48 == 2);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 2 + "'", int49 == 2);
        org.junit.Assert.assertNotNull(matrixArray50);
        org.junit.Assert.assertNotNull(matrix51);
        org.junit.Assert.assertNotNull(matrix53);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNotNull(doubleArray58);
        org.junit.Assert.assertArrayEquals(doubleArray58, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray61);
        org.junit.Assert.assertArrayEquals(doubleArray61, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray62);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertNotNull(matrix69);
        org.junit.Assert.assertNotNull(doubleArray72);
        org.junit.Assert.assertArrayEquals(doubleArray72, new double[] { 137.90576492663388d, (-1.0d) }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray73);
        org.junit.Assert.assertArrayEquals(doubleArray73, new double[] { (-24.931892522286255d), (-135.63701830716116d) }, 1.0E-15);
        org.junit.Assert.assertNotNull(matrix76);
        org.junit.Assert.assertNotNull(doubleArray79);
        org.junit.Assert.assertArrayEquals(doubleArray79, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray82);
        org.junit.Assert.assertArrayEquals(doubleArray82, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray83);
        org.junit.Assert.assertTrue("'" + int85 + "' != '" + 2 + "'", int85 == 2);
        org.junit.Assert.assertTrue("'" + int86 + "' != '" + 2 + "'", int86 == 2);
        org.junit.Assert.assertTrue("'" + int87 + "' != '" + 2 + "'", int87 == 2);
        org.junit.Assert.assertNotNull(matrixArray88);
        org.junit.Assert.assertNotNull(matrix89);
        org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + false + "'", boolean91 == false);
        org.junit.Assert.assertNotNull(matrix92);
        org.junit.Assert.assertTrue("'" + boolean94 + "' != '" + true + "'", boolean94 == true);
        org.junit.Assert.assertNotNull(matrix96);
        org.junit.Assert.assertNotNull(matrix97);
        org.junit.Assert.assertNotNull(matrix98);
        org.junit.Assert.assertNotNull(matrixArray99);
    }

    @Test
    public void test1754() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1754");
        com.operations.Matrix.Matrix matrix2 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0L, (double) (byte) 10);
        double[] doubleArray5 = new double[] { 10, 'a' };
        double[] doubleArray8 = new double[] { 10, 'a' };
        double[][] doubleArray9 = new double[][] { doubleArray5, doubleArray8 };
        com.operations.Matrix.Matrix matrix10 = new com.operations.Matrix.Matrix(doubleArray9);
        int int11 = matrix10.getCols();
        int int12 = matrix10.getCols();
        int int13 = matrix10.getCols();
        com.operations.Matrix.Matrix[] matrixArray14 = com.operations.Matrix.MatrixDecompositions.luDecomposition(matrix10);
        com.operations.Matrix.Matrix matrix15 = com.operations.Matrix.MatrixOperations.multiply(matrix2, matrix10);
        com.operations.Matrix.Matrix matrix17 = com.operations.Matrix.MatrixTransformations.rotate2D((double) (short) 100);
        boolean boolean19 = com.operations.Matrix.MatrixUtils.compare(matrix10, matrix17, (double) (byte) 0);
        com.operations.Matrix.Matrix matrix21 = com.operations.Matrix.MatrixTransformations.rotate2D((double) 1.0f);
        com.operations.Matrix.Matrix matrix24 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0L, (double) (byte) 10);
        int int25 = matrix24.getRows();
        com.operations.Matrix.Matrix matrix27 = com.operations.Matrix.MatrixOperations.scalarMultiply(matrix24, (double) 2);
        double double28 = com.operations.Matrix.MatrixUtils.frobeniusNorm(matrix24);
        com.operations.Matrix.Matrix matrix31 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0L, (double) (byte) 10);
        int int32 = matrix31.getRows();
        com.operations.Matrix.Matrix matrix34 = com.operations.Matrix.MatrixOperations.scalarMultiply(matrix31, (double) 2);
        com.operations.Matrix.Matrix matrix35 = com.operations.Matrix.MatrixOperations.subtract(matrix24, matrix34);
        com.operations.Matrix.Matrix matrix36 = com.operations.Matrix.MatrixOperations.add(matrix21, matrix34);
        double[] doubleArray39 = new double[] { 10, 'a' };
        double[] doubleArray42 = new double[] { 10, 'a' };
        double[][] doubleArray43 = new double[][] { doubleArray39, doubleArray42 };
        com.operations.Matrix.Matrix matrix44 = new com.operations.Matrix.Matrix(doubleArray43);
        int int45 = matrix44.getCols();
        int int46 = matrix44.getCols();
        int int47 = matrix44.getCols();
        com.operations.Matrix.Matrix matrix53 = com.operations.Matrix.MatrixUtils.generateRandomMatrix(100, (int) (byte) 1, (int) '#', (int) '#', 1L);
        double double56 = matrix53.getValue((int) '4', 0);
        double double57 = com.operations.Matrix.MatrixUtils.frobeniusNorm(matrix53);
        boolean boolean58 = com.operations.Matrix.MatrixUtils.isSquare(matrix53);
        boolean boolean60 = com.operations.Matrix.MatrixUtils.compare(matrix44, matrix53, (double) 100L);
        com.operations.Matrix.Matrix matrix62 = com.operations.Matrix.MatrixTransformations.rotate2D((double) (short) 100);
        double[] doubleArray65 = new double[] { 137.90576492663388d, (byte) -1 };
        double[] doubleArray66 = com.operations.Matrix.MatrixSolver.solveGaussian(matrix62, doubleArray65);
        com.operations.Matrix.Matrix matrix69 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0L, (double) (byte) 10);
        double[] doubleArray72 = new double[] { 10, 'a' };
        double[] doubleArray75 = new double[] { 10, 'a' };
        double[][] doubleArray76 = new double[][] { doubleArray72, doubleArray75 };
        com.operations.Matrix.Matrix matrix77 = new com.operations.Matrix.Matrix(doubleArray76);
        int int78 = matrix77.getCols();
        int int79 = matrix77.getCols();
        int int80 = matrix77.getCols();
        com.operations.Matrix.Matrix[] matrixArray81 = com.operations.Matrix.MatrixDecompositions.luDecomposition(matrix77);
        com.operations.Matrix.Matrix matrix82 = com.operations.Matrix.MatrixOperations.multiply(matrix69, matrix77);
        boolean boolean84 = com.operations.Matrix.MatrixUtils.compare(matrix62, matrix69, (double) (-1L));
        com.operations.Matrix.Matrix matrix85 = com.operations.Matrix.MatrixOperations.subtract(matrix44, matrix69);
        com.operations.Matrix.Matrix matrix86 = com.operations.Matrix.MatrixOperations.add(matrix34, matrix69);
        com.operations.Matrix.Matrix matrix87 = com.operations.Matrix.MatrixOperations.add(matrix17, matrix86);
        com.operations.Matrix.Matrix[] matrixArray88 = com.operations.Matrix.MatrixDecompositions.luDecomposition(matrix86);
        org.junit.Assert.assertNotNull(matrix2);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertArrayEquals(doubleArray5, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertArrayEquals(doubleArray8, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 2 + "'", int11 == 2);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 2 + "'", int12 == 2);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 2 + "'", int13 == 2);
        org.junit.Assert.assertNotNull(matrixArray14);
        org.junit.Assert.assertNotNull(matrix15);
        org.junit.Assert.assertNotNull(matrix17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(matrix21);
        org.junit.Assert.assertNotNull(matrix24);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 2 + "'", int25 == 2);
        org.junit.Assert.assertNotNull(matrix27);
        org.junit.Assert.assertTrue("'" + double28 + "' != '" + 10.0d + "'", double28 == 10.0d);
        org.junit.Assert.assertNotNull(matrix31);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 2 + "'", int32 == 2);
        org.junit.Assert.assertNotNull(matrix34);
        org.junit.Assert.assertNotNull(matrix35);
        org.junit.Assert.assertNotNull(matrix36);
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertArrayEquals(doubleArray39, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertArrayEquals(doubleArray42, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 2 + "'", int45 == 2);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 2 + "'", int46 == 2);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 2 + "'", int47 == 2);
        org.junit.Assert.assertNotNull(matrix53);
        org.junit.Assert.assertTrue("'" + double56 + "' != '" + 35.0d + "'", double56 == 35.0d);
        org.junit.Assert.assertTrue("'" + double57 + "' != '" + 350.0d + "'", double57 == 350.0d);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertNotNull(matrix62);
        org.junit.Assert.assertNotNull(doubleArray65);
        org.junit.Assert.assertArrayEquals(doubleArray65, new double[] { 137.90576492663388d, (-1.0d) }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray66);
        org.junit.Assert.assertArrayEquals(doubleArray66, new double[] { (-24.931892522286255d), (-135.63701830716116d) }, 1.0E-15);
        org.junit.Assert.assertNotNull(matrix69);
        org.junit.Assert.assertNotNull(doubleArray72);
        org.junit.Assert.assertArrayEquals(doubleArray72, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray75);
        org.junit.Assert.assertArrayEquals(doubleArray75, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray76);
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + 2 + "'", int78 == 2);
        org.junit.Assert.assertTrue("'" + int79 + "' != '" + 2 + "'", int79 == 2);
        org.junit.Assert.assertTrue("'" + int80 + "' != '" + 2 + "'", int80 == 2);
        org.junit.Assert.assertNotNull(matrixArray81);
        org.junit.Assert.assertNotNull(matrix82);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
        org.junit.Assert.assertNotNull(matrix85);
        org.junit.Assert.assertNotNull(matrix86);
        org.junit.Assert.assertNotNull(matrix87);
        org.junit.Assert.assertNotNull(matrixArray88);
    }

    @Test
    public void test1755() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1755");
        com.operations.Matrix.Matrix matrix1 = com.operations.Matrix.MatrixTransformations.rotate2D(350.0d);
        com.operations.Matrix.Matrix matrix3 = com.operations.Matrix.MatrixTransformations.rotate2D((double) (short) 100);
        double[] doubleArray6 = new double[] { 137.90576492663388d, (byte) -1 };
        double[] doubleArray7 = com.operations.Matrix.MatrixSolver.solveGaussian(matrix3, doubleArray6);
        double[] doubleArray8 = com.operations.Matrix.MatrixSolver.solveGaussian(matrix1, doubleArray7);
        com.operations.Matrix.Matrix matrix11 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0L, (double) (byte) 10);
        double[] doubleArray14 = new double[] { 10, 'a' };
        double[] doubleArray17 = new double[] { 10, 'a' };
        double[][] doubleArray18 = new double[][] { doubleArray14, doubleArray17 };
        com.operations.Matrix.Matrix matrix19 = new com.operations.Matrix.Matrix(doubleArray18);
        int int20 = matrix19.getCols();
        int int21 = matrix19.getCols();
        int int22 = matrix19.getCols();
        com.operations.Matrix.Matrix[] matrixArray23 = com.operations.Matrix.MatrixDecompositions.luDecomposition(matrix19);
        com.operations.Matrix.Matrix matrix24 = com.operations.Matrix.MatrixOperations.multiply(matrix11, matrix19);
        com.operations.Matrix.Matrix matrix26 = com.operations.Matrix.MatrixTransformations.rotate2D((double) (short) 100);
        boolean boolean28 = com.operations.Matrix.MatrixUtils.compare(matrix19, matrix26, (double) (byte) 0);
        double[] doubleArray31 = new double[] { 10, 'a' };
        double[] doubleArray34 = new double[] { 10, 'a' };
        double[][] doubleArray35 = new double[][] { doubleArray31, doubleArray34 };
        com.operations.Matrix.Matrix matrix36 = new com.operations.Matrix.Matrix(doubleArray35);
        com.operations.Matrix.Matrix matrix37 = new com.operations.Matrix.Matrix(doubleArray35);
        com.operations.Matrix.Matrix matrix38 = new com.operations.Matrix.Matrix(doubleArray35);
        boolean boolean40 = com.operations.Matrix.MatrixUtils.compare(matrix19, matrix38, (double) (-1));
        int int41 = matrix19.getRows();
        com.operations.Matrix.Matrix matrix42 = com.operations.Matrix.MatrixOperations.add(matrix1, matrix19);
        int int43 = matrix1.getRows();
        double[] doubleArray46 = new double[] { 10, 'a' };
        double[] doubleArray49 = new double[] { 10, 'a' };
        double[][] doubleArray50 = new double[][] { doubleArray46, doubleArray49 };
        com.operations.Matrix.Matrix matrix51 = new com.operations.Matrix.Matrix(doubleArray50);
        com.operations.Matrix.Matrix matrix52 = new com.operations.Matrix.Matrix(doubleArray50);
        boolean boolean53 = com.operations.Matrix.MatrixUtils.isSquare(matrix52);
        double[] doubleArray56 = new double[] { 10, 'a' };
        double[] doubleArray59 = new double[] { 10, 'a' };
        double[][] doubleArray60 = new double[][] { doubleArray56, doubleArray59 };
        com.operations.Matrix.Matrix matrix61 = new com.operations.Matrix.Matrix(doubleArray60);
        int int62 = matrix61.getCols();
        int int63 = matrix61.getCols();
        matrix61.print();
        double[] doubleArray67 = new double[] { 10, 'a' };
        double[] doubleArray70 = new double[] { 10, 'a' };
        double[][] doubleArray71 = new double[][] { doubleArray67, doubleArray70 };
        com.operations.Matrix.Matrix matrix72 = new com.operations.Matrix.Matrix(doubleArray71);
        boolean boolean74 = com.operations.Matrix.MatrixUtils.compare(matrix61, matrix72, (double) (-1));
        com.operations.Matrix.Matrix matrix75 = com.operations.Matrix.MatrixOperations.subtract(matrix52, matrix72);
        com.operations.Matrix.Matrix matrix77 = com.operations.Matrix.MatrixOperations.scalarMultiply(matrix52, (double) 0.0f);
        com.operations.Matrix.Matrix matrix78 = com.operations.Matrix.MatrixOperations.transpose(matrix52);
        double[][] doubleArray79 = matrix52.getData();
        matrix52.print();
        matrix52.print();
        com.operations.Matrix.Matrix matrix82 = com.operations.Matrix.MatrixOperations.transpose(matrix52);
        com.operations.Matrix.Matrix matrix83 = com.operations.Matrix.MatrixOperations.add(matrix1, matrix82);
        double double84 = com.operations.Matrix.MatrixUtils.frobeniusNorm(matrix83);
        org.junit.Assert.assertNotNull(matrix1);
        org.junit.Assert.assertNotNull(matrix3);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertArrayEquals(doubleArray6, new double[] { 137.90576492663388d, (-1.0d) }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertArrayEquals(doubleArray7, new double[] { (-24.931892522286255d), (-135.63701830716116d) }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertArrayEquals(doubleArray8, new double[] { (-0.9999999999999858d), (-137.90576492663388d) }, 1.0E-15);
        org.junit.Assert.assertNotNull(matrix11);
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertArrayEquals(doubleArray14, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertArrayEquals(doubleArray17, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 2 + "'", int20 == 2);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 2 + "'", int21 == 2);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 2 + "'", int22 == 2);
        org.junit.Assert.assertNotNull(matrixArray23);
        org.junit.Assert.assertNotNull(matrix24);
        org.junit.Assert.assertNotNull(matrix26);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertArrayEquals(doubleArray31, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertArrayEquals(doubleArray34, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 2 + "'", int41 == 2);
        org.junit.Assert.assertNotNull(matrix42);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 2 + "'", int43 == 2);
        org.junit.Assert.assertNotNull(doubleArray46);
        org.junit.Assert.assertArrayEquals(doubleArray46, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertArrayEquals(doubleArray49, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true);
        org.junit.Assert.assertNotNull(doubleArray56);
        org.junit.Assert.assertArrayEquals(doubleArray56, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray59);
        org.junit.Assert.assertArrayEquals(doubleArray59, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray60);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 2 + "'", int62 == 2);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 2 + "'", int63 == 2);
        org.junit.Assert.assertNotNull(doubleArray67);
        org.junit.Assert.assertArrayEquals(doubleArray67, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray70);
        org.junit.Assert.assertArrayEquals(doubleArray70, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray71);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertNotNull(matrix75);
        org.junit.Assert.assertNotNull(matrix77);
        org.junit.Assert.assertNotNull(matrix78);
        org.junit.Assert.assertNotNull(doubleArray79);
        org.junit.Assert.assertNotNull(matrix82);
        org.junit.Assert.assertNotNull(matrix83);
        org.junit.Assert.assertTrue("'" + double84 + "' != '" + 138.5659917737053d + "'", double84 == 138.5659917737053d);
    }

    @Test
    public void test1756() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1756");
        com.operations.Matrix.Matrix matrix2 = com.operations.Matrix.MatrixTransformations.project2D((double) '4', (double) 'a');
        com.operations.Matrix.Matrix matrix5 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0L, (double) (byte) 10);
        double[] doubleArray8 = new double[] { 10, 'a' };
        double[] doubleArray11 = new double[] { 10, 'a' };
        double[][] doubleArray12 = new double[][] { doubleArray8, doubleArray11 };
        com.operations.Matrix.Matrix matrix13 = new com.operations.Matrix.Matrix(doubleArray12);
        int int14 = matrix13.getCols();
        int int15 = matrix13.getCols();
        int int16 = matrix13.getCols();
        com.operations.Matrix.Matrix[] matrixArray17 = com.operations.Matrix.MatrixDecompositions.luDecomposition(matrix13);
        com.operations.Matrix.Matrix matrix18 = com.operations.Matrix.MatrixOperations.multiply(matrix5, matrix13);
        com.operations.Matrix.Matrix matrix20 = com.operations.Matrix.MatrixTransformations.rotate2D((double) (short) 100);
        boolean boolean22 = com.operations.Matrix.MatrixUtils.compare(matrix13, matrix20, (double) (byte) 0);
        double[] doubleArray25 = new double[] { 10, 'a' };
        double[] doubleArray28 = new double[] { 10, 'a' };
        double[][] doubleArray29 = new double[][] { doubleArray25, doubleArray28 };
        com.operations.Matrix.Matrix matrix30 = new com.operations.Matrix.Matrix(doubleArray29);
        com.operations.Matrix.Matrix matrix31 = new com.operations.Matrix.Matrix(doubleArray29);
        com.operations.Matrix.Matrix matrix32 = new com.operations.Matrix.Matrix(doubleArray29);
        boolean boolean34 = com.operations.Matrix.MatrixUtils.compare(matrix13, matrix32, (double) (-1));
        double[] doubleArray37 = new double[] { 10, 'a' };
        double[] doubleArray40 = new double[] { 10, 'a' };
        double[][] doubleArray41 = new double[][] { doubleArray37, doubleArray40 };
        com.operations.Matrix.Matrix matrix42 = new com.operations.Matrix.Matrix(doubleArray41);
        com.operations.Matrix.Matrix matrix43 = new com.operations.Matrix.Matrix(doubleArray41);
        boolean boolean44 = com.operations.Matrix.MatrixUtils.isSquare(matrix43);
        com.operations.Matrix.Matrix matrix45 = com.operations.Matrix.MatrixOperations.multiply(matrix32, matrix43);
        double[][] doubleArray46 = matrix43.getData();
        com.operations.Matrix.Matrix matrix47 = new com.operations.Matrix.Matrix(doubleArray46);
        com.operations.Matrix.Matrix matrix48 = new com.operations.Matrix.Matrix(doubleArray46);
        boolean boolean50 = com.operations.Matrix.MatrixUtils.compare(matrix2, matrix48, 22.360679774997898d);
        // The following exception was thrown during execution in test generation
        try {
            double double53 = matrix2.getValue((int) ' ', (int) '#');
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(matrix2);
        org.junit.Assert.assertNotNull(matrix5);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertArrayEquals(doubleArray8, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertArrayEquals(doubleArray11, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 2 + "'", int14 == 2);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 2 + "'", int15 == 2);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 2 + "'", int16 == 2);
        org.junit.Assert.assertNotNull(matrixArray17);
        org.junit.Assert.assertNotNull(matrix18);
        org.junit.Assert.assertNotNull(matrix20);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertArrayEquals(doubleArray25, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertArrayEquals(doubleArray28, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertArrayEquals(doubleArray37, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertArrayEquals(doubleArray40, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertNotNull(matrix45);
        org.junit.Assert.assertNotNull(doubleArray46);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
    }

    @Test
    public void test1757() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1757");
        // The following exception was thrown during execution in test generation
        try {
            com.operations.Matrix.Matrix matrix5 = com.operations.Matrix.MatrixUtils.generateRandomMatrix((int) (short) -1, (int) (short) 0, (int) (byte) 0, (int) (short) 1, 1L);
            org.junit.Assert.fail("Expected exception of type java.lang.NegativeArraySizeException; message: -1");
        } catch (java.lang.NegativeArraySizeException e) {
            // Expected exception.
        }
    }

    @Test
    public void test1758() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1758");
        com.operations.Matrix.Matrix matrix4 = com.operations.Matrix.MatrixUtils.generateRandomMatrix((int) (byte) 1, (int) ' ', (int) (short) 100, (int) (short) 100);
        matrix4.print();
        double[] doubleArray8 = new double[] { 10, 'a' };
        double[] doubleArray11 = new double[] { 10, 'a' };
        double[][] doubleArray12 = new double[][] { doubleArray8, doubleArray11 };
        com.operations.Matrix.Matrix matrix13 = new com.operations.Matrix.Matrix(doubleArray12);
        int int14 = matrix13.getCols();
        int int15 = matrix13.getCols();
        int int16 = matrix13.getCols();
        com.operations.Matrix.Matrix matrix22 = com.operations.Matrix.MatrixUtils.generateRandomMatrix(100, (int) (byte) 1, (int) '#', (int) '#', 1L);
        double double25 = matrix22.getValue((int) '4', 0);
        double double26 = com.operations.Matrix.MatrixUtils.frobeniusNorm(matrix22);
        boolean boolean27 = com.operations.Matrix.MatrixUtils.isSquare(matrix22);
        boolean boolean29 = com.operations.Matrix.MatrixUtils.compare(matrix13, matrix22, (double) 100L);
        com.operations.Matrix.Matrix matrix31 = com.operations.Matrix.MatrixTransformations.rotate2D((double) (short) 100);
        double[] doubleArray34 = new double[] { 137.90576492663388d, (byte) -1 };
        double[] doubleArray35 = com.operations.Matrix.MatrixSolver.solveGaussian(matrix31, doubleArray34);
        com.operations.Matrix.Matrix matrix38 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0L, (double) (byte) 10);
        double[] doubleArray41 = new double[] { 10, 'a' };
        double[] doubleArray44 = new double[] { 10, 'a' };
        double[][] doubleArray45 = new double[][] { doubleArray41, doubleArray44 };
        com.operations.Matrix.Matrix matrix46 = new com.operations.Matrix.Matrix(doubleArray45);
        int int47 = matrix46.getCols();
        int int48 = matrix46.getCols();
        int int49 = matrix46.getCols();
        com.operations.Matrix.Matrix[] matrixArray50 = com.operations.Matrix.MatrixDecompositions.luDecomposition(matrix46);
        com.operations.Matrix.Matrix matrix51 = com.operations.Matrix.MatrixOperations.multiply(matrix38, matrix46);
        boolean boolean53 = com.operations.Matrix.MatrixUtils.compare(matrix31, matrix38, (double) (-1L));
        com.operations.Matrix.Matrix matrix54 = com.operations.Matrix.MatrixOperations.subtract(matrix13, matrix38);
        com.operations.Matrix.Matrix matrix55 = com.operations.Matrix.MatrixOperations.transpose(matrix13);
        matrix55.print();
        com.operations.Matrix.Matrix matrix58 = com.operations.Matrix.MatrixOperations.scalarMultiply(matrix55, (double) 1L);
        // The following exception was thrown during execution in test generation
        try {
            com.operations.Matrix.Matrix matrix59 = com.operations.Matrix.MatrixOperations.add(matrix4, matrix55);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Matrices must have the same dimensions for addition.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(matrix4);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertArrayEquals(doubleArray8, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertArrayEquals(doubleArray11, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 2 + "'", int14 == 2);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 2 + "'", int15 == 2);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 2 + "'", int16 == 2);
        org.junit.Assert.assertNotNull(matrix22);
        org.junit.Assert.assertTrue("'" + double25 + "' != '" + 35.0d + "'", double25 == 35.0d);
        org.junit.Assert.assertTrue("'" + double26 + "' != '" + 350.0d + "'", double26 == 350.0d);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(matrix31);
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertArrayEquals(doubleArray34, new double[] { 137.90576492663388d, (-1.0d) }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertArrayEquals(doubleArray35, new double[] { (-24.931892522286255d), (-135.63701830716116d) }, 1.0E-15);
        org.junit.Assert.assertNotNull(matrix38);
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertArrayEquals(doubleArray41, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertArrayEquals(doubleArray44, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 2 + "'", int47 == 2);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 2 + "'", int48 == 2);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 2 + "'", int49 == 2);
        org.junit.Assert.assertNotNull(matrixArray50);
        org.junit.Assert.assertNotNull(matrix51);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(matrix54);
        org.junit.Assert.assertNotNull(matrix55);
        org.junit.Assert.assertNotNull(matrix58);
    }

    @Test
    public void test1759() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1759");
        double[] doubleArray2 = new double[] { 10, 'a' };
        double[] doubleArray5 = new double[] { 10, 'a' };
        double[][] doubleArray6 = new double[][] { doubleArray2, doubleArray5 };
        com.operations.Matrix.Matrix matrix7 = new com.operations.Matrix.Matrix(doubleArray6);
        int int8 = matrix7.getCols();
        boolean boolean9 = com.operations.Matrix.MatrixUtils.isSquare(matrix7);
        com.operations.Matrix.Matrix matrix10 = com.operations.Matrix.MatrixOperations.transpose(matrix7);
        int int11 = matrix10.getRows();
        com.operations.Matrix.Matrix matrix14 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0L, (double) (byte) 10);
        double[] doubleArray17 = new double[] { 10, 'a' };
        double[] doubleArray20 = new double[] { 10, 'a' };
        double[][] doubleArray21 = new double[][] { doubleArray17, doubleArray20 };
        com.operations.Matrix.Matrix matrix22 = new com.operations.Matrix.Matrix(doubleArray21);
        int int23 = matrix22.getCols();
        int int24 = matrix22.getCols();
        int int25 = matrix22.getCols();
        com.operations.Matrix.Matrix[] matrixArray26 = com.operations.Matrix.MatrixDecompositions.luDecomposition(matrix22);
        com.operations.Matrix.Matrix matrix27 = com.operations.Matrix.MatrixOperations.multiply(matrix14, matrix22);
        com.operations.Matrix.Matrix matrix29 = com.operations.Matrix.MatrixTransformations.rotate2D((double) (short) 100);
        boolean boolean31 = com.operations.Matrix.MatrixUtils.compare(matrix22, matrix29, (double) (byte) 0);
        com.operations.Matrix.Matrix matrix32 = com.operations.Matrix.MatrixOperations.multiply(matrix10, matrix22);
        int int33 = matrix10.getCols();
        double[][] doubleArray34 = matrix10.getData();
        matrix10.setValue(0, 1, 1.414213562373095d);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertArrayEquals(doubleArray2, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertArrayEquals(doubleArray5, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 2 + "'", int8 == 2);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertNotNull(matrix10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 2 + "'", int11 == 2);
        org.junit.Assert.assertNotNull(matrix14);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertArrayEquals(doubleArray17, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertArrayEquals(doubleArray20, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 2 + "'", int23 == 2);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 2 + "'", int24 == 2);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 2 + "'", int25 == 2);
        org.junit.Assert.assertNotNull(matrixArray26);
        org.junit.Assert.assertNotNull(matrix27);
        org.junit.Assert.assertNotNull(matrix29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(matrix32);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 2 + "'", int33 == 2);
        org.junit.Assert.assertNotNull(doubleArray34);
    }

    @Test
    public void test1760() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1760");
        com.operations.Matrix.Matrix matrix1 = com.operations.Matrix.MatrixTransformations.rotate2D(146.4308710620817d);
        double[] doubleArray4 = new double[] { 10, 'a' };
        double[] doubleArray7 = new double[] { 10, 'a' };
        double[][] doubleArray8 = new double[][] { doubleArray4, doubleArray7 };
        com.operations.Matrix.Matrix matrix9 = new com.operations.Matrix.Matrix(doubleArray8);
        com.operations.Matrix.Matrix matrix10 = new com.operations.Matrix.Matrix(doubleArray8);
        boolean boolean11 = com.operations.Matrix.MatrixUtils.isSquare(matrix10);
        double[] doubleArray14 = new double[] { 10, 'a' };
        double[] doubleArray17 = new double[] { 10, 'a' };
        double[][] doubleArray18 = new double[][] { doubleArray14, doubleArray17 };
        com.operations.Matrix.Matrix matrix19 = new com.operations.Matrix.Matrix(doubleArray18);
        int int20 = matrix19.getCols();
        int int21 = matrix19.getCols();
        matrix19.print();
        double[] doubleArray25 = new double[] { 10, 'a' };
        double[] doubleArray28 = new double[] { 10, 'a' };
        double[][] doubleArray29 = new double[][] { doubleArray25, doubleArray28 };
        com.operations.Matrix.Matrix matrix30 = new com.operations.Matrix.Matrix(doubleArray29);
        boolean boolean32 = com.operations.Matrix.MatrixUtils.compare(matrix19, matrix30, (double) (-1));
        com.operations.Matrix.Matrix matrix33 = com.operations.Matrix.MatrixOperations.subtract(matrix10, matrix30);
        com.operations.Matrix.Matrix matrix34 = com.operations.Matrix.MatrixDecompositions.choleskyDecomposition(matrix10);
        double[] doubleArray37 = new double[] { 10, 'a' };
        double[] doubleArray40 = new double[] { 10, 'a' };
        double[][] doubleArray41 = new double[][] { doubleArray37, doubleArray40 };
        com.operations.Matrix.Matrix matrix42 = new com.operations.Matrix.Matrix(doubleArray41);
        com.operations.Matrix.Matrix matrix43 = com.operations.Matrix.MatrixOperations.transpose(matrix42);
        com.operations.Matrix.Matrix matrix46 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0L, (double) (byte) 10);
        int int47 = matrix46.getRows();
        com.operations.Matrix.Matrix matrix53 = com.operations.Matrix.MatrixUtils.generateRandomMatrix(100, (int) (byte) 1, (int) '#', (int) '#', 1L);
        boolean boolean55 = com.operations.Matrix.MatrixUtils.compare(matrix46, matrix53, (double) 1.0f);
        com.operations.Matrix.Matrix matrix57 = com.operations.Matrix.MatrixOperations.scalarMultiply(matrix46, (double) 1L);
        matrix46.print();
        com.operations.Matrix.Matrix matrix59 = com.operations.Matrix.MatrixOperations.multiply(matrix43, matrix46);
        boolean boolean61 = com.operations.Matrix.MatrixUtils.compare(matrix10, matrix43, 137.15495886388925d);
        boolean boolean62 = com.operations.Matrix.MatrixUtils.isSquare(matrix43);
        com.operations.Matrix.Matrix matrix63 = com.operations.Matrix.MatrixOperations.multiply(matrix1, matrix43);
        com.operations.Matrix.Matrix[] matrixArray64 = com.operations.Matrix.MatrixDecompositions.luDecomposition(matrix63);
        org.junit.Assert.assertNotNull(matrix1);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertArrayEquals(doubleArray4, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertArrayEquals(doubleArray7, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertArrayEquals(doubleArray14, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertArrayEquals(doubleArray17, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 2 + "'", int20 == 2);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 2 + "'", int21 == 2);
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertArrayEquals(doubleArray25, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertArrayEquals(doubleArray28, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(matrix33);
        org.junit.Assert.assertNotNull(matrix34);
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertArrayEquals(doubleArray37, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertArrayEquals(doubleArray40, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertNotNull(matrix43);
        org.junit.Assert.assertNotNull(matrix46);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 2 + "'", int47 == 2);
        org.junit.Assert.assertNotNull(matrix53);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNotNull(matrix57);
        org.junit.Assert.assertNotNull(matrix59);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + true + "'", boolean61 == true);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + true + "'", boolean62 == true);
        org.junit.Assert.assertNotNull(matrix63);
        org.junit.Assert.assertNotNull(matrixArray64);
    }

    @Test
    public void test1761() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1761");
        // The following exception was thrown during execution in test generation
        try {
            com.operations.Matrix.Matrix matrix5 = com.operations.Matrix.MatrixUtils.generateRandomMatrix(0, (int) ' ', (int) (short) 0, 32, (long) 10);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
    }

    @Test
    public void test1762() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1762");
        com.operations.Matrix.Matrix matrix2 = com.operations.Matrix.MatrixTransformations.project2D((double) 0.0f, 975.1410154434076d);
        // The following exception was thrown during execution in test generation
        try {
            com.operations.Matrix.Matrix matrix3 = com.operations.Matrix.MatrixDecompositions.choleskyDecomposition(matrix2);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Matrix is not positive definite.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(matrix2);
    }

    @Test
    public void test1763() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1763");
        double[] doubleArray2 = new double[] { 10, 'a' };
        double[] doubleArray5 = new double[] { 10, 'a' };
        double[][] doubleArray6 = new double[][] { doubleArray2, doubleArray5 };
        com.operations.Matrix.Matrix matrix7 = new com.operations.Matrix.Matrix(doubleArray6);
        int int8 = matrix7.getCols();
        int int9 = matrix7.getCols();
        boolean boolean10 = com.operations.Matrix.MatrixUtils.isSquare(matrix7);
        com.operations.Matrix.Matrix matrix11 = com.operations.Matrix.MatrixDecompositions.choleskyDecomposition(matrix7);
        com.operations.Matrix.Matrix matrix14 = com.operations.Matrix.MatrixTransformations.project2D(0.0d, (double) 0);
        com.operations.Matrix.Matrix matrix15 = com.operations.Matrix.MatrixOperations.subtract(matrix11, matrix14);
        double[] doubleArray18 = new double[] { 10, 'a' };
        double[] doubleArray21 = new double[] { 10, 'a' };
        double[][] doubleArray22 = new double[][] { doubleArray18, doubleArray21 };
        com.operations.Matrix.Matrix matrix23 = new com.operations.Matrix.Matrix(doubleArray22);
        com.operations.Matrix.Matrix matrix24 = new com.operations.Matrix.Matrix(doubleArray22);
        com.operations.Matrix.Matrix matrix26 = com.operations.Matrix.MatrixTransformations.rotate2D((double) (short) 100);
        double[] doubleArray29 = new double[] { 137.90576492663388d, (byte) -1 };
        double[] doubleArray30 = com.operations.Matrix.MatrixSolver.solveGaussian(matrix26, doubleArray29);
        com.operations.Matrix.Matrix matrix31 = com.operations.Matrix.MatrixOperations.add(matrix24, matrix26);
        com.operations.Matrix.Matrix matrix32 = com.operations.Matrix.MatrixOperations.transpose(matrix26);
        int int33 = matrix26.getCols();
        int int34 = matrix26.getRows();
        com.operations.Matrix.Matrix matrix35 = com.operations.Matrix.MatrixOperations.subtract(matrix15, matrix26);
        // The following exception was thrown during execution in test generation
        try {
            double double38 = matrix15.getValue(35, (int) (short) 10);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertArrayEquals(doubleArray2, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertArrayEquals(doubleArray5, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 2 + "'", int8 == 2);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 2 + "'", int9 == 2);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(matrix11);
        org.junit.Assert.assertNotNull(matrix14);
        org.junit.Assert.assertNotNull(matrix15);
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertArrayEquals(doubleArray18, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertArrayEquals(doubleArray21, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertNotNull(matrix26);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertArrayEquals(doubleArray29, new double[] { 137.90576492663388d, (-1.0d) }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertArrayEquals(doubleArray30, new double[] { (-24.931892522286255d), (-135.63701830716116d) }, 1.0E-15);
        org.junit.Assert.assertNotNull(matrix31);
        org.junit.Assert.assertNotNull(matrix32);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 2 + "'", int33 == 2);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 2 + "'", int34 == 2);
        org.junit.Assert.assertNotNull(matrix35);
    }

    @Test
    public void test1764() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1764");
        com.operations.Matrix.Matrix matrix5 = com.operations.Matrix.MatrixUtils.generateRandomMatrix((int) (short) 10, 0, (int) (byte) 10, (int) ' ', 0L);
        org.junit.Assert.assertNotNull(matrix5);
    }

    @Test
    public void test1765() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1765");
        com.operations.Matrix.Matrix matrix1 = com.operations.Matrix.MatrixTransformations.rotate2D((double) (short) -1);
        com.operations.Matrix.Matrix[] matrixArray2 = com.operations.Matrix.MatrixDecompositions.luDecomposition(matrix1);
        double[][] doubleArray3 = matrix1.getData();
        com.operations.Matrix.Matrix matrix4 = new com.operations.Matrix.Matrix(doubleArray3);
        matrix4.print();
        org.junit.Assert.assertNotNull(matrix1);
        org.junit.Assert.assertNotNull(matrixArray2);
        org.junit.Assert.assertNotNull(doubleArray3);
    }

    @Test
    public void test1766() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1766");
        com.operations.Matrix.Matrix matrix2 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0L, (double) (byte) 10);
        int int3 = matrix2.getRows();
        com.operations.Matrix.Matrix matrix6 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0L, (double) (byte) 10);
        int int7 = matrix6.getRows();
        com.operations.Matrix.Matrix matrix9 = com.operations.Matrix.MatrixOperations.scalarMultiply(matrix6, (double) 2);
        com.operations.Matrix.Matrix matrix10 = com.operations.Matrix.MatrixOperations.subtract(matrix2, matrix6);
        com.operations.Matrix.Matrix matrix13 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0L, (double) (byte) 10);
        int int14 = matrix13.getRows();
        com.operations.Matrix.Matrix matrix20 = com.operations.Matrix.MatrixUtils.generateRandomMatrix(100, (int) (byte) 1, (int) '#', (int) '#', 1L);
        boolean boolean22 = com.operations.Matrix.MatrixUtils.compare(matrix13, matrix20, (double) 1.0f);
        com.operations.Matrix.Matrix matrix24 = com.operations.Matrix.MatrixOperations.scalarMultiply(matrix13, (double) 1L);
        boolean boolean26 = com.operations.Matrix.MatrixUtils.compare(matrix10, matrix24, 0.0d);
        com.operations.Matrix.Matrix matrix29 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0L, (double) (byte) 10);
        int int30 = matrix29.getRows();
        com.operations.Matrix.Matrix matrix33 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0L, (double) (byte) 10);
        int int34 = matrix33.getRows();
        com.operations.Matrix.Matrix matrix36 = com.operations.Matrix.MatrixOperations.scalarMultiply(matrix33, (double) 2);
        com.operations.Matrix.Matrix matrix37 = com.operations.Matrix.MatrixOperations.subtract(matrix29, matrix33);
        com.operations.Matrix.Matrix matrix40 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0L, (double) (byte) 10);
        int int41 = matrix40.getRows();
        com.operations.Matrix.Matrix matrix47 = com.operations.Matrix.MatrixUtils.generateRandomMatrix(100, (int) (byte) 1, (int) '#', (int) '#', 1L);
        boolean boolean49 = com.operations.Matrix.MatrixUtils.compare(matrix40, matrix47, (double) 1.0f);
        com.operations.Matrix.Matrix matrix51 = com.operations.Matrix.MatrixOperations.scalarMultiply(matrix40, (double) 1L);
        boolean boolean53 = com.operations.Matrix.MatrixUtils.compare(matrix37, matrix51, 0.0d);
        com.operations.Matrix.Matrix matrix54 = com.operations.Matrix.MatrixOperations.transpose(matrix37);
        boolean boolean56 = com.operations.Matrix.MatrixUtils.compare(matrix24, matrix37, 260.95643973734866d);
        boolean boolean57 = com.operations.Matrix.MatrixUtils.isSymmetric(matrix24);
        org.junit.Assert.assertNotNull(matrix2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 2 + "'", int3 == 2);
        org.junit.Assert.assertNotNull(matrix6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 2 + "'", int7 == 2);
        org.junit.Assert.assertNotNull(matrix9);
        org.junit.Assert.assertNotNull(matrix10);
        org.junit.Assert.assertNotNull(matrix13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 2 + "'", int14 == 2);
        org.junit.Assert.assertNotNull(matrix20);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(matrix24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(matrix29);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 2 + "'", int30 == 2);
        org.junit.Assert.assertNotNull(matrix33);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 2 + "'", int34 == 2);
        org.junit.Assert.assertNotNull(matrix36);
        org.junit.Assert.assertNotNull(matrix37);
        org.junit.Assert.assertNotNull(matrix40);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 2 + "'", int41 == 2);
        org.junit.Assert.assertNotNull(matrix47);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(matrix51);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(matrix54);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + true + "'", boolean56 == true);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + true + "'", boolean57 == true);
    }

    @Test
    public void test1767() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1767");
        com.operations.Matrix.Matrix matrix1 = com.operations.Matrix.MatrixTransformations.rotate2D((double) 0);
        boolean boolean2 = com.operations.Matrix.MatrixUtils.isSquare(matrix1);
        com.operations.Matrix.Matrix matrix4 = com.operations.Matrix.MatrixOperations.scalarMultiply(matrix1, 640031.99920004d);
        com.operations.Matrix.Matrix[] matrixArray5 = com.operations.Matrix.MatrixDecompositions.luDecomposition(matrix4);
        org.junit.Assert.assertNotNull(matrix1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertNotNull(matrix4);
        org.junit.Assert.assertNotNull(matrixArray5);
    }

    @Test
    public void test1768() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1768");
        com.operations.Matrix.Matrix matrix2 = new com.operations.Matrix.Matrix((int) '#', (int) (short) 10);
        // The following exception was thrown during execution in test generation
        try {
            com.operations.Matrix.Matrix[] matrixArray3 = com.operations.Matrix.MatrixDecompositions.luDecomposition(matrix2);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Matrix must be square for LU decomposition.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test1769() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1769");
        double[] doubleArray2 = new double[] { 10, 'a' };
        double[] doubleArray5 = new double[] { 10, 'a' };
        double[][] doubleArray6 = new double[][] { doubleArray2, doubleArray5 };
        com.operations.Matrix.Matrix matrix7 = new com.operations.Matrix.Matrix(doubleArray6);
        com.operations.Matrix.Matrix matrix8 = new com.operations.Matrix.Matrix(doubleArray6);
        com.operations.Matrix.Matrix matrix10 = com.operations.Matrix.MatrixTransformations.rotate2D((double) (short) 100);
        double[] doubleArray13 = new double[] { 137.90576492663388d, (byte) -1 };
        double[] doubleArray14 = com.operations.Matrix.MatrixSolver.solveGaussian(matrix10, doubleArray13);
        com.operations.Matrix.Matrix matrix15 = com.operations.Matrix.MatrixOperations.add(matrix8, matrix10);
        com.operations.Matrix.Matrix matrix16 = com.operations.Matrix.MatrixOperations.transpose(matrix10);
        int int17 = matrix10.getCols();
        int int18 = matrix10.getRows();
        double[] doubleArray21 = new double[] { 10, 'a' };
        double[] doubleArray24 = new double[] { 10, 'a' };
        double[][] doubleArray25 = new double[][] { doubleArray21, doubleArray24 };
        com.operations.Matrix.Matrix matrix26 = new com.operations.Matrix.Matrix(doubleArray25);
        int int27 = matrix26.getCols();
        int int28 = matrix26.getCols();
        matrix26.print();
        double[] doubleArray32 = new double[] { 10, 'a' };
        double[] doubleArray35 = new double[] { 10, 'a' };
        double[][] doubleArray36 = new double[][] { doubleArray32, doubleArray35 };
        com.operations.Matrix.Matrix matrix37 = new com.operations.Matrix.Matrix(doubleArray36);
        boolean boolean39 = com.operations.Matrix.MatrixUtils.compare(matrix26, matrix37, (double) (-1));
        com.operations.Matrix.Matrix matrix40 = com.operations.Matrix.MatrixOperations.multiply(matrix10, matrix26);
        double double41 = com.operations.Matrix.MatrixUtils.frobeniusNorm(matrix40);
        // The following exception was thrown during execution in test generation
        try {
            double double44 = matrix40.getValue(1, 10);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertArrayEquals(doubleArray2, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertArrayEquals(doubleArray5, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertNotNull(matrix10);
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertArrayEquals(doubleArray13, new double[] { 137.90576492663388d, (-1.0d) }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertArrayEquals(doubleArray14, new double[] { (-24.931892522286255d), (-135.63701830716116d) }, 1.0E-15);
        org.junit.Assert.assertNotNull(matrix15);
        org.junit.Assert.assertNotNull(matrix16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 2 + "'", int17 == 2);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 2 + "'", int18 == 2);
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertArrayEquals(doubleArray21, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertArrayEquals(doubleArray24, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 2 + "'", int27 == 2);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 2 + "'", int28 == 2);
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertArrayEquals(doubleArray32, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertArrayEquals(doubleArray35, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(matrix40);
        org.junit.Assert.assertTrue("'" + double41 + "' != '" + 137.90576492663385d + "'", double41 == 137.90576492663385d);
    }

    @Test
    public void test1770() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1770");
        com.operations.Matrix.Matrix matrix4 = com.operations.Matrix.MatrixUtils.generateRandomMatrix((int) '#', (int) (byte) 0, 10, (int) (short) -1);
        com.operations.Matrix.Matrix matrix6 = com.operations.Matrix.MatrixOperations.scalarMultiply(matrix4, (double) 100L);
        java.lang.Class<?> wildcardClass7 = matrix4.getClass();
        org.junit.Assert.assertNotNull(matrix4);
        org.junit.Assert.assertNotNull(matrix6);
        org.junit.Assert.assertNotNull(wildcardClass7);
    }

    @Test
    public void test1771() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1771");
        com.operations.Matrix.Matrix matrix5 = com.operations.Matrix.MatrixUtils.generateRandomMatrix((int) (byte) 10, (int) (byte) 10, (int) '#', (int) (byte) 10, (-1L));
        org.junit.Assert.assertNotNull(matrix5);
    }

    @Test
    public void test1772() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1772");
        com.operations.Matrix.Matrix matrix2 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0L, (double) (byte) 10);
        double[] doubleArray5 = new double[] { 10, 'a' };
        double[] doubleArray8 = new double[] { 10, 'a' };
        double[][] doubleArray9 = new double[][] { doubleArray5, doubleArray8 };
        com.operations.Matrix.Matrix matrix10 = new com.operations.Matrix.Matrix(doubleArray9);
        int int11 = matrix10.getCols();
        int int12 = matrix10.getCols();
        int int13 = matrix10.getCols();
        com.operations.Matrix.Matrix[] matrixArray14 = com.operations.Matrix.MatrixDecompositions.luDecomposition(matrix10);
        com.operations.Matrix.Matrix matrix15 = com.operations.Matrix.MatrixOperations.multiply(matrix2, matrix10);
        com.operations.Matrix.Matrix matrix17 = com.operations.Matrix.MatrixTransformations.rotate2D((double) (short) 100);
        boolean boolean19 = com.operations.Matrix.MatrixUtils.compare(matrix10, matrix17, (double) (byte) 0);
        double[] doubleArray22 = new double[] { 10, 'a' };
        double[] doubleArray25 = new double[] { 10, 'a' };
        double[][] doubleArray26 = new double[][] { doubleArray22, doubleArray25 };
        com.operations.Matrix.Matrix matrix27 = new com.operations.Matrix.Matrix(doubleArray26);
        com.operations.Matrix.Matrix matrix28 = new com.operations.Matrix.Matrix(doubleArray26);
        com.operations.Matrix.Matrix matrix29 = new com.operations.Matrix.Matrix(doubleArray26);
        boolean boolean31 = com.operations.Matrix.MatrixUtils.compare(matrix10, matrix29, (double) (-1));
        double[] doubleArray34 = new double[] { 10, 'a' };
        double[] doubleArray37 = new double[] { 10, 'a' };
        double[][] doubleArray38 = new double[][] { doubleArray34, doubleArray37 };
        com.operations.Matrix.Matrix matrix39 = new com.operations.Matrix.Matrix(doubleArray38);
        com.operations.Matrix.Matrix matrix40 = new com.operations.Matrix.Matrix(doubleArray38);
        boolean boolean41 = com.operations.Matrix.MatrixUtils.isSquare(matrix40);
        com.operations.Matrix.Matrix matrix42 = com.operations.Matrix.MatrixOperations.multiply(matrix29, matrix40);
        double[][] doubleArray43 = matrix40.getData();
        com.operations.Matrix.Matrix matrix44 = new com.operations.Matrix.Matrix(doubleArray43);
        com.operations.Matrix.Matrix matrix45 = com.operations.Matrix.MatrixOperations.transpose(matrix44);
        boolean boolean46 = com.operations.Matrix.MatrixUtils.isSymmetric(matrix44);
        com.operations.Matrix.Matrix matrix48 = com.operations.Matrix.MatrixOperations.scalarMultiply(matrix44, (double) 2);
        matrix48.print();
        boolean boolean50 = com.operations.Matrix.MatrixUtils.isSymmetric(matrix48);
        matrix48.print();
        int int52 = matrix48.getRows();
        // The following exception was thrown during execution in test generation
        try {
            matrix48.setValue((int) 'a', (int) '#', (double) (byte) 0);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: Index 97 out of bounds for length 2");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(matrix2);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertArrayEquals(doubleArray5, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertArrayEquals(doubleArray8, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 2 + "'", int11 == 2);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 2 + "'", int12 == 2);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 2 + "'", int13 == 2);
        org.junit.Assert.assertNotNull(matrixArray14);
        org.junit.Assert.assertNotNull(matrix15);
        org.junit.Assert.assertNotNull(matrix17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertArrayEquals(doubleArray22, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertArrayEquals(doubleArray25, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertArrayEquals(doubleArray34, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertArrayEquals(doubleArray37, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertNotNull(matrix42);
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertNotNull(matrix45);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(matrix48);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 2 + "'", int52 == 2);
    }

    @Test
    public void test1773() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1773");
        com.operations.Matrix.Matrix matrix2 = new com.operations.Matrix.Matrix((int) (byte) 0, (int) (short) 1);
        java.lang.Class<?> wildcardClass3 = matrix2.getClass();
        org.junit.Assert.assertNotNull(wildcardClass3);
    }

    @Test
    public void test1774() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1774");
        com.operations.Matrix.Matrix matrix1 = com.operations.Matrix.MatrixTransformations.rotate2D((double) (short) 100);
        double[] doubleArray4 = new double[] { 137.90576492663388d, (byte) -1 };
        double[] doubleArray5 = com.operations.Matrix.MatrixSolver.solveGaussian(matrix1, doubleArray4);
        com.operations.Matrix.Matrix matrix8 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0L, (double) (byte) 10);
        double[] doubleArray11 = new double[] { 10, 'a' };
        double[] doubleArray14 = new double[] { 10, 'a' };
        double[][] doubleArray15 = new double[][] { doubleArray11, doubleArray14 };
        com.operations.Matrix.Matrix matrix16 = new com.operations.Matrix.Matrix(doubleArray15);
        int int17 = matrix16.getCols();
        int int18 = matrix16.getCols();
        int int19 = matrix16.getCols();
        com.operations.Matrix.Matrix[] matrixArray20 = com.operations.Matrix.MatrixDecompositions.luDecomposition(matrix16);
        com.operations.Matrix.Matrix matrix21 = com.operations.Matrix.MatrixOperations.multiply(matrix8, matrix16);
        boolean boolean23 = com.operations.Matrix.MatrixUtils.compare(matrix1, matrix8, (double) (-1L));
        boolean boolean24 = com.operations.Matrix.MatrixUtils.isSymmetric(matrix1);
        int int25 = matrix1.getCols();
        com.operations.Matrix.Matrix[] matrixArray26 = com.operations.Matrix.MatrixDecompositions.luDecomposition(matrix1);
        double double27 = com.operations.Matrix.MatrixUtils.frobeniusNorm(matrix1);
        double double28 = com.operations.Matrix.MatrixUtils.frobeniusNorm(matrix1);
        double[][] doubleArray29 = matrix1.getData();
        com.operations.Matrix.Matrix matrix30 = new com.operations.Matrix.Matrix(doubleArray29);
        com.operations.Matrix.Matrix matrix31 = new com.operations.Matrix.Matrix(doubleArray29);
        com.operations.Matrix.Matrix matrix32 = new com.operations.Matrix.Matrix(doubleArray29);
        // The following exception was thrown during execution in test generation
        try {
            com.operations.Matrix.Matrix matrix33 = com.operations.Matrix.MatrixDecompositions.choleskyDecomposition(matrix32);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Matrix is not positive definite.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(matrix1);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertArrayEquals(doubleArray4, new double[] { 137.90576492663388d, (-1.0d) }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertArrayEquals(doubleArray5, new double[] { (-24.931892522286255d), (-135.63701830716116d) }, 1.0E-15);
        org.junit.Assert.assertNotNull(matrix8);
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertArrayEquals(doubleArray11, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertArrayEquals(doubleArray14, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 2 + "'", int17 == 2);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 2 + "'", int18 == 2);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 2 + "'", int19 == 2);
        org.junit.Assert.assertNotNull(matrixArray20);
        org.junit.Assert.assertNotNull(matrix21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 2 + "'", int25 == 2);
        org.junit.Assert.assertNotNull(matrixArray26);
        org.junit.Assert.assertTrue("'" + double27 + "' != '" + 1.414213562373095d + "'", double27 == 1.414213562373095d);
        org.junit.Assert.assertTrue("'" + double28 + "' != '" + 1.414213562373095d + "'", double28 == 1.414213562373095d);
        org.junit.Assert.assertNotNull(doubleArray29);
    }

    @Test
    public void test1775() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1775");
        com.operations.Matrix.Matrix matrix2 = com.operations.Matrix.MatrixTransformations.project2D((double) 0L, (double) 0);
        com.operations.Matrix.Matrix[] matrixArray3 = com.operations.Matrix.MatrixDecompositions.luDecomposition(matrix2);
        com.operations.Matrix.Matrix matrix4 = com.operations.Matrix.MatrixOperations.transpose(matrix2);
        // The following exception was thrown during execution in test generation
        try {
            matrix2.setValue(2, 100, 365.8209944768069d);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: Index 2 out of bounds for length 2");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(matrix2);
        org.junit.Assert.assertNotNull(matrixArray3);
        org.junit.Assert.assertNotNull(matrix4);
    }

    @Test
    public void test1776() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1776");
        com.operations.Matrix.Matrix matrix2 = com.operations.Matrix.MatrixTransformations.scale2D((-1.0d), (double) 100.0f);
        org.junit.Assert.assertNotNull(matrix2);
    }

    @Test
    public void test1777() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1777");
        // The following exception was thrown during execution in test generation
        try {
            com.operations.Matrix.Matrix matrix5 = com.operations.Matrix.MatrixUtils.generateRandomMatrix((int) (short) 0, (int) (short) 0, 1, (int) (byte) 10, (long) 52);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
    }

    @Test
    public void test1778() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1778");
        com.operations.Matrix.Matrix matrix2 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0L, (double) (byte) 10);
        int int3 = matrix2.getRows();
        com.operations.Matrix.Matrix matrix6 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0L, (double) (byte) 10);
        int int7 = matrix6.getRows();
        com.operations.Matrix.Matrix matrix9 = com.operations.Matrix.MatrixOperations.scalarMultiply(matrix6, (double) 2);
        com.operations.Matrix.Matrix matrix10 = com.operations.Matrix.MatrixOperations.subtract(matrix2, matrix6);
        com.operations.Matrix.Matrix matrix13 = com.operations.Matrix.MatrixTransformations.scale2D(146.4308710620817d, (double) 10L);
        boolean boolean15 = com.operations.Matrix.MatrixUtils.compare(matrix6, matrix13, (double) (byte) 1);
        com.operations.Matrix.Matrix[] matrixArray16 = com.operations.Matrix.MatrixDecompositions.luDecomposition(matrix13);
        com.operations.Matrix.Matrix matrix18 = com.operations.Matrix.MatrixTransformations.rotate2D((double) '4');
        boolean boolean19 = com.operations.Matrix.MatrixUtils.isSymmetric(matrix18);
        com.operations.Matrix.Matrix matrix20 = com.operations.Matrix.MatrixOperations.add(matrix13, matrix18);
        com.operations.Matrix.Matrix matrix21 = com.operations.Matrix.MatrixOperations.transpose(matrix18);
        com.operations.Matrix.Matrix matrix23 = com.operations.Matrix.MatrixTransformations.rotate2D((double) (short) 100);
        double[] doubleArray26 = new double[] { 137.90576492663388d, (byte) -1 };
        double[] doubleArray27 = com.operations.Matrix.MatrixSolver.solveGaussian(matrix23, doubleArray26);
        com.operations.Matrix.Matrix matrix30 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0L, (double) (byte) 10);
        double[] doubleArray33 = new double[] { 10, 'a' };
        double[] doubleArray36 = new double[] { 10, 'a' };
        double[][] doubleArray37 = new double[][] { doubleArray33, doubleArray36 };
        com.operations.Matrix.Matrix matrix38 = new com.operations.Matrix.Matrix(doubleArray37);
        int int39 = matrix38.getCols();
        int int40 = matrix38.getCols();
        int int41 = matrix38.getCols();
        com.operations.Matrix.Matrix[] matrixArray42 = com.operations.Matrix.MatrixDecompositions.luDecomposition(matrix38);
        com.operations.Matrix.Matrix matrix43 = com.operations.Matrix.MatrixOperations.multiply(matrix30, matrix38);
        boolean boolean45 = com.operations.Matrix.MatrixUtils.compare(matrix23, matrix30, (double) (-1L));
        double[][] doubleArray46 = matrix23.getData();
        com.operations.Matrix.Matrix matrix48 = com.operations.Matrix.MatrixTransformations.rotate2D((double) (short) 100);
        double[] doubleArray51 = new double[] { 137.90576492663388d, (byte) -1 };
        double[] doubleArray52 = com.operations.Matrix.MatrixSolver.solveGaussian(matrix48, doubleArray51);
        double[] doubleArray53 = com.operations.Matrix.MatrixSolver.solveGaussian(matrix23, doubleArray51);
        double[] doubleArray54 = com.operations.Matrix.MatrixSolver.solveGaussian(matrix18, doubleArray51);
        java.lang.Class<?> wildcardClass55 = matrix18.getClass();
        org.junit.Assert.assertNotNull(matrix2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 2 + "'", int3 == 2);
        org.junit.Assert.assertNotNull(matrix6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 2 + "'", int7 == 2);
        org.junit.Assert.assertNotNull(matrix9);
        org.junit.Assert.assertNotNull(matrix10);
        org.junit.Assert.assertNotNull(matrix13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(matrixArray16);
        org.junit.Assert.assertNotNull(matrix18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(matrix20);
        org.junit.Assert.assertNotNull(matrix21);
        org.junit.Assert.assertNotNull(matrix23);
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertArrayEquals(doubleArray26, new double[] { 137.90576492663388d, (-1.0d) }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertArrayEquals(doubleArray27, new double[] { (-24.931892522286255d), (-135.63701830716116d) }, 1.0E-15);
        org.junit.Assert.assertNotNull(matrix30);
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertArrayEquals(doubleArray33, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertArrayEquals(doubleArray36, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 2 + "'", int39 == 2);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 2 + "'", int40 == 2);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 2 + "'", int41 == 2);
        org.junit.Assert.assertNotNull(matrixArray42);
        org.junit.Assert.assertNotNull(matrix43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(doubleArray46);
        org.junit.Assert.assertNotNull(matrix48);
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertArrayEquals(doubleArray51, new double[] { 137.90576492663388d, (-1.0d) }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertArrayEquals(doubleArray52, new double[] { (-24.931892522286255d), (-135.63701830716116d) }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertArrayEquals(doubleArray53, new double[] { (-24.931892522286255d), (-135.63701830716116d) }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray54);
        org.junit.Assert.assertArrayEquals(doubleArray54, new double[] { 84.11525593703811d, (-109.28688722187387d) }, 1.0E-15);
        org.junit.Assert.assertNotNull(wildcardClass55);
    }

    @Test
    public void test1779() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1779");
        double[] doubleArray2 = new double[] { 10, 'a' };
        double[] doubleArray5 = new double[] { 10, 'a' };
        double[][] doubleArray6 = new double[][] { doubleArray2, doubleArray5 };
        com.operations.Matrix.Matrix matrix7 = new com.operations.Matrix.Matrix(doubleArray6);
        com.operations.Matrix.Matrix matrix8 = new com.operations.Matrix.Matrix(doubleArray6);
        boolean boolean9 = com.operations.Matrix.MatrixUtils.isSquare(matrix8);
        double[] doubleArray12 = new double[] { 10, 'a' };
        double[] doubleArray15 = new double[] { 10, 'a' };
        double[][] doubleArray16 = new double[][] { doubleArray12, doubleArray15 };
        com.operations.Matrix.Matrix matrix17 = new com.operations.Matrix.Matrix(doubleArray16);
        int int18 = matrix17.getCols();
        int int19 = matrix17.getCols();
        matrix17.print();
        double[] doubleArray23 = new double[] { 10, 'a' };
        double[] doubleArray26 = new double[] { 10, 'a' };
        double[][] doubleArray27 = new double[][] { doubleArray23, doubleArray26 };
        com.operations.Matrix.Matrix matrix28 = new com.operations.Matrix.Matrix(doubleArray27);
        boolean boolean30 = com.operations.Matrix.MatrixUtils.compare(matrix17, matrix28, (double) (-1));
        com.operations.Matrix.Matrix matrix31 = com.operations.Matrix.MatrixOperations.subtract(matrix8, matrix28);
        com.operations.Matrix.Matrix[] matrixArray32 = com.operations.Matrix.MatrixDecompositions.luDecomposition(matrix31);
        double[][] doubleArray33 = matrix31.getData();
        java.lang.Class<?> wildcardClass34 = doubleArray33.getClass();
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertArrayEquals(doubleArray2, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertArrayEquals(doubleArray5, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertArrayEquals(doubleArray12, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertArrayEquals(doubleArray15, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 2 + "'", int18 == 2);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 2 + "'", int19 == 2);
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertArrayEquals(doubleArray23, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertArrayEquals(doubleArray26, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(matrix31);
        org.junit.Assert.assertNotNull(matrixArray32);
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertNotNull(wildcardClass34);
    }

    @Test
    public void test1780() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1780");
        com.operations.Matrix.Matrix matrix2 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0L, (double) (byte) 10);
        int int3 = matrix2.getRows();
        com.operations.Matrix.Matrix matrix5 = com.operations.Matrix.MatrixOperations.scalarMultiply(matrix2, (double) 2);
        double double6 = com.operations.Matrix.MatrixUtils.frobeniusNorm(matrix2);
        com.operations.Matrix.Matrix matrix9 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0L, (double) (byte) 10);
        int int10 = matrix9.getRows();
        com.operations.Matrix.Matrix matrix12 = com.operations.Matrix.MatrixOperations.scalarMultiply(matrix9, (double) 2);
        com.operations.Matrix.Matrix matrix13 = com.operations.Matrix.MatrixOperations.subtract(matrix2, matrix12);
        com.operations.Matrix.Matrix matrix14 = com.operations.Matrix.MatrixOperations.transpose(matrix2);
        double[] doubleArray17 = new double[] { 10, 'a' };
        double[] doubleArray20 = new double[] { 10, 'a' };
        double[][] doubleArray21 = new double[][] { doubleArray17, doubleArray20 };
        com.operations.Matrix.Matrix matrix22 = new com.operations.Matrix.Matrix(doubleArray21);
        com.operations.Matrix.Matrix matrix23 = new com.operations.Matrix.Matrix(doubleArray21);
        boolean boolean24 = com.operations.Matrix.MatrixUtils.isSquare(matrix23);
        double[] doubleArray27 = new double[] { 10, 'a' };
        double[] doubleArray30 = new double[] { 10, 'a' };
        double[][] doubleArray31 = new double[][] { doubleArray27, doubleArray30 };
        com.operations.Matrix.Matrix matrix32 = new com.operations.Matrix.Matrix(doubleArray31);
        int int33 = matrix32.getCols();
        int int34 = matrix32.getCols();
        matrix32.print();
        double[] doubleArray38 = new double[] { 10, 'a' };
        double[] doubleArray41 = new double[] { 10, 'a' };
        double[][] doubleArray42 = new double[][] { doubleArray38, doubleArray41 };
        com.operations.Matrix.Matrix matrix43 = new com.operations.Matrix.Matrix(doubleArray42);
        boolean boolean45 = com.operations.Matrix.MatrixUtils.compare(matrix32, matrix43, (double) (-1));
        com.operations.Matrix.Matrix matrix46 = com.operations.Matrix.MatrixOperations.subtract(matrix23, matrix43);
        com.operations.Matrix.Matrix matrix47 = com.operations.Matrix.MatrixOperations.subtract(matrix14, matrix23);
        int int48 = matrix47.getCols();
        org.junit.Assert.assertNotNull(matrix2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 2 + "'", int3 == 2);
        org.junit.Assert.assertNotNull(matrix5);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 10.0d + "'", double6 == 10.0d);
        org.junit.Assert.assertNotNull(matrix9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 2 + "'", int10 == 2);
        org.junit.Assert.assertNotNull(matrix12);
        org.junit.Assert.assertNotNull(matrix13);
        org.junit.Assert.assertNotNull(matrix14);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertArrayEquals(doubleArray17, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertArrayEquals(doubleArray20, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertArrayEquals(doubleArray27, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertArrayEquals(doubleArray30, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 2 + "'", int33 == 2);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 2 + "'", int34 == 2);
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertArrayEquals(doubleArray38, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertArrayEquals(doubleArray41, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(matrix46);
        org.junit.Assert.assertNotNull(matrix47);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 2 + "'", int48 == 2);
    }

    @Test
    public void test1781() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1781");
        com.operations.Matrix.Matrix matrix2 = com.operations.Matrix.MatrixTransformations.project2D((double) ' ', 0.0d);
        boolean boolean3 = com.operations.Matrix.MatrixUtils.isSymmetric(matrix2);
        com.operations.Matrix.Matrix matrix4 = com.operations.Matrix.MatrixOperations.transpose(matrix2);
        // The following exception was thrown during execution in test generation
        try {
            double double7 = matrix2.getValue((int) (short) 1, (-1));
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(matrix2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNotNull(matrix4);
    }

    @Test
    public void test1782() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1782");
        com.operations.Matrix.Matrix matrix2 = new com.operations.Matrix.Matrix((int) '4', (int) ' ');
        double[][] doubleArray3 = matrix2.getData();
        int int4 = matrix2.getRows();
        com.operations.Matrix.Matrix matrix5 = com.operations.Matrix.MatrixOperations.transpose(matrix2);
        double double6 = com.operations.Matrix.MatrixUtils.frobeniusNorm(matrix2);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 52 + "'", int4 == 52);
        org.junit.Assert.assertNotNull(matrix5);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.0d + "'", double6 == 0.0d);
    }

    @Test
    public void test1783() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1783");
        com.operations.Matrix.Matrix matrix2 = new com.operations.Matrix.Matrix(2, (int) (short) 0);
        boolean boolean3 = com.operations.Matrix.MatrixUtils.isSquare(matrix2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
    }

    @Test
    public void test1784() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1784");
        com.operations.Matrix.Matrix matrix5 = com.operations.Matrix.MatrixUtils.generateRandomMatrix((int) (short) 10, 100, 32, 2, (long) (short) -1);
        com.operations.Matrix.Matrix matrix7 = com.operations.Matrix.MatrixTransformations.rotate2D((double) (short) 100);
        double[] doubleArray10 = new double[] { 137.90576492663388d, (byte) -1 };
        double[] doubleArray11 = com.operations.Matrix.MatrixSolver.solveGaussian(matrix7, doubleArray10);
        com.operations.Matrix.Matrix matrix14 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0L, (double) (byte) 10);
        double[] doubleArray17 = new double[] { 10, 'a' };
        double[] doubleArray20 = new double[] { 10, 'a' };
        double[][] doubleArray21 = new double[][] { doubleArray17, doubleArray20 };
        com.operations.Matrix.Matrix matrix22 = new com.operations.Matrix.Matrix(doubleArray21);
        int int23 = matrix22.getCols();
        int int24 = matrix22.getCols();
        int int25 = matrix22.getCols();
        com.operations.Matrix.Matrix[] matrixArray26 = com.operations.Matrix.MatrixDecompositions.luDecomposition(matrix22);
        com.operations.Matrix.Matrix matrix27 = com.operations.Matrix.MatrixOperations.multiply(matrix14, matrix22);
        boolean boolean29 = com.operations.Matrix.MatrixUtils.compare(matrix7, matrix14, (double) (-1L));
        double[][] doubleArray30 = matrix7.getData();
        com.operations.Matrix.Matrix matrix33 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0L, (double) 10L);
        boolean boolean35 = com.operations.Matrix.MatrixUtils.compare(matrix7, matrix33, 146.4308710620817d);
        boolean boolean37 = com.operations.Matrix.MatrixUtils.compare(matrix5, matrix33, (double) ' ');
        // The following exception was thrown during execution in test generation
        try {
            com.operations.Matrix.Matrix[] matrixArray38 = com.operations.Matrix.MatrixDecompositions.luDecomposition(matrix5);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Matrix must be square for LU decomposition.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(matrix5);
        org.junit.Assert.assertNotNull(matrix7);
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertArrayEquals(doubleArray10, new double[] { 137.90576492663388d, (-1.0d) }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertArrayEquals(doubleArray11, new double[] { (-24.931892522286255d), (-135.63701830716116d) }, 1.0E-15);
        org.junit.Assert.assertNotNull(matrix14);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertArrayEquals(doubleArray17, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertArrayEquals(doubleArray20, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 2 + "'", int23 == 2);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 2 + "'", int24 == 2);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 2 + "'", int25 == 2);
        org.junit.Assert.assertNotNull(matrixArray26);
        org.junit.Assert.assertNotNull(matrix27);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertNotNull(matrix33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
    }

    @Test
    public void test1785() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1785");
        com.operations.Matrix.Matrix matrix2 = com.operations.Matrix.MatrixTransformations.scale2D(641.7761389614766d, 975.1410154434076d);
        org.junit.Assert.assertNotNull(matrix2);
    }

    @Test
    public void test1786() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1786");
        com.operations.Matrix.Matrix matrix5 = com.operations.Matrix.MatrixUtils.generateRandomMatrix(32, (int) '4', (-1), (int) (short) 0, (long) 97);
        org.junit.Assert.assertNotNull(matrix5);
    }

    @Test
    public void test1787() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1787");
        com.operations.Matrix.Matrix matrix2 = com.operations.Matrix.MatrixTransformations.project2D((double) (byte) 100, 32.0d);
        boolean boolean3 = com.operations.Matrix.MatrixUtils.isSymmetric(matrix2);
        matrix2.print();
        com.operations.Matrix.Matrix matrix5 = com.operations.Matrix.MatrixOperations.transpose(matrix2);
        com.operations.Matrix.Matrix[] matrixArray6 = com.operations.Matrix.MatrixDecompositions.luDecomposition(matrix2);
        com.operations.Matrix.Matrix matrix7 = null;
        // The following exception was thrown during execution in test generation
        try {
            com.operations.Matrix.Matrix matrix8 = com.operations.Matrix.MatrixOperations.add(matrix2, matrix7);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot invoke \"com.operations.Matrix.Matrix.getRows()\" because \"b\" is null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(matrix2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNotNull(matrix5);
        org.junit.Assert.assertNotNull(matrixArray6);
    }

    @Test
    public void test1788() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1788");
        com.operations.Matrix.Matrix matrix4 = com.operations.Matrix.MatrixUtils.generateRandomMatrix(35, (int) (byte) 10, 10, 0);
        // The following exception was thrown during execution in test generation
        try {
            com.operations.Matrix.Matrix matrix5 = com.operations.Matrix.MatrixDecompositions.choleskyDecomposition(matrix4);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Matrix must be square for Cholesky decomposition.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(matrix4);
    }

    @Test
    public void test1789() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1789");
        com.operations.Matrix.Matrix matrix2 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0.0f, (double) (-1));
        com.operations.Matrix.Matrix matrix5 = com.operations.Matrix.MatrixTransformations.scale2D(146.4308710620817d, (double) 10L);
        com.operations.Matrix.Matrix matrix6 = com.operations.Matrix.MatrixOperations.multiply(matrix2, matrix5);
        com.operations.Matrix.Matrix matrix7 = com.operations.Matrix.MatrixOperations.transpose(matrix2);
        // The following exception was thrown during execution in test generation
        try {
            com.operations.Matrix.Matrix matrix8 = com.operations.Matrix.MatrixDecompositions.choleskyDecomposition(matrix2);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Matrix is not positive definite.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(matrix2);
        org.junit.Assert.assertNotNull(matrix5);
        org.junit.Assert.assertNotNull(matrix6);
        org.junit.Assert.assertNotNull(matrix7);
    }

    @Test
    public void test1790() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1790");
        double[] doubleArray2 = new double[] { 10, 'a' };
        double[] doubleArray5 = new double[] { 10, 'a' };
        double[][] doubleArray6 = new double[][] { doubleArray2, doubleArray5 };
        com.operations.Matrix.Matrix matrix7 = new com.operations.Matrix.Matrix(doubleArray6);
        com.operations.Matrix.Matrix matrix8 = new com.operations.Matrix.Matrix(doubleArray6);
        com.operations.Matrix.Matrix matrix10 = com.operations.Matrix.MatrixTransformations.rotate2D((double) (short) 100);
        double[] doubleArray13 = new double[] { 137.90576492663388d, (byte) -1 };
        double[] doubleArray14 = com.operations.Matrix.MatrixSolver.solveGaussian(matrix10, doubleArray13);
        com.operations.Matrix.Matrix matrix15 = com.operations.Matrix.MatrixOperations.add(matrix8, matrix10);
        com.operations.Matrix.Matrix matrix16 = com.operations.Matrix.MatrixOperations.transpose(matrix10);
        int int17 = matrix10.getCols();
        com.operations.Matrix.Matrix matrix20 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0L, (double) (byte) 10);
        double[] doubleArray23 = new double[] { 10, 'a' };
        double[] doubleArray26 = new double[] { 10, 'a' };
        double[][] doubleArray27 = new double[][] { doubleArray23, doubleArray26 };
        com.operations.Matrix.Matrix matrix28 = new com.operations.Matrix.Matrix(doubleArray27);
        int int29 = matrix28.getCols();
        int int30 = matrix28.getCols();
        int int31 = matrix28.getCols();
        com.operations.Matrix.Matrix[] matrixArray32 = com.operations.Matrix.MatrixDecompositions.luDecomposition(matrix28);
        com.operations.Matrix.Matrix matrix33 = com.operations.Matrix.MatrixOperations.multiply(matrix20, matrix28);
        com.operations.Matrix.Matrix matrix35 = com.operations.Matrix.MatrixTransformations.rotate2D((double) (short) 100);
        boolean boolean37 = com.operations.Matrix.MatrixUtils.compare(matrix28, matrix35, (double) (byte) 0);
        boolean boolean38 = com.operations.Matrix.MatrixUtils.isSymmetric(matrix35);
        boolean boolean39 = com.operations.Matrix.MatrixUtils.isSquare(matrix35);
        com.operations.Matrix.Matrix matrix41 = com.operations.Matrix.MatrixTransformations.rotate2D((double) (short) 100);
        boolean boolean43 = com.operations.Matrix.MatrixUtils.compare(matrix35, matrix41, (double) (byte) 100);
        matrix41.print();
        com.operations.Matrix.Matrix matrix45 = com.operations.Matrix.MatrixOperations.add(matrix10, matrix41);
        com.operations.Matrix.Matrix matrix48 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0L, (double) (byte) 10);
        int int49 = matrix48.getRows();
        com.operations.Matrix.Matrix matrix51 = com.operations.Matrix.MatrixOperations.scalarMultiply(matrix48, (double) 2);
        matrix48.print();
        com.operations.Matrix.Matrix matrix54 = com.operations.Matrix.MatrixOperations.scalarMultiply(matrix48, 100.00499987500625d);
        com.operations.Matrix.Matrix matrix57 = new com.operations.Matrix.Matrix(10, (int) (byte) 1);
        boolean boolean59 = com.operations.Matrix.MatrixUtils.compare(matrix54, matrix57, (double) 100L);
        com.operations.Matrix.Matrix matrix60 = com.operations.Matrix.MatrixOperations.add(matrix41, matrix54);
        double double61 = com.operations.Matrix.MatrixUtils.frobeniusNorm(matrix41);
        int int62 = matrix41.getRows();
        // The following exception was thrown during execution in test generation
        try {
            matrix41.setValue((int) (byte) -1, 0, (double) 32);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: Index -1 out of bounds for length 2");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertArrayEquals(doubleArray2, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertArrayEquals(doubleArray5, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertNotNull(matrix10);
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertArrayEquals(doubleArray13, new double[] { 137.90576492663388d, (-1.0d) }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertArrayEquals(doubleArray14, new double[] { (-24.931892522286255d), (-135.63701830716116d) }, 1.0E-15);
        org.junit.Assert.assertNotNull(matrix15);
        org.junit.Assert.assertNotNull(matrix16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 2 + "'", int17 == 2);
        org.junit.Assert.assertNotNull(matrix20);
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertArrayEquals(doubleArray23, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertArrayEquals(doubleArray26, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 2 + "'", int29 == 2);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 2 + "'", int30 == 2);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 2 + "'", int31 == 2);
        org.junit.Assert.assertNotNull(matrixArray32);
        org.junit.Assert.assertNotNull(matrix33);
        org.junit.Assert.assertNotNull(matrix35);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertNotNull(matrix41);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertNotNull(matrix45);
        org.junit.Assert.assertNotNull(matrix48);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 2 + "'", int49 == 2);
        org.junit.Assert.assertNotNull(matrix51);
        org.junit.Assert.assertNotNull(matrix54);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNotNull(matrix60);
        org.junit.Assert.assertTrue("'" + double61 + "' != '" + 1.414213562373095d + "'", double61 == 1.414213562373095d);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 2 + "'", int62 == 2);
    }

    @Test
    public void test1791() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1791");
        com.operations.Matrix.Matrix matrix2 = com.operations.Matrix.MatrixTransformations.scale2D(1.414213562373095d, (double) 0L);
        // The following exception was thrown during execution in test generation
        try {
            matrix2.setValue((int) (short) 1, 2, 641.7761389614766d);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: Index 2 out of bounds for length 2");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(matrix2);
    }

    @Test
    public void test1792() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1792");
        double[] doubleArray2 = new double[] { 10, 'a' };
        double[] doubleArray5 = new double[] { 10, 'a' };
        double[][] doubleArray6 = new double[][] { doubleArray2, doubleArray5 };
        com.operations.Matrix.Matrix matrix7 = new com.operations.Matrix.Matrix(doubleArray6);
        com.operations.Matrix.Matrix matrix8 = new com.operations.Matrix.Matrix(doubleArray6);
        com.operations.Matrix.Matrix matrix9 = new com.operations.Matrix.Matrix(doubleArray6);
        com.operations.Matrix.Matrix matrix10 = new com.operations.Matrix.Matrix(doubleArray6);
        com.operations.Matrix.Matrix matrix11 = com.operations.Matrix.MatrixOperations.transpose(matrix10);
        com.operations.Matrix.Matrix matrix13 = com.operations.Matrix.MatrixOperations.scalarMultiply(matrix11, (double) (-1.0f));
        com.operations.Matrix.Matrix matrix16 = new com.operations.Matrix.Matrix((int) (short) 10, (int) (short) 0);
        int int17 = matrix16.getCols();
        // The following exception was thrown during execution in test generation
        try {
            com.operations.Matrix.Matrix matrix18 = com.operations.Matrix.MatrixOperations.multiply(matrix11, matrix16);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Matrix A's columns must match Matrix B's rows for multiplication.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertArrayEquals(doubleArray2, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertArrayEquals(doubleArray5, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertNotNull(matrix11);
        org.junit.Assert.assertNotNull(matrix13);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
    }

    @Test
    public void test1793() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1793");
        com.operations.Matrix.Matrix matrix2 = com.operations.Matrix.MatrixTransformations.project2D(0.0d, (double) (byte) 10);
        // The following exception was thrown during execution in test generation
        try {
            com.operations.Matrix.Matrix matrix3 = com.operations.Matrix.MatrixDecompositions.choleskyDecomposition(matrix2);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Matrix is not positive definite.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(matrix2);
    }

    @Test
    public void test1794() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1794");
        com.operations.Matrix.Matrix matrix1 = com.operations.Matrix.MatrixTransformations.rotate2D((double) '4');
        double[] doubleArray4 = new double[] { 10, 'a' };
        double[] doubleArray7 = new double[] { 10, 'a' };
        double[][] doubleArray8 = new double[][] { doubleArray4, doubleArray7 };
        com.operations.Matrix.Matrix matrix9 = new com.operations.Matrix.Matrix(doubleArray8);
        com.operations.Matrix.Matrix matrix10 = new com.operations.Matrix.Matrix(doubleArray8);
        com.operations.Matrix.Matrix matrix12 = com.operations.Matrix.MatrixTransformations.rotate2D((double) (short) 100);
        double[] doubleArray15 = new double[] { 137.90576492663388d, (byte) -1 };
        double[] doubleArray16 = com.operations.Matrix.MatrixSolver.solveGaussian(matrix12, doubleArray15);
        com.operations.Matrix.Matrix matrix17 = com.operations.Matrix.MatrixOperations.add(matrix10, matrix12);
        boolean boolean18 = com.operations.Matrix.MatrixUtils.isSymmetric(matrix17);
        boolean boolean20 = com.operations.Matrix.MatrixUtils.compare(matrix1, matrix17, 364.0054944640259d);
        com.operations.Matrix.Matrix[] matrixArray21 = com.operations.Matrix.MatrixDecompositions.luDecomposition(matrix17);
        com.operations.Matrix.Matrix matrix23 = com.operations.Matrix.MatrixTransformations.rotate2D(100.0d);
        int int24 = matrix23.getCols();
        matrix23.print();
        com.operations.Matrix.Matrix matrix27 = com.operations.Matrix.MatrixOperations.scalarMultiply(matrix23, (double) (byte) 1);
        boolean boolean28 = com.operations.Matrix.MatrixUtils.isSymmetric(matrix23);
        com.operations.Matrix.Matrix matrix30 = com.operations.Matrix.MatrixTransformations.rotate2D((-1.0d));
        com.operations.Matrix.Matrix matrix32 = com.operations.Matrix.MatrixTransformations.rotate2D((double) (-1L));
        com.operations.Matrix.Matrix matrix34 = com.operations.Matrix.MatrixTransformations.rotate2D((double) (short) 100);
        double[] doubleArray37 = new double[] { 137.90576492663388d, (byte) -1 };
        double[] doubleArray38 = com.operations.Matrix.MatrixSolver.solveGaussian(matrix34, doubleArray37);
        double[] doubleArray39 = com.operations.Matrix.MatrixSolver.solveGaussian(matrix32, doubleArray37);
        double[] doubleArray40 = com.operations.Matrix.MatrixSolver.solveGaussian(matrix30, doubleArray37);
        double[] doubleArray41 = com.operations.Matrix.MatrixSolver.solveGaussian(matrix23, doubleArray40);
        double[] doubleArray42 = com.operations.Matrix.MatrixSolver.solveGaussian(matrix17, doubleArray40);
        // The following exception was thrown during execution in test generation
        try {
            matrix17.setValue(2, 97, 391.8840992892044d);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: Index 2 out of bounds for length 2");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(matrix1);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertArrayEquals(doubleArray4, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertArrayEquals(doubleArray7, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertNotNull(matrix12);
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertArrayEquals(doubleArray15, new double[] { 137.90576492663388d, (-1.0d) }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertArrayEquals(doubleArray16, new double[] { (-24.931892522286255d), (-135.63701830716116d) }, 1.0E-15);
        org.junit.Assert.assertNotNull(matrix17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertNotNull(matrixArray21);
        org.junit.Assert.assertNotNull(matrix23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 2 + "'", int24 == 2);
        org.junit.Assert.assertNotNull(matrix27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(matrix30);
        org.junit.Assert.assertNotNull(matrix32);
        org.junit.Assert.assertNotNull(matrix34);
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertArrayEquals(doubleArray37, new double[] { 137.90576492663388d, (-1.0d) }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertArrayEquals(doubleArray38, new double[] { (-24.931892522286255d), (-135.63701830716116d) }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertArrayEquals(doubleArray39, new double[] { 137.90221361711127d, 1.4069397643877004d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertArrayEquals(doubleArray40, new double[] { 137.90221361711127d, 1.4069397643877004d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertArrayEquals(doubleArray41, new double[] { (-22.56090290285694d), (-136.05148165384995d) }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertArrayEquals(doubleArray42, new double[] { (-128.00364213570185d), 14.536356206966005d }, 1.0E-15);
    }

    @Test
    public void test1795() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1795");
        double[] doubleArray2 = new double[] { 10, 'a' };
        double[] doubleArray5 = new double[] { 10, 'a' };
        double[][] doubleArray6 = new double[][] { doubleArray2, doubleArray5 };
        com.operations.Matrix.Matrix matrix7 = new com.operations.Matrix.Matrix(doubleArray6);
        int int8 = matrix7.getCols();
        int int9 = matrix7.getCols();
        matrix7.print();
        double[] doubleArray13 = new double[] { 10, 'a' };
        double[] doubleArray16 = new double[] { 10, 'a' };
        double[][] doubleArray17 = new double[][] { doubleArray13, doubleArray16 };
        com.operations.Matrix.Matrix matrix18 = new com.operations.Matrix.Matrix(doubleArray17);
        boolean boolean20 = com.operations.Matrix.MatrixUtils.compare(matrix7, matrix18, (double) (-1));
        com.operations.Matrix.Matrix matrix21 = com.operations.Matrix.MatrixDecompositions.choleskyDecomposition(matrix18);
        com.operations.Matrix.Matrix matrix23 = com.operations.Matrix.MatrixOperations.scalarMultiply(matrix21, 32.0d);
        com.operations.Matrix.Matrix matrix24 = com.operations.Matrix.MatrixDecompositions.choleskyDecomposition(matrix21);
        com.operations.Matrix.Matrix matrix25 = com.operations.Matrix.MatrixOperations.transpose(matrix24);
        com.operations.Matrix.Matrix matrix28 = com.operations.Matrix.MatrixTransformations.scale2D((double) 100.0f, (double) (byte) 1);
        com.operations.Matrix.Matrix matrix31 = com.operations.Matrix.MatrixTransformations.scale2D((double) 1.0f, (double) 1);
        com.operations.Matrix.Matrix matrix33 = com.operations.Matrix.MatrixTransformations.rotate2D((double) 1.0f);
        com.operations.Matrix.Matrix matrix36 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0L, (double) (byte) 10);
        int int37 = matrix36.getRows();
        com.operations.Matrix.Matrix matrix39 = com.operations.Matrix.MatrixOperations.scalarMultiply(matrix36, (double) 2);
        double double40 = com.operations.Matrix.MatrixUtils.frobeniusNorm(matrix36);
        com.operations.Matrix.Matrix matrix43 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0L, (double) (byte) 10);
        int int44 = matrix43.getRows();
        com.operations.Matrix.Matrix matrix46 = com.operations.Matrix.MatrixOperations.scalarMultiply(matrix43, (double) 2);
        com.operations.Matrix.Matrix matrix47 = com.operations.Matrix.MatrixOperations.subtract(matrix36, matrix46);
        com.operations.Matrix.Matrix matrix48 = com.operations.Matrix.MatrixOperations.add(matrix33, matrix46);
        boolean boolean50 = com.operations.Matrix.MatrixUtils.compare(matrix31, matrix33, (double) (byte) -1);
        com.operations.Matrix.Matrix matrix51 = com.operations.Matrix.MatrixOperations.transpose(matrix33);
        com.operations.Matrix.Matrix matrix54 = com.operations.Matrix.MatrixTransformations.project2D((double) 10L, 10.0d);
        com.operations.Matrix.Matrix matrix56 = com.operations.Matrix.MatrixTransformations.rotate2D((double) (short) 100);
        double[] doubleArray59 = new double[] { 137.90576492663388d, (byte) -1 };
        double[] doubleArray60 = com.operations.Matrix.MatrixSolver.solveGaussian(matrix56, doubleArray59);
        com.operations.Matrix.Matrix matrix63 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0L, (double) (byte) 10);
        double[] doubleArray66 = new double[] { 10, 'a' };
        double[] doubleArray69 = new double[] { 10, 'a' };
        double[][] doubleArray70 = new double[][] { doubleArray66, doubleArray69 };
        com.operations.Matrix.Matrix matrix71 = new com.operations.Matrix.Matrix(doubleArray70);
        int int72 = matrix71.getCols();
        int int73 = matrix71.getCols();
        int int74 = matrix71.getCols();
        com.operations.Matrix.Matrix[] matrixArray75 = com.operations.Matrix.MatrixDecompositions.luDecomposition(matrix71);
        com.operations.Matrix.Matrix matrix76 = com.operations.Matrix.MatrixOperations.multiply(matrix63, matrix71);
        boolean boolean78 = com.operations.Matrix.MatrixUtils.compare(matrix56, matrix63, (double) (-1L));
        double[][] doubleArray79 = matrix56.getData();
        com.operations.Matrix.Matrix matrix81 = com.operations.Matrix.MatrixTransformations.rotate2D((double) (short) 100);
        double[] doubleArray84 = new double[] { 137.90576492663388d, (byte) -1 };
        double[] doubleArray85 = com.operations.Matrix.MatrixSolver.solveGaussian(matrix81, doubleArray84);
        double[] doubleArray86 = com.operations.Matrix.MatrixSolver.solveGaussian(matrix56, doubleArray84);
        double[] doubleArray87 = com.operations.Matrix.MatrixSolver.solveGaussian(matrix54, doubleArray86);
        double[] doubleArray88 = com.operations.Matrix.MatrixSolver.solveGaussian(matrix33, doubleArray87);
        double[] doubleArray89 = com.operations.Matrix.MatrixSolver.solveGaussian(matrix28, doubleArray88);
        double[] doubleArray90 = com.operations.Matrix.MatrixSolver.solveGaussian(matrix25, doubleArray89);
        java.lang.Class<?> wildcardClass91 = doubleArray90.getClass();
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertArrayEquals(doubleArray2, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertArrayEquals(doubleArray5, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 2 + "'", int8 == 2);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 2 + "'", int9 == 2);
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertArrayEquals(doubleArray13, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertArrayEquals(doubleArray16, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(matrix21);
        org.junit.Assert.assertNotNull(matrix23);
        org.junit.Assert.assertNotNull(matrix24);
        org.junit.Assert.assertNotNull(matrix25);
        org.junit.Assert.assertNotNull(matrix28);
        org.junit.Assert.assertNotNull(matrix31);
        org.junit.Assert.assertNotNull(matrix33);
        org.junit.Assert.assertNotNull(matrix36);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 2 + "'", int37 == 2);
        org.junit.Assert.assertNotNull(matrix39);
        org.junit.Assert.assertTrue("'" + double40 + "' != '" + 10.0d + "'", double40 == 10.0d);
        org.junit.Assert.assertNotNull(matrix43);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 2 + "'", int44 == 2);
        org.junit.Assert.assertNotNull(matrix46);
        org.junit.Assert.assertNotNull(matrix47);
        org.junit.Assert.assertNotNull(matrix48);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(matrix51);
        org.junit.Assert.assertNotNull(matrix54);
        org.junit.Assert.assertNotNull(matrix56);
        org.junit.Assert.assertNotNull(doubleArray59);
        org.junit.Assert.assertArrayEquals(doubleArray59, new double[] { 137.90576492663388d, (-1.0d) }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray60);
        org.junit.Assert.assertArrayEquals(doubleArray60, new double[] { (-24.931892522286255d), (-135.63701830716116d) }, 1.0E-15);
        org.junit.Assert.assertNotNull(matrix63);
        org.junit.Assert.assertNotNull(doubleArray66);
        org.junit.Assert.assertArrayEquals(doubleArray66, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray69);
        org.junit.Assert.assertArrayEquals(doubleArray69, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray70);
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 2 + "'", int72 == 2);
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + 2 + "'", int73 == 2);
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 2 + "'", int74 == 2);
        org.junit.Assert.assertNotNull(matrixArray75);
        org.junit.Assert.assertNotNull(matrix76);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertNotNull(doubleArray79);
        org.junit.Assert.assertNotNull(matrix81);
        org.junit.Assert.assertNotNull(doubleArray84);
        org.junit.Assert.assertArrayEquals(doubleArray84, new double[] { 137.90576492663388d, (-1.0d) }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray85);
        org.junit.Assert.assertArrayEquals(doubleArray85, new double[] { (-24.931892522286255d), (-135.63701830716116d) }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray86);
        org.junit.Assert.assertArrayEquals(doubleArray86, new double[] { (-24.931892522286255d), (-135.63701830716116d) }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray87);
        org.junit.Assert.assertArrayEquals(doubleArray87, new double[] { (-2.4931892522286256d), (-13.563701830716116d) }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray88);
        org.junit.Assert.assertArrayEquals(doubleArray88, new double[] { (-2.7295287645732618d), (-13.518123861075072d) }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray89);
        org.junit.Assert.assertArrayEquals(doubleArray89, new double[] { (-0.027295287645732618d), (-13.518123861075072d) }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray90);
        org.junit.Assert.assertArrayEquals(doubleArray90, new double[] { 5.429004151468713d, (-5.444353419694866d) }, 1.0E-15);
        org.junit.Assert.assertNotNull(wildcardClass91);
    }

    @Test
    public void test1796() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1796");
        com.operations.Matrix.Matrix matrix1 = com.operations.Matrix.MatrixTransformations.rotate2D((double) (short) -1);
        com.operations.Matrix.Matrix[] matrixArray2 = com.operations.Matrix.MatrixDecompositions.luDecomposition(matrix1);
        // The following exception was thrown during execution in test generation
        try {
            double double5 = matrix1.getValue((int) (short) 10, (int) (short) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(matrix1);
        org.junit.Assert.assertNotNull(matrixArray2);
    }

    @Test
    public void test1797() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1797");
        com.operations.Matrix.Matrix matrix2 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0L, (double) (byte) 10);
        double[] doubleArray5 = new double[] { 10, 'a' };
        double[] doubleArray8 = new double[] { 10, 'a' };
        double[][] doubleArray9 = new double[][] { doubleArray5, doubleArray8 };
        com.operations.Matrix.Matrix matrix10 = new com.operations.Matrix.Matrix(doubleArray9);
        int int11 = matrix10.getCols();
        int int12 = matrix10.getCols();
        int int13 = matrix10.getCols();
        com.operations.Matrix.Matrix[] matrixArray14 = com.operations.Matrix.MatrixDecompositions.luDecomposition(matrix10);
        com.operations.Matrix.Matrix matrix15 = com.operations.Matrix.MatrixOperations.multiply(matrix2, matrix10);
        com.operations.Matrix.Matrix matrix17 = com.operations.Matrix.MatrixTransformations.rotate2D((double) (short) 100);
        boolean boolean19 = com.operations.Matrix.MatrixUtils.compare(matrix10, matrix17, (double) (byte) 0);
        double[] doubleArray22 = new double[] { 10, 'a' };
        double[] doubleArray25 = new double[] { 10, 'a' };
        double[][] doubleArray26 = new double[][] { doubleArray22, doubleArray25 };
        com.operations.Matrix.Matrix matrix27 = new com.operations.Matrix.Matrix(doubleArray26);
        com.operations.Matrix.Matrix matrix28 = new com.operations.Matrix.Matrix(doubleArray26);
        com.operations.Matrix.Matrix matrix29 = new com.operations.Matrix.Matrix(doubleArray26);
        boolean boolean31 = com.operations.Matrix.MatrixUtils.compare(matrix10, matrix29, (double) (-1));
        com.operations.Matrix.Matrix matrix33 = com.operations.Matrix.MatrixTransformations.rotate2D((double) (short) 100);
        double[] doubleArray36 = new double[] { 137.90576492663388d, (byte) -1 };
        double[] doubleArray37 = com.operations.Matrix.MatrixSolver.solveGaussian(matrix33, doubleArray36);
        com.operations.Matrix.Matrix matrix40 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0L, (double) (byte) 10);
        double[] doubleArray43 = new double[] { 10, 'a' };
        double[] doubleArray46 = new double[] { 10, 'a' };
        double[][] doubleArray47 = new double[][] { doubleArray43, doubleArray46 };
        com.operations.Matrix.Matrix matrix48 = new com.operations.Matrix.Matrix(doubleArray47);
        int int49 = matrix48.getCols();
        int int50 = matrix48.getCols();
        int int51 = matrix48.getCols();
        com.operations.Matrix.Matrix[] matrixArray52 = com.operations.Matrix.MatrixDecompositions.luDecomposition(matrix48);
        com.operations.Matrix.Matrix matrix53 = com.operations.Matrix.MatrixOperations.multiply(matrix40, matrix48);
        boolean boolean55 = com.operations.Matrix.MatrixUtils.compare(matrix33, matrix40, (double) (-1L));
        com.operations.Matrix.Matrix matrix56 = com.operations.Matrix.MatrixOperations.add(matrix29, matrix40);
        java.lang.Class<?> wildcardClass57 = matrix29.getClass();
        org.junit.Assert.assertNotNull(matrix2);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertArrayEquals(doubleArray5, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertArrayEquals(doubleArray8, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 2 + "'", int11 == 2);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 2 + "'", int12 == 2);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 2 + "'", int13 == 2);
        org.junit.Assert.assertNotNull(matrixArray14);
        org.junit.Assert.assertNotNull(matrix15);
        org.junit.Assert.assertNotNull(matrix17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertArrayEquals(doubleArray22, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertArrayEquals(doubleArray25, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(matrix33);
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertArrayEquals(doubleArray36, new double[] { 137.90576492663388d, (-1.0d) }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertArrayEquals(doubleArray37, new double[] { (-24.931892522286255d), (-135.63701830716116d) }, 1.0E-15);
        org.junit.Assert.assertNotNull(matrix40);
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertArrayEquals(doubleArray43, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray46);
        org.junit.Assert.assertArrayEquals(doubleArray46, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 2 + "'", int49 == 2);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 2 + "'", int50 == 2);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 2 + "'", int51 == 2);
        org.junit.Assert.assertNotNull(matrixArray52);
        org.junit.Assert.assertNotNull(matrix53);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNotNull(matrix56);
        org.junit.Assert.assertNotNull(wildcardClass57);
    }

    @Test
    public void test1798() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1798");
        com.operations.Matrix.Matrix matrix5 = com.operations.Matrix.MatrixUtils.generateRandomMatrix((int) (byte) 100, (int) 'a', (int) '4', (int) (short) 100, (long) (byte) 0);
        // The following exception was thrown during execution in test generation
        try {
            matrix5.setValue((int) (byte) 100, (int) (short) -1, 30.0d);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: Index 100 out of bounds for length 100");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(matrix5);
    }

    @Test
    public void test1799() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1799");
        com.operations.Matrix.Matrix matrix1 = com.operations.Matrix.MatrixTransformations.rotate2D(975.1410154434076d);
        com.operations.Matrix.Matrix matrix2 = com.operations.Matrix.MatrixOperations.transpose(matrix1);
        // The following exception was thrown during execution in test generation
        try {
            com.operations.Matrix.Matrix matrix3 = com.operations.Matrix.MatrixDecompositions.choleskyDecomposition(matrix1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Matrix is not positive definite.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(matrix1);
        org.junit.Assert.assertNotNull(matrix2);
    }

    @Test
    public void test1800() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1800");
        com.operations.Matrix.Matrix matrix5 = com.operations.Matrix.MatrixUtils.generateRandomMatrix((int) '4', (int) ' ', (int) (byte) 0, 1, (long) '4');
        boolean boolean6 = com.operations.Matrix.MatrixUtils.isSymmetric(matrix5);
        double double7 = com.operations.Matrix.MatrixUtils.frobeniusNorm(matrix5);
        org.junit.Assert.assertNotNull(matrix5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 24.03204160570106d + "'", double7 == 24.03204160570106d);
    }

    @Test
    public void test1801() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1801");
        com.operations.Matrix.Matrix matrix2 = new com.operations.Matrix.Matrix(2, 0);
        boolean boolean3 = com.operations.Matrix.MatrixUtils.isSquare(matrix2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
    }

    @Test
    public void test1802() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1802");
        double[] doubleArray2 = new double[] { 10, 'a' };
        double[] doubleArray5 = new double[] { 10, 'a' };
        double[][] doubleArray6 = new double[][] { doubleArray2, doubleArray5 };
        com.operations.Matrix.Matrix matrix7 = new com.operations.Matrix.Matrix(doubleArray6);
        int int8 = matrix7.getCols();
        int int9 = matrix7.getCols();
        int int10 = matrix7.getCols();
        com.operations.Matrix.Matrix matrix16 = com.operations.Matrix.MatrixUtils.generateRandomMatrix(100, (int) (byte) 1, (int) '#', (int) '#', 1L);
        double double19 = matrix16.getValue((int) '4', 0);
        double double20 = com.operations.Matrix.MatrixUtils.frobeniusNorm(matrix16);
        boolean boolean21 = com.operations.Matrix.MatrixUtils.isSquare(matrix16);
        boolean boolean23 = com.operations.Matrix.MatrixUtils.compare(matrix7, matrix16, (double) 100L);
        double[][] doubleArray24 = matrix7.getData();
        com.operations.Matrix.Matrix matrix26 = com.operations.Matrix.MatrixOperations.scalarMultiply(matrix7, (double) 100);
        java.lang.Class<?> wildcardClass27 = matrix26.getClass();
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertArrayEquals(doubleArray2, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertArrayEquals(doubleArray5, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 2 + "'", int8 == 2);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 2 + "'", int9 == 2);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 2 + "'", int10 == 2);
        org.junit.Assert.assertNotNull(matrix16);
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 35.0d + "'", double19 == 35.0d);
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 350.0d + "'", double20 == 350.0d);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertNotNull(matrix26);
        org.junit.Assert.assertNotNull(wildcardClass27);
    }

    @Test
    public void test1803() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1803");
        com.operations.Matrix.Matrix matrix1 = com.operations.Matrix.MatrixTransformations.rotate2D((double) (-1L));
        com.operations.Matrix.Matrix matrix3 = com.operations.Matrix.MatrixTransformations.rotate2D((double) (short) 100);
        double[] doubleArray6 = new double[] { 137.90576492663388d, (byte) -1 };
        double[] doubleArray7 = com.operations.Matrix.MatrixSolver.solveGaussian(matrix3, doubleArray6);
        double[] doubleArray8 = com.operations.Matrix.MatrixSolver.solveGaussian(matrix1, doubleArray6);
        double[][] doubleArray9 = matrix1.getData();
        com.operations.Matrix.Matrix matrix12 = com.operations.Matrix.MatrixTransformations.project2D((double) ' ', 0.0d);
        double[] doubleArray15 = new double[] { 10, 'a' };
        double[] doubleArray18 = new double[] { 10, 'a' };
        double[][] doubleArray19 = new double[][] { doubleArray15, doubleArray18 };
        com.operations.Matrix.Matrix matrix20 = new com.operations.Matrix.Matrix(doubleArray19);
        int int21 = matrix20.getCols();
        boolean boolean22 = com.operations.Matrix.MatrixUtils.isSquare(matrix20);
        com.operations.Matrix.Matrix matrix23 = com.operations.Matrix.MatrixOperations.transpose(matrix20);
        int int24 = matrix23.getRows();
        com.operations.Matrix.Matrix matrix27 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0L, (double) (byte) 10);
        double[] doubleArray30 = new double[] { 10, 'a' };
        double[] doubleArray33 = new double[] { 10, 'a' };
        double[][] doubleArray34 = new double[][] { doubleArray30, doubleArray33 };
        com.operations.Matrix.Matrix matrix35 = new com.operations.Matrix.Matrix(doubleArray34);
        int int36 = matrix35.getCols();
        int int37 = matrix35.getCols();
        int int38 = matrix35.getCols();
        com.operations.Matrix.Matrix[] matrixArray39 = com.operations.Matrix.MatrixDecompositions.luDecomposition(matrix35);
        com.operations.Matrix.Matrix matrix40 = com.operations.Matrix.MatrixOperations.multiply(matrix27, matrix35);
        com.operations.Matrix.Matrix matrix42 = com.operations.Matrix.MatrixTransformations.rotate2D((double) (short) 100);
        boolean boolean44 = com.operations.Matrix.MatrixUtils.compare(matrix35, matrix42, (double) (byte) 0);
        com.operations.Matrix.Matrix matrix45 = com.operations.Matrix.MatrixOperations.multiply(matrix23, matrix35);
        com.operations.Matrix.Matrix matrix46 = com.operations.Matrix.MatrixOperations.add(matrix12, matrix35);
        double[][] doubleArray47 = matrix46.getData();
        com.operations.Matrix.Matrix matrix48 = com.operations.Matrix.MatrixOperations.add(matrix1, matrix46);
        // The following exception was thrown during execution in test generation
        try {
            double double51 = matrix46.getValue(52, (int) (short) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(matrix1);
        org.junit.Assert.assertNotNull(matrix3);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertArrayEquals(doubleArray6, new double[] { 137.90576492663388d, (-1.0d) }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertArrayEquals(doubleArray7, new double[] { (-24.931892522286255d), (-135.63701830716116d) }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertArrayEquals(doubleArray8, new double[] { 137.90221361711127d, 1.4069397643877004d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertNotNull(matrix12);
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertArrayEquals(doubleArray15, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertArrayEquals(doubleArray18, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 2 + "'", int21 == 2);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertNotNull(matrix23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 2 + "'", int24 == 2);
        org.junit.Assert.assertNotNull(matrix27);
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertArrayEquals(doubleArray30, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertArrayEquals(doubleArray33, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 2 + "'", int36 == 2);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 2 + "'", int37 == 2);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 2 + "'", int38 == 2);
        org.junit.Assert.assertNotNull(matrixArray39);
        org.junit.Assert.assertNotNull(matrix40);
        org.junit.Assert.assertNotNull(matrix42);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(matrix45);
        org.junit.Assert.assertNotNull(matrix46);
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertNotNull(matrix48);
    }

    @Test
    public void test1804() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1804");
        com.operations.Matrix.Matrix matrix2 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0L, (double) (byte) 10);
        double[] doubleArray5 = new double[] { 10, 'a' };
        double[] doubleArray8 = new double[] { 10, 'a' };
        double[][] doubleArray9 = new double[][] { doubleArray5, doubleArray8 };
        com.operations.Matrix.Matrix matrix10 = new com.operations.Matrix.Matrix(doubleArray9);
        int int11 = matrix10.getCols();
        int int12 = matrix10.getCols();
        int int13 = matrix10.getCols();
        com.operations.Matrix.Matrix[] matrixArray14 = com.operations.Matrix.MatrixDecompositions.luDecomposition(matrix10);
        com.operations.Matrix.Matrix matrix15 = com.operations.Matrix.MatrixOperations.multiply(matrix2, matrix10);
        com.operations.Matrix.Matrix matrix17 = com.operations.Matrix.MatrixTransformations.rotate2D((double) (short) 100);
        boolean boolean19 = com.operations.Matrix.MatrixUtils.compare(matrix10, matrix17, (double) (byte) 0);
        com.operations.Matrix.Matrix matrix20 = com.operations.Matrix.MatrixOperations.transpose(matrix10);
        com.operations.Matrix.Matrix matrix23 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0L, (double) (byte) 10);
        double[] doubleArray26 = new double[] { 10, 'a' };
        double[] doubleArray29 = new double[] { 10, 'a' };
        double[][] doubleArray30 = new double[][] { doubleArray26, doubleArray29 };
        com.operations.Matrix.Matrix matrix31 = new com.operations.Matrix.Matrix(doubleArray30);
        int int32 = matrix31.getCols();
        int int33 = matrix31.getCols();
        int int34 = matrix31.getCols();
        com.operations.Matrix.Matrix[] matrixArray35 = com.operations.Matrix.MatrixDecompositions.luDecomposition(matrix31);
        com.operations.Matrix.Matrix matrix36 = com.operations.Matrix.MatrixOperations.multiply(matrix23, matrix31);
        com.operations.Matrix.Matrix matrix38 = com.operations.Matrix.MatrixTransformations.rotate2D((double) (short) 100);
        boolean boolean40 = com.operations.Matrix.MatrixUtils.compare(matrix31, matrix38, (double) (byte) 0);
        double[] doubleArray43 = new double[] { 10, 'a' };
        double[] doubleArray46 = new double[] { 10, 'a' };
        double[][] doubleArray47 = new double[][] { doubleArray43, doubleArray46 };
        com.operations.Matrix.Matrix matrix48 = new com.operations.Matrix.Matrix(doubleArray47);
        com.operations.Matrix.Matrix matrix49 = new com.operations.Matrix.Matrix(doubleArray47);
        com.operations.Matrix.Matrix matrix50 = new com.operations.Matrix.Matrix(doubleArray47);
        boolean boolean52 = com.operations.Matrix.MatrixUtils.compare(matrix31, matrix50, (double) (-1));
        com.operations.Matrix.Matrix matrix55 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0L, (double) (byte) 10);
        double[] doubleArray58 = new double[] { 10, 'a' };
        double[] doubleArray61 = new double[] { 10, 'a' };
        double[][] doubleArray62 = new double[][] { doubleArray58, doubleArray61 };
        com.operations.Matrix.Matrix matrix63 = new com.operations.Matrix.Matrix(doubleArray62);
        int int64 = matrix63.getCols();
        int int65 = matrix63.getCols();
        int int66 = matrix63.getCols();
        com.operations.Matrix.Matrix[] matrixArray67 = com.operations.Matrix.MatrixDecompositions.luDecomposition(matrix63);
        com.operations.Matrix.Matrix matrix68 = com.operations.Matrix.MatrixOperations.multiply(matrix55, matrix63);
        boolean boolean70 = com.operations.Matrix.MatrixUtils.compare(matrix50, matrix55, (double) 10L);
        boolean boolean72 = com.operations.Matrix.MatrixUtils.compare(matrix20, matrix50, (double) 100L);
        com.operations.Matrix.Matrix matrix75 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0L, (double) (byte) 10);
        double[] doubleArray78 = new double[] { 10, 'a' };
        double[] doubleArray81 = new double[] { 10, 'a' };
        double[][] doubleArray82 = new double[][] { doubleArray78, doubleArray81 };
        com.operations.Matrix.Matrix matrix83 = new com.operations.Matrix.Matrix(doubleArray82);
        int int84 = matrix83.getCols();
        int int85 = matrix83.getCols();
        int int86 = matrix83.getCols();
        com.operations.Matrix.Matrix[] matrixArray87 = com.operations.Matrix.MatrixDecompositions.luDecomposition(matrix83);
        com.operations.Matrix.Matrix matrix88 = com.operations.Matrix.MatrixOperations.multiply(matrix75, matrix83);
        int int89 = matrix83.getRows();
        int int90 = matrix83.getCols();
        com.operations.Matrix.Matrix matrix91 = com.operations.Matrix.MatrixOperations.subtract(matrix50, matrix83);
        com.operations.Matrix.Matrix matrix94 = com.operations.Matrix.MatrixTransformations.project2D(0.0d, (-0.1736481776669303d));
        com.operations.Matrix.Matrix matrix95 = com.operations.Matrix.MatrixOperations.subtract(matrix91, matrix94);
        com.operations.Matrix.Matrix matrix97 = com.operations.Matrix.MatrixOperations.scalarMultiply(matrix95, (double) (byte) 10);
        org.junit.Assert.assertNotNull(matrix2);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertArrayEquals(doubleArray5, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertArrayEquals(doubleArray8, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 2 + "'", int11 == 2);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 2 + "'", int12 == 2);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 2 + "'", int13 == 2);
        org.junit.Assert.assertNotNull(matrixArray14);
        org.junit.Assert.assertNotNull(matrix15);
        org.junit.Assert.assertNotNull(matrix17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(matrix20);
        org.junit.Assert.assertNotNull(matrix23);
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertArrayEquals(doubleArray26, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertArrayEquals(doubleArray29, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 2 + "'", int32 == 2);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 2 + "'", int33 == 2);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 2 + "'", int34 == 2);
        org.junit.Assert.assertNotNull(matrixArray35);
        org.junit.Assert.assertNotNull(matrix36);
        org.junit.Assert.assertNotNull(matrix38);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertArrayEquals(doubleArray43, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray46);
        org.junit.Assert.assertArrayEquals(doubleArray46, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(matrix55);
        org.junit.Assert.assertNotNull(doubleArray58);
        org.junit.Assert.assertArrayEquals(doubleArray58, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray61);
        org.junit.Assert.assertArrayEquals(doubleArray61, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray62);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 2 + "'", int64 == 2);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 2 + "'", int65 == 2);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 2 + "'", int66 == 2);
        org.junit.Assert.assertNotNull(matrixArray67);
        org.junit.Assert.assertNotNull(matrix68);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + true + "'", boolean72 == true);
        org.junit.Assert.assertNotNull(matrix75);
        org.junit.Assert.assertNotNull(doubleArray78);
        org.junit.Assert.assertArrayEquals(doubleArray78, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray81);
        org.junit.Assert.assertArrayEquals(doubleArray81, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray82);
        org.junit.Assert.assertTrue("'" + int84 + "' != '" + 2 + "'", int84 == 2);
        org.junit.Assert.assertTrue("'" + int85 + "' != '" + 2 + "'", int85 == 2);
        org.junit.Assert.assertTrue("'" + int86 + "' != '" + 2 + "'", int86 == 2);
        org.junit.Assert.assertNotNull(matrixArray87);
        org.junit.Assert.assertNotNull(matrix88);
        org.junit.Assert.assertTrue("'" + int89 + "' != '" + 2 + "'", int89 == 2);
        org.junit.Assert.assertTrue("'" + int90 + "' != '" + 2 + "'", int90 == 2);
        org.junit.Assert.assertNotNull(matrix91);
        org.junit.Assert.assertNotNull(matrix94);
        org.junit.Assert.assertNotNull(matrix95);
        org.junit.Assert.assertNotNull(matrix97);
    }

    @Test
    public void test1805() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1805");
        com.operations.Matrix.Matrix matrix5 = com.operations.Matrix.MatrixUtils.generateRandomMatrix((int) '4', 100, 2, (int) (byte) 10, 10L);
        com.operations.Matrix.Matrix matrix7 = com.operations.Matrix.MatrixOperations.scalarMultiply(matrix5, (-0.1736481776669303d));
        org.junit.Assert.assertNotNull(matrix5);
        org.junit.Assert.assertNotNull(matrix7);
    }

    @Test
    public void test1806() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1806");
        com.operations.Matrix.Matrix matrix2 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0L, (double) (byte) 10);
        int int3 = matrix2.getRows();
        com.operations.Matrix.Matrix matrix9 = com.operations.Matrix.MatrixUtils.generateRandomMatrix(100, (int) (byte) 1, (int) '#', (int) '#', 1L);
        boolean boolean11 = com.operations.Matrix.MatrixUtils.compare(matrix2, matrix9, (double) 1.0f);
        matrix9.print();
        com.operations.Matrix.Matrix matrix13 = com.operations.Matrix.MatrixOperations.transpose(matrix9);
        com.operations.Matrix.Matrix matrix14 = com.operations.Matrix.MatrixOperations.transpose(matrix9);
        double double15 = com.operations.Matrix.MatrixUtils.frobeniusNorm(matrix9);
        com.operations.Matrix.Matrix matrix21 = com.operations.Matrix.MatrixUtils.generateRandomMatrix(100, 1, (-1), (int) (byte) -1, (long) (short) 1);
        com.operations.Matrix.Matrix matrix23 = com.operations.Matrix.MatrixOperations.scalarMultiply(matrix21, (double) (byte) -1);
        com.operations.Matrix.Matrix matrix24 = com.operations.Matrix.MatrixOperations.subtract(matrix9, matrix23);
        double[] doubleArray27 = new double[] { 10, 'a' };
        double[] doubleArray30 = new double[] { 10, 'a' };
        double[][] doubleArray31 = new double[][] { doubleArray27, doubleArray30 };
        com.operations.Matrix.Matrix matrix32 = new com.operations.Matrix.Matrix(doubleArray31);
        int int33 = matrix32.getCols();
        int int34 = matrix32.getCols();
        boolean boolean35 = com.operations.Matrix.MatrixUtils.isSquare(matrix32);
        com.operations.Matrix.Matrix matrix36 = com.operations.Matrix.MatrixDecompositions.choleskyDecomposition(matrix32);
        com.operations.Matrix.Matrix matrix39 = com.operations.Matrix.MatrixTransformations.project2D(0.0d, (double) 0);
        com.operations.Matrix.Matrix matrix40 = com.operations.Matrix.MatrixOperations.subtract(matrix36, matrix39);
        double[] doubleArray43 = new double[] { 10, 'a' };
        double[] doubleArray46 = new double[] { 10, 'a' };
        double[][] doubleArray47 = new double[][] { doubleArray43, doubleArray46 };
        com.operations.Matrix.Matrix matrix48 = new com.operations.Matrix.Matrix(doubleArray47);
        com.operations.Matrix.Matrix matrix49 = new com.operations.Matrix.Matrix(doubleArray47);
        com.operations.Matrix.Matrix matrix51 = com.operations.Matrix.MatrixTransformations.rotate2D((double) (short) 100);
        double[] doubleArray54 = new double[] { 137.90576492663388d, (byte) -1 };
        double[] doubleArray55 = com.operations.Matrix.MatrixSolver.solveGaussian(matrix51, doubleArray54);
        com.operations.Matrix.Matrix matrix56 = com.operations.Matrix.MatrixOperations.add(matrix49, matrix51);
        com.operations.Matrix.Matrix matrix57 = com.operations.Matrix.MatrixOperations.transpose(matrix51);
        int int58 = matrix51.getCols();
        int int59 = matrix51.getRows();
        com.operations.Matrix.Matrix matrix60 = com.operations.Matrix.MatrixOperations.subtract(matrix40, matrix51);
        double[][] doubleArray61 = matrix40.getData();
        com.operations.Matrix.Matrix matrix62 = new com.operations.Matrix.Matrix(doubleArray61);
        int int63 = matrix62.getCols();
        // The following exception was thrown during execution in test generation
        try {
            com.operations.Matrix.Matrix matrix64 = com.operations.Matrix.MatrixOperations.subtract(matrix9, matrix62);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Matrices must have the same dimensions for subtraction.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(matrix2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 2 + "'", int3 == 2);
        org.junit.Assert.assertNotNull(matrix9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(matrix13);
        org.junit.Assert.assertNotNull(matrix14);
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 350.0d + "'", double15 == 350.0d);
        org.junit.Assert.assertNotNull(matrix21);
        org.junit.Assert.assertNotNull(matrix23);
        org.junit.Assert.assertNotNull(matrix24);
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertArrayEquals(doubleArray27, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertArrayEquals(doubleArray30, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 2 + "'", int33 == 2);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 2 + "'", int34 == 2);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(matrix36);
        org.junit.Assert.assertNotNull(matrix39);
        org.junit.Assert.assertNotNull(matrix40);
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertArrayEquals(doubleArray43, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray46);
        org.junit.Assert.assertArrayEquals(doubleArray46, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertNotNull(matrix51);
        org.junit.Assert.assertNotNull(doubleArray54);
        org.junit.Assert.assertArrayEquals(doubleArray54, new double[] { 137.90576492663388d, (-1.0d) }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertArrayEquals(doubleArray55, new double[] { (-24.931892522286255d), (-135.63701830716116d) }, 1.0E-15);
        org.junit.Assert.assertNotNull(matrix56);
        org.junit.Assert.assertNotNull(matrix57);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 2 + "'", int58 == 2);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 2 + "'", int59 == 2);
        org.junit.Assert.assertNotNull(matrix60);
        org.junit.Assert.assertNotNull(doubleArray61);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 2 + "'", int63 == 2);
    }

    @Test
    public void test1807() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1807");
        com.operations.Matrix.Matrix matrix2 = com.operations.Matrix.MatrixTransformations.scale2D((double) 'a', 391.8840992892044d);
        org.junit.Assert.assertNotNull(matrix2);
    }

    @Test
    public void test1808() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1808");
        double[] doubleArray2 = new double[] { 10, 'a' };
        double[] doubleArray5 = new double[] { 10, 'a' };
        double[][] doubleArray6 = new double[][] { doubleArray2, doubleArray5 };
        com.operations.Matrix.Matrix matrix7 = new com.operations.Matrix.Matrix(doubleArray6);
        com.operations.Matrix.Matrix matrix8 = new com.operations.Matrix.Matrix(doubleArray6);
        com.operations.Matrix.Matrix matrix10 = com.operations.Matrix.MatrixTransformations.rotate2D((double) (short) 100);
        double[] doubleArray13 = new double[] { 137.90576492663388d, (byte) -1 };
        double[] doubleArray14 = com.operations.Matrix.MatrixSolver.solveGaussian(matrix10, doubleArray13);
        com.operations.Matrix.Matrix matrix15 = com.operations.Matrix.MatrixOperations.add(matrix8, matrix10);
        com.operations.Matrix.Matrix matrix16 = com.operations.Matrix.MatrixOperations.transpose(matrix10);
        int int17 = matrix10.getCols();
        int int18 = matrix10.getRows();
        double[] doubleArray21 = new double[] { 10, 'a' };
        double[] doubleArray24 = new double[] { 10, 'a' };
        double[][] doubleArray25 = new double[][] { doubleArray21, doubleArray24 };
        com.operations.Matrix.Matrix matrix26 = new com.operations.Matrix.Matrix(doubleArray25);
        int int27 = matrix26.getCols();
        int int28 = matrix26.getCols();
        matrix26.print();
        double[] doubleArray32 = new double[] { 10, 'a' };
        double[] doubleArray35 = new double[] { 10, 'a' };
        double[][] doubleArray36 = new double[][] { doubleArray32, doubleArray35 };
        com.operations.Matrix.Matrix matrix37 = new com.operations.Matrix.Matrix(doubleArray36);
        boolean boolean39 = com.operations.Matrix.MatrixUtils.compare(matrix26, matrix37, (double) (-1));
        com.operations.Matrix.Matrix matrix40 = com.operations.Matrix.MatrixOperations.multiply(matrix10, matrix26);
        double double41 = com.operations.Matrix.MatrixUtils.frobeniusNorm(matrix40);
        boolean boolean42 = com.operations.Matrix.MatrixUtils.isSymmetric(matrix40);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertArrayEquals(doubleArray2, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertArrayEquals(doubleArray5, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertNotNull(matrix10);
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertArrayEquals(doubleArray13, new double[] { 137.90576492663388d, (-1.0d) }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertArrayEquals(doubleArray14, new double[] { (-24.931892522286255d), (-135.63701830716116d) }, 1.0E-15);
        org.junit.Assert.assertNotNull(matrix15);
        org.junit.Assert.assertNotNull(matrix16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 2 + "'", int17 == 2);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 2 + "'", int18 == 2);
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertArrayEquals(doubleArray21, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertArrayEquals(doubleArray24, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 2 + "'", int27 == 2);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 2 + "'", int28 == 2);
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertArrayEquals(doubleArray32, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertArrayEquals(doubleArray35, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(matrix40);
        org.junit.Assert.assertTrue("'" + double41 + "' != '" + 137.90576492663385d + "'", double41 == 137.90576492663385d);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
    }

    @Test
    public void test1809() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1809");
        double[] doubleArray2 = new double[] { 10, 'a' };
        double[] doubleArray5 = new double[] { 10, 'a' };
        double[][] doubleArray6 = new double[][] { doubleArray2, doubleArray5 };
        com.operations.Matrix.Matrix matrix7 = new com.operations.Matrix.Matrix(doubleArray6);
        com.operations.Matrix.Matrix matrix8 = com.operations.Matrix.MatrixOperations.transpose(matrix7);
        com.operations.Matrix.Matrix matrix11 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0L, (double) (byte) 10);
        int int12 = matrix11.getRows();
        com.operations.Matrix.Matrix matrix18 = com.operations.Matrix.MatrixUtils.generateRandomMatrix(100, (int) (byte) 1, (int) '#', (int) '#', 1L);
        boolean boolean20 = com.operations.Matrix.MatrixUtils.compare(matrix11, matrix18, (double) 1.0f);
        com.operations.Matrix.Matrix matrix22 = com.operations.Matrix.MatrixOperations.scalarMultiply(matrix11, (double) 1L);
        matrix11.print();
        com.operations.Matrix.Matrix matrix24 = com.operations.Matrix.MatrixOperations.multiply(matrix8, matrix11);
        com.operations.Matrix.Matrix matrix26 = com.operations.Matrix.MatrixTransformations.rotate2D((double) '4');
        int int27 = matrix26.getRows();
        com.operations.Matrix.Matrix matrix28 = com.operations.Matrix.MatrixOperations.add(matrix24, matrix26);
        com.operations.Matrix.Matrix matrix29 = com.operations.Matrix.MatrixOperations.transpose(matrix26);
        // The following exception was thrown during execution in test generation
        try {
            double double32 = matrix29.getValue((int) (short) 0, 100);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertArrayEquals(doubleArray2, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertArrayEquals(doubleArray5, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertNotNull(matrix8);
        org.junit.Assert.assertNotNull(matrix11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 2 + "'", int12 == 2);
        org.junit.Assert.assertNotNull(matrix18);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(matrix22);
        org.junit.Assert.assertNotNull(matrix24);
        org.junit.Assert.assertNotNull(matrix26);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 2 + "'", int27 == 2);
        org.junit.Assert.assertNotNull(matrix28);
        org.junit.Assert.assertNotNull(matrix29);
    }

    @Test
    public void test1810() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1810");
        com.operations.Matrix.Matrix matrix2 = com.operations.Matrix.MatrixTransformations.scale2D((double) (byte) 10, (double) 10);
        double[] doubleArray5 = new double[] { 10, 'a' };
        double[] doubleArray8 = new double[] { 10, 'a' };
        double[][] doubleArray9 = new double[][] { doubleArray5, doubleArray8 };
        com.operations.Matrix.Matrix matrix10 = new com.operations.Matrix.Matrix(doubleArray9);
        com.operations.Matrix.Matrix matrix11 = new com.operations.Matrix.Matrix(doubleArray9);
        boolean boolean12 = com.operations.Matrix.MatrixUtils.isSquare(matrix11);
        double[] doubleArray15 = new double[] { 10, 'a' };
        double[] doubleArray18 = new double[] { 10, 'a' };
        double[][] doubleArray19 = new double[][] { doubleArray15, doubleArray18 };
        com.operations.Matrix.Matrix matrix20 = new com.operations.Matrix.Matrix(doubleArray19);
        int int21 = matrix20.getCols();
        int int22 = matrix20.getCols();
        matrix20.print();
        double[] doubleArray26 = new double[] { 10, 'a' };
        double[] doubleArray29 = new double[] { 10, 'a' };
        double[][] doubleArray30 = new double[][] { doubleArray26, doubleArray29 };
        com.operations.Matrix.Matrix matrix31 = new com.operations.Matrix.Matrix(doubleArray30);
        boolean boolean33 = com.operations.Matrix.MatrixUtils.compare(matrix20, matrix31, (double) (-1));
        com.operations.Matrix.Matrix matrix34 = com.operations.Matrix.MatrixOperations.subtract(matrix11, matrix31);
        com.operations.Matrix.Matrix[] matrixArray35 = com.operations.Matrix.MatrixDecompositions.luDecomposition(matrix34);
        double[][] doubleArray36 = matrix34.getData();
        com.operations.Matrix.Matrix matrix37 = new com.operations.Matrix.Matrix(doubleArray36);
        com.operations.Matrix.Matrix matrix38 = com.operations.Matrix.MatrixOperations.multiply(matrix2, matrix37);
        boolean boolean39 = com.operations.Matrix.MatrixUtils.isSymmetric(matrix2);
        com.operations.Matrix.Matrix matrix41 = com.operations.Matrix.MatrixTransformations.rotate2D(350.0d);
        com.operations.Matrix.Matrix matrix42 = com.operations.Matrix.MatrixDecompositions.choleskyDecomposition(matrix41);
        int int43 = matrix41.getRows();
        com.operations.Matrix.Matrix matrix44 = com.operations.Matrix.MatrixOperations.subtract(matrix2, matrix41);
        double[] doubleArray47 = new double[] { 10, 'a' };
        double[] doubleArray50 = new double[] { 10, 'a' };
        double[][] doubleArray51 = new double[][] { doubleArray47, doubleArray50 };
        com.operations.Matrix.Matrix matrix52 = new com.operations.Matrix.Matrix(doubleArray51);
        int int53 = matrix52.getCols();
        int int54 = matrix52.getCols();
        boolean boolean55 = com.operations.Matrix.MatrixUtils.isSquare(matrix52);
        com.operations.Matrix.Matrix matrix56 = com.operations.Matrix.MatrixDecompositions.choleskyDecomposition(matrix52);
        com.operations.Matrix.Matrix matrix59 = com.operations.Matrix.MatrixTransformations.project2D(0.0d, (double) 0);
        com.operations.Matrix.Matrix matrix60 = com.operations.Matrix.MatrixOperations.subtract(matrix56, matrix59);
        com.operations.Matrix.Matrix matrix61 = com.operations.Matrix.MatrixOperations.transpose(matrix59);
        com.operations.Matrix.Matrix matrix62 = com.operations.Matrix.MatrixOperations.subtract(matrix2, matrix61);
        boolean boolean63 = com.operations.Matrix.MatrixUtils.isSymmetric(matrix62);
        org.junit.Assert.assertNotNull(matrix2);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertArrayEquals(doubleArray5, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertArrayEquals(doubleArray8, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertArrayEquals(doubleArray15, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertArrayEquals(doubleArray18, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 2 + "'", int21 == 2);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 2 + "'", int22 == 2);
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertArrayEquals(doubleArray26, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertArrayEquals(doubleArray29, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(matrix34);
        org.junit.Assert.assertNotNull(matrixArray35);
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertNotNull(matrix38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertNotNull(matrix41);
        org.junit.Assert.assertNotNull(matrix42);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 2 + "'", int43 == 2);
        org.junit.Assert.assertNotNull(matrix44);
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertArrayEquals(doubleArray47, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertArrayEquals(doubleArray50, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 2 + "'", int53 == 2);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 2 + "'", int54 == 2);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + true + "'", boolean55 == true);
        org.junit.Assert.assertNotNull(matrix56);
        org.junit.Assert.assertNotNull(matrix59);
        org.junit.Assert.assertNotNull(matrix60);
        org.junit.Assert.assertNotNull(matrix61);
        org.junit.Assert.assertNotNull(matrix62);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + true + "'", boolean63 == true);
    }

    @Test
    public void test1811() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1811");
        com.operations.Matrix.Matrix matrix2 = new com.operations.Matrix.Matrix((int) (byte) 0, (int) (short) 1);
        double[] doubleArray5 = new double[] { 10, 'a' };
        double[] doubleArray8 = new double[] { 10, 'a' };
        double[][] doubleArray9 = new double[][] { doubleArray5, doubleArray8 };
        com.operations.Matrix.Matrix matrix10 = new com.operations.Matrix.Matrix(doubleArray9);
        com.operations.Matrix.Matrix matrix11 = new com.operations.Matrix.Matrix(doubleArray9);
        com.operations.Matrix.Matrix matrix13 = com.operations.Matrix.MatrixTransformations.rotate2D((double) (short) 100);
        double[] doubleArray16 = new double[] { 137.90576492663388d, (byte) -1 };
        double[] doubleArray17 = com.operations.Matrix.MatrixSolver.solveGaussian(matrix13, doubleArray16);
        com.operations.Matrix.Matrix matrix18 = com.operations.Matrix.MatrixOperations.add(matrix11, matrix13);
        com.operations.Matrix.Matrix matrix19 = com.operations.Matrix.MatrixOperations.transpose(matrix13);
        int int20 = matrix13.getCols();
        int int21 = matrix13.getRows();
        double[] doubleArray24 = new double[] { 10, 'a' };
        double[] doubleArray27 = new double[] { 10, 'a' };
        double[][] doubleArray28 = new double[][] { doubleArray24, doubleArray27 };
        com.operations.Matrix.Matrix matrix29 = new com.operations.Matrix.Matrix(doubleArray28);
        int int30 = matrix29.getCols();
        int int31 = matrix29.getCols();
        matrix29.print();
        double[] doubleArray35 = new double[] { 10, 'a' };
        double[] doubleArray38 = new double[] { 10, 'a' };
        double[][] doubleArray39 = new double[][] { doubleArray35, doubleArray38 };
        com.operations.Matrix.Matrix matrix40 = new com.operations.Matrix.Matrix(doubleArray39);
        boolean boolean42 = com.operations.Matrix.MatrixUtils.compare(matrix29, matrix40, (double) (-1));
        com.operations.Matrix.Matrix matrix43 = com.operations.Matrix.MatrixOperations.multiply(matrix13, matrix29);
        double double44 = com.operations.Matrix.MatrixUtils.frobeniusNorm(matrix29);
        double[] doubleArray47 = new double[] { 10, 'a' };
        double[] doubleArray50 = new double[] { 10, 'a' };
        double[][] doubleArray51 = new double[][] { doubleArray47, doubleArray50 };
        com.operations.Matrix.Matrix matrix52 = new com.operations.Matrix.Matrix(doubleArray51);
        com.operations.Matrix.Matrix matrix53 = new com.operations.Matrix.Matrix(doubleArray51);
        com.operations.Matrix.Matrix[] matrixArray54 = com.operations.Matrix.MatrixDecompositions.luDecomposition(matrix53);
        com.operations.Matrix.Matrix matrix57 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0, (double) 100L);
        com.operations.Matrix.Matrix matrix58 = com.operations.Matrix.MatrixOperations.subtract(matrix53, matrix57);
        com.operations.Matrix.Matrix matrix60 = com.operations.Matrix.MatrixTransformations.rotate2D((double) (short) 100);
        double[] doubleArray63 = new double[] { 137.90576492663388d, (byte) -1 };
        double[] doubleArray64 = com.operations.Matrix.MatrixSolver.solveGaussian(matrix60, doubleArray63);
        com.operations.Matrix.Matrix matrix67 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0L, (double) (byte) 10);
        double[] doubleArray70 = new double[] { 10, 'a' };
        double[] doubleArray73 = new double[] { 10, 'a' };
        double[][] doubleArray74 = new double[][] { doubleArray70, doubleArray73 };
        com.operations.Matrix.Matrix matrix75 = new com.operations.Matrix.Matrix(doubleArray74);
        int int76 = matrix75.getCols();
        int int77 = matrix75.getCols();
        int int78 = matrix75.getCols();
        com.operations.Matrix.Matrix[] matrixArray79 = com.operations.Matrix.MatrixDecompositions.luDecomposition(matrix75);
        com.operations.Matrix.Matrix matrix80 = com.operations.Matrix.MatrixOperations.multiply(matrix67, matrix75);
        boolean boolean82 = com.operations.Matrix.MatrixUtils.compare(matrix60, matrix67, (double) (-1L));
        com.operations.Matrix.Matrix matrix83 = com.operations.Matrix.MatrixOperations.add(matrix53, matrix60);
        com.operations.Matrix.Matrix matrix84 = com.operations.Matrix.MatrixOperations.subtract(matrix29, matrix53);
        // The following exception was thrown during execution in test generation
        try {
            com.operations.Matrix.Matrix matrix85 = com.operations.Matrix.MatrixOperations.multiply(matrix2, matrix84);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Matrix A's columns must match Matrix B's rows for multiplication.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertArrayEquals(doubleArray5, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertArrayEquals(doubleArray8, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertNotNull(matrix13);
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertArrayEquals(doubleArray16, new double[] { 137.90576492663388d, (-1.0d) }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertArrayEquals(doubleArray17, new double[] { (-24.931892522286255d), (-135.63701830716116d) }, 1.0E-15);
        org.junit.Assert.assertNotNull(matrix18);
        org.junit.Assert.assertNotNull(matrix19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 2 + "'", int20 == 2);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 2 + "'", int21 == 2);
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertArrayEquals(doubleArray24, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertArrayEquals(doubleArray27, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 2 + "'", int30 == 2);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 2 + "'", int31 == 2);
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertArrayEquals(doubleArray35, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertArrayEquals(doubleArray38, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(matrix43);
        org.junit.Assert.assertTrue("'" + double44 + "' != '" + 137.90576492663388d + "'", double44 == 137.90576492663388d);
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertArrayEquals(doubleArray47, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertArrayEquals(doubleArray50, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertNotNull(matrixArray54);
        org.junit.Assert.assertNotNull(matrix57);
        org.junit.Assert.assertNotNull(matrix58);
        org.junit.Assert.assertNotNull(matrix60);
        org.junit.Assert.assertNotNull(doubleArray63);
        org.junit.Assert.assertArrayEquals(doubleArray63, new double[] { 137.90576492663388d, (-1.0d) }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray64);
        org.junit.Assert.assertArrayEquals(doubleArray64, new double[] { (-24.931892522286255d), (-135.63701830716116d) }, 1.0E-15);
        org.junit.Assert.assertNotNull(matrix67);
        org.junit.Assert.assertNotNull(doubleArray70);
        org.junit.Assert.assertArrayEquals(doubleArray70, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray73);
        org.junit.Assert.assertArrayEquals(doubleArray73, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray74);
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 2 + "'", int76 == 2);
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + 2 + "'", int77 == 2);
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + 2 + "'", int78 == 2);
        org.junit.Assert.assertNotNull(matrixArray79);
        org.junit.Assert.assertNotNull(matrix80);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
        org.junit.Assert.assertNotNull(matrix83);
        org.junit.Assert.assertNotNull(matrix84);
    }

    @Test
    public void test1812() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1812");
        com.operations.Matrix.Matrix matrix1 = com.operations.Matrix.MatrixTransformations.rotate2D(100.0d);
        int int2 = matrix1.getCols();
        matrix1.print();
        com.operations.Matrix.Matrix matrix5 = com.operations.Matrix.MatrixOperations.scalarMultiply(matrix1, (double) (byte) 1);
        com.operations.Matrix.Matrix matrix8 = com.operations.Matrix.MatrixTransformations.project2D((double) ' ', 0.0d);
        double[] doubleArray11 = new double[] { 10, 'a' };
        double[] doubleArray14 = new double[] { 10, 'a' };
        double[][] doubleArray15 = new double[][] { doubleArray11, doubleArray14 };
        com.operations.Matrix.Matrix matrix16 = new com.operations.Matrix.Matrix(doubleArray15);
        int int17 = matrix16.getCols();
        boolean boolean18 = com.operations.Matrix.MatrixUtils.isSquare(matrix16);
        com.operations.Matrix.Matrix matrix19 = com.operations.Matrix.MatrixOperations.transpose(matrix16);
        int int20 = matrix19.getRows();
        com.operations.Matrix.Matrix matrix23 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0L, (double) (byte) 10);
        double[] doubleArray26 = new double[] { 10, 'a' };
        double[] doubleArray29 = new double[] { 10, 'a' };
        double[][] doubleArray30 = new double[][] { doubleArray26, doubleArray29 };
        com.operations.Matrix.Matrix matrix31 = new com.operations.Matrix.Matrix(doubleArray30);
        int int32 = matrix31.getCols();
        int int33 = matrix31.getCols();
        int int34 = matrix31.getCols();
        com.operations.Matrix.Matrix[] matrixArray35 = com.operations.Matrix.MatrixDecompositions.luDecomposition(matrix31);
        com.operations.Matrix.Matrix matrix36 = com.operations.Matrix.MatrixOperations.multiply(matrix23, matrix31);
        com.operations.Matrix.Matrix matrix38 = com.operations.Matrix.MatrixTransformations.rotate2D((double) (short) 100);
        boolean boolean40 = com.operations.Matrix.MatrixUtils.compare(matrix31, matrix38, (double) (byte) 0);
        com.operations.Matrix.Matrix matrix41 = com.operations.Matrix.MatrixOperations.multiply(matrix19, matrix31);
        com.operations.Matrix.Matrix matrix42 = com.operations.Matrix.MatrixOperations.add(matrix8, matrix31);
        matrix31.print();
        boolean boolean44 = com.operations.Matrix.MatrixUtils.isSquare(matrix31);
        boolean boolean46 = com.operations.Matrix.MatrixUtils.compare(matrix1, matrix31, 1.414213562373095d);
        com.operations.Matrix.Matrix matrix48 = com.operations.Matrix.MatrixTransformations.rotate2D(100.0d);
        int int49 = matrix48.getCols();
        com.operations.Matrix.Matrix matrix50 = com.operations.Matrix.MatrixOperations.subtract(matrix31, matrix48);
        int int51 = matrix50.getCols();
        org.junit.Assert.assertNotNull(matrix1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 2 + "'", int2 == 2);
        org.junit.Assert.assertNotNull(matrix5);
        org.junit.Assert.assertNotNull(matrix8);
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertArrayEquals(doubleArray11, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertArrayEquals(doubleArray14, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 2 + "'", int17 == 2);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(matrix19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 2 + "'", int20 == 2);
        org.junit.Assert.assertNotNull(matrix23);
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertArrayEquals(doubleArray26, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertArrayEquals(doubleArray29, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 2 + "'", int32 == 2);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 2 + "'", int33 == 2);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 2 + "'", int34 == 2);
        org.junit.Assert.assertNotNull(matrixArray35);
        org.junit.Assert.assertNotNull(matrix36);
        org.junit.Assert.assertNotNull(matrix38);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(matrix41);
        org.junit.Assert.assertNotNull(matrix42);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(matrix48);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 2 + "'", int49 == 2);
        org.junit.Assert.assertNotNull(matrix50);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 2 + "'", int51 == 2);
    }

    @Test
    public void test1813() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1813");
        com.operations.Matrix.Matrix matrix2 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0L, (double) (byte) 10);
        double[] doubleArray5 = new double[] { 10, 'a' };
        double[] doubleArray8 = new double[] { 10, 'a' };
        double[][] doubleArray9 = new double[][] { doubleArray5, doubleArray8 };
        com.operations.Matrix.Matrix matrix10 = new com.operations.Matrix.Matrix(doubleArray9);
        int int11 = matrix10.getCols();
        int int12 = matrix10.getCols();
        int int13 = matrix10.getCols();
        com.operations.Matrix.Matrix[] matrixArray14 = com.operations.Matrix.MatrixDecompositions.luDecomposition(matrix10);
        com.operations.Matrix.Matrix matrix15 = com.operations.Matrix.MatrixOperations.multiply(matrix2, matrix10);
        com.operations.Matrix.Matrix matrix17 = com.operations.Matrix.MatrixTransformations.rotate2D((double) (short) 100);
        boolean boolean19 = com.operations.Matrix.MatrixUtils.compare(matrix10, matrix17, (double) (byte) 0);
        com.operations.Matrix.Matrix[] matrixArray20 = com.operations.Matrix.MatrixDecompositions.luDecomposition(matrix10);
        com.operations.Matrix.Matrix matrix21 = com.operations.Matrix.MatrixOperations.transpose(matrix10);
        int int22 = matrix21.getCols();
        double[][] doubleArray23 = matrix21.getData();
        double double24 = com.operations.Matrix.MatrixUtils.frobeniusNorm(matrix21);
        com.operations.Matrix.Matrix matrix25 = null;
        // The following exception was thrown during execution in test generation
        try {
            com.operations.Matrix.Matrix matrix26 = com.operations.Matrix.MatrixOperations.subtract(matrix21, matrix25);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot invoke \"com.operations.Matrix.Matrix.getRows()\" because \"b\" is null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(matrix2);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertArrayEquals(doubleArray5, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertArrayEquals(doubleArray8, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 2 + "'", int11 == 2);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 2 + "'", int12 == 2);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 2 + "'", int13 == 2);
        org.junit.Assert.assertNotNull(matrixArray14);
        org.junit.Assert.assertNotNull(matrix15);
        org.junit.Assert.assertNotNull(matrix17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(matrixArray20);
        org.junit.Assert.assertNotNull(matrix21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 2 + "'", int22 == 2);
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertTrue("'" + double24 + "' != '" + 137.90576492663388d + "'", double24 == 137.90576492663388d);
    }

    @Test
    public void test1814() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1814");
        double[] doubleArray2 = new double[] { 10, 'a' };
        double[] doubleArray5 = new double[] { 10, 'a' };
        double[][] doubleArray6 = new double[][] { doubleArray2, doubleArray5 };
        com.operations.Matrix.Matrix matrix7 = new com.operations.Matrix.Matrix(doubleArray6);
        com.operations.Matrix.Matrix matrix8 = new com.operations.Matrix.Matrix(doubleArray6);
        boolean boolean9 = com.operations.Matrix.MatrixUtils.isSquare(matrix8);
        double[] doubleArray12 = new double[] { 10, 'a' };
        double[] doubleArray15 = new double[] { 10, 'a' };
        double[][] doubleArray16 = new double[][] { doubleArray12, doubleArray15 };
        com.operations.Matrix.Matrix matrix17 = new com.operations.Matrix.Matrix(doubleArray16);
        int int18 = matrix17.getCols();
        int int19 = matrix17.getCols();
        matrix17.print();
        double[] doubleArray23 = new double[] { 10, 'a' };
        double[] doubleArray26 = new double[] { 10, 'a' };
        double[][] doubleArray27 = new double[][] { doubleArray23, doubleArray26 };
        com.operations.Matrix.Matrix matrix28 = new com.operations.Matrix.Matrix(doubleArray27);
        boolean boolean30 = com.operations.Matrix.MatrixUtils.compare(matrix17, matrix28, (double) (-1));
        com.operations.Matrix.Matrix matrix31 = com.operations.Matrix.MatrixOperations.subtract(matrix8, matrix28);
        com.operations.Matrix.Matrix[] matrixArray32 = com.operations.Matrix.MatrixDecompositions.luDecomposition(matrix31);
        double[][] doubleArray33 = matrix31.getData();
        double double34 = com.operations.Matrix.MatrixUtils.frobeniusNorm(matrix31);
        double[] doubleArray37 = new double[] { 10, 'a' };
        double[] doubleArray40 = new double[] { 10, 'a' };
        double[][] doubleArray41 = new double[][] { doubleArray37, doubleArray40 };
        com.operations.Matrix.Matrix matrix42 = new com.operations.Matrix.Matrix(doubleArray41);
        int int43 = matrix42.getCols();
        int int44 = matrix42.getCols();
        int int45 = matrix42.getCols();
        com.operations.Matrix.Matrix matrix51 = com.operations.Matrix.MatrixUtils.generateRandomMatrix(100, (int) (byte) 1, (int) '#', (int) '#', 1L);
        double double54 = matrix51.getValue((int) '4', 0);
        double double55 = com.operations.Matrix.MatrixUtils.frobeniusNorm(matrix51);
        boolean boolean56 = com.operations.Matrix.MatrixUtils.isSquare(matrix51);
        boolean boolean58 = com.operations.Matrix.MatrixUtils.compare(matrix42, matrix51, (double) 100L);
        int int59 = matrix42.getCols();
        com.operations.Matrix.Matrix matrix60 = com.operations.Matrix.MatrixOperations.add(matrix31, matrix42);
        com.operations.Matrix.Matrix matrix61 = com.operations.Matrix.MatrixOperations.transpose(matrix42);
        int int62 = matrix61.getRows();
        com.operations.Matrix.Matrix matrix65 = com.operations.Matrix.MatrixTransformations.scale2D((double) 10L, 35.0d);
        matrix65.print();
        boolean boolean67 = com.operations.Matrix.MatrixUtils.isSquare(matrix65);
        com.operations.Matrix.Matrix matrix69 = com.operations.Matrix.MatrixTransformations.rotate2D((-1.0d));
        com.operations.Matrix.Matrix matrix71 = com.operations.Matrix.MatrixTransformations.rotate2D((double) (-1L));
        com.operations.Matrix.Matrix matrix73 = com.operations.Matrix.MatrixTransformations.rotate2D((double) (short) 100);
        double[] doubleArray76 = new double[] { 137.90576492663388d, (byte) -1 };
        double[] doubleArray77 = com.operations.Matrix.MatrixSolver.solveGaussian(matrix73, doubleArray76);
        double[] doubleArray78 = com.operations.Matrix.MatrixSolver.solveGaussian(matrix71, doubleArray76);
        double[] doubleArray79 = com.operations.Matrix.MatrixSolver.solveGaussian(matrix69, doubleArray76);
        double[] doubleArray80 = com.operations.Matrix.MatrixSolver.solveGaussian(matrix65, doubleArray76);
        // The following exception was thrown during execution in test generation
        try {
            double[] doubleArray81 = com.operations.Matrix.MatrixSolver.solveGaussian(matrix61, doubleArray80);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Matrix is singular or nearly singular.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertArrayEquals(doubleArray2, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertArrayEquals(doubleArray5, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertArrayEquals(doubleArray12, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertArrayEquals(doubleArray15, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 2 + "'", int18 == 2);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 2 + "'", int19 == 2);
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertArrayEquals(doubleArray23, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertArrayEquals(doubleArray26, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(matrix31);
        org.junit.Assert.assertNotNull(matrixArray32);
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertTrue("'" + double34 + "' != '" + 0.0d + "'", double34 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertArrayEquals(doubleArray37, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertArrayEquals(doubleArray40, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 2 + "'", int43 == 2);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 2 + "'", int44 == 2);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 2 + "'", int45 == 2);
        org.junit.Assert.assertNotNull(matrix51);
        org.junit.Assert.assertTrue("'" + double54 + "' != '" + 35.0d + "'", double54 == 35.0d);
        org.junit.Assert.assertTrue("'" + double55 + "' != '" + 350.0d + "'", double55 == 350.0d);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 2 + "'", int59 == 2);
        org.junit.Assert.assertNotNull(matrix60);
        org.junit.Assert.assertNotNull(matrix61);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 2 + "'", int62 == 2);
        org.junit.Assert.assertNotNull(matrix65);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + true + "'", boolean67 == true);
        org.junit.Assert.assertNotNull(matrix69);
        org.junit.Assert.assertNotNull(matrix71);
        org.junit.Assert.assertNotNull(matrix73);
        org.junit.Assert.assertNotNull(doubleArray76);
        org.junit.Assert.assertArrayEquals(doubleArray76, new double[] { 137.90576492663388d, (-1.0d) }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray77);
        org.junit.Assert.assertArrayEquals(doubleArray77, new double[] { (-24.931892522286255d), (-135.63701830716116d) }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray78);
        org.junit.Assert.assertArrayEquals(doubleArray78, new double[] { 137.90221361711127d, 1.4069397643877004d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray79);
        org.junit.Assert.assertArrayEquals(doubleArray79, new double[] { 137.90221361711127d, 1.4069397643877004d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray80);
        org.junit.Assert.assertArrayEquals(doubleArray80, new double[] { 13.790576492663387d, (-0.02857142857142857d) }, 1.0E-15);
    }

    @Test
    public void test1815() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1815");
        com.operations.Matrix.Matrix matrix2 = com.operations.Matrix.MatrixTransformations.project2D(137.90576492663388d, 0.0d);
        double[][] doubleArray3 = matrix2.getData();
        com.operations.Matrix.Matrix matrix6 = com.operations.Matrix.MatrixTransformations.scale2D((double) (-1), (double) (short) 0);
        com.operations.Matrix.Matrix matrix7 = com.operations.Matrix.MatrixOperations.add(matrix2, matrix6);
        boolean boolean8 = com.operations.Matrix.MatrixUtils.isSymmetric(matrix7);
        org.junit.Assert.assertNotNull(matrix2);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertNotNull(matrix6);
        org.junit.Assert.assertNotNull(matrix7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
    }

    @Test
    public void test1816() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1816");
        com.operations.Matrix.Matrix matrix5 = com.operations.Matrix.MatrixUtils.generateRandomMatrix((int) (short) 1, (int) '#', (int) '4', 35, (long) (short) 10);
        com.operations.Matrix.Matrix matrix7 = com.operations.Matrix.MatrixTransformations.rotate2D(100.0d);
        int int8 = matrix7.getCols();
        com.operations.Matrix.Matrix matrix10 = com.operations.Matrix.MatrixOperations.scalarMultiply(matrix7, (double) ' ');
        com.operations.Matrix.Matrix matrix13 = com.operations.Matrix.MatrixTransformations.scale2D((double) 100.0f, (double) (byte) 1);
        com.operations.Matrix.Matrix matrix16 = com.operations.Matrix.MatrixTransformations.scale2D((double) 1.0f, (double) 1);
        com.operations.Matrix.Matrix matrix18 = com.operations.Matrix.MatrixTransformations.rotate2D((double) 1.0f);
        com.operations.Matrix.Matrix matrix21 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0L, (double) (byte) 10);
        int int22 = matrix21.getRows();
        com.operations.Matrix.Matrix matrix24 = com.operations.Matrix.MatrixOperations.scalarMultiply(matrix21, (double) 2);
        double double25 = com.operations.Matrix.MatrixUtils.frobeniusNorm(matrix21);
        com.operations.Matrix.Matrix matrix28 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0L, (double) (byte) 10);
        int int29 = matrix28.getRows();
        com.operations.Matrix.Matrix matrix31 = com.operations.Matrix.MatrixOperations.scalarMultiply(matrix28, (double) 2);
        com.operations.Matrix.Matrix matrix32 = com.operations.Matrix.MatrixOperations.subtract(matrix21, matrix31);
        com.operations.Matrix.Matrix matrix33 = com.operations.Matrix.MatrixOperations.add(matrix18, matrix31);
        boolean boolean35 = com.operations.Matrix.MatrixUtils.compare(matrix16, matrix18, (double) (byte) -1);
        com.operations.Matrix.Matrix matrix36 = com.operations.Matrix.MatrixOperations.transpose(matrix18);
        com.operations.Matrix.Matrix matrix39 = com.operations.Matrix.MatrixTransformations.project2D((double) 10L, 10.0d);
        com.operations.Matrix.Matrix matrix41 = com.operations.Matrix.MatrixTransformations.rotate2D((double) (short) 100);
        double[] doubleArray44 = new double[] { 137.90576492663388d, (byte) -1 };
        double[] doubleArray45 = com.operations.Matrix.MatrixSolver.solveGaussian(matrix41, doubleArray44);
        com.operations.Matrix.Matrix matrix48 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0L, (double) (byte) 10);
        double[] doubleArray51 = new double[] { 10, 'a' };
        double[] doubleArray54 = new double[] { 10, 'a' };
        double[][] doubleArray55 = new double[][] { doubleArray51, doubleArray54 };
        com.operations.Matrix.Matrix matrix56 = new com.operations.Matrix.Matrix(doubleArray55);
        int int57 = matrix56.getCols();
        int int58 = matrix56.getCols();
        int int59 = matrix56.getCols();
        com.operations.Matrix.Matrix[] matrixArray60 = com.operations.Matrix.MatrixDecompositions.luDecomposition(matrix56);
        com.operations.Matrix.Matrix matrix61 = com.operations.Matrix.MatrixOperations.multiply(matrix48, matrix56);
        boolean boolean63 = com.operations.Matrix.MatrixUtils.compare(matrix41, matrix48, (double) (-1L));
        double[][] doubleArray64 = matrix41.getData();
        com.operations.Matrix.Matrix matrix66 = com.operations.Matrix.MatrixTransformations.rotate2D((double) (short) 100);
        double[] doubleArray69 = new double[] { 137.90576492663388d, (byte) -1 };
        double[] doubleArray70 = com.operations.Matrix.MatrixSolver.solveGaussian(matrix66, doubleArray69);
        double[] doubleArray71 = com.operations.Matrix.MatrixSolver.solveGaussian(matrix41, doubleArray69);
        double[] doubleArray72 = com.operations.Matrix.MatrixSolver.solveGaussian(matrix39, doubleArray71);
        double[] doubleArray73 = com.operations.Matrix.MatrixSolver.solveGaussian(matrix18, doubleArray72);
        double[] doubleArray74 = com.operations.Matrix.MatrixSolver.solveGaussian(matrix13, doubleArray73);
        double[] doubleArray75 = com.operations.Matrix.MatrixSolver.solveGaussian(matrix7, doubleArray73);
        // The following exception was thrown during execution in test generation
        try {
            double[] doubleArray76 = com.operations.Matrix.MatrixSolver.solveGaussian(matrix5, doubleArray73);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Matrix must be square to solve equations.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(matrix5);
        org.junit.Assert.assertNotNull(matrix7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 2 + "'", int8 == 2);
        org.junit.Assert.assertNotNull(matrix10);
        org.junit.Assert.assertNotNull(matrix13);
        org.junit.Assert.assertNotNull(matrix16);
        org.junit.Assert.assertNotNull(matrix18);
        org.junit.Assert.assertNotNull(matrix21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 2 + "'", int22 == 2);
        org.junit.Assert.assertNotNull(matrix24);
        org.junit.Assert.assertTrue("'" + double25 + "' != '" + 10.0d + "'", double25 == 10.0d);
        org.junit.Assert.assertNotNull(matrix28);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 2 + "'", int29 == 2);
        org.junit.Assert.assertNotNull(matrix31);
        org.junit.Assert.assertNotNull(matrix32);
        org.junit.Assert.assertNotNull(matrix33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(matrix36);
        org.junit.Assert.assertNotNull(matrix39);
        org.junit.Assert.assertNotNull(matrix41);
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertArrayEquals(doubleArray44, new double[] { 137.90576492663388d, (-1.0d) }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertArrayEquals(doubleArray45, new double[] { (-24.931892522286255d), (-135.63701830716116d) }, 1.0E-15);
        org.junit.Assert.assertNotNull(matrix48);
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertArrayEquals(doubleArray51, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray54);
        org.junit.Assert.assertArrayEquals(doubleArray54, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 2 + "'", int57 == 2);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 2 + "'", int58 == 2);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 2 + "'", int59 == 2);
        org.junit.Assert.assertNotNull(matrixArray60);
        org.junit.Assert.assertNotNull(matrix61);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNotNull(doubleArray64);
        org.junit.Assert.assertNotNull(matrix66);
        org.junit.Assert.assertNotNull(doubleArray69);
        org.junit.Assert.assertArrayEquals(doubleArray69, new double[] { 137.90576492663388d, (-1.0d) }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray70);
        org.junit.Assert.assertArrayEquals(doubleArray70, new double[] { (-24.931892522286255d), (-135.63701830716116d) }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray71);
        org.junit.Assert.assertArrayEquals(doubleArray71, new double[] { (-24.931892522286255d), (-135.63701830716116d) }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray72);
        org.junit.Assert.assertArrayEquals(doubleArray72, new double[] { (-2.4931892522286256d), (-13.563701830716116d) }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray73);
        org.junit.Assert.assertArrayEquals(doubleArray73, new double[] { (-2.7295287645732618d), (-13.518123861075072d) }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray74);
        org.junit.Assert.assertArrayEquals(doubleArray74, new double[] { (-0.027295287645732618d), (-13.518123861075072d) }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray75);
        org.junit.Assert.assertArrayEquals(doubleArray75, new double[] { (-12.83877548870844d), 5.035458663373116d }, 1.0E-15);
    }

    @Test
    public void test1817() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1817");
        com.operations.Matrix.Matrix matrix4 = com.operations.Matrix.MatrixUtils.generateRandomMatrix(52, 97, 0, (int) 'a');
        boolean boolean5 = com.operations.Matrix.MatrixUtils.isSquare(matrix4);
        org.junit.Assert.assertNotNull(matrix4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
    }

    @Test
    public void test1818() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1818");
        com.operations.Matrix.Matrix matrix5 = com.operations.Matrix.MatrixUtils.generateRandomMatrix(100, (int) (byte) 1, (int) '#', (int) '#', 1L);
        double double8 = matrix5.getValue((int) '4', 0);
        double double9 = com.operations.Matrix.MatrixUtils.frobeniusNorm(matrix5);
        boolean boolean10 = com.operations.Matrix.MatrixUtils.isSquare(matrix5);
        double[][] doubleArray11 = matrix5.getData();
        int int12 = matrix5.getRows();
        boolean boolean13 = com.operations.Matrix.MatrixUtils.isSquare(matrix5);
        // The following exception was thrown during execution in test generation
        try {
            matrix5.setValue(10, 1, 10.344080432788601d);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: Index 1 out of bounds for length 1");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(matrix5);
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 35.0d + "'", double8 == 35.0d);
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 350.0d + "'", double9 == 350.0d);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 100 + "'", int12 == 100);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
    }

    @Test
    public void test1819() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1819");
        com.operations.Matrix.Matrix matrix1 = com.operations.Matrix.MatrixTransformations.rotate2D(100.0d);
        int int2 = matrix1.getCols();
        int int3 = matrix1.getRows();
        com.operations.Matrix.Matrix matrix6 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0L, (double) (byte) 10);
        int int7 = matrix6.getRows();
        com.operations.Matrix.Matrix matrix9 = com.operations.Matrix.MatrixOperations.scalarMultiply(matrix6, (double) 2);
        double double10 = com.operations.Matrix.MatrixUtils.frobeniusNorm(matrix6);
        com.operations.Matrix.Matrix matrix11 = com.operations.Matrix.MatrixOperations.add(matrix1, matrix6);
        double[] doubleArray14 = new double[] { 10, 'a' };
        double[] doubleArray17 = new double[] { 10, 'a' };
        double[][] doubleArray18 = new double[][] { doubleArray14, doubleArray17 };
        com.operations.Matrix.Matrix matrix19 = new com.operations.Matrix.Matrix(doubleArray18);
        com.operations.Matrix.Matrix matrix20 = new com.operations.Matrix.Matrix(doubleArray18);
        com.operations.Matrix.Matrix matrix22 = com.operations.Matrix.MatrixTransformations.rotate2D((double) (short) 100);
        double[] doubleArray25 = new double[] { 137.90576492663388d, (byte) -1 };
        double[] doubleArray26 = com.operations.Matrix.MatrixSolver.solveGaussian(matrix22, doubleArray25);
        com.operations.Matrix.Matrix matrix27 = com.operations.Matrix.MatrixOperations.add(matrix20, matrix22);
        com.operations.Matrix.Matrix matrix28 = com.operations.Matrix.MatrixOperations.transpose(matrix22);
        com.operations.Matrix.Matrix matrix30 = com.operations.Matrix.MatrixTransformations.rotate2D((double) (short) 100);
        com.operations.Matrix.Matrix matrix31 = com.operations.Matrix.MatrixOperations.subtract(matrix22, matrix30);
        com.operations.Matrix.Matrix matrix32 = com.operations.Matrix.MatrixOperations.multiply(matrix1, matrix30);
        com.operations.Matrix.Matrix matrix35 = new com.operations.Matrix.Matrix(2, (int) (byte) 0);
        // The following exception was thrown during execution in test generation
        try {
            com.operations.Matrix.Matrix matrix36 = com.operations.Matrix.MatrixOperations.subtract(matrix30, matrix35);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Matrices must have the same dimensions for subtraction.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(matrix1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 2 + "'", int2 == 2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 2 + "'", int3 == 2);
        org.junit.Assert.assertNotNull(matrix6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 2 + "'", int7 == 2);
        org.junit.Assert.assertNotNull(matrix9);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 10.0d + "'", double10 == 10.0d);
        org.junit.Assert.assertNotNull(matrix11);
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertArrayEquals(doubleArray14, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertArrayEquals(doubleArray17, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertNotNull(matrix22);
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertArrayEquals(doubleArray25, new double[] { 137.90576492663388d, (-1.0d) }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertArrayEquals(doubleArray26, new double[] { (-24.931892522286255d), (-135.63701830716116d) }, 1.0E-15);
        org.junit.Assert.assertNotNull(matrix27);
        org.junit.Assert.assertNotNull(matrix28);
        org.junit.Assert.assertNotNull(matrix30);
        org.junit.Assert.assertNotNull(matrix31);
        org.junit.Assert.assertNotNull(matrix32);
    }

    @Test
    public void test1820() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1820");
        // The following exception was thrown during execution in test generation
        try {
            com.operations.Matrix.Matrix matrix5 = com.operations.Matrix.MatrixUtils.generateRandomMatrix((int) (byte) 100, (-1), (int) (short) 100, (int) 'a', (long) (short) 10);
            org.junit.Assert.fail("Expected exception of type java.lang.NegativeArraySizeException; message: -1");
        } catch (java.lang.NegativeArraySizeException e) {
            // Expected exception.
        }
    }

    @Test
    public void test1821() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1821");
        double[] doubleArray2 = new double[] { 10, 'a' };
        double[] doubleArray5 = new double[] { 10, 'a' };
        double[][] doubleArray6 = new double[][] { doubleArray2, doubleArray5 };
        com.operations.Matrix.Matrix matrix7 = new com.operations.Matrix.Matrix(doubleArray6);
        com.operations.Matrix.Matrix matrix8 = new com.operations.Matrix.Matrix(doubleArray6);
        com.operations.Matrix.Matrix[] matrixArray9 = com.operations.Matrix.MatrixDecompositions.luDecomposition(matrix8);
        com.operations.Matrix.Matrix matrix10 = com.operations.Matrix.MatrixDecompositions.choleskyDecomposition(matrix8);
        matrix10.print();
        com.operations.Matrix.Matrix matrix13 = com.operations.Matrix.MatrixTransformations.rotate2D((double) (short) 100);
        double[] doubleArray16 = new double[] { 137.90576492663388d, (byte) -1 };
        double[] doubleArray17 = com.operations.Matrix.MatrixSolver.solveGaussian(matrix13, doubleArray16);
        com.operations.Matrix.Matrix matrix20 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0L, (double) (byte) 10);
        double[] doubleArray23 = new double[] { 10, 'a' };
        double[] doubleArray26 = new double[] { 10, 'a' };
        double[][] doubleArray27 = new double[][] { doubleArray23, doubleArray26 };
        com.operations.Matrix.Matrix matrix28 = new com.operations.Matrix.Matrix(doubleArray27);
        int int29 = matrix28.getCols();
        int int30 = matrix28.getCols();
        int int31 = matrix28.getCols();
        com.operations.Matrix.Matrix[] matrixArray32 = com.operations.Matrix.MatrixDecompositions.luDecomposition(matrix28);
        com.operations.Matrix.Matrix matrix33 = com.operations.Matrix.MatrixOperations.multiply(matrix20, matrix28);
        boolean boolean35 = com.operations.Matrix.MatrixUtils.compare(matrix13, matrix20, (double) (-1L));
        boolean boolean36 = com.operations.Matrix.MatrixUtils.isSymmetric(matrix13);
        int int37 = matrix13.getCols();
        com.operations.Matrix.Matrix[] matrixArray38 = com.operations.Matrix.MatrixDecompositions.luDecomposition(matrix13);
        double double39 = com.operations.Matrix.MatrixUtils.frobeniusNorm(matrix13);
        com.operations.Matrix.Matrix matrix41 = com.operations.Matrix.MatrixTransformations.rotate2D(100.0d);
        int int42 = matrix41.getCols();
        matrix41.print();
        com.operations.Matrix.Matrix matrix45 = com.operations.Matrix.MatrixOperations.scalarMultiply(matrix41, (double) (byte) 1);
        com.operations.Matrix.Matrix matrix47 = com.operations.Matrix.MatrixTransformations.rotate2D(350.0d);
        com.operations.Matrix.Matrix matrix49 = com.operations.Matrix.MatrixTransformations.rotate2D((double) (short) 100);
        double[] doubleArray52 = new double[] { 137.90576492663388d, (byte) -1 };
        double[] doubleArray53 = com.operations.Matrix.MatrixSolver.solveGaussian(matrix49, doubleArray52);
        double[] doubleArray54 = com.operations.Matrix.MatrixSolver.solveGaussian(matrix47, doubleArray53);
        double[] doubleArray55 = com.operations.Matrix.MatrixSolver.solveGaussian(matrix41, doubleArray53);
        double[] doubleArray56 = com.operations.Matrix.MatrixSolver.solveGaussian(matrix13, doubleArray55);
        boolean boolean57 = com.operations.Matrix.MatrixUtils.isSymmetric(matrix13);
        double[] doubleArray60 = new double[] { 10, 'a' };
        double[] doubleArray63 = new double[] { 10, 'a' };
        double[][] doubleArray64 = new double[][] { doubleArray60, doubleArray63 };
        com.operations.Matrix.Matrix matrix65 = new com.operations.Matrix.Matrix(doubleArray64);
        com.operations.Matrix.Matrix matrix66 = new com.operations.Matrix.Matrix(doubleArray64);
        com.operations.Matrix.Matrix matrix68 = com.operations.Matrix.MatrixTransformations.rotate2D((double) (short) 100);
        double[] doubleArray71 = new double[] { 137.90576492663388d, (byte) -1 };
        double[] doubleArray72 = com.operations.Matrix.MatrixSolver.solveGaussian(matrix68, doubleArray71);
        com.operations.Matrix.Matrix matrix73 = com.operations.Matrix.MatrixOperations.add(matrix66, matrix68);
        com.operations.Matrix.Matrix matrix74 = com.operations.Matrix.MatrixOperations.transpose(matrix68);
        double double75 = com.operations.Matrix.MatrixUtils.frobeniusNorm(matrix74);
        double[][] doubleArray76 = matrix74.getData();
        com.operations.Matrix.Matrix matrix78 = com.operations.Matrix.MatrixOperations.scalarMultiply(matrix74, (double) 'a');
        com.operations.Matrix.Matrix matrix80 = com.operations.Matrix.MatrixTransformations.rotate2D(350.0d);
        com.operations.Matrix.Matrix matrix82 = com.operations.Matrix.MatrixTransformations.rotate2D((double) (short) 100);
        double[] doubleArray85 = new double[] { 137.90576492663388d, (byte) -1 };
        double[] doubleArray86 = com.operations.Matrix.MatrixSolver.solveGaussian(matrix82, doubleArray85);
        double[] doubleArray87 = com.operations.Matrix.MatrixSolver.solveGaussian(matrix80, doubleArray86);
        double[] doubleArray88 = com.operations.Matrix.MatrixSolver.solveGaussian(matrix74, doubleArray86);
        double[] doubleArray89 = com.operations.Matrix.MatrixSolver.solveGaussian(matrix13, doubleArray88);
        double[] doubleArray90 = com.operations.Matrix.MatrixSolver.solveGaussian(matrix10, doubleArray88);
        java.lang.Class<?> wildcardClass91 = doubleArray88.getClass();
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertArrayEquals(doubleArray2, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertArrayEquals(doubleArray5, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertNotNull(matrixArray9);
        org.junit.Assert.assertNotNull(matrix10);
        org.junit.Assert.assertNotNull(matrix13);
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertArrayEquals(doubleArray16, new double[] { 137.90576492663388d, (-1.0d) }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertArrayEquals(doubleArray17, new double[] { (-24.931892522286255d), (-135.63701830716116d) }, 1.0E-15);
        org.junit.Assert.assertNotNull(matrix20);
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertArrayEquals(doubleArray23, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertArrayEquals(doubleArray26, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 2 + "'", int29 == 2);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 2 + "'", int30 == 2);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 2 + "'", int31 == 2);
        org.junit.Assert.assertNotNull(matrixArray32);
        org.junit.Assert.assertNotNull(matrix33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 2 + "'", int37 == 2);
        org.junit.Assert.assertNotNull(matrixArray38);
        org.junit.Assert.assertTrue("'" + double39 + "' != '" + 1.414213562373095d + "'", double39 == 1.414213562373095d);
        org.junit.Assert.assertNotNull(matrix41);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 2 + "'", int42 == 2);
        org.junit.Assert.assertNotNull(matrix45);
        org.junit.Assert.assertNotNull(matrix47);
        org.junit.Assert.assertNotNull(matrix49);
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertArrayEquals(doubleArray52, new double[] { 137.90576492663388d, (-1.0d) }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertArrayEquals(doubleArray53, new double[] { (-24.931892522286255d), (-135.63701830716116d) }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray54);
        org.junit.Assert.assertArrayEquals(doubleArray54, new double[] { (-0.9999999999999858d), (-137.90576492663388d) }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertArrayEquals(doubleArray55, new double[] { (-129.24700952206834d), 48.1062421064292d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray56);
        org.junit.Assert.assertArrayEquals(doubleArray56, new double[] { 69.81890786710137d, 118.92989575479001d }, 1.0E-15);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNotNull(doubleArray60);
        org.junit.Assert.assertArrayEquals(doubleArray60, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray63);
        org.junit.Assert.assertArrayEquals(doubleArray63, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray64);
        org.junit.Assert.assertNotNull(matrix68);
        org.junit.Assert.assertNotNull(doubleArray71);
        org.junit.Assert.assertArrayEquals(doubleArray71, new double[] { 137.90576492663388d, (-1.0d) }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray72);
        org.junit.Assert.assertArrayEquals(doubleArray72, new double[] { (-24.931892522286255d), (-135.63701830716116d) }, 1.0E-15);
        org.junit.Assert.assertNotNull(matrix73);
        org.junit.Assert.assertNotNull(matrix74);
        org.junit.Assert.assertTrue("'" + double75 + "' != '" + 1.414213562373095d + "'", double75 == 1.414213562373095d);
        org.junit.Assert.assertNotNull(doubleArray76);
        org.junit.Assert.assertNotNull(matrix78);
        org.junit.Assert.assertNotNull(matrix80);
        org.junit.Assert.assertNotNull(matrix82);
        org.junit.Assert.assertNotNull(doubleArray85);
        org.junit.Assert.assertArrayEquals(doubleArray85, new double[] { 137.90576492663388d, (-1.0d) }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray86);
        org.junit.Assert.assertArrayEquals(doubleArray86, new double[] { (-24.931892522286255d), (-135.63701830716116d) }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray87);
        org.junit.Assert.assertArrayEquals(doubleArray87, new double[] { (-0.9999999999999858d), (-137.90576492663388d) }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray88);
        org.junit.Assert.assertArrayEquals(doubleArray88, new double[] { 137.90576492663388d, (-1.0000000000000022d) }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray89);
        org.junit.Assert.assertArrayEquals(doubleArray89, new double[] { (-24.931892522286258d), (-135.63701830716116d) }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray90);
        org.junit.Assert.assertArrayEquals(doubleArray90, new double[] { 43.60963196359263d, (-14.89226117390763d) }, 1.0E-15);
        org.junit.Assert.assertNotNull(wildcardClass91);
    }

    @Test
    public void test1822() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1822");
        double[] doubleArray2 = new double[] { 10, 'a' };
        double[] doubleArray5 = new double[] { 10, 'a' };
        double[][] doubleArray6 = new double[][] { doubleArray2, doubleArray5 };
        com.operations.Matrix.Matrix matrix7 = new com.operations.Matrix.Matrix(doubleArray6);
        int int8 = matrix7.getCols();
        boolean boolean9 = com.operations.Matrix.MatrixUtils.isSquare(matrix7);
        com.operations.Matrix.Matrix matrix10 = com.operations.Matrix.MatrixOperations.transpose(matrix7);
        int int11 = matrix10.getRows();
        double double12 = com.operations.Matrix.MatrixUtils.frobeniusNorm(matrix10);
        boolean boolean13 = com.operations.Matrix.MatrixUtils.isSymmetric(matrix10);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertArrayEquals(doubleArray2, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertArrayEquals(doubleArray5, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 2 + "'", int8 == 2);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertNotNull(matrix10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 2 + "'", int11 == 2);
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 137.90576492663388d + "'", double12 == 137.90576492663388d);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
    }

    @Test
    public void test1823() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1823");
        com.operations.Matrix.Matrix matrix1 = com.operations.Matrix.MatrixTransformations.rotate2D(10.0d);
        com.operations.Matrix.Matrix matrix3 = com.operations.Matrix.MatrixOperations.scalarMultiply(matrix1, 0.01745240643728351d);
        com.operations.Matrix.Matrix matrix4 = com.operations.Matrix.MatrixOperations.transpose(matrix3);
        // The following exception was thrown during execution in test generation
        try {
            matrix3.setValue(0, (int) (byte) -1, 975.1410154434076d);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: Index -1 out of bounds for length 2");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(matrix1);
        org.junit.Assert.assertNotNull(matrix3);
        org.junit.Assert.assertNotNull(matrix4);
    }

    @Test
    public void test1824() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1824");
        com.operations.Matrix.Matrix matrix2 = com.operations.Matrix.MatrixTransformations.scale2D((double) 100L, (double) 100);
        org.junit.Assert.assertNotNull(matrix2);
    }

    @Test
    public void test1825() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1825");
        com.operations.Matrix.Matrix matrix2 = com.operations.Matrix.MatrixTransformations.scale2D((double) 1.0f, (double) 1);
        com.operations.Matrix.Matrix matrix4 = com.operations.Matrix.MatrixTransformations.rotate2D((double) 1.0f);
        com.operations.Matrix.Matrix matrix7 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0L, (double) (byte) 10);
        int int8 = matrix7.getRows();
        com.operations.Matrix.Matrix matrix10 = com.operations.Matrix.MatrixOperations.scalarMultiply(matrix7, (double) 2);
        double double11 = com.operations.Matrix.MatrixUtils.frobeniusNorm(matrix7);
        com.operations.Matrix.Matrix matrix14 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0L, (double) (byte) 10);
        int int15 = matrix14.getRows();
        com.operations.Matrix.Matrix matrix17 = com.operations.Matrix.MatrixOperations.scalarMultiply(matrix14, (double) 2);
        com.operations.Matrix.Matrix matrix18 = com.operations.Matrix.MatrixOperations.subtract(matrix7, matrix17);
        com.operations.Matrix.Matrix matrix19 = com.operations.Matrix.MatrixOperations.add(matrix4, matrix17);
        boolean boolean21 = com.operations.Matrix.MatrixUtils.compare(matrix2, matrix4, (double) (byte) -1);
        com.operations.Matrix.Matrix matrix22 = com.operations.Matrix.MatrixOperations.transpose(matrix4);
        com.operations.Matrix.Matrix matrix25 = com.operations.Matrix.MatrixTransformations.project2D((double) 10L, 10.0d);
        com.operations.Matrix.Matrix matrix27 = com.operations.Matrix.MatrixTransformations.rotate2D((double) (short) 100);
        double[] doubleArray30 = new double[] { 137.90576492663388d, (byte) -1 };
        double[] doubleArray31 = com.operations.Matrix.MatrixSolver.solveGaussian(matrix27, doubleArray30);
        com.operations.Matrix.Matrix matrix34 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0L, (double) (byte) 10);
        double[] doubleArray37 = new double[] { 10, 'a' };
        double[] doubleArray40 = new double[] { 10, 'a' };
        double[][] doubleArray41 = new double[][] { doubleArray37, doubleArray40 };
        com.operations.Matrix.Matrix matrix42 = new com.operations.Matrix.Matrix(doubleArray41);
        int int43 = matrix42.getCols();
        int int44 = matrix42.getCols();
        int int45 = matrix42.getCols();
        com.operations.Matrix.Matrix[] matrixArray46 = com.operations.Matrix.MatrixDecompositions.luDecomposition(matrix42);
        com.operations.Matrix.Matrix matrix47 = com.operations.Matrix.MatrixOperations.multiply(matrix34, matrix42);
        boolean boolean49 = com.operations.Matrix.MatrixUtils.compare(matrix27, matrix34, (double) (-1L));
        double[][] doubleArray50 = matrix27.getData();
        com.operations.Matrix.Matrix matrix52 = com.operations.Matrix.MatrixTransformations.rotate2D((double) (short) 100);
        double[] doubleArray55 = new double[] { 137.90576492663388d, (byte) -1 };
        double[] doubleArray56 = com.operations.Matrix.MatrixSolver.solveGaussian(matrix52, doubleArray55);
        double[] doubleArray57 = com.operations.Matrix.MatrixSolver.solveGaussian(matrix27, doubleArray55);
        double[] doubleArray58 = com.operations.Matrix.MatrixSolver.solveGaussian(matrix25, doubleArray57);
        double[] doubleArray59 = com.operations.Matrix.MatrixSolver.solveGaussian(matrix4, doubleArray58);
        matrix4.print();
        org.junit.Assert.assertNotNull(matrix2);
        org.junit.Assert.assertNotNull(matrix4);
        org.junit.Assert.assertNotNull(matrix7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 2 + "'", int8 == 2);
        org.junit.Assert.assertNotNull(matrix10);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 10.0d + "'", double11 == 10.0d);
        org.junit.Assert.assertNotNull(matrix14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 2 + "'", int15 == 2);
        org.junit.Assert.assertNotNull(matrix17);
        org.junit.Assert.assertNotNull(matrix18);
        org.junit.Assert.assertNotNull(matrix19);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(matrix22);
        org.junit.Assert.assertNotNull(matrix25);
        org.junit.Assert.assertNotNull(matrix27);
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertArrayEquals(doubleArray30, new double[] { 137.90576492663388d, (-1.0d) }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertArrayEquals(doubleArray31, new double[] { (-24.931892522286255d), (-135.63701830716116d) }, 1.0E-15);
        org.junit.Assert.assertNotNull(matrix34);
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertArrayEquals(doubleArray37, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertArrayEquals(doubleArray40, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 2 + "'", int43 == 2);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 2 + "'", int44 == 2);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 2 + "'", int45 == 2);
        org.junit.Assert.assertNotNull(matrixArray46);
        org.junit.Assert.assertNotNull(matrix47);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertNotNull(matrix52);
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertArrayEquals(doubleArray55, new double[] { 137.90576492663388d, (-1.0d) }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray56);
        org.junit.Assert.assertArrayEquals(doubleArray56, new double[] { (-24.931892522286255d), (-135.63701830716116d) }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray57);
        org.junit.Assert.assertArrayEquals(doubleArray57, new double[] { (-24.931892522286255d), (-135.63701830716116d) }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray58);
        org.junit.Assert.assertArrayEquals(doubleArray58, new double[] { (-2.4931892522286256d), (-13.563701830716116d) }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray59);
        org.junit.Assert.assertArrayEquals(doubleArray59, new double[] { (-2.7295287645732618d), (-13.518123861075072d) }, 1.0E-15);
    }

    @Test
    public void test1826() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1826");
        com.operations.Matrix.Matrix matrix2 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0L, (double) (byte) 10);
        double[] doubleArray5 = new double[] { 10, 'a' };
        double[] doubleArray8 = new double[] { 10, 'a' };
        double[][] doubleArray9 = new double[][] { doubleArray5, doubleArray8 };
        com.operations.Matrix.Matrix matrix10 = new com.operations.Matrix.Matrix(doubleArray9);
        int int11 = matrix10.getCols();
        int int12 = matrix10.getCols();
        int int13 = matrix10.getCols();
        com.operations.Matrix.Matrix[] matrixArray14 = com.operations.Matrix.MatrixDecompositions.luDecomposition(matrix10);
        com.operations.Matrix.Matrix matrix15 = com.operations.Matrix.MatrixOperations.multiply(matrix2, matrix10);
        com.operations.Matrix.Matrix matrix17 = com.operations.Matrix.MatrixTransformations.rotate2D((double) '4');
        double[] doubleArray20 = new double[] { 10, 'a' };
        double[] doubleArray23 = new double[] { 10, 'a' };
        double[][] doubleArray24 = new double[][] { doubleArray20, doubleArray23 };
        com.operations.Matrix.Matrix matrix25 = new com.operations.Matrix.Matrix(doubleArray24);
        com.operations.Matrix.Matrix matrix26 = new com.operations.Matrix.Matrix(doubleArray24);
        com.operations.Matrix.Matrix matrix28 = com.operations.Matrix.MatrixTransformations.rotate2D((double) (short) 100);
        double[] doubleArray31 = new double[] { 137.90576492663388d, (byte) -1 };
        double[] doubleArray32 = com.operations.Matrix.MatrixSolver.solveGaussian(matrix28, doubleArray31);
        com.operations.Matrix.Matrix matrix33 = com.operations.Matrix.MatrixOperations.add(matrix26, matrix28);
        boolean boolean34 = com.operations.Matrix.MatrixUtils.isSymmetric(matrix33);
        boolean boolean36 = com.operations.Matrix.MatrixUtils.compare(matrix17, matrix33, 364.0054944640259d);
        com.operations.Matrix.Matrix matrix39 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0L, (double) (byte) 10);
        double[] doubleArray42 = new double[] { 10, 'a' };
        double[] doubleArray45 = new double[] { 10, 'a' };
        double[][] doubleArray46 = new double[][] { doubleArray42, doubleArray45 };
        com.operations.Matrix.Matrix matrix47 = new com.operations.Matrix.Matrix(doubleArray46);
        int int48 = matrix47.getCols();
        int int49 = matrix47.getCols();
        int int50 = matrix47.getCols();
        com.operations.Matrix.Matrix[] matrixArray51 = com.operations.Matrix.MatrixDecompositions.luDecomposition(matrix47);
        com.operations.Matrix.Matrix matrix52 = com.operations.Matrix.MatrixOperations.multiply(matrix39, matrix47);
        com.operations.Matrix.Matrix matrix54 = com.operations.Matrix.MatrixTransformations.rotate2D((double) (short) 100);
        boolean boolean56 = com.operations.Matrix.MatrixUtils.compare(matrix47, matrix54, (double) (byte) 0);
        com.operations.Matrix.Matrix[] matrixArray57 = com.operations.Matrix.MatrixDecompositions.luDecomposition(matrix47);
        com.operations.Matrix.Matrix matrix58 = com.operations.Matrix.MatrixOperations.transpose(matrix47);
        com.operations.Matrix.Matrix matrix61 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0L, (double) (byte) 10);
        int int62 = matrix61.getRows();
        com.operations.Matrix.Matrix matrix65 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0L, (double) (byte) 10);
        int int66 = matrix65.getRows();
        com.operations.Matrix.Matrix matrix68 = com.operations.Matrix.MatrixOperations.scalarMultiply(matrix65, (double) 2);
        com.operations.Matrix.Matrix matrix69 = com.operations.Matrix.MatrixOperations.subtract(matrix61, matrix65);
        boolean boolean71 = com.operations.Matrix.MatrixUtils.compare(matrix47, matrix61, (double) ' ');
        boolean boolean73 = com.operations.Matrix.MatrixUtils.compare(matrix33, matrix47, (double) 0L);
        com.operations.Matrix.Matrix matrix74 = com.operations.Matrix.MatrixOperations.add(matrix2, matrix47);
        double[][] doubleArray75 = matrix47.getData();
        boolean boolean76 = com.operations.Matrix.MatrixUtils.isSquare(matrix47);
        org.junit.Assert.assertNotNull(matrix2);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertArrayEquals(doubleArray5, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertArrayEquals(doubleArray8, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 2 + "'", int11 == 2);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 2 + "'", int12 == 2);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 2 + "'", int13 == 2);
        org.junit.Assert.assertNotNull(matrixArray14);
        org.junit.Assert.assertNotNull(matrix15);
        org.junit.Assert.assertNotNull(matrix17);
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertArrayEquals(doubleArray20, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertArrayEquals(doubleArray23, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertNotNull(matrix28);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertArrayEquals(doubleArray31, new double[] { 137.90576492663388d, (-1.0d) }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertArrayEquals(doubleArray32, new double[] { (-24.931892522286255d), (-135.63701830716116d) }, 1.0E-15);
        org.junit.Assert.assertNotNull(matrix33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertNotNull(matrix39);
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertArrayEquals(doubleArray42, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertArrayEquals(doubleArray45, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray46);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 2 + "'", int48 == 2);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 2 + "'", int49 == 2);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 2 + "'", int50 == 2);
        org.junit.Assert.assertNotNull(matrixArray51);
        org.junit.Assert.assertNotNull(matrix52);
        org.junit.Assert.assertNotNull(matrix54);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(matrixArray57);
        org.junit.Assert.assertNotNull(matrix58);
        org.junit.Assert.assertNotNull(matrix61);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 2 + "'", int62 == 2);
        org.junit.Assert.assertNotNull(matrix65);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 2 + "'", int66 == 2);
        org.junit.Assert.assertNotNull(matrix68);
        org.junit.Assert.assertNotNull(matrix69);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertNotNull(matrix74);
        org.junit.Assert.assertNotNull(doubleArray75);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + true + "'", boolean76 == true);
    }

    @Test
    public void test1827() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1827");
        com.operations.Matrix.Matrix matrix5 = com.operations.Matrix.MatrixUtils.generateRandomMatrix((int) (byte) 100, (int) 'a', (int) '4', (int) (short) 100, (long) (byte) 0);
        // The following exception was thrown during execution in test generation
        try {
            com.operations.Matrix.Matrix matrix6 = com.operations.Matrix.MatrixDecompositions.choleskyDecomposition(matrix5);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Matrix must be square for Cholesky decomposition.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(matrix5);
    }

    @Test
    public void test1828() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1828");
        com.operations.Matrix.Matrix matrix2 = com.operations.Matrix.MatrixTransformations.scale2D(131.06486943494812d, (double) 'a');
        org.junit.Assert.assertNotNull(matrix2);
    }

    @Test
    public void test1829() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1829");
        com.operations.Matrix.Matrix matrix5 = com.operations.Matrix.MatrixUtils.generateRandomMatrix((int) '4', (int) (short) 0, 52, (int) (short) 1, (long) 52);
        int int6 = matrix5.getRows();
        com.operations.Matrix.Matrix matrix8 = com.operations.Matrix.MatrixOperations.scalarMultiply(matrix5, 0.0d);
        org.junit.Assert.assertNotNull(matrix5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 52 + "'", int6 == 52);
        org.junit.Assert.assertNotNull(matrix8);
    }

    @Test
    public void test1830() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1830");
        double[] doubleArray2 = new double[] { 10, 'a' };
        double[] doubleArray5 = new double[] { 10, 'a' };
        double[][] doubleArray6 = new double[][] { doubleArray2, doubleArray5 };
        com.operations.Matrix.Matrix matrix7 = new com.operations.Matrix.Matrix(doubleArray6);
        com.operations.Matrix.Matrix matrix8 = new com.operations.Matrix.Matrix(doubleArray6);
        boolean boolean9 = com.operations.Matrix.MatrixUtils.isSquare(matrix8);
        double[] doubleArray12 = new double[] { 10, 'a' };
        double[] doubleArray15 = new double[] { 10, 'a' };
        double[][] doubleArray16 = new double[][] { doubleArray12, doubleArray15 };
        com.operations.Matrix.Matrix matrix17 = new com.operations.Matrix.Matrix(doubleArray16);
        int int18 = matrix17.getCols();
        int int19 = matrix17.getCols();
        matrix17.print();
        double[] doubleArray23 = new double[] { 10, 'a' };
        double[] doubleArray26 = new double[] { 10, 'a' };
        double[][] doubleArray27 = new double[][] { doubleArray23, doubleArray26 };
        com.operations.Matrix.Matrix matrix28 = new com.operations.Matrix.Matrix(doubleArray27);
        boolean boolean30 = com.operations.Matrix.MatrixUtils.compare(matrix17, matrix28, (double) (-1));
        com.operations.Matrix.Matrix matrix31 = com.operations.Matrix.MatrixOperations.subtract(matrix8, matrix28);
        com.operations.Matrix.Matrix[] matrixArray32 = com.operations.Matrix.MatrixDecompositions.luDecomposition(matrix31);
        double[][] doubleArray33 = matrix31.getData();
        com.operations.Matrix.Matrix matrix34 = new com.operations.Matrix.Matrix(doubleArray33);
        com.operations.Matrix.Matrix matrix35 = new com.operations.Matrix.Matrix(doubleArray33);
        boolean boolean36 = com.operations.Matrix.MatrixUtils.isSquare(matrix35);
        boolean boolean37 = com.operations.Matrix.MatrixUtils.isSymmetric(matrix35);
        // The following exception was thrown during execution in test generation
        try {
            double double40 = matrix35.getValue((int) (byte) -1, 52);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertArrayEquals(doubleArray2, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertArrayEquals(doubleArray5, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertArrayEquals(doubleArray12, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertArrayEquals(doubleArray15, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 2 + "'", int18 == 2);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 2 + "'", int19 == 2);
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertArrayEquals(doubleArray23, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertArrayEquals(doubleArray26, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(matrix31);
        org.junit.Assert.assertNotNull(matrixArray32);
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
    }

    @Test
    public void test1831() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1831");
        com.operations.Matrix.Matrix matrix2 = com.operations.Matrix.MatrixTransformations.project2D((double) ' ', 0.0d);
        double[] doubleArray5 = new double[] { 10, 'a' };
        double[] doubleArray8 = new double[] { 10, 'a' };
        double[][] doubleArray9 = new double[][] { doubleArray5, doubleArray8 };
        com.operations.Matrix.Matrix matrix10 = new com.operations.Matrix.Matrix(doubleArray9);
        int int11 = matrix10.getCols();
        boolean boolean12 = com.operations.Matrix.MatrixUtils.isSquare(matrix10);
        com.operations.Matrix.Matrix matrix13 = com.operations.Matrix.MatrixOperations.transpose(matrix10);
        int int14 = matrix13.getRows();
        com.operations.Matrix.Matrix matrix17 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0L, (double) (byte) 10);
        double[] doubleArray20 = new double[] { 10, 'a' };
        double[] doubleArray23 = new double[] { 10, 'a' };
        double[][] doubleArray24 = new double[][] { doubleArray20, doubleArray23 };
        com.operations.Matrix.Matrix matrix25 = new com.operations.Matrix.Matrix(doubleArray24);
        int int26 = matrix25.getCols();
        int int27 = matrix25.getCols();
        int int28 = matrix25.getCols();
        com.operations.Matrix.Matrix[] matrixArray29 = com.operations.Matrix.MatrixDecompositions.luDecomposition(matrix25);
        com.operations.Matrix.Matrix matrix30 = com.operations.Matrix.MatrixOperations.multiply(matrix17, matrix25);
        com.operations.Matrix.Matrix matrix32 = com.operations.Matrix.MatrixTransformations.rotate2D((double) (short) 100);
        boolean boolean34 = com.operations.Matrix.MatrixUtils.compare(matrix25, matrix32, (double) (byte) 0);
        com.operations.Matrix.Matrix matrix35 = com.operations.Matrix.MatrixOperations.multiply(matrix13, matrix25);
        com.operations.Matrix.Matrix matrix36 = com.operations.Matrix.MatrixOperations.add(matrix2, matrix25);
        matrix25.print();
        com.operations.Matrix.Matrix[] matrixArray38 = com.operations.Matrix.MatrixDecompositions.luDecomposition(matrix25);
        boolean boolean39 = com.operations.Matrix.MatrixUtils.isSquare(matrix25);
        com.operations.Matrix.Matrix matrix42 = com.operations.Matrix.MatrixTransformations.project2D((double) '4', (double) 'a');
        boolean boolean44 = com.operations.Matrix.MatrixUtils.compare(matrix25, matrix42, 137.90576492663388d);
        // The following exception was thrown during execution in test generation
        try {
            double double47 = matrix42.getValue((int) (short) 1, 2);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(matrix2);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertArrayEquals(doubleArray5, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertArrayEquals(doubleArray8, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 2 + "'", int11 == 2);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(matrix13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 2 + "'", int14 == 2);
        org.junit.Assert.assertNotNull(matrix17);
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertArrayEquals(doubleArray20, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertArrayEquals(doubleArray23, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 2 + "'", int26 == 2);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 2 + "'", int27 == 2);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 2 + "'", int28 == 2);
        org.junit.Assert.assertNotNull(matrixArray29);
        org.junit.Assert.assertNotNull(matrix30);
        org.junit.Assert.assertNotNull(matrix32);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(matrix35);
        org.junit.Assert.assertNotNull(matrix36);
        org.junit.Assert.assertNotNull(matrixArray38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertNotNull(matrix42);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
    }

    @Test
    public void test1832() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1832");
        com.operations.Matrix.Matrix matrix4 = com.operations.Matrix.MatrixUtils.generateRandomMatrix(2, (int) ' ', (int) (short) 100, (int) (short) 100);
        com.operations.Matrix.Matrix matrix5 = com.operations.Matrix.MatrixOperations.transpose(matrix4);
        // The following exception was thrown during execution in test generation
        try {
            matrix5.setValue((int) (byte) 0, (int) (short) 100, (double) 0);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: Index 100 out of bounds for length 2");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(matrix4);
        org.junit.Assert.assertNotNull(matrix5);
    }

    @Test
    public void test1833() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1833");
        com.operations.Matrix.Matrix matrix4 = com.operations.Matrix.MatrixUtils.generateRandomMatrix((int) (short) 10, (int) (short) 0, (int) (short) 100, (int) (byte) 100);
        com.operations.Matrix.Matrix matrix7 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0L, (double) (byte) 10);
        double[] doubleArray10 = new double[] { 10, 'a' };
        double[] doubleArray13 = new double[] { 10, 'a' };
        double[][] doubleArray14 = new double[][] { doubleArray10, doubleArray13 };
        com.operations.Matrix.Matrix matrix15 = new com.operations.Matrix.Matrix(doubleArray14);
        int int16 = matrix15.getCols();
        int int17 = matrix15.getCols();
        int int18 = matrix15.getCols();
        com.operations.Matrix.Matrix[] matrixArray19 = com.operations.Matrix.MatrixDecompositions.luDecomposition(matrix15);
        com.operations.Matrix.Matrix matrix20 = com.operations.Matrix.MatrixOperations.multiply(matrix7, matrix15);
        com.operations.Matrix.Matrix matrix22 = com.operations.Matrix.MatrixTransformations.rotate2D((double) (short) 100);
        boolean boolean24 = com.operations.Matrix.MatrixUtils.compare(matrix15, matrix22, (double) (byte) 0);
        com.operations.Matrix.Matrix matrix26 = com.operations.Matrix.MatrixTransformations.rotate2D((double) 1.0f);
        com.operations.Matrix.Matrix matrix29 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0L, (double) (byte) 10);
        int int30 = matrix29.getRows();
        com.operations.Matrix.Matrix matrix32 = com.operations.Matrix.MatrixOperations.scalarMultiply(matrix29, (double) 2);
        double double33 = com.operations.Matrix.MatrixUtils.frobeniusNorm(matrix29);
        com.operations.Matrix.Matrix matrix36 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0L, (double) (byte) 10);
        int int37 = matrix36.getRows();
        com.operations.Matrix.Matrix matrix39 = com.operations.Matrix.MatrixOperations.scalarMultiply(matrix36, (double) 2);
        com.operations.Matrix.Matrix matrix40 = com.operations.Matrix.MatrixOperations.subtract(matrix29, matrix39);
        com.operations.Matrix.Matrix matrix41 = com.operations.Matrix.MatrixOperations.add(matrix26, matrix39);
        double[] doubleArray44 = new double[] { 10, 'a' };
        double[] doubleArray47 = new double[] { 10, 'a' };
        double[][] doubleArray48 = new double[][] { doubleArray44, doubleArray47 };
        com.operations.Matrix.Matrix matrix49 = new com.operations.Matrix.Matrix(doubleArray48);
        int int50 = matrix49.getCols();
        int int51 = matrix49.getCols();
        int int52 = matrix49.getCols();
        com.operations.Matrix.Matrix matrix58 = com.operations.Matrix.MatrixUtils.generateRandomMatrix(100, (int) (byte) 1, (int) '#', (int) '#', 1L);
        double double61 = matrix58.getValue((int) '4', 0);
        double double62 = com.operations.Matrix.MatrixUtils.frobeniusNorm(matrix58);
        boolean boolean63 = com.operations.Matrix.MatrixUtils.isSquare(matrix58);
        boolean boolean65 = com.operations.Matrix.MatrixUtils.compare(matrix49, matrix58, (double) 100L);
        com.operations.Matrix.Matrix matrix67 = com.operations.Matrix.MatrixTransformations.rotate2D((double) (short) 100);
        double[] doubleArray70 = new double[] { 137.90576492663388d, (byte) -1 };
        double[] doubleArray71 = com.operations.Matrix.MatrixSolver.solveGaussian(matrix67, doubleArray70);
        com.operations.Matrix.Matrix matrix74 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0L, (double) (byte) 10);
        double[] doubleArray77 = new double[] { 10, 'a' };
        double[] doubleArray80 = new double[] { 10, 'a' };
        double[][] doubleArray81 = new double[][] { doubleArray77, doubleArray80 };
        com.operations.Matrix.Matrix matrix82 = new com.operations.Matrix.Matrix(doubleArray81);
        int int83 = matrix82.getCols();
        int int84 = matrix82.getCols();
        int int85 = matrix82.getCols();
        com.operations.Matrix.Matrix[] matrixArray86 = com.operations.Matrix.MatrixDecompositions.luDecomposition(matrix82);
        com.operations.Matrix.Matrix matrix87 = com.operations.Matrix.MatrixOperations.multiply(matrix74, matrix82);
        boolean boolean89 = com.operations.Matrix.MatrixUtils.compare(matrix67, matrix74, (double) (-1L));
        com.operations.Matrix.Matrix matrix90 = com.operations.Matrix.MatrixOperations.subtract(matrix49, matrix74);
        com.operations.Matrix.Matrix matrix91 = com.operations.Matrix.MatrixOperations.add(matrix39, matrix74);
        com.operations.Matrix.Matrix matrix92 = com.operations.Matrix.MatrixOperations.add(matrix22, matrix91);
        com.operations.Matrix.Matrix matrix93 = com.operations.Matrix.MatrixOperations.transpose(matrix91);
        boolean boolean95 = com.operations.Matrix.MatrixUtils.compare(matrix4, matrix91, 98.07140255956371d);
        // The following exception was thrown during execution in test generation
        try {
            matrix91.setValue(32, (int) (short) -1, 41.14922324710797d);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: Index 32 out of bounds for length 2");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(matrix4);
        org.junit.Assert.assertNotNull(matrix7);
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertArrayEquals(doubleArray10, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertArrayEquals(doubleArray13, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 2 + "'", int16 == 2);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 2 + "'", int17 == 2);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 2 + "'", int18 == 2);
        org.junit.Assert.assertNotNull(matrixArray19);
        org.junit.Assert.assertNotNull(matrix20);
        org.junit.Assert.assertNotNull(matrix22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(matrix26);
        org.junit.Assert.assertNotNull(matrix29);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 2 + "'", int30 == 2);
        org.junit.Assert.assertNotNull(matrix32);
        org.junit.Assert.assertTrue("'" + double33 + "' != '" + 10.0d + "'", double33 == 10.0d);
        org.junit.Assert.assertNotNull(matrix36);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 2 + "'", int37 == 2);
        org.junit.Assert.assertNotNull(matrix39);
        org.junit.Assert.assertNotNull(matrix40);
        org.junit.Assert.assertNotNull(matrix41);
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertArrayEquals(doubleArray44, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertArrayEquals(doubleArray47, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 2 + "'", int50 == 2);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 2 + "'", int51 == 2);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 2 + "'", int52 == 2);
        org.junit.Assert.assertNotNull(matrix58);
        org.junit.Assert.assertTrue("'" + double61 + "' != '" + 35.0d + "'", double61 == 35.0d);
        org.junit.Assert.assertTrue("'" + double62 + "' != '" + 350.0d + "'", double62 == 350.0d);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertNotNull(matrix67);
        org.junit.Assert.assertNotNull(doubleArray70);
        org.junit.Assert.assertArrayEquals(doubleArray70, new double[] { 137.90576492663388d, (-1.0d) }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray71);
        org.junit.Assert.assertArrayEquals(doubleArray71, new double[] { (-24.931892522286255d), (-135.63701830716116d) }, 1.0E-15);
        org.junit.Assert.assertNotNull(matrix74);
        org.junit.Assert.assertNotNull(doubleArray77);
        org.junit.Assert.assertArrayEquals(doubleArray77, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray80);
        org.junit.Assert.assertArrayEquals(doubleArray80, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray81);
        org.junit.Assert.assertTrue("'" + int83 + "' != '" + 2 + "'", int83 == 2);
        org.junit.Assert.assertTrue("'" + int84 + "' != '" + 2 + "'", int84 == 2);
        org.junit.Assert.assertTrue("'" + int85 + "' != '" + 2 + "'", int85 == 2);
        org.junit.Assert.assertNotNull(matrixArray86);
        org.junit.Assert.assertNotNull(matrix87);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + false + "'", boolean89 == false);
        org.junit.Assert.assertNotNull(matrix90);
        org.junit.Assert.assertNotNull(matrix91);
        org.junit.Assert.assertNotNull(matrix92);
        org.junit.Assert.assertNotNull(matrix93);
        org.junit.Assert.assertTrue("'" + boolean95 + "' != '" + false + "'", boolean95 == false);
    }

    @Test
    public void test1834() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1834");
        com.operations.Matrix.Matrix matrix4 = com.operations.Matrix.MatrixUtils.generateRandomMatrix((int) '4', (int) '4', 2, (int) (byte) 1);
        double[][] doubleArray5 = matrix4.getData();
        int int6 = matrix4.getCols();
        org.junit.Assert.assertNotNull(matrix4);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 52 + "'", int6 == 52);
    }

    @Test
    public void test1835() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1835");
        com.operations.Matrix.Matrix matrix2 = com.operations.Matrix.MatrixTransformations.project2D(137.90576492663388d, 0.0d);
        double[][] doubleArray3 = matrix2.getData();
        com.operations.Matrix.Matrix matrix4 = new com.operations.Matrix.Matrix(doubleArray3);
        com.operations.Matrix.Matrix matrix7 = com.operations.Matrix.MatrixTransformations.project2D((double) (-1L), (-1.0d));
        com.operations.Matrix.Matrix matrix10 = com.operations.Matrix.MatrixTransformations.scale2D((double) 1.0f, (double) 1);
        com.operations.Matrix.Matrix matrix12 = com.operations.Matrix.MatrixTransformations.rotate2D((double) 1.0f);
        com.operations.Matrix.Matrix matrix15 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0L, (double) (byte) 10);
        int int16 = matrix15.getRows();
        com.operations.Matrix.Matrix matrix18 = com.operations.Matrix.MatrixOperations.scalarMultiply(matrix15, (double) 2);
        double double19 = com.operations.Matrix.MatrixUtils.frobeniusNorm(matrix15);
        com.operations.Matrix.Matrix matrix22 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0L, (double) (byte) 10);
        int int23 = matrix22.getRows();
        com.operations.Matrix.Matrix matrix25 = com.operations.Matrix.MatrixOperations.scalarMultiply(matrix22, (double) 2);
        com.operations.Matrix.Matrix matrix26 = com.operations.Matrix.MatrixOperations.subtract(matrix15, matrix25);
        com.operations.Matrix.Matrix matrix27 = com.operations.Matrix.MatrixOperations.add(matrix12, matrix25);
        boolean boolean29 = com.operations.Matrix.MatrixUtils.compare(matrix10, matrix12, (double) (byte) -1);
        com.operations.Matrix.Matrix matrix30 = com.operations.Matrix.MatrixOperations.transpose(matrix12);
        com.operations.Matrix.Matrix matrix33 = com.operations.Matrix.MatrixTransformations.project2D((double) 10L, 10.0d);
        com.operations.Matrix.Matrix matrix35 = com.operations.Matrix.MatrixTransformations.rotate2D((double) (short) 100);
        double[] doubleArray38 = new double[] { 137.90576492663388d, (byte) -1 };
        double[] doubleArray39 = com.operations.Matrix.MatrixSolver.solveGaussian(matrix35, doubleArray38);
        com.operations.Matrix.Matrix matrix42 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0L, (double) (byte) 10);
        double[] doubleArray45 = new double[] { 10, 'a' };
        double[] doubleArray48 = new double[] { 10, 'a' };
        double[][] doubleArray49 = new double[][] { doubleArray45, doubleArray48 };
        com.operations.Matrix.Matrix matrix50 = new com.operations.Matrix.Matrix(doubleArray49);
        int int51 = matrix50.getCols();
        int int52 = matrix50.getCols();
        int int53 = matrix50.getCols();
        com.operations.Matrix.Matrix[] matrixArray54 = com.operations.Matrix.MatrixDecompositions.luDecomposition(matrix50);
        com.operations.Matrix.Matrix matrix55 = com.operations.Matrix.MatrixOperations.multiply(matrix42, matrix50);
        boolean boolean57 = com.operations.Matrix.MatrixUtils.compare(matrix35, matrix42, (double) (-1L));
        double[][] doubleArray58 = matrix35.getData();
        com.operations.Matrix.Matrix matrix60 = com.operations.Matrix.MatrixTransformations.rotate2D((double) (short) 100);
        double[] doubleArray63 = new double[] { 137.90576492663388d, (byte) -1 };
        double[] doubleArray64 = com.operations.Matrix.MatrixSolver.solveGaussian(matrix60, doubleArray63);
        double[] doubleArray65 = com.operations.Matrix.MatrixSolver.solveGaussian(matrix35, doubleArray63);
        double[] doubleArray66 = com.operations.Matrix.MatrixSolver.solveGaussian(matrix33, doubleArray65);
        double[] doubleArray67 = com.operations.Matrix.MatrixSolver.solveGaussian(matrix12, doubleArray66);
        double[] doubleArray68 = com.operations.Matrix.MatrixSolver.solveGaussian(matrix7, doubleArray66);
        // The following exception was thrown during execution in test generation
        try {
            double[] doubleArray69 = com.operations.Matrix.MatrixSolver.solveGaussian(matrix4, doubleArray66);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Matrix is singular or nearly singular.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(matrix2);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertNotNull(matrix7);
        org.junit.Assert.assertNotNull(matrix10);
        org.junit.Assert.assertNotNull(matrix12);
        org.junit.Assert.assertNotNull(matrix15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 2 + "'", int16 == 2);
        org.junit.Assert.assertNotNull(matrix18);
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 10.0d + "'", double19 == 10.0d);
        org.junit.Assert.assertNotNull(matrix22);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 2 + "'", int23 == 2);
        org.junit.Assert.assertNotNull(matrix25);
        org.junit.Assert.assertNotNull(matrix26);
        org.junit.Assert.assertNotNull(matrix27);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(matrix30);
        org.junit.Assert.assertNotNull(matrix33);
        org.junit.Assert.assertNotNull(matrix35);
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertArrayEquals(doubleArray38, new double[] { 137.90576492663388d, (-1.0d) }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertArrayEquals(doubleArray39, new double[] { (-24.931892522286255d), (-135.63701830716116d) }, 1.0E-15);
        org.junit.Assert.assertNotNull(matrix42);
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertArrayEquals(doubleArray45, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertArrayEquals(doubleArray48, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 2 + "'", int51 == 2);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 2 + "'", int52 == 2);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 2 + "'", int53 == 2);
        org.junit.Assert.assertNotNull(matrixArray54);
        org.junit.Assert.assertNotNull(matrix55);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNotNull(doubleArray58);
        org.junit.Assert.assertNotNull(matrix60);
        org.junit.Assert.assertNotNull(doubleArray63);
        org.junit.Assert.assertArrayEquals(doubleArray63, new double[] { 137.90576492663388d, (-1.0d) }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray64);
        org.junit.Assert.assertArrayEquals(doubleArray64, new double[] { (-24.931892522286255d), (-135.63701830716116d) }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray65);
        org.junit.Assert.assertArrayEquals(doubleArray65, new double[] { (-24.931892522286255d), (-135.63701830716116d) }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray66);
        org.junit.Assert.assertArrayEquals(doubleArray66, new double[] { (-2.4931892522286256d), (-13.563701830716116d) }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray67);
        org.junit.Assert.assertArrayEquals(doubleArray67, new double[] { (-2.7295287645732618d), (-13.518123861075072d) }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray68);
        org.junit.Assert.assertArrayEquals(doubleArray68, new double[] { 2.4931892522286256d, 13.563701830716116d }, 1.0E-15);
    }

    @Test
    public void test1836() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1836");
        com.operations.Matrix.Matrix matrix2 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0L, (double) (byte) 10);
        double[] doubleArray5 = new double[] { 10, 'a' };
        double[] doubleArray8 = new double[] { 10, 'a' };
        double[][] doubleArray9 = new double[][] { doubleArray5, doubleArray8 };
        com.operations.Matrix.Matrix matrix10 = new com.operations.Matrix.Matrix(doubleArray9);
        int int11 = matrix10.getCols();
        int int12 = matrix10.getCols();
        int int13 = matrix10.getCols();
        com.operations.Matrix.Matrix[] matrixArray14 = com.operations.Matrix.MatrixDecompositions.luDecomposition(matrix10);
        com.operations.Matrix.Matrix matrix15 = com.operations.Matrix.MatrixOperations.multiply(matrix2, matrix10);
        com.operations.Matrix.Matrix matrix17 = com.operations.Matrix.MatrixTransformations.rotate2D((double) (short) 100);
        boolean boolean19 = com.operations.Matrix.MatrixUtils.compare(matrix10, matrix17, (double) (byte) 0);
        double[] doubleArray22 = new double[] { 10, 'a' };
        double[] doubleArray25 = new double[] { 10, 'a' };
        double[][] doubleArray26 = new double[][] { doubleArray22, doubleArray25 };
        com.operations.Matrix.Matrix matrix27 = new com.operations.Matrix.Matrix(doubleArray26);
        com.operations.Matrix.Matrix matrix28 = com.operations.Matrix.MatrixOperations.multiply(matrix10, matrix27);
        // The following exception was thrown during execution in test generation
        try {
            matrix28.setValue((int) ' ', 0, 22.360679774997898d);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: Index 32 out of bounds for length 2");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(matrix2);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertArrayEquals(doubleArray5, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertArrayEquals(doubleArray8, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 2 + "'", int11 == 2);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 2 + "'", int12 == 2);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 2 + "'", int13 == 2);
        org.junit.Assert.assertNotNull(matrixArray14);
        org.junit.Assert.assertNotNull(matrix15);
        org.junit.Assert.assertNotNull(matrix17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertArrayEquals(doubleArray22, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertArrayEquals(doubleArray25, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertNotNull(matrix28);
    }

    @Test
    public void test1837() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1837");
        com.operations.Matrix.Matrix matrix0 = null;
        com.operations.Matrix.Matrix matrix3 = com.operations.Matrix.MatrixTransformations.project2D((double) ' ', 0.0d);
        double[] doubleArray6 = new double[] { 10, 'a' };
        double[] doubleArray9 = new double[] { 10, 'a' };
        double[][] doubleArray10 = new double[][] { doubleArray6, doubleArray9 };
        com.operations.Matrix.Matrix matrix11 = new com.operations.Matrix.Matrix(doubleArray10);
        int int12 = matrix11.getCols();
        boolean boolean13 = com.operations.Matrix.MatrixUtils.isSquare(matrix11);
        com.operations.Matrix.Matrix matrix14 = com.operations.Matrix.MatrixOperations.transpose(matrix11);
        int int15 = matrix14.getRows();
        com.operations.Matrix.Matrix matrix18 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0L, (double) (byte) 10);
        double[] doubleArray21 = new double[] { 10, 'a' };
        double[] doubleArray24 = new double[] { 10, 'a' };
        double[][] doubleArray25 = new double[][] { doubleArray21, doubleArray24 };
        com.operations.Matrix.Matrix matrix26 = new com.operations.Matrix.Matrix(doubleArray25);
        int int27 = matrix26.getCols();
        int int28 = matrix26.getCols();
        int int29 = matrix26.getCols();
        com.operations.Matrix.Matrix[] matrixArray30 = com.operations.Matrix.MatrixDecompositions.luDecomposition(matrix26);
        com.operations.Matrix.Matrix matrix31 = com.operations.Matrix.MatrixOperations.multiply(matrix18, matrix26);
        com.operations.Matrix.Matrix matrix33 = com.operations.Matrix.MatrixTransformations.rotate2D((double) (short) 100);
        boolean boolean35 = com.operations.Matrix.MatrixUtils.compare(matrix26, matrix33, (double) (byte) 0);
        com.operations.Matrix.Matrix matrix36 = com.operations.Matrix.MatrixOperations.multiply(matrix14, matrix26);
        com.operations.Matrix.Matrix matrix37 = com.operations.Matrix.MatrixOperations.add(matrix3, matrix26);
        com.operations.Matrix.Matrix matrix38 = com.operations.Matrix.MatrixOperations.transpose(matrix3);
        com.operations.Matrix.Matrix matrix41 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0L, (double) (byte) 10);
        double[] doubleArray44 = new double[] { 10, 'a' };
        double[] doubleArray47 = new double[] { 10, 'a' };
        double[][] doubleArray48 = new double[][] { doubleArray44, doubleArray47 };
        com.operations.Matrix.Matrix matrix49 = new com.operations.Matrix.Matrix(doubleArray48);
        int int50 = matrix49.getCols();
        int int51 = matrix49.getCols();
        int int52 = matrix49.getCols();
        com.operations.Matrix.Matrix[] matrixArray53 = com.operations.Matrix.MatrixDecompositions.luDecomposition(matrix49);
        com.operations.Matrix.Matrix matrix54 = com.operations.Matrix.MatrixOperations.multiply(matrix41, matrix49);
        com.operations.Matrix.Matrix matrix56 = com.operations.Matrix.MatrixTransformations.rotate2D((double) (short) 100);
        boolean boolean58 = com.operations.Matrix.MatrixUtils.compare(matrix49, matrix56, (double) (byte) 0);
        double[] doubleArray61 = new double[] { 10, 'a' };
        double[] doubleArray64 = new double[] { 10, 'a' };
        double[][] doubleArray65 = new double[][] { doubleArray61, doubleArray64 };
        com.operations.Matrix.Matrix matrix66 = new com.operations.Matrix.Matrix(doubleArray65);
        com.operations.Matrix.Matrix matrix67 = new com.operations.Matrix.Matrix(doubleArray65);
        com.operations.Matrix.Matrix matrix68 = new com.operations.Matrix.Matrix(doubleArray65);
        boolean boolean70 = com.operations.Matrix.MatrixUtils.compare(matrix49, matrix68, (double) (-1));
        com.operations.Matrix.Matrix matrix72 = com.operations.Matrix.MatrixTransformations.rotate2D((double) (short) 100);
        double[] doubleArray75 = new double[] { 137.90576492663388d, (byte) -1 };
        double[] doubleArray76 = com.operations.Matrix.MatrixSolver.solveGaussian(matrix72, doubleArray75);
        com.operations.Matrix.Matrix matrix79 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0L, (double) (byte) 10);
        double[] doubleArray82 = new double[] { 10, 'a' };
        double[] doubleArray85 = new double[] { 10, 'a' };
        double[][] doubleArray86 = new double[][] { doubleArray82, doubleArray85 };
        com.operations.Matrix.Matrix matrix87 = new com.operations.Matrix.Matrix(doubleArray86);
        int int88 = matrix87.getCols();
        int int89 = matrix87.getCols();
        int int90 = matrix87.getCols();
        com.operations.Matrix.Matrix[] matrixArray91 = com.operations.Matrix.MatrixDecompositions.luDecomposition(matrix87);
        com.operations.Matrix.Matrix matrix92 = com.operations.Matrix.MatrixOperations.multiply(matrix79, matrix87);
        boolean boolean94 = com.operations.Matrix.MatrixUtils.compare(matrix72, matrix79, (double) (-1L));
        com.operations.Matrix.Matrix matrix95 = com.operations.Matrix.MatrixOperations.add(matrix68, matrix79);
        com.operations.Matrix.Matrix matrix96 = com.operations.Matrix.MatrixOperations.subtract(matrix38, matrix95);
        // The following exception was thrown during execution in test generation
        try {
            com.operations.Matrix.Matrix matrix97 = com.operations.Matrix.MatrixOperations.subtract(matrix0, matrix38);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot invoke \"com.operations.Matrix.Matrix.getRows()\" because \"a\" is null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(matrix3);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertArrayEquals(doubleArray6, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertArrayEquals(doubleArray9, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 2 + "'", int12 == 2);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNotNull(matrix14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 2 + "'", int15 == 2);
        org.junit.Assert.assertNotNull(matrix18);
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertArrayEquals(doubleArray21, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertArrayEquals(doubleArray24, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 2 + "'", int27 == 2);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 2 + "'", int28 == 2);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 2 + "'", int29 == 2);
        org.junit.Assert.assertNotNull(matrixArray30);
        org.junit.Assert.assertNotNull(matrix31);
        org.junit.Assert.assertNotNull(matrix33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(matrix36);
        org.junit.Assert.assertNotNull(matrix37);
        org.junit.Assert.assertNotNull(matrix38);
        org.junit.Assert.assertNotNull(matrix41);
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertArrayEquals(doubleArray44, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertArrayEquals(doubleArray47, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 2 + "'", int50 == 2);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 2 + "'", int51 == 2);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 2 + "'", int52 == 2);
        org.junit.Assert.assertNotNull(matrixArray53);
        org.junit.Assert.assertNotNull(matrix54);
        org.junit.Assert.assertNotNull(matrix56);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(doubleArray61);
        org.junit.Assert.assertArrayEquals(doubleArray61, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray64);
        org.junit.Assert.assertArrayEquals(doubleArray64, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray65);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertNotNull(matrix72);
        org.junit.Assert.assertNotNull(doubleArray75);
        org.junit.Assert.assertArrayEquals(doubleArray75, new double[] { 137.90576492663388d, (-1.0d) }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray76);
        org.junit.Assert.assertArrayEquals(doubleArray76, new double[] { (-24.931892522286255d), (-135.63701830716116d) }, 1.0E-15);
        org.junit.Assert.assertNotNull(matrix79);
        org.junit.Assert.assertNotNull(doubleArray82);
        org.junit.Assert.assertArrayEquals(doubleArray82, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray85);
        org.junit.Assert.assertArrayEquals(doubleArray85, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray86);
        org.junit.Assert.assertTrue("'" + int88 + "' != '" + 2 + "'", int88 == 2);
        org.junit.Assert.assertTrue("'" + int89 + "' != '" + 2 + "'", int89 == 2);
        org.junit.Assert.assertTrue("'" + int90 + "' != '" + 2 + "'", int90 == 2);
        org.junit.Assert.assertNotNull(matrixArray91);
        org.junit.Assert.assertNotNull(matrix92);
        org.junit.Assert.assertTrue("'" + boolean94 + "' != '" + false + "'", boolean94 == false);
        org.junit.Assert.assertNotNull(matrix95);
        org.junit.Assert.assertNotNull(matrix96);
    }

    @Test
    public void test1838() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1838");
        double[] doubleArray2 = new double[] { 10, 'a' };
        double[] doubleArray5 = new double[] { 10, 'a' };
        double[][] doubleArray6 = new double[][] { doubleArray2, doubleArray5 };
        com.operations.Matrix.Matrix matrix7 = new com.operations.Matrix.Matrix(doubleArray6);
        com.operations.Matrix.Matrix matrix8 = new com.operations.Matrix.Matrix(doubleArray6);
        com.operations.Matrix.Matrix[] matrixArray9 = com.operations.Matrix.MatrixDecompositions.luDecomposition(matrix8);
        com.operations.Matrix.Matrix matrix12 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0, (double) 100L);
        com.operations.Matrix.Matrix matrix13 = com.operations.Matrix.MatrixOperations.subtract(matrix8, matrix12);
        double[][] doubleArray14 = matrix13.getData();
        com.operations.Matrix.Matrix matrix15 = new com.operations.Matrix.Matrix(doubleArray14);
        com.operations.Matrix.Matrix matrix17 = com.operations.Matrix.MatrixTransformations.rotate2D(100.0d);
        com.operations.Matrix.Matrix matrix18 = com.operations.Matrix.MatrixOperations.subtract(matrix15, matrix17);
        java.lang.Class<?> wildcardClass19 = matrix18.getClass();
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertArrayEquals(doubleArray2, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertArrayEquals(doubleArray5, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertNotNull(matrixArray9);
        org.junit.Assert.assertNotNull(matrix12);
        org.junit.Assert.assertNotNull(matrix13);
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertNotNull(matrix17);
        org.junit.Assert.assertNotNull(matrix18);
        org.junit.Assert.assertNotNull(wildcardClass19);
    }

    @Test
    public void test1839() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1839");
        com.operations.Matrix.Matrix matrix1 = com.operations.Matrix.MatrixTransformations.rotate2D((double) (short) 100);
        double[] doubleArray4 = new double[] { 137.90576492663388d, (byte) -1 };
        double[] doubleArray5 = com.operations.Matrix.MatrixSolver.solveGaussian(matrix1, doubleArray4);
        com.operations.Matrix.Matrix matrix8 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0L, (double) (byte) 10);
        double[] doubleArray11 = new double[] { 10, 'a' };
        double[] doubleArray14 = new double[] { 10, 'a' };
        double[][] doubleArray15 = new double[][] { doubleArray11, doubleArray14 };
        com.operations.Matrix.Matrix matrix16 = new com.operations.Matrix.Matrix(doubleArray15);
        int int17 = matrix16.getCols();
        int int18 = matrix16.getCols();
        int int19 = matrix16.getCols();
        com.operations.Matrix.Matrix[] matrixArray20 = com.operations.Matrix.MatrixDecompositions.luDecomposition(matrix16);
        com.operations.Matrix.Matrix matrix21 = com.operations.Matrix.MatrixOperations.multiply(matrix8, matrix16);
        boolean boolean23 = com.operations.Matrix.MatrixUtils.compare(matrix1, matrix8, (double) (-1L));
        boolean boolean24 = com.operations.Matrix.MatrixUtils.isSymmetric(matrix1);
        int int25 = matrix1.getCols();
        com.operations.Matrix.Matrix[] matrixArray26 = com.operations.Matrix.MatrixDecompositions.luDecomposition(matrix1);
        double double27 = com.operations.Matrix.MatrixUtils.frobeniusNorm(matrix1);
        double double28 = com.operations.Matrix.MatrixUtils.frobeniusNorm(matrix1);
        double[][] doubleArray29 = matrix1.getData();
        com.operations.Matrix.Matrix matrix30 = new com.operations.Matrix.Matrix(doubleArray29);
        boolean boolean31 = com.operations.Matrix.MatrixUtils.isSquare(matrix30);
        double double32 = com.operations.Matrix.MatrixUtils.frobeniusNorm(matrix30);
        org.junit.Assert.assertNotNull(matrix1);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertArrayEquals(doubleArray4, new double[] { 137.90576492663388d, (-1.0d) }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertArrayEquals(doubleArray5, new double[] { (-24.931892522286255d), (-135.63701830716116d) }, 1.0E-15);
        org.junit.Assert.assertNotNull(matrix8);
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertArrayEquals(doubleArray11, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertArrayEquals(doubleArray14, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 2 + "'", int17 == 2);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 2 + "'", int18 == 2);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 2 + "'", int19 == 2);
        org.junit.Assert.assertNotNull(matrixArray20);
        org.junit.Assert.assertNotNull(matrix21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 2 + "'", int25 == 2);
        org.junit.Assert.assertNotNull(matrixArray26);
        org.junit.Assert.assertTrue("'" + double27 + "' != '" + 1.414213562373095d + "'", double27 == 1.414213562373095d);
        org.junit.Assert.assertTrue("'" + double28 + "' != '" + 1.414213562373095d + "'", double28 == 1.414213562373095d);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertTrue("'" + double32 + "' != '" + 1.414213562373095d + "'", double32 == 1.414213562373095d);
    }

    @Test
    public void test1840() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1840");
        double[] doubleArray2 = new double[] { 10, 'a' };
        double[] doubleArray5 = new double[] { 10, 'a' };
        double[][] doubleArray6 = new double[][] { doubleArray2, doubleArray5 };
        com.operations.Matrix.Matrix matrix7 = new com.operations.Matrix.Matrix(doubleArray6);
        com.operations.Matrix.Matrix matrix8 = com.operations.Matrix.MatrixOperations.transpose(matrix7);
        com.operations.Matrix.Matrix matrix11 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0L, (double) (byte) 10);
        int int12 = matrix11.getRows();
        com.operations.Matrix.Matrix matrix18 = com.operations.Matrix.MatrixUtils.generateRandomMatrix(100, (int) (byte) 1, (int) '#', (int) '#', 1L);
        boolean boolean20 = com.operations.Matrix.MatrixUtils.compare(matrix11, matrix18, (double) 1.0f);
        com.operations.Matrix.Matrix matrix22 = com.operations.Matrix.MatrixOperations.scalarMultiply(matrix11, (double) 1L);
        matrix11.print();
        com.operations.Matrix.Matrix matrix24 = com.operations.Matrix.MatrixOperations.multiply(matrix8, matrix11);
        // The following exception was thrown during execution in test generation
        try {
            double double27 = matrix11.getValue(100, (int) 'a');
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertArrayEquals(doubleArray2, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertArrayEquals(doubleArray5, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertNotNull(matrix8);
        org.junit.Assert.assertNotNull(matrix11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 2 + "'", int12 == 2);
        org.junit.Assert.assertNotNull(matrix18);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(matrix22);
        org.junit.Assert.assertNotNull(matrix24);
    }

    @Test
    public void test1841() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1841");
        com.operations.Matrix.Matrix matrix2 = com.operations.Matrix.MatrixTransformations.scale2D(3500.0d, 3200.015624961853d);
        org.junit.Assert.assertNotNull(matrix2);
    }

    @Test
    public void test1842() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1842");
        // The following exception was thrown during execution in test generation
        try {
            com.operations.Matrix.Matrix matrix4 = com.operations.Matrix.MatrixUtils.generateRandomMatrix((int) (short) 0, 0, 100, 2);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
    }

    @Test
    public void test1843() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1843");
        com.operations.Matrix.Matrix matrix2 = com.operations.Matrix.MatrixTransformations.project2D((double) (-1.0f), 364.0054944640259d);
        com.operations.Matrix.Matrix matrix4 = com.operations.Matrix.MatrixTransformations.rotate2D((double) (-1L));
        com.operations.Matrix.Matrix matrix6 = com.operations.Matrix.MatrixTransformations.rotate2D((double) (short) 100);
        double[] doubleArray9 = new double[] { 137.90576492663388d, (byte) -1 };
        double[] doubleArray10 = com.operations.Matrix.MatrixSolver.solveGaussian(matrix6, doubleArray9);
        double[] doubleArray11 = com.operations.Matrix.MatrixSolver.solveGaussian(matrix4, doubleArray9);
        double[][] doubleArray12 = matrix4.getData();
        boolean boolean14 = com.operations.Matrix.MatrixUtils.compare(matrix2, matrix4, 391.8840992892044d);
        com.operations.Matrix.Matrix matrix16 = com.operations.Matrix.MatrixTransformations.rotate2D(100.0d);
        int int17 = matrix16.getCols();
        matrix16.print();
        com.operations.Matrix.Matrix matrix20 = com.operations.Matrix.MatrixOperations.scalarMultiply(matrix16, (double) (byte) 1);
        com.operations.Matrix.Matrix matrix22 = com.operations.Matrix.MatrixTransformations.rotate2D(100.0d);
        int int23 = matrix22.getCols();
        int int24 = matrix22.getRows();
        com.operations.Matrix.Matrix matrix27 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0L, (double) (byte) 10);
        int int28 = matrix27.getRows();
        com.operations.Matrix.Matrix matrix30 = com.operations.Matrix.MatrixOperations.scalarMultiply(matrix27, (double) 2);
        double double31 = com.operations.Matrix.MatrixUtils.frobeniusNorm(matrix27);
        com.operations.Matrix.Matrix matrix32 = com.operations.Matrix.MatrixOperations.add(matrix22, matrix27);
        double[] doubleArray35 = new double[] { 10, 'a' };
        double[] doubleArray38 = new double[] { 10, 'a' };
        double[][] doubleArray39 = new double[][] { doubleArray35, doubleArray38 };
        com.operations.Matrix.Matrix matrix40 = new com.operations.Matrix.Matrix(doubleArray39);
        com.operations.Matrix.Matrix matrix41 = new com.operations.Matrix.Matrix(doubleArray39);
        com.operations.Matrix.Matrix matrix43 = com.operations.Matrix.MatrixTransformations.rotate2D((double) (short) 100);
        double[] doubleArray46 = new double[] { 137.90576492663388d, (byte) -1 };
        double[] doubleArray47 = com.operations.Matrix.MatrixSolver.solveGaussian(matrix43, doubleArray46);
        com.operations.Matrix.Matrix matrix48 = com.operations.Matrix.MatrixOperations.add(matrix41, matrix43);
        com.operations.Matrix.Matrix matrix49 = com.operations.Matrix.MatrixOperations.transpose(matrix43);
        com.operations.Matrix.Matrix matrix51 = com.operations.Matrix.MatrixTransformations.rotate2D((double) (short) 100);
        com.operations.Matrix.Matrix matrix52 = com.operations.Matrix.MatrixOperations.subtract(matrix43, matrix51);
        com.operations.Matrix.Matrix matrix53 = com.operations.Matrix.MatrixOperations.multiply(matrix22, matrix51);
        com.operations.Matrix.Matrix matrix55 = com.operations.Matrix.MatrixOperations.scalarMultiply(matrix22, 146.4308710620817d);
        com.operations.Matrix.Matrix matrix58 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0L, (double) (byte) 10);
        double[] doubleArray61 = new double[] { 10, 'a' };
        double[] doubleArray64 = new double[] { 10, 'a' };
        double[][] doubleArray65 = new double[][] { doubleArray61, doubleArray64 };
        com.operations.Matrix.Matrix matrix66 = new com.operations.Matrix.Matrix(doubleArray65);
        int int67 = matrix66.getCols();
        int int68 = matrix66.getCols();
        int int69 = matrix66.getCols();
        com.operations.Matrix.Matrix[] matrixArray70 = com.operations.Matrix.MatrixDecompositions.luDecomposition(matrix66);
        com.operations.Matrix.Matrix matrix71 = com.operations.Matrix.MatrixOperations.multiply(matrix58, matrix66);
        com.operations.Matrix.Matrix matrix73 = com.operations.Matrix.MatrixTransformations.rotate2D((double) (short) 100);
        boolean boolean75 = com.operations.Matrix.MatrixUtils.compare(matrix66, matrix73, (double) (byte) 0);
        com.operations.Matrix.Matrix matrix76 = com.operations.Matrix.MatrixOperations.transpose(matrix66);
        com.operations.Matrix.Matrix matrix78 = com.operations.Matrix.MatrixOperations.scalarMultiply(matrix76, (double) 10);
        double double79 = com.operations.Matrix.MatrixUtils.frobeniusNorm(matrix76);
        com.operations.Matrix.Matrix matrix80 = com.operations.Matrix.MatrixOperations.add(matrix22, matrix76);
        boolean boolean82 = com.operations.Matrix.MatrixUtils.compare(matrix16, matrix76, (double) 2);
        com.operations.Matrix.Matrix matrix83 = com.operations.Matrix.MatrixOperations.add(matrix2, matrix16);
        org.junit.Assert.assertNotNull(matrix2);
        org.junit.Assert.assertNotNull(matrix4);
        org.junit.Assert.assertNotNull(matrix6);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertArrayEquals(doubleArray9, new double[] { 137.90576492663388d, (-1.0d) }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertArrayEquals(doubleArray10, new double[] { (-24.931892522286255d), (-135.63701830716116d) }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertArrayEquals(doubleArray11, new double[] { 137.90221361711127d, 1.4069397643877004d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNotNull(matrix16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 2 + "'", int17 == 2);
        org.junit.Assert.assertNotNull(matrix20);
        org.junit.Assert.assertNotNull(matrix22);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 2 + "'", int23 == 2);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 2 + "'", int24 == 2);
        org.junit.Assert.assertNotNull(matrix27);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 2 + "'", int28 == 2);
        org.junit.Assert.assertNotNull(matrix30);
        org.junit.Assert.assertTrue("'" + double31 + "' != '" + 10.0d + "'", double31 == 10.0d);
        org.junit.Assert.assertNotNull(matrix32);
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertArrayEquals(doubleArray35, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertArrayEquals(doubleArray38, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertNotNull(matrix43);
        org.junit.Assert.assertNotNull(doubleArray46);
        org.junit.Assert.assertArrayEquals(doubleArray46, new double[] { 137.90576492663388d, (-1.0d) }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertArrayEquals(doubleArray47, new double[] { (-24.931892522286255d), (-135.63701830716116d) }, 1.0E-15);
        org.junit.Assert.assertNotNull(matrix48);
        org.junit.Assert.assertNotNull(matrix49);
        org.junit.Assert.assertNotNull(matrix51);
        org.junit.Assert.assertNotNull(matrix52);
        org.junit.Assert.assertNotNull(matrix53);
        org.junit.Assert.assertNotNull(matrix55);
        org.junit.Assert.assertNotNull(matrix58);
        org.junit.Assert.assertNotNull(doubleArray61);
        org.junit.Assert.assertArrayEquals(doubleArray61, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray64);
        org.junit.Assert.assertArrayEquals(doubleArray64, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray65);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 2 + "'", int67 == 2);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 2 + "'", int68 == 2);
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 2 + "'", int69 == 2);
        org.junit.Assert.assertNotNull(matrixArray70);
        org.junit.Assert.assertNotNull(matrix71);
        org.junit.Assert.assertNotNull(matrix73);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertNotNull(matrix76);
        org.junit.Assert.assertNotNull(matrix78);
        org.junit.Assert.assertTrue("'" + double79 + "' != '" + 137.90576492663388d + "'", double79 == 137.90576492663388d);
        org.junit.Assert.assertNotNull(matrix80);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
        org.junit.Assert.assertNotNull(matrix83);
    }

    @Test
    public void test1844() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1844");
        com.operations.Matrix.Matrix matrix2 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0L, (double) 10L);
        com.operations.Matrix.Matrix matrix5 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0L, (double) (byte) 10);
        double[] doubleArray8 = new double[] { 10, 'a' };
        double[] doubleArray11 = new double[] { 10, 'a' };
        double[][] doubleArray12 = new double[][] { doubleArray8, doubleArray11 };
        com.operations.Matrix.Matrix matrix13 = new com.operations.Matrix.Matrix(doubleArray12);
        int int14 = matrix13.getCols();
        int int15 = matrix13.getCols();
        int int16 = matrix13.getCols();
        com.operations.Matrix.Matrix[] matrixArray17 = com.operations.Matrix.MatrixDecompositions.luDecomposition(matrix13);
        com.operations.Matrix.Matrix matrix18 = com.operations.Matrix.MatrixOperations.multiply(matrix5, matrix13);
        com.operations.Matrix.Matrix matrix20 = com.operations.Matrix.MatrixTransformations.rotate2D((double) (short) 100);
        boolean boolean22 = com.operations.Matrix.MatrixUtils.compare(matrix13, matrix20, (double) (byte) 0);
        double[] doubleArray25 = new double[] { 10, 'a' };
        double[] doubleArray28 = new double[] { 10, 'a' };
        double[][] doubleArray29 = new double[][] { doubleArray25, doubleArray28 };
        com.operations.Matrix.Matrix matrix30 = new com.operations.Matrix.Matrix(doubleArray29);
        com.operations.Matrix.Matrix matrix31 = new com.operations.Matrix.Matrix(doubleArray29);
        com.operations.Matrix.Matrix matrix32 = new com.operations.Matrix.Matrix(doubleArray29);
        boolean boolean34 = com.operations.Matrix.MatrixUtils.compare(matrix13, matrix32, (double) (-1));
        com.operations.Matrix.Matrix matrix36 = com.operations.Matrix.MatrixTransformations.rotate2D((double) (short) 100);
        double[] doubleArray39 = new double[] { 137.90576492663388d, (byte) -1 };
        double[] doubleArray40 = com.operations.Matrix.MatrixSolver.solveGaussian(matrix36, doubleArray39);
        com.operations.Matrix.Matrix matrix43 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0L, (double) (byte) 10);
        double[] doubleArray46 = new double[] { 10, 'a' };
        double[] doubleArray49 = new double[] { 10, 'a' };
        double[][] doubleArray50 = new double[][] { doubleArray46, doubleArray49 };
        com.operations.Matrix.Matrix matrix51 = new com.operations.Matrix.Matrix(doubleArray50);
        int int52 = matrix51.getCols();
        int int53 = matrix51.getCols();
        int int54 = matrix51.getCols();
        com.operations.Matrix.Matrix[] matrixArray55 = com.operations.Matrix.MatrixDecompositions.luDecomposition(matrix51);
        com.operations.Matrix.Matrix matrix56 = com.operations.Matrix.MatrixOperations.multiply(matrix43, matrix51);
        boolean boolean58 = com.operations.Matrix.MatrixUtils.compare(matrix36, matrix43, (double) (-1L));
        com.operations.Matrix.Matrix matrix59 = com.operations.Matrix.MatrixOperations.add(matrix32, matrix43);
        boolean boolean61 = com.operations.Matrix.MatrixUtils.compare(matrix2, matrix59, 146.4308710620817d);
        com.operations.Matrix.Matrix matrix63 = com.operations.Matrix.MatrixOperations.scalarMultiply(matrix59, (double) 100L);
        com.operations.Matrix.Matrix matrix64 = com.operations.Matrix.MatrixDecompositions.choleskyDecomposition(matrix63);
        com.operations.Matrix.Matrix matrix66 = com.operations.Matrix.MatrixOperations.scalarMultiply(matrix63, (double) (short) 1);
        java.lang.Class<?> wildcardClass67 = matrix66.getClass();
        org.junit.Assert.assertNotNull(matrix2);
        org.junit.Assert.assertNotNull(matrix5);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertArrayEquals(doubleArray8, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertArrayEquals(doubleArray11, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 2 + "'", int14 == 2);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 2 + "'", int15 == 2);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 2 + "'", int16 == 2);
        org.junit.Assert.assertNotNull(matrixArray17);
        org.junit.Assert.assertNotNull(matrix18);
        org.junit.Assert.assertNotNull(matrix20);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertArrayEquals(doubleArray25, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertArrayEquals(doubleArray28, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(matrix36);
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertArrayEquals(doubleArray39, new double[] { 137.90576492663388d, (-1.0d) }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertArrayEquals(doubleArray40, new double[] { (-24.931892522286255d), (-135.63701830716116d) }, 1.0E-15);
        org.junit.Assert.assertNotNull(matrix43);
        org.junit.Assert.assertNotNull(doubleArray46);
        org.junit.Assert.assertArrayEquals(doubleArray46, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertArrayEquals(doubleArray49, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 2 + "'", int52 == 2);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 2 + "'", int53 == 2);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 2 + "'", int54 == 2);
        org.junit.Assert.assertNotNull(matrixArray55);
        org.junit.Assert.assertNotNull(matrix56);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(matrix59);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + true + "'", boolean61 == true);
        org.junit.Assert.assertNotNull(matrix63);
        org.junit.Assert.assertNotNull(matrix64);
        org.junit.Assert.assertNotNull(matrix66);
        org.junit.Assert.assertNotNull(wildcardClass67);
    }

    @Test
    public void test1845() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1845");
        double[] doubleArray2 = new double[] { 10, 'a' };
        double[] doubleArray5 = new double[] { 10, 'a' };
        double[][] doubleArray6 = new double[][] { doubleArray2, doubleArray5 };
        com.operations.Matrix.Matrix matrix7 = new com.operations.Matrix.Matrix(doubleArray6);
        com.operations.Matrix.Matrix matrix8 = new com.operations.Matrix.Matrix(doubleArray6);
        com.operations.Matrix.Matrix matrix10 = com.operations.Matrix.MatrixTransformations.rotate2D((double) (short) 100);
        double[] doubleArray13 = new double[] { 137.90576492663388d, (byte) -1 };
        double[] doubleArray14 = com.operations.Matrix.MatrixSolver.solveGaussian(matrix10, doubleArray13);
        com.operations.Matrix.Matrix matrix15 = com.operations.Matrix.MatrixOperations.add(matrix8, matrix10);
        com.operations.Matrix.Matrix matrix16 = com.operations.Matrix.MatrixOperations.transpose(matrix10);
        int int17 = matrix10.getCols();
        int int18 = matrix10.getRows();
        double[] doubleArray21 = new double[] { 10, 'a' };
        double[] doubleArray24 = new double[] { 10, 'a' };
        double[][] doubleArray25 = new double[][] { doubleArray21, doubleArray24 };
        com.operations.Matrix.Matrix matrix26 = new com.operations.Matrix.Matrix(doubleArray25);
        int int27 = matrix26.getCols();
        int int28 = matrix26.getCols();
        matrix26.print();
        double[] doubleArray32 = new double[] { 10, 'a' };
        double[] doubleArray35 = new double[] { 10, 'a' };
        double[][] doubleArray36 = new double[][] { doubleArray32, doubleArray35 };
        com.operations.Matrix.Matrix matrix37 = new com.operations.Matrix.Matrix(doubleArray36);
        boolean boolean39 = com.operations.Matrix.MatrixUtils.compare(matrix26, matrix37, (double) (-1));
        com.operations.Matrix.Matrix matrix40 = com.operations.Matrix.MatrixOperations.multiply(matrix10, matrix26);
        double double43 = matrix10.getValue((int) (short) 0, 0);
        com.operations.Matrix.Matrix matrix44 = com.operations.Matrix.MatrixOperations.transpose(matrix10);
        // The following exception was thrown during execution in test generation
        try {
            com.operations.Matrix.Matrix matrix45 = com.operations.Matrix.MatrixDecompositions.choleskyDecomposition(matrix10);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Matrix is not positive definite.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertArrayEquals(doubleArray2, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertArrayEquals(doubleArray5, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertNotNull(matrix10);
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertArrayEquals(doubleArray13, new double[] { 137.90576492663388d, (-1.0d) }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertArrayEquals(doubleArray14, new double[] { (-24.931892522286255d), (-135.63701830716116d) }, 1.0E-15);
        org.junit.Assert.assertNotNull(matrix15);
        org.junit.Assert.assertNotNull(matrix16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 2 + "'", int17 == 2);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 2 + "'", int18 == 2);
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertArrayEquals(doubleArray21, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertArrayEquals(doubleArray24, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 2 + "'", int27 == 2);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 2 + "'", int28 == 2);
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertArrayEquals(doubleArray32, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertArrayEquals(doubleArray35, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(matrix40);
        org.junit.Assert.assertTrue("'" + double43 + "' != '" + (-0.1736481776669303d) + "'", double43 == (-0.1736481776669303d));
        org.junit.Assert.assertNotNull(matrix44);
    }

    @Test
    public void test1846() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1846");
        com.operations.Matrix.Matrix matrix1 = com.operations.Matrix.MatrixTransformations.rotate2D((double) '4');
        double[] doubleArray4 = new double[] { 10, 'a' };
        double[] doubleArray7 = new double[] { 10, 'a' };
        double[][] doubleArray8 = new double[][] { doubleArray4, doubleArray7 };
        com.operations.Matrix.Matrix matrix9 = new com.operations.Matrix.Matrix(doubleArray8);
        com.operations.Matrix.Matrix matrix10 = new com.operations.Matrix.Matrix(doubleArray8);
        com.operations.Matrix.Matrix matrix12 = com.operations.Matrix.MatrixTransformations.rotate2D((double) (short) 100);
        double[] doubleArray15 = new double[] { 137.90576492663388d, (byte) -1 };
        double[] doubleArray16 = com.operations.Matrix.MatrixSolver.solveGaussian(matrix12, doubleArray15);
        com.operations.Matrix.Matrix matrix17 = com.operations.Matrix.MatrixOperations.add(matrix10, matrix12);
        boolean boolean18 = com.operations.Matrix.MatrixUtils.isSymmetric(matrix17);
        boolean boolean20 = com.operations.Matrix.MatrixUtils.compare(matrix1, matrix17, 364.0054944640259d);
        com.operations.Matrix.Matrix matrix23 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0L, (double) (byte) 10);
        int int24 = matrix23.getRows();
        com.operations.Matrix.Matrix matrix26 = com.operations.Matrix.MatrixOperations.scalarMultiply(matrix23, (double) 2);
        matrix23.print();
        com.operations.Matrix.Matrix matrix28 = com.operations.Matrix.MatrixOperations.multiply(matrix17, matrix23);
        com.operations.Matrix.Matrix matrix29 = com.operations.Matrix.MatrixOperations.transpose(matrix28);
        double double30 = com.operations.Matrix.MatrixUtils.frobeniusNorm(matrix28);
        com.operations.Matrix.Matrix[] matrixArray31 = com.operations.Matrix.MatrixDecompositions.luDecomposition(matrix28);
        // The following exception was thrown during execution in test generation
        try {
            double double34 = matrix28.getValue((int) ' ', 1);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(matrix1);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertArrayEquals(doubleArray4, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertArrayEquals(doubleArray7, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertNotNull(matrix12);
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertArrayEquals(doubleArray15, new double[] { 137.90576492663388d, (-1.0d) }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertArrayEquals(doubleArray16, new double[] { (-24.931892522286255d), (-135.63701830716116d) }, 1.0E-15);
        org.junit.Assert.assertNotNull(matrix17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertNotNull(matrix23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 2 + "'", int24 == 2);
        org.junit.Assert.assertNotNull(matrix26);
        org.junit.Assert.assertNotNull(matrix28);
        org.junit.Assert.assertNotNull(matrix29);
        org.junit.Assert.assertTrue("'" + double30 + "' != '" + 1363.6076983299943d + "'", double30 == 1363.6076983299943d);
        org.junit.Assert.assertNotNull(matrixArray31);
    }

    @Test
    public void test1847() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1847");
        com.operations.Matrix.Matrix matrix1 = com.operations.Matrix.MatrixTransformations.rotate2D(100.0d);
        int int2 = matrix1.getCols();
        double[][] doubleArray3 = matrix1.getData();
        com.operations.Matrix.Matrix matrix4 = new com.operations.Matrix.Matrix(doubleArray3);
        com.operations.Matrix.Matrix matrix5 = new com.operations.Matrix.Matrix(doubleArray3);
        // The following exception was thrown during execution in test generation
        try {
            double double8 = matrix5.getValue(97, 10);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(matrix1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 2 + "'", int2 == 2);
        org.junit.Assert.assertNotNull(doubleArray3);
    }

    @Test
    public void test1848() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1848");
        com.operations.Matrix.Matrix matrix1 = com.operations.Matrix.MatrixTransformations.rotate2D(1.414213562373095d);
        com.operations.Matrix.Matrix matrix3 = com.operations.Matrix.MatrixOperations.scalarMultiply(matrix1, 21.023651153076518d);
        com.operations.Matrix.Matrix matrix6 = com.operations.Matrix.MatrixTransformations.scale2D((double) (byte) 10, (double) 10);
        double[] doubleArray9 = new double[] { 10, 'a' };
        double[] doubleArray12 = new double[] { 10, 'a' };
        double[][] doubleArray13 = new double[][] { doubleArray9, doubleArray12 };
        com.operations.Matrix.Matrix matrix14 = new com.operations.Matrix.Matrix(doubleArray13);
        com.operations.Matrix.Matrix matrix15 = new com.operations.Matrix.Matrix(doubleArray13);
        boolean boolean16 = com.operations.Matrix.MatrixUtils.isSquare(matrix15);
        double[] doubleArray19 = new double[] { 10, 'a' };
        double[] doubleArray22 = new double[] { 10, 'a' };
        double[][] doubleArray23 = new double[][] { doubleArray19, doubleArray22 };
        com.operations.Matrix.Matrix matrix24 = new com.operations.Matrix.Matrix(doubleArray23);
        int int25 = matrix24.getCols();
        int int26 = matrix24.getCols();
        matrix24.print();
        double[] doubleArray30 = new double[] { 10, 'a' };
        double[] doubleArray33 = new double[] { 10, 'a' };
        double[][] doubleArray34 = new double[][] { doubleArray30, doubleArray33 };
        com.operations.Matrix.Matrix matrix35 = new com.operations.Matrix.Matrix(doubleArray34);
        boolean boolean37 = com.operations.Matrix.MatrixUtils.compare(matrix24, matrix35, (double) (-1));
        com.operations.Matrix.Matrix matrix38 = com.operations.Matrix.MatrixOperations.subtract(matrix15, matrix35);
        com.operations.Matrix.Matrix[] matrixArray39 = com.operations.Matrix.MatrixDecompositions.luDecomposition(matrix38);
        double[][] doubleArray40 = matrix38.getData();
        com.operations.Matrix.Matrix matrix41 = new com.operations.Matrix.Matrix(doubleArray40);
        com.operations.Matrix.Matrix matrix42 = com.operations.Matrix.MatrixOperations.multiply(matrix6, matrix41);
        boolean boolean43 = com.operations.Matrix.MatrixUtils.isSymmetric(matrix6);
        com.operations.Matrix.Matrix matrix45 = com.operations.Matrix.MatrixTransformations.rotate2D(350.0d);
        com.operations.Matrix.Matrix matrix46 = com.operations.Matrix.MatrixDecompositions.choleskyDecomposition(matrix45);
        int int47 = matrix45.getRows();
        com.operations.Matrix.Matrix matrix48 = com.operations.Matrix.MatrixOperations.subtract(matrix6, matrix45);
        com.operations.Matrix.Matrix matrix49 = com.operations.Matrix.MatrixOperations.multiply(matrix3, matrix6);
        double double52 = matrix6.getValue((int) (byte) 1, 0);
        int int53 = matrix6.getCols();
        org.junit.Assert.assertNotNull(matrix1);
        org.junit.Assert.assertNotNull(matrix3);
        org.junit.Assert.assertNotNull(matrix6);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertArrayEquals(doubleArray9, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertArrayEquals(doubleArray12, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertArrayEquals(doubleArray19, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertArrayEquals(doubleArray22, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 2 + "'", int25 == 2);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 2 + "'", int26 == 2);
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertArrayEquals(doubleArray30, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertArrayEquals(doubleArray33, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(matrix38);
        org.junit.Assert.assertNotNull(matrixArray39);
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertNotNull(matrix42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertNotNull(matrix45);
        org.junit.Assert.assertNotNull(matrix46);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 2 + "'", int47 == 2);
        org.junit.Assert.assertNotNull(matrix48);
        org.junit.Assert.assertNotNull(matrix49);
        org.junit.Assert.assertTrue("'" + double52 + "' != '" + 0.0d + "'", double52 == 0.0d);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 2 + "'", int53 == 2);
    }

    @Test
    public void test1849() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1849");
        com.operations.Matrix.Matrix matrix2 = com.operations.Matrix.MatrixTransformations.project2D((double) 100.0f, 12.751772028997056d);
        org.junit.Assert.assertNotNull(matrix2);
    }

    @Test
    public void test1850() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1850");
        com.operations.Matrix.Matrix matrix2 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0L, (double) (byte) 10);
        double[] doubleArray5 = new double[] { 10, 'a' };
        double[] doubleArray8 = new double[] { 10, 'a' };
        double[][] doubleArray9 = new double[][] { doubleArray5, doubleArray8 };
        com.operations.Matrix.Matrix matrix10 = new com.operations.Matrix.Matrix(doubleArray9);
        int int11 = matrix10.getCols();
        int int12 = matrix10.getCols();
        int int13 = matrix10.getCols();
        com.operations.Matrix.Matrix[] matrixArray14 = com.operations.Matrix.MatrixDecompositions.luDecomposition(matrix10);
        com.operations.Matrix.Matrix matrix15 = com.operations.Matrix.MatrixOperations.multiply(matrix2, matrix10);
        com.operations.Matrix.Matrix matrix17 = com.operations.Matrix.MatrixTransformations.rotate2D((double) (short) 100);
        boolean boolean19 = com.operations.Matrix.MatrixUtils.compare(matrix10, matrix17, (double) (byte) 0);
        double[] doubleArray22 = new double[] { 10, 'a' };
        double[] doubleArray25 = new double[] { 10, 'a' };
        double[][] doubleArray26 = new double[][] { doubleArray22, doubleArray25 };
        com.operations.Matrix.Matrix matrix27 = new com.operations.Matrix.Matrix(doubleArray26);
        com.operations.Matrix.Matrix matrix28 = com.operations.Matrix.MatrixOperations.multiply(matrix10, matrix27);
        com.operations.Matrix.Matrix matrix30 = com.operations.Matrix.MatrixOperations.scalarMultiply(matrix10, 364.0054944640259d);
        com.operations.Matrix.Matrix matrix33 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0L, (double) (byte) 10);
        int int34 = matrix33.getRows();
        com.operations.Matrix.Matrix matrix36 = com.operations.Matrix.MatrixOperations.scalarMultiply(matrix33, (double) 2);
        matrix33.print();
        matrix33.print();
        com.operations.Matrix.Matrix matrix39 = com.operations.Matrix.MatrixOperations.multiply(matrix10, matrix33);
        com.operations.Matrix.Matrix[] matrixArray40 = com.operations.Matrix.MatrixDecompositions.luDecomposition(matrix10);
        java.lang.Class<?> wildcardClass41 = matrixArray40.getClass();
        org.junit.Assert.assertNotNull(matrix2);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertArrayEquals(doubleArray5, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertArrayEquals(doubleArray8, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 2 + "'", int11 == 2);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 2 + "'", int12 == 2);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 2 + "'", int13 == 2);
        org.junit.Assert.assertNotNull(matrixArray14);
        org.junit.Assert.assertNotNull(matrix15);
        org.junit.Assert.assertNotNull(matrix17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertArrayEquals(doubleArray22, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertArrayEquals(doubleArray25, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertNotNull(matrix28);
        org.junit.Assert.assertNotNull(matrix30);
        org.junit.Assert.assertNotNull(matrix33);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 2 + "'", int34 == 2);
        org.junit.Assert.assertNotNull(matrix36);
        org.junit.Assert.assertNotNull(matrix39);
        org.junit.Assert.assertNotNull(matrixArray40);
        org.junit.Assert.assertNotNull(wildcardClass41);
    }

    @Test
    public void test1851() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1851");
        com.operations.Matrix.Matrix matrix4 = com.operations.Matrix.MatrixUtils.generateRandomMatrix((int) '#', (int) (short) 100, 2, (int) (byte) -1);
        com.operations.Matrix.Matrix matrix6 = com.operations.Matrix.MatrixTransformations.rotate2D(100.0d);
        int int7 = matrix6.getCols();
        com.operations.Matrix.Matrix matrix10 = com.operations.Matrix.MatrixTransformations.project2D((double) 1, 364.0054944640259d);
        com.operations.Matrix.Matrix matrix11 = com.operations.Matrix.MatrixOperations.multiply(matrix6, matrix10);
        com.operations.Matrix.Matrix matrix13 = com.operations.Matrix.MatrixTransformations.rotate2D(1.414213562373095d);
        double[][] doubleArray14 = matrix13.getData();
        com.operations.Matrix.Matrix matrix15 = new com.operations.Matrix.Matrix(doubleArray14);
        com.operations.Matrix.Matrix matrix17 = com.operations.Matrix.MatrixTransformations.rotate2D((double) (short) 100);
        double[] doubleArray20 = new double[] { 137.90576492663388d, (byte) -1 };
        double[] doubleArray21 = com.operations.Matrix.MatrixSolver.solveGaussian(matrix17, doubleArray20);
        com.operations.Matrix.Matrix matrix24 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0L, (double) (byte) 10);
        double[] doubleArray27 = new double[] { 10, 'a' };
        double[] doubleArray30 = new double[] { 10, 'a' };
        double[][] doubleArray31 = new double[][] { doubleArray27, doubleArray30 };
        com.operations.Matrix.Matrix matrix32 = new com.operations.Matrix.Matrix(doubleArray31);
        int int33 = matrix32.getCols();
        int int34 = matrix32.getCols();
        int int35 = matrix32.getCols();
        com.operations.Matrix.Matrix[] matrixArray36 = com.operations.Matrix.MatrixDecompositions.luDecomposition(matrix32);
        com.operations.Matrix.Matrix matrix37 = com.operations.Matrix.MatrixOperations.multiply(matrix24, matrix32);
        boolean boolean39 = com.operations.Matrix.MatrixUtils.compare(matrix17, matrix24, (double) (-1L));
        boolean boolean40 = com.operations.Matrix.MatrixUtils.isSymmetric(matrix17);
        com.operations.Matrix.Matrix matrix43 = com.operations.Matrix.MatrixTransformations.scale2D((double) (-1L), (double) '4');
        double[][] doubleArray44 = matrix43.getData();
        com.operations.Matrix.Matrix matrix45 = com.operations.Matrix.MatrixOperations.multiply(matrix17, matrix43);
        com.operations.Matrix.Matrix matrix47 = com.operations.Matrix.MatrixTransformations.rotate2D((double) (-1L));
        com.operations.Matrix.Matrix matrix49 = com.operations.Matrix.MatrixTransformations.rotate2D((double) (short) 100);
        double[] doubleArray52 = new double[] { 137.90576492663388d, (byte) -1 };
        double[] doubleArray53 = com.operations.Matrix.MatrixSolver.solveGaussian(matrix49, doubleArray52);
        double[] doubleArray54 = com.operations.Matrix.MatrixSolver.solveGaussian(matrix47, doubleArray52);
        double[] doubleArray55 = com.operations.Matrix.MatrixSolver.solveGaussian(matrix43, doubleArray52);
        double[] doubleArray56 = com.operations.Matrix.MatrixSolver.solveGaussian(matrix15, doubleArray52);
        double[] doubleArray57 = com.operations.Matrix.MatrixSolver.solveGaussian(matrix11, doubleArray56);
        // The following exception was thrown during execution in test generation
        try {
            double[] doubleArray58 = com.operations.Matrix.MatrixSolver.solveGaussian(matrix4, doubleArray57);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Matrix must be square to solve equations.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(matrix4);
        org.junit.Assert.assertNotNull(matrix6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 2 + "'", int7 == 2);
        org.junit.Assert.assertNotNull(matrix10);
        org.junit.Assert.assertNotNull(matrix11);
        org.junit.Assert.assertNotNull(matrix13);
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertNotNull(matrix17);
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertArrayEquals(doubleArray20, new double[] { 137.90576492663388d, (-1.0d) }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertArrayEquals(doubleArray21, new double[] { (-24.931892522286255d), (-135.63701830716116d) }, 1.0E-15);
        org.junit.Assert.assertNotNull(matrix24);
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertArrayEquals(doubleArray27, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertArrayEquals(doubleArray30, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 2 + "'", int33 == 2);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 2 + "'", int34 == 2);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 2 + "'", int35 == 2);
        org.junit.Assert.assertNotNull(matrixArray36);
        org.junit.Assert.assertNotNull(matrix37);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(matrix43);
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertNotNull(matrix45);
        org.junit.Assert.assertNotNull(matrix47);
        org.junit.Assert.assertNotNull(matrix49);
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertArrayEquals(doubleArray52, new double[] { 137.90576492663388d, (-1.0d) }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertArrayEquals(doubleArray53, new double[] { (-24.931892522286255d), (-135.63701830716116d) }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray54);
        org.junit.Assert.assertArrayEquals(doubleArray54, new double[] { 137.90221361711127d, 1.4069397643877004d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertArrayEquals(doubleArray55, new double[] { (-137.90576492663388d), (-0.019230769230769232d) }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray56);
        org.junit.Assert.assertArrayEquals(doubleArray56, new double[] { 137.8390783842506d, (-4.403234059237104d) }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray57);
        org.junit.Assert.assertArrayEquals(doubleArray57, new double[] { (-28.2718438125784d), (-0.37081962097684734d) }, 1.0E-15);
    }

    @Test
    public void test1852() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1852");
        com.operations.Matrix.Matrix matrix2 = com.operations.Matrix.MatrixTransformations.scale2D((double) (byte) 0, (double) 0.0f);
        org.junit.Assert.assertNotNull(matrix2);
    }

    @Test
    public void test1853() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1853");
        double[] doubleArray2 = new double[] { 10, 'a' };
        double[] doubleArray5 = new double[] { 10, 'a' };
        double[][] doubleArray6 = new double[][] { doubleArray2, doubleArray5 };
        com.operations.Matrix.Matrix matrix7 = new com.operations.Matrix.Matrix(doubleArray6);
        com.operations.Matrix.Matrix matrix8 = new com.operations.Matrix.Matrix(doubleArray6);
        boolean boolean9 = com.operations.Matrix.MatrixUtils.isSquare(matrix8);
        double[] doubleArray12 = new double[] { 10, 'a' };
        double[] doubleArray15 = new double[] { 10, 'a' };
        double[][] doubleArray16 = new double[][] { doubleArray12, doubleArray15 };
        com.operations.Matrix.Matrix matrix17 = new com.operations.Matrix.Matrix(doubleArray16);
        int int18 = matrix17.getCols();
        int int19 = matrix17.getCols();
        matrix17.print();
        double[] doubleArray23 = new double[] { 10, 'a' };
        double[] doubleArray26 = new double[] { 10, 'a' };
        double[][] doubleArray27 = new double[][] { doubleArray23, doubleArray26 };
        com.operations.Matrix.Matrix matrix28 = new com.operations.Matrix.Matrix(doubleArray27);
        boolean boolean30 = com.operations.Matrix.MatrixUtils.compare(matrix17, matrix28, (double) (-1));
        com.operations.Matrix.Matrix matrix31 = com.operations.Matrix.MatrixOperations.subtract(matrix8, matrix28);
        com.operations.Matrix.Matrix[] matrixArray32 = com.operations.Matrix.MatrixDecompositions.luDecomposition(matrix31);
        double[][] doubleArray33 = matrix31.getData();
        double[] doubleArray36 = new double[] { 10, 'a' };
        double[] doubleArray39 = new double[] { 10, 'a' };
        double[][] doubleArray40 = new double[][] { doubleArray36, doubleArray39 };
        com.operations.Matrix.Matrix matrix41 = new com.operations.Matrix.Matrix(doubleArray40);
        com.operations.Matrix.Matrix matrix42 = new com.operations.Matrix.Matrix(doubleArray40);
        com.operations.Matrix.Matrix matrix44 = com.operations.Matrix.MatrixTransformations.rotate2D((double) (short) 100);
        double[] doubleArray47 = new double[] { 137.90576492663388d, (byte) -1 };
        double[] doubleArray48 = com.operations.Matrix.MatrixSolver.solveGaussian(matrix44, doubleArray47);
        com.operations.Matrix.Matrix matrix49 = com.operations.Matrix.MatrixOperations.add(matrix42, matrix44);
        com.operations.Matrix.Matrix matrix50 = com.operations.Matrix.MatrixOperations.transpose(matrix44);
        int int51 = matrix44.getCols();
        com.operations.Matrix.Matrix matrix54 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0L, (double) (byte) 10);
        double[] doubleArray57 = new double[] { 10, 'a' };
        double[] doubleArray60 = new double[] { 10, 'a' };
        double[][] doubleArray61 = new double[][] { doubleArray57, doubleArray60 };
        com.operations.Matrix.Matrix matrix62 = new com.operations.Matrix.Matrix(doubleArray61);
        int int63 = matrix62.getCols();
        int int64 = matrix62.getCols();
        int int65 = matrix62.getCols();
        com.operations.Matrix.Matrix[] matrixArray66 = com.operations.Matrix.MatrixDecompositions.luDecomposition(matrix62);
        com.operations.Matrix.Matrix matrix67 = com.operations.Matrix.MatrixOperations.multiply(matrix54, matrix62);
        com.operations.Matrix.Matrix matrix69 = com.operations.Matrix.MatrixTransformations.rotate2D((double) (short) 100);
        boolean boolean71 = com.operations.Matrix.MatrixUtils.compare(matrix62, matrix69, (double) (byte) 0);
        boolean boolean72 = com.operations.Matrix.MatrixUtils.isSymmetric(matrix69);
        boolean boolean73 = com.operations.Matrix.MatrixUtils.isSquare(matrix69);
        com.operations.Matrix.Matrix matrix75 = com.operations.Matrix.MatrixTransformations.rotate2D((double) (short) 100);
        boolean boolean77 = com.operations.Matrix.MatrixUtils.compare(matrix69, matrix75, (double) (byte) 100);
        matrix75.print();
        com.operations.Matrix.Matrix matrix79 = com.operations.Matrix.MatrixOperations.add(matrix44, matrix75);
        com.operations.Matrix.Matrix matrix80 = com.operations.Matrix.MatrixOperations.multiply(matrix31, matrix79);
        // The following exception was thrown during execution in test generation
        try {
            double double83 = matrix31.getValue(10, (int) ' ');
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertArrayEquals(doubleArray2, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertArrayEquals(doubleArray5, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertArrayEquals(doubleArray12, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertArrayEquals(doubleArray15, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 2 + "'", int18 == 2);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 2 + "'", int19 == 2);
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertArrayEquals(doubleArray23, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertArrayEquals(doubleArray26, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(matrix31);
        org.junit.Assert.assertNotNull(matrixArray32);
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertArrayEquals(doubleArray36, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertArrayEquals(doubleArray39, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertNotNull(matrix44);
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertArrayEquals(doubleArray47, new double[] { 137.90576492663388d, (-1.0d) }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertArrayEquals(doubleArray48, new double[] { (-24.931892522286255d), (-135.63701830716116d) }, 1.0E-15);
        org.junit.Assert.assertNotNull(matrix49);
        org.junit.Assert.assertNotNull(matrix50);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 2 + "'", int51 == 2);
        org.junit.Assert.assertNotNull(matrix54);
        org.junit.Assert.assertNotNull(doubleArray57);
        org.junit.Assert.assertArrayEquals(doubleArray57, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray60);
        org.junit.Assert.assertArrayEquals(doubleArray60, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray61);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 2 + "'", int63 == 2);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 2 + "'", int64 == 2);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 2 + "'", int65 == 2);
        org.junit.Assert.assertNotNull(matrixArray66);
        org.junit.Assert.assertNotNull(matrix67);
        org.junit.Assert.assertNotNull(matrix69);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + true + "'", boolean73 == true);
        org.junit.Assert.assertNotNull(matrix75);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + true + "'", boolean77 == true);
        org.junit.Assert.assertNotNull(matrix79);
        org.junit.Assert.assertNotNull(matrix80);
    }

    @Test
    public void test1854() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1854");
        com.operations.Matrix.Matrix matrix2 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0L, (double) (byte) 10);
        double[] doubleArray5 = new double[] { 10, 'a' };
        double[] doubleArray8 = new double[] { 10, 'a' };
        double[][] doubleArray9 = new double[][] { doubleArray5, doubleArray8 };
        com.operations.Matrix.Matrix matrix10 = new com.operations.Matrix.Matrix(doubleArray9);
        int int11 = matrix10.getCols();
        int int12 = matrix10.getCols();
        int int13 = matrix10.getCols();
        com.operations.Matrix.Matrix[] matrixArray14 = com.operations.Matrix.MatrixDecompositions.luDecomposition(matrix10);
        com.operations.Matrix.Matrix matrix15 = com.operations.Matrix.MatrixOperations.multiply(matrix2, matrix10);
        com.operations.Matrix.Matrix matrix17 = com.operations.Matrix.MatrixTransformations.rotate2D((double) (short) 100);
        boolean boolean19 = com.operations.Matrix.MatrixUtils.compare(matrix10, matrix17, (double) (byte) 0);
        double[] doubleArray22 = new double[] { 10, 'a' };
        double[] doubleArray25 = new double[] { 10, 'a' };
        double[][] doubleArray26 = new double[][] { doubleArray22, doubleArray25 };
        com.operations.Matrix.Matrix matrix27 = new com.operations.Matrix.Matrix(doubleArray26);
        com.operations.Matrix.Matrix matrix28 = new com.operations.Matrix.Matrix(doubleArray26);
        com.operations.Matrix.Matrix matrix29 = new com.operations.Matrix.Matrix(doubleArray26);
        boolean boolean31 = com.operations.Matrix.MatrixUtils.compare(matrix10, matrix29, (double) (-1));
        double[] doubleArray34 = new double[] { 10, 'a' };
        double[] doubleArray37 = new double[] { 10, 'a' };
        double[][] doubleArray38 = new double[][] { doubleArray34, doubleArray37 };
        com.operations.Matrix.Matrix matrix39 = new com.operations.Matrix.Matrix(doubleArray38);
        com.operations.Matrix.Matrix matrix40 = new com.operations.Matrix.Matrix(doubleArray38);
        boolean boolean41 = com.operations.Matrix.MatrixUtils.isSquare(matrix40);
        com.operations.Matrix.Matrix matrix42 = com.operations.Matrix.MatrixOperations.multiply(matrix29, matrix40);
        com.operations.Matrix.Matrix matrix45 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0L, (double) (byte) 10);
        int int46 = matrix45.getRows();
        com.operations.Matrix.Matrix matrix48 = com.operations.Matrix.MatrixOperations.scalarMultiply(matrix45, (double) 2);
        double double49 = com.operations.Matrix.MatrixUtils.frobeniusNorm(matrix45);
        com.operations.Matrix.Matrix matrix52 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0L, (double) (byte) 10);
        int int53 = matrix52.getRows();
        com.operations.Matrix.Matrix matrix55 = com.operations.Matrix.MatrixOperations.scalarMultiply(matrix52, (double) 2);
        com.operations.Matrix.Matrix matrix56 = com.operations.Matrix.MatrixOperations.subtract(matrix45, matrix55);
        com.operations.Matrix.Matrix matrix58 = com.operations.Matrix.MatrixTransformations.rotate2D((double) (short) 100);
        double[] doubleArray61 = new double[] { 137.90576492663388d, (byte) -1 };
        double[] doubleArray62 = com.operations.Matrix.MatrixSolver.solveGaussian(matrix58, doubleArray61);
        com.operations.Matrix.Matrix matrix65 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0L, (double) (byte) 10);
        double[] doubleArray68 = new double[] { 10, 'a' };
        double[] doubleArray71 = new double[] { 10, 'a' };
        double[][] doubleArray72 = new double[][] { doubleArray68, doubleArray71 };
        com.operations.Matrix.Matrix matrix73 = new com.operations.Matrix.Matrix(doubleArray72);
        int int74 = matrix73.getCols();
        int int75 = matrix73.getCols();
        int int76 = matrix73.getCols();
        com.operations.Matrix.Matrix[] matrixArray77 = com.operations.Matrix.MatrixDecompositions.luDecomposition(matrix73);
        com.operations.Matrix.Matrix matrix78 = com.operations.Matrix.MatrixOperations.multiply(matrix65, matrix73);
        boolean boolean80 = com.operations.Matrix.MatrixUtils.compare(matrix58, matrix65, (double) (-1L));
        double[][] doubleArray81 = matrix58.getData();
        com.operations.Matrix.Matrix matrix84 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0L, (double) 10L);
        boolean boolean86 = com.operations.Matrix.MatrixUtils.compare(matrix58, matrix84, 146.4308710620817d);
        com.operations.Matrix.Matrix matrix87 = com.operations.Matrix.MatrixOperations.subtract(matrix56, matrix84);
        com.operations.Matrix.Matrix matrix88 = com.operations.Matrix.MatrixOperations.add(matrix29, matrix87);
        // The following exception was thrown during execution in test generation
        try {
            double double91 = matrix29.getValue((int) (byte) 100, (int) (short) 10);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(matrix2);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertArrayEquals(doubleArray5, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertArrayEquals(doubleArray8, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 2 + "'", int11 == 2);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 2 + "'", int12 == 2);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 2 + "'", int13 == 2);
        org.junit.Assert.assertNotNull(matrixArray14);
        org.junit.Assert.assertNotNull(matrix15);
        org.junit.Assert.assertNotNull(matrix17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertArrayEquals(doubleArray22, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertArrayEquals(doubleArray25, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertArrayEquals(doubleArray34, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertArrayEquals(doubleArray37, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertNotNull(matrix42);
        org.junit.Assert.assertNotNull(matrix45);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 2 + "'", int46 == 2);
        org.junit.Assert.assertNotNull(matrix48);
        org.junit.Assert.assertTrue("'" + double49 + "' != '" + 10.0d + "'", double49 == 10.0d);
        org.junit.Assert.assertNotNull(matrix52);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 2 + "'", int53 == 2);
        org.junit.Assert.assertNotNull(matrix55);
        org.junit.Assert.assertNotNull(matrix56);
        org.junit.Assert.assertNotNull(matrix58);
        org.junit.Assert.assertNotNull(doubleArray61);
        org.junit.Assert.assertArrayEquals(doubleArray61, new double[] { 137.90576492663388d, (-1.0d) }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray62);
        org.junit.Assert.assertArrayEquals(doubleArray62, new double[] { (-24.931892522286255d), (-135.63701830716116d) }, 1.0E-15);
        org.junit.Assert.assertNotNull(matrix65);
        org.junit.Assert.assertNotNull(doubleArray68);
        org.junit.Assert.assertArrayEquals(doubleArray68, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray71);
        org.junit.Assert.assertArrayEquals(doubleArray71, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray72);
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 2 + "'", int74 == 2);
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + 2 + "'", int75 == 2);
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 2 + "'", int76 == 2);
        org.junit.Assert.assertNotNull(matrixArray77);
        org.junit.Assert.assertNotNull(matrix78);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertNotNull(doubleArray81);
        org.junit.Assert.assertNotNull(matrix84);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + true + "'", boolean86 == true);
        org.junit.Assert.assertNotNull(matrix87);
        org.junit.Assert.assertNotNull(matrix88);
    }

    @Test
    public void test1855() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1855");
        // The following exception was thrown during execution in test generation
        try {
            com.operations.Matrix.Matrix matrix5 = com.operations.Matrix.MatrixUtils.generateRandomMatrix((-1), 97, (int) (byte) 10, (int) (byte) -1, (long) (byte) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.NegativeArraySizeException; message: -1");
        } catch (java.lang.NegativeArraySizeException e) {
            // Expected exception.
        }
    }

    @Test
    public void test1856() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1856");
        com.operations.Matrix.Matrix matrix2 = new com.operations.Matrix.Matrix((int) (short) 1, (int) (short) 0);
        int int3 = matrix2.getRows();
        com.operations.Matrix.Matrix matrix5 = com.operations.Matrix.MatrixOperations.scalarMultiply(matrix2, (double) 10.0f);
        double[] doubleArray8 = new double[] { 10, 'a' };
        double[] doubleArray11 = new double[] { 10, 'a' };
        double[][] doubleArray12 = new double[][] { doubleArray8, doubleArray11 };
        com.operations.Matrix.Matrix matrix13 = new com.operations.Matrix.Matrix(doubleArray12);
        com.operations.Matrix.Matrix matrix14 = new com.operations.Matrix.Matrix(doubleArray12);
        boolean boolean15 = com.operations.Matrix.MatrixUtils.isSquare(matrix14);
        com.operations.Matrix.Matrix[] matrixArray16 = com.operations.Matrix.MatrixDecompositions.luDecomposition(matrix14);
        double double17 = com.operations.Matrix.MatrixUtils.frobeniusNorm(matrix14);
        int int18 = matrix14.getRows();
        // The following exception was thrown during execution in test generation
        try {
            com.operations.Matrix.Matrix matrix19 = com.operations.Matrix.MatrixOperations.multiply(matrix2, matrix14);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Matrix A's columns must match Matrix B's rows for multiplication.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertNotNull(matrix5);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertArrayEquals(doubleArray8, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertArrayEquals(doubleArray11, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNotNull(matrixArray16);
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + 137.90576492663388d + "'", double17 == 137.90576492663388d);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 2 + "'", int18 == 2);
    }

    @Test
    public void test1857() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1857");
        com.operations.Matrix.Matrix matrix2 = com.operations.Matrix.MatrixTransformations.scale2D(98.07140255956371d, (double) (byte) 100);
        matrix2.print();
        org.junit.Assert.assertNotNull(matrix2);
    }

    @Test
    public void test1858() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1858");
        com.operations.Matrix.Matrix matrix2 = com.operations.Matrix.MatrixTransformations.project2D((double) (byte) 100, 32.0d);
        boolean boolean3 = com.operations.Matrix.MatrixUtils.isSymmetric(matrix2);
        matrix2.print();
        com.operations.Matrix.Matrix matrix5 = com.operations.Matrix.MatrixOperations.transpose(matrix2);
        // The following exception was thrown during execution in test generation
        try {
            double double8 = matrix5.getValue((int) (byte) 1, 100);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(matrix2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNotNull(matrix5);
    }

    @Test
    public void test1859() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1859");
        com.operations.Matrix.Matrix matrix2 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0L, (double) (byte) 10);
        double[] doubleArray5 = new double[] { 10, 'a' };
        double[] doubleArray8 = new double[] { 10, 'a' };
        double[][] doubleArray9 = new double[][] { doubleArray5, doubleArray8 };
        com.operations.Matrix.Matrix matrix10 = new com.operations.Matrix.Matrix(doubleArray9);
        int int11 = matrix10.getCols();
        int int12 = matrix10.getCols();
        int int13 = matrix10.getCols();
        com.operations.Matrix.Matrix[] matrixArray14 = com.operations.Matrix.MatrixDecompositions.luDecomposition(matrix10);
        com.operations.Matrix.Matrix matrix15 = com.operations.Matrix.MatrixOperations.multiply(matrix2, matrix10);
        com.operations.Matrix.Matrix matrix17 = com.operations.Matrix.MatrixTransformations.rotate2D((double) (short) 100);
        boolean boolean19 = com.operations.Matrix.MatrixUtils.compare(matrix10, matrix17, (double) (byte) 0);
        double[] doubleArray22 = new double[] { 10, 'a' };
        double[] doubleArray25 = new double[] { 10, 'a' };
        double[][] doubleArray26 = new double[][] { doubleArray22, doubleArray25 };
        com.operations.Matrix.Matrix matrix27 = new com.operations.Matrix.Matrix(doubleArray26);
        com.operations.Matrix.Matrix matrix28 = new com.operations.Matrix.Matrix(doubleArray26);
        com.operations.Matrix.Matrix matrix29 = new com.operations.Matrix.Matrix(doubleArray26);
        boolean boolean31 = com.operations.Matrix.MatrixUtils.compare(matrix10, matrix29, (double) (-1));
        double double32 = com.operations.Matrix.MatrixUtils.frobeniusNorm(matrix10);
        com.operations.Matrix.Matrix matrix33 = com.operations.Matrix.MatrixDecompositions.choleskyDecomposition(matrix10);
        com.operations.Matrix.Matrix matrix36 = com.operations.Matrix.MatrixTransformations.project2D((double) (short) 0, 10.0d);
        com.operations.Matrix.Matrix matrix37 = com.operations.Matrix.MatrixOperations.multiply(matrix10, matrix36);
        double[][] doubleArray38 = matrix36.getData();
        java.lang.Class<?> wildcardClass39 = matrix36.getClass();
        org.junit.Assert.assertNotNull(matrix2);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertArrayEquals(doubleArray5, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertArrayEquals(doubleArray8, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 2 + "'", int11 == 2);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 2 + "'", int12 == 2);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 2 + "'", int13 == 2);
        org.junit.Assert.assertNotNull(matrixArray14);
        org.junit.Assert.assertNotNull(matrix15);
        org.junit.Assert.assertNotNull(matrix17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertArrayEquals(doubleArray22, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertArrayEquals(doubleArray25, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + double32 + "' != '" + 137.90576492663388d + "'", double32 == 137.90576492663388d);
        org.junit.Assert.assertNotNull(matrix33);
        org.junit.Assert.assertNotNull(matrix36);
        org.junit.Assert.assertNotNull(matrix37);
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertNotNull(wildcardClass39);
    }

    @Test
    public void test1860() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1860");
        com.operations.Matrix.Matrix matrix2 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0L, (double) (byte) 10);
        double[] doubleArray5 = new double[] { 10, 'a' };
        double[] doubleArray8 = new double[] { 10, 'a' };
        double[][] doubleArray9 = new double[][] { doubleArray5, doubleArray8 };
        com.operations.Matrix.Matrix matrix10 = new com.operations.Matrix.Matrix(doubleArray9);
        int int11 = matrix10.getCols();
        int int12 = matrix10.getCols();
        int int13 = matrix10.getCols();
        com.operations.Matrix.Matrix[] matrixArray14 = com.operations.Matrix.MatrixDecompositions.luDecomposition(matrix10);
        com.operations.Matrix.Matrix matrix15 = com.operations.Matrix.MatrixOperations.multiply(matrix2, matrix10);
        com.operations.Matrix.Matrix matrix17 = com.operations.Matrix.MatrixTransformations.rotate2D((double) (short) 100);
        boolean boolean19 = com.operations.Matrix.MatrixUtils.compare(matrix10, matrix17, (double) (byte) 0);
        com.operations.Matrix.Matrix[] matrixArray20 = com.operations.Matrix.MatrixDecompositions.luDecomposition(matrix10);
        com.operations.Matrix.Matrix matrix21 = com.operations.Matrix.MatrixOperations.transpose(matrix10);
        com.operations.Matrix.Matrix[] matrixArray22 = com.operations.Matrix.MatrixDecompositions.luDecomposition(matrix10);
        com.operations.Matrix.Matrix matrix27 = com.operations.Matrix.MatrixUtils.generateRandomMatrix((int) '4', 32, 10, 100);
        boolean boolean29 = com.operations.Matrix.MatrixUtils.compare(matrix10, matrix27, (-1.0d));
        boolean boolean30 = com.operations.Matrix.MatrixUtils.isSymmetric(matrix10);
        com.operations.Matrix.Matrix[] matrixArray31 = com.operations.Matrix.MatrixDecompositions.luDecomposition(matrix10);
        org.junit.Assert.assertNotNull(matrix2);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertArrayEquals(doubleArray5, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertArrayEquals(doubleArray8, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 2 + "'", int11 == 2);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 2 + "'", int12 == 2);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 2 + "'", int13 == 2);
        org.junit.Assert.assertNotNull(matrixArray14);
        org.junit.Assert.assertNotNull(matrix15);
        org.junit.Assert.assertNotNull(matrix17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(matrixArray20);
        org.junit.Assert.assertNotNull(matrix21);
        org.junit.Assert.assertNotNull(matrixArray22);
        org.junit.Assert.assertNotNull(matrix27);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(matrixArray31);
    }

    @Test
    public void test1861() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1861");
        com.operations.Matrix.Matrix matrix1 = com.operations.Matrix.MatrixTransformations.rotate2D((double) 1.0f);
        com.operations.Matrix.Matrix matrix4 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0L, (double) (byte) 10);
        int int5 = matrix4.getRows();
        com.operations.Matrix.Matrix matrix7 = com.operations.Matrix.MatrixOperations.scalarMultiply(matrix4, (double) 2);
        boolean boolean9 = com.operations.Matrix.MatrixUtils.compare(matrix1, matrix7, (double) 10.0f);
        double[] doubleArray12 = new double[] { 10, 'a' };
        double[] doubleArray15 = new double[] { 10, 'a' };
        double[][] doubleArray16 = new double[][] { doubleArray12, doubleArray15 };
        com.operations.Matrix.Matrix matrix17 = new com.operations.Matrix.Matrix(doubleArray16);
        com.operations.Matrix.Matrix matrix18 = new com.operations.Matrix.Matrix(doubleArray16);
        boolean boolean19 = com.operations.Matrix.MatrixUtils.isSquare(matrix18);
        double[] doubleArray22 = new double[] { 10, 'a' };
        double[] doubleArray25 = new double[] { 10, 'a' };
        double[][] doubleArray26 = new double[][] { doubleArray22, doubleArray25 };
        com.operations.Matrix.Matrix matrix27 = new com.operations.Matrix.Matrix(doubleArray26);
        int int28 = matrix27.getCols();
        int int29 = matrix27.getCols();
        matrix27.print();
        double[] doubleArray33 = new double[] { 10, 'a' };
        double[] doubleArray36 = new double[] { 10, 'a' };
        double[][] doubleArray37 = new double[][] { doubleArray33, doubleArray36 };
        com.operations.Matrix.Matrix matrix38 = new com.operations.Matrix.Matrix(doubleArray37);
        boolean boolean40 = com.operations.Matrix.MatrixUtils.compare(matrix27, matrix38, (double) (-1));
        com.operations.Matrix.Matrix matrix41 = com.operations.Matrix.MatrixOperations.subtract(matrix18, matrix38);
        com.operations.Matrix.Matrix matrix43 = com.operations.Matrix.MatrixOperations.scalarMultiply(matrix18, (double) 0.0f);
        com.operations.Matrix.Matrix matrix44 = com.operations.Matrix.MatrixOperations.transpose(matrix18);
        com.operations.Matrix.Matrix matrix45 = com.operations.Matrix.MatrixOperations.transpose(matrix44);
        com.operations.Matrix.Matrix matrix46 = com.operations.Matrix.MatrixOperations.multiply(matrix7, matrix45);
        com.operations.Matrix.Matrix matrix48 = com.operations.Matrix.MatrixTransformations.rotate2D((double) (short) 100);
        double[] doubleArray51 = new double[] { 137.90576492663388d, (byte) -1 };
        double[] doubleArray52 = com.operations.Matrix.MatrixSolver.solveGaussian(matrix48, doubleArray51);
        com.operations.Matrix.Matrix matrix55 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0L, (double) (byte) 10);
        double[] doubleArray58 = new double[] { 10, 'a' };
        double[] doubleArray61 = new double[] { 10, 'a' };
        double[][] doubleArray62 = new double[][] { doubleArray58, doubleArray61 };
        com.operations.Matrix.Matrix matrix63 = new com.operations.Matrix.Matrix(doubleArray62);
        int int64 = matrix63.getCols();
        int int65 = matrix63.getCols();
        int int66 = matrix63.getCols();
        com.operations.Matrix.Matrix[] matrixArray67 = com.operations.Matrix.MatrixDecompositions.luDecomposition(matrix63);
        com.operations.Matrix.Matrix matrix68 = com.operations.Matrix.MatrixOperations.multiply(matrix55, matrix63);
        boolean boolean70 = com.operations.Matrix.MatrixUtils.compare(matrix48, matrix55, (double) (-1L));
        double[][] doubleArray71 = matrix48.getData();
        com.operations.Matrix.Matrix matrix74 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0L, (double) 10L);
        boolean boolean76 = com.operations.Matrix.MatrixUtils.compare(matrix48, matrix74, 146.4308710620817d);
        com.operations.Matrix.Matrix matrix77 = com.operations.Matrix.MatrixOperations.subtract(matrix45, matrix74);
        com.operations.Matrix.Matrix matrix79 = com.operations.Matrix.MatrixOperations.scalarMultiply(matrix77, (double) 0.0f);
        com.operations.Matrix.Matrix matrix81 = com.operations.Matrix.MatrixTransformations.rotate2D(100.0d);
        int int82 = matrix81.getCols();
        com.operations.Matrix.Matrix matrix85 = com.operations.Matrix.MatrixTransformations.project2D((double) 1, 364.0054944640259d);
        com.operations.Matrix.Matrix matrix86 = com.operations.Matrix.MatrixOperations.multiply(matrix81, matrix85);
        com.operations.Matrix.Matrix matrix87 = com.operations.Matrix.MatrixOperations.add(matrix79, matrix85);
        // The following exception was thrown during execution in test generation
        try {
            double double90 = matrix85.getValue((int) (byte) -1, 52);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(matrix1);
        org.junit.Assert.assertNotNull(matrix4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 2 + "'", int5 == 2);
        org.junit.Assert.assertNotNull(matrix7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertArrayEquals(doubleArray12, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertArrayEquals(doubleArray15, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertArrayEquals(doubleArray22, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertArrayEquals(doubleArray25, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 2 + "'", int28 == 2);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 2 + "'", int29 == 2);
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertArrayEquals(doubleArray33, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertArrayEquals(doubleArray36, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(matrix41);
        org.junit.Assert.assertNotNull(matrix43);
        org.junit.Assert.assertNotNull(matrix44);
        org.junit.Assert.assertNotNull(matrix45);
        org.junit.Assert.assertNotNull(matrix46);
        org.junit.Assert.assertNotNull(matrix48);
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertArrayEquals(doubleArray51, new double[] { 137.90576492663388d, (-1.0d) }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertArrayEquals(doubleArray52, new double[] { (-24.931892522286255d), (-135.63701830716116d) }, 1.0E-15);
        org.junit.Assert.assertNotNull(matrix55);
        org.junit.Assert.assertNotNull(doubleArray58);
        org.junit.Assert.assertArrayEquals(doubleArray58, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray61);
        org.junit.Assert.assertArrayEquals(doubleArray61, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray62);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 2 + "'", int64 == 2);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 2 + "'", int65 == 2);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 2 + "'", int66 == 2);
        org.junit.Assert.assertNotNull(matrixArray67);
        org.junit.Assert.assertNotNull(matrix68);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertNotNull(doubleArray71);
        org.junit.Assert.assertNotNull(matrix74);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + true + "'", boolean76 == true);
        org.junit.Assert.assertNotNull(matrix77);
        org.junit.Assert.assertNotNull(matrix79);
        org.junit.Assert.assertNotNull(matrix81);
        org.junit.Assert.assertTrue("'" + int82 + "' != '" + 2 + "'", int82 == 2);
        org.junit.Assert.assertNotNull(matrix85);
        org.junit.Assert.assertNotNull(matrix86);
        org.junit.Assert.assertNotNull(matrix87);
    }

    @Test
    public void test1862() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1862");
        com.operations.Matrix.Matrix matrix2 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0L, (double) (byte) 10);
        double[] doubleArray5 = new double[] { 10, 'a' };
        double[] doubleArray8 = new double[] { 10, 'a' };
        double[][] doubleArray9 = new double[][] { doubleArray5, doubleArray8 };
        com.operations.Matrix.Matrix matrix10 = new com.operations.Matrix.Matrix(doubleArray9);
        int int11 = matrix10.getCols();
        int int12 = matrix10.getCols();
        int int13 = matrix10.getCols();
        com.operations.Matrix.Matrix[] matrixArray14 = com.operations.Matrix.MatrixDecompositions.luDecomposition(matrix10);
        com.operations.Matrix.Matrix matrix15 = com.operations.Matrix.MatrixOperations.multiply(matrix2, matrix10);
        com.operations.Matrix.Matrix matrix17 = com.operations.Matrix.MatrixTransformations.rotate2D((double) (short) 100);
        boolean boolean19 = com.operations.Matrix.MatrixUtils.compare(matrix10, matrix17, (double) (byte) 0);
        double[] doubleArray22 = new double[] { 10, 'a' };
        double[] doubleArray25 = new double[] { 10, 'a' };
        double[][] doubleArray26 = new double[][] { doubleArray22, doubleArray25 };
        com.operations.Matrix.Matrix matrix27 = new com.operations.Matrix.Matrix(doubleArray26);
        com.operations.Matrix.Matrix matrix28 = new com.operations.Matrix.Matrix(doubleArray26);
        com.operations.Matrix.Matrix matrix29 = new com.operations.Matrix.Matrix(doubleArray26);
        boolean boolean31 = com.operations.Matrix.MatrixUtils.compare(matrix10, matrix29, (double) (-1));
        double[] doubleArray34 = new double[] { 10, 'a' };
        double[] doubleArray37 = new double[] { 10, 'a' };
        double[][] doubleArray38 = new double[][] { doubleArray34, doubleArray37 };
        com.operations.Matrix.Matrix matrix39 = new com.operations.Matrix.Matrix(doubleArray38);
        com.operations.Matrix.Matrix matrix40 = new com.operations.Matrix.Matrix(doubleArray38);
        boolean boolean41 = com.operations.Matrix.MatrixUtils.isSquare(matrix40);
        com.operations.Matrix.Matrix matrix42 = com.operations.Matrix.MatrixOperations.multiply(matrix29, matrix40);
        double[][] doubleArray43 = matrix40.getData();
        com.operations.Matrix.Matrix matrix44 = new com.operations.Matrix.Matrix(doubleArray43);
        com.operations.Matrix.Matrix matrix45 = com.operations.Matrix.MatrixOperations.transpose(matrix44);
        boolean boolean46 = com.operations.Matrix.MatrixUtils.isSymmetric(matrix44);
        com.operations.Matrix.Matrix matrix48 = com.operations.Matrix.MatrixOperations.scalarMultiply(matrix44, (double) 2);
        matrix48.print();
        boolean boolean50 = com.operations.Matrix.MatrixUtils.isSymmetric(matrix48);
        int int51 = matrix48.getCols();
        org.junit.Assert.assertNotNull(matrix2);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertArrayEquals(doubleArray5, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertArrayEquals(doubleArray8, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 2 + "'", int11 == 2);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 2 + "'", int12 == 2);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 2 + "'", int13 == 2);
        org.junit.Assert.assertNotNull(matrixArray14);
        org.junit.Assert.assertNotNull(matrix15);
        org.junit.Assert.assertNotNull(matrix17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertArrayEquals(doubleArray22, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertArrayEquals(doubleArray25, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertArrayEquals(doubleArray34, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertArrayEquals(doubleArray37, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertNotNull(matrix42);
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertNotNull(matrix45);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(matrix48);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 2 + "'", int51 == 2);
    }

    @Test
    public void test1863() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1863");
        com.operations.Matrix.Matrix matrix2 = new com.operations.Matrix.Matrix((int) (byte) 0, 0);
    }

    @Test
    public void test1864() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1864");
        double[] doubleArray2 = new double[] { 10, 'a' };
        double[] doubleArray5 = new double[] { 10, 'a' };
        double[][] doubleArray6 = new double[][] { doubleArray2, doubleArray5 };
        com.operations.Matrix.Matrix matrix7 = new com.operations.Matrix.Matrix(doubleArray6);
        com.operations.Matrix.Matrix matrix8 = new com.operations.Matrix.Matrix(doubleArray6);
        int int9 = matrix8.getCols();
        com.operations.Matrix.Matrix matrix11 = com.operations.Matrix.MatrixTransformations.rotate2D(1.414213562373095d);
        double[][] doubleArray12 = matrix11.getData();
        com.operations.Matrix.Matrix matrix13 = new com.operations.Matrix.Matrix(doubleArray12);
        com.operations.Matrix.Matrix matrix15 = com.operations.Matrix.MatrixTransformations.rotate2D((double) (short) 100);
        double[] doubleArray18 = new double[] { 137.90576492663388d, (byte) -1 };
        double[] doubleArray19 = com.operations.Matrix.MatrixSolver.solveGaussian(matrix15, doubleArray18);
        com.operations.Matrix.Matrix matrix22 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0L, (double) (byte) 10);
        double[] doubleArray25 = new double[] { 10, 'a' };
        double[] doubleArray28 = new double[] { 10, 'a' };
        double[][] doubleArray29 = new double[][] { doubleArray25, doubleArray28 };
        com.operations.Matrix.Matrix matrix30 = new com.operations.Matrix.Matrix(doubleArray29);
        int int31 = matrix30.getCols();
        int int32 = matrix30.getCols();
        int int33 = matrix30.getCols();
        com.operations.Matrix.Matrix[] matrixArray34 = com.operations.Matrix.MatrixDecompositions.luDecomposition(matrix30);
        com.operations.Matrix.Matrix matrix35 = com.operations.Matrix.MatrixOperations.multiply(matrix22, matrix30);
        boolean boolean37 = com.operations.Matrix.MatrixUtils.compare(matrix15, matrix22, (double) (-1L));
        boolean boolean38 = com.operations.Matrix.MatrixUtils.isSymmetric(matrix15);
        com.operations.Matrix.Matrix matrix41 = com.operations.Matrix.MatrixTransformations.scale2D((double) (-1L), (double) '4');
        double[][] doubleArray42 = matrix41.getData();
        com.operations.Matrix.Matrix matrix43 = com.operations.Matrix.MatrixOperations.multiply(matrix15, matrix41);
        com.operations.Matrix.Matrix matrix45 = com.operations.Matrix.MatrixTransformations.rotate2D((double) (-1L));
        com.operations.Matrix.Matrix matrix47 = com.operations.Matrix.MatrixTransformations.rotate2D((double) (short) 100);
        double[] doubleArray50 = new double[] { 137.90576492663388d, (byte) -1 };
        double[] doubleArray51 = com.operations.Matrix.MatrixSolver.solveGaussian(matrix47, doubleArray50);
        double[] doubleArray52 = com.operations.Matrix.MatrixSolver.solveGaussian(matrix45, doubleArray50);
        double[] doubleArray53 = com.operations.Matrix.MatrixSolver.solveGaussian(matrix41, doubleArray50);
        double[] doubleArray54 = com.operations.Matrix.MatrixSolver.solveGaussian(matrix13, doubleArray50);
        // The following exception was thrown during execution in test generation
        try {
            double[] doubleArray55 = com.operations.Matrix.MatrixSolver.solveGaussian(matrix8, doubleArray50);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Matrix is singular or nearly singular.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertArrayEquals(doubleArray2, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertArrayEquals(doubleArray5, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 2 + "'", int9 == 2);
        org.junit.Assert.assertNotNull(matrix11);
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertNotNull(matrix15);
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertArrayEquals(doubleArray18, new double[] { 137.90576492663388d, (-1.0d) }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertArrayEquals(doubleArray19, new double[] { (-24.931892522286255d), (-135.63701830716116d) }, 1.0E-15);
        org.junit.Assert.assertNotNull(matrix22);
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertArrayEquals(doubleArray25, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertArrayEquals(doubleArray28, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 2 + "'", int31 == 2);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 2 + "'", int32 == 2);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 2 + "'", int33 == 2);
        org.junit.Assert.assertNotNull(matrixArray34);
        org.junit.Assert.assertNotNull(matrix35);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(matrix41);
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertNotNull(matrix43);
        org.junit.Assert.assertNotNull(matrix45);
        org.junit.Assert.assertNotNull(matrix47);
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertArrayEquals(doubleArray50, new double[] { 137.90576492663388d, (-1.0d) }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertArrayEquals(doubleArray51, new double[] { (-24.931892522286255d), (-135.63701830716116d) }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertArrayEquals(doubleArray52, new double[] { 137.90221361711127d, 1.4069397643877004d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertArrayEquals(doubleArray53, new double[] { (-137.90576492663388d), (-0.019230769230769232d) }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray54);
        org.junit.Assert.assertArrayEquals(doubleArray54, new double[] { 137.8390783842506d, (-4.403234059237104d) }, 1.0E-15);
    }

    @Test
    public void test1865() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1865");
        // The following exception was thrown during execution in test generation
        try {
            com.operations.Matrix.Matrix matrix5 = com.operations.Matrix.MatrixUtils.generateRandomMatrix((int) (byte) 0, (int) (short) 0, (int) (short) 10, (int) (byte) 10, (long) (byte) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
    }

    @Test
    public void test1866() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1866");
        com.operations.Matrix.Matrix matrix2 = new com.operations.Matrix.Matrix(35, 52);
    }

    @Test
    public void test1867() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1867");
        com.operations.Matrix.Matrix matrix2 = com.operations.Matrix.MatrixTransformations.scale2D(0.0d, 0.0d);
        double double3 = com.operations.Matrix.MatrixUtils.frobeniusNorm(matrix2);
        // The following exception was thrown during execution in test generation
        try {
            com.operations.Matrix.Matrix matrix4 = com.operations.Matrix.MatrixDecompositions.choleskyDecomposition(matrix2);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Matrix is not positive definite.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(matrix2);
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + 0.0d + "'", double3 == 0.0d);
    }

    @Test
    public void test1868() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1868");
        com.operations.Matrix.Matrix matrix1 = com.operations.Matrix.MatrixTransformations.rotate2D(350.0d);
        com.operations.Matrix.Matrix matrix2 = com.operations.Matrix.MatrixDecompositions.choleskyDecomposition(matrix1);
        com.operations.Matrix.Matrix matrix4 = com.operations.Matrix.MatrixTransformations.rotate2D((double) '4');
        double[] doubleArray7 = new double[] { 10, 'a' };
        double[] doubleArray10 = new double[] { 10, 'a' };
        double[][] doubleArray11 = new double[][] { doubleArray7, doubleArray10 };
        com.operations.Matrix.Matrix matrix12 = new com.operations.Matrix.Matrix(doubleArray11);
        com.operations.Matrix.Matrix matrix13 = new com.operations.Matrix.Matrix(doubleArray11);
        com.operations.Matrix.Matrix matrix15 = com.operations.Matrix.MatrixTransformations.rotate2D((double) (short) 100);
        double[] doubleArray18 = new double[] { 137.90576492663388d, (byte) -1 };
        double[] doubleArray19 = com.operations.Matrix.MatrixSolver.solveGaussian(matrix15, doubleArray18);
        com.operations.Matrix.Matrix matrix20 = com.operations.Matrix.MatrixOperations.add(matrix13, matrix15);
        boolean boolean21 = com.operations.Matrix.MatrixUtils.isSymmetric(matrix20);
        boolean boolean23 = com.operations.Matrix.MatrixUtils.compare(matrix4, matrix20, 364.0054944640259d);
        com.operations.Matrix.Matrix matrix26 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0L, (double) (byte) 10);
        int int27 = matrix26.getRows();
        com.operations.Matrix.Matrix matrix29 = com.operations.Matrix.MatrixOperations.scalarMultiply(matrix26, (double) 2);
        matrix26.print();
        com.operations.Matrix.Matrix matrix31 = com.operations.Matrix.MatrixOperations.multiply(matrix20, matrix26);
        com.operations.Matrix.Matrix matrix32 = com.operations.Matrix.MatrixOperations.transpose(matrix31);
        boolean boolean34 = com.operations.Matrix.MatrixUtils.compare(matrix2, matrix32, (-1.0d));
        // The following exception was thrown during execution in test generation
        try {
            matrix32.setValue((int) ' ', (int) '4', 32.0d);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: Index 32 out of bounds for length 2");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(matrix1);
        org.junit.Assert.assertNotNull(matrix2);
        org.junit.Assert.assertNotNull(matrix4);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertArrayEquals(doubleArray7, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertArrayEquals(doubleArray10, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertNotNull(matrix15);
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertArrayEquals(doubleArray18, new double[] { 137.90576492663388d, (-1.0d) }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertArrayEquals(doubleArray19, new double[] { (-24.931892522286255d), (-135.63701830716116d) }, 1.0E-15);
        org.junit.Assert.assertNotNull(matrix20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertNotNull(matrix26);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 2 + "'", int27 == 2);
        org.junit.Assert.assertNotNull(matrix29);
        org.junit.Assert.assertNotNull(matrix31);
        org.junit.Assert.assertNotNull(matrix32);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
    }

    @Test
    public void test1869() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1869");
        com.operations.Matrix.Matrix matrix2 = com.operations.Matrix.MatrixTransformations.project2D((double) (short) 10, (double) (byte) -1);
        org.junit.Assert.assertNotNull(matrix2);
    }

    @Test
    public void test1870() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1870");
        com.operations.Matrix.Matrix matrix2 = com.operations.Matrix.MatrixTransformations.scale2D(131.06486943494812d, (double) (-1L));
        boolean boolean3 = com.operations.Matrix.MatrixUtils.isSquare(matrix2);
        org.junit.Assert.assertNotNull(matrix2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
    }

    @Test
    public void test1871() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1871");
        com.operations.Matrix.Matrix matrix5 = com.operations.Matrix.MatrixUtils.generateRandomMatrix((int) ' ', 10, 97, 10, (long) '#');
        com.operations.Matrix.Matrix matrix8 = com.operations.Matrix.MatrixTransformations.scale2D(99.83621769912266d, (double) 100.0f);
        // The following exception was thrown during execution in test generation
        try {
            com.operations.Matrix.Matrix matrix9 = com.operations.Matrix.MatrixOperations.subtract(matrix5, matrix8);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Matrices must have the same dimensions for subtraction.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(matrix5);
        org.junit.Assert.assertNotNull(matrix8);
    }

    @Test
    public void test1872() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1872");
        com.operations.Matrix.Matrix matrix2 = com.operations.Matrix.MatrixTransformations.project2D((double) (byte) 100, 32.0d);
        boolean boolean3 = com.operations.Matrix.MatrixUtils.isSquare(matrix2);
        com.operations.Matrix.Matrix matrix4 = com.operations.Matrix.MatrixDecompositions.choleskyDecomposition(matrix2);
        com.operations.Matrix.Matrix matrix7 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0L, (double) (byte) 10);
        int int8 = matrix7.getRows();
        com.operations.Matrix.Matrix matrix11 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0L, (double) (byte) 10);
        int int12 = matrix11.getRows();
        com.operations.Matrix.Matrix matrix14 = com.operations.Matrix.MatrixOperations.scalarMultiply(matrix11, (double) 2);
        com.operations.Matrix.Matrix matrix15 = com.operations.Matrix.MatrixOperations.subtract(matrix7, matrix11);
        com.operations.Matrix.Matrix matrix18 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0L, (double) (byte) 10);
        int int19 = matrix18.getRows();
        com.operations.Matrix.Matrix matrix25 = com.operations.Matrix.MatrixUtils.generateRandomMatrix(100, (int) (byte) 1, (int) '#', (int) '#', 1L);
        boolean boolean27 = com.operations.Matrix.MatrixUtils.compare(matrix18, matrix25, (double) 1.0f);
        com.operations.Matrix.Matrix matrix29 = com.operations.Matrix.MatrixOperations.scalarMultiply(matrix18, (double) 1L);
        boolean boolean31 = com.operations.Matrix.MatrixUtils.compare(matrix15, matrix29, 0.0d);
        com.operations.Matrix.Matrix matrix32 = com.operations.Matrix.MatrixOperations.add(matrix2, matrix15);
        double double33 = com.operations.Matrix.MatrixUtils.frobeniusNorm(matrix15);
        org.junit.Assert.assertNotNull(matrix2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNotNull(matrix4);
        org.junit.Assert.assertNotNull(matrix7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 2 + "'", int8 == 2);
        org.junit.Assert.assertNotNull(matrix11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 2 + "'", int12 == 2);
        org.junit.Assert.assertNotNull(matrix14);
        org.junit.Assert.assertNotNull(matrix15);
        org.junit.Assert.assertNotNull(matrix18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 2 + "'", int19 == 2);
        org.junit.Assert.assertNotNull(matrix25);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(matrix29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(matrix32);
        org.junit.Assert.assertTrue("'" + double33 + "' != '" + 0.0d + "'", double33 == 0.0d);
    }

    @Test
    public void test1873() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1873");
        double[] doubleArray2 = new double[] { 10, 'a' };
        double[] doubleArray5 = new double[] { 10, 'a' };
        double[][] doubleArray6 = new double[][] { doubleArray2, doubleArray5 };
        com.operations.Matrix.Matrix matrix7 = new com.operations.Matrix.Matrix(doubleArray6);
        int int8 = matrix7.getCols();
        int int9 = matrix7.getCols();
        com.operations.Matrix.Matrix[] matrixArray10 = com.operations.Matrix.MatrixDecompositions.luDecomposition(matrix7);
        java.lang.Class<?> wildcardClass11 = matrix7.getClass();
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertArrayEquals(doubleArray2, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertArrayEquals(doubleArray5, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 2 + "'", int8 == 2);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 2 + "'", int9 == 2);
        org.junit.Assert.assertNotNull(matrixArray10);
        org.junit.Assert.assertNotNull(wildcardClass11);
    }

    @Test
    public void test1874() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1874");
        com.operations.Matrix.Matrix matrix5 = com.operations.Matrix.MatrixUtils.generateRandomMatrix(100, (int) (short) 100, (int) 'a', 100, (long) 0);
        com.operations.Matrix.Matrix matrix7 = com.operations.Matrix.MatrixTransformations.rotate2D(350.0d);
        com.operations.Matrix.Matrix matrix9 = com.operations.Matrix.MatrixTransformations.rotate2D((double) (short) 100);
        double[] doubleArray12 = new double[] { 137.90576492663388d, (byte) -1 };
        double[] doubleArray13 = com.operations.Matrix.MatrixSolver.solveGaussian(matrix9, doubleArray12);
        double[] doubleArray14 = com.operations.Matrix.MatrixSolver.solveGaussian(matrix7, doubleArray13);
        // The following exception was thrown during execution in test generation
        try {
            double[] doubleArray15 = com.operations.Matrix.MatrixSolver.solveGaussian(matrix5, doubleArray13);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Constant vector size must match matrix size.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(matrix5);
        org.junit.Assert.assertNotNull(matrix7);
        org.junit.Assert.assertNotNull(matrix9);
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertArrayEquals(doubleArray12, new double[] { 137.90576492663388d, (-1.0d) }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertArrayEquals(doubleArray13, new double[] { (-24.931892522286255d), (-135.63701830716116d) }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertArrayEquals(doubleArray14, new double[] { (-0.9999999999999858d), (-137.90576492663388d) }, 1.0E-15);
    }

    @Test
    public void test1875() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1875");
        // The following exception was thrown during execution in test generation
        try {
            com.operations.Matrix.Matrix matrix2 = new com.operations.Matrix.Matrix(0, (int) (short) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.NegativeArraySizeException; message: -1");
        } catch (java.lang.NegativeArraySizeException e) {
            // Expected exception.
        }
    }

    @Test
    public void test1876() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1876");
        com.operations.Matrix.Matrix matrix1 = com.operations.Matrix.MatrixTransformations.rotate2D((double) '4');
        double[] doubleArray4 = new double[] { 10, 'a' };
        double[] doubleArray7 = new double[] { 10, 'a' };
        double[][] doubleArray8 = new double[][] { doubleArray4, doubleArray7 };
        com.operations.Matrix.Matrix matrix9 = new com.operations.Matrix.Matrix(doubleArray8);
        com.operations.Matrix.Matrix matrix10 = new com.operations.Matrix.Matrix(doubleArray8);
        com.operations.Matrix.Matrix matrix12 = com.operations.Matrix.MatrixTransformations.rotate2D((double) (short) 100);
        double[] doubleArray15 = new double[] { 137.90576492663388d, (byte) -1 };
        double[] doubleArray16 = com.operations.Matrix.MatrixSolver.solveGaussian(matrix12, doubleArray15);
        com.operations.Matrix.Matrix matrix17 = com.operations.Matrix.MatrixOperations.add(matrix10, matrix12);
        boolean boolean18 = com.operations.Matrix.MatrixUtils.isSymmetric(matrix17);
        boolean boolean20 = com.operations.Matrix.MatrixUtils.compare(matrix1, matrix17, 364.0054944640259d);
        com.operations.Matrix.Matrix matrix23 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0L, (double) (byte) 10);
        int int24 = matrix23.getRows();
        com.operations.Matrix.Matrix matrix26 = com.operations.Matrix.MatrixOperations.scalarMultiply(matrix23, (double) 2);
        matrix23.print();
        com.operations.Matrix.Matrix matrix28 = com.operations.Matrix.MatrixOperations.multiply(matrix17, matrix23);
        com.operations.Matrix.Matrix matrix29 = com.operations.Matrix.MatrixOperations.transpose(matrix28);
        com.operations.Matrix.Matrix matrix31 = com.operations.Matrix.MatrixTransformations.rotate2D(100.0d);
        int int32 = matrix31.getCols();
        double[][] doubleArray33 = matrix31.getData();
        double[] doubleArray36 = new double[] { 10, 'a' };
        double[] doubleArray39 = new double[] { 10, 'a' };
        double[][] doubleArray40 = new double[][] { doubleArray36, doubleArray39 };
        com.operations.Matrix.Matrix matrix41 = new com.operations.Matrix.Matrix(doubleArray40);
        com.operations.Matrix.Matrix matrix42 = com.operations.Matrix.MatrixOperations.transpose(matrix41);
        com.operations.Matrix.Matrix matrix45 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0L, (double) (byte) 10);
        int int46 = matrix45.getRows();
        com.operations.Matrix.Matrix matrix52 = com.operations.Matrix.MatrixUtils.generateRandomMatrix(100, (int) (byte) 1, (int) '#', (int) '#', 1L);
        boolean boolean54 = com.operations.Matrix.MatrixUtils.compare(matrix45, matrix52, (double) 1.0f);
        com.operations.Matrix.Matrix matrix56 = com.operations.Matrix.MatrixOperations.scalarMultiply(matrix45, (double) 1L);
        matrix45.print();
        com.operations.Matrix.Matrix matrix58 = com.operations.Matrix.MatrixOperations.multiply(matrix42, matrix45);
        boolean boolean60 = com.operations.Matrix.MatrixUtils.compare(matrix31, matrix58, (double) 0.0f);
        boolean boolean61 = com.operations.Matrix.MatrixUtils.isSquare(matrix58);
        double double62 = com.operations.Matrix.MatrixUtils.frobeniusNorm(matrix58);
        com.operations.Matrix.Matrix matrix63 = com.operations.Matrix.MatrixOperations.subtract(matrix28, matrix58);
        boolean boolean64 = com.operations.Matrix.MatrixUtils.isSymmetric(matrix28);
        com.operations.Matrix.Matrix matrix67 = new com.operations.Matrix.Matrix(0, (int) (byte) 100);
        boolean boolean68 = com.operations.Matrix.MatrixUtils.isSquare(matrix67);
        com.operations.Matrix.Matrix matrix69 = com.operations.Matrix.MatrixOperations.transpose(matrix67);
        // The following exception was thrown during execution in test generation
        try {
            com.operations.Matrix.Matrix matrix70 = com.operations.Matrix.MatrixOperations.add(matrix28, matrix67);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Matrices must have the same dimensions for addition.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(matrix1);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertArrayEquals(doubleArray4, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertArrayEquals(doubleArray7, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertNotNull(matrix12);
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertArrayEquals(doubleArray15, new double[] { 137.90576492663388d, (-1.0d) }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertArrayEquals(doubleArray16, new double[] { (-24.931892522286255d), (-135.63701830716116d) }, 1.0E-15);
        org.junit.Assert.assertNotNull(matrix17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertNotNull(matrix23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 2 + "'", int24 == 2);
        org.junit.Assert.assertNotNull(matrix26);
        org.junit.Assert.assertNotNull(matrix28);
        org.junit.Assert.assertNotNull(matrix29);
        org.junit.Assert.assertNotNull(matrix31);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 2 + "'", int32 == 2);
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertArrayEquals(doubleArray36, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertArrayEquals(doubleArray39, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertNotNull(matrix42);
        org.junit.Assert.assertNotNull(matrix45);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 2 + "'", int46 == 2);
        org.junit.Assert.assertNotNull(matrix52);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(matrix56);
        org.junit.Assert.assertNotNull(matrix58);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + true + "'", boolean61 == true);
        org.junit.Assert.assertTrue("'" + double62 + "' != '" + 975.1410154434076d + "'", double62 == 975.1410154434076d);
        org.junit.Assert.assertNotNull(matrix63);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertNotNull(matrix69);
    }

    @Test
    public void test1877() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1877");
        com.operations.Matrix.Matrix matrix2 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0L, (double) (byte) 10);
        double[] doubleArray5 = new double[] { 10, 'a' };
        double[] doubleArray8 = new double[] { 10, 'a' };
        double[][] doubleArray9 = new double[][] { doubleArray5, doubleArray8 };
        com.operations.Matrix.Matrix matrix10 = new com.operations.Matrix.Matrix(doubleArray9);
        int int11 = matrix10.getCols();
        int int12 = matrix10.getCols();
        int int13 = matrix10.getCols();
        com.operations.Matrix.Matrix[] matrixArray14 = com.operations.Matrix.MatrixDecompositions.luDecomposition(matrix10);
        com.operations.Matrix.Matrix matrix15 = com.operations.Matrix.MatrixOperations.multiply(matrix2, matrix10);
        com.operations.Matrix.Matrix matrix17 = com.operations.Matrix.MatrixTransformations.rotate2D((double) (short) 100);
        boolean boolean19 = com.operations.Matrix.MatrixUtils.compare(matrix10, matrix17, (double) (byte) 0);
        com.operations.Matrix.Matrix[] matrixArray20 = com.operations.Matrix.MatrixDecompositions.luDecomposition(matrix10);
        com.operations.Matrix.Matrix matrix21 = com.operations.Matrix.MatrixOperations.transpose(matrix10);
        int int22 = matrix21.getCols();
        double[] doubleArray25 = new double[] { 10, 'a' };
        double[] doubleArray28 = new double[] { 10, 'a' };
        double[][] doubleArray29 = new double[][] { doubleArray25, doubleArray28 };
        com.operations.Matrix.Matrix matrix30 = new com.operations.Matrix.Matrix(doubleArray29);
        com.operations.Matrix.Matrix matrix31 = new com.operations.Matrix.Matrix(doubleArray29);
        boolean boolean32 = com.operations.Matrix.MatrixUtils.isSquare(matrix31);
        double[] doubleArray35 = new double[] { 10, 'a' };
        double[] doubleArray38 = new double[] { 10, 'a' };
        double[][] doubleArray39 = new double[][] { doubleArray35, doubleArray38 };
        com.operations.Matrix.Matrix matrix40 = new com.operations.Matrix.Matrix(doubleArray39);
        int int41 = matrix40.getCols();
        int int42 = matrix40.getCols();
        matrix40.print();
        double[] doubleArray46 = new double[] { 10, 'a' };
        double[] doubleArray49 = new double[] { 10, 'a' };
        double[][] doubleArray50 = new double[][] { doubleArray46, doubleArray49 };
        com.operations.Matrix.Matrix matrix51 = new com.operations.Matrix.Matrix(doubleArray50);
        boolean boolean53 = com.operations.Matrix.MatrixUtils.compare(matrix40, matrix51, (double) (-1));
        com.operations.Matrix.Matrix matrix54 = com.operations.Matrix.MatrixOperations.subtract(matrix31, matrix51);
        com.operations.Matrix.Matrix[] matrixArray55 = com.operations.Matrix.MatrixDecompositions.luDecomposition(matrix54);
        double[][] doubleArray56 = matrix54.getData();
        com.operations.Matrix.Matrix matrix57 = new com.operations.Matrix.Matrix(doubleArray56);
        com.operations.Matrix.Matrix matrix58 = new com.operations.Matrix.Matrix(doubleArray56);
        com.operations.Matrix.Matrix matrix59 = com.operations.Matrix.MatrixOperations.multiply(matrix21, matrix58);
        // The following exception was thrown during execution in test generation
        try {
            matrix59.setValue((int) (short) 10, (int) (byte) 10, (double) (byte) 1);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: Index 10 out of bounds for length 2");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(matrix2);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertArrayEquals(doubleArray5, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertArrayEquals(doubleArray8, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 2 + "'", int11 == 2);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 2 + "'", int12 == 2);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 2 + "'", int13 == 2);
        org.junit.Assert.assertNotNull(matrixArray14);
        org.junit.Assert.assertNotNull(matrix15);
        org.junit.Assert.assertNotNull(matrix17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(matrixArray20);
        org.junit.Assert.assertNotNull(matrix21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 2 + "'", int22 == 2);
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertArrayEquals(doubleArray25, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertArrayEquals(doubleArray28, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertArrayEquals(doubleArray35, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertArrayEquals(doubleArray38, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 2 + "'", int41 == 2);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 2 + "'", int42 == 2);
        org.junit.Assert.assertNotNull(doubleArray46);
        org.junit.Assert.assertArrayEquals(doubleArray46, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertArrayEquals(doubleArray49, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(matrix54);
        org.junit.Assert.assertNotNull(matrixArray55);
        org.junit.Assert.assertNotNull(doubleArray56);
        org.junit.Assert.assertNotNull(matrix59);
    }

    @Test
    public void test1878() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1878");
        double[] doubleArray2 = new double[] { 10, 'a' };
        double[] doubleArray5 = new double[] { 10, 'a' };
        double[][] doubleArray6 = new double[][] { doubleArray2, doubleArray5 };
        com.operations.Matrix.Matrix matrix7 = new com.operations.Matrix.Matrix(doubleArray6);
        int int8 = matrix7.getCols();
        boolean boolean9 = com.operations.Matrix.MatrixUtils.isSquare(matrix7);
        com.operations.Matrix.Matrix matrix10 = com.operations.Matrix.MatrixOperations.transpose(matrix7);
        int int11 = matrix10.getRows();
        com.operations.Matrix.Matrix matrix14 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0L, (double) (byte) 10);
        double[] doubleArray17 = new double[] { 10, 'a' };
        double[] doubleArray20 = new double[] { 10, 'a' };
        double[][] doubleArray21 = new double[][] { doubleArray17, doubleArray20 };
        com.operations.Matrix.Matrix matrix22 = new com.operations.Matrix.Matrix(doubleArray21);
        int int23 = matrix22.getCols();
        int int24 = matrix22.getCols();
        int int25 = matrix22.getCols();
        com.operations.Matrix.Matrix[] matrixArray26 = com.operations.Matrix.MatrixDecompositions.luDecomposition(matrix22);
        com.operations.Matrix.Matrix matrix27 = com.operations.Matrix.MatrixOperations.multiply(matrix14, matrix22);
        com.operations.Matrix.Matrix matrix29 = com.operations.Matrix.MatrixTransformations.rotate2D((double) (short) 100);
        boolean boolean31 = com.operations.Matrix.MatrixUtils.compare(matrix22, matrix29, (double) (byte) 0);
        com.operations.Matrix.Matrix matrix32 = com.operations.Matrix.MatrixOperations.multiply(matrix10, matrix22);
        int int33 = matrix10.getCols();
        double[][] doubleArray34 = matrix10.getData();
        com.operations.Matrix.Matrix matrix37 = com.operations.Matrix.MatrixTransformations.project2D((double) 10L, 10.0d);
        com.operations.Matrix.Matrix matrix39 = com.operations.Matrix.MatrixTransformations.rotate2D((double) (short) 100);
        double[] doubleArray42 = new double[] { 137.90576492663388d, (byte) -1 };
        double[] doubleArray43 = com.operations.Matrix.MatrixSolver.solveGaussian(matrix39, doubleArray42);
        com.operations.Matrix.Matrix matrix46 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0L, (double) (byte) 10);
        double[] doubleArray49 = new double[] { 10, 'a' };
        double[] doubleArray52 = new double[] { 10, 'a' };
        double[][] doubleArray53 = new double[][] { doubleArray49, doubleArray52 };
        com.operations.Matrix.Matrix matrix54 = new com.operations.Matrix.Matrix(doubleArray53);
        int int55 = matrix54.getCols();
        int int56 = matrix54.getCols();
        int int57 = matrix54.getCols();
        com.operations.Matrix.Matrix[] matrixArray58 = com.operations.Matrix.MatrixDecompositions.luDecomposition(matrix54);
        com.operations.Matrix.Matrix matrix59 = com.operations.Matrix.MatrixOperations.multiply(matrix46, matrix54);
        boolean boolean61 = com.operations.Matrix.MatrixUtils.compare(matrix39, matrix46, (double) (-1L));
        double[][] doubleArray62 = matrix39.getData();
        com.operations.Matrix.Matrix matrix64 = com.operations.Matrix.MatrixTransformations.rotate2D((double) (short) 100);
        double[] doubleArray67 = new double[] { 137.90576492663388d, (byte) -1 };
        double[] doubleArray68 = com.operations.Matrix.MatrixSolver.solveGaussian(matrix64, doubleArray67);
        double[] doubleArray69 = com.operations.Matrix.MatrixSolver.solveGaussian(matrix39, doubleArray67);
        double[] doubleArray70 = com.operations.Matrix.MatrixSolver.solveGaussian(matrix37, doubleArray69);
        boolean boolean72 = com.operations.Matrix.MatrixUtils.compare(matrix10, matrix37, (double) 100.0f);
        com.operations.Matrix.Matrix matrix73 = com.operations.Matrix.MatrixOperations.transpose(matrix37);
        com.operations.Matrix.Matrix matrix76 = com.operations.Matrix.MatrixTransformations.project2D((double) (short) 100, 35.0d);
        com.operations.Matrix.Matrix matrix78 = com.operations.Matrix.MatrixTransformations.rotate2D((double) (-1L));
        com.operations.Matrix.Matrix matrix80 = com.operations.Matrix.MatrixTransformations.rotate2D((double) (short) 100);
        double[] doubleArray83 = new double[] { 137.90576492663388d, (byte) -1 };
        double[] doubleArray84 = com.operations.Matrix.MatrixSolver.solveGaussian(matrix80, doubleArray83);
        double[] doubleArray85 = com.operations.Matrix.MatrixSolver.solveGaussian(matrix78, doubleArray83);
        double[] doubleArray86 = com.operations.Matrix.MatrixSolver.solveGaussian(matrix76, doubleArray85);
        double[] doubleArray87 = com.operations.Matrix.MatrixSolver.solveGaussian(matrix37, doubleArray85);
        com.operations.Matrix.Matrix matrix88 = null;
        // The following exception was thrown during execution in test generation
        try {
            com.operations.Matrix.Matrix matrix89 = com.operations.Matrix.MatrixOperations.multiply(matrix37, matrix88);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertArrayEquals(doubleArray2, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertArrayEquals(doubleArray5, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 2 + "'", int8 == 2);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertNotNull(matrix10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 2 + "'", int11 == 2);
        org.junit.Assert.assertNotNull(matrix14);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertArrayEquals(doubleArray17, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertArrayEquals(doubleArray20, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 2 + "'", int23 == 2);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 2 + "'", int24 == 2);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 2 + "'", int25 == 2);
        org.junit.Assert.assertNotNull(matrixArray26);
        org.junit.Assert.assertNotNull(matrix27);
        org.junit.Assert.assertNotNull(matrix29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(matrix32);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 2 + "'", int33 == 2);
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertNotNull(matrix37);
        org.junit.Assert.assertNotNull(matrix39);
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertArrayEquals(doubleArray42, new double[] { 137.90576492663388d, (-1.0d) }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertArrayEquals(doubleArray43, new double[] { (-24.931892522286255d), (-135.63701830716116d) }, 1.0E-15);
        org.junit.Assert.assertNotNull(matrix46);
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertArrayEquals(doubleArray49, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertArrayEquals(doubleArray52, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 2 + "'", int55 == 2);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 2 + "'", int56 == 2);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 2 + "'", int57 == 2);
        org.junit.Assert.assertNotNull(matrixArray58);
        org.junit.Assert.assertNotNull(matrix59);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNotNull(doubleArray62);
        org.junit.Assert.assertNotNull(matrix64);
        org.junit.Assert.assertNotNull(doubleArray67);
        org.junit.Assert.assertArrayEquals(doubleArray67, new double[] { 137.90576492663388d, (-1.0d) }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray68);
        org.junit.Assert.assertArrayEquals(doubleArray68, new double[] { (-24.931892522286255d), (-135.63701830716116d) }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray69);
        org.junit.Assert.assertArrayEquals(doubleArray69, new double[] { (-24.931892522286255d), (-135.63701830716116d) }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray70);
        org.junit.Assert.assertArrayEquals(doubleArray70, new double[] { (-2.4931892522286256d), (-13.563701830716116d) }, 1.0E-15);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + true + "'", boolean72 == true);
        org.junit.Assert.assertNotNull(matrix73);
        org.junit.Assert.assertNotNull(matrix76);
        org.junit.Assert.assertNotNull(matrix78);
        org.junit.Assert.assertNotNull(matrix80);
        org.junit.Assert.assertNotNull(doubleArray83);
        org.junit.Assert.assertArrayEquals(doubleArray83, new double[] { 137.90576492663388d, (-1.0d) }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray84);
        org.junit.Assert.assertArrayEquals(doubleArray84, new double[] { (-24.931892522286255d), (-135.63701830716116d) }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray85);
        org.junit.Assert.assertArrayEquals(doubleArray85, new double[] { 137.90221361711127d, 1.4069397643877004d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray86);
        org.junit.Assert.assertArrayEquals(doubleArray86, new double[] { 1.3790221361711128d, 0.04019827898250573d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray87);
        org.junit.Assert.assertArrayEquals(doubleArray87, new double[] { 13.790221361711128d, 0.14069397643877005d }, 1.0E-15);
    }

    @Test
    public void test1879() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1879");
        com.operations.Matrix.Matrix matrix2 = com.operations.Matrix.MatrixTransformations.project2D(365.68429006453096d, 145.11374848717816d);
        boolean boolean3 = com.operations.Matrix.MatrixUtils.isSymmetric(matrix2);
        org.junit.Assert.assertNotNull(matrix2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
    }

    @Test
    public void test1880() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1880");
        com.operations.Matrix.Matrix matrix2 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0L, (double) (byte) 10);
        double[] doubleArray5 = new double[] { 10, 'a' };
        double[] doubleArray8 = new double[] { 10, 'a' };
        double[][] doubleArray9 = new double[][] { doubleArray5, doubleArray8 };
        com.operations.Matrix.Matrix matrix10 = new com.operations.Matrix.Matrix(doubleArray9);
        int int11 = matrix10.getCols();
        int int12 = matrix10.getCols();
        int int13 = matrix10.getCols();
        com.operations.Matrix.Matrix[] matrixArray14 = com.operations.Matrix.MatrixDecompositions.luDecomposition(matrix10);
        com.operations.Matrix.Matrix matrix15 = com.operations.Matrix.MatrixOperations.multiply(matrix2, matrix10);
        com.operations.Matrix.Matrix matrix17 = com.operations.Matrix.MatrixTransformations.rotate2D((double) (short) 100);
        boolean boolean19 = com.operations.Matrix.MatrixUtils.compare(matrix10, matrix17, (double) (byte) 0);
        com.operations.Matrix.Matrix matrix20 = com.operations.Matrix.MatrixOperations.transpose(matrix10);
        com.operations.Matrix.Matrix matrix22 = com.operations.Matrix.MatrixOperations.scalarMultiply(matrix20, (double) 10);
        double[] doubleArray25 = new double[] { 10, 'a' };
        double[] doubleArray28 = new double[] { 10, 'a' };
        double[][] doubleArray29 = new double[][] { doubleArray25, doubleArray28 };
        com.operations.Matrix.Matrix matrix30 = new com.operations.Matrix.Matrix(doubleArray29);
        int int31 = matrix30.getCols();
        int int32 = matrix30.getCols();
        int int33 = matrix30.getCols();
        com.operations.Matrix.Matrix matrix39 = com.operations.Matrix.MatrixUtils.generateRandomMatrix(100, (int) (byte) 1, (int) '#', (int) '#', 1L);
        double double42 = matrix39.getValue((int) '4', 0);
        double double43 = com.operations.Matrix.MatrixUtils.frobeniusNorm(matrix39);
        boolean boolean44 = com.operations.Matrix.MatrixUtils.isSquare(matrix39);
        boolean boolean46 = com.operations.Matrix.MatrixUtils.compare(matrix30, matrix39, (double) 100L);
        com.operations.Matrix.Matrix matrix47 = com.operations.Matrix.MatrixDecompositions.choleskyDecomposition(matrix30);
        boolean boolean49 = com.operations.Matrix.MatrixUtils.compare(matrix20, matrix47, 0.0d);
        boolean boolean50 = com.operations.Matrix.MatrixUtils.isSquare(matrix20);
        org.junit.Assert.assertNotNull(matrix2);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertArrayEquals(doubleArray5, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertArrayEquals(doubleArray8, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 2 + "'", int11 == 2);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 2 + "'", int12 == 2);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 2 + "'", int13 == 2);
        org.junit.Assert.assertNotNull(matrixArray14);
        org.junit.Assert.assertNotNull(matrix15);
        org.junit.Assert.assertNotNull(matrix17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(matrix20);
        org.junit.Assert.assertNotNull(matrix22);
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertArrayEquals(doubleArray25, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertArrayEquals(doubleArray28, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 2 + "'", int31 == 2);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 2 + "'", int32 == 2);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 2 + "'", int33 == 2);
        org.junit.Assert.assertNotNull(matrix39);
        org.junit.Assert.assertTrue("'" + double42 + "' != '" + 35.0d + "'", double42 == 35.0d);
        org.junit.Assert.assertTrue("'" + double43 + "' != '" + 350.0d + "'", double43 == 350.0d);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(matrix47);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
    }

    @Test
    public void test1881() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1881");
        com.operations.Matrix.Matrix matrix2 = com.operations.Matrix.MatrixTransformations.project2D((double) (-1L), (-1.0d));
        // The following exception was thrown during execution in test generation
        try {
            double double5 = matrix2.getValue((int) (byte) 100, 52);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(matrix2);
    }

    @Test
    public void test1882() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1882");
        com.operations.Matrix.Matrix matrix2 = com.operations.Matrix.MatrixTransformations.scale2D(1363.6076983299943d, (double) '4');
        org.junit.Assert.assertNotNull(matrix2);
    }

    @Test
    public void test1883() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1883");
        com.operations.Matrix.Matrix matrix2 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0L, (double) (byte) 10);
        double[] doubleArray5 = new double[] { 10, 'a' };
        double[] doubleArray8 = new double[] { 10, 'a' };
        double[][] doubleArray9 = new double[][] { doubleArray5, doubleArray8 };
        com.operations.Matrix.Matrix matrix10 = new com.operations.Matrix.Matrix(doubleArray9);
        int int11 = matrix10.getCols();
        int int12 = matrix10.getCols();
        int int13 = matrix10.getCols();
        com.operations.Matrix.Matrix[] matrixArray14 = com.operations.Matrix.MatrixDecompositions.luDecomposition(matrix10);
        com.operations.Matrix.Matrix matrix15 = com.operations.Matrix.MatrixOperations.multiply(matrix2, matrix10);
        com.operations.Matrix.Matrix matrix17 = com.operations.Matrix.MatrixTransformations.rotate2D((double) (short) 100);
        boolean boolean19 = com.operations.Matrix.MatrixUtils.compare(matrix10, matrix17, (double) (byte) 0);
        double[] doubleArray22 = new double[] { 10, 'a' };
        double[] doubleArray25 = new double[] { 10, 'a' };
        double[][] doubleArray26 = new double[][] { doubleArray22, doubleArray25 };
        com.operations.Matrix.Matrix matrix27 = new com.operations.Matrix.Matrix(doubleArray26);
        com.operations.Matrix.Matrix matrix28 = new com.operations.Matrix.Matrix(doubleArray26);
        com.operations.Matrix.Matrix matrix29 = new com.operations.Matrix.Matrix(doubleArray26);
        boolean boolean31 = com.operations.Matrix.MatrixUtils.compare(matrix10, matrix29, (double) (-1));
        com.operations.Matrix.Matrix matrix33 = com.operations.Matrix.MatrixTransformations.rotate2D((double) (short) 100);
        double[] doubleArray36 = new double[] { 137.90576492663388d, (byte) -1 };
        double[] doubleArray37 = com.operations.Matrix.MatrixSolver.solveGaussian(matrix33, doubleArray36);
        com.operations.Matrix.Matrix matrix40 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0L, (double) (byte) 10);
        double[] doubleArray43 = new double[] { 10, 'a' };
        double[] doubleArray46 = new double[] { 10, 'a' };
        double[][] doubleArray47 = new double[][] { doubleArray43, doubleArray46 };
        com.operations.Matrix.Matrix matrix48 = new com.operations.Matrix.Matrix(doubleArray47);
        int int49 = matrix48.getCols();
        int int50 = matrix48.getCols();
        int int51 = matrix48.getCols();
        com.operations.Matrix.Matrix[] matrixArray52 = com.operations.Matrix.MatrixDecompositions.luDecomposition(matrix48);
        com.operations.Matrix.Matrix matrix53 = com.operations.Matrix.MatrixOperations.multiply(matrix40, matrix48);
        boolean boolean55 = com.operations.Matrix.MatrixUtils.compare(matrix33, matrix40, (double) (-1L));
        com.operations.Matrix.Matrix matrix56 = com.operations.Matrix.MatrixOperations.add(matrix29, matrix40);
        // The following exception was thrown during execution in test generation
        try {
            matrix56.setValue((int) (short) 10, (int) (byte) 100, 18.985133644271098d);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: Index 10 out of bounds for length 2");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(matrix2);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertArrayEquals(doubleArray5, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertArrayEquals(doubleArray8, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 2 + "'", int11 == 2);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 2 + "'", int12 == 2);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 2 + "'", int13 == 2);
        org.junit.Assert.assertNotNull(matrixArray14);
        org.junit.Assert.assertNotNull(matrix15);
        org.junit.Assert.assertNotNull(matrix17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertArrayEquals(doubleArray22, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertArrayEquals(doubleArray25, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(matrix33);
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertArrayEquals(doubleArray36, new double[] { 137.90576492663388d, (-1.0d) }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertArrayEquals(doubleArray37, new double[] { (-24.931892522286255d), (-135.63701830716116d) }, 1.0E-15);
        org.junit.Assert.assertNotNull(matrix40);
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertArrayEquals(doubleArray43, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray46);
        org.junit.Assert.assertArrayEquals(doubleArray46, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 2 + "'", int49 == 2);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 2 + "'", int50 == 2);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 2 + "'", int51 == 2);
        org.junit.Assert.assertNotNull(matrixArray52);
        org.junit.Assert.assertNotNull(matrix53);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNotNull(matrix56);
    }

    @Test
    public void test1884() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1884");
        com.operations.Matrix.Matrix matrix2 = com.operations.Matrix.MatrixTransformations.project2D(36.40054944640259d, 364.0054944640259d);
        com.operations.Matrix.Matrix matrix4 = com.operations.Matrix.MatrixOperations.scalarMultiply(matrix2, 30.0d);
        com.operations.Matrix.Matrix[] matrixArray5 = com.operations.Matrix.MatrixDecompositions.luDecomposition(matrix2);
        matrix2.print();
        org.junit.Assert.assertNotNull(matrix2);
        org.junit.Assert.assertNotNull(matrix4);
        org.junit.Assert.assertNotNull(matrixArray5);
    }

    @Test
    public void test1885() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1885");
        com.operations.Matrix.Matrix matrix5 = com.operations.Matrix.MatrixUtils.generateRandomMatrix(32, 35, (int) (short) 100, (int) '#', (long) (-1));
        org.junit.Assert.assertNotNull(matrix5);
    }

    @Test
    public void test1886() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1886");
        double[] doubleArray2 = new double[] { 10, 'a' };
        double[] doubleArray5 = new double[] { 10, 'a' };
        double[][] doubleArray6 = new double[][] { doubleArray2, doubleArray5 };
        com.operations.Matrix.Matrix matrix7 = new com.operations.Matrix.Matrix(doubleArray6);
        int int8 = matrix7.getCols();
        int int9 = matrix7.getCols();
        boolean boolean10 = com.operations.Matrix.MatrixUtils.isSquare(matrix7);
        com.operations.Matrix.Matrix matrix11 = com.operations.Matrix.MatrixDecompositions.choleskyDecomposition(matrix7);
        com.operations.Matrix.Matrix matrix14 = com.operations.Matrix.MatrixTransformations.project2D(0.0d, (double) 0);
        com.operations.Matrix.Matrix matrix15 = com.operations.Matrix.MatrixOperations.subtract(matrix11, matrix14);
        com.operations.Matrix.Matrix matrix17 = com.operations.Matrix.MatrixOperations.scalarMultiply(matrix11, (double) 1.0f);
        int int18 = matrix17.getCols();
        double double19 = com.operations.Matrix.MatrixUtils.frobeniusNorm(matrix17);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertArrayEquals(doubleArray2, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertArrayEquals(doubleArray5, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 2 + "'", int8 == 2);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 2 + "'", int9 == 2);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(matrix11);
        org.junit.Assert.assertNotNull(matrix14);
        org.junit.Assert.assertNotNull(matrix15);
        org.junit.Assert.assertNotNull(matrix17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 2 + "'", int18 == 2);
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 10.344080432788601d + "'", double19 == 10.344080432788601d);
    }

    @Test
    public void test1887() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1887");
        com.operations.Matrix.Matrix matrix1 = com.operations.Matrix.MatrixTransformations.rotate2D((-0.1736481776669303d));
        double[] doubleArray4 = new double[] { 10, 'a' };
        double[] doubleArray7 = new double[] { 10, 'a' };
        double[][] doubleArray8 = new double[][] { doubleArray4, doubleArray7 };
        com.operations.Matrix.Matrix matrix9 = new com.operations.Matrix.Matrix(doubleArray8);
        com.operations.Matrix.Matrix matrix10 = new com.operations.Matrix.Matrix(doubleArray8);
        boolean boolean11 = com.operations.Matrix.MatrixUtils.isSquare(matrix10);
        double[] doubleArray14 = new double[] { 10, 'a' };
        double[] doubleArray17 = new double[] { 10, 'a' };
        double[][] doubleArray18 = new double[][] { doubleArray14, doubleArray17 };
        com.operations.Matrix.Matrix matrix19 = new com.operations.Matrix.Matrix(doubleArray18);
        int int20 = matrix19.getCols();
        int int21 = matrix19.getCols();
        matrix19.print();
        double[] doubleArray25 = new double[] { 10, 'a' };
        double[] doubleArray28 = new double[] { 10, 'a' };
        double[][] doubleArray29 = new double[][] { doubleArray25, doubleArray28 };
        com.operations.Matrix.Matrix matrix30 = new com.operations.Matrix.Matrix(doubleArray29);
        boolean boolean32 = com.operations.Matrix.MatrixUtils.compare(matrix19, matrix30, (double) (-1));
        com.operations.Matrix.Matrix matrix33 = com.operations.Matrix.MatrixOperations.subtract(matrix10, matrix30);
        double[] doubleArray36 = new double[] { 10, 'a' };
        double[] doubleArray39 = new double[] { 10, 'a' };
        double[][] doubleArray40 = new double[][] { doubleArray36, doubleArray39 };
        com.operations.Matrix.Matrix matrix41 = new com.operations.Matrix.Matrix(doubleArray40);
        com.operations.Matrix.Matrix matrix42 = new com.operations.Matrix.Matrix(doubleArray40);
        boolean boolean43 = com.operations.Matrix.MatrixUtils.isSquare(matrix42);
        double[] doubleArray46 = new double[] { 10, 'a' };
        double[] doubleArray49 = new double[] { 10, 'a' };
        double[][] doubleArray50 = new double[][] { doubleArray46, doubleArray49 };
        com.operations.Matrix.Matrix matrix51 = new com.operations.Matrix.Matrix(doubleArray50);
        int int52 = matrix51.getCols();
        int int53 = matrix51.getCols();
        matrix51.print();
        double[] doubleArray57 = new double[] { 10, 'a' };
        double[] doubleArray60 = new double[] { 10, 'a' };
        double[][] doubleArray61 = new double[][] { doubleArray57, doubleArray60 };
        com.operations.Matrix.Matrix matrix62 = new com.operations.Matrix.Matrix(doubleArray61);
        boolean boolean64 = com.operations.Matrix.MatrixUtils.compare(matrix51, matrix62, (double) (-1));
        com.operations.Matrix.Matrix matrix65 = com.operations.Matrix.MatrixOperations.subtract(matrix42, matrix62);
        com.operations.Matrix.Matrix matrix66 = com.operations.Matrix.MatrixOperations.add(matrix10, matrix65);
        com.operations.Matrix.Matrix matrix67 = com.operations.Matrix.MatrixOperations.multiply(matrix1, matrix66);
        int int68 = matrix67.getRows();
        com.operations.Matrix.Matrix[] matrixArray69 = com.operations.Matrix.MatrixDecompositions.luDecomposition(matrix67);
        org.junit.Assert.assertNotNull(matrix1);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertArrayEquals(doubleArray4, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertArrayEquals(doubleArray7, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertArrayEquals(doubleArray14, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertArrayEquals(doubleArray17, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 2 + "'", int20 == 2);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 2 + "'", int21 == 2);
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertArrayEquals(doubleArray25, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertArrayEquals(doubleArray28, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(matrix33);
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertArrayEquals(doubleArray36, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertArrayEquals(doubleArray39, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertNotNull(doubleArray46);
        org.junit.Assert.assertArrayEquals(doubleArray46, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertArrayEquals(doubleArray49, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 2 + "'", int52 == 2);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 2 + "'", int53 == 2);
        org.junit.Assert.assertNotNull(doubleArray57);
        org.junit.Assert.assertArrayEquals(doubleArray57, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray60);
        org.junit.Assert.assertArrayEquals(doubleArray60, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray61);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertNotNull(matrix65);
        org.junit.Assert.assertNotNull(matrix66);
        org.junit.Assert.assertNotNull(matrix67);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 2 + "'", int68 == 2);
        org.junit.Assert.assertNotNull(matrixArray69);
    }

    @Test
    public void test1888() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1888");
        com.operations.Matrix.Matrix matrix1 = com.operations.Matrix.MatrixTransformations.rotate2D(21.023651153076518d);
        // The following exception was thrown during execution in test generation
        try {
            matrix1.setValue((int) (short) 0, (int) 'a', (double) 97);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: Index 97 out of bounds for length 2");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(matrix1);
    }

    @Test
    public void test1889() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1889");
        com.operations.Matrix.Matrix matrix2 = com.operations.Matrix.MatrixTransformations.scale2D((double) 100.0f, 1.4142135623730951d);
        // The following exception was thrown during execution in test generation
        try {
            matrix2.setValue(10, 1, (double) 1L);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: Index 10 out of bounds for length 2");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(matrix2);
    }

    @Test
    public void test1890() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1890");
        com.operations.Matrix.Matrix matrix1 = com.operations.Matrix.MatrixTransformations.rotate2D(1.414213562373095d);
        double[][] doubleArray2 = matrix1.getData();
        com.operations.Matrix.Matrix matrix3 = new com.operations.Matrix.Matrix(doubleArray2);
        double[] doubleArray6 = new double[] { 10, 'a' };
        double[] doubleArray9 = new double[] { 10, 'a' };
        double[][] doubleArray10 = new double[][] { doubleArray6, doubleArray9 };
        com.operations.Matrix.Matrix matrix11 = new com.operations.Matrix.Matrix(doubleArray10);
        com.operations.Matrix.Matrix matrix12 = new com.operations.Matrix.Matrix(doubleArray10);
        com.operations.Matrix.Matrix matrix14 = com.operations.Matrix.MatrixTransformations.rotate2D((double) (short) 100);
        double[] doubleArray17 = new double[] { 137.90576492663388d, (byte) -1 };
        double[] doubleArray18 = com.operations.Matrix.MatrixSolver.solveGaussian(matrix14, doubleArray17);
        com.operations.Matrix.Matrix matrix19 = com.operations.Matrix.MatrixOperations.add(matrix12, matrix14);
        com.operations.Matrix.Matrix matrix20 = com.operations.Matrix.MatrixOperations.transpose(matrix14);
        int int21 = matrix14.getCols();
        int int22 = matrix14.getRows();
        double[] doubleArray25 = new double[] { 10, 'a' };
        double[] doubleArray28 = new double[] { 10, 'a' };
        double[][] doubleArray29 = new double[][] { doubleArray25, doubleArray28 };
        com.operations.Matrix.Matrix matrix30 = new com.operations.Matrix.Matrix(doubleArray29);
        int int31 = matrix30.getCols();
        int int32 = matrix30.getCols();
        matrix30.print();
        double[] doubleArray36 = new double[] { 10, 'a' };
        double[] doubleArray39 = new double[] { 10, 'a' };
        double[][] doubleArray40 = new double[][] { doubleArray36, doubleArray39 };
        com.operations.Matrix.Matrix matrix41 = new com.operations.Matrix.Matrix(doubleArray40);
        boolean boolean43 = com.operations.Matrix.MatrixUtils.compare(matrix30, matrix41, (double) (-1));
        com.operations.Matrix.Matrix matrix44 = com.operations.Matrix.MatrixOperations.multiply(matrix14, matrix30);
        double double47 = matrix14.getValue((int) (short) 0, 0);
        com.operations.Matrix.Matrix matrix48 = com.operations.Matrix.MatrixOperations.transpose(matrix14);
        boolean boolean50 = com.operations.Matrix.MatrixUtils.compare(matrix3, matrix48, (double) '4');
        int int51 = matrix48.getRows();
        double[] doubleArray54 = new double[] { 10, 'a' };
        double[] doubleArray57 = new double[] { 10, 'a' };
        double[][] doubleArray58 = new double[][] { doubleArray54, doubleArray57 };
        com.operations.Matrix.Matrix matrix59 = new com.operations.Matrix.Matrix(doubleArray58);
        int int60 = matrix59.getCols();
        int int61 = matrix59.getCols();
        int int62 = matrix59.getCols();
        com.operations.Matrix.Matrix matrix68 = com.operations.Matrix.MatrixUtils.generateRandomMatrix(100, (int) (byte) 1, (int) '#', (int) '#', 1L);
        double double71 = matrix68.getValue((int) '4', 0);
        double double72 = com.operations.Matrix.MatrixUtils.frobeniusNorm(matrix68);
        boolean boolean73 = com.operations.Matrix.MatrixUtils.isSquare(matrix68);
        boolean boolean75 = com.operations.Matrix.MatrixUtils.compare(matrix59, matrix68, (double) 100L);
        double[][] doubleArray76 = matrix59.getData();
        com.operations.Matrix.Matrix matrix77 = com.operations.Matrix.MatrixDecompositions.choleskyDecomposition(matrix59);
        com.operations.Matrix.Matrix matrix79 = com.operations.Matrix.MatrixOperations.scalarMultiply(matrix77, 1363.6076983299943d);
        com.operations.Matrix.Matrix matrix80 = com.operations.Matrix.MatrixOperations.add(matrix48, matrix79);
        int int81 = matrix48.getRows();
        org.junit.Assert.assertNotNull(matrix1);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertArrayEquals(doubleArray6, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertArrayEquals(doubleArray9, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertNotNull(matrix14);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertArrayEquals(doubleArray17, new double[] { 137.90576492663388d, (-1.0d) }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertArrayEquals(doubleArray18, new double[] { (-24.931892522286255d), (-135.63701830716116d) }, 1.0E-15);
        org.junit.Assert.assertNotNull(matrix19);
        org.junit.Assert.assertNotNull(matrix20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 2 + "'", int21 == 2);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 2 + "'", int22 == 2);
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertArrayEquals(doubleArray25, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertArrayEquals(doubleArray28, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 2 + "'", int31 == 2);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 2 + "'", int32 == 2);
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertArrayEquals(doubleArray36, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertArrayEquals(doubleArray39, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(matrix44);
        org.junit.Assert.assertTrue("'" + double47 + "' != '" + (-0.1736481776669303d) + "'", double47 == (-0.1736481776669303d));
        org.junit.Assert.assertNotNull(matrix48);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 2 + "'", int51 == 2);
        org.junit.Assert.assertNotNull(doubleArray54);
        org.junit.Assert.assertArrayEquals(doubleArray54, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray57);
        org.junit.Assert.assertArrayEquals(doubleArray57, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray58);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 2 + "'", int60 == 2);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 2 + "'", int61 == 2);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 2 + "'", int62 == 2);
        org.junit.Assert.assertNotNull(matrix68);
        org.junit.Assert.assertTrue("'" + double71 + "' != '" + 35.0d + "'", double71 == 35.0d);
        org.junit.Assert.assertTrue("'" + double72 + "' != '" + 350.0d + "'", double72 == 350.0d);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertNotNull(doubleArray76);
        org.junit.Assert.assertNotNull(matrix77);
        org.junit.Assert.assertNotNull(matrix79);
        org.junit.Assert.assertNotNull(matrix80);
        org.junit.Assert.assertTrue("'" + int81 + "' != '" + 2 + "'", int81 == 2);
    }

    @Test
    public void test1891() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1891");
        com.operations.Matrix.Matrix matrix2 = com.operations.Matrix.MatrixTransformations.project2D(137.90576492663385d, 99.83621769912266d);
        org.junit.Assert.assertNotNull(matrix2);
    }

    @Test
    public void test1892() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1892");
        com.operations.Matrix.Matrix matrix2 = com.operations.Matrix.MatrixTransformations.project2D((double) ' ', 0.0d);
        double[] doubleArray5 = new double[] { 10, 'a' };
        double[] doubleArray8 = new double[] { 10, 'a' };
        double[][] doubleArray9 = new double[][] { doubleArray5, doubleArray8 };
        com.operations.Matrix.Matrix matrix10 = new com.operations.Matrix.Matrix(doubleArray9);
        int int11 = matrix10.getCols();
        boolean boolean12 = com.operations.Matrix.MatrixUtils.isSquare(matrix10);
        com.operations.Matrix.Matrix matrix13 = com.operations.Matrix.MatrixOperations.transpose(matrix10);
        int int14 = matrix13.getRows();
        com.operations.Matrix.Matrix matrix17 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0L, (double) (byte) 10);
        double[] doubleArray20 = new double[] { 10, 'a' };
        double[] doubleArray23 = new double[] { 10, 'a' };
        double[][] doubleArray24 = new double[][] { doubleArray20, doubleArray23 };
        com.operations.Matrix.Matrix matrix25 = new com.operations.Matrix.Matrix(doubleArray24);
        int int26 = matrix25.getCols();
        int int27 = matrix25.getCols();
        int int28 = matrix25.getCols();
        com.operations.Matrix.Matrix[] matrixArray29 = com.operations.Matrix.MatrixDecompositions.luDecomposition(matrix25);
        com.operations.Matrix.Matrix matrix30 = com.operations.Matrix.MatrixOperations.multiply(matrix17, matrix25);
        com.operations.Matrix.Matrix matrix32 = com.operations.Matrix.MatrixTransformations.rotate2D((double) (short) 100);
        boolean boolean34 = com.operations.Matrix.MatrixUtils.compare(matrix25, matrix32, (double) (byte) 0);
        com.operations.Matrix.Matrix matrix35 = com.operations.Matrix.MatrixOperations.multiply(matrix13, matrix25);
        com.operations.Matrix.Matrix matrix36 = com.operations.Matrix.MatrixOperations.add(matrix2, matrix25);
        com.operations.Matrix.Matrix matrix37 = com.operations.Matrix.MatrixOperations.transpose(matrix2);
        matrix2.print();
        com.operations.Matrix.Matrix matrix39 = com.operations.Matrix.MatrixOperations.transpose(matrix2);
        com.operations.Matrix.Matrix[] matrixArray40 = com.operations.Matrix.MatrixDecompositions.luDecomposition(matrix39);
        com.operations.Matrix.Matrix[] matrixArray41 = com.operations.Matrix.MatrixDecompositions.luDecomposition(matrix39);
        org.junit.Assert.assertNotNull(matrix2);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertArrayEquals(doubleArray5, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertArrayEquals(doubleArray8, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 2 + "'", int11 == 2);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(matrix13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 2 + "'", int14 == 2);
        org.junit.Assert.assertNotNull(matrix17);
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertArrayEquals(doubleArray20, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertArrayEquals(doubleArray23, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 2 + "'", int26 == 2);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 2 + "'", int27 == 2);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 2 + "'", int28 == 2);
        org.junit.Assert.assertNotNull(matrixArray29);
        org.junit.Assert.assertNotNull(matrix30);
        org.junit.Assert.assertNotNull(matrix32);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(matrix35);
        org.junit.Assert.assertNotNull(matrix36);
        org.junit.Assert.assertNotNull(matrix37);
        org.junit.Assert.assertNotNull(matrix39);
        org.junit.Assert.assertNotNull(matrixArray40);
        org.junit.Assert.assertNotNull(matrixArray41);
    }

    @Test
    public void test1893() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1893");
        com.operations.Matrix.Matrix matrix2 = new com.operations.Matrix.Matrix(2, 2);
    }

    @Test
    public void test1894() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1894");
        com.operations.Matrix.Matrix matrix4 = com.operations.Matrix.MatrixUtils.generateRandomMatrix((int) (short) 100, 32, (int) (byte) 100, 35);
        double[] doubleArray7 = new double[] { 10, 'a' };
        double[] doubleArray10 = new double[] { 10, 'a' };
        double[][] doubleArray11 = new double[][] { doubleArray7, doubleArray10 };
        com.operations.Matrix.Matrix matrix12 = new com.operations.Matrix.Matrix(doubleArray11);
        com.operations.Matrix.Matrix matrix13 = new com.operations.Matrix.Matrix(doubleArray11);
        com.operations.Matrix.Matrix[] matrixArray14 = com.operations.Matrix.MatrixDecompositions.luDecomposition(matrix13);
        com.operations.Matrix.Matrix matrix17 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0, (double) 100L);
        com.operations.Matrix.Matrix matrix18 = com.operations.Matrix.MatrixOperations.subtract(matrix13, matrix17);
        double[][] doubleArray19 = matrix18.getData();
        com.operations.Matrix.Matrix matrix20 = new com.operations.Matrix.Matrix(doubleArray19);
        com.operations.Matrix.Matrix matrix21 = new com.operations.Matrix.Matrix(doubleArray19);
        int int22 = matrix21.getCols();
        com.operations.Matrix.Matrix matrix25 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0L, (double) (byte) 10);
        int int26 = matrix25.getRows();
        com.operations.Matrix.Matrix matrix29 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0L, (double) (byte) 10);
        int int30 = matrix29.getRows();
        com.operations.Matrix.Matrix matrix32 = com.operations.Matrix.MatrixOperations.scalarMultiply(matrix29, (double) 2);
        com.operations.Matrix.Matrix matrix33 = com.operations.Matrix.MatrixOperations.subtract(matrix25, matrix29);
        com.operations.Matrix.Matrix matrix36 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0L, (double) (byte) 10);
        int int37 = matrix36.getRows();
        com.operations.Matrix.Matrix matrix43 = com.operations.Matrix.MatrixUtils.generateRandomMatrix(100, (int) (byte) 1, (int) '#', (int) '#', 1L);
        boolean boolean45 = com.operations.Matrix.MatrixUtils.compare(matrix36, matrix43, (double) 1.0f);
        com.operations.Matrix.Matrix matrix47 = com.operations.Matrix.MatrixOperations.scalarMultiply(matrix36, (double) 1L);
        boolean boolean49 = com.operations.Matrix.MatrixUtils.compare(matrix33, matrix47, 0.0d);
        int int50 = matrix47.getCols();
        com.operations.Matrix.Matrix matrix51 = com.operations.Matrix.MatrixOperations.transpose(matrix47);
        com.operations.Matrix.Matrix matrix52 = com.operations.Matrix.MatrixOperations.subtract(matrix21, matrix47);
        // The following exception was thrown during execution in test generation
        try {
            com.operations.Matrix.Matrix matrix53 = com.operations.Matrix.MatrixOperations.multiply(matrix4, matrix52);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Matrix A's columns must match Matrix B's rows for multiplication.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(matrix4);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertArrayEquals(doubleArray7, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertArrayEquals(doubleArray10, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertNotNull(matrixArray14);
        org.junit.Assert.assertNotNull(matrix17);
        org.junit.Assert.assertNotNull(matrix18);
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 2 + "'", int22 == 2);
        org.junit.Assert.assertNotNull(matrix25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 2 + "'", int26 == 2);
        org.junit.Assert.assertNotNull(matrix29);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 2 + "'", int30 == 2);
        org.junit.Assert.assertNotNull(matrix32);
        org.junit.Assert.assertNotNull(matrix33);
        org.junit.Assert.assertNotNull(matrix36);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 2 + "'", int37 == 2);
        org.junit.Assert.assertNotNull(matrix43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(matrix47);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 2 + "'", int50 == 2);
        org.junit.Assert.assertNotNull(matrix51);
        org.junit.Assert.assertNotNull(matrix52);
    }

    @Test
    public void test1895() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1895");
        com.operations.Matrix.Matrix matrix0 = null;
        // The following exception was thrown during execution in test generation
        try {
            com.operations.Matrix.Matrix matrix2 = com.operations.Matrix.MatrixOperations.scalarMultiply(matrix0, (double) 1.0f);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test1896() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1896");
        // The following exception was thrown during execution in test generation
        try {
            com.operations.Matrix.Matrix matrix5 = com.operations.Matrix.MatrixUtils.generateRandomMatrix((int) (byte) 0, 0, 97, (int) (short) 1, (long) '4');
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
    }

    @Test
    public void test1897() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1897");
        com.operations.Matrix.Matrix matrix2 = com.operations.Matrix.MatrixTransformations.scale2D((double) (byte) 10, (double) 10);
        double[] doubleArray5 = new double[] { 10, 'a' };
        double[] doubleArray8 = new double[] { 10, 'a' };
        double[][] doubleArray9 = new double[][] { doubleArray5, doubleArray8 };
        com.operations.Matrix.Matrix matrix10 = new com.operations.Matrix.Matrix(doubleArray9);
        com.operations.Matrix.Matrix matrix11 = new com.operations.Matrix.Matrix(doubleArray9);
        boolean boolean12 = com.operations.Matrix.MatrixUtils.isSquare(matrix11);
        double[] doubleArray15 = new double[] { 10, 'a' };
        double[] doubleArray18 = new double[] { 10, 'a' };
        double[][] doubleArray19 = new double[][] { doubleArray15, doubleArray18 };
        com.operations.Matrix.Matrix matrix20 = new com.operations.Matrix.Matrix(doubleArray19);
        int int21 = matrix20.getCols();
        int int22 = matrix20.getCols();
        matrix20.print();
        double[] doubleArray26 = new double[] { 10, 'a' };
        double[] doubleArray29 = new double[] { 10, 'a' };
        double[][] doubleArray30 = new double[][] { doubleArray26, doubleArray29 };
        com.operations.Matrix.Matrix matrix31 = new com.operations.Matrix.Matrix(doubleArray30);
        boolean boolean33 = com.operations.Matrix.MatrixUtils.compare(matrix20, matrix31, (double) (-1));
        com.operations.Matrix.Matrix matrix34 = com.operations.Matrix.MatrixOperations.subtract(matrix11, matrix31);
        com.operations.Matrix.Matrix[] matrixArray35 = com.operations.Matrix.MatrixDecompositions.luDecomposition(matrix34);
        double[][] doubleArray36 = matrix34.getData();
        com.operations.Matrix.Matrix matrix37 = new com.operations.Matrix.Matrix(doubleArray36);
        com.operations.Matrix.Matrix matrix38 = com.operations.Matrix.MatrixOperations.multiply(matrix2, matrix37);
        com.operations.Matrix.Matrix matrix41 = com.operations.Matrix.MatrixTransformations.scale2D(1.414213562373095d, (double) 1);
        com.operations.Matrix.Matrix matrix42 = com.operations.Matrix.MatrixOperations.add(matrix38, matrix41);
        com.operations.Matrix.Matrix matrix45 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0L, (double) (byte) 10);
        int int46 = matrix45.getRows();
        com.operations.Matrix.Matrix matrix48 = com.operations.Matrix.MatrixOperations.scalarMultiply(matrix45, (double) 2);
        com.operations.Matrix.Matrix[] matrixArray49 = com.operations.Matrix.MatrixDecompositions.luDecomposition(matrix48);
        com.operations.Matrix.Matrix matrix50 = com.operations.Matrix.MatrixOperations.add(matrix41, matrix48);
        com.operations.Matrix.Matrix matrix53 = new com.operations.Matrix.Matrix((int) (short) 100, 1);
        com.operations.Matrix.Matrix matrix54 = com.operations.Matrix.MatrixOperations.transpose(matrix53);
        com.operations.Matrix.Matrix matrix56 = com.operations.Matrix.MatrixOperations.scalarMultiply(matrix53, 137.90576492663388d);
        com.operations.Matrix.Matrix matrix58 = com.operations.Matrix.MatrixOperations.scalarMultiply(matrix56, 136.9141301851733d);
        boolean boolean60 = com.operations.Matrix.MatrixUtils.compare(matrix50, matrix56, (double) 10);
        com.operations.Matrix.Matrix matrix61 = null;
        // The following exception was thrown during execution in test generation
        try {
            com.operations.Matrix.Matrix matrix62 = com.operations.Matrix.MatrixOperations.subtract(matrix50, matrix61);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot invoke \"com.operations.Matrix.Matrix.getRows()\" because \"b\" is null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(matrix2);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertArrayEquals(doubleArray5, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertArrayEquals(doubleArray8, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertArrayEquals(doubleArray15, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertArrayEquals(doubleArray18, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 2 + "'", int21 == 2);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 2 + "'", int22 == 2);
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertArrayEquals(doubleArray26, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertArrayEquals(doubleArray29, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(matrix34);
        org.junit.Assert.assertNotNull(matrixArray35);
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertNotNull(matrix38);
        org.junit.Assert.assertNotNull(matrix41);
        org.junit.Assert.assertNotNull(matrix42);
        org.junit.Assert.assertNotNull(matrix45);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 2 + "'", int46 == 2);
        org.junit.Assert.assertNotNull(matrix48);
        org.junit.Assert.assertNotNull(matrixArray49);
        org.junit.Assert.assertNotNull(matrix50);
        org.junit.Assert.assertNotNull(matrix54);
        org.junit.Assert.assertNotNull(matrix56);
        org.junit.Assert.assertNotNull(matrix58);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
    }

    @Test
    public void test1898() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1898");
        com.operations.Matrix.Matrix matrix2 = com.operations.Matrix.MatrixTransformations.scale2D((double) 1.0f, (double) 1);
        com.operations.Matrix.Matrix matrix4 = com.operations.Matrix.MatrixTransformations.rotate2D((double) 1.0f);
        com.operations.Matrix.Matrix matrix7 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0L, (double) (byte) 10);
        int int8 = matrix7.getRows();
        com.operations.Matrix.Matrix matrix10 = com.operations.Matrix.MatrixOperations.scalarMultiply(matrix7, (double) 2);
        double double11 = com.operations.Matrix.MatrixUtils.frobeniusNorm(matrix7);
        com.operations.Matrix.Matrix matrix14 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0L, (double) (byte) 10);
        int int15 = matrix14.getRows();
        com.operations.Matrix.Matrix matrix17 = com.operations.Matrix.MatrixOperations.scalarMultiply(matrix14, (double) 2);
        com.operations.Matrix.Matrix matrix18 = com.operations.Matrix.MatrixOperations.subtract(matrix7, matrix17);
        com.operations.Matrix.Matrix matrix19 = com.operations.Matrix.MatrixOperations.add(matrix4, matrix17);
        boolean boolean21 = com.operations.Matrix.MatrixUtils.compare(matrix2, matrix4, (double) (byte) -1);
        com.operations.Matrix.Matrix matrix22 = com.operations.Matrix.MatrixOperations.transpose(matrix4);
        java.lang.Class<?> wildcardClass23 = matrix4.getClass();
        org.junit.Assert.assertNotNull(matrix2);
        org.junit.Assert.assertNotNull(matrix4);
        org.junit.Assert.assertNotNull(matrix7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 2 + "'", int8 == 2);
        org.junit.Assert.assertNotNull(matrix10);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 10.0d + "'", double11 == 10.0d);
        org.junit.Assert.assertNotNull(matrix14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 2 + "'", int15 == 2);
        org.junit.Assert.assertNotNull(matrix17);
        org.junit.Assert.assertNotNull(matrix18);
        org.junit.Assert.assertNotNull(matrix19);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(matrix22);
        org.junit.Assert.assertNotNull(wildcardClass23);
    }

    @Test
    public void test1899() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1899");
        // The following exception was thrown during execution in test generation
        try {
            com.operations.Matrix.Matrix matrix4 = com.operations.Matrix.MatrixUtils.generateRandomMatrix((int) (byte) 10, (-1), (int) (byte) 1, (int) (short) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.NegativeArraySizeException; message: -1");
        } catch (java.lang.NegativeArraySizeException e) {
            // Expected exception.
        }
    }

    @Test
    public void test1900() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1900");
        com.operations.Matrix.Matrix matrix2 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0L, (double) (byte) 10);
        int int3 = matrix2.getRows();
        com.operations.Matrix.Matrix matrix6 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0L, (double) (byte) 10);
        int int7 = matrix6.getRows();
        com.operations.Matrix.Matrix matrix9 = com.operations.Matrix.MatrixOperations.scalarMultiply(matrix6, (double) 2);
        com.operations.Matrix.Matrix matrix10 = com.operations.Matrix.MatrixOperations.subtract(matrix2, matrix6);
        double double11 = com.operations.Matrix.MatrixUtils.frobeniusNorm(matrix6);
        double[][] doubleArray12 = matrix6.getData();
        org.junit.Assert.assertNotNull(matrix2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 2 + "'", int3 == 2);
        org.junit.Assert.assertNotNull(matrix6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 2 + "'", int7 == 2);
        org.junit.Assert.assertNotNull(matrix9);
        org.junit.Assert.assertNotNull(matrix10);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 10.0d + "'", double11 == 10.0d);
        org.junit.Assert.assertNotNull(doubleArray12);
    }

    @Test
    public void test1901() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1901");
        com.operations.Matrix.Matrix matrix5 = com.operations.Matrix.MatrixUtils.generateRandomMatrix((int) '4', (int) ' ', (int) (short) 100, (int) (byte) 100, (long) (short) 10);
        int int6 = matrix5.getCols();
        com.operations.Matrix.Matrix matrix9 = com.operations.Matrix.MatrixTransformations.project2D(36.40054944640259d, 364.0054944640259d);
        com.operations.Matrix.Matrix matrix11 = com.operations.Matrix.MatrixOperations.scalarMultiply(matrix9, 30.0d);
        // The following exception was thrown during execution in test generation
        try {
            com.operations.Matrix.Matrix matrix12 = com.operations.Matrix.MatrixOperations.add(matrix5, matrix11);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Matrices must have the same dimensions for addition.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(matrix5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 32 + "'", int6 == 32);
        org.junit.Assert.assertNotNull(matrix9);
        org.junit.Assert.assertNotNull(matrix11);
    }

    @Test
    public void test1902() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1902");
        com.operations.Matrix.Matrix matrix2 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0L, (double) (byte) 10);
        double[] doubleArray5 = new double[] { 10, 'a' };
        double[] doubleArray8 = new double[] { 10, 'a' };
        double[][] doubleArray9 = new double[][] { doubleArray5, doubleArray8 };
        com.operations.Matrix.Matrix matrix10 = new com.operations.Matrix.Matrix(doubleArray9);
        int int11 = matrix10.getCols();
        int int12 = matrix10.getCols();
        int int13 = matrix10.getCols();
        com.operations.Matrix.Matrix[] matrixArray14 = com.operations.Matrix.MatrixDecompositions.luDecomposition(matrix10);
        com.operations.Matrix.Matrix matrix15 = com.operations.Matrix.MatrixOperations.multiply(matrix2, matrix10);
        boolean boolean16 = com.operations.Matrix.MatrixUtils.isSymmetric(matrix2);
        org.junit.Assert.assertNotNull(matrix2);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertArrayEquals(doubleArray5, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertArrayEquals(doubleArray8, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 2 + "'", int11 == 2);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 2 + "'", int12 == 2);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 2 + "'", int13 == 2);
        org.junit.Assert.assertNotNull(matrixArray14);
        org.junit.Assert.assertNotNull(matrix15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
    }

    @Test
    public void test1903() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1903");
        com.operations.Matrix.Matrix matrix2 = com.operations.Matrix.MatrixTransformations.scale2D(36.40054944640259d, 640031.99920004d);
        boolean boolean3 = com.operations.Matrix.MatrixUtils.isSquare(matrix2);
        int int4 = matrix2.getCols();
        org.junit.Assert.assertNotNull(matrix2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 2 + "'", int4 == 2);
    }

    @Test
    public void test1904() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1904");
        double[] doubleArray2 = new double[] { 10, 'a' };
        double[] doubleArray5 = new double[] { 10, 'a' };
        double[][] doubleArray6 = new double[][] { doubleArray2, doubleArray5 };
        com.operations.Matrix.Matrix matrix7 = new com.operations.Matrix.Matrix(doubleArray6);
        int int8 = matrix7.getCols();
        int int9 = matrix7.getCols();
        int int10 = matrix7.getCols();
        com.operations.Matrix.Matrix matrix16 = com.operations.Matrix.MatrixUtils.generateRandomMatrix(100, (int) (byte) 1, (int) '#', (int) '#', 1L);
        double double19 = matrix16.getValue((int) '4', 0);
        double double20 = com.operations.Matrix.MatrixUtils.frobeniusNorm(matrix16);
        boolean boolean21 = com.operations.Matrix.MatrixUtils.isSquare(matrix16);
        boolean boolean23 = com.operations.Matrix.MatrixUtils.compare(matrix7, matrix16, (double) 100L);
        com.operations.Matrix.Matrix matrix24 = com.operations.Matrix.MatrixOperations.transpose(matrix16);
        com.operations.Matrix.Matrix matrix26 = com.operations.Matrix.MatrixTransformations.rotate2D((double) (short) 100);
        double[] doubleArray29 = new double[] { 137.90576492663388d, (byte) -1 };
        double[] doubleArray30 = com.operations.Matrix.MatrixSolver.solveGaussian(matrix26, doubleArray29);
        com.operations.Matrix.Matrix matrix33 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0L, (double) (byte) 10);
        double[] doubleArray36 = new double[] { 10, 'a' };
        double[] doubleArray39 = new double[] { 10, 'a' };
        double[][] doubleArray40 = new double[][] { doubleArray36, doubleArray39 };
        com.operations.Matrix.Matrix matrix41 = new com.operations.Matrix.Matrix(doubleArray40);
        int int42 = matrix41.getCols();
        int int43 = matrix41.getCols();
        int int44 = matrix41.getCols();
        com.operations.Matrix.Matrix[] matrixArray45 = com.operations.Matrix.MatrixDecompositions.luDecomposition(matrix41);
        com.operations.Matrix.Matrix matrix46 = com.operations.Matrix.MatrixOperations.multiply(matrix33, matrix41);
        boolean boolean48 = com.operations.Matrix.MatrixUtils.compare(matrix26, matrix33, (double) (-1L));
        com.operations.Matrix.Matrix matrix50 = com.operations.Matrix.MatrixTransformations.rotate2D((-1.0d));
        com.operations.Matrix.Matrix matrix52 = com.operations.Matrix.MatrixTransformations.rotate2D((double) (-1L));
        com.operations.Matrix.Matrix matrix54 = com.operations.Matrix.MatrixTransformations.rotate2D((double) (short) 100);
        double[] doubleArray57 = new double[] { 137.90576492663388d, (byte) -1 };
        double[] doubleArray58 = com.operations.Matrix.MatrixSolver.solveGaussian(matrix54, doubleArray57);
        double[] doubleArray59 = com.operations.Matrix.MatrixSolver.solveGaussian(matrix52, doubleArray57);
        double[] doubleArray60 = com.operations.Matrix.MatrixSolver.solveGaussian(matrix50, doubleArray57);
        boolean boolean62 = com.operations.Matrix.MatrixUtils.compare(matrix33, matrix50, (double) '4');
        com.operations.Matrix.Matrix matrix64 = com.operations.Matrix.MatrixTransformations.rotate2D((double) (short) 100);
        double[] doubleArray67 = new double[] { 137.90576492663388d, (byte) -1 };
        double[] doubleArray68 = com.operations.Matrix.MatrixSolver.solveGaussian(matrix64, doubleArray67);
        com.operations.Matrix.Matrix matrix71 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0L, (double) (byte) 10);
        double[] doubleArray74 = new double[] { 10, 'a' };
        double[] doubleArray77 = new double[] { 10, 'a' };
        double[][] doubleArray78 = new double[][] { doubleArray74, doubleArray77 };
        com.operations.Matrix.Matrix matrix79 = new com.operations.Matrix.Matrix(doubleArray78);
        int int80 = matrix79.getCols();
        int int81 = matrix79.getCols();
        int int82 = matrix79.getCols();
        com.operations.Matrix.Matrix[] matrixArray83 = com.operations.Matrix.MatrixDecompositions.luDecomposition(matrix79);
        com.operations.Matrix.Matrix matrix84 = com.operations.Matrix.MatrixOperations.multiply(matrix71, matrix79);
        boolean boolean86 = com.operations.Matrix.MatrixUtils.compare(matrix64, matrix71, (double) (-1L));
        double[][] doubleArray87 = matrix64.getData();
        com.operations.Matrix.Matrix matrix89 = com.operations.Matrix.MatrixTransformations.rotate2D((double) (short) 100);
        double[] doubleArray92 = new double[] { 137.90576492663388d, (byte) -1 };
        double[] doubleArray93 = com.operations.Matrix.MatrixSolver.solveGaussian(matrix89, doubleArray92);
        double[] doubleArray94 = com.operations.Matrix.MatrixSolver.solveGaussian(matrix64, doubleArray92);
        double[] doubleArray95 = com.operations.Matrix.MatrixSolver.solveGaussian(matrix50, doubleArray94);
        // The following exception was thrown during execution in test generation
        try {
            double[] doubleArray96 = com.operations.Matrix.MatrixSolver.solveGaussian(matrix16, doubleArray94);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Matrix must be square to solve equations.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertArrayEquals(doubleArray2, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertArrayEquals(doubleArray5, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 2 + "'", int8 == 2);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 2 + "'", int9 == 2);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 2 + "'", int10 == 2);
        org.junit.Assert.assertNotNull(matrix16);
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 35.0d + "'", double19 == 35.0d);
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 350.0d + "'", double20 == 350.0d);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(matrix24);
        org.junit.Assert.assertNotNull(matrix26);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertArrayEquals(doubleArray29, new double[] { 137.90576492663388d, (-1.0d) }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertArrayEquals(doubleArray30, new double[] { (-24.931892522286255d), (-135.63701830716116d) }, 1.0E-15);
        org.junit.Assert.assertNotNull(matrix33);
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertArrayEquals(doubleArray36, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertArrayEquals(doubleArray39, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 2 + "'", int42 == 2);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 2 + "'", int43 == 2);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 2 + "'", int44 == 2);
        org.junit.Assert.assertNotNull(matrixArray45);
        org.junit.Assert.assertNotNull(matrix46);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(matrix50);
        org.junit.Assert.assertNotNull(matrix52);
        org.junit.Assert.assertNotNull(matrix54);
        org.junit.Assert.assertNotNull(doubleArray57);
        org.junit.Assert.assertArrayEquals(doubleArray57, new double[] { 137.90576492663388d, (-1.0d) }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray58);
        org.junit.Assert.assertArrayEquals(doubleArray58, new double[] { (-24.931892522286255d), (-135.63701830716116d) }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray59);
        org.junit.Assert.assertArrayEquals(doubleArray59, new double[] { 137.90221361711127d, 1.4069397643877004d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray60);
        org.junit.Assert.assertArrayEquals(doubleArray60, new double[] { 137.90221361711127d, 1.4069397643877004d }, 1.0E-15);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + true + "'", boolean62 == true);
        org.junit.Assert.assertNotNull(matrix64);
        org.junit.Assert.assertNotNull(doubleArray67);
        org.junit.Assert.assertArrayEquals(doubleArray67, new double[] { 137.90576492663388d, (-1.0d) }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray68);
        org.junit.Assert.assertArrayEquals(doubleArray68, new double[] { (-24.931892522286255d), (-135.63701830716116d) }, 1.0E-15);
        org.junit.Assert.assertNotNull(matrix71);
        org.junit.Assert.assertNotNull(doubleArray74);
        org.junit.Assert.assertArrayEquals(doubleArray74, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray77);
        org.junit.Assert.assertArrayEquals(doubleArray77, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray78);
        org.junit.Assert.assertTrue("'" + int80 + "' != '" + 2 + "'", int80 == 2);
        org.junit.Assert.assertTrue("'" + int81 + "' != '" + 2 + "'", int81 == 2);
        org.junit.Assert.assertTrue("'" + int82 + "' != '" + 2 + "'", int82 == 2);
        org.junit.Assert.assertNotNull(matrixArray83);
        org.junit.Assert.assertNotNull(matrix84);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
        org.junit.Assert.assertNotNull(doubleArray87);
        org.junit.Assert.assertNotNull(matrix89);
        org.junit.Assert.assertNotNull(doubleArray92);
        org.junit.Assert.assertArrayEquals(doubleArray92, new double[] { 137.90576492663388d, (-1.0d) }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray93);
        org.junit.Assert.assertArrayEquals(doubleArray93, new double[] { (-24.931892522286255d), (-135.63701830716116d) }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray94);
        org.junit.Assert.assertArrayEquals(doubleArray94, new double[] { (-24.931892522286255d), (-135.63701830716116d) }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray95);
        org.junit.Assert.assertArrayEquals(doubleArray95, new double[] { (-22.560902902856938d), (-136.05148165384992d) }, 1.0E-15);
    }

    @Test
    public void test1905() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1905");
        double[] doubleArray2 = new double[] { 10, 'a' };
        double[] doubleArray5 = new double[] { 10, 'a' };
        double[][] doubleArray6 = new double[][] { doubleArray2, doubleArray5 };
        com.operations.Matrix.Matrix matrix7 = new com.operations.Matrix.Matrix(doubleArray6);
        com.operations.Matrix.Matrix matrix8 = com.operations.Matrix.MatrixOperations.transpose(matrix7);
        com.operations.Matrix.Matrix matrix11 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0L, (double) (byte) 10);
        int int12 = matrix11.getRows();
        com.operations.Matrix.Matrix matrix18 = com.operations.Matrix.MatrixUtils.generateRandomMatrix(100, (int) (byte) 1, (int) '#', (int) '#', 1L);
        boolean boolean20 = com.operations.Matrix.MatrixUtils.compare(matrix11, matrix18, (double) 1.0f);
        com.operations.Matrix.Matrix matrix22 = com.operations.Matrix.MatrixOperations.scalarMultiply(matrix11, (double) 1L);
        matrix11.print();
        com.operations.Matrix.Matrix matrix24 = com.operations.Matrix.MatrixOperations.multiply(matrix8, matrix11);
        com.operations.Matrix.Matrix matrix26 = com.operations.Matrix.MatrixTransformations.rotate2D((double) '4');
        int int27 = matrix26.getRows();
        com.operations.Matrix.Matrix matrix28 = com.operations.Matrix.MatrixOperations.add(matrix24, matrix26);
        // The following exception was thrown during execution in test generation
        try {
            double double31 = matrix26.getValue((int) (byte) 0, (int) (byte) 10);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertArrayEquals(doubleArray2, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertArrayEquals(doubleArray5, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertNotNull(matrix8);
        org.junit.Assert.assertNotNull(matrix11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 2 + "'", int12 == 2);
        org.junit.Assert.assertNotNull(matrix18);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(matrix22);
        org.junit.Assert.assertNotNull(matrix24);
        org.junit.Assert.assertNotNull(matrix26);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 2 + "'", int27 == 2);
        org.junit.Assert.assertNotNull(matrix28);
    }

    @Test
    public void test1906() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1906");
        com.operations.Matrix.Matrix matrix2 = com.operations.Matrix.MatrixTransformations.scale2D(364.0054944640259d, (-1.0d));
        com.operations.Matrix.Matrix matrix8 = com.operations.Matrix.MatrixUtils.generateRandomMatrix((int) (short) 10, 100, 32, 2, (long) (short) -1);
        com.operations.Matrix.Matrix matrix10 = com.operations.Matrix.MatrixTransformations.rotate2D((double) (short) 100);
        double[] doubleArray13 = new double[] { 137.90576492663388d, (byte) -1 };
        double[] doubleArray14 = com.operations.Matrix.MatrixSolver.solveGaussian(matrix10, doubleArray13);
        com.operations.Matrix.Matrix matrix17 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0L, (double) (byte) 10);
        double[] doubleArray20 = new double[] { 10, 'a' };
        double[] doubleArray23 = new double[] { 10, 'a' };
        double[][] doubleArray24 = new double[][] { doubleArray20, doubleArray23 };
        com.operations.Matrix.Matrix matrix25 = new com.operations.Matrix.Matrix(doubleArray24);
        int int26 = matrix25.getCols();
        int int27 = matrix25.getCols();
        int int28 = matrix25.getCols();
        com.operations.Matrix.Matrix[] matrixArray29 = com.operations.Matrix.MatrixDecompositions.luDecomposition(matrix25);
        com.operations.Matrix.Matrix matrix30 = com.operations.Matrix.MatrixOperations.multiply(matrix17, matrix25);
        boolean boolean32 = com.operations.Matrix.MatrixUtils.compare(matrix10, matrix17, (double) (-1L));
        double[][] doubleArray33 = matrix10.getData();
        com.operations.Matrix.Matrix matrix36 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0L, (double) 10L);
        boolean boolean38 = com.operations.Matrix.MatrixUtils.compare(matrix10, matrix36, 146.4308710620817d);
        boolean boolean40 = com.operations.Matrix.MatrixUtils.compare(matrix8, matrix36, (double) ' ');
        int int41 = matrix8.getCols();
        // The following exception was thrown during execution in test generation
        try {
            com.operations.Matrix.Matrix matrix42 = com.operations.Matrix.MatrixOperations.subtract(matrix2, matrix8);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Matrices must have the same dimensions for subtraction.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(matrix2);
        org.junit.Assert.assertNotNull(matrix8);
        org.junit.Assert.assertNotNull(matrix10);
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertArrayEquals(doubleArray13, new double[] { 137.90576492663388d, (-1.0d) }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertArrayEquals(doubleArray14, new double[] { (-24.931892522286255d), (-135.63701830716116d) }, 1.0E-15);
        org.junit.Assert.assertNotNull(matrix17);
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertArrayEquals(doubleArray20, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertArrayEquals(doubleArray23, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 2 + "'", int26 == 2);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 2 + "'", int27 == 2);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 2 + "'", int28 == 2);
        org.junit.Assert.assertNotNull(matrixArray29);
        org.junit.Assert.assertNotNull(matrix30);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertNotNull(matrix36);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 100 + "'", int41 == 100);
    }

    @Test
    public void test1907() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1907");
        double[] doubleArray2 = new double[] { 10, 'a' };
        double[] doubleArray5 = new double[] { 10, 'a' };
        double[][] doubleArray6 = new double[][] { doubleArray2, doubleArray5 };
        com.operations.Matrix.Matrix matrix7 = new com.operations.Matrix.Matrix(doubleArray6);
        com.operations.Matrix.Matrix matrix8 = new com.operations.Matrix.Matrix(doubleArray6);
        boolean boolean9 = com.operations.Matrix.MatrixUtils.isSquare(matrix8);
        double[] doubleArray12 = new double[] { 10, 'a' };
        double[] doubleArray15 = new double[] { 10, 'a' };
        double[][] doubleArray16 = new double[][] { doubleArray12, doubleArray15 };
        com.operations.Matrix.Matrix matrix17 = new com.operations.Matrix.Matrix(doubleArray16);
        int int18 = matrix17.getCols();
        int int19 = matrix17.getCols();
        matrix17.print();
        double[] doubleArray23 = new double[] { 10, 'a' };
        double[] doubleArray26 = new double[] { 10, 'a' };
        double[][] doubleArray27 = new double[][] { doubleArray23, doubleArray26 };
        com.operations.Matrix.Matrix matrix28 = new com.operations.Matrix.Matrix(doubleArray27);
        boolean boolean30 = com.operations.Matrix.MatrixUtils.compare(matrix17, matrix28, (double) (-1));
        com.operations.Matrix.Matrix matrix31 = com.operations.Matrix.MatrixOperations.subtract(matrix8, matrix28);
        com.operations.Matrix.Matrix matrix33 = com.operations.Matrix.MatrixOperations.scalarMultiply(matrix8, (double) 0.0f);
        double[] doubleArray36 = new double[] { 10, 'a' };
        double[] doubleArray39 = new double[] { 10, 'a' };
        double[][] doubleArray40 = new double[][] { doubleArray36, doubleArray39 };
        com.operations.Matrix.Matrix matrix41 = new com.operations.Matrix.Matrix(doubleArray40);
        com.operations.Matrix.Matrix matrix42 = new com.operations.Matrix.Matrix(doubleArray40);
        com.operations.Matrix.Matrix[] matrixArray43 = com.operations.Matrix.MatrixDecompositions.luDecomposition(matrix42);
        com.operations.Matrix.Matrix matrix44 = com.operations.Matrix.MatrixDecompositions.choleskyDecomposition(matrix42);
        int int45 = matrix44.getRows();
        com.operations.Matrix.Matrix matrix46 = com.operations.Matrix.MatrixOperations.subtract(matrix8, matrix44);
        com.operations.Matrix.Matrix matrix49 = com.operations.Matrix.MatrixTransformations.project2D((double) ' ', 0.0d);
        double[] doubleArray52 = new double[] { 10, 'a' };
        double[] doubleArray55 = new double[] { 10, 'a' };
        double[][] doubleArray56 = new double[][] { doubleArray52, doubleArray55 };
        com.operations.Matrix.Matrix matrix57 = new com.operations.Matrix.Matrix(doubleArray56);
        int int58 = matrix57.getCols();
        boolean boolean59 = com.operations.Matrix.MatrixUtils.isSquare(matrix57);
        com.operations.Matrix.Matrix matrix60 = com.operations.Matrix.MatrixOperations.transpose(matrix57);
        int int61 = matrix60.getRows();
        com.operations.Matrix.Matrix matrix64 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0L, (double) (byte) 10);
        double[] doubleArray67 = new double[] { 10, 'a' };
        double[] doubleArray70 = new double[] { 10, 'a' };
        double[][] doubleArray71 = new double[][] { doubleArray67, doubleArray70 };
        com.operations.Matrix.Matrix matrix72 = new com.operations.Matrix.Matrix(doubleArray71);
        int int73 = matrix72.getCols();
        int int74 = matrix72.getCols();
        int int75 = matrix72.getCols();
        com.operations.Matrix.Matrix[] matrixArray76 = com.operations.Matrix.MatrixDecompositions.luDecomposition(matrix72);
        com.operations.Matrix.Matrix matrix77 = com.operations.Matrix.MatrixOperations.multiply(matrix64, matrix72);
        com.operations.Matrix.Matrix matrix79 = com.operations.Matrix.MatrixTransformations.rotate2D((double) (short) 100);
        boolean boolean81 = com.operations.Matrix.MatrixUtils.compare(matrix72, matrix79, (double) (byte) 0);
        com.operations.Matrix.Matrix matrix82 = com.operations.Matrix.MatrixOperations.multiply(matrix60, matrix72);
        com.operations.Matrix.Matrix matrix83 = com.operations.Matrix.MatrixOperations.add(matrix49, matrix72);
        matrix72.print();
        com.operations.Matrix.Matrix[] matrixArray85 = com.operations.Matrix.MatrixDecompositions.luDecomposition(matrix72);
        com.operations.Matrix.Matrix matrix88 = com.operations.Matrix.MatrixTransformations.project2D(137.90576492663388d, 0.0d);
        double[][] doubleArray89 = matrix88.getData();
        com.operations.Matrix.Matrix matrix90 = com.operations.Matrix.MatrixOperations.multiply(matrix72, matrix88);
        com.operations.Matrix.Matrix matrix91 = com.operations.Matrix.MatrixOperations.multiply(matrix46, matrix90);
        java.lang.Class<?> wildcardClass92 = matrix90.getClass();
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertArrayEquals(doubleArray2, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertArrayEquals(doubleArray5, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertArrayEquals(doubleArray12, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertArrayEquals(doubleArray15, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 2 + "'", int18 == 2);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 2 + "'", int19 == 2);
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertArrayEquals(doubleArray23, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertArrayEquals(doubleArray26, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(matrix31);
        org.junit.Assert.assertNotNull(matrix33);
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertArrayEquals(doubleArray36, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertArrayEquals(doubleArray39, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertNotNull(matrixArray43);
        org.junit.Assert.assertNotNull(matrix44);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 2 + "'", int45 == 2);
        org.junit.Assert.assertNotNull(matrix46);
        org.junit.Assert.assertNotNull(matrix49);
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertArrayEquals(doubleArray52, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertArrayEquals(doubleArray55, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray56);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 2 + "'", int58 == 2);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + true + "'", boolean59 == true);
        org.junit.Assert.assertNotNull(matrix60);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 2 + "'", int61 == 2);
        org.junit.Assert.assertNotNull(matrix64);
        org.junit.Assert.assertNotNull(doubleArray67);
        org.junit.Assert.assertArrayEquals(doubleArray67, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray70);
        org.junit.Assert.assertArrayEquals(doubleArray70, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray71);
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + 2 + "'", int73 == 2);
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 2 + "'", int74 == 2);
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + 2 + "'", int75 == 2);
        org.junit.Assert.assertNotNull(matrixArray76);
        org.junit.Assert.assertNotNull(matrix77);
        org.junit.Assert.assertNotNull(matrix79);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
        org.junit.Assert.assertNotNull(matrix82);
        org.junit.Assert.assertNotNull(matrix83);
        org.junit.Assert.assertNotNull(matrixArray85);
        org.junit.Assert.assertNotNull(matrix88);
        org.junit.Assert.assertNotNull(doubleArray89);
        org.junit.Assert.assertNotNull(matrix90);
        org.junit.Assert.assertNotNull(matrix91);
        org.junit.Assert.assertNotNull(wildcardClass92);
    }

    @Test
    public void test1908() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1908");
        com.operations.Matrix.Matrix matrix2 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0.0f, (double) (-1));
        com.operations.Matrix.Matrix matrix5 = com.operations.Matrix.MatrixTransformations.scale2D(146.4308710620817d, (double) 10L);
        com.operations.Matrix.Matrix matrix6 = com.operations.Matrix.MatrixOperations.multiply(matrix2, matrix5);
        double double9 = matrix2.getValue((int) (short) 0, (int) (byte) 1);
        double double10 = com.operations.Matrix.MatrixUtils.frobeniusNorm(matrix2);
        com.operations.Matrix.Matrix matrix13 = com.operations.Matrix.MatrixTransformations.project2D((double) ' ', 0.0d);
        double[] doubleArray16 = new double[] { 10, 'a' };
        double[] doubleArray19 = new double[] { 10, 'a' };
        double[][] doubleArray20 = new double[][] { doubleArray16, doubleArray19 };
        com.operations.Matrix.Matrix matrix21 = new com.operations.Matrix.Matrix(doubleArray20);
        int int22 = matrix21.getCols();
        boolean boolean23 = com.operations.Matrix.MatrixUtils.isSquare(matrix21);
        com.operations.Matrix.Matrix matrix24 = com.operations.Matrix.MatrixOperations.transpose(matrix21);
        int int25 = matrix24.getRows();
        com.operations.Matrix.Matrix matrix28 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0L, (double) (byte) 10);
        double[] doubleArray31 = new double[] { 10, 'a' };
        double[] doubleArray34 = new double[] { 10, 'a' };
        double[][] doubleArray35 = new double[][] { doubleArray31, doubleArray34 };
        com.operations.Matrix.Matrix matrix36 = new com.operations.Matrix.Matrix(doubleArray35);
        int int37 = matrix36.getCols();
        int int38 = matrix36.getCols();
        int int39 = matrix36.getCols();
        com.operations.Matrix.Matrix[] matrixArray40 = com.operations.Matrix.MatrixDecompositions.luDecomposition(matrix36);
        com.operations.Matrix.Matrix matrix41 = com.operations.Matrix.MatrixOperations.multiply(matrix28, matrix36);
        com.operations.Matrix.Matrix matrix43 = com.operations.Matrix.MatrixTransformations.rotate2D((double) (short) 100);
        boolean boolean45 = com.operations.Matrix.MatrixUtils.compare(matrix36, matrix43, (double) (byte) 0);
        com.operations.Matrix.Matrix matrix46 = com.operations.Matrix.MatrixOperations.multiply(matrix24, matrix36);
        com.operations.Matrix.Matrix matrix47 = com.operations.Matrix.MatrixOperations.add(matrix13, matrix36);
        com.operations.Matrix.Matrix matrix48 = com.operations.Matrix.MatrixOperations.transpose(matrix13);
        com.operations.Matrix.Matrix matrix51 = com.operations.Matrix.MatrixTransformations.scale2D((double) (byte) 100, 350.0d);
        double double52 = com.operations.Matrix.MatrixUtils.frobeniusNorm(matrix51);
        int int53 = matrix51.getCols();
        com.operations.Matrix.Matrix matrix54 = com.operations.Matrix.MatrixOperations.multiply(matrix13, matrix51);
        com.operations.Matrix.Matrix matrix57 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0L, (double) (byte) 10);
        int int58 = matrix57.getRows();
        com.operations.Matrix.Matrix matrix60 = com.operations.Matrix.MatrixOperations.scalarMultiply(matrix57, (double) 2);
        double double61 = com.operations.Matrix.MatrixUtils.frobeniusNorm(matrix57);
        int int62 = matrix57.getRows();
        com.operations.Matrix.Matrix matrix63 = com.operations.Matrix.MatrixOperations.transpose(matrix57);
        com.operations.Matrix.Matrix matrix64 = com.operations.Matrix.MatrixOperations.add(matrix54, matrix63);
        com.operations.Matrix.Matrix matrix65 = com.operations.Matrix.MatrixOperations.subtract(matrix2, matrix64);
        com.operations.Matrix.Matrix matrix66 = com.operations.Matrix.MatrixOperations.transpose(matrix64);
        // The following exception was thrown during execution in test generation
        try {
            double double69 = matrix66.getValue(10, 0);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(matrix2);
        org.junit.Assert.assertNotNull(matrix5);
        org.junit.Assert.assertNotNull(matrix6);
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 0.0d + "'", double9 == 0.0d);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 1.0d + "'", double10 == 1.0d);
        org.junit.Assert.assertNotNull(matrix13);
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertArrayEquals(doubleArray16, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertArrayEquals(doubleArray19, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 2 + "'", int22 == 2);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertNotNull(matrix24);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 2 + "'", int25 == 2);
        org.junit.Assert.assertNotNull(matrix28);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertArrayEquals(doubleArray31, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertArrayEquals(doubleArray34, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 2 + "'", int37 == 2);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 2 + "'", int38 == 2);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 2 + "'", int39 == 2);
        org.junit.Assert.assertNotNull(matrixArray40);
        org.junit.Assert.assertNotNull(matrix41);
        org.junit.Assert.assertNotNull(matrix43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(matrix46);
        org.junit.Assert.assertNotNull(matrix47);
        org.junit.Assert.assertNotNull(matrix48);
        org.junit.Assert.assertNotNull(matrix51);
        org.junit.Assert.assertTrue("'" + double52 + "' != '" + 364.0054944640259d + "'", double52 == 364.0054944640259d);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 2 + "'", int53 == 2);
        org.junit.Assert.assertNotNull(matrix54);
        org.junit.Assert.assertNotNull(matrix57);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 2 + "'", int58 == 2);
        org.junit.Assert.assertNotNull(matrix60);
        org.junit.Assert.assertTrue("'" + double61 + "' != '" + 10.0d + "'", double61 == 10.0d);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 2 + "'", int62 == 2);
        org.junit.Assert.assertNotNull(matrix63);
        org.junit.Assert.assertNotNull(matrix64);
        org.junit.Assert.assertNotNull(matrix65);
        org.junit.Assert.assertNotNull(matrix66);
    }

    @Test
    public void test1909() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1909");
        // The following exception was thrown during execution in test generation
        try {
            com.operations.Matrix.Matrix matrix2 = new com.operations.Matrix.Matrix((-1), 97);
            org.junit.Assert.fail("Expected exception of type java.lang.NegativeArraySizeException; message: -1");
        } catch (java.lang.NegativeArraySizeException e) {
            // Expected exception.
        }
    }

    @Test
    public void test1910() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1910");
        com.operations.Matrix.Matrix matrix2 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0L, (double) (byte) 10);
        double[] doubleArray5 = new double[] { 10, 'a' };
        double[] doubleArray8 = new double[] { 10, 'a' };
        double[][] doubleArray9 = new double[][] { doubleArray5, doubleArray8 };
        com.operations.Matrix.Matrix matrix10 = new com.operations.Matrix.Matrix(doubleArray9);
        int int11 = matrix10.getCols();
        int int12 = matrix10.getCols();
        int int13 = matrix10.getCols();
        com.operations.Matrix.Matrix[] matrixArray14 = com.operations.Matrix.MatrixDecompositions.luDecomposition(matrix10);
        com.operations.Matrix.Matrix matrix15 = com.operations.Matrix.MatrixOperations.multiply(matrix2, matrix10);
        com.operations.Matrix.Matrix matrix17 = com.operations.Matrix.MatrixTransformations.rotate2D((double) (short) 100);
        boolean boolean19 = com.operations.Matrix.MatrixUtils.compare(matrix10, matrix17, (double) (byte) 0);
        com.operations.Matrix.Matrix matrix20 = com.operations.Matrix.MatrixOperations.transpose(matrix10);
        com.operations.Matrix.Matrix matrix23 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0L, (double) (byte) 10);
        double[] doubleArray26 = new double[] { 10, 'a' };
        double[] doubleArray29 = new double[] { 10, 'a' };
        double[][] doubleArray30 = new double[][] { doubleArray26, doubleArray29 };
        com.operations.Matrix.Matrix matrix31 = new com.operations.Matrix.Matrix(doubleArray30);
        int int32 = matrix31.getCols();
        int int33 = matrix31.getCols();
        int int34 = matrix31.getCols();
        com.operations.Matrix.Matrix[] matrixArray35 = com.operations.Matrix.MatrixDecompositions.luDecomposition(matrix31);
        com.operations.Matrix.Matrix matrix36 = com.operations.Matrix.MatrixOperations.multiply(matrix23, matrix31);
        com.operations.Matrix.Matrix matrix38 = com.operations.Matrix.MatrixTransformations.rotate2D((double) (short) 100);
        boolean boolean40 = com.operations.Matrix.MatrixUtils.compare(matrix31, matrix38, (double) (byte) 0);
        double[] doubleArray43 = new double[] { 10, 'a' };
        double[] doubleArray46 = new double[] { 10, 'a' };
        double[][] doubleArray47 = new double[][] { doubleArray43, doubleArray46 };
        com.operations.Matrix.Matrix matrix48 = new com.operations.Matrix.Matrix(doubleArray47);
        com.operations.Matrix.Matrix matrix49 = new com.operations.Matrix.Matrix(doubleArray47);
        com.operations.Matrix.Matrix matrix50 = new com.operations.Matrix.Matrix(doubleArray47);
        boolean boolean52 = com.operations.Matrix.MatrixUtils.compare(matrix31, matrix50, (double) (-1));
        com.operations.Matrix.Matrix matrix55 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0L, (double) (byte) 10);
        double[] doubleArray58 = new double[] { 10, 'a' };
        double[] doubleArray61 = new double[] { 10, 'a' };
        double[][] doubleArray62 = new double[][] { doubleArray58, doubleArray61 };
        com.operations.Matrix.Matrix matrix63 = new com.operations.Matrix.Matrix(doubleArray62);
        int int64 = matrix63.getCols();
        int int65 = matrix63.getCols();
        int int66 = matrix63.getCols();
        com.operations.Matrix.Matrix[] matrixArray67 = com.operations.Matrix.MatrixDecompositions.luDecomposition(matrix63);
        com.operations.Matrix.Matrix matrix68 = com.operations.Matrix.MatrixOperations.multiply(matrix55, matrix63);
        boolean boolean70 = com.operations.Matrix.MatrixUtils.compare(matrix50, matrix55, (double) 10L);
        boolean boolean72 = com.operations.Matrix.MatrixUtils.compare(matrix20, matrix50, (double) 100L);
        boolean boolean73 = com.operations.Matrix.MatrixUtils.isSymmetric(matrix20);
        // The following exception was thrown during execution in test generation
        try {
            com.operations.Matrix.Matrix matrix74 = com.operations.Matrix.MatrixDecompositions.choleskyDecomposition(matrix20);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Matrix is not positive definite.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(matrix2);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertArrayEquals(doubleArray5, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertArrayEquals(doubleArray8, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 2 + "'", int11 == 2);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 2 + "'", int12 == 2);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 2 + "'", int13 == 2);
        org.junit.Assert.assertNotNull(matrixArray14);
        org.junit.Assert.assertNotNull(matrix15);
        org.junit.Assert.assertNotNull(matrix17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(matrix20);
        org.junit.Assert.assertNotNull(matrix23);
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertArrayEquals(doubleArray26, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertArrayEquals(doubleArray29, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 2 + "'", int32 == 2);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 2 + "'", int33 == 2);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 2 + "'", int34 == 2);
        org.junit.Assert.assertNotNull(matrixArray35);
        org.junit.Assert.assertNotNull(matrix36);
        org.junit.Assert.assertNotNull(matrix38);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertArrayEquals(doubleArray43, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray46);
        org.junit.Assert.assertArrayEquals(doubleArray46, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(matrix55);
        org.junit.Assert.assertNotNull(doubleArray58);
        org.junit.Assert.assertArrayEquals(doubleArray58, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray61);
        org.junit.Assert.assertArrayEquals(doubleArray61, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray62);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 2 + "'", int64 == 2);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 2 + "'", int65 == 2);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 2 + "'", int66 == 2);
        org.junit.Assert.assertNotNull(matrixArray67);
        org.junit.Assert.assertNotNull(matrix68);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + true + "'", boolean72 == true);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
    }

    @Test
    public void test1911() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1911");
        // The following exception was thrown during execution in test generation
        try {
            com.operations.Matrix.Matrix matrix4 = com.operations.Matrix.MatrixUtils.generateRandomMatrix(0, 0, (int) (short) 0, (int) 'a');
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
    }

    @Test
    public void test1912() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1912");
        com.operations.Matrix.Matrix matrix2 = com.operations.Matrix.MatrixTransformations.scale2D((double) 1L, 137.90576492663388d);
        com.operations.Matrix.Matrix matrix3 = com.operations.Matrix.MatrixOperations.transpose(matrix2);
        java.lang.Class<?> wildcardClass4 = matrix3.getClass();
        org.junit.Assert.assertNotNull(matrix2);
        org.junit.Assert.assertNotNull(matrix3);
        org.junit.Assert.assertNotNull(wildcardClass4);
    }

    @Test
    public void test1913() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1913");
        // The following exception was thrown during execution in test generation
        try {
            com.operations.Matrix.Matrix matrix4 = com.operations.Matrix.MatrixUtils.generateRandomMatrix((int) (byte) 100, (-1), (-1), (int) (byte) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.NegativeArraySizeException; message: -1");
        } catch (java.lang.NegativeArraySizeException e) {
            // Expected exception.
        }
    }

    @Test
    public void test1914() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1914");
        com.operations.Matrix.Matrix matrix2 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0L, (double) 10L);
        com.operations.Matrix.Matrix matrix5 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0L, (double) (byte) 10);
        double[] doubleArray8 = new double[] { 10, 'a' };
        double[] doubleArray11 = new double[] { 10, 'a' };
        double[][] doubleArray12 = new double[][] { doubleArray8, doubleArray11 };
        com.operations.Matrix.Matrix matrix13 = new com.operations.Matrix.Matrix(doubleArray12);
        int int14 = matrix13.getCols();
        int int15 = matrix13.getCols();
        int int16 = matrix13.getCols();
        com.operations.Matrix.Matrix[] matrixArray17 = com.operations.Matrix.MatrixDecompositions.luDecomposition(matrix13);
        com.operations.Matrix.Matrix matrix18 = com.operations.Matrix.MatrixOperations.multiply(matrix5, matrix13);
        com.operations.Matrix.Matrix matrix20 = com.operations.Matrix.MatrixTransformations.rotate2D((double) (short) 100);
        boolean boolean22 = com.operations.Matrix.MatrixUtils.compare(matrix13, matrix20, (double) (byte) 0);
        double[] doubleArray25 = new double[] { 10, 'a' };
        double[] doubleArray28 = new double[] { 10, 'a' };
        double[][] doubleArray29 = new double[][] { doubleArray25, doubleArray28 };
        com.operations.Matrix.Matrix matrix30 = new com.operations.Matrix.Matrix(doubleArray29);
        com.operations.Matrix.Matrix matrix31 = new com.operations.Matrix.Matrix(doubleArray29);
        com.operations.Matrix.Matrix matrix32 = new com.operations.Matrix.Matrix(doubleArray29);
        boolean boolean34 = com.operations.Matrix.MatrixUtils.compare(matrix13, matrix32, (double) (-1));
        com.operations.Matrix.Matrix matrix36 = com.operations.Matrix.MatrixTransformations.rotate2D((double) (short) 100);
        double[] doubleArray39 = new double[] { 137.90576492663388d, (byte) -1 };
        double[] doubleArray40 = com.operations.Matrix.MatrixSolver.solveGaussian(matrix36, doubleArray39);
        com.operations.Matrix.Matrix matrix43 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0L, (double) (byte) 10);
        double[] doubleArray46 = new double[] { 10, 'a' };
        double[] doubleArray49 = new double[] { 10, 'a' };
        double[][] doubleArray50 = new double[][] { doubleArray46, doubleArray49 };
        com.operations.Matrix.Matrix matrix51 = new com.operations.Matrix.Matrix(doubleArray50);
        int int52 = matrix51.getCols();
        int int53 = matrix51.getCols();
        int int54 = matrix51.getCols();
        com.operations.Matrix.Matrix[] matrixArray55 = com.operations.Matrix.MatrixDecompositions.luDecomposition(matrix51);
        com.operations.Matrix.Matrix matrix56 = com.operations.Matrix.MatrixOperations.multiply(matrix43, matrix51);
        boolean boolean58 = com.operations.Matrix.MatrixUtils.compare(matrix36, matrix43, (double) (-1L));
        com.operations.Matrix.Matrix matrix59 = com.operations.Matrix.MatrixOperations.add(matrix32, matrix43);
        boolean boolean61 = com.operations.Matrix.MatrixUtils.compare(matrix2, matrix59, 146.4308710620817d);
        com.operations.Matrix.Matrix matrix63 = com.operations.Matrix.MatrixOperations.scalarMultiply(matrix59, (double) 100L);
        com.operations.Matrix.Matrix matrix66 = com.operations.Matrix.MatrixTransformations.scale2D(1480.1439709090816d, 145.11374848717816d);
        com.operations.Matrix.Matrix matrix67 = com.operations.Matrix.MatrixOperations.multiply(matrix63, matrix66);
        org.junit.Assert.assertNotNull(matrix2);
        org.junit.Assert.assertNotNull(matrix5);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertArrayEquals(doubleArray8, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertArrayEquals(doubleArray11, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 2 + "'", int14 == 2);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 2 + "'", int15 == 2);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 2 + "'", int16 == 2);
        org.junit.Assert.assertNotNull(matrixArray17);
        org.junit.Assert.assertNotNull(matrix18);
        org.junit.Assert.assertNotNull(matrix20);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertArrayEquals(doubleArray25, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertArrayEquals(doubleArray28, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(matrix36);
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertArrayEquals(doubleArray39, new double[] { 137.90576492663388d, (-1.0d) }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertArrayEquals(doubleArray40, new double[] { (-24.931892522286255d), (-135.63701830716116d) }, 1.0E-15);
        org.junit.Assert.assertNotNull(matrix43);
        org.junit.Assert.assertNotNull(doubleArray46);
        org.junit.Assert.assertArrayEquals(doubleArray46, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertArrayEquals(doubleArray49, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 2 + "'", int52 == 2);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 2 + "'", int53 == 2);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 2 + "'", int54 == 2);
        org.junit.Assert.assertNotNull(matrixArray55);
        org.junit.Assert.assertNotNull(matrix56);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(matrix59);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + true + "'", boolean61 == true);
        org.junit.Assert.assertNotNull(matrix63);
        org.junit.Assert.assertNotNull(matrix66);
        org.junit.Assert.assertNotNull(matrix67);
    }

    @Test
    public void test1915() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1915");
        com.operations.Matrix.Matrix matrix1 = com.operations.Matrix.MatrixTransformations.rotate2D((double) (-1L));
        com.operations.Matrix.Matrix matrix3 = com.operations.Matrix.MatrixTransformations.rotate2D((double) (short) 100);
        double[] doubleArray6 = new double[] { 137.90576492663388d, (byte) -1 };
        double[] doubleArray7 = com.operations.Matrix.MatrixSolver.solveGaussian(matrix3, doubleArray6);
        double[] doubleArray8 = com.operations.Matrix.MatrixSolver.solveGaussian(matrix1, doubleArray6);
        double[][] doubleArray9 = matrix1.getData();
        com.operations.Matrix.Matrix matrix12 = com.operations.Matrix.MatrixTransformations.project2D((double) ' ', 0.0d);
        double[] doubleArray15 = new double[] { 10, 'a' };
        double[] doubleArray18 = new double[] { 10, 'a' };
        double[][] doubleArray19 = new double[][] { doubleArray15, doubleArray18 };
        com.operations.Matrix.Matrix matrix20 = new com.operations.Matrix.Matrix(doubleArray19);
        int int21 = matrix20.getCols();
        boolean boolean22 = com.operations.Matrix.MatrixUtils.isSquare(matrix20);
        com.operations.Matrix.Matrix matrix23 = com.operations.Matrix.MatrixOperations.transpose(matrix20);
        int int24 = matrix23.getRows();
        com.operations.Matrix.Matrix matrix27 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0L, (double) (byte) 10);
        double[] doubleArray30 = new double[] { 10, 'a' };
        double[] doubleArray33 = new double[] { 10, 'a' };
        double[][] doubleArray34 = new double[][] { doubleArray30, doubleArray33 };
        com.operations.Matrix.Matrix matrix35 = new com.operations.Matrix.Matrix(doubleArray34);
        int int36 = matrix35.getCols();
        int int37 = matrix35.getCols();
        int int38 = matrix35.getCols();
        com.operations.Matrix.Matrix[] matrixArray39 = com.operations.Matrix.MatrixDecompositions.luDecomposition(matrix35);
        com.operations.Matrix.Matrix matrix40 = com.operations.Matrix.MatrixOperations.multiply(matrix27, matrix35);
        com.operations.Matrix.Matrix matrix42 = com.operations.Matrix.MatrixTransformations.rotate2D((double) (short) 100);
        boolean boolean44 = com.operations.Matrix.MatrixUtils.compare(matrix35, matrix42, (double) (byte) 0);
        com.operations.Matrix.Matrix matrix45 = com.operations.Matrix.MatrixOperations.multiply(matrix23, matrix35);
        com.operations.Matrix.Matrix matrix46 = com.operations.Matrix.MatrixOperations.add(matrix12, matrix35);
        double[][] doubleArray47 = matrix46.getData();
        com.operations.Matrix.Matrix matrix48 = com.operations.Matrix.MatrixOperations.add(matrix1, matrix46);
        boolean boolean49 = com.operations.Matrix.MatrixUtils.isSymmetric(matrix1);
        org.junit.Assert.assertNotNull(matrix1);
        org.junit.Assert.assertNotNull(matrix3);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertArrayEquals(doubleArray6, new double[] { 137.90576492663388d, (-1.0d) }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertArrayEquals(doubleArray7, new double[] { (-24.931892522286255d), (-135.63701830716116d) }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertArrayEquals(doubleArray8, new double[] { 137.90221361711127d, 1.4069397643877004d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertNotNull(matrix12);
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertArrayEquals(doubleArray15, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertArrayEquals(doubleArray18, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 2 + "'", int21 == 2);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertNotNull(matrix23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 2 + "'", int24 == 2);
        org.junit.Assert.assertNotNull(matrix27);
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertArrayEquals(doubleArray30, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertArrayEquals(doubleArray33, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 2 + "'", int36 == 2);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 2 + "'", int37 == 2);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 2 + "'", int38 == 2);
        org.junit.Assert.assertNotNull(matrixArray39);
        org.junit.Assert.assertNotNull(matrix40);
        org.junit.Assert.assertNotNull(matrix42);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(matrix45);
        org.junit.Assert.assertNotNull(matrix46);
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertNotNull(matrix48);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
    }

    @Test
    public void test1916() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1916");
        com.operations.Matrix.Matrix matrix5 = com.operations.Matrix.MatrixUtils.generateRandomMatrix((int) (byte) 1, (int) (byte) 0, 100, (-1), (long) (short) -1);
        com.operations.Matrix.Matrix matrix7 = com.operations.Matrix.MatrixOperations.scalarMultiply(matrix5, 10.0d);
        double[][] doubleArray8 = matrix7.getData();
        boolean boolean9 = com.operations.Matrix.MatrixUtils.isSymmetric(matrix7);
        // The following exception was thrown during execution in test generation
        try {
            com.operations.Matrix.Matrix matrix10 = com.operations.Matrix.MatrixOperations.transpose(matrix7);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: Index 0 out of bounds for length 0");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(matrix5);
        org.junit.Assert.assertNotNull(matrix7);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
    }

    @Test
    public void test1917() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1917");
        com.operations.Matrix.Matrix matrix4 = com.operations.Matrix.MatrixUtils.generateRandomMatrix((int) '#', (int) (short) 100, 2, (int) (byte) -1);
        // The following exception was thrown during execution in test generation
        try {
            double double7 = matrix4.getValue((int) (byte) 100, 10);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(matrix4);
    }

    @Test
    public void test1918() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1918");
        com.operations.Matrix.Matrix matrix2 = com.operations.Matrix.MatrixTransformations.project2D((double) (short) 100, (double) 0L);
        // The following exception was thrown during execution in test generation
        try {
            matrix2.setValue((int) (byte) 100, (int) (short) 10, 1363.6076983299943d);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: Index 100 out of bounds for length 2");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(matrix2);
    }

    @Test
    public void test1919() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1919");
        com.operations.Matrix.Matrix matrix2 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0L, (double) (byte) 10);
        int int3 = matrix2.getRows();
        com.operations.Matrix.Matrix matrix5 = com.operations.Matrix.MatrixOperations.scalarMultiply(matrix2, (double) 2);
        double double6 = com.operations.Matrix.MatrixUtils.frobeniusNorm(matrix2);
        com.operations.Matrix.Matrix matrix9 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0L, (double) (byte) 10);
        int int10 = matrix9.getRows();
        com.operations.Matrix.Matrix matrix12 = com.operations.Matrix.MatrixOperations.scalarMultiply(matrix9, (double) 2);
        com.operations.Matrix.Matrix matrix13 = com.operations.Matrix.MatrixOperations.subtract(matrix2, matrix12);
        com.operations.Matrix.Matrix matrix15 = com.operations.Matrix.MatrixTransformations.rotate2D((double) (short) 100);
        double[] doubleArray18 = new double[] { 137.90576492663388d, (byte) -1 };
        double[] doubleArray19 = com.operations.Matrix.MatrixSolver.solveGaussian(matrix15, doubleArray18);
        com.operations.Matrix.Matrix matrix22 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0L, (double) (byte) 10);
        double[] doubleArray25 = new double[] { 10, 'a' };
        double[] doubleArray28 = new double[] { 10, 'a' };
        double[][] doubleArray29 = new double[][] { doubleArray25, doubleArray28 };
        com.operations.Matrix.Matrix matrix30 = new com.operations.Matrix.Matrix(doubleArray29);
        int int31 = matrix30.getCols();
        int int32 = matrix30.getCols();
        int int33 = matrix30.getCols();
        com.operations.Matrix.Matrix[] matrixArray34 = com.operations.Matrix.MatrixDecompositions.luDecomposition(matrix30);
        com.operations.Matrix.Matrix matrix35 = com.operations.Matrix.MatrixOperations.multiply(matrix22, matrix30);
        boolean boolean37 = com.operations.Matrix.MatrixUtils.compare(matrix15, matrix22, (double) (-1L));
        double[][] doubleArray38 = matrix15.getData();
        com.operations.Matrix.Matrix matrix41 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0L, (double) 10L);
        boolean boolean43 = com.operations.Matrix.MatrixUtils.compare(matrix15, matrix41, 146.4308710620817d);
        com.operations.Matrix.Matrix matrix44 = com.operations.Matrix.MatrixOperations.subtract(matrix13, matrix41);
        int int45 = matrix13.getRows();
        // The following exception was thrown during execution in test generation
        try {
            double double48 = matrix13.getValue(97, 32);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(matrix2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 2 + "'", int3 == 2);
        org.junit.Assert.assertNotNull(matrix5);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 10.0d + "'", double6 == 10.0d);
        org.junit.Assert.assertNotNull(matrix9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 2 + "'", int10 == 2);
        org.junit.Assert.assertNotNull(matrix12);
        org.junit.Assert.assertNotNull(matrix13);
        org.junit.Assert.assertNotNull(matrix15);
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertArrayEquals(doubleArray18, new double[] { 137.90576492663388d, (-1.0d) }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertArrayEquals(doubleArray19, new double[] { (-24.931892522286255d), (-135.63701830716116d) }, 1.0E-15);
        org.junit.Assert.assertNotNull(matrix22);
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertArrayEquals(doubleArray25, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertArrayEquals(doubleArray28, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 2 + "'", int31 == 2);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 2 + "'", int32 == 2);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 2 + "'", int33 == 2);
        org.junit.Assert.assertNotNull(matrixArray34);
        org.junit.Assert.assertNotNull(matrix35);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertNotNull(matrix41);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertNotNull(matrix44);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 2 + "'", int45 == 2);
    }

    @Test
    public void test1920() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1920");
        double[] doubleArray2 = new double[] { 10, 'a' };
        double[] doubleArray5 = new double[] { 10, 'a' };
        double[][] doubleArray6 = new double[][] { doubleArray2, doubleArray5 };
        com.operations.Matrix.Matrix matrix7 = new com.operations.Matrix.Matrix(doubleArray6);
        com.operations.Matrix.Matrix matrix8 = new com.operations.Matrix.Matrix(doubleArray6);
        boolean boolean9 = com.operations.Matrix.MatrixUtils.isSquare(matrix8);
        com.operations.Matrix.Matrix matrix11 = com.operations.Matrix.MatrixOperations.scalarMultiply(matrix8, (double) 1.0f);
        com.operations.Matrix.Matrix matrix13 = com.operations.Matrix.MatrixTransformations.rotate2D((double) 10);
        com.operations.Matrix.Matrix matrix15 = com.operations.Matrix.MatrixTransformations.rotate2D((double) 1.0f);
        com.operations.Matrix.Matrix matrix18 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0L, (double) (byte) 10);
        int int19 = matrix18.getRows();
        com.operations.Matrix.Matrix matrix21 = com.operations.Matrix.MatrixOperations.scalarMultiply(matrix18, (double) 2);
        double double22 = com.operations.Matrix.MatrixUtils.frobeniusNorm(matrix18);
        com.operations.Matrix.Matrix matrix25 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0L, (double) (byte) 10);
        int int26 = matrix25.getRows();
        com.operations.Matrix.Matrix matrix28 = com.operations.Matrix.MatrixOperations.scalarMultiply(matrix25, (double) 2);
        com.operations.Matrix.Matrix matrix29 = com.operations.Matrix.MatrixOperations.subtract(matrix18, matrix28);
        com.operations.Matrix.Matrix matrix30 = com.operations.Matrix.MatrixOperations.add(matrix15, matrix28);
        matrix15.print();
        double[] doubleArray34 = new double[] { 10, 'a' };
        double[] doubleArray37 = new double[] { 10, 'a' };
        double[][] doubleArray38 = new double[][] { doubleArray34, doubleArray37 };
        com.operations.Matrix.Matrix matrix39 = new com.operations.Matrix.Matrix(doubleArray38);
        com.operations.Matrix.Matrix matrix40 = com.operations.Matrix.MatrixOperations.transpose(matrix39);
        com.operations.Matrix.Matrix matrix43 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0L, (double) (byte) 10);
        int int44 = matrix43.getRows();
        com.operations.Matrix.Matrix matrix50 = com.operations.Matrix.MatrixUtils.generateRandomMatrix(100, (int) (byte) 1, (int) '#', (int) '#', 1L);
        boolean boolean52 = com.operations.Matrix.MatrixUtils.compare(matrix43, matrix50, (double) 1.0f);
        com.operations.Matrix.Matrix matrix54 = com.operations.Matrix.MatrixOperations.scalarMultiply(matrix43, (double) 1L);
        matrix43.print();
        com.operations.Matrix.Matrix matrix56 = com.operations.Matrix.MatrixOperations.multiply(matrix40, matrix43);
        com.operations.Matrix.Matrix matrix57 = com.operations.Matrix.MatrixOperations.multiply(matrix15, matrix43);
        com.operations.Matrix.Matrix matrix58 = com.operations.Matrix.MatrixOperations.subtract(matrix13, matrix57);
        com.operations.Matrix.Matrix matrix59 = com.operations.Matrix.MatrixOperations.multiply(matrix8, matrix58);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertArrayEquals(doubleArray2, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertArrayEquals(doubleArray5, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertNotNull(matrix11);
        org.junit.Assert.assertNotNull(matrix13);
        org.junit.Assert.assertNotNull(matrix15);
        org.junit.Assert.assertNotNull(matrix18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 2 + "'", int19 == 2);
        org.junit.Assert.assertNotNull(matrix21);
        org.junit.Assert.assertTrue("'" + double22 + "' != '" + 10.0d + "'", double22 == 10.0d);
        org.junit.Assert.assertNotNull(matrix25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 2 + "'", int26 == 2);
        org.junit.Assert.assertNotNull(matrix28);
        org.junit.Assert.assertNotNull(matrix29);
        org.junit.Assert.assertNotNull(matrix30);
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertArrayEquals(doubleArray34, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertArrayEquals(doubleArray37, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertNotNull(matrix40);
        org.junit.Assert.assertNotNull(matrix43);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 2 + "'", int44 == 2);
        org.junit.Assert.assertNotNull(matrix50);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(matrix54);
        org.junit.Assert.assertNotNull(matrix56);
        org.junit.Assert.assertNotNull(matrix57);
        org.junit.Assert.assertNotNull(matrix58);
        org.junit.Assert.assertNotNull(matrix59);
    }

    @Test
    public void test1921() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1921");
        com.operations.Matrix.Matrix matrix2 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0L, (double) (byte) 10);
        double[] doubleArray5 = new double[] { 10, 'a' };
        double[] doubleArray8 = new double[] { 10, 'a' };
        double[][] doubleArray9 = new double[][] { doubleArray5, doubleArray8 };
        com.operations.Matrix.Matrix matrix10 = new com.operations.Matrix.Matrix(doubleArray9);
        int int11 = matrix10.getCols();
        int int12 = matrix10.getCols();
        int int13 = matrix10.getCols();
        com.operations.Matrix.Matrix[] matrixArray14 = com.operations.Matrix.MatrixDecompositions.luDecomposition(matrix10);
        com.operations.Matrix.Matrix matrix15 = com.operations.Matrix.MatrixOperations.multiply(matrix2, matrix10);
        com.operations.Matrix.Matrix matrix17 = com.operations.Matrix.MatrixTransformations.rotate2D((double) (short) 100);
        boolean boolean19 = com.operations.Matrix.MatrixUtils.compare(matrix10, matrix17, (double) (byte) 0);
        double[] doubleArray22 = new double[] { 10, 'a' };
        double[] doubleArray25 = new double[] { 10, 'a' };
        double[][] doubleArray26 = new double[][] { doubleArray22, doubleArray25 };
        com.operations.Matrix.Matrix matrix27 = new com.operations.Matrix.Matrix(doubleArray26);
        com.operations.Matrix.Matrix matrix28 = new com.operations.Matrix.Matrix(doubleArray26);
        com.operations.Matrix.Matrix matrix29 = new com.operations.Matrix.Matrix(doubleArray26);
        boolean boolean31 = com.operations.Matrix.MatrixUtils.compare(matrix10, matrix29, (double) (-1));
        double[] doubleArray34 = new double[] { 10, 'a' };
        double[] doubleArray37 = new double[] { 10, 'a' };
        double[][] doubleArray38 = new double[][] { doubleArray34, doubleArray37 };
        com.operations.Matrix.Matrix matrix39 = new com.operations.Matrix.Matrix(doubleArray38);
        com.operations.Matrix.Matrix matrix40 = new com.operations.Matrix.Matrix(doubleArray38);
        boolean boolean41 = com.operations.Matrix.MatrixUtils.isSquare(matrix40);
        com.operations.Matrix.Matrix matrix42 = com.operations.Matrix.MatrixOperations.multiply(matrix29, matrix40);
        double[][] doubleArray43 = matrix40.getData();
        com.operations.Matrix.Matrix matrix44 = new com.operations.Matrix.Matrix(doubleArray43);
        com.operations.Matrix.Matrix matrix45 = com.operations.Matrix.MatrixOperations.transpose(matrix44);
        boolean boolean46 = com.operations.Matrix.MatrixUtils.isSymmetric(matrix44);
        com.operations.Matrix.Matrix matrix48 = com.operations.Matrix.MatrixOperations.scalarMultiply(matrix44, (double) 2);
        double[] doubleArray51 = new double[] { 10, 'a' };
        double[] doubleArray54 = new double[] { 10, 'a' };
        double[][] doubleArray55 = new double[][] { doubleArray51, doubleArray54 };
        com.operations.Matrix.Matrix matrix56 = new com.operations.Matrix.Matrix(doubleArray55);
        com.operations.Matrix.Matrix matrix57 = new com.operations.Matrix.Matrix(doubleArray55);
        com.operations.Matrix.Matrix[] matrixArray58 = com.operations.Matrix.MatrixDecompositions.luDecomposition(matrix57);
        com.operations.Matrix.Matrix matrix61 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0, (double) 100L);
        com.operations.Matrix.Matrix matrix62 = com.operations.Matrix.MatrixOperations.subtract(matrix57, matrix61);
        com.operations.Matrix.Matrix matrix63 = com.operations.Matrix.MatrixOperations.multiply(matrix44, matrix61);
        // The following exception was thrown during execution in test generation
        try {
            double double66 = matrix63.getValue(52, (int) '#');
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(matrix2);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertArrayEquals(doubleArray5, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertArrayEquals(doubleArray8, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 2 + "'", int11 == 2);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 2 + "'", int12 == 2);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 2 + "'", int13 == 2);
        org.junit.Assert.assertNotNull(matrixArray14);
        org.junit.Assert.assertNotNull(matrix15);
        org.junit.Assert.assertNotNull(matrix17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertArrayEquals(doubleArray22, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertArrayEquals(doubleArray25, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertArrayEquals(doubleArray34, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertArrayEquals(doubleArray37, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertNotNull(matrix42);
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertNotNull(matrix45);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(matrix48);
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertArrayEquals(doubleArray51, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray54);
        org.junit.Assert.assertArrayEquals(doubleArray54, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertNotNull(matrixArray58);
        org.junit.Assert.assertNotNull(matrix61);
        org.junit.Assert.assertNotNull(matrix62);
        org.junit.Assert.assertNotNull(matrix63);
    }

    @Test
    public void test1922() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1922");
        com.operations.Matrix.Matrix matrix0 = null;
        com.operations.Matrix.Matrix matrix3 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0L, (double) (byte) 10);
        double[] doubleArray6 = new double[] { 10, 'a' };
        double[] doubleArray9 = new double[] { 10, 'a' };
        double[][] doubleArray10 = new double[][] { doubleArray6, doubleArray9 };
        com.operations.Matrix.Matrix matrix11 = new com.operations.Matrix.Matrix(doubleArray10);
        int int12 = matrix11.getCols();
        int int13 = matrix11.getCols();
        int int14 = matrix11.getCols();
        com.operations.Matrix.Matrix[] matrixArray15 = com.operations.Matrix.MatrixDecompositions.luDecomposition(matrix11);
        com.operations.Matrix.Matrix matrix16 = com.operations.Matrix.MatrixOperations.multiply(matrix3, matrix11);
        com.operations.Matrix.Matrix matrix18 = com.operations.Matrix.MatrixTransformations.rotate2D((double) (short) 100);
        boolean boolean20 = com.operations.Matrix.MatrixUtils.compare(matrix11, matrix18, (double) (byte) 0);
        double[] doubleArray23 = new double[] { 10, 'a' };
        double[] doubleArray26 = new double[] { 10, 'a' };
        double[][] doubleArray27 = new double[][] { doubleArray23, doubleArray26 };
        com.operations.Matrix.Matrix matrix28 = new com.operations.Matrix.Matrix(doubleArray27);
        com.operations.Matrix.Matrix matrix29 = new com.operations.Matrix.Matrix(doubleArray27);
        com.operations.Matrix.Matrix matrix30 = new com.operations.Matrix.Matrix(doubleArray27);
        boolean boolean32 = com.operations.Matrix.MatrixUtils.compare(matrix11, matrix30, (double) (-1));
        double[] doubleArray35 = new double[] { 10, 'a' };
        double[] doubleArray38 = new double[] { 10, 'a' };
        double[][] doubleArray39 = new double[][] { doubleArray35, doubleArray38 };
        com.operations.Matrix.Matrix matrix40 = new com.operations.Matrix.Matrix(doubleArray39);
        com.operations.Matrix.Matrix matrix41 = new com.operations.Matrix.Matrix(doubleArray39);
        boolean boolean42 = com.operations.Matrix.MatrixUtils.isSquare(matrix41);
        com.operations.Matrix.Matrix matrix43 = com.operations.Matrix.MatrixOperations.multiply(matrix30, matrix41);
        double[][] doubleArray44 = matrix41.getData();
        com.operations.Matrix.Matrix matrix45 = new com.operations.Matrix.Matrix(doubleArray44);
        com.operations.Matrix.Matrix matrix46 = new com.operations.Matrix.Matrix(doubleArray44);
        boolean boolean47 = com.operations.Matrix.MatrixUtils.isSymmetric(matrix46);
        // The following exception was thrown during execution in test generation
        try {
            com.operations.Matrix.Matrix matrix48 = com.operations.Matrix.MatrixOperations.add(matrix0, matrix46);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot invoke \"com.operations.Matrix.Matrix.getRows()\" because \"a\" is null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(matrix3);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertArrayEquals(doubleArray6, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertArrayEquals(doubleArray9, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 2 + "'", int12 == 2);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 2 + "'", int13 == 2);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 2 + "'", int14 == 2);
        org.junit.Assert.assertNotNull(matrixArray15);
        org.junit.Assert.assertNotNull(matrix16);
        org.junit.Assert.assertNotNull(matrix18);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertArrayEquals(doubleArray23, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertArrayEquals(doubleArray26, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertArrayEquals(doubleArray35, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertArrayEquals(doubleArray38, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertNotNull(matrix43);
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
    }

    @Test
    public void test1923() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1923");
        com.operations.Matrix.Matrix matrix1 = com.operations.Matrix.MatrixTransformations.rotate2D((double) '4');
        matrix1.print();
        com.operations.Matrix.Matrix matrix3 = com.operations.Matrix.MatrixOperations.transpose(matrix1);
        com.operations.Matrix.Matrix matrix6 = com.operations.Matrix.MatrixTransformations.project2D(36.40054944640259d, (double) 2);
        com.operations.Matrix.Matrix matrix7 = com.operations.Matrix.MatrixOperations.add(matrix3, matrix6);
        double double8 = com.operations.Matrix.MatrixUtils.frobeniusNorm(matrix6);
        org.junit.Assert.assertNotNull(matrix1);
        org.junit.Assert.assertNotNull(matrix3);
        org.junit.Assert.assertNotNull(matrix6);
        org.junit.Assert.assertNotNull(matrix7);
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 36.45545226711637d + "'", double8 == 36.45545226711637d);
    }

    @Test
    public void test1924() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1924");
        com.operations.Matrix.Matrix matrix2 = com.operations.Matrix.MatrixTransformations.project2D(263.4829471529277d, 3200.015624961853d);
        org.junit.Assert.assertNotNull(matrix2);
    }

    @Test
    public void test1925() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1925");
        com.operations.Matrix.Matrix matrix2 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0L, (double) (byte) 10);
        double[] doubleArray5 = new double[] { 10, 'a' };
        double[] doubleArray8 = new double[] { 10, 'a' };
        double[][] doubleArray9 = new double[][] { doubleArray5, doubleArray8 };
        com.operations.Matrix.Matrix matrix10 = new com.operations.Matrix.Matrix(doubleArray9);
        int int11 = matrix10.getCols();
        int int12 = matrix10.getCols();
        int int13 = matrix10.getCols();
        com.operations.Matrix.Matrix[] matrixArray14 = com.operations.Matrix.MatrixDecompositions.luDecomposition(matrix10);
        com.operations.Matrix.Matrix matrix15 = com.operations.Matrix.MatrixOperations.multiply(matrix2, matrix10);
        com.operations.Matrix.Matrix matrix17 = com.operations.Matrix.MatrixTransformations.rotate2D((double) (short) 100);
        boolean boolean19 = com.operations.Matrix.MatrixUtils.compare(matrix10, matrix17, (double) (byte) 0);
        com.operations.Matrix.Matrix[] matrixArray20 = com.operations.Matrix.MatrixDecompositions.luDecomposition(matrix10);
        com.operations.Matrix.Matrix matrix21 = com.operations.Matrix.MatrixDecompositions.choleskyDecomposition(matrix10);
        com.operations.Matrix.Matrix matrix22 = com.operations.Matrix.MatrixOperations.transpose(matrix21);
        com.operations.Matrix.Matrix matrix23 = com.operations.Matrix.MatrixDecompositions.choleskyDecomposition(matrix22);
        double[][] doubleArray24 = matrix22.getData();
        com.operations.Matrix.Matrix matrix29 = com.operations.Matrix.MatrixUtils.generateRandomMatrix((int) '4', (int) (short) 100, 0, 0);
        // The following exception was thrown during execution in test generation
        try {
            com.operations.Matrix.Matrix matrix30 = com.operations.Matrix.MatrixOperations.multiply(matrix22, matrix29);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Matrix A's columns must match Matrix B's rows for multiplication.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(matrix2);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertArrayEquals(doubleArray5, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertArrayEquals(doubleArray8, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 2 + "'", int11 == 2);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 2 + "'", int12 == 2);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 2 + "'", int13 == 2);
        org.junit.Assert.assertNotNull(matrixArray14);
        org.junit.Assert.assertNotNull(matrix15);
        org.junit.Assert.assertNotNull(matrix17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(matrixArray20);
        org.junit.Assert.assertNotNull(matrix21);
        org.junit.Assert.assertNotNull(matrix22);
        org.junit.Assert.assertNotNull(matrix23);
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertNotNull(matrix29);
    }

    @Test
    public void test1926() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1926");
        com.operations.Matrix.Matrix matrix2 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0L, (double) (byte) 10);
        double[] doubleArray5 = new double[] { 10, 'a' };
        double[] doubleArray8 = new double[] { 10, 'a' };
        double[][] doubleArray9 = new double[][] { doubleArray5, doubleArray8 };
        com.operations.Matrix.Matrix matrix10 = new com.operations.Matrix.Matrix(doubleArray9);
        int int11 = matrix10.getCols();
        int int12 = matrix10.getCols();
        int int13 = matrix10.getCols();
        com.operations.Matrix.Matrix[] matrixArray14 = com.operations.Matrix.MatrixDecompositions.luDecomposition(matrix10);
        com.operations.Matrix.Matrix matrix15 = com.operations.Matrix.MatrixOperations.multiply(matrix2, matrix10);
        com.operations.Matrix.Matrix matrix17 = com.operations.Matrix.MatrixTransformations.rotate2D((double) (short) 100);
        boolean boolean19 = com.operations.Matrix.MatrixUtils.compare(matrix10, matrix17, (double) (byte) 0);
        com.operations.Matrix.Matrix matrix21 = com.operations.Matrix.MatrixOperations.scalarMultiply(matrix17, (double) 10.0f);
        com.operations.Matrix.Matrix matrix23 = com.operations.Matrix.MatrixTransformations.rotate2D((double) 1.0f);
        com.operations.Matrix.Matrix matrix26 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0L, (double) (byte) 10);
        int int27 = matrix26.getRows();
        com.operations.Matrix.Matrix matrix29 = com.operations.Matrix.MatrixOperations.scalarMultiply(matrix26, (double) 2);
        double double30 = com.operations.Matrix.MatrixUtils.frobeniusNorm(matrix26);
        com.operations.Matrix.Matrix matrix33 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0L, (double) (byte) 10);
        int int34 = matrix33.getRows();
        com.operations.Matrix.Matrix matrix36 = com.operations.Matrix.MatrixOperations.scalarMultiply(matrix33, (double) 2);
        com.operations.Matrix.Matrix matrix37 = com.operations.Matrix.MatrixOperations.subtract(matrix26, matrix36);
        com.operations.Matrix.Matrix matrix38 = com.operations.Matrix.MatrixOperations.add(matrix23, matrix36);
        com.operations.Matrix.Matrix[] matrixArray39 = com.operations.Matrix.MatrixDecompositions.luDecomposition(matrix36);
        boolean boolean40 = com.operations.Matrix.MatrixUtils.isSquare(matrix36);
        com.operations.Matrix.Matrix matrix41 = com.operations.Matrix.MatrixOperations.transpose(matrix36);
        boolean boolean43 = com.operations.Matrix.MatrixUtils.compare(matrix21, matrix36, (double) (byte) 100);
        com.operations.Matrix.Matrix matrix49 = com.operations.Matrix.MatrixUtils.generateRandomMatrix((int) (short) 1, (int) (short) 10, (int) (short) 100, (int) ' ', (long) 10);
        // The following exception was thrown during execution in test generation
        try {
            com.operations.Matrix.Matrix matrix50 = com.operations.Matrix.MatrixOperations.add(matrix21, matrix49);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Matrices must have the same dimensions for addition.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(matrix2);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertArrayEquals(doubleArray5, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertArrayEquals(doubleArray8, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 2 + "'", int11 == 2);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 2 + "'", int12 == 2);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 2 + "'", int13 == 2);
        org.junit.Assert.assertNotNull(matrixArray14);
        org.junit.Assert.assertNotNull(matrix15);
        org.junit.Assert.assertNotNull(matrix17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(matrix21);
        org.junit.Assert.assertNotNull(matrix23);
        org.junit.Assert.assertNotNull(matrix26);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 2 + "'", int27 == 2);
        org.junit.Assert.assertNotNull(matrix29);
        org.junit.Assert.assertTrue("'" + double30 + "' != '" + 10.0d + "'", double30 == 10.0d);
        org.junit.Assert.assertNotNull(matrix33);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 2 + "'", int34 == 2);
        org.junit.Assert.assertNotNull(matrix36);
        org.junit.Assert.assertNotNull(matrix37);
        org.junit.Assert.assertNotNull(matrix38);
        org.junit.Assert.assertNotNull(matrixArray39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertNotNull(matrix41);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertNotNull(matrix49);
    }

    @Test
    public void test1927() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1927");
        // The following exception was thrown during execution in test generation
        try {
            com.operations.Matrix.Matrix matrix2 = new com.operations.Matrix.Matrix((int) '4', (int) (byte) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.NegativeArraySizeException; message: -1");
        } catch (java.lang.NegativeArraySizeException e) {
            // Expected exception.
        }
    }

    @Test
    public void test1928() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1928");
        com.operations.Matrix.Matrix matrix2 = com.operations.Matrix.MatrixTransformations.scale2D(0.0d, 0.0d);
        com.operations.Matrix.Matrix matrix5 = com.operations.Matrix.MatrixTransformations.scale2D((double) 1, (-1.0d));
        com.operations.Matrix.Matrix matrix8 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0L, (double) (byte) 10);
        double[] doubleArray11 = new double[] { 10, 'a' };
        double[] doubleArray14 = new double[] { 10, 'a' };
        double[][] doubleArray15 = new double[][] { doubleArray11, doubleArray14 };
        com.operations.Matrix.Matrix matrix16 = new com.operations.Matrix.Matrix(doubleArray15);
        int int17 = matrix16.getCols();
        int int18 = matrix16.getCols();
        int int19 = matrix16.getCols();
        com.operations.Matrix.Matrix[] matrixArray20 = com.operations.Matrix.MatrixDecompositions.luDecomposition(matrix16);
        com.operations.Matrix.Matrix matrix21 = com.operations.Matrix.MatrixOperations.multiply(matrix8, matrix16);
        int int22 = matrix16.getRows();
        int int23 = matrix16.getCols();
        com.operations.Matrix.Matrix matrix26 = com.operations.Matrix.MatrixTransformations.project2D((double) (-1L), (double) (short) 100);
        com.operations.Matrix.Matrix matrix27 = com.operations.Matrix.MatrixOperations.subtract(matrix16, matrix26);
        com.operations.Matrix.Matrix matrix28 = com.operations.Matrix.MatrixOperations.add(matrix5, matrix27);
        com.operations.Matrix.Matrix matrix29 = com.operations.Matrix.MatrixOperations.add(matrix2, matrix5);
        double[] doubleArray32 = new double[] { 10, 'a' };
        double[] doubleArray35 = new double[] { 10, 'a' };
        double[][] doubleArray36 = new double[][] { doubleArray32, doubleArray35 };
        com.operations.Matrix.Matrix matrix37 = new com.operations.Matrix.Matrix(doubleArray36);
        com.operations.Matrix.Matrix matrix38 = new com.operations.Matrix.Matrix(doubleArray36);
        com.operations.Matrix.Matrix matrix40 = com.operations.Matrix.MatrixTransformations.rotate2D((double) (short) 100);
        double[] doubleArray43 = new double[] { 137.90576492663388d, (byte) -1 };
        double[] doubleArray44 = com.operations.Matrix.MatrixSolver.solveGaussian(matrix40, doubleArray43);
        com.operations.Matrix.Matrix matrix45 = com.operations.Matrix.MatrixOperations.add(matrix38, matrix40);
        com.operations.Matrix.Matrix matrix46 = com.operations.Matrix.MatrixOperations.transpose(matrix40);
        int int47 = matrix40.getCols();
        com.operations.Matrix.Matrix matrix50 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0L, (double) (byte) 10);
        double[] doubleArray53 = new double[] { 10, 'a' };
        double[] doubleArray56 = new double[] { 10, 'a' };
        double[][] doubleArray57 = new double[][] { doubleArray53, doubleArray56 };
        com.operations.Matrix.Matrix matrix58 = new com.operations.Matrix.Matrix(doubleArray57);
        int int59 = matrix58.getCols();
        int int60 = matrix58.getCols();
        int int61 = matrix58.getCols();
        com.operations.Matrix.Matrix[] matrixArray62 = com.operations.Matrix.MatrixDecompositions.luDecomposition(matrix58);
        com.operations.Matrix.Matrix matrix63 = com.operations.Matrix.MatrixOperations.multiply(matrix50, matrix58);
        com.operations.Matrix.Matrix matrix65 = com.operations.Matrix.MatrixTransformations.rotate2D((double) (short) 100);
        boolean boolean67 = com.operations.Matrix.MatrixUtils.compare(matrix58, matrix65, (double) (byte) 0);
        boolean boolean68 = com.operations.Matrix.MatrixUtils.isSymmetric(matrix65);
        boolean boolean69 = com.operations.Matrix.MatrixUtils.isSquare(matrix65);
        com.operations.Matrix.Matrix matrix71 = com.operations.Matrix.MatrixTransformations.rotate2D((double) (short) 100);
        boolean boolean73 = com.operations.Matrix.MatrixUtils.compare(matrix65, matrix71, (double) (byte) 100);
        matrix71.print();
        com.operations.Matrix.Matrix matrix75 = com.operations.Matrix.MatrixOperations.add(matrix40, matrix71);
        com.operations.Matrix.Matrix matrix76 = com.operations.Matrix.MatrixOperations.subtract(matrix2, matrix40);
        int int77 = matrix76.getCols();
        org.junit.Assert.assertNotNull(matrix2);
        org.junit.Assert.assertNotNull(matrix5);
        org.junit.Assert.assertNotNull(matrix8);
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertArrayEquals(doubleArray11, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertArrayEquals(doubleArray14, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 2 + "'", int17 == 2);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 2 + "'", int18 == 2);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 2 + "'", int19 == 2);
        org.junit.Assert.assertNotNull(matrixArray20);
        org.junit.Assert.assertNotNull(matrix21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 2 + "'", int22 == 2);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 2 + "'", int23 == 2);
        org.junit.Assert.assertNotNull(matrix26);
        org.junit.Assert.assertNotNull(matrix27);
        org.junit.Assert.assertNotNull(matrix28);
        org.junit.Assert.assertNotNull(matrix29);
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertArrayEquals(doubleArray32, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertArrayEquals(doubleArray35, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertNotNull(matrix40);
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertArrayEquals(doubleArray43, new double[] { 137.90576492663388d, (-1.0d) }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertArrayEquals(doubleArray44, new double[] { (-24.931892522286255d), (-135.63701830716116d) }, 1.0E-15);
        org.junit.Assert.assertNotNull(matrix45);
        org.junit.Assert.assertNotNull(matrix46);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 2 + "'", int47 == 2);
        org.junit.Assert.assertNotNull(matrix50);
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertArrayEquals(doubleArray53, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray56);
        org.junit.Assert.assertArrayEquals(doubleArray56, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray57);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 2 + "'", int59 == 2);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 2 + "'", int60 == 2);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 2 + "'", int61 == 2);
        org.junit.Assert.assertNotNull(matrixArray62);
        org.junit.Assert.assertNotNull(matrix63);
        org.junit.Assert.assertNotNull(matrix65);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + true + "'", boolean69 == true);
        org.junit.Assert.assertNotNull(matrix71);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + true + "'", boolean73 == true);
        org.junit.Assert.assertNotNull(matrix75);
        org.junit.Assert.assertNotNull(matrix76);
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + 2 + "'", int77 == 2);
    }

    @Test
    public void test1929() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1929");
        com.operations.Matrix.Matrix matrix2 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0L, (double) (byte) 10);
        int int3 = matrix2.getRows();
        com.operations.Matrix.Matrix matrix6 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0L, (double) (byte) 10);
        int int7 = matrix6.getRows();
        com.operations.Matrix.Matrix matrix9 = com.operations.Matrix.MatrixOperations.scalarMultiply(matrix6, (double) 2);
        com.operations.Matrix.Matrix matrix10 = com.operations.Matrix.MatrixOperations.subtract(matrix2, matrix6);
        com.operations.Matrix.Matrix matrix13 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0L, (double) (byte) 10);
        int int14 = matrix13.getRows();
        com.operations.Matrix.Matrix matrix20 = com.operations.Matrix.MatrixUtils.generateRandomMatrix(100, (int) (byte) 1, (int) '#', (int) '#', 1L);
        boolean boolean22 = com.operations.Matrix.MatrixUtils.compare(matrix13, matrix20, (double) 1.0f);
        com.operations.Matrix.Matrix matrix24 = com.operations.Matrix.MatrixOperations.scalarMultiply(matrix13, (double) 1L);
        boolean boolean26 = com.operations.Matrix.MatrixUtils.compare(matrix10, matrix24, 0.0d);
        com.operations.Matrix.Matrix matrix27 = com.operations.Matrix.MatrixOperations.transpose(matrix10);
        matrix27.print();
        org.junit.Assert.assertNotNull(matrix2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 2 + "'", int3 == 2);
        org.junit.Assert.assertNotNull(matrix6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 2 + "'", int7 == 2);
        org.junit.Assert.assertNotNull(matrix9);
        org.junit.Assert.assertNotNull(matrix10);
        org.junit.Assert.assertNotNull(matrix13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 2 + "'", int14 == 2);
        org.junit.Assert.assertNotNull(matrix20);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(matrix24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(matrix27);
    }

    @Test
    public void test1930() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1930");
        com.operations.Matrix.Matrix matrix1 = com.operations.Matrix.MatrixTransformations.rotate2D((double) (short) 100);
        double[] doubleArray4 = new double[] { 137.90576492663388d, (byte) -1 };
        double[] doubleArray5 = com.operations.Matrix.MatrixSolver.solveGaussian(matrix1, doubleArray4);
        com.operations.Matrix.Matrix matrix8 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0L, (double) (byte) 10);
        double[] doubleArray11 = new double[] { 10, 'a' };
        double[] doubleArray14 = new double[] { 10, 'a' };
        double[][] doubleArray15 = new double[][] { doubleArray11, doubleArray14 };
        com.operations.Matrix.Matrix matrix16 = new com.operations.Matrix.Matrix(doubleArray15);
        int int17 = matrix16.getCols();
        int int18 = matrix16.getCols();
        int int19 = matrix16.getCols();
        com.operations.Matrix.Matrix[] matrixArray20 = com.operations.Matrix.MatrixDecompositions.luDecomposition(matrix16);
        com.operations.Matrix.Matrix matrix21 = com.operations.Matrix.MatrixOperations.multiply(matrix8, matrix16);
        boolean boolean23 = com.operations.Matrix.MatrixUtils.compare(matrix1, matrix8, (double) (-1L));
        boolean boolean24 = com.operations.Matrix.MatrixUtils.isSymmetric(matrix1);
        int int25 = matrix1.getCols();
        com.operations.Matrix.Matrix[] matrixArray26 = com.operations.Matrix.MatrixDecompositions.luDecomposition(matrix1);
        double double27 = com.operations.Matrix.MatrixUtils.frobeniusNorm(matrix1);
        com.operations.Matrix.Matrix matrix29 = com.operations.Matrix.MatrixTransformations.rotate2D(100.0d);
        int int30 = matrix29.getCols();
        matrix29.print();
        com.operations.Matrix.Matrix matrix33 = com.operations.Matrix.MatrixOperations.scalarMultiply(matrix29, (double) (byte) 1);
        com.operations.Matrix.Matrix matrix35 = com.operations.Matrix.MatrixTransformations.rotate2D(350.0d);
        com.operations.Matrix.Matrix matrix37 = com.operations.Matrix.MatrixTransformations.rotate2D((double) (short) 100);
        double[] doubleArray40 = new double[] { 137.90576492663388d, (byte) -1 };
        double[] doubleArray41 = com.operations.Matrix.MatrixSolver.solveGaussian(matrix37, doubleArray40);
        double[] doubleArray42 = com.operations.Matrix.MatrixSolver.solveGaussian(matrix35, doubleArray41);
        double[] doubleArray43 = com.operations.Matrix.MatrixSolver.solveGaussian(matrix29, doubleArray41);
        double[] doubleArray44 = com.operations.Matrix.MatrixSolver.solveGaussian(matrix1, doubleArray43);
        int int45 = matrix1.getCols();
        org.junit.Assert.assertNotNull(matrix1);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertArrayEquals(doubleArray4, new double[] { 137.90576492663388d, (-1.0d) }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertArrayEquals(doubleArray5, new double[] { (-24.931892522286255d), (-135.63701830716116d) }, 1.0E-15);
        org.junit.Assert.assertNotNull(matrix8);
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertArrayEquals(doubleArray11, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertArrayEquals(doubleArray14, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 2 + "'", int17 == 2);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 2 + "'", int18 == 2);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 2 + "'", int19 == 2);
        org.junit.Assert.assertNotNull(matrixArray20);
        org.junit.Assert.assertNotNull(matrix21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 2 + "'", int25 == 2);
        org.junit.Assert.assertNotNull(matrixArray26);
        org.junit.Assert.assertTrue("'" + double27 + "' != '" + 1.414213562373095d + "'", double27 == 1.414213562373095d);
        org.junit.Assert.assertNotNull(matrix29);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 2 + "'", int30 == 2);
        org.junit.Assert.assertNotNull(matrix33);
        org.junit.Assert.assertNotNull(matrix35);
        org.junit.Assert.assertNotNull(matrix37);
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertArrayEquals(doubleArray40, new double[] { 137.90576492663388d, (-1.0d) }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertArrayEquals(doubleArray41, new double[] { (-24.931892522286255d), (-135.63701830716116d) }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertArrayEquals(doubleArray42, new double[] { (-0.9999999999999858d), (-137.90576492663388d) }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertArrayEquals(doubleArray43, new double[] { (-129.24700952206834d), 48.1062421064292d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertArrayEquals(doubleArray44, new double[] { 69.81890786710137d, 118.92989575479001d }, 1.0E-15);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 2 + "'", int45 == 2);
    }

    @Test
    public void test1931() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1931");
        com.operations.Matrix.Matrix matrix2 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0L, (double) (byte) 10);
        double[] doubleArray5 = new double[] { 10, 'a' };
        double[] doubleArray8 = new double[] { 10, 'a' };
        double[][] doubleArray9 = new double[][] { doubleArray5, doubleArray8 };
        com.operations.Matrix.Matrix matrix10 = new com.operations.Matrix.Matrix(doubleArray9);
        int int11 = matrix10.getCols();
        int int12 = matrix10.getCols();
        int int13 = matrix10.getCols();
        com.operations.Matrix.Matrix[] matrixArray14 = com.operations.Matrix.MatrixDecompositions.luDecomposition(matrix10);
        com.operations.Matrix.Matrix matrix15 = com.operations.Matrix.MatrixOperations.multiply(matrix2, matrix10);
        com.operations.Matrix.Matrix matrix17 = com.operations.Matrix.MatrixTransformations.rotate2D((double) (short) 100);
        boolean boolean19 = com.operations.Matrix.MatrixUtils.compare(matrix10, matrix17, (double) (byte) 0);
        com.operations.Matrix.Matrix matrix20 = com.operations.Matrix.MatrixOperations.transpose(matrix10);
        com.operations.Matrix.Matrix matrix23 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0L, (double) (byte) 10);
        double[] doubleArray26 = new double[] { 10, 'a' };
        double[] doubleArray29 = new double[] { 10, 'a' };
        double[][] doubleArray30 = new double[][] { doubleArray26, doubleArray29 };
        com.operations.Matrix.Matrix matrix31 = new com.operations.Matrix.Matrix(doubleArray30);
        int int32 = matrix31.getCols();
        int int33 = matrix31.getCols();
        int int34 = matrix31.getCols();
        com.operations.Matrix.Matrix[] matrixArray35 = com.operations.Matrix.MatrixDecompositions.luDecomposition(matrix31);
        com.operations.Matrix.Matrix matrix36 = com.operations.Matrix.MatrixOperations.multiply(matrix23, matrix31);
        com.operations.Matrix.Matrix matrix38 = com.operations.Matrix.MatrixTransformations.rotate2D((double) (short) 100);
        boolean boolean40 = com.operations.Matrix.MatrixUtils.compare(matrix31, matrix38, (double) (byte) 0);
        double[] doubleArray43 = new double[] { 10, 'a' };
        double[] doubleArray46 = new double[] { 10, 'a' };
        double[][] doubleArray47 = new double[][] { doubleArray43, doubleArray46 };
        com.operations.Matrix.Matrix matrix48 = new com.operations.Matrix.Matrix(doubleArray47);
        com.operations.Matrix.Matrix matrix49 = new com.operations.Matrix.Matrix(doubleArray47);
        com.operations.Matrix.Matrix matrix50 = new com.operations.Matrix.Matrix(doubleArray47);
        boolean boolean52 = com.operations.Matrix.MatrixUtils.compare(matrix31, matrix50, (double) (-1));
        com.operations.Matrix.Matrix matrix55 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0L, (double) (byte) 10);
        double[] doubleArray58 = new double[] { 10, 'a' };
        double[] doubleArray61 = new double[] { 10, 'a' };
        double[][] doubleArray62 = new double[][] { doubleArray58, doubleArray61 };
        com.operations.Matrix.Matrix matrix63 = new com.operations.Matrix.Matrix(doubleArray62);
        int int64 = matrix63.getCols();
        int int65 = matrix63.getCols();
        int int66 = matrix63.getCols();
        com.operations.Matrix.Matrix[] matrixArray67 = com.operations.Matrix.MatrixDecompositions.luDecomposition(matrix63);
        com.operations.Matrix.Matrix matrix68 = com.operations.Matrix.MatrixOperations.multiply(matrix55, matrix63);
        boolean boolean70 = com.operations.Matrix.MatrixUtils.compare(matrix50, matrix55, (double) 10L);
        boolean boolean72 = com.operations.Matrix.MatrixUtils.compare(matrix20, matrix50, (double) 100L);
        com.operations.Matrix.Matrix matrix73 = com.operations.Matrix.MatrixDecompositions.choleskyDecomposition(matrix50);
        // The following exception was thrown during execution in test generation
        try {
            double double76 = matrix73.getValue((int) (byte) -1, (int) (byte) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(matrix2);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertArrayEquals(doubleArray5, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertArrayEquals(doubleArray8, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 2 + "'", int11 == 2);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 2 + "'", int12 == 2);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 2 + "'", int13 == 2);
        org.junit.Assert.assertNotNull(matrixArray14);
        org.junit.Assert.assertNotNull(matrix15);
        org.junit.Assert.assertNotNull(matrix17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(matrix20);
        org.junit.Assert.assertNotNull(matrix23);
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertArrayEquals(doubleArray26, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertArrayEquals(doubleArray29, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 2 + "'", int32 == 2);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 2 + "'", int33 == 2);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 2 + "'", int34 == 2);
        org.junit.Assert.assertNotNull(matrixArray35);
        org.junit.Assert.assertNotNull(matrix36);
        org.junit.Assert.assertNotNull(matrix38);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertArrayEquals(doubleArray43, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray46);
        org.junit.Assert.assertArrayEquals(doubleArray46, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(matrix55);
        org.junit.Assert.assertNotNull(doubleArray58);
        org.junit.Assert.assertArrayEquals(doubleArray58, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray61);
        org.junit.Assert.assertArrayEquals(doubleArray61, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray62);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 2 + "'", int64 == 2);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 2 + "'", int65 == 2);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 2 + "'", int66 == 2);
        org.junit.Assert.assertNotNull(matrixArray67);
        org.junit.Assert.assertNotNull(matrix68);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + true + "'", boolean72 == true);
        org.junit.Assert.assertNotNull(matrix73);
    }

    @Test
    public void test1932() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1932");
        com.operations.Matrix.Matrix matrix2 = com.operations.Matrix.MatrixTransformations.project2D(32.0d, 3500.0d);
        org.junit.Assert.assertNotNull(matrix2);
    }

    @Test
    public void test1933() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1933");
        com.operations.Matrix.Matrix matrix5 = com.operations.Matrix.MatrixUtils.generateRandomMatrix(52, (int) (short) 10, 0, (int) (short) 100, (long) (short) 100);
        org.junit.Assert.assertNotNull(matrix5);
    }

    @Test
    public void test1934() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1934");
        com.operations.Matrix.Matrix matrix2 = com.operations.Matrix.MatrixTransformations.project2D((double) 52, (double) 1);
        org.junit.Assert.assertNotNull(matrix2);
    }

    @Test
    public void test1935() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1935");
        com.operations.Matrix.Matrix matrix5 = com.operations.Matrix.MatrixUtils.generateRandomMatrix((int) (short) 10, (int) (short) 0, (int) (short) 100, (int) (short) 1, (long) (short) 10);
        // The following exception was thrown during execution in test generation
        try {
            matrix5.setValue((int) (byte) 10, (int) (byte) -1, (double) (-1L));
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: Index 10 out of bounds for length 10");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(matrix5);
    }

    @Test
    public void test1936() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1936");
        com.operations.Matrix.Matrix matrix2 = com.operations.Matrix.MatrixTransformations.project2D((double) (byte) 10, (double) 100.0f);
        org.junit.Assert.assertNotNull(matrix2);
    }

    @Test
    public void test1937() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1937");
        com.operations.Matrix.Matrix matrix2 = new com.operations.Matrix.Matrix((int) (short) 1, 2);
        boolean boolean3 = com.operations.Matrix.MatrixUtils.isSquare(matrix2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
    }

    @Test
    public void test1938() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1938");
        com.operations.Matrix.Matrix matrix2 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0L, (double) (byte) 10);
        double[] doubleArray5 = new double[] { 10, 'a' };
        double[] doubleArray8 = new double[] { 10, 'a' };
        double[][] doubleArray9 = new double[][] { doubleArray5, doubleArray8 };
        com.operations.Matrix.Matrix matrix10 = new com.operations.Matrix.Matrix(doubleArray9);
        int int11 = matrix10.getCols();
        int int12 = matrix10.getCols();
        int int13 = matrix10.getCols();
        com.operations.Matrix.Matrix[] matrixArray14 = com.operations.Matrix.MatrixDecompositions.luDecomposition(matrix10);
        com.operations.Matrix.Matrix matrix15 = com.operations.Matrix.MatrixOperations.multiply(matrix2, matrix10);
        com.operations.Matrix.Matrix matrix17 = com.operations.Matrix.MatrixTransformations.rotate2D((double) (short) 100);
        boolean boolean19 = com.operations.Matrix.MatrixUtils.compare(matrix10, matrix17, (double) (byte) 0);
        double[] doubleArray22 = new double[] { 10, 'a' };
        double[] doubleArray25 = new double[] { 10, 'a' };
        double[][] doubleArray26 = new double[][] { doubleArray22, doubleArray25 };
        com.operations.Matrix.Matrix matrix27 = new com.operations.Matrix.Matrix(doubleArray26);
        com.operations.Matrix.Matrix matrix28 = new com.operations.Matrix.Matrix(doubleArray26);
        com.operations.Matrix.Matrix matrix29 = new com.operations.Matrix.Matrix(doubleArray26);
        boolean boolean31 = com.operations.Matrix.MatrixUtils.compare(matrix10, matrix29, (double) (-1));
        double[] doubleArray34 = new double[] { 10, 'a' };
        double[] doubleArray37 = new double[] { 10, 'a' };
        double[][] doubleArray38 = new double[][] { doubleArray34, doubleArray37 };
        com.operations.Matrix.Matrix matrix39 = new com.operations.Matrix.Matrix(doubleArray38);
        com.operations.Matrix.Matrix matrix40 = new com.operations.Matrix.Matrix(doubleArray38);
        boolean boolean41 = com.operations.Matrix.MatrixUtils.isSquare(matrix40);
        com.operations.Matrix.Matrix matrix42 = com.operations.Matrix.MatrixOperations.multiply(matrix29, matrix40);
        boolean boolean43 = com.operations.Matrix.MatrixUtils.isSymmetric(matrix29);
        boolean boolean44 = com.operations.Matrix.MatrixUtils.isSymmetric(matrix29);
        com.operations.Matrix.Matrix matrix45 = null;
        // The following exception was thrown during execution in test generation
        try {
            com.operations.Matrix.Matrix matrix46 = com.operations.Matrix.MatrixOperations.subtract(matrix29, matrix45);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot invoke \"com.operations.Matrix.Matrix.getRows()\" because \"b\" is null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(matrix2);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertArrayEquals(doubleArray5, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertArrayEquals(doubleArray8, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 2 + "'", int11 == 2);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 2 + "'", int12 == 2);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 2 + "'", int13 == 2);
        org.junit.Assert.assertNotNull(matrixArray14);
        org.junit.Assert.assertNotNull(matrix15);
        org.junit.Assert.assertNotNull(matrix17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertArrayEquals(doubleArray22, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertArrayEquals(doubleArray25, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertArrayEquals(doubleArray34, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertArrayEquals(doubleArray37, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertNotNull(matrix42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
    }

    @Test
    public void test1939() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1939");
        com.operations.Matrix.Matrix matrix0 = null;
        com.operations.Matrix.Matrix matrix3 = new com.operations.Matrix.Matrix((int) '#', 0);
        com.operations.Matrix.Matrix matrix6 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0L, (double) (byte) 10);
        double[] doubleArray9 = new double[] { 10, 'a' };
        double[] doubleArray12 = new double[] { 10, 'a' };
        double[][] doubleArray13 = new double[][] { doubleArray9, doubleArray12 };
        com.operations.Matrix.Matrix matrix14 = new com.operations.Matrix.Matrix(doubleArray13);
        int int15 = matrix14.getCols();
        int int16 = matrix14.getCols();
        int int17 = matrix14.getCols();
        com.operations.Matrix.Matrix[] matrixArray18 = com.operations.Matrix.MatrixDecompositions.luDecomposition(matrix14);
        com.operations.Matrix.Matrix matrix19 = com.operations.Matrix.MatrixOperations.multiply(matrix6, matrix14);
        com.operations.Matrix.Matrix matrix21 = com.operations.Matrix.MatrixTransformations.rotate2D((double) (short) 100);
        boolean boolean23 = com.operations.Matrix.MatrixUtils.compare(matrix14, matrix21, (double) (byte) 0);
        double[] doubleArray26 = new double[] { 10, 'a' };
        double[] doubleArray29 = new double[] { 10, 'a' };
        double[][] doubleArray30 = new double[][] { doubleArray26, doubleArray29 };
        com.operations.Matrix.Matrix matrix31 = new com.operations.Matrix.Matrix(doubleArray30);
        com.operations.Matrix.Matrix matrix32 = new com.operations.Matrix.Matrix(doubleArray30);
        com.operations.Matrix.Matrix matrix33 = new com.operations.Matrix.Matrix(doubleArray30);
        boolean boolean35 = com.operations.Matrix.MatrixUtils.compare(matrix14, matrix33, (double) (-1));
        double[] doubleArray38 = new double[] { 10, 'a' };
        double[] doubleArray41 = new double[] { 10, 'a' };
        double[][] doubleArray42 = new double[][] { doubleArray38, doubleArray41 };
        com.operations.Matrix.Matrix matrix43 = new com.operations.Matrix.Matrix(doubleArray42);
        com.operations.Matrix.Matrix matrix44 = new com.operations.Matrix.Matrix(doubleArray42);
        boolean boolean45 = com.operations.Matrix.MatrixUtils.isSquare(matrix44);
        com.operations.Matrix.Matrix matrix46 = com.operations.Matrix.MatrixOperations.multiply(matrix33, matrix44);
        double[][] doubleArray47 = matrix44.getData();
        com.operations.Matrix.Matrix matrix48 = new com.operations.Matrix.Matrix(doubleArray47);
        com.operations.Matrix.Matrix matrix49 = com.operations.Matrix.MatrixOperations.transpose(matrix48);
        boolean boolean50 = com.operations.Matrix.MatrixUtils.isSymmetric(matrix48);
        com.operations.Matrix.Matrix matrix52 = com.operations.Matrix.MatrixOperations.scalarMultiply(matrix48, (double) 2);
        double[] doubleArray55 = new double[] { 10, 'a' };
        double[] doubleArray58 = new double[] { 10, 'a' };
        double[][] doubleArray59 = new double[][] { doubleArray55, doubleArray58 };
        com.operations.Matrix.Matrix matrix60 = new com.operations.Matrix.Matrix(doubleArray59);
        com.operations.Matrix.Matrix matrix61 = new com.operations.Matrix.Matrix(doubleArray59);
        com.operations.Matrix.Matrix[] matrixArray62 = com.operations.Matrix.MatrixDecompositions.luDecomposition(matrix61);
        com.operations.Matrix.Matrix matrix65 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0, (double) 100L);
        com.operations.Matrix.Matrix matrix66 = com.operations.Matrix.MatrixOperations.subtract(matrix61, matrix65);
        com.operations.Matrix.Matrix matrix67 = com.operations.Matrix.MatrixOperations.multiply(matrix48, matrix65);
        boolean boolean69 = com.operations.Matrix.MatrixUtils.compare(matrix3, matrix67, 35.0d);
        boolean boolean70 = com.operations.Matrix.MatrixUtils.isSquare(matrix3);
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean72 = com.operations.Matrix.MatrixUtils.compare(matrix0, matrix3, 145.11374848717816d);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot invoke \"com.operations.Matrix.Matrix.getRows()\" because \"a\" is null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(matrix6);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertArrayEquals(doubleArray9, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertArrayEquals(doubleArray12, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 2 + "'", int15 == 2);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 2 + "'", int16 == 2);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 2 + "'", int17 == 2);
        org.junit.Assert.assertNotNull(matrixArray18);
        org.junit.Assert.assertNotNull(matrix19);
        org.junit.Assert.assertNotNull(matrix21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertArrayEquals(doubleArray26, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertArrayEquals(doubleArray29, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertArrayEquals(doubleArray38, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertArrayEquals(doubleArray41, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertNotNull(matrix46);
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertNotNull(matrix49);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(matrix52);
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertArrayEquals(doubleArray55, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray58);
        org.junit.Assert.assertArrayEquals(doubleArray58, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray59);
        org.junit.Assert.assertNotNull(matrixArray62);
        org.junit.Assert.assertNotNull(matrix65);
        org.junit.Assert.assertNotNull(matrix66);
        org.junit.Assert.assertNotNull(matrix67);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
    }

    @Test
    public void test1940() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1940");
        // The following exception was thrown during execution in test generation
        try {
            com.operations.Matrix.Matrix matrix5 = com.operations.Matrix.MatrixUtils.generateRandomMatrix((int) (short) 0, 0, (int) (byte) -1, (int) (short) 10, (long) (byte) 10);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
    }

    @Test
    public void test1941() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1941");
        double[] doubleArray2 = new double[] { 10, 'a' };
        double[] doubleArray5 = new double[] { 10, 'a' };
        double[][] doubleArray6 = new double[][] { doubleArray2, doubleArray5 };
        com.operations.Matrix.Matrix matrix7 = new com.operations.Matrix.Matrix(doubleArray6);
        com.operations.Matrix.Matrix matrix8 = com.operations.Matrix.MatrixOperations.transpose(matrix7);
        com.operations.Matrix.Matrix matrix11 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0L, (double) (byte) 10);
        int int12 = matrix11.getRows();
        com.operations.Matrix.Matrix matrix18 = com.operations.Matrix.MatrixUtils.generateRandomMatrix(100, (int) (byte) 1, (int) '#', (int) '#', 1L);
        boolean boolean20 = com.operations.Matrix.MatrixUtils.compare(matrix11, matrix18, (double) 1.0f);
        com.operations.Matrix.Matrix matrix22 = com.operations.Matrix.MatrixOperations.scalarMultiply(matrix11, (double) 1L);
        matrix11.print();
        com.operations.Matrix.Matrix matrix24 = com.operations.Matrix.MatrixOperations.multiply(matrix8, matrix11);
        com.operations.Matrix.Matrix matrix25 = null;
        // The following exception was thrown during execution in test generation
        try {
            com.operations.Matrix.Matrix matrix26 = com.operations.Matrix.MatrixOperations.multiply(matrix8, matrix25);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertArrayEquals(doubleArray2, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertArrayEquals(doubleArray5, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertNotNull(matrix8);
        org.junit.Assert.assertNotNull(matrix11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 2 + "'", int12 == 2);
        org.junit.Assert.assertNotNull(matrix18);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(matrix22);
        org.junit.Assert.assertNotNull(matrix24);
    }

    @Test
    public void test1942() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1942");
        com.operations.Matrix.Matrix matrix2 = new com.operations.Matrix.Matrix((int) (short) 100, 1);
        com.operations.Matrix.Matrix matrix3 = com.operations.Matrix.MatrixOperations.transpose(matrix2);
        com.operations.Matrix.Matrix matrix5 = com.operations.Matrix.MatrixOperations.scalarMultiply(matrix2, 137.90576492663388d);
        com.operations.Matrix.Matrix matrix8 = com.operations.Matrix.MatrixTransformations.project2D((double) (byte) 100, 32.0d);
        boolean boolean9 = com.operations.Matrix.MatrixUtils.isSymmetric(matrix8);
        matrix8.print();
        com.operations.Matrix.Matrix matrix11 = com.operations.Matrix.MatrixOperations.transpose(matrix8);
        com.operations.Matrix.Matrix matrix12 = com.operations.Matrix.MatrixDecompositions.choleskyDecomposition(matrix8);
        com.operations.Matrix.Matrix[] matrixArray13 = com.operations.Matrix.MatrixDecompositions.luDecomposition(matrix8);
        com.operations.Matrix.Matrix matrix15 = com.operations.Matrix.MatrixTransformations.rotate2D((double) (short) 100);
        double[] doubleArray18 = new double[] { 137.90576492663388d, (byte) -1 };
        double[] doubleArray19 = com.operations.Matrix.MatrixSolver.solveGaussian(matrix15, doubleArray18);
        com.operations.Matrix.Matrix matrix22 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0L, (double) (byte) 10);
        double[] doubleArray25 = new double[] { 10, 'a' };
        double[] doubleArray28 = new double[] { 10, 'a' };
        double[][] doubleArray29 = new double[][] { doubleArray25, doubleArray28 };
        com.operations.Matrix.Matrix matrix30 = new com.operations.Matrix.Matrix(doubleArray29);
        int int31 = matrix30.getCols();
        int int32 = matrix30.getCols();
        int int33 = matrix30.getCols();
        com.operations.Matrix.Matrix[] matrixArray34 = com.operations.Matrix.MatrixDecompositions.luDecomposition(matrix30);
        com.operations.Matrix.Matrix matrix35 = com.operations.Matrix.MatrixOperations.multiply(matrix22, matrix30);
        boolean boolean37 = com.operations.Matrix.MatrixUtils.compare(matrix15, matrix22, (double) (-1L));
        boolean boolean38 = com.operations.Matrix.MatrixUtils.isSymmetric(matrix15);
        int int39 = matrix15.getCols();
        com.operations.Matrix.Matrix[] matrixArray40 = com.operations.Matrix.MatrixDecompositions.luDecomposition(matrix15);
        double double41 = com.operations.Matrix.MatrixUtils.frobeniusNorm(matrix15);
        com.operations.Matrix.Matrix matrix43 = com.operations.Matrix.MatrixTransformations.rotate2D(100.0d);
        int int44 = matrix43.getCols();
        matrix43.print();
        com.operations.Matrix.Matrix matrix47 = com.operations.Matrix.MatrixOperations.scalarMultiply(matrix43, (double) (byte) 1);
        com.operations.Matrix.Matrix matrix49 = com.operations.Matrix.MatrixTransformations.rotate2D(350.0d);
        com.operations.Matrix.Matrix matrix51 = com.operations.Matrix.MatrixTransformations.rotate2D((double) (short) 100);
        double[] doubleArray54 = new double[] { 137.90576492663388d, (byte) -1 };
        double[] doubleArray55 = com.operations.Matrix.MatrixSolver.solveGaussian(matrix51, doubleArray54);
        double[] doubleArray56 = com.operations.Matrix.MatrixSolver.solveGaussian(matrix49, doubleArray55);
        double[] doubleArray57 = com.operations.Matrix.MatrixSolver.solveGaussian(matrix43, doubleArray55);
        double[] doubleArray58 = com.operations.Matrix.MatrixSolver.solveGaussian(matrix15, doubleArray57);
        boolean boolean59 = com.operations.Matrix.MatrixUtils.isSymmetric(matrix15);
        double[] doubleArray62 = new double[] { 10, 'a' };
        double[] doubleArray65 = new double[] { 10, 'a' };
        double[][] doubleArray66 = new double[][] { doubleArray62, doubleArray65 };
        com.operations.Matrix.Matrix matrix67 = new com.operations.Matrix.Matrix(doubleArray66);
        com.operations.Matrix.Matrix matrix68 = new com.operations.Matrix.Matrix(doubleArray66);
        com.operations.Matrix.Matrix matrix70 = com.operations.Matrix.MatrixTransformations.rotate2D((double) (short) 100);
        double[] doubleArray73 = new double[] { 137.90576492663388d, (byte) -1 };
        double[] doubleArray74 = com.operations.Matrix.MatrixSolver.solveGaussian(matrix70, doubleArray73);
        com.operations.Matrix.Matrix matrix75 = com.operations.Matrix.MatrixOperations.add(matrix68, matrix70);
        com.operations.Matrix.Matrix matrix76 = com.operations.Matrix.MatrixOperations.transpose(matrix70);
        double double77 = com.operations.Matrix.MatrixUtils.frobeniusNorm(matrix76);
        double[][] doubleArray78 = matrix76.getData();
        com.operations.Matrix.Matrix matrix80 = com.operations.Matrix.MatrixOperations.scalarMultiply(matrix76, (double) 'a');
        com.operations.Matrix.Matrix matrix82 = com.operations.Matrix.MatrixTransformations.rotate2D(350.0d);
        com.operations.Matrix.Matrix matrix84 = com.operations.Matrix.MatrixTransformations.rotate2D((double) (short) 100);
        double[] doubleArray87 = new double[] { 137.90576492663388d, (byte) -1 };
        double[] doubleArray88 = com.operations.Matrix.MatrixSolver.solveGaussian(matrix84, doubleArray87);
        double[] doubleArray89 = com.operations.Matrix.MatrixSolver.solveGaussian(matrix82, doubleArray88);
        double[] doubleArray90 = com.operations.Matrix.MatrixSolver.solveGaussian(matrix76, doubleArray88);
        double[] doubleArray91 = com.operations.Matrix.MatrixSolver.solveGaussian(matrix15, doubleArray90);
        double[] doubleArray92 = com.operations.Matrix.MatrixSolver.solveGaussian(matrix8, doubleArray91);
        // The following exception was thrown during execution in test generation
        try {
            double[] doubleArray93 = com.operations.Matrix.MatrixSolver.solveGaussian(matrix2, doubleArray92);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Matrix must be square to solve equations.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(matrix3);
        org.junit.Assert.assertNotNull(matrix5);
        org.junit.Assert.assertNotNull(matrix8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertNotNull(matrix11);
        org.junit.Assert.assertNotNull(matrix12);
        org.junit.Assert.assertNotNull(matrixArray13);
        org.junit.Assert.assertNotNull(matrix15);
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertArrayEquals(doubleArray18, new double[] { 137.90576492663388d, (-1.0d) }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertArrayEquals(doubleArray19, new double[] { (-24.931892522286255d), (-135.63701830716116d) }, 1.0E-15);
        org.junit.Assert.assertNotNull(matrix22);
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertArrayEquals(doubleArray25, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertArrayEquals(doubleArray28, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 2 + "'", int31 == 2);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 2 + "'", int32 == 2);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 2 + "'", int33 == 2);
        org.junit.Assert.assertNotNull(matrixArray34);
        org.junit.Assert.assertNotNull(matrix35);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 2 + "'", int39 == 2);
        org.junit.Assert.assertNotNull(matrixArray40);
        org.junit.Assert.assertTrue("'" + double41 + "' != '" + 1.414213562373095d + "'", double41 == 1.414213562373095d);
        org.junit.Assert.assertNotNull(matrix43);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 2 + "'", int44 == 2);
        org.junit.Assert.assertNotNull(matrix47);
        org.junit.Assert.assertNotNull(matrix49);
        org.junit.Assert.assertNotNull(matrix51);
        org.junit.Assert.assertNotNull(doubleArray54);
        org.junit.Assert.assertArrayEquals(doubleArray54, new double[] { 137.90576492663388d, (-1.0d) }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertArrayEquals(doubleArray55, new double[] { (-24.931892522286255d), (-135.63701830716116d) }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray56);
        org.junit.Assert.assertArrayEquals(doubleArray56, new double[] { (-0.9999999999999858d), (-137.90576492663388d) }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray57);
        org.junit.Assert.assertArrayEquals(doubleArray57, new double[] { (-129.24700952206834d), 48.1062421064292d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray58);
        org.junit.Assert.assertArrayEquals(doubleArray58, new double[] { 69.81890786710137d, 118.92989575479001d }, 1.0E-15);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNotNull(doubleArray62);
        org.junit.Assert.assertArrayEquals(doubleArray62, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray65);
        org.junit.Assert.assertArrayEquals(doubleArray65, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray66);
        org.junit.Assert.assertNotNull(matrix70);
        org.junit.Assert.assertNotNull(doubleArray73);
        org.junit.Assert.assertArrayEquals(doubleArray73, new double[] { 137.90576492663388d, (-1.0d) }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray74);
        org.junit.Assert.assertArrayEquals(doubleArray74, new double[] { (-24.931892522286255d), (-135.63701830716116d) }, 1.0E-15);
        org.junit.Assert.assertNotNull(matrix75);
        org.junit.Assert.assertNotNull(matrix76);
        org.junit.Assert.assertTrue("'" + double77 + "' != '" + 1.414213562373095d + "'", double77 == 1.414213562373095d);
        org.junit.Assert.assertNotNull(doubleArray78);
        org.junit.Assert.assertNotNull(matrix80);
        org.junit.Assert.assertNotNull(matrix82);
        org.junit.Assert.assertNotNull(matrix84);
        org.junit.Assert.assertNotNull(doubleArray87);
        org.junit.Assert.assertArrayEquals(doubleArray87, new double[] { 137.90576492663388d, (-1.0d) }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray88);
        org.junit.Assert.assertArrayEquals(doubleArray88, new double[] { (-24.931892522286255d), (-135.63701830716116d) }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray89);
        org.junit.Assert.assertArrayEquals(doubleArray89, new double[] { (-0.9999999999999858d), (-137.90576492663388d) }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray90);
        org.junit.Assert.assertArrayEquals(doubleArray90, new double[] { 137.90576492663388d, (-1.0000000000000022d) }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray91);
        org.junit.Assert.assertArrayEquals(doubleArray91, new double[] { (-24.931892522286258d), (-135.63701830716116d) }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray92);
        org.junit.Assert.assertArrayEquals(doubleArray92, new double[] { (-0.2493189252228626d), (-4.238656822098786d) }, 1.0E-15);
    }

    @Test
    public void test1943() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1943");
        com.operations.Matrix.Matrix matrix5 = com.operations.Matrix.MatrixUtils.generateRandomMatrix((int) (short) 10, 100, 32, 2, (long) (short) -1);
        // The following exception was thrown during execution in test generation
        try {
            matrix5.setValue(35, 0, 14.142135623730951d);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: Index 35 out of bounds for length 10");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(matrix5);
    }

    @Test
    public void test1944() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1944");
        com.operations.Matrix.Matrix matrix2 = new com.operations.Matrix.Matrix(32, 0);
        // The following exception was thrown during execution in test generation
        try {
            com.operations.Matrix.Matrix[] matrixArray3 = com.operations.Matrix.MatrixDecompositions.luDecomposition(matrix2);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Matrix must be square for LU decomposition.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test1945() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1945");
        com.operations.Matrix.Matrix matrix2 = com.operations.Matrix.MatrixTransformations.scale2D((double) (byte) 10, (double) 10);
        double[] doubleArray5 = new double[] { 10, 'a' };
        double[] doubleArray8 = new double[] { 10, 'a' };
        double[][] doubleArray9 = new double[][] { doubleArray5, doubleArray8 };
        com.operations.Matrix.Matrix matrix10 = new com.operations.Matrix.Matrix(doubleArray9);
        com.operations.Matrix.Matrix matrix11 = new com.operations.Matrix.Matrix(doubleArray9);
        boolean boolean12 = com.operations.Matrix.MatrixUtils.isSquare(matrix11);
        double[] doubleArray15 = new double[] { 10, 'a' };
        double[] doubleArray18 = new double[] { 10, 'a' };
        double[][] doubleArray19 = new double[][] { doubleArray15, doubleArray18 };
        com.operations.Matrix.Matrix matrix20 = new com.operations.Matrix.Matrix(doubleArray19);
        int int21 = matrix20.getCols();
        int int22 = matrix20.getCols();
        matrix20.print();
        double[] doubleArray26 = new double[] { 10, 'a' };
        double[] doubleArray29 = new double[] { 10, 'a' };
        double[][] doubleArray30 = new double[][] { doubleArray26, doubleArray29 };
        com.operations.Matrix.Matrix matrix31 = new com.operations.Matrix.Matrix(doubleArray30);
        boolean boolean33 = com.operations.Matrix.MatrixUtils.compare(matrix20, matrix31, (double) (-1));
        com.operations.Matrix.Matrix matrix34 = com.operations.Matrix.MatrixOperations.subtract(matrix11, matrix31);
        com.operations.Matrix.Matrix[] matrixArray35 = com.operations.Matrix.MatrixDecompositions.luDecomposition(matrix34);
        double[][] doubleArray36 = matrix34.getData();
        com.operations.Matrix.Matrix matrix37 = new com.operations.Matrix.Matrix(doubleArray36);
        com.operations.Matrix.Matrix matrix38 = com.operations.Matrix.MatrixOperations.multiply(matrix2, matrix37);
        boolean boolean39 = com.operations.Matrix.MatrixUtils.isSymmetric(matrix2);
        com.operations.Matrix.Matrix matrix41 = com.operations.Matrix.MatrixTransformations.rotate2D(350.0d);
        com.operations.Matrix.Matrix matrix42 = com.operations.Matrix.MatrixDecompositions.choleskyDecomposition(matrix41);
        int int43 = matrix41.getRows();
        com.operations.Matrix.Matrix matrix44 = com.operations.Matrix.MatrixOperations.subtract(matrix2, matrix41);
        double[] doubleArray47 = new double[] { 10, 'a' };
        double[] doubleArray50 = new double[] { 10, 'a' };
        double[][] doubleArray51 = new double[][] { doubleArray47, doubleArray50 };
        com.operations.Matrix.Matrix matrix52 = new com.operations.Matrix.Matrix(doubleArray51);
        int int53 = matrix52.getCols();
        int int54 = matrix52.getCols();
        boolean boolean55 = com.operations.Matrix.MatrixUtils.isSquare(matrix52);
        com.operations.Matrix.Matrix matrix56 = com.operations.Matrix.MatrixDecompositions.choleskyDecomposition(matrix52);
        com.operations.Matrix.Matrix matrix59 = com.operations.Matrix.MatrixTransformations.project2D(0.0d, (double) 0);
        com.operations.Matrix.Matrix matrix60 = com.operations.Matrix.MatrixOperations.subtract(matrix56, matrix59);
        com.operations.Matrix.Matrix matrix61 = com.operations.Matrix.MatrixOperations.transpose(matrix59);
        com.operations.Matrix.Matrix matrix62 = com.operations.Matrix.MatrixOperations.subtract(matrix2, matrix61);
        com.operations.Matrix.Matrix matrix63 = com.operations.Matrix.MatrixDecompositions.choleskyDecomposition(matrix2);
        double[][] doubleArray64 = matrix63.getData();
        org.junit.Assert.assertNotNull(matrix2);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertArrayEquals(doubleArray5, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertArrayEquals(doubleArray8, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertArrayEquals(doubleArray15, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertArrayEquals(doubleArray18, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 2 + "'", int21 == 2);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 2 + "'", int22 == 2);
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertArrayEquals(doubleArray26, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertArrayEquals(doubleArray29, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(matrix34);
        org.junit.Assert.assertNotNull(matrixArray35);
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertNotNull(matrix38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertNotNull(matrix41);
        org.junit.Assert.assertNotNull(matrix42);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 2 + "'", int43 == 2);
        org.junit.Assert.assertNotNull(matrix44);
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertArrayEquals(doubleArray47, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertArrayEquals(doubleArray50, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 2 + "'", int53 == 2);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 2 + "'", int54 == 2);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + true + "'", boolean55 == true);
        org.junit.Assert.assertNotNull(matrix56);
        org.junit.Assert.assertNotNull(matrix59);
        org.junit.Assert.assertNotNull(matrix60);
        org.junit.Assert.assertNotNull(matrix61);
        org.junit.Assert.assertNotNull(matrix62);
        org.junit.Assert.assertNotNull(matrix63);
        org.junit.Assert.assertNotNull(doubleArray64);
    }

    @Test
    public void test1946() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1946");
        com.operations.Matrix.Matrix matrix1 = com.operations.Matrix.MatrixTransformations.rotate2D((double) 1.0f);
        com.operations.Matrix.Matrix matrix4 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0L, (double) (byte) 10);
        int int5 = matrix4.getRows();
        com.operations.Matrix.Matrix matrix7 = com.operations.Matrix.MatrixOperations.scalarMultiply(matrix4, (double) 2);
        double double8 = com.operations.Matrix.MatrixUtils.frobeniusNorm(matrix4);
        com.operations.Matrix.Matrix matrix11 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0L, (double) (byte) 10);
        int int12 = matrix11.getRows();
        com.operations.Matrix.Matrix matrix14 = com.operations.Matrix.MatrixOperations.scalarMultiply(matrix11, (double) 2);
        com.operations.Matrix.Matrix matrix15 = com.operations.Matrix.MatrixOperations.subtract(matrix4, matrix14);
        com.operations.Matrix.Matrix matrix16 = com.operations.Matrix.MatrixOperations.add(matrix1, matrix14);
        com.operations.Matrix.Matrix[] matrixArray17 = com.operations.Matrix.MatrixDecompositions.luDecomposition(matrix14);
        boolean boolean18 = com.operations.Matrix.MatrixUtils.isSquare(matrix14);
        com.operations.Matrix.Matrix matrix19 = com.operations.Matrix.MatrixOperations.transpose(matrix14);
        double[][] doubleArray20 = matrix14.getData();
        com.operations.Matrix.Matrix matrix21 = new com.operations.Matrix.Matrix(doubleArray20);
        org.junit.Assert.assertNotNull(matrix1);
        org.junit.Assert.assertNotNull(matrix4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 2 + "'", int5 == 2);
        org.junit.Assert.assertNotNull(matrix7);
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 10.0d + "'", double8 == 10.0d);
        org.junit.Assert.assertNotNull(matrix11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 2 + "'", int12 == 2);
        org.junit.Assert.assertNotNull(matrix14);
        org.junit.Assert.assertNotNull(matrix15);
        org.junit.Assert.assertNotNull(matrix16);
        org.junit.Assert.assertNotNull(matrixArray17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(matrix19);
        org.junit.Assert.assertNotNull(doubleArray20);
    }

    @Test
    public void test1947() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1947");
        com.operations.Matrix.Matrix matrix4 = com.operations.Matrix.MatrixUtils.generateRandomMatrix(35, (int) ' ', 100, (-1));
        double double5 = com.operations.Matrix.MatrixUtils.frobeniusNorm(matrix4);
        org.junit.Assert.assertNotNull(matrix4);
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 1954.3118651623454d + "'", double5 == 1954.3118651623454d);
    }

    @Test
    public void test1948() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1948");
        com.operations.Matrix.Matrix matrix2 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0L, (double) (byte) 10);
        int int3 = matrix2.getRows();
        com.operations.Matrix.Matrix matrix9 = com.operations.Matrix.MatrixUtils.generateRandomMatrix(100, (int) (byte) 1, (int) '#', (int) '#', 1L);
        boolean boolean11 = com.operations.Matrix.MatrixUtils.compare(matrix2, matrix9, (double) 1.0f);
        com.operations.Matrix.Matrix matrix13 = com.operations.Matrix.MatrixOperations.scalarMultiply(matrix2, (double) 1L);
        // The following exception was thrown during execution in test generation
        try {
            double double16 = matrix13.getValue(100, 0);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(matrix2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 2 + "'", int3 == 2);
        org.junit.Assert.assertNotNull(matrix9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(matrix13);
    }

    @Test
    public void test1949() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1949");
        com.operations.Matrix.Matrix matrix2 = com.operations.Matrix.MatrixTransformations.project2D(0.0d, 1.7320508075688774d);
        org.junit.Assert.assertNotNull(matrix2);
    }

    @Test
    public void test1950() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1950");
        com.operations.Matrix.Matrix matrix2 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0L, (double) (byte) 10);
        double[] doubleArray5 = new double[] { 10, 'a' };
        double[] doubleArray8 = new double[] { 10, 'a' };
        double[][] doubleArray9 = new double[][] { doubleArray5, doubleArray8 };
        com.operations.Matrix.Matrix matrix10 = new com.operations.Matrix.Matrix(doubleArray9);
        int int11 = matrix10.getCols();
        int int12 = matrix10.getCols();
        int int13 = matrix10.getCols();
        com.operations.Matrix.Matrix[] matrixArray14 = com.operations.Matrix.MatrixDecompositions.luDecomposition(matrix10);
        com.operations.Matrix.Matrix matrix15 = com.operations.Matrix.MatrixOperations.multiply(matrix2, matrix10);
        com.operations.Matrix.Matrix matrix17 = com.operations.Matrix.MatrixTransformations.rotate2D((double) (short) 100);
        boolean boolean19 = com.operations.Matrix.MatrixUtils.compare(matrix10, matrix17, (double) (byte) 0);
        double[] doubleArray22 = new double[] { 10, 'a' };
        double[] doubleArray25 = new double[] { 10, 'a' };
        double[][] doubleArray26 = new double[][] { doubleArray22, doubleArray25 };
        com.operations.Matrix.Matrix matrix27 = new com.operations.Matrix.Matrix(doubleArray26);
        com.operations.Matrix.Matrix matrix28 = new com.operations.Matrix.Matrix(doubleArray26);
        com.operations.Matrix.Matrix matrix29 = new com.operations.Matrix.Matrix(doubleArray26);
        boolean boolean31 = com.operations.Matrix.MatrixUtils.compare(matrix10, matrix29, (double) (-1));
        double[] doubleArray34 = new double[] { 10, 'a' };
        double[] doubleArray37 = new double[] { 10, 'a' };
        double[][] doubleArray38 = new double[][] { doubleArray34, doubleArray37 };
        com.operations.Matrix.Matrix matrix39 = new com.operations.Matrix.Matrix(doubleArray38);
        com.operations.Matrix.Matrix matrix40 = new com.operations.Matrix.Matrix(doubleArray38);
        boolean boolean41 = com.operations.Matrix.MatrixUtils.isSquare(matrix40);
        com.operations.Matrix.Matrix matrix42 = com.operations.Matrix.MatrixOperations.multiply(matrix29, matrix40);
        com.operations.Matrix.Matrix matrix45 = com.operations.Matrix.MatrixTransformations.project2D((double) ' ', 0.0d);
        double[] doubleArray48 = new double[] { 10, 'a' };
        double[] doubleArray51 = new double[] { 10, 'a' };
        double[][] doubleArray52 = new double[][] { doubleArray48, doubleArray51 };
        com.operations.Matrix.Matrix matrix53 = new com.operations.Matrix.Matrix(doubleArray52);
        int int54 = matrix53.getCols();
        boolean boolean55 = com.operations.Matrix.MatrixUtils.isSquare(matrix53);
        com.operations.Matrix.Matrix matrix56 = com.operations.Matrix.MatrixOperations.transpose(matrix53);
        int int57 = matrix56.getRows();
        com.operations.Matrix.Matrix matrix60 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0L, (double) (byte) 10);
        double[] doubleArray63 = new double[] { 10, 'a' };
        double[] doubleArray66 = new double[] { 10, 'a' };
        double[][] doubleArray67 = new double[][] { doubleArray63, doubleArray66 };
        com.operations.Matrix.Matrix matrix68 = new com.operations.Matrix.Matrix(doubleArray67);
        int int69 = matrix68.getCols();
        int int70 = matrix68.getCols();
        int int71 = matrix68.getCols();
        com.operations.Matrix.Matrix[] matrixArray72 = com.operations.Matrix.MatrixDecompositions.luDecomposition(matrix68);
        com.operations.Matrix.Matrix matrix73 = com.operations.Matrix.MatrixOperations.multiply(matrix60, matrix68);
        com.operations.Matrix.Matrix matrix75 = com.operations.Matrix.MatrixTransformations.rotate2D((double) (short) 100);
        boolean boolean77 = com.operations.Matrix.MatrixUtils.compare(matrix68, matrix75, (double) (byte) 0);
        com.operations.Matrix.Matrix matrix78 = com.operations.Matrix.MatrixOperations.multiply(matrix56, matrix68);
        com.operations.Matrix.Matrix matrix79 = com.operations.Matrix.MatrixOperations.add(matrix45, matrix68);
        com.operations.Matrix.Matrix matrix80 = com.operations.Matrix.MatrixOperations.transpose(matrix45);
        com.operations.Matrix.Matrix matrix83 = com.operations.Matrix.MatrixTransformations.scale2D((double) (byte) 100, 350.0d);
        double double84 = com.operations.Matrix.MatrixUtils.frobeniusNorm(matrix83);
        int int85 = matrix83.getCols();
        com.operations.Matrix.Matrix matrix86 = com.operations.Matrix.MatrixOperations.multiply(matrix45, matrix83);
        int int87 = matrix45.getRows();
        com.operations.Matrix.Matrix matrix88 = com.operations.Matrix.MatrixOperations.multiply(matrix42, matrix45);
        int int89 = matrix45.getCols();
        double[][] doubleArray90 = matrix45.getData();
        com.operations.Matrix.Matrix matrix91 = new com.operations.Matrix.Matrix(doubleArray90);
        matrix91.print();
        org.junit.Assert.assertNotNull(matrix2);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertArrayEquals(doubleArray5, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertArrayEquals(doubleArray8, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 2 + "'", int11 == 2);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 2 + "'", int12 == 2);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 2 + "'", int13 == 2);
        org.junit.Assert.assertNotNull(matrixArray14);
        org.junit.Assert.assertNotNull(matrix15);
        org.junit.Assert.assertNotNull(matrix17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertArrayEquals(doubleArray22, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertArrayEquals(doubleArray25, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertArrayEquals(doubleArray34, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertArrayEquals(doubleArray37, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertNotNull(matrix42);
        org.junit.Assert.assertNotNull(matrix45);
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertArrayEquals(doubleArray48, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertArrayEquals(doubleArray51, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 2 + "'", int54 == 2);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + true + "'", boolean55 == true);
        org.junit.Assert.assertNotNull(matrix56);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 2 + "'", int57 == 2);
        org.junit.Assert.assertNotNull(matrix60);
        org.junit.Assert.assertNotNull(doubleArray63);
        org.junit.Assert.assertArrayEquals(doubleArray63, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray66);
        org.junit.Assert.assertArrayEquals(doubleArray66, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray67);
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 2 + "'", int69 == 2);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 2 + "'", int70 == 2);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 2 + "'", int71 == 2);
        org.junit.Assert.assertNotNull(matrixArray72);
        org.junit.Assert.assertNotNull(matrix73);
        org.junit.Assert.assertNotNull(matrix75);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertNotNull(matrix78);
        org.junit.Assert.assertNotNull(matrix79);
        org.junit.Assert.assertNotNull(matrix80);
        org.junit.Assert.assertNotNull(matrix83);
        org.junit.Assert.assertTrue("'" + double84 + "' != '" + 364.0054944640259d + "'", double84 == 364.0054944640259d);
        org.junit.Assert.assertTrue("'" + int85 + "' != '" + 2 + "'", int85 == 2);
        org.junit.Assert.assertNotNull(matrix86);
        org.junit.Assert.assertTrue("'" + int87 + "' != '" + 2 + "'", int87 == 2);
        org.junit.Assert.assertNotNull(matrix88);
        org.junit.Assert.assertTrue("'" + int89 + "' != '" + 2 + "'", int89 == 2);
        org.junit.Assert.assertNotNull(doubleArray90);
    }

    @Test
    public void test1951() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1951");
        com.operations.Matrix.Matrix matrix1 = com.operations.Matrix.MatrixTransformations.rotate2D(100.0d);
        int int2 = matrix1.getCols();
        matrix1.print();
        com.operations.Matrix.Matrix matrix5 = com.operations.Matrix.MatrixOperations.scalarMultiply(matrix1, (double) (byte) 1);
        com.operations.Matrix.Matrix[] matrixArray6 = com.operations.Matrix.MatrixDecompositions.luDecomposition(matrix1);
        com.operations.Matrix.Matrix matrix7 = com.operations.Matrix.MatrixOperations.transpose(matrix1);
        com.operations.Matrix.Matrix matrix9 = com.operations.Matrix.MatrixTransformations.rotate2D((double) (byte) 100);
        double double10 = com.operations.Matrix.MatrixUtils.frobeniusNorm(matrix9);
        com.operations.Matrix.Matrix matrix13 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0.0f, (double) (-1));
        com.operations.Matrix.Matrix matrix16 = com.operations.Matrix.MatrixTransformations.scale2D(146.4308710620817d, (double) 10L);
        com.operations.Matrix.Matrix matrix17 = com.operations.Matrix.MatrixOperations.multiply(matrix13, matrix16);
        com.operations.Matrix.Matrix matrix19 = com.operations.Matrix.MatrixTransformations.rotate2D((double) 1.0f);
        com.operations.Matrix.Matrix matrix22 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0L, (double) (byte) 10);
        int int23 = matrix22.getRows();
        com.operations.Matrix.Matrix matrix25 = com.operations.Matrix.MatrixOperations.scalarMultiply(matrix22, (double) 2);
        double double26 = com.operations.Matrix.MatrixUtils.frobeniusNorm(matrix22);
        com.operations.Matrix.Matrix matrix29 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0L, (double) (byte) 10);
        int int30 = matrix29.getRows();
        com.operations.Matrix.Matrix matrix32 = com.operations.Matrix.MatrixOperations.scalarMultiply(matrix29, (double) 2);
        com.operations.Matrix.Matrix matrix33 = com.operations.Matrix.MatrixOperations.subtract(matrix22, matrix32);
        com.operations.Matrix.Matrix matrix34 = com.operations.Matrix.MatrixOperations.add(matrix19, matrix32);
        matrix19.print();
        double[] doubleArray38 = new double[] { 10, 'a' };
        double[] doubleArray41 = new double[] { 10, 'a' };
        double[][] doubleArray42 = new double[][] { doubleArray38, doubleArray41 };
        com.operations.Matrix.Matrix matrix43 = new com.operations.Matrix.Matrix(doubleArray42);
        com.operations.Matrix.Matrix matrix44 = com.operations.Matrix.MatrixOperations.transpose(matrix43);
        com.operations.Matrix.Matrix matrix47 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0L, (double) (byte) 10);
        int int48 = matrix47.getRows();
        com.operations.Matrix.Matrix matrix54 = com.operations.Matrix.MatrixUtils.generateRandomMatrix(100, (int) (byte) 1, (int) '#', (int) '#', 1L);
        boolean boolean56 = com.operations.Matrix.MatrixUtils.compare(matrix47, matrix54, (double) 1.0f);
        com.operations.Matrix.Matrix matrix58 = com.operations.Matrix.MatrixOperations.scalarMultiply(matrix47, (double) 1L);
        matrix47.print();
        com.operations.Matrix.Matrix matrix60 = com.operations.Matrix.MatrixOperations.multiply(matrix44, matrix47);
        com.operations.Matrix.Matrix matrix61 = com.operations.Matrix.MatrixOperations.multiply(matrix19, matrix47);
        com.operations.Matrix.Matrix matrix62 = com.operations.Matrix.MatrixOperations.subtract(matrix13, matrix47);
        com.operations.Matrix.Matrix matrix63 = com.operations.Matrix.MatrixOperations.subtract(matrix9, matrix13);
        com.operations.Matrix.Matrix matrix64 = com.operations.Matrix.MatrixOperations.subtract(matrix1, matrix9);
        java.lang.Class<?> wildcardClass65 = matrix9.getClass();
        org.junit.Assert.assertNotNull(matrix1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 2 + "'", int2 == 2);
        org.junit.Assert.assertNotNull(matrix5);
        org.junit.Assert.assertNotNull(matrixArray6);
        org.junit.Assert.assertNotNull(matrix7);
        org.junit.Assert.assertNotNull(matrix9);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 1.414213562373095d + "'", double10 == 1.414213562373095d);
        org.junit.Assert.assertNotNull(matrix13);
        org.junit.Assert.assertNotNull(matrix16);
        org.junit.Assert.assertNotNull(matrix17);
        org.junit.Assert.assertNotNull(matrix19);
        org.junit.Assert.assertNotNull(matrix22);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 2 + "'", int23 == 2);
        org.junit.Assert.assertNotNull(matrix25);
        org.junit.Assert.assertTrue("'" + double26 + "' != '" + 10.0d + "'", double26 == 10.0d);
        org.junit.Assert.assertNotNull(matrix29);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 2 + "'", int30 == 2);
        org.junit.Assert.assertNotNull(matrix32);
        org.junit.Assert.assertNotNull(matrix33);
        org.junit.Assert.assertNotNull(matrix34);
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertArrayEquals(doubleArray38, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertArrayEquals(doubleArray41, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertNotNull(matrix44);
        org.junit.Assert.assertNotNull(matrix47);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 2 + "'", int48 == 2);
        org.junit.Assert.assertNotNull(matrix54);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(matrix58);
        org.junit.Assert.assertNotNull(matrix60);
        org.junit.Assert.assertNotNull(matrix61);
        org.junit.Assert.assertNotNull(matrix62);
        org.junit.Assert.assertNotNull(matrix63);
        org.junit.Assert.assertNotNull(matrix64);
        org.junit.Assert.assertNotNull(wildcardClass65);
    }

    @Test
    public void test1952() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1952");
        com.operations.Matrix.Matrix matrix2 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0L, (double) (byte) 10);
        double[] doubleArray5 = new double[] { 10, 'a' };
        double[] doubleArray8 = new double[] { 10, 'a' };
        double[][] doubleArray9 = new double[][] { doubleArray5, doubleArray8 };
        com.operations.Matrix.Matrix matrix10 = new com.operations.Matrix.Matrix(doubleArray9);
        int int11 = matrix10.getCols();
        int int12 = matrix10.getCols();
        int int13 = matrix10.getCols();
        com.operations.Matrix.Matrix[] matrixArray14 = com.operations.Matrix.MatrixDecompositions.luDecomposition(matrix10);
        com.operations.Matrix.Matrix matrix15 = com.operations.Matrix.MatrixOperations.multiply(matrix2, matrix10);
        com.operations.Matrix.Matrix matrix17 = com.operations.Matrix.MatrixTransformations.rotate2D((double) (short) 100);
        boolean boolean19 = com.operations.Matrix.MatrixUtils.compare(matrix10, matrix17, (double) (byte) 0);
        com.operations.Matrix.Matrix[] matrixArray20 = com.operations.Matrix.MatrixDecompositions.luDecomposition(matrix10);
        com.operations.Matrix.Matrix matrix21 = com.operations.Matrix.MatrixOperations.transpose(matrix10);
        com.operations.Matrix.Matrix matrix24 = com.operations.Matrix.MatrixTransformations.scale2D((double) 1.0f, (double) 1);
        com.operations.Matrix.Matrix matrix26 = com.operations.Matrix.MatrixTransformations.rotate2D((double) 1.0f);
        com.operations.Matrix.Matrix matrix29 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0L, (double) (byte) 10);
        int int30 = matrix29.getRows();
        com.operations.Matrix.Matrix matrix32 = com.operations.Matrix.MatrixOperations.scalarMultiply(matrix29, (double) 2);
        double double33 = com.operations.Matrix.MatrixUtils.frobeniusNorm(matrix29);
        com.operations.Matrix.Matrix matrix36 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0L, (double) (byte) 10);
        int int37 = matrix36.getRows();
        com.operations.Matrix.Matrix matrix39 = com.operations.Matrix.MatrixOperations.scalarMultiply(matrix36, (double) 2);
        com.operations.Matrix.Matrix matrix40 = com.operations.Matrix.MatrixOperations.subtract(matrix29, matrix39);
        com.operations.Matrix.Matrix matrix41 = com.operations.Matrix.MatrixOperations.add(matrix26, matrix39);
        boolean boolean43 = com.operations.Matrix.MatrixUtils.compare(matrix24, matrix26, (double) (byte) -1);
        com.operations.Matrix.Matrix matrix44 = com.operations.Matrix.MatrixOperations.subtract(matrix21, matrix24);
        double double45 = com.operations.Matrix.MatrixUtils.frobeniusNorm(matrix21);
        org.junit.Assert.assertNotNull(matrix2);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertArrayEquals(doubleArray5, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertArrayEquals(doubleArray8, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 2 + "'", int11 == 2);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 2 + "'", int12 == 2);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 2 + "'", int13 == 2);
        org.junit.Assert.assertNotNull(matrixArray14);
        org.junit.Assert.assertNotNull(matrix15);
        org.junit.Assert.assertNotNull(matrix17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(matrixArray20);
        org.junit.Assert.assertNotNull(matrix21);
        org.junit.Assert.assertNotNull(matrix24);
        org.junit.Assert.assertNotNull(matrix26);
        org.junit.Assert.assertNotNull(matrix29);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 2 + "'", int30 == 2);
        org.junit.Assert.assertNotNull(matrix32);
        org.junit.Assert.assertTrue("'" + double33 + "' != '" + 10.0d + "'", double33 == 10.0d);
        org.junit.Assert.assertNotNull(matrix36);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 2 + "'", int37 == 2);
        org.junit.Assert.assertNotNull(matrix39);
        org.junit.Assert.assertNotNull(matrix40);
        org.junit.Assert.assertNotNull(matrix41);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(matrix44);
        org.junit.Assert.assertTrue("'" + double45 + "' != '" + 137.90576492663388d + "'", double45 == 137.90576492663388d);
    }

    @Test
    public void test1953() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1953");
        com.operations.Matrix.Matrix matrix2 = new com.operations.Matrix.Matrix(35, 10);
        // The following exception was thrown during execution in test generation
        try {
            double double5 = matrix2.getValue((int) '#', (int) (byte) 0);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
    }

    @Test
    public void test1954() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1954");
        com.operations.Matrix.Matrix matrix2 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0L, (double) (byte) 10);
        int int3 = matrix2.getRows();
        com.operations.Matrix.Matrix matrix6 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0L, (double) (byte) 10);
        int int7 = matrix6.getRows();
        com.operations.Matrix.Matrix matrix9 = com.operations.Matrix.MatrixOperations.scalarMultiply(matrix6, (double) 2);
        com.operations.Matrix.Matrix matrix10 = com.operations.Matrix.MatrixOperations.subtract(matrix2, matrix6);
        com.operations.Matrix.Matrix matrix13 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0L, (double) (byte) 10);
        int int14 = matrix13.getRows();
        com.operations.Matrix.Matrix matrix20 = com.operations.Matrix.MatrixUtils.generateRandomMatrix(100, (int) (byte) 1, (int) '#', (int) '#', 1L);
        boolean boolean22 = com.operations.Matrix.MatrixUtils.compare(matrix13, matrix20, (double) 1.0f);
        com.operations.Matrix.Matrix matrix24 = com.operations.Matrix.MatrixOperations.scalarMultiply(matrix13, (double) 1L);
        boolean boolean26 = com.operations.Matrix.MatrixUtils.compare(matrix10, matrix24, 0.0d);
        com.operations.Matrix.Matrix matrix28 = com.operations.Matrix.MatrixTransformations.rotate2D((double) (short) 100);
        double[][] doubleArray29 = matrix28.getData();
        com.operations.Matrix.Matrix matrix30 = new com.operations.Matrix.Matrix(doubleArray29);
        com.operations.Matrix.Matrix matrix31 = com.operations.Matrix.MatrixOperations.add(matrix24, matrix30);
        matrix24.print();
        org.junit.Assert.assertNotNull(matrix2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 2 + "'", int3 == 2);
        org.junit.Assert.assertNotNull(matrix6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 2 + "'", int7 == 2);
        org.junit.Assert.assertNotNull(matrix9);
        org.junit.Assert.assertNotNull(matrix10);
        org.junit.Assert.assertNotNull(matrix13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 2 + "'", int14 == 2);
        org.junit.Assert.assertNotNull(matrix20);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(matrix24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(matrix28);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertNotNull(matrix31);
    }

    @Test
    public void test1955() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1955");
        com.operations.Matrix.Matrix matrix1 = com.operations.Matrix.MatrixTransformations.rotate2D(1.414213562373095d);
        com.operations.Matrix.Matrix matrix2 = com.operations.Matrix.MatrixOperations.transpose(matrix1);
        com.operations.Matrix.Matrix matrix5 = com.operations.Matrix.MatrixTransformations.project2D((double) ' ', 0.0d);
        double[] doubleArray8 = new double[] { 10, 'a' };
        double[] doubleArray11 = new double[] { 10, 'a' };
        double[][] doubleArray12 = new double[][] { doubleArray8, doubleArray11 };
        com.operations.Matrix.Matrix matrix13 = new com.operations.Matrix.Matrix(doubleArray12);
        int int14 = matrix13.getCols();
        boolean boolean15 = com.operations.Matrix.MatrixUtils.isSquare(matrix13);
        com.operations.Matrix.Matrix matrix16 = com.operations.Matrix.MatrixOperations.transpose(matrix13);
        int int17 = matrix16.getRows();
        com.operations.Matrix.Matrix matrix20 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0L, (double) (byte) 10);
        double[] doubleArray23 = new double[] { 10, 'a' };
        double[] doubleArray26 = new double[] { 10, 'a' };
        double[][] doubleArray27 = new double[][] { doubleArray23, doubleArray26 };
        com.operations.Matrix.Matrix matrix28 = new com.operations.Matrix.Matrix(doubleArray27);
        int int29 = matrix28.getCols();
        int int30 = matrix28.getCols();
        int int31 = matrix28.getCols();
        com.operations.Matrix.Matrix[] matrixArray32 = com.operations.Matrix.MatrixDecompositions.luDecomposition(matrix28);
        com.operations.Matrix.Matrix matrix33 = com.operations.Matrix.MatrixOperations.multiply(matrix20, matrix28);
        com.operations.Matrix.Matrix matrix35 = com.operations.Matrix.MatrixTransformations.rotate2D((double) (short) 100);
        boolean boolean37 = com.operations.Matrix.MatrixUtils.compare(matrix28, matrix35, (double) (byte) 0);
        com.operations.Matrix.Matrix matrix38 = com.operations.Matrix.MatrixOperations.multiply(matrix16, matrix28);
        com.operations.Matrix.Matrix matrix39 = com.operations.Matrix.MatrixOperations.add(matrix5, matrix28);
        matrix28.print();
        com.operations.Matrix.Matrix[] matrixArray41 = com.operations.Matrix.MatrixDecompositions.luDecomposition(matrix28);
        com.operations.Matrix.Matrix matrix42 = com.operations.Matrix.MatrixOperations.add(matrix1, matrix28);
        double double43 = com.operations.Matrix.MatrixUtils.frobeniusNorm(matrix1);
        boolean boolean44 = com.operations.Matrix.MatrixUtils.isSquare(matrix1);
        // The following exception was thrown during execution in test generation
        try {
            matrix1.setValue((-1), (int) (short) 10, 21.023651153076518d);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: Index -1 out of bounds for length 2");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(matrix1);
        org.junit.Assert.assertNotNull(matrix2);
        org.junit.Assert.assertNotNull(matrix5);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertArrayEquals(doubleArray8, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertArrayEquals(doubleArray11, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 2 + "'", int14 == 2);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNotNull(matrix16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 2 + "'", int17 == 2);
        org.junit.Assert.assertNotNull(matrix20);
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertArrayEquals(doubleArray23, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertArrayEquals(doubleArray26, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 2 + "'", int29 == 2);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 2 + "'", int30 == 2);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 2 + "'", int31 == 2);
        org.junit.Assert.assertNotNull(matrixArray32);
        org.junit.Assert.assertNotNull(matrix33);
        org.junit.Assert.assertNotNull(matrix35);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(matrix38);
        org.junit.Assert.assertNotNull(matrix39);
        org.junit.Assert.assertNotNull(matrixArray41);
        org.junit.Assert.assertNotNull(matrix42);
        org.junit.Assert.assertTrue("'" + double43 + "' != '" + 1.414213562373095d + "'", double43 == 1.414213562373095d);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
    }

    @Test
    public void test1956() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1956");
        com.operations.Matrix.Matrix matrix2 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0L, (double) (byte) 10);
        int int3 = matrix2.getRows();
        com.operations.Matrix.Matrix matrix5 = com.operations.Matrix.MatrixOperations.scalarMultiply(matrix2, (double) 2);
        matrix2.print();
        com.operations.Matrix.Matrix matrix8 = com.operations.Matrix.MatrixOperations.scalarMultiply(matrix2, 100.00499987500625d);
        com.operations.Matrix.Matrix matrix10 = com.operations.Matrix.MatrixOperations.scalarMultiply(matrix8, 35.0d);
        matrix8.print();
        com.operations.Matrix.Matrix matrix14 = com.operations.Matrix.MatrixTransformations.scale2D(1.414213562373095d, 36.40054944640259d);
        com.operations.Matrix.Matrix matrix15 = com.operations.Matrix.MatrixOperations.transpose(matrix14);
        com.operations.Matrix.Matrix matrix17 = com.operations.Matrix.MatrixOperations.scalarMultiply(matrix14, 1.414213562373095d);
        com.operations.Matrix.Matrix matrix18 = com.operations.Matrix.MatrixOperations.multiply(matrix8, matrix17);
        org.junit.Assert.assertNotNull(matrix2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 2 + "'", int3 == 2);
        org.junit.Assert.assertNotNull(matrix5);
        org.junit.Assert.assertNotNull(matrix8);
        org.junit.Assert.assertNotNull(matrix10);
        org.junit.Assert.assertNotNull(matrix14);
        org.junit.Assert.assertNotNull(matrix15);
        org.junit.Assert.assertNotNull(matrix17);
        org.junit.Assert.assertNotNull(matrix18);
    }

    @Test
    public void test1957() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1957");
        com.operations.Matrix.Matrix matrix2 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0L, (double) 10L);
        com.operations.Matrix.Matrix matrix5 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0L, (double) (byte) 10);
        double[] doubleArray8 = new double[] { 10, 'a' };
        double[] doubleArray11 = new double[] { 10, 'a' };
        double[][] doubleArray12 = new double[][] { doubleArray8, doubleArray11 };
        com.operations.Matrix.Matrix matrix13 = new com.operations.Matrix.Matrix(doubleArray12);
        int int14 = matrix13.getCols();
        int int15 = matrix13.getCols();
        int int16 = matrix13.getCols();
        com.operations.Matrix.Matrix[] matrixArray17 = com.operations.Matrix.MatrixDecompositions.luDecomposition(matrix13);
        com.operations.Matrix.Matrix matrix18 = com.operations.Matrix.MatrixOperations.multiply(matrix5, matrix13);
        com.operations.Matrix.Matrix matrix20 = com.operations.Matrix.MatrixTransformations.rotate2D((double) (short) 100);
        boolean boolean22 = com.operations.Matrix.MatrixUtils.compare(matrix13, matrix20, (double) (byte) 0);
        double[] doubleArray25 = new double[] { 10, 'a' };
        double[] doubleArray28 = new double[] { 10, 'a' };
        double[][] doubleArray29 = new double[][] { doubleArray25, doubleArray28 };
        com.operations.Matrix.Matrix matrix30 = new com.operations.Matrix.Matrix(doubleArray29);
        com.operations.Matrix.Matrix matrix31 = new com.operations.Matrix.Matrix(doubleArray29);
        com.operations.Matrix.Matrix matrix32 = new com.operations.Matrix.Matrix(doubleArray29);
        boolean boolean34 = com.operations.Matrix.MatrixUtils.compare(matrix13, matrix32, (double) (-1));
        com.operations.Matrix.Matrix matrix36 = com.operations.Matrix.MatrixTransformations.rotate2D((double) (short) 100);
        double[] doubleArray39 = new double[] { 137.90576492663388d, (byte) -1 };
        double[] doubleArray40 = com.operations.Matrix.MatrixSolver.solveGaussian(matrix36, doubleArray39);
        com.operations.Matrix.Matrix matrix43 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0L, (double) (byte) 10);
        double[] doubleArray46 = new double[] { 10, 'a' };
        double[] doubleArray49 = new double[] { 10, 'a' };
        double[][] doubleArray50 = new double[][] { doubleArray46, doubleArray49 };
        com.operations.Matrix.Matrix matrix51 = new com.operations.Matrix.Matrix(doubleArray50);
        int int52 = matrix51.getCols();
        int int53 = matrix51.getCols();
        int int54 = matrix51.getCols();
        com.operations.Matrix.Matrix[] matrixArray55 = com.operations.Matrix.MatrixDecompositions.luDecomposition(matrix51);
        com.operations.Matrix.Matrix matrix56 = com.operations.Matrix.MatrixOperations.multiply(matrix43, matrix51);
        boolean boolean58 = com.operations.Matrix.MatrixUtils.compare(matrix36, matrix43, (double) (-1L));
        com.operations.Matrix.Matrix matrix59 = com.operations.Matrix.MatrixOperations.add(matrix32, matrix43);
        boolean boolean61 = com.operations.Matrix.MatrixUtils.compare(matrix2, matrix59, 146.4308710620817d);
        com.operations.Matrix.Matrix matrix63 = com.operations.Matrix.MatrixOperations.scalarMultiply(matrix59, (double) 100L);
        com.operations.Matrix.Matrix matrix64 = com.operations.Matrix.MatrixDecompositions.choleskyDecomposition(matrix63);
        double[][] doubleArray65 = matrix64.getData();
        com.operations.Matrix.Matrix[] matrixArray66 = com.operations.Matrix.MatrixDecompositions.luDecomposition(matrix64);
        com.operations.Matrix.Matrix[] matrixArray67 = com.operations.Matrix.MatrixDecompositions.luDecomposition(matrix64);
        org.junit.Assert.assertNotNull(matrix2);
        org.junit.Assert.assertNotNull(matrix5);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertArrayEquals(doubleArray8, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertArrayEquals(doubleArray11, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 2 + "'", int14 == 2);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 2 + "'", int15 == 2);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 2 + "'", int16 == 2);
        org.junit.Assert.assertNotNull(matrixArray17);
        org.junit.Assert.assertNotNull(matrix18);
        org.junit.Assert.assertNotNull(matrix20);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertArrayEquals(doubleArray25, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertArrayEquals(doubleArray28, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(matrix36);
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertArrayEquals(doubleArray39, new double[] { 137.90576492663388d, (-1.0d) }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertArrayEquals(doubleArray40, new double[] { (-24.931892522286255d), (-135.63701830716116d) }, 1.0E-15);
        org.junit.Assert.assertNotNull(matrix43);
        org.junit.Assert.assertNotNull(doubleArray46);
        org.junit.Assert.assertArrayEquals(doubleArray46, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertArrayEquals(doubleArray49, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 2 + "'", int52 == 2);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 2 + "'", int53 == 2);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 2 + "'", int54 == 2);
        org.junit.Assert.assertNotNull(matrixArray55);
        org.junit.Assert.assertNotNull(matrix56);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(matrix59);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + true + "'", boolean61 == true);
        org.junit.Assert.assertNotNull(matrix63);
        org.junit.Assert.assertNotNull(matrix64);
        org.junit.Assert.assertNotNull(doubleArray65);
        org.junit.Assert.assertNotNull(matrixArray66);
        org.junit.Assert.assertNotNull(matrixArray67);
    }

    @Test
    public void test1958() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1958");
        com.operations.Matrix.Matrix matrix1 = com.operations.Matrix.MatrixTransformations.rotate2D((double) '4');
        double[] doubleArray4 = new double[] { 10, 'a' };
        double[] doubleArray7 = new double[] { 10, 'a' };
        double[][] doubleArray8 = new double[][] { doubleArray4, doubleArray7 };
        com.operations.Matrix.Matrix matrix9 = new com.operations.Matrix.Matrix(doubleArray8);
        com.operations.Matrix.Matrix matrix10 = new com.operations.Matrix.Matrix(doubleArray8);
        com.operations.Matrix.Matrix matrix12 = com.operations.Matrix.MatrixTransformations.rotate2D((double) (short) 100);
        double[] doubleArray15 = new double[] { 137.90576492663388d, (byte) -1 };
        double[] doubleArray16 = com.operations.Matrix.MatrixSolver.solveGaussian(matrix12, doubleArray15);
        com.operations.Matrix.Matrix matrix17 = com.operations.Matrix.MatrixOperations.add(matrix10, matrix12);
        boolean boolean18 = com.operations.Matrix.MatrixUtils.isSymmetric(matrix17);
        boolean boolean20 = com.operations.Matrix.MatrixUtils.compare(matrix1, matrix17, 364.0054944640259d);
        com.operations.Matrix.Matrix matrix23 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0L, (double) (byte) 10);
        double[] doubleArray26 = new double[] { 10, 'a' };
        double[] doubleArray29 = new double[] { 10, 'a' };
        double[][] doubleArray30 = new double[][] { doubleArray26, doubleArray29 };
        com.operations.Matrix.Matrix matrix31 = new com.operations.Matrix.Matrix(doubleArray30);
        int int32 = matrix31.getCols();
        int int33 = matrix31.getCols();
        int int34 = matrix31.getCols();
        com.operations.Matrix.Matrix[] matrixArray35 = com.operations.Matrix.MatrixDecompositions.luDecomposition(matrix31);
        com.operations.Matrix.Matrix matrix36 = com.operations.Matrix.MatrixOperations.multiply(matrix23, matrix31);
        com.operations.Matrix.Matrix matrix38 = com.operations.Matrix.MatrixTransformations.rotate2D((double) (short) 100);
        boolean boolean40 = com.operations.Matrix.MatrixUtils.compare(matrix31, matrix38, (double) (byte) 0);
        com.operations.Matrix.Matrix[] matrixArray41 = com.operations.Matrix.MatrixDecompositions.luDecomposition(matrix31);
        com.operations.Matrix.Matrix matrix42 = com.operations.Matrix.MatrixOperations.transpose(matrix31);
        com.operations.Matrix.Matrix matrix45 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0L, (double) (byte) 10);
        int int46 = matrix45.getRows();
        com.operations.Matrix.Matrix matrix49 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0L, (double) (byte) 10);
        int int50 = matrix49.getRows();
        com.operations.Matrix.Matrix matrix52 = com.operations.Matrix.MatrixOperations.scalarMultiply(matrix49, (double) 2);
        com.operations.Matrix.Matrix matrix53 = com.operations.Matrix.MatrixOperations.subtract(matrix45, matrix49);
        boolean boolean55 = com.operations.Matrix.MatrixUtils.compare(matrix31, matrix45, (double) ' ');
        boolean boolean57 = com.operations.Matrix.MatrixUtils.compare(matrix17, matrix31, (double) 0L);
        com.operations.Matrix.Matrix matrix58 = com.operations.Matrix.MatrixDecompositions.choleskyDecomposition(matrix17);
        double[][] doubleArray59 = matrix58.getData();
        org.junit.Assert.assertNotNull(matrix1);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertArrayEquals(doubleArray4, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertArrayEquals(doubleArray7, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertNotNull(matrix12);
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertArrayEquals(doubleArray15, new double[] { 137.90576492663388d, (-1.0d) }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertArrayEquals(doubleArray16, new double[] { (-24.931892522286255d), (-135.63701830716116d) }, 1.0E-15);
        org.junit.Assert.assertNotNull(matrix17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertNotNull(matrix23);
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertArrayEquals(doubleArray26, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertArrayEquals(doubleArray29, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 2 + "'", int32 == 2);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 2 + "'", int33 == 2);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 2 + "'", int34 == 2);
        org.junit.Assert.assertNotNull(matrixArray35);
        org.junit.Assert.assertNotNull(matrix36);
        org.junit.Assert.assertNotNull(matrix38);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(matrixArray41);
        org.junit.Assert.assertNotNull(matrix42);
        org.junit.Assert.assertNotNull(matrix45);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 2 + "'", int46 == 2);
        org.junit.Assert.assertNotNull(matrix49);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 2 + "'", int50 == 2);
        org.junit.Assert.assertNotNull(matrix52);
        org.junit.Assert.assertNotNull(matrix53);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNotNull(matrix58);
        org.junit.Assert.assertNotNull(doubleArray59);
    }

    @Test
    public void test1959() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1959");
        com.operations.Matrix.Matrix matrix1 = com.operations.Matrix.MatrixTransformations.rotate2D(146.4308710620817d);
        double[][] doubleArray2 = matrix1.getData();
        com.operations.Matrix.Matrix matrix5 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0L, (double) (byte) 10);
        double[] doubleArray8 = new double[] { 10, 'a' };
        double[] doubleArray11 = new double[] { 10, 'a' };
        double[][] doubleArray12 = new double[][] { doubleArray8, doubleArray11 };
        com.operations.Matrix.Matrix matrix13 = new com.operations.Matrix.Matrix(doubleArray12);
        int int14 = matrix13.getCols();
        int int15 = matrix13.getCols();
        int int16 = matrix13.getCols();
        com.operations.Matrix.Matrix[] matrixArray17 = com.operations.Matrix.MatrixDecompositions.luDecomposition(matrix13);
        com.operations.Matrix.Matrix matrix18 = com.operations.Matrix.MatrixOperations.multiply(matrix5, matrix13);
        com.operations.Matrix.Matrix matrix20 = com.operations.Matrix.MatrixTransformations.rotate2D((double) (short) 100);
        boolean boolean22 = com.operations.Matrix.MatrixUtils.compare(matrix13, matrix20, (double) (byte) 0);
        double[] doubleArray25 = new double[] { 10, 'a' };
        double[] doubleArray28 = new double[] { 10, 'a' };
        double[][] doubleArray29 = new double[][] { doubleArray25, doubleArray28 };
        com.operations.Matrix.Matrix matrix30 = new com.operations.Matrix.Matrix(doubleArray29);
        com.operations.Matrix.Matrix matrix31 = new com.operations.Matrix.Matrix(doubleArray29);
        com.operations.Matrix.Matrix matrix32 = new com.operations.Matrix.Matrix(doubleArray29);
        boolean boolean34 = com.operations.Matrix.MatrixUtils.compare(matrix13, matrix32, (double) (-1));
        double[] doubleArray37 = new double[] { 10, 'a' };
        double[] doubleArray40 = new double[] { 10, 'a' };
        double[][] doubleArray41 = new double[][] { doubleArray37, doubleArray40 };
        com.operations.Matrix.Matrix matrix42 = new com.operations.Matrix.Matrix(doubleArray41);
        com.operations.Matrix.Matrix matrix43 = new com.operations.Matrix.Matrix(doubleArray41);
        boolean boolean44 = com.operations.Matrix.MatrixUtils.isSquare(matrix43);
        com.operations.Matrix.Matrix matrix45 = com.operations.Matrix.MatrixOperations.multiply(matrix32, matrix43);
        double[][] doubleArray46 = matrix43.getData();
        com.operations.Matrix.Matrix matrix47 = new com.operations.Matrix.Matrix(doubleArray46);
        com.operations.Matrix.Matrix matrix48 = new com.operations.Matrix.Matrix(doubleArray46);
        com.operations.Matrix.Matrix matrix49 = new com.operations.Matrix.Matrix(doubleArray46);
        com.operations.Matrix.Matrix matrix51 = com.operations.Matrix.MatrixOperations.scalarMultiply(matrix49, (double) 'a');
        com.operations.Matrix.Matrix matrix52 = com.operations.Matrix.MatrixOperations.add(matrix1, matrix49);
        double[] doubleArray55 = new double[] { 10, 'a' };
        double[] doubleArray58 = new double[] { 10, 'a' };
        double[][] doubleArray59 = new double[][] { doubleArray55, doubleArray58 };
        com.operations.Matrix.Matrix matrix60 = new com.operations.Matrix.Matrix(doubleArray59);
        int int61 = matrix60.getCols();
        int int62 = matrix60.getCols();
        boolean boolean63 = com.operations.Matrix.MatrixUtils.isSquare(matrix60);
        com.operations.Matrix.Matrix matrix64 = com.operations.Matrix.MatrixDecompositions.choleskyDecomposition(matrix60);
        com.operations.Matrix.Matrix matrix67 = com.operations.Matrix.MatrixTransformations.project2D(0.0d, (double) 0);
        com.operations.Matrix.Matrix matrix68 = com.operations.Matrix.MatrixOperations.subtract(matrix64, matrix67);
        com.operations.Matrix.Matrix matrix69 = com.operations.Matrix.MatrixOperations.transpose(matrix67);
        com.operations.Matrix.Matrix matrix70 = com.operations.Matrix.MatrixOperations.add(matrix52, matrix67);
        double[][] doubleArray71 = matrix67.getData();
        com.operations.Matrix.Matrix matrix72 = new com.operations.Matrix.Matrix(doubleArray71);
        com.operations.Matrix.Matrix[] matrixArray73 = com.operations.Matrix.MatrixDecompositions.luDecomposition(matrix72);
        java.lang.Class<?> wildcardClass74 = matrix72.getClass();
        org.junit.Assert.assertNotNull(matrix1);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertNotNull(matrix5);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertArrayEquals(doubleArray8, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertArrayEquals(doubleArray11, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 2 + "'", int14 == 2);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 2 + "'", int15 == 2);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 2 + "'", int16 == 2);
        org.junit.Assert.assertNotNull(matrixArray17);
        org.junit.Assert.assertNotNull(matrix18);
        org.junit.Assert.assertNotNull(matrix20);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertArrayEquals(doubleArray25, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertArrayEquals(doubleArray28, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertArrayEquals(doubleArray37, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertArrayEquals(doubleArray40, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertNotNull(matrix45);
        org.junit.Assert.assertNotNull(doubleArray46);
        org.junit.Assert.assertNotNull(matrix51);
        org.junit.Assert.assertNotNull(matrix52);
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertArrayEquals(doubleArray55, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray58);
        org.junit.Assert.assertArrayEquals(doubleArray58, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray59);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 2 + "'", int61 == 2);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 2 + "'", int62 == 2);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + true + "'", boolean63 == true);
        org.junit.Assert.assertNotNull(matrix64);
        org.junit.Assert.assertNotNull(matrix67);
        org.junit.Assert.assertNotNull(matrix68);
        org.junit.Assert.assertNotNull(matrix69);
        org.junit.Assert.assertNotNull(matrix70);
        org.junit.Assert.assertNotNull(doubleArray71);
        org.junit.Assert.assertNotNull(matrixArray73);
        org.junit.Assert.assertNotNull(wildcardClass74);
    }

    @Test
    public void test1960() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1960");
        com.operations.Matrix.Matrix matrix2 = new com.operations.Matrix.Matrix(97, 0);
    }

    @Test
    public void test1961() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1961");
        com.operations.Matrix.Matrix matrix2 = com.operations.Matrix.MatrixTransformations.scale2D((double) (-1L), (double) '4');
        com.operations.Matrix.Matrix matrix3 = com.operations.Matrix.MatrixOperations.transpose(matrix2);
        // The following exception was thrown during execution in test generation
        try {
            matrix2.setValue(52, 100, 98.07140255956371d);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: Index 52 out of bounds for length 2");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(matrix2);
        org.junit.Assert.assertNotNull(matrix3);
    }

    @Test
    public void test1962() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1962");
        com.operations.Matrix.Matrix matrix2 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0L, (double) (byte) 10);
        int int3 = matrix2.getRows();
        com.operations.Matrix.Matrix matrix9 = com.operations.Matrix.MatrixUtils.generateRandomMatrix(100, (int) (byte) 1, (int) '#', (int) '#', 1L);
        boolean boolean11 = com.operations.Matrix.MatrixUtils.compare(matrix2, matrix9, (double) 1.0f);
        matrix9.print();
        com.operations.Matrix.Matrix matrix13 = com.operations.Matrix.MatrixOperations.transpose(matrix9);
        com.operations.Matrix.Matrix matrix14 = com.operations.Matrix.MatrixOperations.transpose(matrix9);
        double double15 = com.operations.Matrix.MatrixUtils.frobeniusNorm(matrix9);
        com.operations.Matrix.Matrix matrix21 = com.operations.Matrix.MatrixUtils.generateRandomMatrix(100, 1, (-1), (int) (byte) -1, (long) (short) 1);
        com.operations.Matrix.Matrix matrix23 = com.operations.Matrix.MatrixOperations.scalarMultiply(matrix21, (double) (byte) -1);
        com.operations.Matrix.Matrix matrix24 = com.operations.Matrix.MatrixOperations.subtract(matrix9, matrix23);
        com.operations.Matrix.Matrix matrix27 = com.operations.Matrix.MatrixTransformations.project2D((double) (byte) 100, 32.0d);
        boolean boolean28 = com.operations.Matrix.MatrixUtils.isSymmetric(matrix27);
        matrix27.print();
        com.operations.Matrix.Matrix matrix30 = com.operations.Matrix.MatrixOperations.transpose(matrix27);
        com.operations.Matrix.Matrix matrix31 = com.operations.Matrix.MatrixDecompositions.choleskyDecomposition(matrix27);
        boolean boolean32 = com.operations.Matrix.MatrixUtils.isSquare(matrix31);
        // The following exception was thrown during execution in test generation
        try {
            com.operations.Matrix.Matrix matrix33 = com.operations.Matrix.MatrixOperations.add(matrix9, matrix31);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Matrices must have the same dimensions for addition.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(matrix2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 2 + "'", int3 == 2);
        org.junit.Assert.assertNotNull(matrix9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(matrix13);
        org.junit.Assert.assertNotNull(matrix14);
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 350.0d + "'", double15 == 350.0d);
        org.junit.Assert.assertNotNull(matrix21);
        org.junit.Assert.assertNotNull(matrix23);
        org.junit.Assert.assertNotNull(matrix24);
        org.junit.Assert.assertNotNull(matrix27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertNotNull(matrix30);
        org.junit.Assert.assertNotNull(matrix31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
    }

    @Test
    public void test1963() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1963");
        com.operations.Matrix.Matrix matrix2 = com.operations.Matrix.MatrixTransformations.project2D(32.0d, (double) (-1.0f));
        org.junit.Assert.assertNotNull(matrix2);
    }

    @Test
    public void test1964() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1964");
        com.operations.Matrix.Matrix matrix2 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0.0f, 350.0d);
        com.operations.Matrix.Matrix matrix5 = com.operations.Matrix.MatrixTransformations.project2D(0.0d, (double) 0);
        com.operations.Matrix.Matrix[] matrixArray6 = com.operations.Matrix.MatrixDecompositions.luDecomposition(matrix5);
        com.operations.Matrix.Matrix matrix9 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0L, (double) (byte) 10);
        int int10 = matrix9.getRows();
        com.operations.Matrix.Matrix matrix12 = com.operations.Matrix.MatrixOperations.scalarMultiply(matrix9, (double) 2);
        double double13 = com.operations.Matrix.MatrixUtils.frobeniusNorm(matrix9);
        int int14 = matrix9.getRows();
        com.operations.Matrix.Matrix matrix15 = com.operations.Matrix.MatrixOperations.transpose(matrix9);
        com.operations.Matrix.Matrix matrix16 = com.operations.Matrix.MatrixOperations.multiply(matrix5, matrix15);
        com.operations.Matrix.Matrix matrix17 = com.operations.Matrix.MatrixOperations.multiply(matrix2, matrix15);
        com.operations.Matrix.Matrix matrix19 = com.operations.Matrix.MatrixOperations.scalarMultiply(matrix15, 10.0d);
        java.lang.Class<?> wildcardClass20 = matrix15.getClass();
        org.junit.Assert.assertNotNull(matrix2);
        org.junit.Assert.assertNotNull(matrix5);
        org.junit.Assert.assertNotNull(matrixArray6);
        org.junit.Assert.assertNotNull(matrix9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 2 + "'", int10 == 2);
        org.junit.Assert.assertNotNull(matrix12);
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 10.0d + "'", double13 == 10.0d);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 2 + "'", int14 == 2);
        org.junit.Assert.assertNotNull(matrix15);
        org.junit.Assert.assertNotNull(matrix16);
        org.junit.Assert.assertNotNull(matrix17);
        org.junit.Assert.assertNotNull(matrix19);
        org.junit.Assert.assertNotNull(wildcardClass20);
    }

    @Test
    public void test1965() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1965");
        com.operations.Matrix.Matrix matrix2 = com.operations.Matrix.MatrixTransformations.project2D(641.7761389614766d, 32.0d);
        int int3 = matrix2.getRows();
        org.junit.Assert.assertNotNull(matrix2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 2 + "'", int3 == 2);
    }

    @Test
    public void test1966() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1966");
        com.operations.Matrix.Matrix matrix2 = com.operations.Matrix.MatrixTransformations.project2D((double) 100.0f, (double) (short) -1);
        com.operations.Matrix.Matrix matrix4 = com.operations.Matrix.MatrixOperations.scalarMultiply(matrix2, (double) 0.0f);
        boolean boolean5 = com.operations.Matrix.MatrixUtils.isSymmetric(matrix2);
        boolean boolean6 = com.operations.Matrix.MatrixUtils.isSquare(matrix2);
        org.junit.Assert.assertNotNull(matrix2);
        org.junit.Assert.assertNotNull(matrix4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
    }

    @Test
    public void test1967() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1967");
        double[] doubleArray2 = new double[] { 10, 'a' };
        double[] doubleArray5 = new double[] { 10, 'a' };
        double[][] doubleArray6 = new double[][] { doubleArray2, doubleArray5 };
        com.operations.Matrix.Matrix matrix7 = new com.operations.Matrix.Matrix(doubleArray6);
        com.operations.Matrix.Matrix matrix8 = new com.operations.Matrix.Matrix(doubleArray6);
        com.operations.Matrix.Matrix matrix9 = new com.operations.Matrix.Matrix(doubleArray6);
        com.operations.Matrix.Matrix matrix10 = new com.operations.Matrix.Matrix(doubleArray6);
        com.operations.Matrix.Matrix matrix11 = com.operations.Matrix.MatrixOperations.transpose(matrix10);
        com.operations.Matrix.Matrix[] matrixArray12 = com.operations.Matrix.MatrixDecompositions.luDecomposition(matrix11);
        java.lang.Class<?> wildcardClass13 = matrix11.getClass();
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertArrayEquals(doubleArray2, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertArrayEquals(doubleArray5, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertNotNull(matrix11);
        org.junit.Assert.assertNotNull(matrixArray12);
        org.junit.Assert.assertNotNull(wildcardClass13);
    }

    @Test
    public void test1968() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1968");
        com.operations.Matrix.Matrix matrix2 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0L, (double) (byte) 10);
        int int3 = matrix2.getRows();
        com.operations.Matrix.Matrix matrix9 = com.operations.Matrix.MatrixUtils.generateRandomMatrix(100, (int) (byte) 1, (int) '#', (int) '#', 1L);
        boolean boolean11 = com.operations.Matrix.MatrixUtils.compare(matrix2, matrix9, (double) 1.0f);
        matrix9.print();
        boolean boolean13 = com.operations.Matrix.MatrixUtils.isSymmetric(matrix9);
        com.operations.Matrix.Matrix matrix15 = com.operations.Matrix.MatrixTransformations.rotate2D((double) '4');
        double[] doubleArray18 = new double[] { 10, 'a' };
        double[] doubleArray21 = new double[] { 10, 'a' };
        double[][] doubleArray22 = new double[][] { doubleArray18, doubleArray21 };
        com.operations.Matrix.Matrix matrix23 = new com.operations.Matrix.Matrix(doubleArray22);
        com.operations.Matrix.Matrix matrix24 = new com.operations.Matrix.Matrix(doubleArray22);
        com.operations.Matrix.Matrix matrix26 = com.operations.Matrix.MatrixTransformations.rotate2D((double) (short) 100);
        double[] doubleArray29 = new double[] { 137.90576492663388d, (byte) -1 };
        double[] doubleArray30 = com.operations.Matrix.MatrixSolver.solveGaussian(matrix26, doubleArray29);
        com.operations.Matrix.Matrix matrix31 = com.operations.Matrix.MatrixOperations.add(matrix24, matrix26);
        boolean boolean32 = com.operations.Matrix.MatrixUtils.isSymmetric(matrix31);
        boolean boolean34 = com.operations.Matrix.MatrixUtils.compare(matrix15, matrix31, 364.0054944640259d);
        com.operations.Matrix.Matrix matrix37 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0L, (double) (byte) 10);
        int int38 = matrix37.getRows();
        com.operations.Matrix.Matrix matrix40 = com.operations.Matrix.MatrixOperations.scalarMultiply(matrix37, (double) 2);
        matrix37.print();
        com.operations.Matrix.Matrix matrix42 = com.operations.Matrix.MatrixOperations.multiply(matrix31, matrix37);
        com.operations.Matrix.Matrix matrix43 = com.operations.Matrix.MatrixOperations.transpose(matrix42);
        double double44 = com.operations.Matrix.MatrixUtils.frobeniusNorm(matrix42);
        com.operations.Matrix.Matrix[] matrixArray45 = com.operations.Matrix.MatrixDecompositions.luDecomposition(matrix42);
        // The following exception was thrown during execution in test generation
        try {
            com.operations.Matrix.Matrix matrix46 = com.operations.Matrix.MatrixOperations.add(matrix9, matrix42);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Matrices must have the same dimensions for addition.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(matrix2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 2 + "'", int3 == 2);
        org.junit.Assert.assertNotNull(matrix9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(matrix15);
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertArrayEquals(doubleArray18, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertArrayEquals(doubleArray21, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertNotNull(matrix26);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertArrayEquals(doubleArray29, new double[] { 137.90576492663388d, (-1.0d) }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertArrayEquals(doubleArray30, new double[] { (-24.931892522286255d), (-135.63701830716116d) }, 1.0E-15);
        org.junit.Assert.assertNotNull(matrix31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertNotNull(matrix37);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 2 + "'", int38 == 2);
        org.junit.Assert.assertNotNull(matrix40);
        org.junit.Assert.assertNotNull(matrix42);
        org.junit.Assert.assertNotNull(matrix43);
        org.junit.Assert.assertTrue("'" + double44 + "' != '" + 1363.6076983299943d + "'", double44 == 1363.6076983299943d);
        org.junit.Assert.assertNotNull(matrixArray45);
    }

    @Test
    public void test1969() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1969");
        com.operations.Matrix.Matrix matrix2 = new com.operations.Matrix.Matrix((int) '4', (int) ' ');
        double[][] doubleArray3 = matrix2.getData();
        com.operations.Matrix.Matrix matrix5 = com.operations.Matrix.MatrixTransformations.rotate2D((double) '4');
        double[] doubleArray8 = new double[] { 10, 'a' };
        double[] doubleArray11 = new double[] { 10, 'a' };
        double[][] doubleArray12 = new double[][] { doubleArray8, doubleArray11 };
        com.operations.Matrix.Matrix matrix13 = new com.operations.Matrix.Matrix(doubleArray12);
        com.operations.Matrix.Matrix matrix14 = new com.operations.Matrix.Matrix(doubleArray12);
        com.operations.Matrix.Matrix matrix16 = com.operations.Matrix.MatrixTransformations.rotate2D((double) (short) 100);
        double[] doubleArray19 = new double[] { 137.90576492663388d, (byte) -1 };
        double[] doubleArray20 = com.operations.Matrix.MatrixSolver.solveGaussian(matrix16, doubleArray19);
        com.operations.Matrix.Matrix matrix21 = com.operations.Matrix.MatrixOperations.add(matrix14, matrix16);
        boolean boolean22 = com.operations.Matrix.MatrixUtils.isSymmetric(matrix21);
        boolean boolean24 = com.operations.Matrix.MatrixUtils.compare(matrix5, matrix21, 364.0054944640259d);
        com.operations.Matrix.Matrix matrix27 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0L, (double) (byte) 10);
        int int28 = matrix27.getRows();
        com.operations.Matrix.Matrix matrix30 = com.operations.Matrix.MatrixOperations.scalarMultiply(matrix27, (double) 2);
        matrix27.print();
        com.operations.Matrix.Matrix matrix32 = com.operations.Matrix.MatrixOperations.multiply(matrix21, matrix27);
        int int33 = matrix32.getRows();
        com.operations.Matrix.Matrix matrix36 = com.operations.Matrix.MatrixTransformations.scale2D(1.414213562373095d, 36.40054944640259d);
        com.operations.Matrix.Matrix matrix37 = com.operations.Matrix.MatrixOperations.transpose(matrix36);
        com.operations.Matrix.Matrix matrix38 = com.operations.Matrix.MatrixOperations.multiply(matrix32, matrix37);
        com.operations.Matrix.Matrix matrix41 = com.operations.Matrix.MatrixTransformations.project2D(0.0d, (double) (-1L));
        com.operations.Matrix.Matrix matrix42 = com.operations.Matrix.MatrixOperations.multiply(matrix32, matrix41);
        boolean boolean44 = com.operations.Matrix.MatrixUtils.compare(matrix2, matrix42, (double) 100L);
        double double47 = matrix2.getValue((int) (byte) 1, 1);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertNotNull(matrix5);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertArrayEquals(doubleArray8, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertArrayEquals(doubleArray11, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertNotNull(matrix16);
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertArrayEquals(doubleArray19, new double[] { 137.90576492663388d, (-1.0d) }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertArrayEquals(doubleArray20, new double[] { (-24.931892522286255d), (-135.63701830716116d) }, 1.0E-15);
        org.junit.Assert.assertNotNull(matrix21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertNotNull(matrix27);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 2 + "'", int28 == 2);
        org.junit.Assert.assertNotNull(matrix30);
        org.junit.Assert.assertNotNull(matrix32);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 2 + "'", int33 == 2);
        org.junit.Assert.assertNotNull(matrix36);
        org.junit.Assert.assertNotNull(matrix37);
        org.junit.Assert.assertNotNull(matrix38);
        org.junit.Assert.assertNotNull(matrix41);
        org.junit.Assert.assertNotNull(matrix42);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + double47 + "' != '" + 0.0d + "'", double47 == 0.0d);
    }

    @Test
    public void test1970() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1970");
        com.operations.Matrix.Matrix matrix2 = com.operations.Matrix.MatrixTransformations.project2D((double) (byte) 1, 10.344080432788601d);
        org.junit.Assert.assertNotNull(matrix2);
    }

    @Test
    public void test1971() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1971");
        // The following exception was thrown during execution in test generation
        try {
            com.operations.Matrix.Matrix matrix4 = com.operations.Matrix.MatrixUtils.generateRandomMatrix((-1), (int) '4', 32, (int) (byte) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.NegativeArraySizeException; message: -1");
        } catch (java.lang.NegativeArraySizeException e) {
            // Expected exception.
        }
    }

    @Test
    public void test1972() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1972");
        com.operations.Matrix.Matrix matrix1 = com.operations.Matrix.MatrixTransformations.rotate2D((double) '4');
        double[] doubleArray4 = new double[] { 10, 'a' };
        double[] doubleArray7 = new double[] { 10, 'a' };
        double[][] doubleArray8 = new double[][] { doubleArray4, doubleArray7 };
        com.operations.Matrix.Matrix matrix9 = new com.operations.Matrix.Matrix(doubleArray8);
        com.operations.Matrix.Matrix matrix10 = new com.operations.Matrix.Matrix(doubleArray8);
        com.operations.Matrix.Matrix matrix12 = com.operations.Matrix.MatrixTransformations.rotate2D((double) (short) 100);
        double[] doubleArray15 = new double[] { 137.90576492663388d, (byte) -1 };
        double[] doubleArray16 = com.operations.Matrix.MatrixSolver.solveGaussian(matrix12, doubleArray15);
        com.operations.Matrix.Matrix matrix17 = com.operations.Matrix.MatrixOperations.add(matrix10, matrix12);
        boolean boolean18 = com.operations.Matrix.MatrixUtils.isSymmetric(matrix17);
        boolean boolean20 = com.operations.Matrix.MatrixUtils.compare(matrix1, matrix17, 364.0054944640259d);
        com.operations.Matrix.Matrix matrix23 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0L, (double) (byte) 10);
        double[] doubleArray26 = new double[] { 10, 'a' };
        double[] doubleArray29 = new double[] { 10, 'a' };
        double[][] doubleArray30 = new double[][] { doubleArray26, doubleArray29 };
        com.operations.Matrix.Matrix matrix31 = new com.operations.Matrix.Matrix(doubleArray30);
        int int32 = matrix31.getCols();
        int int33 = matrix31.getCols();
        int int34 = matrix31.getCols();
        com.operations.Matrix.Matrix[] matrixArray35 = com.operations.Matrix.MatrixDecompositions.luDecomposition(matrix31);
        com.operations.Matrix.Matrix matrix36 = com.operations.Matrix.MatrixOperations.multiply(matrix23, matrix31);
        com.operations.Matrix.Matrix matrix38 = com.operations.Matrix.MatrixTransformations.rotate2D((double) (short) 100);
        boolean boolean40 = com.operations.Matrix.MatrixUtils.compare(matrix31, matrix38, (double) (byte) 0);
        com.operations.Matrix.Matrix[] matrixArray41 = com.operations.Matrix.MatrixDecompositions.luDecomposition(matrix31);
        com.operations.Matrix.Matrix matrix42 = com.operations.Matrix.MatrixOperations.transpose(matrix31);
        com.operations.Matrix.Matrix matrix45 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0L, (double) (byte) 10);
        int int46 = matrix45.getRows();
        com.operations.Matrix.Matrix matrix49 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0L, (double) (byte) 10);
        int int50 = matrix49.getRows();
        com.operations.Matrix.Matrix matrix52 = com.operations.Matrix.MatrixOperations.scalarMultiply(matrix49, (double) 2);
        com.operations.Matrix.Matrix matrix53 = com.operations.Matrix.MatrixOperations.subtract(matrix45, matrix49);
        boolean boolean55 = com.operations.Matrix.MatrixUtils.compare(matrix31, matrix45, (double) ' ');
        boolean boolean57 = com.operations.Matrix.MatrixUtils.compare(matrix17, matrix31, (double) 0L);
        boolean boolean58 = com.operations.Matrix.MatrixUtils.isSymmetric(matrix31);
        com.operations.Matrix.Matrix matrix63 = com.operations.Matrix.MatrixUtils.generateRandomMatrix((int) ' ', (int) (short) 10, (int) (short) 10, (int) '#');
        // The following exception was thrown during execution in test generation
        try {
            com.operations.Matrix.Matrix matrix64 = com.operations.Matrix.MatrixOperations.add(matrix31, matrix63);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Matrices must have the same dimensions for addition.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(matrix1);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertArrayEquals(doubleArray4, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertArrayEquals(doubleArray7, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertNotNull(matrix12);
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertArrayEquals(doubleArray15, new double[] { 137.90576492663388d, (-1.0d) }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertArrayEquals(doubleArray16, new double[] { (-24.931892522286255d), (-135.63701830716116d) }, 1.0E-15);
        org.junit.Assert.assertNotNull(matrix17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertNotNull(matrix23);
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertArrayEquals(doubleArray26, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertArrayEquals(doubleArray29, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 2 + "'", int32 == 2);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 2 + "'", int33 == 2);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 2 + "'", int34 == 2);
        org.junit.Assert.assertNotNull(matrixArray35);
        org.junit.Assert.assertNotNull(matrix36);
        org.junit.Assert.assertNotNull(matrix38);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(matrixArray41);
        org.junit.Assert.assertNotNull(matrix42);
        org.junit.Assert.assertNotNull(matrix45);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 2 + "'", int46 == 2);
        org.junit.Assert.assertNotNull(matrix49);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 2 + "'", int50 == 2);
        org.junit.Assert.assertNotNull(matrix52);
        org.junit.Assert.assertNotNull(matrix53);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(matrix63);
    }

    @Test
    public void test1973() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1973");
        com.operations.Matrix.Matrix matrix2 = com.operations.Matrix.MatrixTransformations.project2D((double) 10.0f, (-1.0d));
        org.junit.Assert.assertNotNull(matrix2);
    }

    @Test
    public void test1974() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1974");
        com.operations.Matrix.Matrix matrix1 = com.operations.Matrix.MatrixTransformations.rotate2D((double) '4');
        com.operations.Matrix.Matrix matrix4 = com.operations.Matrix.MatrixTransformations.project2D((double) ' ', 0.0d);
        boolean boolean5 = com.operations.Matrix.MatrixUtils.isSymmetric(matrix4);
        boolean boolean7 = com.operations.Matrix.MatrixUtils.compare(matrix1, matrix4, 1.4142135623730951d);
        boolean boolean8 = com.operations.Matrix.MatrixUtils.isSquare(matrix4);
        com.operations.Matrix.Matrix matrix11 = com.operations.Matrix.MatrixTransformations.scale2D((double) (byte) 100, 350.0d);
        com.operations.Matrix.Matrix matrix14 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0L, (double) (byte) 10);
        double[] doubleArray17 = new double[] { 10, 'a' };
        double[] doubleArray20 = new double[] { 10, 'a' };
        double[][] doubleArray21 = new double[][] { doubleArray17, doubleArray20 };
        com.operations.Matrix.Matrix matrix22 = new com.operations.Matrix.Matrix(doubleArray21);
        int int23 = matrix22.getCols();
        int int24 = matrix22.getCols();
        int int25 = matrix22.getCols();
        com.operations.Matrix.Matrix[] matrixArray26 = com.operations.Matrix.MatrixDecompositions.luDecomposition(matrix22);
        com.operations.Matrix.Matrix matrix27 = com.operations.Matrix.MatrixOperations.multiply(matrix14, matrix22);
        com.operations.Matrix.Matrix matrix29 = com.operations.Matrix.MatrixTransformations.rotate2D((double) (short) 100);
        boolean boolean31 = com.operations.Matrix.MatrixUtils.compare(matrix22, matrix29, (double) (byte) 0);
        double[] doubleArray34 = new double[] { 10, 'a' };
        double[] doubleArray37 = new double[] { 10, 'a' };
        double[][] doubleArray38 = new double[][] { doubleArray34, doubleArray37 };
        com.operations.Matrix.Matrix matrix39 = new com.operations.Matrix.Matrix(doubleArray38);
        com.operations.Matrix.Matrix matrix40 = com.operations.Matrix.MatrixOperations.multiply(matrix22, matrix39);
        com.operations.Matrix.Matrix matrix41 = com.operations.Matrix.MatrixOperations.multiply(matrix11, matrix40);
        int int42 = matrix41.getRows();
        com.operations.Matrix.Matrix matrix47 = com.operations.Matrix.MatrixUtils.generateRandomMatrix((int) '#', (int) (byte) 0, 10, (int) (short) -1);
        com.operations.Matrix.Matrix matrix49 = com.operations.Matrix.MatrixOperations.scalarMultiply(matrix47, (double) 100L);
        com.operations.Matrix.Matrix matrix52 = com.operations.Matrix.MatrixTransformations.project2D(0.0d, (double) 0);
        com.operations.Matrix.Matrix[] matrixArray53 = com.operations.Matrix.MatrixDecompositions.luDecomposition(matrix52);
        com.operations.Matrix.Matrix matrix56 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0L, (double) (byte) 10);
        int int57 = matrix56.getRows();
        com.operations.Matrix.Matrix matrix59 = com.operations.Matrix.MatrixOperations.scalarMultiply(matrix56, (double) 2);
        double double60 = com.operations.Matrix.MatrixUtils.frobeniusNorm(matrix56);
        int int61 = matrix56.getRows();
        com.operations.Matrix.Matrix matrix62 = com.operations.Matrix.MatrixOperations.transpose(matrix56);
        com.operations.Matrix.Matrix matrix63 = com.operations.Matrix.MatrixOperations.multiply(matrix52, matrix62);
        double[] doubleArray66 = new double[] { 10, 'a' };
        double[] doubleArray69 = new double[] { 10, 'a' };
        double[][] doubleArray70 = new double[][] { doubleArray66, doubleArray69 };
        com.operations.Matrix.Matrix matrix71 = new com.operations.Matrix.Matrix(doubleArray70);
        com.operations.Matrix.Matrix matrix72 = new com.operations.Matrix.Matrix(doubleArray70);
        com.operations.Matrix.Matrix[] matrixArray73 = com.operations.Matrix.MatrixDecompositions.luDecomposition(matrix72);
        com.operations.Matrix.Matrix matrix76 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0, (double) 100L);
        com.operations.Matrix.Matrix matrix77 = com.operations.Matrix.MatrixOperations.subtract(matrix72, matrix76);
        double[][] doubleArray78 = matrix77.getData();
        com.operations.Matrix.Matrix matrix79 = new com.operations.Matrix.Matrix(doubleArray78);
        boolean boolean81 = com.operations.Matrix.MatrixUtils.compare(matrix62, matrix79, 32.0d);
        boolean boolean83 = com.operations.Matrix.MatrixUtils.compare(matrix47, matrix62, 146781.22563870353d);
        com.operations.Matrix.Matrix matrix84 = com.operations.Matrix.MatrixOperations.add(matrix41, matrix62);
        boolean boolean86 = com.operations.Matrix.MatrixUtils.compare(matrix4, matrix62, 400.0d);
        com.operations.Matrix.Matrix matrix88 = com.operations.Matrix.MatrixOperations.scalarMultiply(matrix4, 975.1410154434076d);
        double double89 = com.operations.Matrix.MatrixUtils.frobeniusNorm(matrix4);
        org.junit.Assert.assertNotNull(matrix1);
        org.junit.Assert.assertNotNull(matrix4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNotNull(matrix11);
        org.junit.Assert.assertNotNull(matrix14);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertArrayEquals(doubleArray17, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertArrayEquals(doubleArray20, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 2 + "'", int23 == 2);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 2 + "'", int24 == 2);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 2 + "'", int25 == 2);
        org.junit.Assert.assertNotNull(matrixArray26);
        org.junit.Assert.assertNotNull(matrix27);
        org.junit.Assert.assertNotNull(matrix29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertArrayEquals(doubleArray34, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertArrayEquals(doubleArray37, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertNotNull(matrix40);
        org.junit.Assert.assertNotNull(matrix41);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 2 + "'", int42 == 2);
        org.junit.Assert.assertNotNull(matrix47);
        org.junit.Assert.assertNotNull(matrix49);
        org.junit.Assert.assertNotNull(matrix52);
        org.junit.Assert.assertNotNull(matrixArray53);
        org.junit.Assert.assertNotNull(matrix56);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 2 + "'", int57 == 2);
        org.junit.Assert.assertNotNull(matrix59);
        org.junit.Assert.assertTrue("'" + double60 + "' != '" + 10.0d + "'", double60 == 10.0d);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 2 + "'", int61 == 2);
        org.junit.Assert.assertNotNull(matrix62);
        org.junit.Assert.assertNotNull(matrix63);
        org.junit.Assert.assertNotNull(doubleArray66);
        org.junit.Assert.assertArrayEquals(doubleArray66, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray69);
        org.junit.Assert.assertArrayEquals(doubleArray69, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray70);
        org.junit.Assert.assertNotNull(matrixArray73);
        org.junit.Assert.assertNotNull(matrix76);
        org.junit.Assert.assertNotNull(matrix77);
        org.junit.Assert.assertNotNull(doubleArray78);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertNotNull(matrix84);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + true + "'", boolean86 == true);
        org.junit.Assert.assertNotNull(matrix88);
        org.junit.Assert.assertTrue("'" + double89 + "' != '" + 32.0d + "'", double89 == 32.0d);
    }

    @Test
    public void test1975() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1975");
        com.operations.Matrix.Matrix matrix2 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0L, (double) (byte) 10);
        double[] doubleArray5 = new double[] { 10, 'a' };
        double[] doubleArray8 = new double[] { 10, 'a' };
        double[][] doubleArray9 = new double[][] { doubleArray5, doubleArray8 };
        com.operations.Matrix.Matrix matrix10 = new com.operations.Matrix.Matrix(doubleArray9);
        int int11 = matrix10.getCols();
        int int12 = matrix10.getCols();
        int int13 = matrix10.getCols();
        com.operations.Matrix.Matrix[] matrixArray14 = com.operations.Matrix.MatrixDecompositions.luDecomposition(matrix10);
        com.operations.Matrix.Matrix matrix15 = com.operations.Matrix.MatrixOperations.multiply(matrix2, matrix10);
        com.operations.Matrix.Matrix matrix17 = com.operations.Matrix.MatrixTransformations.rotate2D((double) (short) 100);
        boolean boolean19 = com.operations.Matrix.MatrixUtils.compare(matrix10, matrix17, (double) (byte) 0);
        com.operations.Matrix.Matrix[] matrixArray20 = com.operations.Matrix.MatrixDecompositions.luDecomposition(matrix10);
        com.operations.Matrix.Matrix matrix21 = com.operations.Matrix.MatrixOperations.transpose(matrix10);
        com.operations.Matrix.Matrix matrix24 = com.operations.Matrix.MatrixTransformations.scale2D(0.0d, (double) 0L);
        com.operations.Matrix.Matrix matrix25 = com.operations.Matrix.MatrixOperations.add(matrix10, matrix24);
        com.operations.Matrix.Matrix[] matrixArray26 = com.operations.Matrix.MatrixDecompositions.luDecomposition(matrix10);
        org.junit.Assert.assertNotNull(matrix2);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertArrayEquals(doubleArray5, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertArrayEquals(doubleArray8, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 2 + "'", int11 == 2);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 2 + "'", int12 == 2);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 2 + "'", int13 == 2);
        org.junit.Assert.assertNotNull(matrixArray14);
        org.junit.Assert.assertNotNull(matrix15);
        org.junit.Assert.assertNotNull(matrix17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(matrixArray20);
        org.junit.Assert.assertNotNull(matrix21);
        org.junit.Assert.assertNotNull(matrix24);
        org.junit.Assert.assertNotNull(matrix25);
        org.junit.Assert.assertNotNull(matrixArray26);
    }

    @Test
    public void test1976() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1976");
        com.operations.Matrix.Matrix matrix2 = com.operations.Matrix.MatrixTransformations.scale2D(21.023651153076518d, 145.11374848717816d);
        org.junit.Assert.assertNotNull(matrix2);
    }

    @Test
    public void test1977() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1977");
        com.operations.Matrix.Matrix matrix2 = com.operations.Matrix.MatrixTransformations.project2D(36.40054944640259d, 364.0054944640259d);
        com.operations.Matrix.Matrix matrix4 = com.operations.Matrix.MatrixOperations.scalarMultiply(matrix2, 30.0d);
        int int5 = matrix4.getRows();
        org.junit.Assert.assertNotNull(matrix2);
        org.junit.Assert.assertNotNull(matrix4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 2 + "'", int5 == 2);
    }

    @Test
    public void test1978() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1978");
        com.operations.Matrix.Matrix matrix5 = com.operations.Matrix.MatrixUtils.generateRandomMatrix(52, 0, 32, (-1), (long) (short) -1);
        int int6 = matrix5.getCols();
        // The following exception was thrown during execution in test generation
        try {
            com.operations.Matrix.Matrix matrix7 = com.operations.Matrix.MatrixDecompositions.choleskyDecomposition(matrix5);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Matrix must be square for Cholesky decomposition.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(matrix5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
    }

    @Test
    public void test1979() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1979");
        com.operations.Matrix.Matrix matrix2 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0.0f, (double) (-1));
        com.operations.Matrix.Matrix matrix5 = com.operations.Matrix.MatrixTransformations.scale2D(146.4308710620817d, (double) 10L);
        com.operations.Matrix.Matrix matrix6 = com.operations.Matrix.MatrixOperations.multiply(matrix2, matrix5);
        int int7 = matrix6.getRows();
        int int8 = matrix6.getCols();
        org.junit.Assert.assertNotNull(matrix2);
        org.junit.Assert.assertNotNull(matrix5);
        org.junit.Assert.assertNotNull(matrix6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 2 + "'", int7 == 2);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 2 + "'", int8 == 2);
    }

    @Test
    public void test1980() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1980");
        com.operations.Matrix.Matrix matrix2 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0L, (double) 10L);
        double[][] doubleArray3 = matrix2.getData();
        boolean boolean4 = com.operations.Matrix.MatrixUtils.isSymmetric(matrix2);
        java.lang.Class<?> wildcardClass5 = matrix2.getClass();
        org.junit.Assert.assertNotNull(matrix2);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(wildcardClass5);
    }

    @Test
    public void test1981() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1981");
        double[] doubleArray2 = new double[] { 10, 'a' };
        double[] doubleArray5 = new double[] { 10, 'a' };
        double[][] doubleArray6 = new double[][] { doubleArray2, doubleArray5 };
        com.operations.Matrix.Matrix matrix7 = new com.operations.Matrix.Matrix(doubleArray6);
        com.operations.Matrix.Matrix matrix8 = com.operations.Matrix.MatrixOperations.transpose(matrix7);
        com.operations.Matrix.Matrix matrix9 = com.operations.Matrix.MatrixDecompositions.choleskyDecomposition(matrix7);
        // The following exception was thrown during execution in test generation
        try {
            double double12 = matrix9.getValue(32, (int) (byte) 10);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertArrayEquals(doubleArray2, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertArrayEquals(doubleArray5, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertNotNull(matrix8);
        org.junit.Assert.assertNotNull(matrix9);
    }

    @Test
    public void test1982() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1982");
        // The following exception was thrown during execution in test generation
        try {
            com.operations.Matrix.Matrix matrix2 = new com.operations.Matrix.Matrix((int) (byte) -1, (int) (byte) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.NegativeArraySizeException; message: -1");
        } catch (java.lang.NegativeArraySizeException e) {
            // Expected exception.
        }
    }

    @Test
    public void test1983() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1983");
        com.operations.Matrix.Matrix matrix0 = null;
        // The following exception was thrown during execution in test generation
        try {
            com.operations.Matrix.Matrix matrix2 = com.operations.Matrix.MatrixOperations.scalarMultiply(matrix0, 1.7320508075688774d);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test1984() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1984");
        com.operations.Matrix.Matrix matrix2 = com.operations.Matrix.MatrixTransformations.project2D(1480.1439709090816d, 100.00499987500625d);
        org.junit.Assert.assertNotNull(matrix2);
    }

    @Test
    public void test1985() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1985");
        com.operations.Matrix.Matrix matrix1 = com.operations.Matrix.MatrixTransformations.rotate2D(400.0d);
        java.lang.Class<?> wildcardClass2 = matrix1.getClass();
        org.junit.Assert.assertNotNull(matrix1);
        org.junit.Assert.assertNotNull(wildcardClass2);
    }

    @Test
    public void test1986() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1986");
        com.operations.Matrix.Matrix matrix2 = new com.operations.Matrix.Matrix((int) (short) 100, 2);
        // The following exception was thrown during execution in test generation
        try {
            com.operations.Matrix.Matrix matrix3 = com.operations.Matrix.MatrixDecompositions.choleskyDecomposition(matrix2);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Matrix must be square for Cholesky decomposition.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test1987() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1987");
        com.operations.Matrix.Matrix matrix2 = new com.operations.Matrix.Matrix((int) 'a', (int) (byte) 100);
        double double3 = com.operations.Matrix.MatrixUtils.frobeniusNorm(matrix2);
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + 0.0d + "'", double3 == 0.0d);
    }

    @Test
    public void test1988() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1988");
        com.operations.Matrix.Matrix matrix2 = com.operations.Matrix.MatrixTransformations.scale2D(10.0d, 263.4829471529277d);
        org.junit.Assert.assertNotNull(matrix2);
    }

    @Test
    public void test1989() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1989");
        com.operations.Matrix.Matrix matrix2 = new com.operations.Matrix.Matrix(97, 52);
    }

    @Test
    public void test1990() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1990");
        double[] doubleArray3 = new double[] { '#', 1, 1.0f };
        double[] doubleArray7 = new double[] { '#', 1, 1.0f };
        double[] doubleArray11 = new double[] { '#', 1, 1.0f };
        double[] doubleArray15 = new double[] { '#', 1, 1.0f };
        double[] doubleArray19 = new double[] { '#', 1, 1.0f };
        double[] doubleArray23 = new double[] { '#', 1, 1.0f };
        double[][] doubleArray24 = new double[][] { doubleArray3, doubleArray7, doubleArray11, doubleArray15, doubleArray19, doubleArray23 };
        com.operations.Matrix.Matrix matrix25 = new com.operations.Matrix.Matrix(doubleArray24);
        com.operations.Matrix.Matrix matrix26 = new com.operations.Matrix.Matrix(doubleArray24);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertArrayEquals(doubleArray3, new double[] { 35.0d, 1.0d, 1.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertArrayEquals(doubleArray7, new double[] { 35.0d, 1.0d, 1.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertArrayEquals(doubleArray11, new double[] { 35.0d, 1.0d, 1.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertArrayEquals(doubleArray15, new double[] { 35.0d, 1.0d, 1.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertArrayEquals(doubleArray19, new double[] { 35.0d, 1.0d, 1.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertArrayEquals(doubleArray23, new double[] { 35.0d, 1.0d, 1.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray24);
    }

    @Test
    public void test1991() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1991");
        com.operations.Matrix.Matrix matrix2 = com.operations.Matrix.MatrixTransformations.project2D(100.00499987500625d, 146781.22563870353d);
        double[] doubleArray3 = null;
        // The following exception was thrown during execution in test generation
        try {
            double[] doubleArray4 = com.operations.Matrix.MatrixSolver.solveGaussian(matrix2, doubleArray3);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot read the array length because \"constants\" is null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(matrix2);
    }

    @Test
    public void test1992() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1992");
        double[] doubleArray2 = new double[] { 10, 'a' };
        double[] doubleArray5 = new double[] { 10, 'a' };
        double[][] doubleArray6 = new double[][] { doubleArray2, doubleArray5 };
        com.operations.Matrix.Matrix matrix7 = new com.operations.Matrix.Matrix(doubleArray6);
        com.operations.Matrix.Matrix matrix8 = new com.operations.Matrix.Matrix(doubleArray6);
        double double9 = com.operations.Matrix.MatrixUtils.frobeniusNorm(matrix8);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertArrayEquals(doubleArray2, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertArrayEquals(doubleArray5, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 137.90576492663388d + "'", double9 == 137.90576492663388d);
    }

    @Test
    public void test1993() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1993");
        com.operations.Matrix.Matrix matrix2 = com.operations.Matrix.MatrixTransformations.scale2D(137.13497001129946d, 22.360679774997898d);
        org.junit.Assert.assertNotNull(matrix2);
    }

    @Test
    public void test1994() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1994");
        com.operations.Matrix.Matrix matrix2 = com.operations.Matrix.MatrixTransformations.project2D(364.0054944640259d, 975.1410154434076d);
        org.junit.Assert.assertNotNull(matrix2);
    }

    @Test
    public void test1995() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1995");
        com.operations.Matrix.Matrix matrix1 = com.operations.Matrix.MatrixTransformations.rotate2D((double) (short) 100);
        double[] doubleArray4 = new double[] { 137.90576492663388d, (byte) -1 };
        double[] doubleArray5 = com.operations.Matrix.MatrixSolver.solveGaussian(matrix1, doubleArray4);
        com.operations.Matrix.Matrix matrix8 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0L, (double) (byte) 10);
        int int9 = matrix8.getRows();
        com.operations.Matrix.Matrix matrix12 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0L, (double) (byte) 10);
        int int13 = matrix12.getRows();
        com.operations.Matrix.Matrix matrix15 = com.operations.Matrix.MatrixOperations.scalarMultiply(matrix12, (double) 2);
        com.operations.Matrix.Matrix matrix16 = com.operations.Matrix.MatrixOperations.subtract(matrix8, matrix12);
        com.operations.Matrix.Matrix matrix19 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0L, (double) (byte) 10);
        int int20 = matrix19.getRows();
        com.operations.Matrix.Matrix matrix26 = com.operations.Matrix.MatrixUtils.generateRandomMatrix(100, (int) (byte) 1, (int) '#', (int) '#', 1L);
        boolean boolean28 = com.operations.Matrix.MatrixUtils.compare(matrix19, matrix26, (double) 1.0f);
        com.operations.Matrix.Matrix matrix30 = com.operations.Matrix.MatrixOperations.scalarMultiply(matrix19, (double) 1L);
        boolean boolean32 = com.operations.Matrix.MatrixUtils.compare(matrix16, matrix30, 0.0d);
        int int33 = matrix30.getCols();
        com.operations.Matrix.Matrix matrix34 = com.operations.Matrix.MatrixOperations.transpose(matrix30);
        double double35 = com.operations.Matrix.MatrixUtils.frobeniusNorm(matrix34);
        com.operations.Matrix.Matrix matrix36 = com.operations.Matrix.MatrixOperations.add(matrix1, matrix34);
        // The following exception was thrown during execution in test generation
        try {
            com.operations.Matrix.Matrix matrix37 = com.operations.Matrix.MatrixDecompositions.choleskyDecomposition(matrix1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Matrix is not positive definite.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(matrix1);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertArrayEquals(doubleArray4, new double[] { 137.90576492663388d, (-1.0d) }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertArrayEquals(doubleArray5, new double[] { (-24.931892522286255d), (-135.63701830716116d) }, 1.0E-15);
        org.junit.Assert.assertNotNull(matrix8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 2 + "'", int9 == 2);
        org.junit.Assert.assertNotNull(matrix12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 2 + "'", int13 == 2);
        org.junit.Assert.assertNotNull(matrix15);
        org.junit.Assert.assertNotNull(matrix16);
        org.junit.Assert.assertNotNull(matrix19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 2 + "'", int20 == 2);
        org.junit.Assert.assertNotNull(matrix26);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(matrix30);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 2 + "'", int33 == 2);
        org.junit.Assert.assertNotNull(matrix34);
        org.junit.Assert.assertTrue("'" + double35 + "' != '" + 10.0d + "'", double35 == 10.0d);
        org.junit.Assert.assertNotNull(matrix36);
    }

    @Test
    public void test1996() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1996");
        // The following exception was thrown during execution in test generation
        try {
            com.operations.Matrix.Matrix matrix5 = com.operations.Matrix.MatrixUtils.generateRandomMatrix((int) (byte) 0, 10, (int) (byte) -1, (int) 'a', (long) 1);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
    }

    @Test
    public void test1997() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1997");
        com.operations.Matrix.Matrix matrix2 = com.operations.Matrix.MatrixTransformations.scale2D((double) (byte) 100, 640031.99920004d);
        // The following exception was thrown during execution in test generation
        try {
            double double5 = matrix2.getValue((int) (short) -1, (int) ' ');
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(matrix2);
    }

    @Test
    public void test1998() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1998");
        com.operations.Matrix.Matrix matrix1 = com.operations.Matrix.MatrixTransformations.rotate2D((double) 1.0f);
        com.operations.Matrix.Matrix matrix4 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0L, (double) (byte) 10);
        int int5 = matrix4.getRows();
        com.operations.Matrix.Matrix matrix7 = com.operations.Matrix.MatrixOperations.scalarMultiply(matrix4, (double) 2);
        double double8 = com.operations.Matrix.MatrixUtils.frobeniusNorm(matrix4);
        com.operations.Matrix.Matrix matrix11 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0L, (double) (byte) 10);
        int int12 = matrix11.getRows();
        com.operations.Matrix.Matrix matrix14 = com.operations.Matrix.MatrixOperations.scalarMultiply(matrix11, (double) 2);
        com.operations.Matrix.Matrix matrix15 = com.operations.Matrix.MatrixOperations.subtract(matrix4, matrix14);
        com.operations.Matrix.Matrix matrix16 = com.operations.Matrix.MatrixOperations.add(matrix1, matrix14);
        matrix1.print();
        double[] doubleArray20 = new double[] { 10, 'a' };
        double[] doubleArray23 = new double[] { 10, 'a' };
        double[][] doubleArray24 = new double[][] { doubleArray20, doubleArray23 };
        com.operations.Matrix.Matrix matrix25 = new com.operations.Matrix.Matrix(doubleArray24);
        com.operations.Matrix.Matrix matrix26 = com.operations.Matrix.MatrixOperations.transpose(matrix25);
        com.operations.Matrix.Matrix matrix29 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0L, (double) (byte) 10);
        int int30 = matrix29.getRows();
        com.operations.Matrix.Matrix matrix36 = com.operations.Matrix.MatrixUtils.generateRandomMatrix(100, (int) (byte) 1, (int) '#', (int) '#', 1L);
        boolean boolean38 = com.operations.Matrix.MatrixUtils.compare(matrix29, matrix36, (double) 1.0f);
        com.operations.Matrix.Matrix matrix40 = com.operations.Matrix.MatrixOperations.scalarMultiply(matrix29, (double) 1L);
        matrix29.print();
        com.operations.Matrix.Matrix matrix42 = com.operations.Matrix.MatrixOperations.multiply(matrix26, matrix29);
        com.operations.Matrix.Matrix matrix43 = com.operations.Matrix.MatrixOperations.multiply(matrix1, matrix29);
        int int44 = matrix29.getCols();
        java.lang.Class<?> wildcardClass45 = matrix29.getClass();
        org.junit.Assert.assertNotNull(matrix1);
        org.junit.Assert.assertNotNull(matrix4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 2 + "'", int5 == 2);
        org.junit.Assert.assertNotNull(matrix7);
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 10.0d + "'", double8 == 10.0d);
        org.junit.Assert.assertNotNull(matrix11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 2 + "'", int12 == 2);
        org.junit.Assert.assertNotNull(matrix14);
        org.junit.Assert.assertNotNull(matrix15);
        org.junit.Assert.assertNotNull(matrix16);
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertArrayEquals(doubleArray20, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertArrayEquals(doubleArray23, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertNotNull(matrix26);
        org.junit.Assert.assertNotNull(matrix29);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 2 + "'", int30 == 2);
        org.junit.Assert.assertNotNull(matrix36);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(matrix40);
        org.junit.Assert.assertNotNull(matrix42);
        org.junit.Assert.assertNotNull(matrix43);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 2 + "'", int44 == 2);
        org.junit.Assert.assertNotNull(wildcardClass45);
    }

    @Test
    public void test1999() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1999");
        // The following exception was thrown during execution in test generation
        try {
            com.operations.Matrix.Matrix matrix2 = new com.operations.Matrix.Matrix(97, (int) (byte) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.NegativeArraySizeException; message: -1");
        } catch (java.lang.NegativeArraySizeException e) {
            // Expected exception.
        }
    }

    @Test
    public void test2000() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test2000");
        com.operations.Matrix.Matrix matrix2 = com.operations.Matrix.MatrixTransformations.project2D(52.009614495783374d, (double) 0L);
        org.junit.Assert.assertNotNull(matrix2);
    }
}

