package com.operations.Matrix;
import org.junit.FixMethodOrder;
import org.junit.Test;
import org.junit.runners.MethodSorters;

@FixMethodOrder(MethodSorters.NAME_ASCENDING)
public class RegressionTest7 {

    public static boolean debug = false;

    @Test
    public void test3501() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3501");
        com.operations.Matrix.Matrix matrix5 = com.operations.Matrix.MatrixUtils.generateRandomMatrix(2, (int) (short) 10, 52, (int) ' ', 10L);
        org.junit.Assert.assertNotNull(matrix5);
    }

    @Test
    public void test3502() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3502");
        com.operations.Matrix.Matrix matrix2 = com.operations.Matrix.MatrixTransformations.scale2D((double) 100L, 1.472965077159101d);
        org.junit.Assert.assertNotNull(matrix2);
    }

    @Test
    public void test3503() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3503");
        com.operations.Matrix.Matrix matrix1 = com.operations.Matrix.MatrixTransformations.rotate2D(100.0d);
        int int2 = matrix1.getRows();
        int int3 = matrix1.getCols();
        org.junit.Assert.assertNotNull(matrix1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 2 + "'", int2 == 2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 2 + "'", int3 == 2);
    }

    @Test
    public void test3504() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3504");
        com.operations.Matrix.Matrix matrix5 = com.operations.Matrix.MatrixUtils.generateRandomMatrix((int) (byte) 1, (int) (short) 1, 0, (int) (byte) 1, 0L);
        // The following exception was thrown during execution in test generation
        try {
            matrix5.setValue((int) (byte) 10, 0, 51.2195908953061d);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: Index 10 out of bounds for length 1");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(matrix5);
    }

    @Test
    public void test3505() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3505");
        com.operations.Matrix.Matrix matrix1 = com.operations.Matrix.MatrixTransformations.rotate2D((double) (short) 100);
        double[][] doubleArray2 = matrix1.getData();
        com.operations.Matrix.Matrix matrix3 = new com.operations.Matrix.Matrix(doubleArray2);
        double[] doubleArray6 = new double[] { 10, 'a' };
        double[] doubleArray9 = new double[] { 10, 'a' };
        double[][] doubleArray10 = new double[][] { doubleArray6, doubleArray9 };
        com.operations.Matrix.Matrix matrix11 = new com.operations.Matrix.Matrix(doubleArray10);
        com.operations.Matrix.Matrix matrix12 = new com.operations.Matrix.Matrix(doubleArray10);
        boolean boolean13 = com.operations.Matrix.MatrixUtils.isSquare(matrix12);
        com.operations.Matrix.Matrix[] matrixArray14 = com.operations.Matrix.MatrixDecompositions.luDecomposition(matrix12);
        com.operations.Matrix.Matrix matrix15 = com.operations.Matrix.MatrixOperations.transpose(matrix12);
        boolean boolean17 = com.operations.Matrix.MatrixUtils.compare(matrix3, matrix12, 1.4142135623730951d);
        com.operations.Matrix.Matrix matrix20 = com.operations.Matrix.MatrixTransformations.project2D((double) (short) 100, 35.0d);
        com.operations.Matrix.Matrix matrix22 = com.operations.Matrix.MatrixTransformations.rotate2D((double) (-1L));
        com.operations.Matrix.Matrix matrix24 = com.operations.Matrix.MatrixTransformations.rotate2D((double) (short) 100);
        double[] doubleArray27 = new double[] { 137.90576492663388d, (byte) -1 };
        double[] doubleArray28 = com.operations.Matrix.MatrixSolver.solveGaussian(matrix24, doubleArray27);
        double[] doubleArray29 = com.operations.Matrix.MatrixSolver.solveGaussian(matrix22, doubleArray27);
        double[] doubleArray30 = com.operations.Matrix.MatrixSolver.solveGaussian(matrix20, doubleArray29);
        int int31 = matrix20.getCols();
        boolean boolean32 = com.operations.Matrix.MatrixUtils.isSquare(matrix20);
        com.operations.Matrix.Matrix matrix34 = com.operations.Matrix.MatrixOperations.scalarMultiply(matrix20, (double) 35);
        com.operations.Matrix.Matrix matrix35 = com.operations.Matrix.MatrixOperations.subtract(matrix12, matrix20);
        double double36 = com.operations.Matrix.MatrixUtils.frobeniusNorm(matrix35);
        org.junit.Assert.assertNotNull(matrix1);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertArrayEquals(doubleArray6, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertArrayEquals(doubleArray9, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNotNull(matrixArray14);
        org.junit.Assert.assertNotNull(matrix15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(matrix20);
        org.junit.Assert.assertNotNull(matrix22);
        org.junit.Assert.assertNotNull(matrix24);
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertArrayEquals(doubleArray27, new double[] { 137.90576492663388d, (-1.0d) }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertArrayEquals(doubleArray28, new double[] { (-24.931892522286255d), (-135.63701830716116d) }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertArrayEquals(doubleArray29, new double[] { 137.90221361711127d, 1.4069397643877004d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertArrayEquals(doubleArray30, new double[] { 1.3790221361711128d, 0.04019827898250573d }, 1.0E-15);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 2 + "'", int31 == 2);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertNotNull(matrix34);
        org.junit.Assert.assertNotNull(matrix35);
        org.junit.Assert.assertTrue("'" + double36 + "' != '" + 146.46842663181715d + "'", double36 == 146.46842663181715d);
    }

    @Test
    public void test3506() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3506");
        com.operations.Matrix.Matrix matrix2 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0L, (double) (byte) 10);
        double[] doubleArray5 = new double[] { 10, 'a' };
        double[] doubleArray8 = new double[] { 10, 'a' };
        double[][] doubleArray9 = new double[][] { doubleArray5, doubleArray8 };
        com.operations.Matrix.Matrix matrix10 = new com.operations.Matrix.Matrix(doubleArray9);
        int int11 = matrix10.getCols();
        int int12 = matrix10.getCols();
        int int13 = matrix10.getCols();
        com.operations.Matrix.Matrix[] matrixArray14 = com.operations.Matrix.MatrixDecompositions.luDecomposition(matrix10);
        com.operations.Matrix.Matrix matrix15 = com.operations.Matrix.MatrixOperations.multiply(matrix2, matrix10);
        com.operations.Matrix.Matrix matrix17 = com.operations.Matrix.MatrixTransformations.rotate2D((double) (short) 100);
        boolean boolean19 = com.operations.Matrix.MatrixUtils.compare(matrix10, matrix17, (double) (byte) 0);
        com.operations.Matrix.Matrix[] matrixArray20 = com.operations.Matrix.MatrixDecompositions.luDecomposition(matrix10);
        com.operations.Matrix.Matrix matrix21 = com.operations.Matrix.MatrixOperations.transpose(matrix10);
        com.operations.Matrix.Matrix matrix23 = com.operations.Matrix.MatrixTransformations.rotate2D(35.0d);
        com.operations.Matrix.Matrix matrix24 = com.operations.Matrix.MatrixOperations.subtract(matrix21, matrix23);
        // The following exception was thrown during execution in test generation
        try {
            double double27 = matrix21.getValue((-1), 35);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(matrix2);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertArrayEquals(doubleArray5, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertArrayEquals(doubleArray8, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 2 + "'", int11 == 2);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 2 + "'", int12 == 2);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 2 + "'", int13 == 2);
        org.junit.Assert.assertNotNull(matrixArray14);
        org.junit.Assert.assertNotNull(matrix15);
        org.junit.Assert.assertNotNull(matrix17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(matrixArray20);
        org.junit.Assert.assertNotNull(matrix21);
        org.junit.Assert.assertNotNull(matrix23);
        org.junit.Assert.assertNotNull(matrix24);
    }

    @Test
    public void test3507() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3507");
        com.operations.Matrix.Matrix matrix2 = com.operations.Matrix.MatrixTransformations.scale2D((double) 100, (double) (short) 1);
        com.operations.Matrix.Matrix matrix5 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0L, (double) (byte) 10);
        int int6 = matrix5.getRows();
        com.operations.Matrix.Matrix matrix12 = com.operations.Matrix.MatrixUtils.generateRandomMatrix(100, (int) (byte) 1, (int) '#', (int) '#', 1L);
        boolean boolean14 = com.operations.Matrix.MatrixUtils.compare(matrix5, matrix12, (double) 1.0f);
        matrix12.print();
        com.operations.Matrix.Matrix matrix16 = com.operations.Matrix.MatrixOperations.transpose(matrix12);
        com.operations.Matrix.Matrix matrix17 = com.operations.Matrix.MatrixOperations.transpose(matrix12);
        com.operations.Matrix.Matrix matrix18 = com.operations.Matrix.MatrixOperations.transpose(matrix12);
        matrix18.print();
        boolean boolean21 = com.operations.Matrix.MatrixUtils.compare(matrix2, matrix18, (double) 10);
        java.lang.Class<?> wildcardClass22 = matrix2.getClass();
        org.junit.Assert.assertNotNull(matrix2);
        org.junit.Assert.assertNotNull(matrix5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 2 + "'", int6 == 2);
        org.junit.Assert.assertNotNull(matrix12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(matrix16);
        org.junit.Assert.assertNotNull(matrix17);
        org.junit.Assert.assertNotNull(matrix18);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(wildcardClass22);
    }

    @Test
    public void test3508() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3508");
        double[] doubleArray2 = new double[] { 10, 'a' };
        double[] doubleArray5 = new double[] { 10, 'a' };
        double[][] doubleArray6 = new double[][] { doubleArray2, doubleArray5 };
        com.operations.Matrix.Matrix matrix7 = new com.operations.Matrix.Matrix(doubleArray6);
        com.operations.Matrix.Matrix matrix8 = new com.operations.Matrix.Matrix(doubleArray6);
        boolean boolean9 = com.operations.Matrix.MatrixUtils.isSquare(matrix8);
        double[] doubleArray12 = new double[] { 10, 'a' };
        double[] doubleArray15 = new double[] { 10, 'a' };
        double[][] doubleArray16 = new double[][] { doubleArray12, doubleArray15 };
        com.operations.Matrix.Matrix matrix17 = new com.operations.Matrix.Matrix(doubleArray16);
        int int18 = matrix17.getCols();
        int int19 = matrix17.getCols();
        matrix17.print();
        double[] doubleArray23 = new double[] { 10, 'a' };
        double[] doubleArray26 = new double[] { 10, 'a' };
        double[][] doubleArray27 = new double[][] { doubleArray23, doubleArray26 };
        com.operations.Matrix.Matrix matrix28 = new com.operations.Matrix.Matrix(doubleArray27);
        boolean boolean30 = com.operations.Matrix.MatrixUtils.compare(matrix17, matrix28, (double) (-1));
        com.operations.Matrix.Matrix matrix31 = com.operations.Matrix.MatrixOperations.subtract(matrix8, matrix28);
        com.operations.Matrix.Matrix matrix33 = com.operations.Matrix.MatrixOperations.scalarMultiply(matrix8, (double) 0.0f);
        int int34 = matrix33.getRows();
        java.lang.Class<?> wildcardClass35 = matrix33.getClass();
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertArrayEquals(doubleArray2, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertArrayEquals(doubleArray5, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertArrayEquals(doubleArray12, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertArrayEquals(doubleArray15, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 2 + "'", int18 == 2);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 2 + "'", int19 == 2);
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertArrayEquals(doubleArray23, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertArrayEquals(doubleArray26, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(matrix31);
        org.junit.Assert.assertNotNull(matrix33);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 2 + "'", int34 == 2);
        org.junit.Assert.assertNotNull(wildcardClass35);
    }

    @Test
    public void test3509() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3509");
        com.operations.Matrix.Matrix matrix2 = com.operations.Matrix.MatrixTransformations.scale2D((double) (byte) 100, 350.0d);
        com.operations.Matrix.Matrix matrix5 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0L, (double) (byte) 10);
        double[] doubleArray8 = new double[] { 10, 'a' };
        double[] doubleArray11 = new double[] { 10, 'a' };
        double[][] doubleArray12 = new double[][] { doubleArray8, doubleArray11 };
        com.operations.Matrix.Matrix matrix13 = new com.operations.Matrix.Matrix(doubleArray12);
        int int14 = matrix13.getCols();
        int int15 = matrix13.getCols();
        int int16 = matrix13.getCols();
        com.operations.Matrix.Matrix[] matrixArray17 = com.operations.Matrix.MatrixDecompositions.luDecomposition(matrix13);
        com.operations.Matrix.Matrix matrix18 = com.operations.Matrix.MatrixOperations.multiply(matrix5, matrix13);
        com.operations.Matrix.Matrix matrix20 = com.operations.Matrix.MatrixTransformations.rotate2D((double) (short) 100);
        boolean boolean22 = com.operations.Matrix.MatrixUtils.compare(matrix13, matrix20, (double) (byte) 0);
        double[] doubleArray25 = new double[] { 10, 'a' };
        double[] doubleArray28 = new double[] { 10, 'a' };
        double[][] doubleArray29 = new double[][] { doubleArray25, doubleArray28 };
        com.operations.Matrix.Matrix matrix30 = new com.operations.Matrix.Matrix(doubleArray29);
        com.operations.Matrix.Matrix matrix31 = com.operations.Matrix.MatrixOperations.multiply(matrix13, matrix30);
        com.operations.Matrix.Matrix matrix32 = com.operations.Matrix.MatrixOperations.multiply(matrix2, matrix31);
        int int33 = matrix32.getRows();
        com.operations.Matrix.Matrix matrix38 = com.operations.Matrix.MatrixUtils.generateRandomMatrix((int) '#', (int) (byte) 0, 10, (int) (short) -1);
        com.operations.Matrix.Matrix matrix40 = com.operations.Matrix.MatrixOperations.scalarMultiply(matrix38, (double) 100L);
        com.operations.Matrix.Matrix matrix43 = com.operations.Matrix.MatrixTransformations.project2D(0.0d, (double) 0);
        com.operations.Matrix.Matrix[] matrixArray44 = com.operations.Matrix.MatrixDecompositions.luDecomposition(matrix43);
        com.operations.Matrix.Matrix matrix47 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0L, (double) (byte) 10);
        int int48 = matrix47.getRows();
        com.operations.Matrix.Matrix matrix50 = com.operations.Matrix.MatrixOperations.scalarMultiply(matrix47, (double) 2);
        double double51 = com.operations.Matrix.MatrixUtils.frobeniusNorm(matrix47);
        int int52 = matrix47.getRows();
        com.operations.Matrix.Matrix matrix53 = com.operations.Matrix.MatrixOperations.transpose(matrix47);
        com.operations.Matrix.Matrix matrix54 = com.operations.Matrix.MatrixOperations.multiply(matrix43, matrix53);
        double[] doubleArray57 = new double[] { 10, 'a' };
        double[] doubleArray60 = new double[] { 10, 'a' };
        double[][] doubleArray61 = new double[][] { doubleArray57, doubleArray60 };
        com.operations.Matrix.Matrix matrix62 = new com.operations.Matrix.Matrix(doubleArray61);
        com.operations.Matrix.Matrix matrix63 = new com.operations.Matrix.Matrix(doubleArray61);
        com.operations.Matrix.Matrix[] matrixArray64 = com.operations.Matrix.MatrixDecompositions.luDecomposition(matrix63);
        com.operations.Matrix.Matrix matrix67 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0, (double) 100L);
        com.operations.Matrix.Matrix matrix68 = com.operations.Matrix.MatrixOperations.subtract(matrix63, matrix67);
        double[][] doubleArray69 = matrix68.getData();
        com.operations.Matrix.Matrix matrix70 = new com.operations.Matrix.Matrix(doubleArray69);
        boolean boolean72 = com.operations.Matrix.MatrixUtils.compare(matrix53, matrix70, 32.0d);
        boolean boolean74 = com.operations.Matrix.MatrixUtils.compare(matrix38, matrix53, 146781.22563870353d);
        com.operations.Matrix.Matrix matrix75 = com.operations.Matrix.MatrixOperations.add(matrix32, matrix53);
        // The following exception was thrown during execution in test generation
        try {
            matrix75.setValue((int) (short) 0, 10, 137.15495886388925d);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: Index 10 out of bounds for length 2");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(matrix2);
        org.junit.Assert.assertNotNull(matrix5);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertArrayEquals(doubleArray8, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertArrayEquals(doubleArray11, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 2 + "'", int14 == 2);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 2 + "'", int15 == 2);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 2 + "'", int16 == 2);
        org.junit.Assert.assertNotNull(matrixArray17);
        org.junit.Assert.assertNotNull(matrix18);
        org.junit.Assert.assertNotNull(matrix20);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertArrayEquals(doubleArray25, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertArrayEquals(doubleArray28, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertNotNull(matrix31);
        org.junit.Assert.assertNotNull(matrix32);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 2 + "'", int33 == 2);
        org.junit.Assert.assertNotNull(matrix38);
        org.junit.Assert.assertNotNull(matrix40);
        org.junit.Assert.assertNotNull(matrix43);
        org.junit.Assert.assertNotNull(matrixArray44);
        org.junit.Assert.assertNotNull(matrix47);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 2 + "'", int48 == 2);
        org.junit.Assert.assertNotNull(matrix50);
        org.junit.Assert.assertTrue("'" + double51 + "' != '" + 10.0d + "'", double51 == 10.0d);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 2 + "'", int52 == 2);
        org.junit.Assert.assertNotNull(matrix53);
        org.junit.Assert.assertNotNull(matrix54);
        org.junit.Assert.assertNotNull(doubleArray57);
        org.junit.Assert.assertArrayEquals(doubleArray57, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray60);
        org.junit.Assert.assertArrayEquals(doubleArray60, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray61);
        org.junit.Assert.assertNotNull(matrixArray64);
        org.junit.Assert.assertNotNull(matrix67);
        org.junit.Assert.assertNotNull(matrix68);
        org.junit.Assert.assertNotNull(doubleArray69);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertNotNull(matrix75);
    }

    @Test
    public void test3510() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3510");
        com.operations.Matrix.Matrix matrix2 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0L, (double) (byte) 10);
        double[] doubleArray5 = new double[] { 10, 'a' };
        double[] doubleArray8 = new double[] { 10, 'a' };
        double[][] doubleArray9 = new double[][] { doubleArray5, doubleArray8 };
        com.operations.Matrix.Matrix matrix10 = new com.operations.Matrix.Matrix(doubleArray9);
        int int11 = matrix10.getCols();
        int int12 = matrix10.getCols();
        int int13 = matrix10.getCols();
        com.operations.Matrix.Matrix[] matrixArray14 = com.operations.Matrix.MatrixDecompositions.luDecomposition(matrix10);
        com.operations.Matrix.Matrix matrix15 = com.operations.Matrix.MatrixOperations.multiply(matrix2, matrix10);
        com.operations.Matrix.Matrix matrix17 = com.operations.Matrix.MatrixTransformations.rotate2D((double) (short) 100);
        boolean boolean19 = com.operations.Matrix.MatrixUtils.compare(matrix10, matrix17, (double) (byte) 0);
        double[] doubleArray22 = new double[] { 10, 'a' };
        double[] doubleArray25 = new double[] { 10, 'a' };
        double[][] doubleArray26 = new double[][] { doubleArray22, doubleArray25 };
        com.operations.Matrix.Matrix matrix27 = new com.operations.Matrix.Matrix(doubleArray26);
        com.operations.Matrix.Matrix matrix28 = new com.operations.Matrix.Matrix(doubleArray26);
        com.operations.Matrix.Matrix matrix29 = new com.operations.Matrix.Matrix(doubleArray26);
        boolean boolean31 = com.operations.Matrix.MatrixUtils.compare(matrix10, matrix29, (double) (-1));
        double[][] doubleArray32 = matrix29.getData();
        com.operations.Matrix.Matrix[] matrixArray33 = com.operations.Matrix.MatrixDecompositions.luDecomposition(matrix29);
        com.operations.Matrix.Matrix matrix35 = com.operations.Matrix.MatrixTransformations.rotate2D((double) '4');
        double[] doubleArray38 = new double[] { 10, 'a' };
        double[] doubleArray41 = new double[] { 10, 'a' };
        double[][] doubleArray42 = new double[][] { doubleArray38, doubleArray41 };
        com.operations.Matrix.Matrix matrix43 = new com.operations.Matrix.Matrix(doubleArray42);
        com.operations.Matrix.Matrix matrix44 = new com.operations.Matrix.Matrix(doubleArray42);
        com.operations.Matrix.Matrix matrix46 = com.operations.Matrix.MatrixTransformations.rotate2D((double) (short) 100);
        double[] doubleArray49 = new double[] { 137.90576492663388d, (byte) -1 };
        double[] doubleArray50 = com.operations.Matrix.MatrixSolver.solveGaussian(matrix46, doubleArray49);
        com.operations.Matrix.Matrix matrix51 = com.operations.Matrix.MatrixOperations.add(matrix44, matrix46);
        boolean boolean52 = com.operations.Matrix.MatrixUtils.isSymmetric(matrix51);
        boolean boolean54 = com.operations.Matrix.MatrixUtils.compare(matrix35, matrix51, 364.0054944640259d);
        com.operations.Matrix.Matrix[] matrixArray55 = com.operations.Matrix.MatrixDecompositions.luDecomposition(matrix51);
        com.operations.Matrix.Matrix matrix56 = com.operations.Matrix.MatrixOperations.add(matrix29, matrix51);
        // The following exception was thrown during execution in test generation
        try {
            double double59 = matrix56.getValue(32, (int) (short) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(matrix2);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertArrayEquals(doubleArray5, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertArrayEquals(doubleArray8, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 2 + "'", int11 == 2);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 2 + "'", int12 == 2);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 2 + "'", int13 == 2);
        org.junit.Assert.assertNotNull(matrixArray14);
        org.junit.Assert.assertNotNull(matrix15);
        org.junit.Assert.assertNotNull(matrix17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertArrayEquals(doubleArray22, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertArrayEquals(doubleArray25, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertNotNull(matrixArray33);
        org.junit.Assert.assertNotNull(matrix35);
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertArrayEquals(doubleArray38, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertArrayEquals(doubleArray41, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertNotNull(matrix46);
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertArrayEquals(doubleArray49, new double[] { 137.90576492663388d, (-1.0d) }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertArrayEquals(doubleArray50, new double[] { (-24.931892522286255d), (-135.63701830716116d) }, 1.0E-15);
        org.junit.Assert.assertNotNull(matrix51);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + true + "'", boolean54 == true);
        org.junit.Assert.assertNotNull(matrixArray55);
        org.junit.Assert.assertNotNull(matrix56);
    }

    @Test
    public void test3511() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3511");
        com.operations.Matrix.Matrix matrix2 = com.operations.Matrix.MatrixTransformations.scale2D((double) (byte) 100, 350.0d);
        double double3 = com.operations.Matrix.MatrixUtils.frobeniusNorm(matrix2);
        boolean boolean4 = com.operations.Matrix.MatrixUtils.isSymmetric(matrix2);
        com.operations.Matrix.Matrix matrix5 = com.operations.Matrix.MatrixOperations.transpose(matrix2);
        boolean boolean6 = com.operations.Matrix.MatrixUtils.isSymmetric(matrix2);
        org.junit.Assert.assertNotNull(matrix2);
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + 364.0054944640259d + "'", double3 == 364.0054944640259d);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(matrix5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
    }

    @Test
    public void test3512() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3512");
        com.operations.Matrix.Matrix matrix2 = com.operations.Matrix.MatrixTransformations.scale2D((double) (short) 1, 90.28463890218569d);
        org.junit.Assert.assertNotNull(matrix2);
    }

    @Test
    public void test3513() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3513");
        // The following exception was thrown during execution in test generation
        try {
            com.operations.Matrix.Matrix matrix4 = com.operations.Matrix.MatrixUtils.generateRandomMatrix(0, (int) (short) -1, (int) (byte) 1, 97);
            org.junit.Assert.fail("Expected exception of type java.lang.NegativeArraySizeException; message: -1");
        } catch (java.lang.NegativeArraySizeException e) {
            // Expected exception.
        }
    }

    @Test
    public void test3514() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3514");
        com.operations.Matrix.Matrix matrix1 = com.operations.Matrix.MatrixTransformations.rotate2D(100.0d);
        int int2 = matrix1.getCols();
        int int3 = matrix1.getRows();
        com.operations.Matrix.Matrix matrix6 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0L, (double) (byte) 10);
        int int7 = matrix6.getRows();
        com.operations.Matrix.Matrix matrix9 = com.operations.Matrix.MatrixOperations.scalarMultiply(matrix6, (double) 2);
        double double10 = com.operations.Matrix.MatrixUtils.frobeniusNorm(matrix6);
        com.operations.Matrix.Matrix matrix11 = com.operations.Matrix.MatrixOperations.add(matrix1, matrix6);
        int int12 = matrix1.getRows();
        com.operations.Matrix.Matrix matrix14 = com.operations.Matrix.MatrixTransformations.rotate2D((double) (short) 100);
        double[] doubleArray17 = new double[] { 137.90576492663388d, (byte) -1 };
        double[] doubleArray18 = com.operations.Matrix.MatrixSolver.solveGaussian(matrix14, doubleArray17);
        double[] doubleArray19 = com.operations.Matrix.MatrixSolver.solveGaussian(matrix1, doubleArray18);
        org.junit.Assert.assertNotNull(matrix1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 2 + "'", int2 == 2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 2 + "'", int3 == 2);
        org.junit.Assert.assertNotNull(matrix6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 2 + "'", int7 == 2);
        org.junit.Assert.assertNotNull(matrix9);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 10.0d + "'", double10 == 10.0d);
        org.junit.Assert.assertNotNull(matrix11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 2 + "'", int12 == 2);
        org.junit.Assert.assertNotNull(matrix14);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertArrayEquals(doubleArray17, new double[] { 137.90576492663388d, (-1.0d) }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertArrayEquals(doubleArray18, new double[] { (-24.931892522286255d), (-135.63701830716116d) }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertArrayEquals(doubleArray19, new double[] { (-129.24700952206834d), 48.1062421064292d }, 1.0E-15);
    }

    @Test
    public void test3515() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3515");
        com.operations.Matrix.Matrix matrix5 = com.operations.Matrix.MatrixUtils.generateRandomMatrix((int) (short) 100, 100, (int) (byte) 10, (int) (short) -1, (long) 'a');
        java.lang.Class<?> wildcardClass6 = matrix5.getClass();
        org.junit.Assert.assertNotNull(matrix5);
        org.junit.Assert.assertNotNull(wildcardClass6);
    }

    @Test
    public void test3516() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3516");
        com.operations.Matrix.Matrix matrix2 = com.operations.Matrix.MatrixTransformations.project2D(0.0d, (double) (-1L));
        double[][] doubleArray3 = matrix2.getData();
        org.junit.Assert.assertNotNull(matrix2);
        org.junit.Assert.assertNotNull(doubleArray3);
    }

    @Test
    public void test3517() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3517");
        com.operations.Matrix.Matrix matrix4 = com.operations.Matrix.MatrixUtils.generateRandomMatrix(10, 1, (int) ' ', (int) (byte) 10);
        com.operations.Matrix.Matrix matrix5 = null;
        // The following exception was thrown during execution in test generation
        try {
            com.operations.Matrix.Matrix matrix6 = com.operations.Matrix.MatrixOperations.multiply(matrix4, matrix5);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(matrix4);
    }

    @Test
    public void test3518() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3518");
        com.operations.Matrix.Matrix matrix2 = com.operations.Matrix.MatrixTransformations.project2D((-10.34729635533386d), (double) 0L);
        com.operations.Matrix.Matrix matrix4 = com.operations.Matrix.MatrixTransformations.rotate2D((double) '4');
        matrix4.print();
        com.operations.Matrix.Matrix matrix7 = com.operations.Matrix.MatrixOperations.scalarMultiply(matrix4, 0.0d);
        com.operations.Matrix.Matrix matrix9 = com.operations.Matrix.MatrixTransformations.rotate2D((double) (short) 100);
        double[] doubleArray12 = new double[] { 137.90576492663388d, (byte) -1 };
        double[] doubleArray13 = com.operations.Matrix.MatrixSolver.solveGaussian(matrix9, doubleArray12);
        double[] doubleArray14 = com.operations.Matrix.MatrixSolver.solveGaussian(matrix4, doubleArray12);
        // The following exception was thrown during execution in test generation
        try {
            double[] doubleArray15 = com.operations.Matrix.MatrixSolver.solveGaussian(matrix2, doubleArray14);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Matrix is singular or nearly singular.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(matrix2);
        org.junit.Assert.assertNotNull(matrix4);
        org.junit.Assert.assertNotNull(matrix7);
        org.junit.Assert.assertNotNull(matrix9);
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertArrayEquals(doubleArray12, new double[] { 137.90576492663388d, (-1.0d) }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertArrayEquals(doubleArray13, new double[] { (-24.931892522286255d), (-135.63701830716116d) }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertArrayEquals(doubleArray14, new double[] { 84.11525593703811d, (-109.28688722187387d) }, 1.0E-15);
    }

    @Test
    public void test3519() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3519");
        com.operations.Matrix.Matrix matrix2 = com.operations.Matrix.MatrixTransformations.project2D((double) (short) -1, 350.0d);
        boolean boolean3 = com.operations.Matrix.MatrixUtils.isSymmetric(matrix2);
        java.lang.Class<?> wildcardClass4 = matrix2.getClass();
        org.junit.Assert.assertNotNull(matrix2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNotNull(wildcardClass4);
    }

    @Test
    public void test3520() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3520");
        com.operations.Matrix.Matrix matrix2 = com.operations.Matrix.MatrixTransformations.scale2D((double) 100L, 10.344080432788601d);
        com.operations.Matrix.Matrix matrix3 = com.operations.Matrix.MatrixOperations.transpose(matrix2);
        org.junit.Assert.assertNotNull(matrix2);
        org.junit.Assert.assertNotNull(matrix3);
    }

    @Test
    public void test3521() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3521");
        com.operations.Matrix.Matrix matrix2 = new com.operations.Matrix.Matrix((int) (byte) 0, (int) (short) 100);
        // The following exception was thrown during execution in test generation
        try {
            double[][] doubleArray3 = matrix2.getData();
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
    }

    @Test
    public void test3522() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3522");
        com.operations.Matrix.Matrix matrix2 = com.operations.Matrix.MatrixTransformations.project2D(137.90576492663388d, 0.0d);
        com.operations.Matrix.Matrix matrix5 = com.operations.Matrix.MatrixTransformations.scale2D(1.414213562373095d, (double) 1);
        com.operations.Matrix.Matrix matrix6 = com.operations.Matrix.MatrixOperations.add(matrix2, matrix5);
        int int7 = matrix2.getRows();
        org.junit.Assert.assertNotNull(matrix2);
        org.junit.Assert.assertNotNull(matrix5);
        org.junit.Assert.assertNotNull(matrix6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 2 + "'", int7 == 2);
    }

    @Test
    public void test3523() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3523");
        com.operations.Matrix.Matrix matrix2 = com.operations.Matrix.MatrixTransformations.project2D(12.751772028997056d, 1.472965077159101d);
        org.junit.Assert.assertNotNull(matrix2);
    }

    @Test
    public void test3524() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3524");
        com.operations.Matrix.Matrix matrix2 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0L, (double) (byte) 10);
        com.operations.Matrix.Matrix matrix3 = com.operations.Matrix.MatrixOperations.transpose(matrix2);
        com.operations.Matrix.Matrix matrix6 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0L, (double) (byte) 10);
        double[] doubleArray9 = new double[] { 10, 'a' };
        double[] doubleArray12 = new double[] { 10, 'a' };
        double[][] doubleArray13 = new double[][] { doubleArray9, doubleArray12 };
        com.operations.Matrix.Matrix matrix14 = new com.operations.Matrix.Matrix(doubleArray13);
        int int15 = matrix14.getCols();
        int int16 = matrix14.getCols();
        int int17 = matrix14.getCols();
        com.operations.Matrix.Matrix[] matrixArray18 = com.operations.Matrix.MatrixDecompositions.luDecomposition(matrix14);
        com.operations.Matrix.Matrix matrix19 = com.operations.Matrix.MatrixOperations.multiply(matrix6, matrix14);
        com.operations.Matrix.Matrix matrix21 = com.operations.Matrix.MatrixTransformations.rotate2D((double) (short) 100);
        boolean boolean23 = com.operations.Matrix.MatrixUtils.compare(matrix14, matrix21, (double) (byte) 0);
        com.operations.Matrix.Matrix matrix25 = com.operations.Matrix.MatrixTransformations.rotate2D((double) 1.0f);
        com.operations.Matrix.Matrix matrix28 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0L, (double) (byte) 10);
        int int29 = matrix28.getRows();
        com.operations.Matrix.Matrix matrix31 = com.operations.Matrix.MatrixOperations.scalarMultiply(matrix28, (double) 2);
        double double32 = com.operations.Matrix.MatrixUtils.frobeniusNorm(matrix28);
        com.operations.Matrix.Matrix matrix35 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0L, (double) (byte) 10);
        int int36 = matrix35.getRows();
        com.operations.Matrix.Matrix matrix38 = com.operations.Matrix.MatrixOperations.scalarMultiply(matrix35, (double) 2);
        com.operations.Matrix.Matrix matrix39 = com.operations.Matrix.MatrixOperations.subtract(matrix28, matrix38);
        com.operations.Matrix.Matrix matrix40 = com.operations.Matrix.MatrixOperations.add(matrix25, matrix38);
        double[] doubleArray43 = new double[] { 10, 'a' };
        double[] doubleArray46 = new double[] { 10, 'a' };
        double[][] doubleArray47 = new double[][] { doubleArray43, doubleArray46 };
        com.operations.Matrix.Matrix matrix48 = new com.operations.Matrix.Matrix(doubleArray47);
        int int49 = matrix48.getCols();
        int int50 = matrix48.getCols();
        int int51 = matrix48.getCols();
        com.operations.Matrix.Matrix matrix57 = com.operations.Matrix.MatrixUtils.generateRandomMatrix(100, (int) (byte) 1, (int) '#', (int) '#', 1L);
        double double60 = matrix57.getValue((int) '4', 0);
        double double61 = com.operations.Matrix.MatrixUtils.frobeniusNorm(matrix57);
        boolean boolean62 = com.operations.Matrix.MatrixUtils.isSquare(matrix57);
        boolean boolean64 = com.operations.Matrix.MatrixUtils.compare(matrix48, matrix57, (double) 100L);
        com.operations.Matrix.Matrix matrix66 = com.operations.Matrix.MatrixTransformations.rotate2D((double) (short) 100);
        double[] doubleArray69 = new double[] { 137.90576492663388d, (byte) -1 };
        double[] doubleArray70 = com.operations.Matrix.MatrixSolver.solveGaussian(matrix66, doubleArray69);
        com.operations.Matrix.Matrix matrix73 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0L, (double) (byte) 10);
        double[] doubleArray76 = new double[] { 10, 'a' };
        double[] doubleArray79 = new double[] { 10, 'a' };
        double[][] doubleArray80 = new double[][] { doubleArray76, doubleArray79 };
        com.operations.Matrix.Matrix matrix81 = new com.operations.Matrix.Matrix(doubleArray80);
        int int82 = matrix81.getCols();
        int int83 = matrix81.getCols();
        int int84 = matrix81.getCols();
        com.operations.Matrix.Matrix[] matrixArray85 = com.operations.Matrix.MatrixDecompositions.luDecomposition(matrix81);
        com.operations.Matrix.Matrix matrix86 = com.operations.Matrix.MatrixOperations.multiply(matrix73, matrix81);
        boolean boolean88 = com.operations.Matrix.MatrixUtils.compare(matrix66, matrix73, (double) (-1L));
        com.operations.Matrix.Matrix matrix89 = com.operations.Matrix.MatrixOperations.subtract(matrix48, matrix73);
        com.operations.Matrix.Matrix matrix90 = com.operations.Matrix.MatrixOperations.add(matrix38, matrix73);
        com.operations.Matrix.Matrix matrix91 = com.operations.Matrix.MatrixOperations.add(matrix21, matrix90);
        com.operations.Matrix.Matrix matrix92 = com.operations.Matrix.MatrixOperations.transpose(matrix90);
        int int93 = matrix92.getCols();
        com.operations.Matrix.Matrix matrix94 = com.operations.Matrix.MatrixOperations.multiply(matrix2, matrix92);
        // The following exception was thrown during execution in test generation
        try {
            matrix2.setValue((int) (short) 0, (int) (short) 100, (double) 0);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: Index 100 out of bounds for length 2");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(matrix2);
        org.junit.Assert.assertNotNull(matrix3);
        org.junit.Assert.assertNotNull(matrix6);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertArrayEquals(doubleArray9, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertArrayEquals(doubleArray12, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 2 + "'", int15 == 2);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 2 + "'", int16 == 2);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 2 + "'", int17 == 2);
        org.junit.Assert.assertNotNull(matrixArray18);
        org.junit.Assert.assertNotNull(matrix19);
        org.junit.Assert.assertNotNull(matrix21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(matrix25);
        org.junit.Assert.assertNotNull(matrix28);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 2 + "'", int29 == 2);
        org.junit.Assert.assertNotNull(matrix31);
        org.junit.Assert.assertTrue("'" + double32 + "' != '" + 10.0d + "'", double32 == 10.0d);
        org.junit.Assert.assertNotNull(matrix35);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 2 + "'", int36 == 2);
        org.junit.Assert.assertNotNull(matrix38);
        org.junit.Assert.assertNotNull(matrix39);
        org.junit.Assert.assertNotNull(matrix40);
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertArrayEquals(doubleArray43, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray46);
        org.junit.Assert.assertArrayEquals(doubleArray46, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 2 + "'", int49 == 2);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 2 + "'", int50 == 2);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 2 + "'", int51 == 2);
        org.junit.Assert.assertNotNull(matrix57);
        org.junit.Assert.assertTrue("'" + double60 + "' != '" + 35.0d + "'", double60 == 35.0d);
        org.junit.Assert.assertTrue("'" + double61 + "' != '" + 350.0d + "'", double61 == 350.0d);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertNotNull(matrix66);
        org.junit.Assert.assertNotNull(doubleArray69);
        org.junit.Assert.assertArrayEquals(doubleArray69, new double[] { 137.90576492663388d, (-1.0d) }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray70);
        org.junit.Assert.assertArrayEquals(doubleArray70, new double[] { (-24.931892522286255d), (-135.63701830716116d) }, 1.0E-15);
        org.junit.Assert.assertNotNull(matrix73);
        org.junit.Assert.assertNotNull(doubleArray76);
        org.junit.Assert.assertArrayEquals(doubleArray76, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray79);
        org.junit.Assert.assertArrayEquals(doubleArray79, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray80);
        org.junit.Assert.assertTrue("'" + int82 + "' != '" + 2 + "'", int82 == 2);
        org.junit.Assert.assertTrue("'" + int83 + "' != '" + 2 + "'", int83 == 2);
        org.junit.Assert.assertTrue("'" + int84 + "' != '" + 2 + "'", int84 == 2);
        org.junit.Assert.assertNotNull(matrixArray85);
        org.junit.Assert.assertNotNull(matrix86);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
        org.junit.Assert.assertNotNull(matrix89);
        org.junit.Assert.assertNotNull(matrix90);
        org.junit.Assert.assertNotNull(matrix91);
        org.junit.Assert.assertNotNull(matrix92);
        org.junit.Assert.assertTrue("'" + int93 + "' != '" + 2 + "'", int93 == 2);
        org.junit.Assert.assertNotNull(matrix94);
    }

    @Test
    public void test3525() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3525");
        com.operations.Matrix.Matrix matrix0 = null;
        com.operations.Matrix.Matrix matrix3 = com.operations.Matrix.MatrixTransformations.project2D((double) '#', 0.0d);
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean5 = com.operations.Matrix.MatrixUtils.compare(matrix0, matrix3, 8.603303277930165d);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(matrix3);
    }

    @Test
    public void test3526() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3526");
        com.operations.Matrix.Matrix matrix1 = com.operations.Matrix.MatrixTransformations.rotate2D(4362.86355112226d);
        boolean boolean2 = com.operations.Matrix.MatrixUtils.isSymmetric(matrix1);
        matrix1.print();
        org.junit.Assert.assertNotNull(matrix1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
    }

    @Test
    public void test3527() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3527");
        com.operations.Matrix.Matrix matrix4 = com.operations.Matrix.MatrixUtils.generateRandomMatrix(35, (int) (byte) 10, (int) (byte) 1, 97);
        double double5 = com.operations.Matrix.MatrixUtils.frobeniusNorm(matrix4);
        org.junit.Assert.assertNotNull(matrix4);
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 1031.2030233707922d + "'", double5 == 1031.2030233707922d);
    }

    @Test
    public void test3528() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3528");
        com.operations.Matrix.Matrix matrix4 = com.operations.Matrix.MatrixUtils.generateRandomMatrix((int) (short) 1, 0, (int) (byte) 100, (int) (short) 100);
        com.operations.Matrix.Matrix matrix7 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0.0f, (double) (-1));
        com.operations.Matrix.Matrix matrix10 = com.operations.Matrix.MatrixTransformations.scale2D(146.4308710620817d, (double) 10L);
        com.operations.Matrix.Matrix matrix11 = com.operations.Matrix.MatrixOperations.multiply(matrix7, matrix10);
        com.operations.Matrix.Matrix matrix12 = com.operations.Matrix.MatrixOperations.transpose(matrix7);
        double[] doubleArray15 = new double[] { 10, 'a' };
        double[] doubleArray18 = new double[] { 10, 'a' };
        double[][] doubleArray19 = new double[][] { doubleArray15, doubleArray18 };
        com.operations.Matrix.Matrix matrix20 = new com.operations.Matrix.Matrix(doubleArray19);
        com.operations.Matrix.Matrix matrix21 = new com.operations.Matrix.Matrix(doubleArray19);
        boolean boolean22 = com.operations.Matrix.MatrixUtils.isSquare(matrix21);
        double[] doubleArray25 = new double[] { 10, 'a' };
        double[] doubleArray28 = new double[] { 10, 'a' };
        double[][] doubleArray29 = new double[][] { doubleArray25, doubleArray28 };
        com.operations.Matrix.Matrix matrix30 = new com.operations.Matrix.Matrix(doubleArray29);
        int int31 = matrix30.getCols();
        int int32 = matrix30.getCols();
        matrix30.print();
        double[] doubleArray36 = new double[] { 10, 'a' };
        double[] doubleArray39 = new double[] { 10, 'a' };
        double[][] doubleArray40 = new double[][] { doubleArray36, doubleArray39 };
        com.operations.Matrix.Matrix matrix41 = new com.operations.Matrix.Matrix(doubleArray40);
        boolean boolean43 = com.operations.Matrix.MatrixUtils.compare(matrix30, matrix41, (double) (-1));
        com.operations.Matrix.Matrix matrix44 = com.operations.Matrix.MatrixOperations.subtract(matrix21, matrix41);
        boolean boolean45 = com.operations.Matrix.MatrixUtils.isSymmetric(matrix44);
        com.operations.Matrix.Matrix[] matrixArray46 = com.operations.Matrix.MatrixDecompositions.luDecomposition(matrix44);
        com.operations.Matrix.Matrix matrix47 = com.operations.Matrix.MatrixOperations.subtract(matrix12, matrix44);
        com.operations.Matrix.Matrix matrix50 = com.operations.Matrix.MatrixTransformations.scale2D(1.969615506024416d, 400.0d);
        boolean boolean52 = com.operations.Matrix.MatrixUtils.compare(matrix44, matrix50, 0.0d);
        boolean boolean53 = com.operations.Matrix.MatrixUtils.isSymmetric(matrix44);
        // The following exception was thrown during execution in test generation
        try {
            com.operations.Matrix.Matrix matrix54 = com.operations.Matrix.MatrixOperations.subtract(matrix4, matrix44);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Matrices must have the same dimensions for subtraction.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(matrix4);
        org.junit.Assert.assertNotNull(matrix7);
        org.junit.Assert.assertNotNull(matrix10);
        org.junit.Assert.assertNotNull(matrix11);
        org.junit.Assert.assertNotNull(matrix12);
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertArrayEquals(doubleArray15, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertArrayEquals(doubleArray18, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertArrayEquals(doubleArray25, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertArrayEquals(doubleArray28, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 2 + "'", int31 == 2);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 2 + "'", int32 == 2);
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertArrayEquals(doubleArray36, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertArrayEquals(doubleArray39, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(matrix44);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertNotNull(matrixArray46);
        org.junit.Assert.assertNotNull(matrix47);
        org.junit.Assert.assertNotNull(matrix50);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true);
    }

    @Test
    public void test3529() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3529");
        com.operations.Matrix.Matrix matrix4 = com.operations.Matrix.MatrixUtils.generateRandomMatrix((int) ' ', 32, (int) (short) 1, (int) (short) 0);
        org.junit.Assert.assertNotNull(matrix4);
    }

    @Test
    public void test3530() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3530");
        com.operations.Matrix.Matrix matrix2 = com.operations.Matrix.MatrixTransformations.scale2D(131.06486943494812d, 1040.0d);
        org.junit.Assert.assertNotNull(matrix2);
    }

    @Test
    public void test3531() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3531");
        com.operations.Matrix.Matrix matrix1 = com.operations.Matrix.MatrixTransformations.rotate2D((double) (-1L));
        matrix1.print();
        double[][] doubleArray3 = matrix1.getData();
        boolean boolean4 = com.operations.Matrix.MatrixUtils.isSquare(matrix1);
        org.junit.Assert.assertNotNull(matrix1);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
    }

    @Test
    public void test3532() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3532");
        com.operations.Matrix.Matrix matrix4 = com.operations.Matrix.MatrixUtils.generateRandomMatrix(32, 52, 0, (int) (short) 100);
        org.junit.Assert.assertNotNull(matrix4);
    }

    @Test
    public void test3533() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3533");
        com.operations.Matrix.Matrix matrix2 = com.operations.Matrix.MatrixTransformations.scale2D((double) 100L, 1.0d);
        com.operations.Matrix.Matrix matrix3 = com.operations.Matrix.MatrixOperations.transpose(matrix2);
        double[][] doubleArray4 = matrix3.getData();
        com.operations.Matrix.Matrix matrix7 = com.operations.Matrix.MatrixTransformations.scale2D((double) (byte) 10, (double) 10);
        double[] doubleArray10 = new double[] { 10, 'a' };
        double[] doubleArray13 = new double[] { 10, 'a' };
        double[][] doubleArray14 = new double[][] { doubleArray10, doubleArray13 };
        com.operations.Matrix.Matrix matrix15 = new com.operations.Matrix.Matrix(doubleArray14);
        com.operations.Matrix.Matrix matrix16 = new com.operations.Matrix.Matrix(doubleArray14);
        boolean boolean17 = com.operations.Matrix.MatrixUtils.isSquare(matrix16);
        double[] doubleArray20 = new double[] { 10, 'a' };
        double[] doubleArray23 = new double[] { 10, 'a' };
        double[][] doubleArray24 = new double[][] { doubleArray20, doubleArray23 };
        com.operations.Matrix.Matrix matrix25 = new com.operations.Matrix.Matrix(doubleArray24);
        int int26 = matrix25.getCols();
        int int27 = matrix25.getCols();
        matrix25.print();
        double[] doubleArray31 = new double[] { 10, 'a' };
        double[] doubleArray34 = new double[] { 10, 'a' };
        double[][] doubleArray35 = new double[][] { doubleArray31, doubleArray34 };
        com.operations.Matrix.Matrix matrix36 = new com.operations.Matrix.Matrix(doubleArray35);
        boolean boolean38 = com.operations.Matrix.MatrixUtils.compare(matrix25, matrix36, (double) (-1));
        com.operations.Matrix.Matrix matrix39 = com.operations.Matrix.MatrixOperations.subtract(matrix16, matrix36);
        com.operations.Matrix.Matrix[] matrixArray40 = com.operations.Matrix.MatrixDecompositions.luDecomposition(matrix39);
        double[][] doubleArray41 = matrix39.getData();
        com.operations.Matrix.Matrix matrix42 = new com.operations.Matrix.Matrix(doubleArray41);
        com.operations.Matrix.Matrix matrix43 = com.operations.Matrix.MatrixOperations.multiply(matrix7, matrix42);
        boolean boolean44 = com.operations.Matrix.MatrixUtils.isSymmetric(matrix7);
        com.operations.Matrix.Matrix matrix46 = com.operations.Matrix.MatrixTransformations.rotate2D(350.0d);
        com.operations.Matrix.Matrix matrix47 = com.operations.Matrix.MatrixDecompositions.choleskyDecomposition(matrix46);
        int int48 = matrix46.getRows();
        com.operations.Matrix.Matrix matrix49 = com.operations.Matrix.MatrixOperations.subtract(matrix7, matrix46);
        double[] doubleArray52 = new double[] { 10, 'a' };
        double[] doubleArray55 = new double[] { 10, 'a' };
        double[][] doubleArray56 = new double[][] { doubleArray52, doubleArray55 };
        com.operations.Matrix.Matrix matrix57 = new com.operations.Matrix.Matrix(doubleArray56);
        int int58 = matrix57.getCols();
        int int59 = matrix57.getCols();
        boolean boolean60 = com.operations.Matrix.MatrixUtils.isSquare(matrix57);
        com.operations.Matrix.Matrix matrix61 = com.operations.Matrix.MatrixDecompositions.choleskyDecomposition(matrix57);
        com.operations.Matrix.Matrix matrix64 = com.operations.Matrix.MatrixTransformations.project2D(0.0d, (double) 0);
        com.operations.Matrix.Matrix matrix65 = com.operations.Matrix.MatrixOperations.subtract(matrix61, matrix64);
        com.operations.Matrix.Matrix matrix66 = com.operations.Matrix.MatrixOperations.transpose(matrix64);
        com.operations.Matrix.Matrix matrix67 = com.operations.Matrix.MatrixOperations.subtract(matrix7, matrix66);
        com.operations.Matrix.Matrix matrix68 = com.operations.Matrix.MatrixOperations.transpose(matrix67);
        double double69 = com.operations.Matrix.MatrixUtils.frobeniusNorm(matrix68);
        com.operations.Matrix.Matrix matrix70 = com.operations.Matrix.MatrixOperations.subtract(matrix3, matrix68);
        boolean boolean71 = com.operations.Matrix.MatrixUtils.isSymmetric(matrix3);
        org.junit.Assert.assertNotNull(matrix2);
        org.junit.Assert.assertNotNull(matrix3);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertNotNull(matrix7);
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertArrayEquals(doubleArray10, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertArrayEquals(doubleArray13, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertArrayEquals(doubleArray20, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertArrayEquals(doubleArray23, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 2 + "'", int26 == 2);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 2 + "'", int27 == 2);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertArrayEquals(doubleArray31, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertArrayEquals(doubleArray34, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(matrix39);
        org.junit.Assert.assertNotNull(matrixArray40);
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertNotNull(matrix43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertNotNull(matrix46);
        org.junit.Assert.assertNotNull(matrix47);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 2 + "'", int48 == 2);
        org.junit.Assert.assertNotNull(matrix49);
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertArrayEquals(doubleArray52, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertArrayEquals(doubleArray55, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray56);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 2 + "'", int58 == 2);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 2 + "'", int59 == 2);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + true + "'", boolean60 == true);
        org.junit.Assert.assertNotNull(matrix61);
        org.junit.Assert.assertNotNull(matrix64);
        org.junit.Assert.assertNotNull(matrix65);
        org.junit.Assert.assertNotNull(matrix66);
        org.junit.Assert.assertNotNull(matrix67);
        org.junit.Assert.assertNotNull(matrix68);
        org.junit.Assert.assertTrue("'" + double69 + "' != '" + 14.142135623730951d + "'", double69 == 14.142135623730951d);
        org.junit.Assert.assertNotNull(matrix70);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + true + "'", boolean71 == true);
    }

    @Test
    public void test3534() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3534");
        com.operations.Matrix.Matrix matrix2 = com.operations.Matrix.MatrixTransformations.project2D((double) ' ', 0.0d);
        double[] doubleArray5 = new double[] { 10, 'a' };
        double[] doubleArray8 = new double[] { 10, 'a' };
        double[][] doubleArray9 = new double[][] { doubleArray5, doubleArray8 };
        com.operations.Matrix.Matrix matrix10 = new com.operations.Matrix.Matrix(doubleArray9);
        int int11 = matrix10.getCols();
        boolean boolean12 = com.operations.Matrix.MatrixUtils.isSquare(matrix10);
        com.operations.Matrix.Matrix matrix13 = com.operations.Matrix.MatrixOperations.transpose(matrix10);
        int int14 = matrix13.getRows();
        com.operations.Matrix.Matrix matrix17 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0L, (double) (byte) 10);
        double[] doubleArray20 = new double[] { 10, 'a' };
        double[] doubleArray23 = new double[] { 10, 'a' };
        double[][] doubleArray24 = new double[][] { doubleArray20, doubleArray23 };
        com.operations.Matrix.Matrix matrix25 = new com.operations.Matrix.Matrix(doubleArray24);
        int int26 = matrix25.getCols();
        int int27 = matrix25.getCols();
        int int28 = matrix25.getCols();
        com.operations.Matrix.Matrix[] matrixArray29 = com.operations.Matrix.MatrixDecompositions.luDecomposition(matrix25);
        com.operations.Matrix.Matrix matrix30 = com.operations.Matrix.MatrixOperations.multiply(matrix17, matrix25);
        com.operations.Matrix.Matrix matrix32 = com.operations.Matrix.MatrixTransformations.rotate2D((double) (short) 100);
        boolean boolean34 = com.operations.Matrix.MatrixUtils.compare(matrix25, matrix32, (double) (byte) 0);
        com.operations.Matrix.Matrix matrix35 = com.operations.Matrix.MatrixOperations.multiply(matrix13, matrix25);
        com.operations.Matrix.Matrix matrix36 = com.operations.Matrix.MatrixOperations.add(matrix2, matrix25);
        com.operations.Matrix.Matrix matrix37 = com.operations.Matrix.MatrixOperations.transpose(matrix2);
        com.operations.Matrix.Matrix matrix40 = com.operations.Matrix.MatrixTransformations.scale2D((double) (byte) 100, 350.0d);
        double double41 = com.operations.Matrix.MatrixUtils.frobeniusNorm(matrix40);
        int int42 = matrix40.getCols();
        com.operations.Matrix.Matrix matrix43 = com.operations.Matrix.MatrixOperations.multiply(matrix2, matrix40);
        int int44 = matrix40.getRows();
        boolean boolean45 = com.operations.Matrix.MatrixUtils.isSymmetric(matrix40);
        com.operations.Matrix.Matrix[] matrixArray46 = com.operations.Matrix.MatrixDecompositions.luDecomposition(matrix40);
        int int47 = matrix40.getCols();
        // The following exception was thrown during execution in test generation
        try {
            matrix40.setValue(97, (int) ' ', 141.9260370756543d);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: Index 97 out of bounds for length 2");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(matrix2);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertArrayEquals(doubleArray5, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertArrayEquals(doubleArray8, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 2 + "'", int11 == 2);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(matrix13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 2 + "'", int14 == 2);
        org.junit.Assert.assertNotNull(matrix17);
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertArrayEquals(doubleArray20, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertArrayEquals(doubleArray23, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 2 + "'", int26 == 2);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 2 + "'", int27 == 2);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 2 + "'", int28 == 2);
        org.junit.Assert.assertNotNull(matrixArray29);
        org.junit.Assert.assertNotNull(matrix30);
        org.junit.Assert.assertNotNull(matrix32);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(matrix35);
        org.junit.Assert.assertNotNull(matrix36);
        org.junit.Assert.assertNotNull(matrix37);
        org.junit.Assert.assertNotNull(matrix40);
        org.junit.Assert.assertTrue("'" + double41 + "' != '" + 364.0054944640259d + "'", double41 == 364.0054944640259d);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 2 + "'", int42 == 2);
        org.junit.Assert.assertNotNull(matrix43);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 2 + "'", int44 == 2);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertNotNull(matrixArray46);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 2 + "'", int47 == 2);
    }

    @Test
    public void test3535() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3535");
        double[] doubleArray2 = new double[] { 10, 'a' };
        double[] doubleArray5 = new double[] { 10, 'a' };
        double[][] doubleArray6 = new double[][] { doubleArray2, doubleArray5 };
        com.operations.Matrix.Matrix matrix7 = new com.operations.Matrix.Matrix(doubleArray6);
        int int8 = matrix7.getCols();
        boolean boolean9 = com.operations.Matrix.MatrixUtils.isSquare(matrix7);
        com.operations.Matrix.Matrix matrix11 = com.operations.Matrix.MatrixOperations.scalarMultiply(matrix7, 98.07140255956371d);
        // The following exception was thrown during execution in test generation
        try {
            matrix7.setValue(0, (-1), 975.1410154434076d);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: Index -1 out of bounds for length 2");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertArrayEquals(doubleArray2, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertArrayEquals(doubleArray5, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 2 + "'", int8 == 2);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertNotNull(matrix11);
    }

    @Test
    public void test3536() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3536");
        com.operations.Matrix.Matrix matrix4 = com.operations.Matrix.MatrixUtils.generateRandomMatrix((int) (byte) 10, 35, (int) (byte) 1, 35);
        org.junit.Assert.assertNotNull(matrix4);
    }

    @Test
    public void test3537() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3537");
        com.operations.Matrix.Matrix matrix1 = com.operations.Matrix.MatrixTransformations.rotate2D((double) (short) 100);
        double[] doubleArray4 = new double[] { 137.90576492663388d, (byte) -1 };
        double[] doubleArray5 = com.operations.Matrix.MatrixSolver.solveGaussian(matrix1, doubleArray4);
        com.operations.Matrix.Matrix matrix8 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0L, (double) (byte) 10);
        double[] doubleArray11 = new double[] { 10, 'a' };
        double[] doubleArray14 = new double[] { 10, 'a' };
        double[][] doubleArray15 = new double[][] { doubleArray11, doubleArray14 };
        com.operations.Matrix.Matrix matrix16 = new com.operations.Matrix.Matrix(doubleArray15);
        int int17 = matrix16.getCols();
        int int18 = matrix16.getCols();
        int int19 = matrix16.getCols();
        com.operations.Matrix.Matrix[] matrixArray20 = com.operations.Matrix.MatrixDecompositions.luDecomposition(matrix16);
        com.operations.Matrix.Matrix matrix21 = com.operations.Matrix.MatrixOperations.multiply(matrix8, matrix16);
        boolean boolean23 = com.operations.Matrix.MatrixUtils.compare(matrix1, matrix8, (double) (-1L));
        boolean boolean24 = com.operations.Matrix.MatrixUtils.isSymmetric(matrix1);
        com.operations.Matrix.Matrix matrix27 = com.operations.Matrix.MatrixTransformations.scale2D((double) (-1L), (double) '4');
        double[][] doubleArray28 = matrix27.getData();
        com.operations.Matrix.Matrix matrix29 = com.operations.Matrix.MatrixOperations.multiply(matrix1, matrix27);
        double double30 = com.operations.Matrix.MatrixUtils.frobeniusNorm(matrix29);
        int int31 = matrix29.getCols();
        com.operations.Matrix.Matrix[] matrixArray32 = com.operations.Matrix.MatrixDecompositions.luDecomposition(matrix29);
        com.operations.Matrix.Matrix matrix35 = com.operations.Matrix.MatrixTransformations.project2D((double) (byte) 100, 32.0d);
        boolean boolean36 = com.operations.Matrix.MatrixUtils.isSquare(matrix35);
        com.operations.Matrix.Matrix matrix37 = com.operations.Matrix.MatrixDecompositions.choleskyDecomposition(matrix35);
        com.operations.Matrix.Matrix matrix40 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0L, (double) (byte) 10);
        int int41 = matrix40.getRows();
        com.operations.Matrix.Matrix matrix44 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0L, (double) (byte) 10);
        int int45 = matrix44.getRows();
        com.operations.Matrix.Matrix matrix47 = com.operations.Matrix.MatrixOperations.scalarMultiply(matrix44, (double) 2);
        com.operations.Matrix.Matrix matrix48 = com.operations.Matrix.MatrixOperations.subtract(matrix40, matrix44);
        com.operations.Matrix.Matrix matrix51 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0L, (double) (byte) 10);
        int int52 = matrix51.getRows();
        com.operations.Matrix.Matrix matrix58 = com.operations.Matrix.MatrixUtils.generateRandomMatrix(100, (int) (byte) 1, (int) '#', (int) '#', 1L);
        boolean boolean60 = com.operations.Matrix.MatrixUtils.compare(matrix51, matrix58, (double) 1.0f);
        com.operations.Matrix.Matrix matrix62 = com.operations.Matrix.MatrixOperations.scalarMultiply(matrix51, (double) 1L);
        boolean boolean64 = com.operations.Matrix.MatrixUtils.compare(matrix48, matrix62, 0.0d);
        com.operations.Matrix.Matrix matrix65 = com.operations.Matrix.MatrixOperations.add(matrix35, matrix48);
        com.operations.Matrix.Matrix matrix68 = com.operations.Matrix.MatrixTransformations.scale2D((double) (byte) 100, 260.95643973734866d);
        com.operations.Matrix.Matrix matrix71 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0L, (double) (byte) 10);
        double[] doubleArray74 = new double[] { 10, 'a' };
        double[] doubleArray77 = new double[] { 10, 'a' };
        double[][] doubleArray78 = new double[][] { doubleArray74, doubleArray77 };
        com.operations.Matrix.Matrix matrix79 = new com.operations.Matrix.Matrix(doubleArray78);
        int int80 = matrix79.getCols();
        int int81 = matrix79.getCols();
        int int82 = matrix79.getCols();
        com.operations.Matrix.Matrix[] matrixArray83 = com.operations.Matrix.MatrixDecompositions.luDecomposition(matrix79);
        com.operations.Matrix.Matrix matrix84 = com.operations.Matrix.MatrixOperations.multiply(matrix71, matrix79);
        com.operations.Matrix.Matrix matrix86 = com.operations.Matrix.MatrixTransformations.rotate2D((double) (short) 100);
        boolean boolean88 = com.operations.Matrix.MatrixUtils.compare(matrix79, matrix86, (double) (byte) 0);
        com.operations.Matrix.Matrix[] matrixArray89 = com.operations.Matrix.MatrixDecompositions.luDecomposition(matrix79);
        com.operations.Matrix.Matrix matrix90 = com.operations.Matrix.MatrixDecompositions.choleskyDecomposition(matrix79);
        com.operations.Matrix.Matrix matrix91 = com.operations.Matrix.MatrixOperations.transpose(matrix90);
        boolean boolean93 = com.operations.Matrix.MatrixUtils.compare(matrix68, matrix90, (double) 100);
        boolean boolean95 = com.operations.Matrix.MatrixUtils.compare(matrix35, matrix90, 14.142135623730951d);
        boolean boolean96 = com.operations.Matrix.MatrixUtils.isSquare(matrix90);
        boolean boolean98 = com.operations.Matrix.MatrixUtils.compare(matrix29, matrix90, 10.270003094125075d);
        org.junit.Assert.assertNotNull(matrix1);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertArrayEquals(doubleArray4, new double[] { 137.90576492663388d, (-1.0d) }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertArrayEquals(doubleArray5, new double[] { (-24.931892522286255d), (-135.63701830716116d) }, 1.0E-15);
        org.junit.Assert.assertNotNull(matrix8);
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertArrayEquals(doubleArray11, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertArrayEquals(doubleArray14, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 2 + "'", int17 == 2);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 2 + "'", int18 == 2);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 2 + "'", int19 == 2);
        org.junit.Assert.assertNotNull(matrixArray20);
        org.junit.Assert.assertNotNull(matrix21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(matrix27);
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertNotNull(matrix29);
        org.junit.Assert.assertTrue("'" + double30 + "' != '" + 52.009614495783374d + "'", double30 == 52.009614495783374d);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 2 + "'", int31 == 2);
        org.junit.Assert.assertNotNull(matrixArray32);
        org.junit.Assert.assertNotNull(matrix35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertNotNull(matrix37);
        org.junit.Assert.assertNotNull(matrix40);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 2 + "'", int41 == 2);
        org.junit.Assert.assertNotNull(matrix44);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 2 + "'", int45 == 2);
        org.junit.Assert.assertNotNull(matrix47);
        org.junit.Assert.assertNotNull(matrix48);
        org.junit.Assert.assertNotNull(matrix51);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 2 + "'", int52 == 2);
        org.junit.Assert.assertNotNull(matrix58);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertNotNull(matrix62);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertNotNull(matrix65);
        org.junit.Assert.assertNotNull(matrix68);
        org.junit.Assert.assertNotNull(matrix71);
        org.junit.Assert.assertNotNull(doubleArray74);
        org.junit.Assert.assertArrayEquals(doubleArray74, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray77);
        org.junit.Assert.assertArrayEquals(doubleArray77, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray78);
        org.junit.Assert.assertTrue("'" + int80 + "' != '" + 2 + "'", int80 == 2);
        org.junit.Assert.assertTrue("'" + int81 + "' != '" + 2 + "'", int81 == 2);
        org.junit.Assert.assertTrue("'" + int82 + "' != '" + 2 + "'", int82 == 2);
        org.junit.Assert.assertNotNull(matrixArray83);
        org.junit.Assert.assertNotNull(matrix84);
        org.junit.Assert.assertNotNull(matrix86);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
        org.junit.Assert.assertNotNull(matrixArray89);
        org.junit.Assert.assertNotNull(matrix90);
        org.junit.Assert.assertNotNull(matrix91);
        org.junit.Assert.assertTrue("'" + boolean93 + "' != '" + false + "'", boolean93 == false);
        org.junit.Assert.assertTrue("'" + boolean95 + "' != '" + false + "'", boolean95 == false);
        org.junit.Assert.assertTrue("'" + boolean96 + "' != '" + true + "'", boolean96 == true);
        org.junit.Assert.assertTrue("'" + boolean98 + "' != '" + false + "'", boolean98 == false);
    }

    @Test
    public void test3538() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3538");
        com.operations.Matrix.Matrix matrix2 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0L, (double) (byte) 10);
        double[] doubleArray5 = new double[] { 10, 'a' };
        double[] doubleArray8 = new double[] { 10, 'a' };
        double[][] doubleArray9 = new double[][] { doubleArray5, doubleArray8 };
        com.operations.Matrix.Matrix matrix10 = new com.operations.Matrix.Matrix(doubleArray9);
        int int11 = matrix10.getCols();
        int int12 = matrix10.getCols();
        int int13 = matrix10.getCols();
        com.operations.Matrix.Matrix[] matrixArray14 = com.operations.Matrix.MatrixDecompositions.luDecomposition(matrix10);
        com.operations.Matrix.Matrix matrix15 = com.operations.Matrix.MatrixOperations.multiply(matrix2, matrix10);
        com.operations.Matrix.Matrix matrix17 = com.operations.Matrix.MatrixTransformations.rotate2D((double) (short) 100);
        boolean boolean19 = com.operations.Matrix.MatrixUtils.compare(matrix10, matrix17, (double) (byte) 0);
        com.operations.Matrix.Matrix[] matrixArray20 = com.operations.Matrix.MatrixDecompositions.luDecomposition(matrix10);
        com.operations.Matrix.Matrix matrix21 = com.operations.Matrix.MatrixOperations.transpose(matrix10);
        com.operations.Matrix.Matrix matrix24 = com.operations.Matrix.MatrixTransformations.scale2D((double) 1.0f, (double) 1);
        com.operations.Matrix.Matrix matrix26 = com.operations.Matrix.MatrixTransformations.rotate2D((double) 1.0f);
        com.operations.Matrix.Matrix matrix29 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0L, (double) (byte) 10);
        int int30 = matrix29.getRows();
        com.operations.Matrix.Matrix matrix32 = com.operations.Matrix.MatrixOperations.scalarMultiply(matrix29, (double) 2);
        double double33 = com.operations.Matrix.MatrixUtils.frobeniusNorm(matrix29);
        com.operations.Matrix.Matrix matrix36 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0L, (double) (byte) 10);
        int int37 = matrix36.getRows();
        com.operations.Matrix.Matrix matrix39 = com.operations.Matrix.MatrixOperations.scalarMultiply(matrix36, (double) 2);
        com.operations.Matrix.Matrix matrix40 = com.operations.Matrix.MatrixOperations.subtract(matrix29, matrix39);
        com.operations.Matrix.Matrix matrix41 = com.operations.Matrix.MatrixOperations.add(matrix26, matrix39);
        boolean boolean43 = com.operations.Matrix.MatrixUtils.compare(matrix24, matrix26, (double) (byte) -1);
        com.operations.Matrix.Matrix matrix44 = com.operations.Matrix.MatrixOperations.subtract(matrix21, matrix24);
        com.operations.Matrix.Matrix matrix47 = com.operations.Matrix.MatrixTransformations.scale2D((double) (-1L), (double) '4');
        com.operations.Matrix.Matrix matrix48 = com.operations.Matrix.MatrixOperations.transpose(matrix47);
        double[] doubleArray51 = new double[] { 10, 'a' };
        double[] doubleArray54 = new double[] { 10, 'a' };
        double[][] doubleArray55 = new double[][] { doubleArray51, doubleArray54 };
        com.operations.Matrix.Matrix matrix56 = new com.operations.Matrix.Matrix(doubleArray55);
        com.operations.Matrix.Matrix matrix57 = new com.operations.Matrix.Matrix(doubleArray55);
        com.operations.Matrix.Matrix matrix59 = com.operations.Matrix.MatrixTransformations.rotate2D((double) (short) 100);
        double[] doubleArray62 = new double[] { 137.90576492663388d, (byte) -1 };
        double[] doubleArray63 = com.operations.Matrix.MatrixSolver.solveGaussian(matrix59, doubleArray62);
        com.operations.Matrix.Matrix matrix64 = com.operations.Matrix.MatrixOperations.add(matrix57, matrix59);
        com.operations.Matrix.Matrix matrix65 = com.operations.Matrix.MatrixOperations.transpose(matrix59);
        com.operations.Matrix.Matrix matrix66 = com.operations.Matrix.MatrixOperations.multiply(matrix48, matrix59);
        com.operations.Matrix.Matrix matrix67 = com.operations.Matrix.MatrixOperations.multiply(matrix44, matrix48);
        com.operations.Matrix.Matrix matrix69 = com.operations.Matrix.MatrixTransformations.rotate2D((double) 1.0f);
        com.operations.Matrix.Matrix matrix72 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0L, (double) (byte) 10);
        int int73 = matrix72.getRows();
        com.operations.Matrix.Matrix matrix75 = com.operations.Matrix.MatrixOperations.scalarMultiply(matrix72, (double) 2);
        boolean boolean77 = com.operations.Matrix.MatrixUtils.compare(matrix69, matrix75, (double) 10.0f);
        com.operations.Matrix.Matrix matrix78 = com.operations.Matrix.MatrixOperations.subtract(matrix67, matrix75);
        double[] doubleArray81 = new double[] { 10, 'a' };
        double[] doubleArray84 = new double[] { 10, 'a' };
        double[][] doubleArray85 = new double[][] { doubleArray81, doubleArray84 };
        com.operations.Matrix.Matrix matrix86 = new com.operations.Matrix.Matrix(doubleArray85);
        com.operations.Matrix.Matrix matrix87 = new com.operations.Matrix.Matrix(doubleArray85);
        com.operations.Matrix.Matrix[] matrixArray88 = com.operations.Matrix.MatrixDecompositions.luDecomposition(matrix87);
        com.operations.Matrix.Matrix matrix89 = com.operations.Matrix.MatrixDecompositions.choleskyDecomposition(matrix87);
        matrix89.print();
        com.operations.Matrix.Matrix matrix91 = com.operations.Matrix.MatrixOperations.transpose(matrix89);
        com.operations.Matrix.Matrix matrix92 = com.operations.Matrix.MatrixOperations.add(matrix67, matrix91);
        org.junit.Assert.assertNotNull(matrix2);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertArrayEquals(doubleArray5, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertArrayEquals(doubleArray8, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 2 + "'", int11 == 2);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 2 + "'", int12 == 2);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 2 + "'", int13 == 2);
        org.junit.Assert.assertNotNull(matrixArray14);
        org.junit.Assert.assertNotNull(matrix15);
        org.junit.Assert.assertNotNull(matrix17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(matrixArray20);
        org.junit.Assert.assertNotNull(matrix21);
        org.junit.Assert.assertNotNull(matrix24);
        org.junit.Assert.assertNotNull(matrix26);
        org.junit.Assert.assertNotNull(matrix29);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 2 + "'", int30 == 2);
        org.junit.Assert.assertNotNull(matrix32);
        org.junit.Assert.assertTrue("'" + double33 + "' != '" + 10.0d + "'", double33 == 10.0d);
        org.junit.Assert.assertNotNull(matrix36);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 2 + "'", int37 == 2);
        org.junit.Assert.assertNotNull(matrix39);
        org.junit.Assert.assertNotNull(matrix40);
        org.junit.Assert.assertNotNull(matrix41);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(matrix44);
        org.junit.Assert.assertNotNull(matrix47);
        org.junit.Assert.assertNotNull(matrix48);
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertArrayEquals(doubleArray51, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray54);
        org.junit.Assert.assertArrayEquals(doubleArray54, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertNotNull(matrix59);
        org.junit.Assert.assertNotNull(doubleArray62);
        org.junit.Assert.assertArrayEquals(doubleArray62, new double[] { 137.90576492663388d, (-1.0d) }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray63);
        org.junit.Assert.assertArrayEquals(doubleArray63, new double[] { (-24.931892522286255d), (-135.63701830716116d) }, 1.0E-15);
        org.junit.Assert.assertNotNull(matrix64);
        org.junit.Assert.assertNotNull(matrix65);
        org.junit.Assert.assertNotNull(matrix66);
        org.junit.Assert.assertNotNull(matrix67);
        org.junit.Assert.assertNotNull(matrix69);
        org.junit.Assert.assertNotNull(matrix72);
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + 2 + "'", int73 == 2);
        org.junit.Assert.assertNotNull(matrix75);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertNotNull(matrix78);
        org.junit.Assert.assertNotNull(doubleArray81);
        org.junit.Assert.assertArrayEquals(doubleArray81, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray84);
        org.junit.Assert.assertArrayEquals(doubleArray84, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray85);
        org.junit.Assert.assertNotNull(matrixArray88);
        org.junit.Assert.assertNotNull(matrix89);
        org.junit.Assert.assertNotNull(matrix91);
        org.junit.Assert.assertNotNull(matrix92);
    }

    @Test
    public void test3539() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3539");
        com.operations.Matrix.Matrix matrix2 = com.operations.Matrix.MatrixTransformations.scale2D((double) 10L, 145.11374848717816d);
        // The following exception was thrown during execution in test generation
        try {
            double double5 = matrix2.getValue((int) '4', 10);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(matrix2);
    }

    @Test
    public void test3540() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3540");
        // The following exception was thrown during execution in test generation
        try {
            com.operations.Matrix.Matrix matrix5 = com.operations.Matrix.MatrixUtils.generateRandomMatrix((int) (short) 0, 0, (int) (byte) 0, (int) (short) 10, 0L);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
    }

    @Test
    public void test3541() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3541");
        com.operations.Matrix.Matrix matrix2 = com.operations.Matrix.MatrixTransformations.scale2D((double) 10L, 145.11374848717816d);
        com.operations.Matrix.Matrix matrix4 = com.operations.Matrix.MatrixTransformations.rotate2D((double) '4');
        double[] doubleArray7 = new double[] { 10, 'a' };
        double[] doubleArray10 = new double[] { 10, 'a' };
        double[][] doubleArray11 = new double[][] { doubleArray7, doubleArray10 };
        com.operations.Matrix.Matrix matrix12 = new com.operations.Matrix.Matrix(doubleArray11);
        com.operations.Matrix.Matrix matrix13 = new com.operations.Matrix.Matrix(doubleArray11);
        com.operations.Matrix.Matrix matrix15 = com.operations.Matrix.MatrixTransformations.rotate2D((double) (short) 100);
        double[] doubleArray18 = new double[] { 137.90576492663388d, (byte) -1 };
        double[] doubleArray19 = com.operations.Matrix.MatrixSolver.solveGaussian(matrix15, doubleArray18);
        com.operations.Matrix.Matrix matrix20 = com.operations.Matrix.MatrixOperations.add(matrix13, matrix15);
        boolean boolean21 = com.operations.Matrix.MatrixUtils.isSymmetric(matrix20);
        boolean boolean23 = com.operations.Matrix.MatrixUtils.compare(matrix4, matrix20, 364.0054944640259d);
        com.operations.Matrix.Matrix[] matrixArray24 = com.operations.Matrix.MatrixDecompositions.luDecomposition(matrix20);
        com.operations.Matrix.Matrix matrix26 = com.operations.Matrix.MatrixTransformations.rotate2D(100.0d);
        int int27 = matrix26.getCols();
        matrix26.print();
        com.operations.Matrix.Matrix matrix30 = com.operations.Matrix.MatrixOperations.scalarMultiply(matrix26, (double) (byte) 1);
        boolean boolean31 = com.operations.Matrix.MatrixUtils.isSymmetric(matrix26);
        com.operations.Matrix.Matrix matrix33 = com.operations.Matrix.MatrixTransformations.rotate2D((-1.0d));
        com.operations.Matrix.Matrix matrix35 = com.operations.Matrix.MatrixTransformations.rotate2D((double) (-1L));
        com.operations.Matrix.Matrix matrix37 = com.operations.Matrix.MatrixTransformations.rotate2D((double) (short) 100);
        double[] doubleArray40 = new double[] { 137.90576492663388d, (byte) -1 };
        double[] doubleArray41 = com.operations.Matrix.MatrixSolver.solveGaussian(matrix37, doubleArray40);
        double[] doubleArray42 = com.operations.Matrix.MatrixSolver.solveGaussian(matrix35, doubleArray40);
        double[] doubleArray43 = com.operations.Matrix.MatrixSolver.solveGaussian(matrix33, doubleArray40);
        double[] doubleArray44 = com.operations.Matrix.MatrixSolver.solveGaussian(matrix26, doubleArray43);
        double[] doubleArray45 = com.operations.Matrix.MatrixSolver.solveGaussian(matrix20, doubleArray43);
        com.operations.Matrix.Matrix matrix46 = com.operations.Matrix.MatrixOperations.add(matrix2, matrix20);
        com.operations.Matrix.Matrix[] matrixArray47 = com.operations.Matrix.MatrixDecompositions.luDecomposition(matrix46);
        org.junit.Assert.assertNotNull(matrix2);
        org.junit.Assert.assertNotNull(matrix4);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertArrayEquals(doubleArray7, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertArrayEquals(doubleArray10, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertNotNull(matrix15);
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertArrayEquals(doubleArray18, new double[] { 137.90576492663388d, (-1.0d) }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertArrayEquals(doubleArray19, new double[] { (-24.931892522286255d), (-135.63701830716116d) }, 1.0E-15);
        org.junit.Assert.assertNotNull(matrix20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertNotNull(matrixArray24);
        org.junit.Assert.assertNotNull(matrix26);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 2 + "'", int27 == 2);
        org.junit.Assert.assertNotNull(matrix30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(matrix33);
        org.junit.Assert.assertNotNull(matrix35);
        org.junit.Assert.assertNotNull(matrix37);
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertArrayEquals(doubleArray40, new double[] { 137.90576492663388d, (-1.0d) }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertArrayEquals(doubleArray41, new double[] { (-24.931892522286255d), (-135.63701830716116d) }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertArrayEquals(doubleArray42, new double[] { 137.90221361711127d, 1.4069397643877004d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertArrayEquals(doubleArray43, new double[] { 137.90221361711127d, 1.4069397643877004d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertArrayEquals(doubleArray44, new double[] { (-22.56090290285694d), (-136.05148165384995d) }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertArrayEquals(doubleArray45, new double[] { (-128.00364213570185d), 14.536356206966005d }, 1.0E-15);
        org.junit.Assert.assertNotNull(matrix46);
        org.junit.Assert.assertNotNull(matrixArray47);
    }

    @Test
    public void test3542() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3542");
        double[] doubleArray2 = new double[] { 10, 'a' };
        double[] doubleArray5 = new double[] { 10, 'a' };
        double[][] doubleArray6 = new double[][] { doubleArray2, doubleArray5 };
        com.operations.Matrix.Matrix matrix7 = new com.operations.Matrix.Matrix(doubleArray6);
        com.operations.Matrix.Matrix matrix8 = new com.operations.Matrix.Matrix(doubleArray6);
        com.operations.Matrix.Matrix[] matrixArray9 = com.operations.Matrix.MatrixDecompositions.luDecomposition(matrix8);
        double double10 = com.operations.Matrix.MatrixUtils.frobeniusNorm(matrix8);
        double[] doubleArray13 = new double[] { 10, 'a' };
        double[] doubleArray16 = new double[] { 10, 'a' };
        double[][] doubleArray17 = new double[][] { doubleArray13, doubleArray16 };
        com.operations.Matrix.Matrix matrix18 = new com.operations.Matrix.Matrix(doubleArray17);
        com.operations.Matrix.Matrix matrix19 = new com.operations.Matrix.Matrix(doubleArray17);
        boolean boolean20 = com.operations.Matrix.MatrixUtils.isSquare(matrix19);
        double[] doubleArray23 = new double[] { 10, 'a' };
        double[] doubleArray26 = new double[] { 10, 'a' };
        double[][] doubleArray27 = new double[][] { doubleArray23, doubleArray26 };
        com.operations.Matrix.Matrix matrix28 = new com.operations.Matrix.Matrix(doubleArray27);
        int int29 = matrix28.getCols();
        int int30 = matrix28.getCols();
        matrix28.print();
        double[] doubleArray34 = new double[] { 10, 'a' };
        double[] doubleArray37 = new double[] { 10, 'a' };
        double[][] doubleArray38 = new double[][] { doubleArray34, doubleArray37 };
        com.operations.Matrix.Matrix matrix39 = new com.operations.Matrix.Matrix(doubleArray38);
        boolean boolean41 = com.operations.Matrix.MatrixUtils.compare(matrix28, matrix39, (double) (-1));
        com.operations.Matrix.Matrix matrix42 = com.operations.Matrix.MatrixOperations.subtract(matrix19, matrix39);
        com.operations.Matrix.Matrix[] matrixArray43 = com.operations.Matrix.MatrixDecompositions.luDecomposition(matrix42);
        double[][] doubleArray44 = matrix42.getData();
        com.operations.Matrix.Matrix matrix47 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0L, (double) (byte) 10);
        double[] doubleArray50 = new double[] { 10, 'a' };
        double[] doubleArray53 = new double[] { 10, 'a' };
        double[][] doubleArray54 = new double[][] { doubleArray50, doubleArray53 };
        com.operations.Matrix.Matrix matrix55 = new com.operations.Matrix.Matrix(doubleArray54);
        int int56 = matrix55.getCols();
        int int57 = matrix55.getCols();
        int int58 = matrix55.getCols();
        com.operations.Matrix.Matrix[] matrixArray59 = com.operations.Matrix.MatrixDecompositions.luDecomposition(matrix55);
        com.operations.Matrix.Matrix matrix60 = com.operations.Matrix.MatrixOperations.multiply(matrix47, matrix55);
        int int61 = matrix55.getRows();
        com.operations.Matrix.Matrix matrix62 = com.operations.Matrix.MatrixOperations.multiply(matrix42, matrix55);
        boolean boolean64 = com.operations.Matrix.MatrixUtils.compare(matrix8, matrix62, (double) 2);
        com.operations.Matrix.Matrix matrix65 = com.operations.Matrix.MatrixOperations.transpose(matrix62);
        double[] doubleArray68 = new double[] { 10, 'a' };
        double[] doubleArray71 = new double[] { 10, 'a' };
        double[][] doubleArray72 = new double[][] { doubleArray68, doubleArray71 };
        com.operations.Matrix.Matrix matrix73 = new com.operations.Matrix.Matrix(doubleArray72);
        int int74 = matrix73.getCols();
        int int75 = matrix73.getCols();
        int int76 = matrix73.getCols();
        com.operations.Matrix.Matrix matrix82 = com.operations.Matrix.MatrixUtils.generateRandomMatrix(100, (int) (byte) 1, (int) '#', (int) '#', 1L);
        double double85 = matrix82.getValue((int) '4', 0);
        double double86 = com.operations.Matrix.MatrixUtils.frobeniusNorm(matrix82);
        boolean boolean87 = com.operations.Matrix.MatrixUtils.isSquare(matrix82);
        boolean boolean89 = com.operations.Matrix.MatrixUtils.compare(matrix73, matrix82, (double) 100L);
        double[][] doubleArray90 = matrix73.getData();
        com.operations.Matrix.Matrix matrix91 = com.operations.Matrix.MatrixDecompositions.choleskyDecomposition(matrix73);
        com.operations.Matrix.Matrix matrix92 = com.operations.Matrix.MatrixOperations.subtract(matrix62, matrix73);
        boolean boolean93 = com.operations.Matrix.MatrixUtils.isSquare(matrix92);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertArrayEquals(doubleArray2, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertArrayEquals(doubleArray5, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertNotNull(matrixArray9);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 137.90576492663388d + "'", double10 == 137.90576492663388d);
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertArrayEquals(doubleArray13, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertArrayEquals(doubleArray16, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertArrayEquals(doubleArray23, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertArrayEquals(doubleArray26, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 2 + "'", int29 == 2);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 2 + "'", int30 == 2);
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertArrayEquals(doubleArray34, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertArrayEquals(doubleArray37, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(matrix42);
        org.junit.Assert.assertNotNull(matrixArray43);
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertNotNull(matrix47);
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertArrayEquals(doubleArray50, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertArrayEquals(doubleArray53, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray54);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 2 + "'", int56 == 2);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 2 + "'", int57 == 2);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 2 + "'", int58 == 2);
        org.junit.Assert.assertNotNull(matrixArray59);
        org.junit.Assert.assertNotNull(matrix60);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 2 + "'", int61 == 2);
        org.junit.Assert.assertNotNull(matrix62);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertNotNull(matrix65);
        org.junit.Assert.assertNotNull(doubleArray68);
        org.junit.Assert.assertArrayEquals(doubleArray68, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray71);
        org.junit.Assert.assertArrayEquals(doubleArray71, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray72);
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 2 + "'", int74 == 2);
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + 2 + "'", int75 == 2);
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 2 + "'", int76 == 2);
        org.junit.Assert.assertNotNull(matrix82);
        org.junit.Assert.assertTrue("'" + double85 + "' != '" + 35.0d + "'", double85 == 35.0d);
        org.junit.Assert.assertTrue("'" + double86 + "' != '" + 350.0d + "'", double86 == 350.0d);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + false + "'", boolean87 == false);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + false + "'", boolean89 == false);
        org.junit.Assert.assertNotNull(doubleArray90);
        org.junit.Assert.assertNotNull(matrix91);
        org.junit.Assert.assertNotNull(matrix92);
        org.junit.Assert.assertTrue("'" + boolean93 + "' != '" + true + "'", boolean93 == true);
    }

    @Test
    public void test3543() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3543");
        // The following exception was thrown during execution in test generation
        try {
            com.operations.Matrix.Matrix matrix5 = com.operations.Matrix.MatrixUtils.generateRandomMatrix((int) (short) 1, (int) (short) -1, (int) (short) 100, 97, (long) (short) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.NegativeArraySizeException; message: -1");
        } catch (java.lang.NegativeArraySizeException e) {
            // Expected exception.
        }
    }

    @Test
    public void test3544() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3544");
        com.operations.Matrix.Matrix matrix2 = com.operations.Matrix.MatrixTransformations.project2D(1.414213562373095d, 1480.1439709090816d);
        org.junit.Assert.assertNotNull(matrix2);
    }

    @Test
    public void test3545() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3545");
        com.operations.Matrix.Matrix matrix4 = com.operations.Matrix.MatrixUtils.generateRandomMatrix((int) (short) 100, 0, (int) (byte) 100, 35);
        org.junit.Assert.assertNotNull(matrix4);
    }

    @Test
    public void test3546() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3546");
        com.operations.Matrix.Matrix matrix2 = com.operations.Matrix.MatrixTransformations.project2D((double) (-1), 12.751772028997056d);
        int int3 = matrix2.getCols();
        // The following exception was thrown during execution in test generation
        try {
            com.operations.Matrix.Matrix matrix4 = com.operations.Matrix.MatrixDecompositions.choleskyDecomposition(matrix2);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Matrix is not positive definite.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(matrix2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 2 + "'", int3 == 2);
    }

    @Test
    public void test3547() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3547");
        com.operations.Matrix.Matrix matrix1 = com.operations.Matrix.MatrixTransformations.rotate2D(350.0d);
        com.operations.Matrix.Matrix matrix3 = com.operations.Matrix.MatrixTransformations.rotate2D((double) (short) 100);
        double[] doubleArray6 = new double[] { 137.90576492663388d, (byte) -1 };
        double[] doubleArray7 = com.operations.Matrix.MatrixSolver.solveGaussian(matrix3, doubleArray6);
        double[] doubleArray8 = com.operations.Matrix.MatrixSolver.solveGaussian(matrix1, doubleArray7);
        com.operations.Matrix.Matrix matrix11 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0L, (double) (byte) 10);
        double[] doubleArray14 = new double[] { 10, 'a' };
        double[] doubleArray17 = new double[] { 10, 'a' };
        double[][] doubleArray18 = new double[][] { doubleArray14, doubleArray17 };
        com.operations.Matrix.Matrix matrix19 = new com.operations.Matrix.Matrix(doubleArray18);
        int int20 = matrix19.getCols();
        int int21 = matrix19.getCols();
        int int22 = matrix19.getCols();
        com.operations.Matrix.Matrix[] matrixArray23 = com.operations.Matrix.MatrixDecompositions.luDecomposition(matrix19);
        com.operations.Matrix.Matrix matrix24 = com.operations.Matrix.MatrixOperations.multiply(matrix11, matrix19);
        com.operations.Matrix.Matrix matrix26 = com.operations.Matrix.MatrixTransformations.rotate2D((double) (short) 100);
        boolean boolean28 = com.operations.Matrix.MatrixUtils.compare(matrix19, matrix26, (double) (byte) 0);
        double[] doubleArray31 = new double[] { 10, 'a' };
        double[] doubleArray34 = new double[] { 10, 'a' };
        double[][] doubleArray35 = new double[][] { doubleArray31, doubleArray34 };
        com.operations.Matrix.Matrix matrix36 = new com.operations.Matrix.Matrix(doubleArray35);
        com.operations.Matrix.Matrix matrix37 = new com.operations.Matrix.Matrix(doubleArray35);
        com.operations.Matrix.Matrix matrix38 = new com.operations.Matrix.Matrix(doubleArray35);
        boolean boolean40 = com.operations.Matrix.MatrixUtils.compare(matrix19, matrix38, (double) (-1));
        int int41 = matrix19.getRows();
        com.operations.Matrix.Matrix matrix42 = com.operations.Matrix.MatrixOperations.add(matrix1, matrix19);
        matrix42.print();
        boolean boolean44 = com.operations.Matrix.MatrixUtils.isSquare(matrix42);
        com.operations.Matrix.Matrix matrix46 = com.operations.Matrix.MatrixTransformations.rotate2D((double) 100L);
        com.operations.Matrix.Matrix matrix48 = com.operations.Matrix.MatrixOperations.scalarMultiply(matrix46, (double) ' ');
        com.operations.Matrix.Matrix[] matrixArray49 = com.operations.Matrix.MatrixDecompositions.luDecomposition(matrix48);
        com.operations.Matrix.Matrix matrix50 = com.operations.Matrix.MatrixOperations.subtract(matrix42, matrix48);
        com.operations.Matrix.Matrix[] matrixArray51 = com.operations.Matrix.MatrixDecompositions.luDecomposition(matrix42);
        org.junit.Assert.assertNotNull(matrix1);
        org.junit.Assert.assertNotNull(matrix3);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertArrayEquals(doubleArray6, new double[] { 137.90576492663388d, (-1.0d) }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertArrayEquals(doubleArray7, new double[] { (-24.931892522286255d), (-135.63701830716116d) }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertArrayEquals(doubleArray8, new double[] { (-0.9999999999999858d), (-137.90576492663388d) }, 1.0E-15);
        org.junit.Assert.assertNotNull(matrix11);
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertArrayEquals(doubleArray14, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertArrayEquals(doubleArray17, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 2 + "'", int20 == 2);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 2 + "'", int21 == 2);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 2 + "'", int22 == 2);
        org.junit.Assert.assertNotNull(matrixArray23);
        org.junit.Assert.assertNotNull(matrix24);
        org.junit.Assert.assertNotNull(matrix26);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertArrayEquals(doubleArray31, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertArrayEquals(doubleArray34, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 2 + "'", int41 == 2);
        org.junit.Assert.assertNotNull(matrix42);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertNotNull(matrix46);
        org.junit.Assert.assertNotNull(matrix48);
        org.junit.Assert.assertNotNull(matrixArray49);
        org.junit.Assert.assertNotNull(matrix50);
        org.junit.Assert.assertNotNull(matrixArray51);
    }

    @Test
    public void test3548() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3548");
        double[] doubleArray2 = new double[] { 10, 'a' };
        double[] doubleArray5 = new double[] { 10, 'a' };
        double[][] doubleArray6 = new double[][] { doubleArray2, doubleArray5 };
        com.operations.Matrix.Matrix matrix7 = new com.operations.Matrix.Matrix(doubleArray6);
        com.operations.Matrix.Matrix matrix8 = new com.operations.Matrix.Matrix(doubleArray6);
        boolean boolean9 = com.operations.Matrix.MatrixUtils.isSquare(matrix8);
        double[] doubleArray12 = new double[] { 10, 'a' };
        double[] doubleArray15 = new double[] { 10, 'a' };
        double[][] doubleArray16 = new double[][] { doubleArray12, doubleArray15 };
        com.operations.Matrix.Matrix matrix17 = new com.operations.Matrix.Matrix(doubleArray16);
        int int18 = matrix17.getCols();
        int int19 = matrix17.getCols();
        matrix17.print();
        double[] doubleArray23 = new double[] { 10, 'a' };
        double[] doubleArray26 = new double[] { 10, 'a' };
        double[][] doubleArray27 = new double[][] { doubleArray23, doubleArray26 };
        com.operations.Matrix.Matrix matrix28 = new com.operations.Matrix.Matrix(doubleArray27);
        boolean boolean30 = com.operations.Matrix.MatrixUtils.compare(matrix17, matrix28, (double) (-1));
        com.operations.Matrix.Matrix matrix31 = com.operations.Matrix.MatrixOperations.subtract(matrix8, matrix28);
        com.operations.Matrix.Matrix matrix33 = com.operations.Matrix.MatrixOperations.scalarMultiply(matrix8, (double) 0.0f);
        double double34 = com.operations.Matrix.MatrixUtils.frobeniusNorm(matrix33);
        matrix33.setValue((int) (short) 0, 0, 0.0d);
        matrix33.print();
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertArrayEquals(doubleArray2, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertArrayEquals(doubleArray5, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertArrayEquals(doubleArray12, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertArrayEquals(doubleArray15, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 2 + "'", int18 == 2);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 2 + "'", int19 == 2);
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertArrayEquals(doubleArray23, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertArrayEquals(doubleArray26, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(matrix31);
        org.junit.Assert.assertNotNull(matrix33);
        org.junit.Assert.assertTrue("'" + double34 + "' != '" + 0.0d + "'", double34 == 0.0d);
    }

    @Test
    public void test3549() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3549");
        com.operations.Matrix.Matrix matrix2 = com.operations.Matrix.MatrixTransformations.scale2D(100.0d, 1.7320508075688774d);
        org.junit.Assert.assertNotNull(matrix2);
    }

    @Test
    public void test3550() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3550");
        com.operations.Matrix.Matrix matrix2 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0.0f, 350.0d);
        com.operations.Matrix.Matrix matrix3 = com.operations.Matrix.MatrixOperations.transpose(matrix2);
        com.operations.Matrix.Matrix matrix4 = com.operations.Matrix.MatrixOperations.transpose(matrix2);
        com.operations.Matrix.Matrix matrix9 = com.operations.Matrix.MatrixUtils.generateRandomMatrix((int) (byte) 10, 0, (int) (short) 100, (int) (short) 1);
        // The following exception was thrown during execution in test generation
        try {
            com.operations.Matrix.Matrix matrix10 = com.operations.Matrix.MatrixOperations.add(matrix2, matrix9);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Matrices must have the same dimensions for addition.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(matrix2);
        org.junit.Assert.assertNotNull(matrix3);
        org.junit.Assert.assertNotNull(matrix4);
        org.junit.Assert.assertNotNull(matrix9);
    }

    @Test
    public void test3551() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3551");
        com.operations.Matrix.Matrix matrix2 = com.operations.Matrix.MatrixTransformations.project2D((double) ' ', 0.0d);
        double[] doubleArray5 = new double[] { 10, 'a' };
        double[] doubleArray8 = new double[] { 10, 'a' };
        double[][] doubleArray9 = new double[][] { doubleArray5, doubleArray8 };
        com.operations.Matrix.Matrix matrix10 = new com.operations.Matrix.Matrix(doubleArray9);
        int int11 = matrix10.getCols();
        boolean boolean12 = com.operations.Matrix.MatrixUtils.isSquare(matrix10);
        com.operations.Matrix.Matrix matrix13 = com.operations.Matrix.MatrixOperations.transpose(matrix10);
        int int14 = matrix13.getRows();
        com.operations.Matrix.Matrix matrix17 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0L, (double) (byte) 10);
        double[] doubleArray20 = new double[] { 10, 'a' };
        double[] doubleArray23 = new double[] { 10, 'a' };
        double[][] doubleArray24 = new double[][] { doubleArray20, doubleArray23 };
        com.operations.Matrix.Matrix matrix25 = new com.operations.Matrix.Matrix(doubleArray24);
        int int26 = matrix25.getCols();
        int int27 = matrix25.getCols();
        int int28 = matrix25.getCols();
        com.operations.Matrix.Matrix[] matrixArray29 = com.operations.Matrix.MatrixDecompositions.luDecomposition(matrix25);
        com.operations.Matrix.Matrix matrix30 = com.operations.Matrix.MatrixOperations.multiply(matrix17, matrix25);
        com.operations.Matrix.Matrix matrix32 = com.operations.Matrix.MatrixTransformations.rotate2D((double) (short) 100);
        boolean boolean34 = com.operations.Matrix.MatrixUtils.compare(matrix25, matrix32, (double) (byte) 0);
        com.operations.Matrix.Matrix matrix35 = com.operations.Matrix.MatrixOperations.multiply(matrix13, matrix25);
        com.operations.Matrix.Matrix matrix36 = com.operations.Matrix.MatrixOperations.add(matrix2, matrix25);
        com.operations.Matrix.Matrix matrix37 = com.operations.Matrix.MatrixOperations.transpose(matrix2);
        com.operations.Matrix.Matrix matrix40 = com.operations.Matrix.MatrixTransformations.scale2D((double) (byte) 100, 350.0d);
        double double41 = com.operations.Matrix.MatrixUtils.frobeniusNorm(matrix40);
        int int42 = matrix40.getCols();
        com.operations.Matrix.Matrix matrix43 = com.operations.Matrix.MatrixOperations.multiply(matrix2, matrix40);
        int int44 = matrix40.getRows();
        double[][] doubleArray45 = matrix40.getData();
        boolean boolean46 = com.operations.Matrix.MatrixUtils.isSquare(matrix40);
        org.junit.Assert.assertNotNull(matrix2);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertArrayEquals(doubleArray5, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertArrayEquals(doubleArray8, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 2 + "'", int11 == 2);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(matrix13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 2 + "'", int14 == 2);
        org.junit.Assert.assertNotNull(matrix17);
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertArrayEquals(doubleArray20, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertArrayEquals(doubleArray23, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 2 + "'", int26 == 2);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 2 + "'", int27 == 2);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 2 + "'", int28 == 2);
        org.junit.Assert.assertNotNull(matrixArray29);
        org.junit.Assert.assertNotNull(matrix30);
        org.junit.Assert.assertNotNull(matrix32);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(matrix35);
        org.junit.Assert.assertNotNull(matrix36);
        org.junit.Assert.assertNotNull(matrix37);
        org.junit.Assert.assertNotNull(matrix40);
        org.junit.Assert.assertTrue("'" + double41 + "' != '" + 364.0054944640259d + "'", double41 == 364.0054944640259d);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 2 + "'", int42 == 2);
        org.junit.Assert.assertNotNull(matrix43);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 2 + "'", int44 == 2);
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
    }

    @Test
    public void test3552() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3552");
        com.operations.Matrix.Matrix matrix2 = com.operations.Matrix.MatrixTransformations.project2D(1.414213562373095d, 52.009614495783374d);
        com.operations.Matrix.Matrix matrix5 = com.operations.Matrix.MatrixTransformations.project2D((double) (short) 100, (double) 0L);
        boolean boolean6 = com.operations.Matrix.MatrixUtils.isSquare(matrix5);
        double[] doubleArray9 = new double[] { 10, 'a' };
        double[] doubleArray12 = new double[] { 10, 'a' };
        double[][] doubleArray13 = new double[][] { doubleArray9, doubleArray12 };
        com.operations.Matrix.Matrix matrix14 = new com.operations.Matrix.Matrix(doubleArray13);
        com.operations.Matrix.Matrix matrix15 = new com.operations.Matrix.Matrix(doubleArray13);
        com.operations.Matrix.Matrix matrix17 = com.operations.Matrix.MatrixTransformations.rotate2D((double) (short) 100);
        double[] doubleArray20 = new double[] { 137.90576492663388d, (byte) -1 };
        double[] doubleArray21 = com.operations.Matrix.MatrixSolver.solveGaussian(matrix17, doubleArray20);
        com.operations.Matrix.Matrix matrix22 = com.operations.Matrix.MatrixOperations.add(matrix15, matrix17);
        com.operations.Matrix.Matrix matrix23 = com.operations.Matrix.MatrixOperations.transpose(matrix17);
        int int24 = matrix17.getCols();
        int int25 = matrix17.getRows();
        double[] doubleArray28 = new double[] { 10, 'a' };
        double[] doubleArray31 = new double[] { 10, 'a' };
        double[][] doubleArray32 = new double[][] { doubleArray28, doubleArray31 };
        com.operations.Matrix.Matrix matrix33 = new com.operations.Matrix.Matrix(doubleArray32);
        int int34 = matrix33.getCols();
        int int35 = matrix33.getCols();
        matrix33.print();
        double[] doubleArray39 = new double[] { 10, 'a' };
        double[] doubleArray42 = new double[] { 10, 'a' };
        double[][] doubleArray43 = new double[][] { doubleArray39, doubleArray42 };
        com.operations.Matrix.Matrix matrix44 = new com.operations.Matrix.Matrix(doubleArray43);
        boolean boolean46 = com.operations.Matrix.MatrixUtils.compare(matrix33, matrix44, (double) (-1));
        com.operations.Matrix.Matrix matrix47 = com.operations.Matrix.MatrixOperations.multiply(matrix17, matrix33);
        double double50 = matrix17.getValue((int) (short) 0, 0);
        com.operations.Matrix.Matrix matrix51 = com.operations.Matrix.MatrixOperations.add(matrix5, matrix17);
        com.operations.Matrix.Matrix matrix53 = com.operations.Matrix.MatrixOperations.scalarMultiply(matrix17, 100.00499987500625d);
        boolean boolean54 = com.operations.Matrix.MatrixUtils.isSymmetric(matrix53);
        matrix53.print();
        com.operations.Matrix.Matrix matrix56 = com.operations.Matrix.MatrixOperations.subtract(matrix2, matrix53);
        org.junit.Assert.assertNotNull(matrix2);
        org.junit.Assert.assertNotNull(matrix5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertArrayEquals(doubleArray9, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertArrayEquals(doubleArray12, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertNotNull(matrix17);
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertArrayEquals(doubleArray20, new double[] { 137.90576492663388d, (-1.0d) }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertArrayEquals(doubleArray21, new double[] { (-24.931892522286255d), (-135.63701830716116d) }, 1.0E-15);
        org.junit.Assert.assertNotNull(matrix22);
        org.junit.Assert.assertNotNull(matrix23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 2 + "'", int24 == 2);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 2 + "'", int25 == 2);
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertArrayEquals(doubleArray28, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertArrayEquals(doubleArray31, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 2 + "'", int34 == 2);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 2 + "'", int35 == 2);
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertArrayEquals(doubleArray39, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertArrayEquals(doubleArray42, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(matrix47);
        org.junit.Assert.assertTrue("'" + double50 + "' != '" + (-0.1736481776669303d) + "'", double50 == (-0.1736481776669303d));
        org.junit.Assert.assertNotNull(matrix51);
        org.junit.Assert.assertNotNull(matrix53);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(matrix56);
    }

    @Test
    public void test3553() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3553");
        com.operations.Matrix.Matrix matrix2 = new com.operations.Matrix.Matrix(1, (int) (byte) 100);
        int int3 = matrix2.getRows();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
    }

    @Test
    public void test3554() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3554");
        com.operations.Matrix.Matrix matrix1 = com.operations.Matrix.MatrixTransformations.rotate2D((double) 1.0f);
        com.operations.Matrix.Matrix matrix4 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0L, (double) (byte) 10);
        int int5 = matrix4.getRows();
        com.operations.Matrix.Matrix matrix7 = com.operations.Matrix.MatrixOperations.scalarMultiply(matrix4, (double) 2);
        boolean boolean9 = com.operations.Matrix.MatrixUtils.compare(matrix1, matrix7, (double) 10.0f);
        double[] doubleArray12 = new double[] { 10, 'a' };
        double[] doubleArray15 = new double[] { 10, 'a' };
        double[][] doubleArray16 = new double[][] { doubleArray12, doubleArray15 };
        com.operations.Matrix.Matrix matrix17 = new com.operations.Matrix.Matrix(doubleArray16);
        com.operations.Matrix.Matrix matrix18 = new com.operations.Matrix.Matrix(doubleArray16);
        boolean boolean19 = com.operations.Matrix.MatrixUtils.isSquare(matrix18);
        double[] doubleArray22 = new double[] { 10, 'a' };
        double[] doubleArray25 = new double[] { 10, 'a' };
        double[][] doubleArray26 = new double[][] { doubleArray22, doubleArray25 };
        com.operations.Matrix.Matrix matrix27 = new com.operations.Matrix.Matrix(doubleArray26);
        int int28 = matrix27.getCols();
        int int29 = matrix27.getCols();
        matrix27.print();
        double[] doubleArray33 = new double[] { 10, 'a' };
        double[] doubleArray36 = new double[] { 10, 'a' };
        double[][] doubleArray37 = new double[][] { doubleArray33, doubleArray36 };
        com.operations.Matrix.Matrix matrix38 = new com.operations.Matrix.Matrix(doubleArray37);
        boolean boolean40 = com.operations.Matrix.MatrixUtils.compare(matrix27, matrix38, (double) (-1));
        com.operations.Matrix.Matrix matrix41 = com.operations.Matrix.MatrixOperations.subtract(matrix18, matrix38);
        com.operations.Matrix.Matrix matrix43 = com.operations.Matrix.MatrixOperations.scalarMultiply(matrix18, (double) 0.0f);
        com.operations.Matrix.Matrix matrix44 = com.operations.Matrix.MatrixOperations.transpose(matrix18);
        com.operations.Matrix.Matrix matrix45 = com.operations.Matrix.MatrixOperations.transpose(matrix44);
        com.operations.Matrix.Matrix matrix46 = com.operations.Matrix.MatrixOperations.multiply(matrix7, matrix45);
        com.operations.Matrix.Matrix matrix48 = com.operations.Matrix.MatrixOperations.scalarMultiply(matrix7, (double) 0L);
        double[][] doubleArray49 = matrix7.getData();
        com.operations.Matrix.Matrix matrix50 = new com.operations.Matrix.Matrix(doubleArray49);
        com.operations.Matrix.Matrix matrix51 = new com.operations.Matrix.Matrix(doubleArray49);
        org.junit.Assert.assertNotNull(matrix1);
        org.junit.Assert.assertNotNull(matrix4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 2 + "'", int5 == 2);
        org.junit.Assert.assertNotNull(matrix7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertArrayEquals(doubleArray12, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertArrayEquals(doubleArray15, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertArrayEquals(doubleArray22, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertArrayEquals(doubleArray25, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 2 + "'", int28 == 2);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 2 + "'", int29 == 2);
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertArrayEquals(doubleArray33, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertArrayEquals(doubleArray36, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(matrix41);
        org.junit.Assert.assertNotNull(matrix43);
        org.junit.Assert.assertNotNull(matrix44);
        org.junit.Assert.assertNotNull(matrix45);
        org.junit.Assert.assertNotNull(matrix46);
        org.junit.Assert.assertNotNull(matrix48);
        org.junit.Assert.assertNotNull(doubleArray49);
    }

    @Test
    public void test3555() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3555");
        double[] doubleArray2 = new double[] { 10, 'a' };
        double[] doubleArray5 = new double[] { 10, 'a' };
        double[][] doubleArray6 = new double[][] { doubleArray2, doubleArray5 };
        com.operations.Matrix.Matrix matrix7 = new com.operations.Matrix.Matrix(doubleArray6);
        com.operations.Matrix.Matrix matrix8 = new com.operations.Matrix.Matrix(doubleArray6);
        com.operations.Matrix.Matrix[] matrixArray9 = com.operations.Matrix.MatrixDecompositions.luDecomposition(matrix8);
        com.operations.Matrix.Matrix matrix12 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0, (double) 100L);
        com.operations.Matrix.Matrix matrix13 = com.operations.Matrix.MatrixOperations.subtract(matrix8, matrix12);
        double[][] doubleArray14 = matrix13.getData();
        com.operations.Matrix.Matrix matrix15 = new com.operations.Matrix.Matrix(doubleArray14);
        com.operations.Matrix.Matrix matrix16 = new com.operations.Matrix.Matrix(doubleArray14);
        double double19 = matrix16.getValue((int) (byte) 0, (int) (byte) 0);
        com.operations.Matrix.Matrix matrix22 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0L, (double) (byte) 10);
        int int23 = matrix22.getRows();
        com.operations.Matrix.Matrix matrix25 = com.operations.Matrix.MatrixOperations.scalarMultiply(matrix22, (double) 2);
        double double26 = com.operations.Matrix.MatrixUtils.frobeniusNorm(matrix22);
        double[][] doubleArray27 = matrix22.getData();
        double double28 = com.operations.Matrix.MatrixUtils.frobeniusNorm(matrix22);
        boolean boolean30 = com.operations.Matrix.MatrixUtils.compare(matrix16, matrix22, 375.213087380171d);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertArrayEquals(doubleArray2, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertArrayEquals(doubleArray5, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertNotNull(matrixArray9);
        org.junit.Assert.assertNotNull(matrix12);
        org.junit.Assert.assertNotNull(matrix13);
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 10.0d + "'", double19 == 10.0d);
        org.junit.Assert.assertNotNull(matrix22);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 2 + "'", int23 == 2);
        org.junit.Assert.assertNotNull(matrix25);
        org.junit.Assert.assertTrue("'" + double26 + "' != '" + 10.0d + "'", double26 == 10.0d);
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertTrue("'" + double28 + "' != '" + 10.0d + "'", double28 == 10.0d);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
    }

    @Test
    public void test3556() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3556");
        com.operations.Matrix.Matrix matrix5 = com.operations.Matrix.MatrixUtils.generateRandomMatrix((int) (byte) 1, (int) (short) 1, (int) ' ', 0, (long) (byte) -1);
        org.junit.Assert.assertNotNull(matrix5);
    }

    @Test
    public void test3557() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3557");
        com.operations.Matrix.Matrix matrix2 = new com.operations.Matrix.Matrix(32, (int) '4');
        com.operations.Matrix.Matrix matrix4 = com.operations.Matrix.MatrixTransformations.rotate2D((double) '4');
        double[] doubleArray7 = new double[] { 10, 'a' };
        double[] doubleArray10 = new double[] { 10, 'a' };
        double[][] doubleArray11 = new double[][] { doubleArray7, doubleArray10 };
        com.operations.Matrix.Matrix matrix12 = new com.operations.Matrix.Matrix(doubleArray11);
        com.operations.Matrix.Matrix matrix13 = new com.operations.Matrix.Matrix(doubleArray11);
        com.operations.Matrix.Matrix matrix15 = com.operations.Matrix.MatrixTransformations.rotate2D((double) (short) 100);
        double[] doubleArray18 = new double[] { 137.90576492663388d, (byte) -1 };
        double[] doubleArray19 = com.operations.Matrix.MatrixSolver.solveGaussian(matrix15, doubleArray18);
        com.operations.Matrix.Matrix matrix20 = com.operations.Matrix.MatrixOperations.add(matrix13, matrix15);
        boolean boolean21 = com.operations.Matrix.MatrixUtils.isSymmetric(matrix20);
        boolean boolean23 = com.operations.Matrix.MatrixUtils.compare(matrix4, matrix20, 364.0054944640259d);
        com.operations.Matrix.Matrix matrix26 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0L, (double) (byte) 10);
        double[] doubleArray29 = new double[] { 10, 'a' };
        double[] doubleArray32 = new double[] { 10, 'a' };
        double[][] doubleArray33 = new double[][] { doubleArray29, doubleArray32 };
        com.operations.Matrix.Matrix matrix34 = new com.operations.Matrix.Matrix(doubleArray33);
        int int35 = matrix34.getCols();
        int int36 = matrix34.getCols();
        int int37 = matrix34.getCols();
        com.operations.Matrix.Matrix[] matrixArray38 = com.operations.Matrix.MatrixDecompositions.luDecomposition(matrix34);
        com.operations.Matrix.Matrix matrix39 = com.operations.Matrix.MatrixOperations.multiply(matrix26, matrix34);
        com.operations.Matrix.Matrix matrix41 = com.operations.Matrix.MatrixTransformations.rotate2D((double) (short) 100);
        boolean boolean43 = com.operations.Matrix.MatrixUtils.compare(matrix34, matrix41, (double) (byte) 0);
        com.operations.Matrix.Matrix[] matrixArray44 = com.operations.Matrix.MatrixDecompositions.luDecomposition(matrix34);
        com.operations.Matrix.Matrix matrix45 = com.operations.Matrix.MatrixOperations.transpose(matrix34);
        com.operations.Matrix.Matrix matrix48 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0L, (double) (byte) 10);
        int int49 = matrix48.getRows();
        com.operations.Matrix.Matrix matrix52 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0L, (double) (byte) 10);
        int int53 = matrix52.getRows();
        com.operations.Matrix.Matrix matrix55 = com.operations.Matrix.MatrixOperations.scalarMultiply(matrix52, (double) 2);
        com.operations.Matrix.Matrix matrix56 = com.operations.Matrix.MatrixOperations.subtract(matrix48, matrix52);
        boolean boolean58 = com.operations.Matrix.MatrixUtils.compare(matrix34, matrix48, (double) ' ');
        boolean boolean60 = com.operations.Matrix.MatrixUtils.compare(matrix20, matrix34, (double) 0L);
        boolean boolean61 = com.operations.Matrix.MatrixUtils.isSymmetric(matrix34);
        com.operations.Matrix.Matrix matrix64 = com.operations.Matrix.MatrixTransformations.scale2D((double) 100.0f, 20.0d);
        com.operations.Matrix.Matrix matrix65 = com.operations.Matrix.MatrixOperations.add(matrix34, matrix64);
        // The following exception was thrown during execution in test generation
        try {
            com.operations.Matrix.Matrix matrix66 = com.operations.Matrix.MatrixOperations.subtract(matrix2, matrix34);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Matrices must have the same dimensions for subtraction.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(matrix4);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertArrayEquals(doubleArray7, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertArrayEquals(doubleArray10, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertNotNull(matrix15);
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertArrayEquals(doubleArray18, new double[] { 137.90576492663388d, (-1.0d) }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertArrayEquals(doubleArray19, new double[] { (-24.931892522286255d), (-135.63701830716116d) }, 1.0E-15);
        org.junit.Assert.assertNotNull(matrix20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertNotNull(matrix26);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertArrayEquals(doubleArray29, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertArrayEquals(doubleArray32, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 2 + "'", int35 == 2);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 2 + "'", int36 == 2);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 2 + "'", int37 == 2);
        org.junit.Assert.assertNotNull(matrixArray38);
        org.junit.Assert.assertNotNull(matrix39);
        org.junit.Assert.assertNotNull(matrix41);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(matrixArray44);
        org.junit.Assert.assertNotNull(matrix45);
        org.junit.Assert.assertNotNull(matrix48);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 2 + "'", int49 == 2);
        org.junit.Assert.assertNotNull(matrix52);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 2 + "'", int53 == 2);
        org.junit.Assert.assertNotNull(matrix55);
        org.junit.Assert.assertNotNull(matrix56);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNotNull(matrix64);
        org.junit.Assert.assertNotNull(matrix65);
    }

    @Test
    public void test3558() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3558");
        com.operations.Matrix.Matrix matrix5 = com.operations.Matrix.MatrixUtils.generateRandomMatrix(100, (int) (byte) 1, (int) '#', (int) '#', 1L);
        double double8 = matrix5.getValue((int) '4', 0);
        com.operations.Matrix.Matrix matrix9 = com.operations.Matrix.MatrixOperations.transpose(matrix5);
        int int10 = matrix9.getRows();
        org.junit.Assert.assertNotNull(matrix5);
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 35.0d + "'", double8 == 35.0d);
        org.junit.Assert.assertNotNull(matrix9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1 + "'", int10 == 1);
    }

    @Test
    public void test3559() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3559");
        double[] doubleArray2 = new double[] { 10, 'a' };
        double[] doubleArray5 = new double[] { 10, 'a' };
        double[][] doubleArray6 = new double[][] { doubleArray2, doubleArray5 };
        com.operations.Matrix.Matrix matrix7 = new com.operations.Matrix.Matrix(doubleArray6);
        int int8 = matrix7.getCols();
        int int9 = matrix7.getCols();
        boolean boolean10 = com.operations.Matrix.MatrixUtils.isSquare(matrix7);
        com.operations.Matrix.Matrix matrix11 = com.operations.Matrix.MatrixDecompositions.choleskyDecomposition(matrix7);
        com.operations.Matrix.Matrix matrix14 = com.operations.Matrix.MatrixTransformations.project2D(0.0d, (double) 0);
        com.operations.Matrix.Matrix matrix15 = com.operations.Matrix.MatrixOperations.subtract(matrix11, matrix14);
        com.operations.Matrix.Matrix matrix17 = com.operations.Matrix.MatrixOperations.scalarMultiply(matrix11, (double) 1.0f);
        double[] doubleArray20 = new double[] { 10, 'a' };
        double[] doubleArray23 = new double[] { 10, 'a' };
        double[][] doubleArray24 = new double[][] { doubleArray20, doubleArray23 };
        com.operations.Matrix.Matrix matrix25 = new com.operations.Matrix.Matrix(doubleArray24);
        com.operations.Matrix.Matrix matrix26 = new com.operations.Matrix.Matrix(doubleArray24);
        boolean boolean27 = com.operations.Matrix.MatrixUtils.isSquare(matrix26);
        double[] doubleArray30 = new double[] { 10, 'a' };
        double[] doubleArray33 = new double[] { 10, 'a' };
        double[][] doubleArray34 = new double[][] { doubleArray30, doubleArray33 };
        com.operations.Matrix.Matrix matrix35 = new com.operations.Matrix.Matrix(doubleArray34);
        int int36 = matrix35.getCols();
        int int37 = matrix35.getCols();
        matrix35.print();
        double[] doubleArray41 = new double[] { 10, 'a' };
        double[] doubleArray44 = new double[] { 10, 'a' };
        double[][] doubleArray45 = new double[][] { doubleArray41, doubleArray44 };
        com.operations.Matrix.Matrix matrix46 = new com.operations.Matrix.Matrix(doubleArray45);
        boolean boolean48 = com.operations.Matrix.MatrixUtils.compare(matrix35, matrix46, (double) (-1));
        com.operations.Matrix.Matrix matrix49 = com.operations.Matrix.MatrixOperations.subtract(matrix26, matrix46);
        com.operations.Matrix.Matrix matrix51 = com.operations.Matrix.MatrixOperations.scalarMultiply(matrix26, (double) 0.0f);
        double double52 = com.operations.Matrix.MatrixUtils.frobeniusNorm(matrix51);
        boolean boolean53 = com.operations.Matrix.MatrixUtils.isSquare(matrix51);
        boolean boolean55 = com.operations.Matrix.MatrixUtils.compare(matrix17, matrix51, 100.00499987500625d);
        double double56 = com.operations.Matrix.MatrixUtils.frobeniusNorm(matrix51);
        boolean boolean57 = com.operations.Matrix.MatrixUtils.isSquare(matrix51);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertArrayEquals(doubleArray2, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertArrayEquals(doubleArray5, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 2 + "'", int8 == 2);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 2 + "'", int9 == 2);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(matrix11);
        org.junit.Assert.assertNotNull(matrix14);
        org.junit.Assert.assertNotNull(matrix15);
        org.junit.Assert.assertNotNull(matrix17);
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertArrayEquals(doubleArray20, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertArrayEquals(doubleArray23, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertArrayEquals(doubleArray30, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertArrayEquals(doubleArray33, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 2 + "'", int36 == 2);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 2 + "'", int37 == 2);
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertArrayEquals(doubleArray41, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertArrayEquals(doubleArray44, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(matrix49);
        org.junit.Assert.assertNotNull(matrix51);
        org.junit.Assert.assertTrue("'" + double52 + "' != '" + 0.0d + "'", double52 == 0.0d);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + true + "'", boolean55 == true);
        org.junit.Assert.assertTrue("'" + double56 + "' != '" + 0.0d + "'", double56 == 0.0d);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + true + "'", boolean57 == true);
    }

    @Test
    public void test3560() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3560");
        com.operations.Matrix.Matrix matrix0 = null;
        com.operations.Matrix.Matrix matrix2 = com.operations.Matrix.MatrixTransformations.rotate2D(100.0d);
        int int3 = matrix2.getCols();
        matrix2.print();
        com.operations.Matrix.Matrix matrix6 = com.operations.Matrix.MatrixOperations.scalarMultiply(matrix2, (double) (byte) 1);
        com.operations.Matrix.Matrix[] matrixArray7 = com.operations.Matrix.MatrixDecompositions.luDecomposition(matrix2);
        com.operations.Matrix.Matrix matrix8 = com.operations.Matrix.MatrixOperations.transpose(matrix2);
        double[][] doubleArray9 = matrix8.getData();
        com.operations.Matrix.Matrix matrix10 = new com.operations.Matrix.Matrix(doubleArray9);
        com.operations.Matrix.Matrix matrix12 = com.operations.Matrix.MatrixTransformations.rotate2D((double) (short) 100);
        double[] doubleArray15 = new double[] { 137.90576492663388d, (byte) -1 };
        double[] doubleArray16 = com.operations.Matrix.MatrixSolver.solveGaussian(matrix12, doubleArray15);
        com.operations.Matrix.Matrix matrix19 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0L, (double) (byte) 10);
        double[] doubleArray22 = new double[] { 10, 'a' };
        double[] doubleArray25 = new double[] { 10, 'a' };
        double[][] doubleArray26 = new double[][] { doubleArray22, doubleArray25 };
        com.operations.Matrix.Matrix matrix27 = new com.operations.Matrix.Matrix(doubleArray26);
        int int28 = matrix27.getCols();
        int int29 = matrix27.getCols();
        int int30 = matrix27.getCols();
        com.operations.Matrix.Matrix[] matrixArray31 = com.operations.Matrix.MatrixDecompositions.luDecomposition(matrix27);
        com.operations.Matrix.Matrix matrix32 = com.operations.Matrix.MatrixOperations.multiply(matrix19, matrix27);
        boolean boolean34 = com.operations.Matrix.MatrixUtils.compare(matrix12, matrix19, (double) (-1L));
        boolean boolean35 = com.operations.Matrix.MatrixUtils.isSymmetric(matrix12);
        int int36 = matrix12.getCols();
        com.operations.Matrix.Matrix[] matrixArray37 = com.operations.Matrix.MatrixDecompositions.luDecomposition(matrix12);
        double double38 = com.operations.Matrix.MatrixUtils.frobeniusNorm(matrix12);
        com.operations.Matrix.Matrix matrix40 = com.operations.Matrix.MatrixTransformations.rotate2D(100.0d);
        int int41 = matrix40.getCols();
        matrix40.print();
        com.operations.Matrix.Matrix matrix44 = com.operations.Matrix.MatrixOperations.scalarMultiply(matrix40, (double) (byte) 1);
        com.operations.Matrix.Matrix matrix46 = com.operations.Matrix.MatrixTransformations.rotate2D(350.0d);
        com.operations.Matrix.Matrix matrix48 = com.operations.Matrix.MatrixTransformations.rotate2D((double) (short) 100);
        double[] doubleArray51 = new double[] { 137.90576492663388d, (byte) -1 };
        double[] doubleArray52 = com.operations.Matrix.MatrixSolver.solveGaussian(matrix48, doubleArray51);
        double[] doubleArray53 = com.operations.Matrix.MatrixSolver.solveGaussian(matrix46, doubleArray52);
        double[] doubleArray54 = com.operations.Matrix.MatrixSolver.solveGaussian(matrix40, doubleArray52);
        double[] doubleArray55 = com.operations.Matrix.MatrixSolver.solveGaussian(matrix12, doubleArray54);
        boolean boolean56 = com.operations.Matrix.MatrixUtils.isSymmetric(matrix12);
        double[] doubleArray59 = new double[] { 10, 'a' };
        double[] doubleArray62 = new double[] { 10, 'a' };
        double[][] doubleArray63 = new double[][] { doubleArray59, doubleArray62 };
        com.operations.Matrix.Matrix matrix64 = new com.operations.Matrix.Matrix(doubleArray63);
        com.operations.Matrix.Matrix matrix65 = new com.operations.Matrix.Matrix(doubleArray63);
        com.operations.Matrix.Matrix matrix67 = com.operations.Matrix.MatrixTransformations.rotate2D((double) (short) 100);
        double[] doubleArray70 = new double[] { 137.90576492663388d, (byte) -1 };
        double[] doubleArray71 = com.operations.Matrix.MatrixSolver.solveGaussian(matrix67, doubleArray70);
        com.operations.Matrix.Matrix matrix72 = com.operations.Matrix.MatrixOperations.add(matrix65, matrix67);
        com.operations.Matrix.Matrix matrix73 = com.operations.Matrix.MatrixOperations.transpose(matrix67);
        double double74 = com.operations.Matrix.MatrixUtils.frobeniusNorm(matrix73);
        double[][] doubleArray75 = matrix73.getData();
        com.operations.Matrix.Matrix matrix77 = com.operations.Matrix.MatrixOperations.scalarMultiply(matrix73, (double) 'a');
        com.operations.Matrix.Matrix matrix79 = com.operations.Matrix.MatrixTransformations.rotate2D(350.0d);
        com.operations.Matrix.Matrix matrix81 = com.operations.Matrix.MatrixTransformations.rotate2D((double) (short) 100);
        double[] doubleArray84 = new double[] { 137.90576492663388d, (byte) -1 };
        double[] doubleArray85 = com.operations.Matrix.MatrixSolver.solveGaussian(matrix81, doubleArray84);
        double[] doubleArray86 = com.operations.Matrix.MatrixSolver.solveGaussian(matrix79, doubleArray85);
        double[] doubleArray87 = com.operations.Matrix.MatrixSolver.solveGaussian(matrix73, doubleArray85);
        double[] doubleArray88 = com.operations.Matrix.MatrixSolver.solveGaussian(matrix12, doubleArray87);
        double[] doubleArray89 = com.operations.Matrix.MatrixSolver.solveGaussian(matrix10, doubleArray88);
        // The following exception was thrown during execution in test generation
        try {
            double[] doubleArray90 = com.operations.Matrix.MatrixSolver.solveGaussian(matrix0, doubleArray88);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(matrix2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 2 + "'", int3 == 2);
        org.junit.Assert.assertNotNull(matrix6);
        org.junit.Assert.assertNotNull(matrixArray7);
        org.junit.Assert.assertNotNull(matrix8);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertNotNull(matrix12);
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertArrayEquals(doubleArray15, new double[] { 137.90576492663388d, (-1.0d) }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertArrayEquals(doubleArray16, new double[] { (-24.931892522286255d), (-135.63701830716116d) }, 1.0E-15);
        org.junit.Assert.assertNotNull(matrix19);
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertArrayEquals(doubleArray22, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertArrayEquals(doubleArray25, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 2 + "'", int28 == 2);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 2 + "'", int29 == 2);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 2 + "'", int30 == 2);
        org.junit.Assert.assertNotNull(matrixArray31);
        org.junit.Assert.assertNotNull(matrix32);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 2 + "'", int36 == 2);
        org.junit.Assert.assertNotNull(matrixArray37);
        org.junit.Assert.assertTrue("'" + double38 + "' != '" + 1.414213562373095d + "'", double38 == 1.414213562373095d);
        org.junit.Assert.assertNotNull(matrix40);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 2 + "'", int41 == 2);
        org.junit.Assert.assertNotNull(matrix44);
        org.junit.Assert.assertNotNull(matrix46);
        org.junit.Assert.assertNotNull(matrix48);
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertArrayEquals(doubleArray51, new double[] { 137.90576492663388d, (-1.0d) }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertArrayEquals(doubleArray52, new double[] { (-24.931892522286255d), (-135.63701830716116d) }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertArrayEquals(doubleArray53, new double[] { (-0.9999999999999858d), (-137.90576492663388d) }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray54);
        org.junit.Assert.assertArrayEquals(doubleArray54, new double[] { (-129.24700952206834d), 48.1062421064292d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertArrayEquals(doubleArray55, new double[] { 69.81890786710137d, 118.92989575479001d }, 1.0E-15);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(doubleArray59);
        org.junit.Assert.assertArrayEquals(doubleArray59, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray62);
        org.junit.Assert.assertArrayEquals(doubleArray62, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray63);
        org.junit.Assert.assertNotNull(matrix67);
        org.junit.Assert.assertNotNull(doubleArray70);
        org.junit.Assert.assertArrayEquals(doubleArray70, new double[] { 137.90576492663388d, (-1.0d) }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray71);
        org.junit.Assert.assertArrayEquals(doubleArray71, new double[] { (-24.931892522286255d), (-135.63701830716116d) }, 1.0E-15);
        org.junit.Assert.assertNotNull(matrix72);
        org.junit.Assert.assertNotNull(matrix73);
        org.junit.Assert.assertTrue("'" + double74 + "' != '" + 1.414213562373095d + "'", double74 == 1.414213562373095d);
        org.junit.Assert.assertNotNull(doubleArray75);
        org.junit.Assert.assertNotNull(matrix77);
        org.junit.Assert.assertNotNull(matrix79);
        org.junit.Assert.assertNotNull(matrix81);
        org.junit.Assert.assertNotNull(doubleArray84);
        org.junit.Assert.assertArrayEquals(doubleArray84, new double[] { 137.90576492663388d, (-1.0d) }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray85);
        org.junit.Assert.assertArrayEquals(doubleArray85, new double[] { (-24.931892522286255d), (-135.63701830716116d) }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray86);
        org.junit.Assert.assertArrayEquals(doubleArray86, new double[] { (-0.9999999999999858d), (-137.90576492663388d) }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray87);
        org.junit.Assert.assertArrayEquals(doubleArray87, new double[] { 137.90576492663388d, (-1.0000000000000022d) }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray88);
        org.junit.Assert.assertArrayEquals(doubleArray88, new double[] { (-24.931892522286258d), (-135.63701830716116d) }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray89);
        org.junit.Assert.assertArrayEquals(doubleArray89, new double[] { 137.90576492663388d, (-1.0000000000000058d) }, 1.0E-15);
    }

    @Test
    public void test3561() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3561");
        com.operations.Matrix.Matrix matrix2 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0L, (double) 10L);
        com.operations.Matrix.Matrix matrix5 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0L, (double) (byte) 10);
        double[] doubleArray8 = new double[] { 10, 'a' };
        double[] doubleArray11 = new double[] { 10, 'a' };
        double[][] doubleArray12 = new double[][] { doubleArray8, doubleArray11 };
        com.operations.Matrix.Matrix matrix13 = new com.operations.Matrix.Matrix(doubleArray12);
        int int14 = matrix13.getCols();
        int int15 = matrix13.getCols();
        int int16 = matrix13.getCols();
        com.operations.Matrix.Matrix[] matrixArray17 = com.operations.Matrix.MatrixDecompositions.luDecomposition(matrix13);
        com.operations.Matrix.Matrix matrix18 = com.operations.Matrix.MatrixOperations.multiply(matrix5, matrix13);
        com.operations.Matrix.Matrix matrix20 = com.operations.Matrix.MatrixTransformations.rotate2D((double) (short) 100);
        boolean boolean22 = com.operations.Matrix.MatrixUtils.compare(matrix13, matrix20, (double) (byte) 0);
        double[] doubleArray25 = new double[] { 10, 'a' };
        double[] doubleArray28 = new double[] { 10, 'a' };
        double[][] doubleArray29 = new double[][] { doubleArray25, doubleArray28 };
        com.operations.Matrix.Matrix matrix30 = new com.operations.Matrix.Matrix(doubleArray29);
        com.operations.Matrix.Matrix matrix31 = new com.operations.Matrix.Matrix(doubleArray29);
        com.operations.Matrix.Matrix matrix32 = new com.operations.Matrix.Matrix(doubleArray29);
        boolean boolean34 = com.operations.Matrix.MatrixUtils.compare(matrix13, matrix32, (double) (-1));
        com.operations.Matrix.Matrix matrix36 = com.operations.Matrix.MatrixTransformations.rotate2D((double) (short) 100);
        double[] doubleArray39 = new double[] { 137.90576492663388d, (byte) -1 };
        double[] doubleArray40 = com.operations.Matrix.MatrixSolver.solveGaussian(matrix36, doubleArray39);
        com.operations.Matrix.Matrix matrix43 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0L, (double) (byte) 10);
        double[] doubleArray46 = new double[] { 10, 'a' };
        double[] doubleArray49 = new double[] { 10, 'a' };
        double[][] doubleArray50 = new double[][] { doubleArray46, doubleArray49 };
        com.operations.Matrix.Matrix matrix51 = new com.operations.Matrix.Matrix(doubleArray50);
        int int52 = matrix51.getCols();
        int int53 = matrix51.getCols();
        int int54 = matrix51.getCols();
        com.operations.Matrix.Matrix[] matrixArray55 = com.operations.Matrix.MatrixDecompositions.luDecomposition(matrix51);
        com.operations.Matrix.Matrix matrix56 = com.operations.Matrix.MatrixOperations.multiply(matrix43, matrix51);
        boolean boolean58 = com.operations.Matrix.MatrixUtils.compare(matrix36, matrix43, (double) (-1L));
        com.operations.Matrix.Matrix matrix59 = com.operations.Matrix.MatrixOperations.add(matrix32, matrix43);
        boolean boolean61 = com.operations.Matrix.MatrixUtils.compare(matrix2, matrix59, 146.4308710620817d);
        com.operations.Matrix.Matrix matrix63 = com.operations.Matrix.MatrixOperations.scalarMultiply(matrix59, (double) 100L);
        com.operations.Matrix.Matrix matrix64 = com.operations.Matrix.MatrixDecompositions.choleskyDecomposition(matrix63);
        com.operations.Matrix.Matrix matrix66 = com.operations.Matrix.MatrixOperations.scalarMultiply(matrix64, 14.142135623730951d);
        com.operations.Matrix.Matrix matrix71 = com.operations.Matrix.MatrixUtils.generateRandomMatrix((int) '4', (int) (short) 100, 0, 0);
        boolean boolean73 = com.operations.Matrix.MatrixUtils.compare(matrix64, matrix71, 576.1705606798018d);
        org.junit.Assert.assertNotNull(matrix2);
        org.junit.Assert.assertNotNull(matrix5);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertArrayEquals(doubleArray8, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertArrayEquals(doubleArray11, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 2 + "'", int14 == 2);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 2 + "'", int15 == 2);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 2 + "'", int16 == 2);
        org.junit.Assert.assertNotNull(matrixArray17);
        org.junit.Assert.assertNotNull(matrix18);
        org.junit.Assert.assertNotNull(matrix20);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertArrayEquals(doubleArray25, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertArrayEquals(doubleArray28, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(matrix36);
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertArrayEquals(doubleArray39, new double[] { 137.90576492663388d, (-1.0d) }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertArrayEquals(doubleArray40, new double[] { (-24.931892522286255d), (-135.63701830716116d) }, 1.0E-15);
        org.junit.Assert.assertNotNull(matrix43);
        org.junit.Assert.assertNotNull(doubleArray46);
        org.junit.Assert.assertArrayEquals(doubleArray46, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertArrayEquals(doubleArray49, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 2 + "'", int52 == 2);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 2 + "'", int53 == 2);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 2 + "'", int54 == 2);
        org.junit.Assert.assertNotNull(matrixArray55);
        org.junit.Assert.assertNotNull(matrix56);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(matrix59);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + true + "'", boolean61 == true);
        org.junit.Assert.assertNotNull(matrix63);
        org.junit.Assert.assertNotNull(matrix64);
        org.junit.Assert.assertNotNull(matrix66);
        org.junit.Assert.assertNotNull(matrix71);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
    }

    @Test
    public void test3562() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3562");
        com.operations.Matrix.Matrix matrix1 = com.operations.Matrix.MatrixTransformations.rotate2D((-0.1736481776669303d));
        double[] doubleArray4 = new double[] { 10, 'a' };
        double[] doubleArray7 = new double[] { 10, 'a' };
        double[][] doubleArray8 = new double[][] { doubleArray4, doubleArray7 };
        com.operations.Matrix.Matrix matrix9 = new com.operations.Matrix.Matrix(doubleArray8);
        com.operations.Matrix.Matrix matrix10 = new com.operations.Matrix.Matrix(doubleArray8);
        boolean boolean11 = com.operations.Matrix.MatrixUtils.isSquare(matrix10);
        double[] doubleArray14 = new double[] { 10, 'a' };
        double[] doubleArray17 = new double[] { 10, 'a' };
        double[][] doubleArray18 = new double[][] { doubleArray14, doubleArray17 };
        com.operations.Matrix.Matrix matrix19 = new com.operations.Matrix.Matrix(doubleArray18);
        int int20 = matrix19.getCols();
        int int21 = matrix19.getCols();
        matrix19.print();
        double[] doubleArray25 = new double[] { 10, 'a' };
        double[] doubleArray28 = new double[] { 10, 'a' };
        double[][] doubleArray29 = new double[][] { doubleArray25, doubleArray28 };
        com.operations.Matrix.Matrix matrix30 = new com.operations.Matrix.Matrix(doubleArray29);
        boolean boolean32 = com.operations.Matrix.MatrixUtils.compare(matrix19, matrix30, (double) (-1));
        com.operations.Matrix.Matrix matrix33 = com.operations.Matrix.MatrixOperations.subtract(matrix10, matrix30);
        double[] doubleArray36 = new double[] { 10, 'a' };
        double[] doubleArray39 = new double[] { 10, 'a' };
        double[][] doubleArray40 = new double[][] { doubleArray36, doubleArray39 };
        com.operations.Matrix.Matrix matrix41 = new com.operations.Matrix.Matrix(doubleArray40);
        com.operations.Matrix.Matrix matrix42 = new com.operations.Matrix.Matrix(doubleArray40);
        boolean boolean43 = com.operations.Matrix.MatrixUtils.isSquare(matrix42);
        double[] doubleArray46 = new double[] { 10, 'a' };
        double[] doubleArray49 = new double[] { 10, 'a' };
        double[][] doubleArray50 = new double[][] { doubleArray46, doubleArray49 };
        com.operations.Matrix.Matrix matrix51 = new com.operations.Matrix.Matrix(doubleArray50);
        int int52 = matrix51.getCols();
        int int53 = matrix51.getCols();
        matrix51.print();
        double[] doubleArray57 = new double[] { 10, 'a' };
        double[] doubleArray60 = new double[] { 10, 'a' };
        double[][] doubleArray61 = new double[][] { doubleArray57, doubleArray60 };
        com.operations.Matrix.Matrix matrix62 = new com.operations.Matrix.Matrix(doubleArray61);
        boolean boolean64 = com.operations.Matrix.MatrixUtils.compare(matrix51, matrix62, (double) (-1));
        com.operations.Matrix.Matrix matrix65 = com.operations.Matrix.MatrixOperations.subtract(matrix42, matrix62);
        com.operations.Matrix.Matrix matrix66 = com.operations.Matrix.MatrixOperations.add(matrix10, matrix65);
        com.operations.Matrix.Matrix matrix67 = com.operations.Matrix.MatrixOperations.multiply(matrix1, matrix66);
        matrix66.print();
        int int69 = matrix66.getCols();
        com.operations.Matrix.Matrix[] matrixArray70 = com.operations.Matrix.MatrixDecompositions.luDecomposition(matrix66);
        org.junit.Assert.assertNotNull(matrix1);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertArrayEquals(doubleArray4, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertArrayEquals(doubleArray7, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertArrayEquals(doubleArray14, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertArrayEquals(doubleArray17, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 2 + "'", int20 == 2);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 2 + "'", int21 == 2);
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertArrayEquals(doubleArray25, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertArrayEquals(doubleArray28, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(matrix33);
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertArrayEquals(doubleArray36, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertArrayEquals(doubleArray39, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertNotNull(doubleArray46);
        org.junit.Assert.assertArrayEquals(doubleArray46, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertArrayEquals(doubleArray49, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 2 + "'", int52 == 2);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 2 + "'", int53 == 2);
        org.junit.Assert.assertNotNull(doubleArray57);
        org.junit.Assert.assertArrayEquals(doubleArray57, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray60);
        org.junit.Assert.assertArrayEquals(doubleArray60, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray61);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertNotNull(matrix65);
        org.junit.Assert.assertNotNull(matrix66);
        org.junit.Assert.assertNotNull(matrix67);
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 2 + "'", int69 == 2);
        org.junit.Assert.assertNotNull(matrixArray70);
    }

    @Test
    public void test3563() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3563");
        com.operations.Matrix.Matrix matrix2 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0L, (double) (byte) 10);
        double[] doubleArray5 = new double[] { 10, 'a' };
        double[] doubleArray8 = new double[] { 10, 'a' };
        double[][] doubleArray9 = new double[][] { doubleArray5, doubleArray8 };
        com.operations.Matrix.Matrix matrix10 = new com.operations.Matrix.Matrix(doubleArray9);
        int int11 = matrix10.getCols();
        int int12 = matrix10.getCols();
        int int13 = matrix10.getCols();
        com.operations.Matrix.Matrix[] matrixArray14 = com.operations.Matrix.MatrixDecompositions.luDecomposition(matrix10);
        com.operations.Matrix.Matrix matrix15 = com.operations.Matrix.MatrixOperations.multiply(matrix2, matrix10);
        com.operations.Matrix.Matrix matrix17 = com.operations.Matrix.MatrixTransformations.rotate2D((double) (short) 100);
        boolean boolean19 = com.operations.Matrix.MatrixUtils.compare(matrix10, matrix17, (double) (byte) 0);
        double[] doubleArray22 = new double[] { 10, 'a' };
        double[] doubleArray25 = new double[] { 10, 'a' };
        double[][] doubleArray26 = new double[][] { doubleArray22, doubleArray25 };
        com.operations.Matrix.Matrix matrix27 = new com.operations.Matrix.Matrix(doubleArray26);
        com.operations.Matrix.Matrix matrix28 = new com.operations.Matrix.Matrix(doubleArray26);
        com.operations.Matrix.Matrix matrix29 = new com.operations.Matrix.Matrix(doubleArray26);
        boolean boolean31 = com.operations.Matrix.MatrixUtils.compare(matrix10, matrix29, (double) (-1));
        double[] doubleArray34 = new double[] { 10, 'a' };
        double[] doubleArray37 = new double[] { 10, 'a' };
        double[][] doubleArray38 = new double[][] { doubleArray34, doubleArray37 };
        com.operations.Matrix.Matrix matrix39 = new com.operations.Matrix.Matrix(doubleArray38);
        com.operations.Matrix.Matrix matrix40 = new com.operations.Matrix.Matrix(doubleArray38);
        boolean boolean41 = com.operations.Matrix.MatrixUtils.isSquare(matrix40);
        com.operations.Matrix.Matrix matrix42 = com.operations.Matrix.MatrixOperations.multiply(matrix29, matrix40);
        double[][] doubleArray43 = matrix40.getData();
        com.operations.Matrix.Matrix matrix44 = new com.operations.Matrix.Matrix(doubleArray43);
        com.operations.Matrix.Matrix matrix45 = new com.operations.Matrix.Matrix(doubleArray43);
        com.operations.Matrix.Matrix matrix46 = new com.operations.Matrix.Matrix(doubleArray43);
        com.operations.Matrix.Matrix matrix48 = com.operations.Matrix.MatrixOperations.scalarMultiply(matrix46, (double) 'a');
        double[][] doubleArray49 = matrix48.getData();
        com.operations.Matrix.Matrix matrix52 = com.operations.Matrix.MatrixTransformations.scale2D((double) 100.0f, 20.0d);
        com.operations.Matrix.Matrix matrix53 = com.operations.Matrix.MatrixOperations.add(matrix48, matrix52);
        double double54 = com.operations.Matrix.MatrixUtils.frobeniusNorm(matrix52);
        com.operations.Matrix.Matrix matrix57 = new com.operations.Matrix.Matrix(0, (int) (short) 0);
        boolean boolean58 = com.operations.Matrix.MatrixUtils.isSymmetric(matrix57);
        // The following exception was thrown during execution in test generation
        try {
            com.operations.Matrix.Matrix matrix59 = com.operations.Matrix.MatrixOperations.multiply(matrix52, matrix57);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Matrix A's columns must match Matrix B's rows for multiplication.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(matrix2);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertArrayEquals(doubleArray5, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertArrayEquals(doubleArray8, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 2 + "'", int11 == 2);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 2 + "'", int12 == 2);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 2 + "'", int13 == 2);
        org.junit.Assert.assertNotNull(matrixArray14);
        org.junit.Assert.assertNotNull(matrix15);
        org.junit.Assert.assertNotNull(matrix17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertArrayEquals(doubleArray22, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertArrayEquals(doubleArray25, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertArrayEquals(doubleArray34, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertArrayEquals(doubleArray37, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertNotNull(matrix42);
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertNotNull(matrix48);
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertNotNull(matrix52);
        org.junit.Assert.assertNotNull(matrix53);
        org.junit.Assert.assertTrue("'" + double54 + "' != '" + 101.9803902718557d + "'", double54 == 101.9803902718557d);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + true + "'", boolean58 == true);
    }

    @Test
    public void test3564() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3564");
        com.operations.Matrix.Matrix matrix1 = com.operations.Matrix.MatrixTransformations.rotate2D((double) (short) 100);
        double[] doubleArray4 = new double[] { 137.90576492663388d, (byte) -1 };
        double[] doubleArray5 = com.operations.Matrix.MatrixSolver.solveGaussian(matrix1, doubleArray4);
        com.operations.Matrix.Matrix matrix8 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0L, (double) (byte) 10);
        double[] doubleArray11 = new double[] { 10, 'a' };
        double[] doubleArray14 = new double[] { 10, 'a' };
        double[][] doubleArray15 = new double[][] { doubleArray11, doubleArray14 };
        com.operations.Matrix.Matrix matrix16 = new com.operations.Matrix.Matrix(doubleArray15);
        int int17 = matrix16.getCols();
        int int18 = matrix16.getCols();
        int int19 = matrix16.getCols();
        com.operations.Matrix.Matrix[] matrixArray20 = com.operations.Matrix.MatrixDecompositions.luDecomposition(matrix16);
        com.operations.Matrix.Matrix matrix21 = com.operations.Matrix.MatrixOperations.multiply(matrix8, matrix16);
        boolean boolean23 = com.operations.Matrix.MatrixUtils.compare(matrix1, matrix8, (double) (-1L));
        boolean boolean24 = com.operations.Matrix.MatrixUtils.isSymmetric(matrix1);
        com.operations.Matrix.Matrix matrix27 = com.operations.Matrix.MatrixTransformations.scale2D((double) (-1L), (double) '4');
        double[][] doubleArray28 = matrix27.getData();
        com.operations.Matrix.Matrix matrix29 = com.operations.Matrix.MatrixOperations.multiply(matrix1, matrix27);
        com.operations.Matrix.Matrix[] matrixArray30 = com.operations.Matrix.MatrixDecompositions.luDecomposition(matrix27);
        boolean boolean31 = com.operations.Matrix.MatrixUtils.isSymmetric(matrix27);
        org.junit.Assert.assertNotNull(matrix1);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertArrayEquals(doubleArray4, new double[] { 137.90576492663388d, (-1.0d) }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertArrayEquals(doubleArray5, new double[] { (-24.931892522286255d), (-135.63701830716116d) }, 1.0E-15);
        org.junit.Assert.assertNotNull(matrix8);
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertArrayEquals(doubleArray11, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertArrayEquals(doubleArray14, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 2 + "'", int17 == 2);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 2 + "'", int18 == 2);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 2 + "'", int19 == 2);
        org.junit.Assert.assertNotNull(matrixArray20);
        org.junit.Assert.assertNotNull(matrix21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(matrix27);
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertNotNull(matrix29);
        org.junit.Assert.assertNotNull(matrixArray30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
    }

    @Test
    public void test3565() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3565");
        com.operations.Matrix.Matrix matrix2 = com.operations.Matrix.MatrixTransformations.scale2D((double) (short) 10, 19018.0d);
        org.junit.Assert.assertNotNull(matrix2);
    }

    @Test
    public void test3566() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3566");
        com.operations.Matrix.Matrix matrix1 = com.operations.Matrix.MatrixTransformations.rotate2D((double) '4');
        double[] doubleArray4 = new double[] { 10, 'a' };
        double[] doubleArray7 = new double[] { 10, 'a' };
        double[][] doubleArray8 = new double[][] { doubleArray4, doubleArray7 };
        com.operations.Matrix.Matrix matrix9 = new com.operations.Matrix.Matrix(doubleArray8);
        com.operations.Matrix.Matrix matrix10 = new com.operations.Matrix.Matrix(doubleArray8);
        com.operations.Matrix.Matrix matrix12 = com.operations.Matrix.MatrixTransformations.rotate2D((double) (short) 100);
        double[] doubleArray15 = new double[] { 137.90576492663388d, (byte) -1 };
        double[] doubleArray16 = com.operations.Matrix.MatrixSolver.solveGaussian(matrix12, doubleArray15);
        com.operations.Matrix.Matrix matrix17 = com.operations.Matrix.MatrixOperations.add(matrix10, matrix12);
        boolean boolean18 = com.operations.Matrix.MatrixUtils.isSymmetric(matrix17);
        boolean boolean20 = com.operations.Matrix.MatrixUtils.compare(matrix1, matrix17, 364.0054944640259d);
        com.operations.Matrix.Matrix matrix23 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0L, (double) (byte) 10);
        int int24 = matrix23.getRows();
        com.operations.Matrix.Matrix matrix26 = com.operations.Matrix.MatrixOperations.scalarMultiply(matrix23, (double) 2);
        matrix23.print();
        com.operations.Matrix.Matrix matrix28 = com.operations.Matrix.MatrixOperations.multiply(matrix17, matrix23);
        double double29 = com.operations.Matrix.MatrixUtils.frobeniusNorm(matrix28);
        org.junit.Assert.assertNotNull(matrix1);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertArrayEquals(doubleArray4, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertArrayEquals(doubleArray7, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertNotNull(matrix12);
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertArrayEquals(doubleArray15, new double[] { 137.90576492663388d, (-1.0d) }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertArrayEquals(doubleArray16, new double[] { (-24.931892522286255d), (-135.63701830716116d) }, 1.0E-15);
        org.junit.Assert.assertNotNull(matrix17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertNotNull(matrix23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 2 + "'", int24 == 2);
        org.junit.Assert.assertNotNull(matrix26);
        org.junit.Assert.assertNotNull(matrix28);
        org.junit.Assert.assertTrue("'" + double29 + "' != '" + 1363.6076983299943d + "'", double29 == 1363.6076983299943d);
    }

    @Test
    public void test3567() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3567");
        com.operations.Matrix.Matrix matrix2 = com.operations.Matrix.MatrixTransformations.project2D((double) ' ', (double) (byte) 0);
        // The following exception was thrown during execution in test generation
        try {
            double double5 = matrix2.getValue(2, (int) (short) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(matrix2);
    }

    @Test
    public void test3568() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3568");
        com.operations.Matrix.Matrix matrix4 = com.operations.Matrix.MatrixUtils.generateRandomMatrix(10, 97, 0, (int) ' ');
        double[] doubleArray7 = new double[] { 10, 'a' };
        double[] doubleArray10 = new double[] { 10, 'a' };
        double[][] doubleArray11 = new double[][] { doubleArray7, doubleArray10 };
        com.operations.Matrix.Matrix matrix12 = new com.operations.Matrix.Matrix(doubleArray11);
        com.operations.Matrix.Matrix matrix13 = new com.operations.Matrix.Matrix(doubleArray11);
        com.operations.Matrix.Matrix matrix14 = new com.operations.Matrix.Matrix(doubleArray11);
        com.operations.Matrix.Matrix matrix15 = new com.operations.Matrix.Matrix(doubleArray11);
        com.operations.Matrix.Matrix matrix16 = new com.operations.Matrix.Matrix(doubleArray11);
        com.operations.Matrix.Matrix matrix18 = com.operations.Matrix.MatrixTransformations.rotate2D((double) 1.0f);
        com.operations.Matrix.Matrix matrix21 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0L, (double) (byte) 10);
        int int22 = matrix21.getRows();
        com.operations.Matrix.Matrix matrix24 = com.operations.Matrix.MatrixOperations.scalarMultiply(matrix21, (double) 2);
        double double25 = com.operations.Matrix.MatrixUtils.frobeniusNorm(matrix21);
        com.operations.Matrix.Matrix matrix28 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0L, (double) (byte) 10);
        int int29 = matrix28.getRows();
        com.operations.Matrix.Matrix matrix31 = com.operations.Matrix.MatrixOperations.scalarMultiply(matrix28, (double) 2);
        com.operations.Matrix.Matrix matrix32 = com.operations.Matrix.MatrixOperations.subtract(matrix21, matrix31);
        com.operations.Matrix.Matrix matrix33 = com.operations.Matrix.MatrixOperations.add(matrix18, matrix31);
        matrix18.print();
        double[] doubleArray37 = new double[] { 10, 'a' };
        double[] doubleArray40 = new double[] { 10, 'a' };
        double[][] doubleArray41 = new double[][] { doubleArray37, doubleArray40 };
        com.operations.Matrix.Matrix matrix42 = new com.operations.Matrix.Matrix(doubleArray41);
        com.operations.Matrix.Matrix matrix43 = com.operations.Matrix.MatrixOperations.transpose(matrix42);
        com.operations.Matrix.Matrix matrix46 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0L, (double) (byte) 10);
        int int47 = matrix46.getRows();
        com.operations.Matrix.Matrix matrix53 = com.operations.Matrix.MatrixUtils.generateRandomMatrix(100, (int) (byte) 1, (int) '#', (int) '#', 1L);
        boolean boolean55 = com.operations.Matrix.MatrixUtils.compare(matrix46, matrix53, (double) 1.0f);
        com.operations.Matrix.Matrix matrix57 = com.operations.Matrix.MatrixOperations.scalarMultiply(matrix46, (double) 1L);
        matrix46.print();
        com.operations.Matrix.Matrix matrix59 = com.operations.Matrix.MatrixOperations.multiply(matrix43, matrix46);
        com.operations.Matrix.Matrix matrix60 = com.operations.Matrix.MatrixOperations.multiply(matrix18, matrix46);
        int int61 = matrix46.getCols();
        boolean boolean63 = com.operations.Matrix.MatrixUtils.compare(matrix16, matrix46, 146.4308710620817d);
        // The following exception was thrown during execution in test generation
        try {
            com.operations.Matrix.Matrix matrix64 = com.operations.Matrix.MatrixOperations.subtract(matrix4, matrix16);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Matrices must have the same dimensions for subtraction.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(matrix4);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertArrayEquals(doubleArray7, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertArrayEquals(doubleArray10, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertNotNull(matrix18);
        org.junit.Assert.assertNotNull(matrix21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 2 + "'", int22 == 2);
        org.junit.Assert.assertNotNull(matrix24);
        org.junit.Assert.assertTrue("'" + double25 + "' != '" + 10.0d + "'", double25 == 10.0d);
        org.junit.Assert.assertNotNull(matrix28);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 2 + "'", int29 == 2);
        org.junit.Assert.assertNotNull(matrix31);
        org.junit.Assert.assertNotNull(matrix32);
        org.junit.Assert.assertNotNull(matrix33);
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertArrayEquals(doubleArray37, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertArrayEquals(doubleArray40, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertNotNull(matrix43);
        org.junit.Assert.assertNotNull(matrix46);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 2 + "'", int47 == 2);
        org.junit.Assert.assertNotNull(matrix53);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNotNull(matrix57);
        org.junit.Assert.assertNotNull(matrix59);
        org.junit.Assert.assertNotNull(matrix60);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 2 + "'", int61 == 2);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + true + "'", boolean63 == true);
    }

    @Test
    public void test3569() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3569");
        com.operations.Matrix.Matrix matrix1 = com.operations.Matrix.MatrixTransformations.rotate2D((double) 1.0f);
        com.operations.Matrix.Matrix matrix4 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0L, (double) (byte) 10);
        int int5 = matrix4.getRows();
        com.operations.Matrix.Matrix matrix7 = com.operations.Matrix.MatrixOperations.scalarMultiply(matrix4, (double) 2);
        double double8 = com.operations.Matrix.MatrixUtils.frobeniusNorm(matrix4);
        com.operations.Matrix.Matrix matrix11 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0L, (double) (byte) 10);
        int int12 = matrix11.getRows();
        com.operations.Matrix.Matrix matrix14 = com.operations.Matrix.MatrixOperations.scalarMultiply(matrix11, (double) 2);
        com.operations.Matrix.Matrix matrix15 = com.operations.Matrix.MatrixOperations.subtract(matrix4, matrix14);
        com.operations.Matrix.Matrix matrix16 = com.operations.Matrix.MatrixOperations.add(matrix1, matrix14);
        com.operations.Matrix.Matrix[] matrixArray17 = com.operations.Matrix.MatrixDecompositions.luDecomposition(matrix14);
        boolean boolean18 = com.operations.Matrix.MatrixUtils.isSquare(matrix14);
        com.operations.Matrix.Matrix matrix19 = com.operations.Matrix.MatrixOperations.transpose(matrix14);
        double[][] doubleArray20 = matrix14.getData();
        com.operations.Matrix.Matrix matrix21 = null;
        // The following exception was thrown during execution in test generation
        try {
            com.operations.Matrix.Matrix matrix22 = com.operations.Matrix.MatrixOperations.multiply(matrix14, matrix21);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(matrix1);
        org.junit.Assert.assertNotNull(matrix4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 2 + "'", int5 == 2);
        org.junit.Assert.assertNotNull(matrix7);
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 10.0d + "'", double8 == 10.0d);
        org.junit.Assert.assertNotNull(matrix11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 2 + "'", int12 == 2);
        org.junit.Assert.assertNotNull(matrix14);
        org.junit.Assert.assertNotNull(matrix15);
        org.junit.Assert.assertNotNull(matrix16);
        org.junit.Assert.assertNotNull(matrixArray17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(matrix19);
        org.junit.Assert.assertNotNull(doubleArray20);
    }

    @Test
    public void test3570() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3570");
        com.operations.Matrix.Matrix matrix2 = new com.operations.Matrix.Matrix((int) (short) 0, (int) (short) 0);
        // The following exception was thrown during execution in test generation
        try {
            matrix2.setValue((int) (byte) 1, (int) (byte) 100, 0.01745240643728351d);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: Index 1 out of bounds for length 0");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
    }

    @Test
    public void test3571() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3571");
        com.operations.Matrix.Matrix matrix5 = com.operations.Matrix.MatrixUtils.generateRandomMatrix((int) (short) 1, 97, 0, (int) ' ', (long) 'a');
        org.junit.Assert.assertNotNull(matrix5);
    }

    @Test
    public void test3572() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3572");
        com.operations.Matrix.Matrix matrix2 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0.0f, (double) (-1));
        com.operations.Matrix.Matrix matrix4 = com.operations.Matrix.MatrixTransformations.rotate2D((double) (byte) 100);
        double double5 = com.operations.Matrix.MatrixUtils.frobeniusNorm(matrix4);
        com.operations.Matrix.Matrix matrix8 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0.0f, (double) (-1));
        com.operations.Matrix.Matrix matrix11 = com.operations.Matrix.MatrixTransformations.scale2D(146.4308710620817d, (double) 10L);
        com.operations.Matrix.Matrix matrix12 = com.operations.Matrix.MatrixOperations.multiply(matrix8, matrix11);
        com.operations.Matrix.Matrix matrix14 = com.operations.Matrix.MatrixTransformations.rotate2D((double) 1.0f);
        com.operations.Matrix.Matrix matrix17 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0L, (double) (byte) 10);
        int int18 = matrix17.getRows();
        com.operations.Matrix.Matrix matrix20 = com.operations.Matrix.MatrixOperations.scalarMultiply(matrix17, (double) 2);
        double double21 = com.operations.Matrix.MatrixUtils.frobeniusNorm(matrix17);
        com.operations.Matrix.Matrix matrix24 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0L, (double) (byte) 10);
        int int25 = matrix24.getRows();
        com.operations.Matrix.Matrix matrix27 = com.operations.Matrix.MatrixOperations.scalarMultiply(matrix24, (double) 2);
        com.operations.Matrix.Matrix matrix28 = com.operations.Matrix.MatrixOperations.subtract(matrix17, matrix27);
        com.operations.Matrix.Matrix matrix29 = com.operations.Matrix.MatrixOperations.add(matrix14, matrix27);
        matrix14.print();
        double[] doubleArray33 = new double[] { 10, 'a' };
        double[] doubleArray36 = new double[] { 10, 'a' };
        double[][] doubleArray37 = new double[][] { doubleArray33, doubleArray36 };
        com.operations.Matrix.Matrix matrix38 = new com.operations.Matrix.Matrix(doubleArray37);
        com.operations.Matrix.Matrix matrix39 = com.operations.Matrix.MatrixOperations.transpose(matrix38);
        com.operations.Matrix.Matrix matrix42 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0L, (double) (byte) 10);
        int int43 = matrix42.getRows();
        com.operations.Matrix.Matrix matrix49 = com.operations.Matrix.MatrixUtils.generateRandomMatrix(100, (int) (byte) 1, (int) '#', (int) '#', 1L);
        boolean boolean51 = com.operations.Matrix.MatrixUtils.compare(matrix42, matrix49, (double) 1.0f);
        com.operations.Matrix.Matrix matrix53 = com.operations.Matrix.MatrixOperations.scalarMultiply(matrix42, (double) 1L);
        matrix42.print();
        com.operations.Matrix.Matrix matrix55 = com.operations.Matrix.MatrixOperations.multiply(matrix39, matrix42);
        com.operations.Matrix.Matrix matrix56 = com.operations.Matrix.MatrixOperations.multiply(matrix14, matrix42);
        com.operations.Matrix.Matrix matrix57 = com.operations.Matrix.MatrixOperations.subtract(matrix8, matrix42);
        com.operations.Matrix.Matrix matrix58 = com.operations.Matrix.MatrixOperations.subtract(matrix4, matrix8);
        com.operations.Matrix.Matrix matrix60 = com.operations.Matrix.MatrixTransformations.rotate2D((double) (-1L));
        com.operations.Matrix.Matrix matrix62 = com.operations.Matrix.MatrixTransformations.rotate2D((double) (short) 100);
        double[] doubleArray65 = new double[] { 137.90576492663388d, (byte) -1 };
        double[] doubleArray66 = com.operations.Matrix.MatrixSolver.solveGaussian(matrix62, doubleArray65);
        double[] doubleArray67 = com.operations.Matrix.MatrixSolver.solveGaussian(matrix60, doubleArray65);
        com.operations.Matrix.Matrix matrix68 = com.operations.Matrix.MatrixOperations.add(matrix4, matrix60);
        boolean boolean70 = com.operations.Matrix.MatrixUtils.compare(matrix2, matrix4, (double) 1.0f);
        com.operations.Matrix.Matrix[] matrixArray71 = com.operations.Matrix.MatrixDecompositions.luDecomposition(matrix4);
        org.junit.Assert.assertNotNull(matrix2);
        org.junit.Assert.assertNotNull(matrix4);
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 1.414213562373095d + "'", double5 == 1.414213562373095d);
        org.junit.Assert.assertNotNull(matrix8);
        org.junit.Assert.assertNotNull(matrix11);
        org.junit.Assert.assertNotNull(matrix12);
        org.junit.Assert.assertNotNull(matrix14);
        org.junit.Assert.assertNotNull(matrix17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 2 + "'", int18 == 2);
        org.junit.Assert.assertNotNull(matrix20);
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 10.0d + "'", double21 == 10.0d);
        org.junit.Assert.assertNotNull(matrix24);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 2 + "'", int25 == 2);
        org.junit.Assert.assertNotNull(matrix27);
        org.junit.Assert.assertNotNull(matrix28);
        org.junit.Assert.assertNotNull(matrix29);
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertArrayEquals(doubleArray33, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertArrayEquals(doubleArray36, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertNotNull(matrix39);
        org.junit.Assert.assertNotNull(matrix42);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 2 + "'", int43 == 2);
        org.junit.Assert.assertNotNull(matrix49);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(matrix53);
        org.junit.Assert.assertNotNull(matrix55);
        org.junit.Assert.assertNotNull(matrix56);
        org.junit.Assert.assertNotNull(matrix57);
        org.junit.Assert.assertNotNull(matrix58);
        org.junit.Assert.assertNotNull(matrix60);
        org.junit.Assert.assertNotNull(matrix62);
        org.junit.Assert.assertNotNull(doubleArray65);
        org.junit.Assert.assertArrayEquals(doubleArray65, new double[] { 137.90576492663388d, (-1.0d) }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray66);
        org.junit.Assert.assertArrayEquals(doubleArray66, new double[] { (-24.931892522286255d), (-135.63701830716116d) }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray67);
        org.junit.Assert.assertArrayEquals(doubleArray67, new double[] { 137.90221361711127d, 1.4069397643877004d }, 1.0E-15);
        org.junit.Assert.assertNotNull(matrix68);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + true + "'", boolean70 == true);
        org.junit.Assert.assertNotNull(matrixArray71);
    }

    @Test
    public void test3573() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3573");
        com.operations.Matrix.Matrix matrix1 = com.operations.Matrix.MatrixTransformations.rotate2D((double) (short) 10);
        double[][] doubleArray2 = matrix1.getData();
        com.operations.Matrix.Matrix matrix4 = com.operations.Matrix.MatrixOperations.scalarMultiply(matrix1, (double) 1);
        boolean boolean5 = com.operations.Matrix.MatrixUtils.isSymmetric(matrix1);
        org.junit.Assert.assertNotNull(matrix1);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertNotNull(matrix4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
    }

    @Test
    public void test3574() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3574");
        com.operations.Matrix.Matrix matrix2 = com.operations.Matrix.MatrixTransformations.scale2D(641.7761389614766d, 3.618031071604718d);
        org.junit.Assert.assertNotNull(matrix2);
    }

    @Test
    public void test3575() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3575");
        com.operations.Matrix.Matrix matrix5 = com.operations.Matrix.MatrixUtils.generateRandomMatrix((int) '4', (int) (short) 100, (int) (byte) -1, (int) (byte) 1, (long) 32);
        org.junit.Assert.assertNotNull(matrix5);
    }

    @Test
    public void test3576() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3576");
        com.operations.Matrix.Matrix matrix4 = com.operations.Matrix.MatrixUtils.generateRandomMatrix(52, 0, 1, 97);
        org.junit.Assert.assertNotNull(matrix4);
    }

    @Test
    public void test3577() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3577");
        com.operations.Matrix.Matrix matrix2 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0L, (double) (byte) 10);
        int int3 = matrix2.getRows();
        com.operations.Matrix.Matrix matrix9 = com.operations.Matrix.MatrixUtils.generateRandomMatrix(100, (int) (byte) 1, (int) '#', (int) '#', 1L);
        boolean boolean11 = com.operations.Matrix.MatrixUtils.compare(matrix2, matrix9, (double) 1.0f);
        com.operations.Matrix.Matrix matrix13 = com.operations.Matrix.MatrixOperations.scalarMultiply(matrix2, (double) 1L);
        matrix2.print();
        com.operations.Matrix.Matrix[] matrixArray15 = com.operations.Matrix.MatrixDecompositions.luDecomposition(matrix2);
        double[] doubleArray18 = new double[] { 10, 'a' };
        double[] doubleArray21 = new double[] { 10, 'a' };
        double[][] doubleArray22 = new double[][] { doubleArray18, doubleArray21 };
        com.operations.Matrix.Matrix matrix23 = new com.operations.Matrix.Matrix(doubleArray22);
        com.operations.Matrix.Matrix matrix24 = new com.operations.Matrix.Matrix(doubleArray22);
        com.operations.Matrix.Matrix[] matrixArray25 = com.operations.Matrix.MatrixDecompositions.luDecomposition(matrix24);
        com.operations.Matrix.Matrix matrix28 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0, (double) 100L);
        com.operations.Matrix.Matrix matrix29 = com.operations.Matrix.MatrixOperations.subtract(matrix24, matrix28);
        double[][] doubleArray30 = matrix29.getData();
        com.operations.Matrix.Matrix matrix31 = new com.operations.Matrix.Matrix(doubleArray30);
        com.operations.Matrix.Matrix matrix32 = new com.operations.Matrix.Matrix(doubleArray30);
        boolean boolean34 = com.operations.Matrix.MatrixUtils.compare(matrix2, matrix32, (double) 10.0f);
        double double35 = com.operations.Matrix.MatrixUtils.frobeniusNorm(matrix2);
        // The following exception was thrown during execution in test generation
        try {
            matrix2.setValue(97, (int) (short) 100, 32.524725901652594d);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: Index 97 out of bounds for length 2");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(matrix2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 2 + "'", int3 == 2);
        org.junit.Assert.assertNotNull(matrix9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(matrix13);
        org.junit.Assert.assertNotNull(matrixArray15);
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertArrayEquals(doubleArray18, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertArrayEquals(doubleArray21, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertNotNull(matrixArray25);
        org.junit.Assert.assertNotNull(matrix28);
        org.junit.Assert.assertNotNull(matrix29);
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + double35 + "' != '" + 10.0d + "'", double35 == 10.0d);
    }

    @Test
    public void test3578() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3578");
        com.operations.Matrix.Matrix matrix2 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0.0f, 350.0d);
        com.operations.Matrix.Matrix matrix5 = com.operations.Matrix.MatrixTransformations.project2D(0.0d, (double) 0);
        com.operations.Matrix.Matrix[] matrixArray6 = com.operations.Matrix.MatrixDecompositions.luDecomposition(matrix5);
        com.operations.Matrix.Matrix matrix9 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0L, (double) (byte) 10);
        int int10 = matrix9.getRows();
        com.operations.Matrix.Matrix matrix12 = com.operations.Matrix.MatrixOperations.scalarMultiply(matrix9, (double) 2);
        double double13 = com.operations.Matrix.MatrixUtils.frobeniusNorm(matrix9);
        int int14 = matrix9.getRows();
        com.operations.Matrix.Matrix matrix15 = com.operations.Matrix.MatrixOperations.transpose(matrix9);
        com.operations.Matrix.Matrix matrix16 = com.operations.Matrix.MatrixOperations.multiply(matrix5, matrix15);
        com.operations.Matrix.Matrix matrix17 = com.operations.Matrix.MatrixOperations.multiply(matrix2, matrix15);
        com.operations.Matrix.Matrix matrix18 = com.operations.Matrix.MatrixOperations.transpose(matrix17);
        double double19 = com.operations.Matrix.MatrixUtils.frobeniusNorm(matrix18);
        double[] doubleArray22 = new double[] { 10, 'a' };
        double[] doubleArray25 = new double[] { 10, 'a' };
        double[][] doubleArray26 = new double[][] { doubleArray22, doubleArray25 };
        com.operations.Matrix.Matrix matrix27 = new com.operations.Matrix.Matrix(doubleArray26);
        int int28 = matrix27.getCols();
        boolean boolean29 = com.operations.Matrix.MatrixUtils.isSquare(matrix27);
        com.operations.Matrix.Matrix matrix30 = com.operations.Matrix.MatrixOperations.transpose(matrix27);
        int int31 = matrix30.getRows();
        com.operations.Matrix.Matrix matrix34 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0L, (double) (byte) 10);
        double[] doubleArray37 = new double[] { 10, 'a' };
        double[] doubleArray40 = new double[] { 10, 'a' };
        double[][] doubleArray41 = new double[][] { doubleArray37, doubleArray40 };
        com.operations.Matrix.Matrix matrix42 = new com.operations.Matrix.Matrix(doubleArray41);
        int int43 = matrix42.getCols();
        int int44 = matrix42.getCols();
        int int45 = matrix42.getCols();
        com.operations.Matrix.Matrix[] matrixArray46 = com.operations.Matrix.MatrixDecompositions.luDecomposition(matrix42);
        com.operations.Matrix.Matrix matrix47 = com.operations.Matrix.MatrixOperations.multiply(matrix34, matrix42);
        com.operations.Matrix.Matrix matrix49 = com.operations.Matrix.MatrixTransformations.rotate2D((double) (short) 100);
        boolean boolean51 = com.operations.Matrix.MatrixUtils.compare(matrix42, matrix49, (double) (byte) 0);
        com.operations.Matrix.Matrix matrix52 = com.operations.Matrix.MatrixOperations.multiply(matrix30, matrix42);
        int int53 = matrix30.getCols();
        double[][] doubleArray54 = matrix30.getData();
        com.operations.Matrix.Matrix matrix57 = com.operations.Matrix.MatrixTransformations.project2D((double) 10L, 10.0d);
        com.operations.Matrix.Matrix matrix59 = com.operations.Matrix.MatrixTransformations.rotate2D((double) (short) 100);
        double[] doubleArray62 = new double[] { 137.90576492663388d, (byte) -1 };
        double[] doubleArray63 = com.operations.Matrix.MatrixSolver.solveGaussian(matrix59, doubleArray62);
        com.operations.Matrix.Matrix matrix66 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0L, (double) (byte) 10);
        double[] doubleArray69 = new double[] { 10, 'a' };
        double[] doubleArray72 = new double[] { 10, 'a' };
        double[][] doubleArray73 = new double[][] { doubleArray69, doubleArray72 };
        com.operations.Matrix.Matrix matrix74 = new com.operations.Matrix.Matrix(doubleArray73);
        int int75 = matrix74.getCols();
        int int76 = matrix74.getCols();
        int int77 = matrix74.getCols();
        com.operations.Matrix.Matrix[] matrixArray78 = com.operations.Matrix.MatrixDecompositions.luDecomposition(matrix74);
        com.operations.Matrix.Matrix matrix79 = com.operations.Matrix.MatrixOperations.multiply(matrix66, matrix74);
        boolean boolean81 = com.operations.Matrix.MatrixUtils.compare(matrix59, matrix66, (double) (-1L));
        double[][] doubleArray82 = matrix59.getData();
        com.operations.Matrix.Matrix matrix84 = com.operations.Matrix.MatrixTransformations.rotate2D((double) (short) 100);
        double[] doubleArray87 = new double[] { 137.90576492663388d, (byte) -1 };
        double[] doubleArray88 = com.operations.Matrix.MatrixSolver.solveGaussian(matrix84, doubleArray87);
        double[] doubleArray89 = com.operations.Matrix.MatrixSolver.solveGaussian(matrix59, doubleArray87);
        double[] doubleArray90 = com.operations.Matrix.MatrixSolver.solveGaussian(matrix57, doubleArray89);
        boolean boolean92 = com.operations.Matrix.MatrixUtils.compare(matrix30, matrix57, (double) 100.0f);
        boolean boolean94 = com.operations.Matrix.MatrixUtils.compare(matrix18, matrix30, 364.0054944640259d);
        boolean boolean95 = com.operations.Matrix.MatrixUtils.isSymmetric(matrix30);
        org.junit.Assert.assertNotNull(matrix2);
        org.junit.Assert.assertNotNull(matrix5);
        org.junit.Assert.assertNotNull(matrixArray6);
        org.junit.Assert.assertNotNull(matrix9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 2 + "'", int10 == 2);
        org.junit.Assert.assertNotNull(matrix12);
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 10.0d + "'", double13 == 10.0d);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 2 + "'", int14 == 2);
        org.junit.Assert.assertNotNull(matrix15);
        org.junit.Assert.assertNotNull(matrix16);
        org.junit.Assert.assertNotNull(matrix17);
        org.junit.Assert.assertNotNull(matrix18);
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 3500.0d + "'", double19 == 3500.0d);
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertArrayEquals(doubleArray22, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertArrayEquals(doubleArray25, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 2 + "'", int28 == 2);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertNotNull(matrix30);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 2 + "'", int31 == 2);
        org.junit.Assert.assertNotNull(matrix34);
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertArrayEquals(doubleArray37, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertArrayEquals(doubleArray40, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 2 + "'", int43 == 2);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 2 + "'", int44 == 2);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 2 + "'", int45 == 2);
        org.junit.Assert.assertNotNull(matrixArray46);
        org.junit.Assert.assertNotNull(matrix47);
        org.junit.Assert.assertNotNull(matrix49);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(matrix52);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 2 + "'", int53 == 2);
        org.junit.Assert.assertNotNull(doubleArray54);
        org.junit.Assert.assertNotNull(matrix57);
        org.junit.Assert.assertNotNull(matrix59);
        org.junit.Assert.assertNotNull(doubleArray62);
        org.junit.Assert.assertArrayEquals(doubleArray62, new double[] { 137.90576492663388d, (-1.0d) }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray63);
        org.junit.Assert.assertArrayEquals(doubleArray63, new double[] { (-24.931892522286255d), (-135.63701830716116d) }, 1.0E-15);
        org.junit.Assert.assertNotNull(matrix66);
        org.junit.Assert.assertNotNull(doubleArray69);
        org.junit.Assert.assertArrayEquals(doubleArray69, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray72);
        org.junit.Assert.assertArrayEquals(doubleArray72, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray73);
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + 2 + "'", int75 == 2);
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 2 + "'", int76 == 2);
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + 2 + "'", int77 == 2);
        org.junit.Assert.assertNotNull(matrixArray78);
        org.junit.Assert.assertNotNull(matrix79);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
        org.junit.Assert.assertNotNull(doubleArray82);
        org.junit.Assert.assertNotNull(matrix84);
        org.junit.Assert.assertNotNull(doubleArray87);
        org.junit.Assert.assertArrayEquals(doubleArray87, new double[] { 137.90576492663388d, (-1.0d) }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray88);
        org.junit.Assert.assertArrayEquals(doubleArray88, new double[] { (-24.931892522286255d), (-135.63701830716116d) }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray89);
        org.junit.Assert.assertArrayEquals(doubleArray89, new double[] { (-24.931892522286255d), (-135.63701830716116d) }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray90);
        org.junit.Assert.assertArrayEquals(doubleArray90, new double[] { (-2.4931892522286256d), (-13.563701830716116d) }, 1.0E-15);
        org.junit.Assert.assertTrue("'" + boolean92 + "' != '" + true + "'", boolean92 == true);
        org.junit.Assert.assertTrue("'" + boolean94 + "' != '" + false + "'", boolean94 == false);
        org.junit.Assert.assertTrue("'" + boolean95 + "' != '" + false + "'", boolean95 == false);
    }

    @Test
    public void test3579() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3579");
        com.operations.Matrix.Matrix matrix4 = com.operations.Matrix.MatrixUtils.generateRandomMatrix((int) (short) 100, (int) (byte) 100, (int) (short) 0, (int) '#');
        boolean boolean5 = com.operations.Matrix.MatrixUtils.isSquare(matrix4);
        org.junit.Assert.assertNotNull(matrix4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
    }

    @Test
    public void test3580() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3580");
        com.operations.Matrix.Matrix matrix2 = new com.operations.Matrix.Matrix(35, 10);
        // The following exception was thrown during execution in test generation
        try {
            com.operations.Matrix.Matrix matrix3 = com.operations.Matrix.MatrixDecompositions.choleskyDecomposition(matrix2);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Matrix must be square for Cholesky decomposition.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test3581() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3581");
        // The following exception was thrown during execution in test generation
        try {
            com.operations.Matrix.Matrix matrix4 = com.operations.Matrix.MatrixUtils.generateRandomMatrix((int) (byte) -1, (int) (short) 0, (int) (short) 1, (int) (byte) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.NegativeArraySizeException; message: -1");
        } catch (java.lang.NegativeArraySizeException e) {
            // Expected exception.
        }
    }

    @Test
    public void test3582() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3582");
        double[] doubleArray2 = new double[] { 10, 'a' };
        double[] doubleArray5 = new double[] { 10, 'a' };
        double[][] doubleArray6 = new double[][] { doubleArray2, doubleArray5 };
        com.operations.Matrix.Matrix matrix7 = new com.operations.Matrix.Matrix(doubleArray6);
        int int8 = matrix7.getCols();
        int int9 = matrix7.getCols();
        matrix7.print();
        double[] doubleArray13 = new double[] { 10, 'a' };
        double[] doubleArray16 = new double[] { 10, 'a' };
        double[][] doubleArray17 = new double[][] { doubleArray13, doubleArray16 };
        com.operations.Matrix.Matrix matrix18 = new com.operations.Matrix.Matrix(doubleArray17);
        boolean boolean20 = com.operations.Matrix.MatrixUtils.compare(matrix7, matrix18, (double) (-1));
        boolean boolean21 = com.operations.Matrix.MatrixUtils.isSymmetric(matrix7);
        int int22 = matrix7.getRows();
        com.operations.Matrix.Matrix matrix23 = com.operations.Matrix.MatrixDecompositions.choleskyDecomposition(matrix7);
        com.operations.Matrix.Matrix matrix26 = com.operations.Matrix.MatrixTransformations.scale2D((double) 10L, 35.0d);
        matrix26.print();
        boolean boolean28 = com.operations.Matrix.MatrixUtils.isSquare(matrix26);
        com.operations.Matrix.Matrix matrix30 = com.operations.Matrix.MatrixTransformations.rotate2D((-1.0d));
        com.operations.Matrix.Matrix matrix32 = com.operations.Matrix.MatrixTransformations.rotate2D((double) (-1L));
        com.operations.Matrix.Matrix matrix34 = com.operations.Matrix.MatrixTransformations.rotate2D((double) (short) 100);
        double[] doubleArray37 = new double[] { 137.90576492663388d, (byte) -1 };
        double[] doubleArray38 = com.operations.Matrix.MatrixSolver.solveGaussian(matrix34, doubleArray37);
        double[] doubleArray39 = com.operations.Matrix.MatrixSolver.solveGaussian(matrix32, doubleArray37);
        double[] doubleArray40 = com.operations.Matrix.MatrixSolver.solveGaussian(matrix30, doubleArray37);
        double[] doubleArray41 = com.operations.Matrix.MatrixSolver.solveGaussian(matrix26, doubleArray37);
        // The following exception was thrown during execution in test generation
        try {
            double[] doubleArray42 = com.operations.Matrix.MatrixSolver.solveGaussian(matrix7, doubleArray41);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Matrix is singular or nearly singular.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertArrayEquals(doubleArray2, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertArrayEquals(doubleArray5, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 2 + "'", int8 == 2);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 2 + "'", int9 == 2);
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertArrayEquals(doubleArray13, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertArrayEquals(doubleArray16, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 2 + "'", int22 == 2);
        org.junit.Assert.assertNotNull(matrix23);
        org.junit.Assert.assertNotNull(matrix26);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertNotNull(matrix30);
        org.junit.Assert.assertNotNull(matrix32);
        org.junit.Assert.assertNotNull(matrix34);
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertArrayEquals(doubleArray37, new double[] { 137.90576492663388d, (-1.0d) }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertArrayEquals(doubleArray38, new double[] { (-24.931892522286255d), (-135.63701830716116d) }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertArrayEquals(doubleArray39, new double[] { 137.90221361711127d, 1.4069397643877004d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertArrayEquals(doubleArray40, new double[] { 137.90221361711127d, 1.4069397643877004d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertArrayEquals(doubleArray41, new double[] { 13.790576492663387d, (-0.02857142857142857d) }, 1.0E-15);
    }

    @Test
    public void test3583() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3583");
        double[] doubleArray2 = new double[] { 10, 'a' };
        double[] doubleArray5 = new double[] { 10, 'a' };
        double[][] doubleArray6 = new double[][] { doubleArray2, doubleArray5 };
        com.operations.Matrix.Matrix matrix7 = new com.operations.Matrix.Matrix(doubleArray6);
        com.operations.Matrix.Matrix matrix8 = new com.operations.Matrix.Matrix(doubleArray6);
        com.operations.Matrix.Matrix[] matrixArray9 = com.operations.Matrix.MatrixDecompositions.luDecomposition(matrix8);
        com.operations.Matrix.Matrix matrix12 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0, (double) 100L);
        com.operations.Matrix.Matrix matrix13 = com.operations.Matrix.MatrixOperations.subtract(matrix8, matrix12);
        double[][] doubleArray14 = matrix13.getData();
        com.operations.Matrix.Matrix matrix15 = new com.operations.Matrix.Matrix(doubleArray14);
        com.operations.Matrix.Matrix matrix17 = com.operations.Matrix.MatrixTransformations.rotate2D(100.0d);
        com.operations.Matrix.Matrix matrix18 = com.operations.Matrix.MatrixOperations.subtract(matrix15, matrix17);
        com.operations.Matrix.Matrix[] matrixArray19 = com.operations.Matrix.MatrixDecompositions.luDecomposition(matrix17);
        int int20 = matrix17.getRows();
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertArrayEquals(doubleArray2, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertArrayEquals(doubleArray5, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertNotNull(matrixArray9);
        org.junit.Assert.assertNotNull(matrix12);
        org.junit.Assert.assertNotNull(matrix13);
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertNotNull(matrix17);
        org.junit.Assert.assertNotNull(matrix18);
        org.junit.Assert.assertNotNull(matrixArray19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 2 + "'", int20 == 2);
    }

    @Test
    public void test3584() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3584");
        com.operations.Matrix.Matrix matrix2 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0L, (double) (byte) 10);
        int int3 = matrix2.getRows();
        com.operations.Matrix.Matrix matrix5 = com.operations.Matrix.MatrixOperations.scalarMultiply(matrix2, (double) 2);
        double double6 = com.operations.Matrix.MatrixUtils.frobeniusNorm(matrix2);
        com.operations.Matrix.Matrix matrix9 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0L, (double) (byte) 10);
        int int10 = matrix9.getRows();
        com.operations.Matrix.Matrix matrix12 = com.operations.Matrix.MatrixOperations.scalarMultiply(matrix9, (double) 2);
        com.operations.Matrix.Matrix matrix13 = com.operations.Matrix.MatrixOperations.subtract(matrix2, matrix12);
        com.operations.Matrix.Matrix matrix14 = com.operations.Matrix.MatrixOperations.transpose(matrix2);
        double[] doubleArray17 = new double[] { 10, 'a' };
        double[] doubleArray20 = new double[] { 10, 'a' };
        double[][] doubleArray21 = new double[][] { doubleArray17, doubleArray20 };
        com.operations.Matrix.Matrix matrix22 = new com.operations.Matrix.Matrix(doubleArray21);
        com.operations.Matrix.Matrix matrix23 = new com.operations.Matrix.Matrix(doubleArray21);
        boolean boolean24 = com.operations.Matrix.MatrixUtils.isSquare(matrix23);
        double[] doubleArray27 = new double[] { 10, 'a' };
        double[] doubleArray30 = new double[] { 10, 'a' };
        double[][] doubleArray31 = new double[][] { doubleArray27, doubleArray30 };
        com.operations.Matrix.Matrix matrix32 = new com.operations.Matrix.Matrix(doubleArray31);
        int int33 = matrix32.getCols();
        int int34 = matrix32.getCols();
        matrix32.print();
        double[] doubleArray38 = new double[] { 10, 'a' };
        double[] doubleArray41 = new double[] { 10, 'a' };
        double[][] doubleArray42 = new double[][] { doubleArray38, doubleArray41 };
        com.operations.Matrix.Matrix matrix43 = new com.operations.Matrix.Matrix(doubleArray42);
        boolean boolean45 = com.operations.Matrix.MatrixUtils.compare(matrix32, matrix43, (double) (-1));
        com.operations.Matrix.Matrix matrix46 = com.operations.Matrix.MatrixOperations.subtract(matrix23, matrix43);
        com.operations.Matrix.Matrix matrix47 = com.operations.Matrix.MatrixOperations.subtract(matrix14, matrix23);
        matrix47.print();
        // The following exception was thrown during execution in test generation
        try {
            com.operations.Matrix.Matrix matrix49 = com.operations.Matrix.MatrixDecompositions.choleskyDecomposition(matrix47);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Matrix is not positive definite.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(matrix2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 2 + "'", int3 == 2);
        org.junit.Assert.assertNotNull(matrix5);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 10.0d + "'", double6 == 10.0d);
        org.junit.Assert.assertNotNull(matrix9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 2 + "'", int10 == 2);
        org.junit.Assert.assertNotNull(matrix12);
        org.junit.Assert.assertNotNull(matrix13);
        org.junit.Assert.assertNotNull(matrix14);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertArrayEquals(doubleArray17, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertArrayEquals(doubleArray20, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertArrayEquals(doubleArray27, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertArrayEquals(doubleArray30, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 2 + "'", int33 == 2);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 2 + "'", int34 == 2);
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertArrayEquals(doubleArray38, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertArrayEquals(doubleArray41, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(matrix46);
        org.junit.Assert.assertNotNull(matrix47);
    }

    @Test
    public void test3585() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3585");
        com.operations.Matrix.Matrix matrix1 = com.operations.Matrix.MatrixTransformations.rotate2D((double) (short) 100);
        double[] doubleArray4 = new double[] { 137.90576492663388d, (byte) -1 };
        double[] doubleArray5 = com.operations.Matrix.MatrixSolver.solveGaussian(matrix1, doubleArray4);
        com.operations.Matrix.Matrix matrix8 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0L, (double) (byte) 10);
        double[] doubleArray11 = new double[] { 10, 'a' };
        double[] doubleArray14 = new double[] { 10, 'a' };
        double[][] doubleArray15 = new double[][] { doubleArray11, doubleArray14 };
        com.operations.Matrix.Matrix matrix16 = new com.operations.Matrix.Matrix(doubleArray15);
        int int17 = matrix16.getCols();
        int int18 = matrix16.getCols();
        int int19 = matrix16.getCols();
        com.operations.Matrix.Matrix[] matrixArray20 = com.operations.Matrix.MatrixDecompositions.luDecomposition(matrix16);
        com.operations.Matrix.Matrix matrix21 = com.operations.Matrix.MatrixOperations.multiply(matrix8, matrix16);
        boolean boolean23 = com.operations.Matrix.MatrixUtils.compare(matrix1, matrix8, (double) (-1L));
        boolean boolean24 = com.operations.Matrix.MatrixUtils.isSymmetric(matrix1);
        int int25 = matrix1.getCols();
        com.operations.Matrix.Matrix[] matrixArray26 = com.operations.Matrix.MatrixDecompositions.luDecomposition(matrix1);
        double double27 = com.operations.Matrix.MatrixUtils.frobeniusNorm(matrix1);
        com.operations.Matrix.Matrix matrix30 = new com.operations.Matrix.Matrix(10, 1);
        matrix30.print();
        // The following exception was thrown during execution in test generation
        try {
            com.operations.Matrix.Matrix matrix32 = com.operations.Matrix.MatrixOperations.multiply(matrix1, matrix30);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Matrix A's columns must match Matrix B's rows for multiplication.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(matrix1);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertArrayEquals(doubleArray4, new double[] { 137.90576492663388d, (-1.0d) }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertArrayEquals(doubleArray5, new double[] { (-24.931892522286255d), (-135.63701830716116d) }, 1.0E-15);
        org.junit.Assert.assertNotNull(matrix8);
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertArrayEquals(doubleArray11, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertArrayEquals(doubleArray14, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 2 + "'", int17 == 2);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 2 + "'", int18 == 2);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 2 + "'", int19 == 2);
        org.junit.Assert.assertNotNull(matrixArray20);
        org.junit.Assert.assertNotNull(matrix21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 2 + "'", int25 == 2);
        org.junit.Assert.assertNotNull(matrixArray26);
        org.junit.Assert.assertTrue("'" + double27 + "' != '" + 1.414213562373095d + "'", double27 == 1.414213562373095d);
    }

    @Test
    public void test3586() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3586");
        com.operations.Matrix.Matrix matrix1 = com.operations.Matrix.MatrixTransformations.rotate2D(350.0d);
        com.operations.Matrix.Matrix matrix3 = com.operations.Matrix.MatrixTransformations.rotate2D((double) (short) 100);
        double[] doubleArray6 = new double[] { 137.90576492663388d, (byte) -1 };
        double[] doubleArray7 = com.operations.Matrix.MatrixSolver.solveGaussian(matrix3, doubleArray6);
        double[] doubleArray8 = com.operations.Matrix.MatrixSolver.solveGaussian(matrix1, doubleArray7);
        com.operations.Matrix.Matrix matrix11 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0L, (double) (byte) 10);
        double[] doubleArray14 = new double[] { 10, 'a' };
        double[] doubleArray17 = new double[] { 10, 'a' };
        double[][] doubleArray18 = new double[][] { doubleArray14, doubleArray17 };
        com.operations.Matrix.Matrix matrix19 = new com.operations.Matrix.Matrix(doubleArray18);
        int int20 = matrix19.getCols();
        int int21 = matrix19.getCols();
        int int22 = matrix19.getCols();
        com.operations.Matrix.Matrix[] matrixArray23 = com.operations.Matrix.MatrixDecompositions.luDecomposition(matrix19);
        com.operations.Matrix.Matrix matrix24 = com.operations.Matrix.MatrixOperations.multiply(matrix11, matrix19);
        com.operations.Matrix.Matrix matrix26 = com.operations.Matrix.MatrixTransformations.rotate2D((double) (short) 100);
        boolean boolean28 = com.operations.Matrix.MatrixUtils.compare(matrix19, matrix26, (double) (byte) 0);
        double[] doubleArray31 = new double[] { 10, 'a' };
        double[] doubleArray34 = new double[] { 10, 'a' };
        double[][] doubleArray35 = new double[][] { doubleArray31, doubleArray34 };
        com.operations.Matrix.Matrix matrix36 = new com.operations.Matrix.Matrix(doubleArray35);
        com.operations.Matrix.Matrix matrix37 = new com.operations.Matrix.Matrix(doubleArray35);
        com.operations.Matrix.Matrix matrix38 = new com.operations.Matrix.Matrix(doubleArray35);
        boolean boolean40 = com.operations.Matrix.MatrixUtils.compare(matrix19, matrix38, (double) (-1));
        double[] doubleArray43 = new double[] { 10, 'a' };
        double[] doubleArray46 = new double[] { 10, 'a' };
        double[][] doubleArray47 = new double[][] { doubleArray43, doubleArray46 };
        com.operations.Matrix.Matrix matrix48 = new com.operations.Matrix.Matrix(doubleArray47);
        com.operations.Matrix.Matrix matrix49 = new com.operations.Matrix.Matrix(doubleArray47);
        boolean boolean50 = com.operations.Matrix.MatrixUtils.isSquare(matrix49);
        com.operations.Matrix.Matrix matrix51 = com.operations.Matrix.MatrixOperations.multiply(matrix38, matrix49);
        double[][] doubleArray52 = matrix49.getData();
        com.operations.Matrix.Matrix matrix53 = new com.operations.Matrix.Matrix(doubleArray52);
        com.operations.Matrix.Matrix matrix54 = new com.operations.Matrix.Matrix(doubleArray52);
        boolean boolean55 = com.operations.Matrix.MatrixUtils.isSymmetric(matrix54);
        com.operations.Matrix.Matrix matrix56 = com.operations.Matrix.MatrixOperations.subtract(matrix1, matrix54);
        int int57 = matrix54.getRows();
        double[][] doubleArray58 = matrix54.getData();
        int int59 = matrix54.getRows();
        org.junit.Assert.assertNotNull(matrix1);
        org.junit.Assert.assertNotNull(matrix3);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertArrayEquals(doubleArray6, new double[] { 137.90576492663388d, (-1.0d) }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertArrayEquals(doubleArray7, new double[] { (-24.931892522286255d), (-135.63701830716116d) }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertArrayEquals(doubleArray8, new double[] { (-0.9999999999999858d), (-137.90576492663388d) }, 1.0E-15);
        org.junit.Assert.assertNotNull(matrix11);
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertArrayEquals(doubleArray14, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertArrayEquals(doubleArray17, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 2 + "'", int20 == 2);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 2 + "'", int21 == 2);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 2 + "'", int22 == 2);
        org.junit.Assert.assertNotNull(matrixArray23);
        org.junit.Assert.assertNotNull(matrix24);
        org.junit.Assert.assertNotNull(matrix26);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertArrayEquals(doubleArray31, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertArrayEquals(doubleArray34, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertArrayEquals(doubleArray43, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray46);
        org.junit.Assert.assertArrayEquals(doubleArray46, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
        org.junit.Assert.assertNotNull(matrix51);
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNotNull(matrix56);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 2 + "'", int57 == 2);
        org.junit.Assert.assertNotNull(doubleArray58);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 2 + "'", int59 == 2);
    }

    @Test
    public void test3587() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3587");
        double[] doubleArray2 = new double[] { 10, 'a' };
        double[] doubleArray5 = new double[] { 10, 'a' };
        double[][] doubleArray6 = new double[][] { doubleArray2, doubleArray5 };
        com.operations.Matrix.Matrix matrix7 = new com.operations.Matrix.Matrix(doubleArray6);
        com.operations.Matrix.Matrix matrix8 = new com.operations.Matrix.Matrix(doubleArray6);
        com.operations.Matrix.Matrix matrix10 = com.operations.Matrix.MatrixTransformations.rotate2D((double) (short) 100);
        double[] doubleArray13 = new double[] { 137.90576492663388d, (byte) -1 };
        double[] doubleArray14 = com.operations.Matrix.MatrixSolver.solveGaussian(matrix10, doubleArray13);
        com.operations.Matrix.Matrix matrix15 = com.operations.Matrix.MatrixOperations.add(matrix8, matrix10);
        boolean boolean16 = com.operations.Matrix.MatrixUtils.isSymmetric(matrix15);
        com.operations.Matrix.Matrix matrix19 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0.0f, (double) (-1));
        com.operations.Matrix.Matrix matrix22 = com.operations.Matrix.MatrixTransformations.scale2D(146.4308710620817d, (double) 10L);
        com.operations.Matrix.Matrix matrix23 = com.operations.Matrix.MatrixOperations.multiply(matrix19, matrix22);
        com.operations.Matrix.Matrix matrix24 = com.operations.Matrix.MatrixOperations.multiply(matrix15, matrix19);
        com.operations.Matrix.Matrix matrix25 = com.operations.Matrix.MatrixOperations.transpose(matrix19);
        com.operations.Matrix.Matrix matrix28 = com.operations.Matrix.MatrixTransformations.project2D(350.0d, (double) 1L);
        com.operations.Matrix.Matrix matrix30 = com.operations.Matrix.MatrixTransformations.rotate2D((double) '4');
        matrix30.print();
        com.operations.Matrix.Matrix matrix33 = com.operations.Matrix.MatrixOperations.scalarMultiply(matrix30, 0.0d);
        com.operations.Matrix.Matrix matrix35 = com.operations.Matrix.MatrixTransformations.rotate2D((double) (short) 100);
        double[] doubleArray38 = new double[] { 137.90576492663388d, (byte) -1 };
        double[] doubleArray39 = com.operations.Matrix.MatrixSolver.solveGaussian(matrix35, doubleArray38);
        double[] doubleArray40 = com.operations.Matrix.MatrixSolver.solveGaussian(matrix30, doubleArray38);
        double[] doubleArray41 = com.operations.Matrix.MatrixSolver.solveGaussian(matrix28, doubleArray38);
        // The following exception was thrown during execution in test generation
        try {
            double[] doubleArray42 = com.operations.Matrix.MatrixSolver.solveGaussian(matrix19, doubleArray41);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Matrix is singular or nearly singular.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertArrayEquals(doubleArray2, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertArrayEquals(doubleArray5, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertNotNull(matrix10);
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertArrayEquals(doubleArray13, new double[] { 137.90576492663388d, (-1.0d) }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertArrayEquals(doubleArray14, new double[] { (-24.931892522286255d), (-135.63701830716116d) }, 1.0E-15);
        org.junit.Assert.assertNotNull(matrix15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(matrix19);
        org.junit.Assert.assertNotNull(matrix22);
        org.junit.Assert.assertNotNull(matrix23);
        org.junit.Assert.assertNotNull(matrix24);
        org.junit.Assert.assertNotNull(matrix25);
        org.junit.Assert.assertNotNull(matrix28);
        org.junit.Assert.assertNotNull(matrix30);
        org.junit.Assert.assertNotNull(matrix33);
        org.junit.Assert.assertNotNull(matrix35);
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertArrayEquals(doubleArray38, new double[] { 137.90576492663388d, (-1.0d) }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertArrayEquals(doubleArray39, new double[] { (-24.931892522286255d), (-135.63701830716116d) }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertArrayEquals(doubleArray40, new double[] { 84.11525593703811d, (-109.28688722187387d) }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertArrayEquals(doubleArray41, new double[] { 0.39401647121895395d, (-1.0d) }, 1.0E-15);
    }

    @Test
    public void test3588() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3588");
        com.operations.Matrix.Matrix matrix2 = com.operations.Matrix.MatrixTransformations.scale2D(0.0d, (double) 1.0f);
        com.operations.Matrix.Matrix matrix4 = com.operations.Matrix.MatrixTransformations.rotate2D((double) 1.0f);
        com.operations.Matrix.Matrix matrix7 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0L, (double) (byte) 10);
        int int8 = matrix7.getRows();
        com.operations.Matrix.Matrix matrix10 = com.operations.Matrix.MatrixOperations.scalarMultiply(matrix7, (double) 2);
        double double11 = com.operations.Matrix.MatrixUtils.frobeniusNorm(matrix7);
        com.operations.Matrix.Matrix matrix14 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0L, (double) (byte) 10);
        int int15 = matrix14.getRows();
        com.operations.Matrix.Matrix matrix17 = com.operations.Matrix.MatrixOperations.scalarMultiply(matrix14, (double) 2);
        com.operations.Matrix.Matrix matrix18 = com.operations.Matrix.MatrixOperations.subtract(matrix7, matrix17);
        com.operations.Matrix.Matrix matrix19 = com.operations.Matrix.MatrixOperations.add(matrix4, matrix17);
        com.operations.Matrix.Matrix matrix21 = com.operations.Matrix.MatrixOperations.scalarMultiply(matrix19, (double) 0L);
        com.operations.Matrix.Matrix matrix22 = com.operations.Matrix.MatrixOperations.subtract(matrix2, matrix21);
        // The following exception was thrown during execution in test generation
        try {
            matrix22.setValue(97, 0, (double) 10);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: Index 97 out of bounds for length 2");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(matrix2);
        org.junit.Assert.assertNotNull(matrix4);
        org.junit.Assert.assertNotNull(matrix7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 2 + "'", int8 == 2);
        org.junit.Assert.assertNotNull(matrix10);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 10.0d + "'", double11 == 10.0d);
        org.junit.Assert.assertNotNull(matrix14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 2 + "'", int15 == 2);
        org.junit.Assert.assertNotNull(matrix17);
        org.junit.Assert.assertNotNull(matrix18);
        org.junit.Assert.assertNotNull(matrix19);
        org.junit.Assert.assertNotNull(matrix21);
        org.junit.Assert.assertNotNull(matrix22);
    }

    @Test
    public void test3589() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3589");
        // The following exception was thrown during execution in test generation
        try {
            com.operations.Matrix.Matrix matrix2 = new com.operations.Matrix.Matrix((int) (short) -1, (int) (byte) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.NegativeArraySizeException; message: -1");
        } catch (java.lang.NegativeArraySizeException e) {
            // Expected exception.
        }
    }

    @Test
    public void test3590() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3590");
        com.operations.Matrix.Matrix matrix1 = com.operations.Matrix.MatrixTransformations.rotate2D((double) (byte) 100);
        double double2 = com.operations.Matrix.MatrixUtils.frobeniusNorm(matrix1);
        com.operations.Matrix.Matrix matrix5 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0.0f, (double) (-1));
        com.operations.Matrix.Matrix matrix8 = com.operations.Matrix.MatrixTransformations.scale2D(146.4308710620817d, (double) 10L);
        com.operations.Matrix.Matrix matrix9 = com.operations.Matrix.MatrixOperations.multiply(matrix5, matrix8);
        com.operations.Matrix.Matrix matrix11 = com.operations.Matrix.MatrixTransformations.rotate2D((double) 1.0f);
        com.operations.Matrix.Matrix matrix14 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0L, (double) (byte) 10);
        int int15 = matrix14.getRows();
        com.operations.Matrix.Matrix matrix17 = com.operations.Matrix.MatrixOperations.scalarMultiply(matrix14, (double) 2);
        double double18 = com.operations.Matrix.MatrixUtils.frobeniusNorm(matrix14);
        com.operations.Matrix.Matrix matrix21 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0L, (double) (byte) 10);
        int int22 = matrix21.getRows();
        com.operations.Matrix.Matrix matrix24 = com.operations.Matrix.MatrixOperations.scalarMultiply(matrix21, (double) 2);
        com.operations.Matrix.Matrix matrix25 = com.operations.Matrix.MatrixOperations.subtract(matrix14, matrix24);
        com.operations.Matrix.Matrix matrix26 = com.operations.Matrix.MatrixOperations.add(matrix11, matrix24);
        matrix11.print();
        double[] doubleArray30 = new double[] { 10, 'a' };
        double[] doubleArray33 = new double[] { 10, 'a' };
        double[][] doubleArray34 = new double[][] { doubleArray30, doubleArray33 };
        com.operations.Matrix.Matrix matrix35 = new com.operations.Matrix.Matrix(doubleArray34);
        com.operations.Matrix.Matrix matrix36 = com.operations.Matrix.MatrixOperations.transpose(matrix35);
        com.operations.Matrix.Matrix matrix39 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0L, (double) (byte) 10);
        int int40 = matrix39.getRows();
        com.operations.Matrix.Matrix matrix46 = com.operations.Matrix.MatrixUtils.generateRandomMatrix(100, (int) (byte) 1, (int) '#', (int) '#', 1L);
        boolean boolean48 = com.operations.Matrix.MatrixUtils.compare(matrix39, matrix46, (double) 1.0f);
        com.operations.Matrix.Matrix matrix50 = com.operations.Matrix.MatrixOperations.scalarMultiply(matrix39, (double) 1L);
        matrix39.print();
        com.operations.Matrix.Matrix matrix52 = com.operations.Matrix.MatrixOperations.multiply(matrix36, matrix39);
        com.operations.Matrix.Matrix matrix53 = com.operations.Matrix.MatrixOperations.multiply(matrix11, matrix39);
        com.operations.Matrix.Matrix matrix54 = com.operations.Matrix.MatrixOperations.subtract(matrix5, matrix39);
        com.operations.Matrix.Matrix matrix55 = com.operations.Matrix.MatrixOperations.subtract(matrix1, matrix5);
        com.operations.Matrix.Matrix[] matrixArray56 = com.operations.Matrix.MatrixDecompositions.luDecomposition(matrix55);
        matrix55.print();
        boolean boolean58 = com.operations.Matrix.MatrixUtils.isSymmetric(matrix55);
        org.junit.Assert.assertNotNull(matrix1);
        org.junit.Assert.assertTrue("'" + double2 + "' != '" + 1.414213562373095d + "'", double2 == 1.414213562373095d);
        org.junit.Assert.assertNotNull(matrix5);
        org.junit.Assert.assertNotNull(matrix8);
        org.junit.Assert.assertNotNull(matrix9);
        org.junit.Assert.assertNotNull(matrix11);
        org.junit.Assert.assertNotNull(matrix14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 2 + "'", int15 == 2);
        org.junit.Assert.assertNotNull(matrix17);
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 10.0d + "'", double18 == 10.0d);
        org.junit.Assert.assertNotNull(matrix21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 2 + "'", int22 == 2);
        org.junit.Assert.assertNotNull(matrix24);
        org.junit.Assert.assertNotNull(matrix25);
        org.junit.Assert.assertNotNull(matrix26);
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertArrayEquals(doubleArray30, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertArrayEquals(doubleArray33, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertNotNull(matrix36);
        org.junit.Assert.assertNotNull(matrix39);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 2 + "'", int40 == 2);
        org.junit.Assert.assertNotNull(matrix46);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(matrix50);
        org.junit.Assert.assertNotNull(matrix52);
        org.junit.Assert.assertNotNull(matrix53);
        org.junit.Assert.assertNotNull(matrix54);
        org.junit.Assert.assertNotNull(matrix55);
        org.junit.Assert.assertNotNull(matrixArray56);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
    }

    @Test
    public void test3591() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3591");
        // The following exception was thrown during execution in test generation
        try {
            com.operations.Matrix.Matrix matrix4 = com.operations.Matrix.MatrixUtils.generateRandomMatrix((int) (short) -1, (int) (byte) 10, 0, (int) '4');
            org.junit.Assert.fail("Expected exception of type java.lang.NegativeArraySizeException; message: -1");
        } catch (java.lang.NegativeArraySizeException e) {
            // Expected exception.
        }
    }

    @Test
    public void test3592() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3592");
        com.operations.Matrix.Matrix matrix2 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0L, (double) (byte) 10);
        double[] doubleArray5 = new double[] { 10, 'a' };
        double[] doubleArray8 = new double[] { 10, 'a' };
        double[][] doubleArray9 = new double[][] { doubleArray5, doubleArray8 };
        com.operations.Matrix.Matrix matrix10 = new com.operations.Matrix.Matrix(doubleArray9);
        int int11 = matrix10.getCols();
        int int12 = matrix10.getCols();
        int int13 = matrix10.getCols();
        com.operations.Matrix.Matrix[] matrixArray14 = com.operations.Matrix.MatrixDecompositions.luDecomposition(matrix10);
        com.operations.Matrix.Matrix matrix15 = com.operations.Matrix.MatrixOperations.multiply(matrix2, matrix10);
        com.operations.Matrix.Matrix matrix17 = com.operations.Matrix.MatrixTransformations.rotate2D((double) (short) 100);
        boolean boolean19 = com.operations.Matrix.MatrixUtils.compare(matrix10, matrix17, (double) (byte) 0);
        double[] doubleArray22 = new double[] { 10, 'a' };
        double[] doubleArray25 = new double[] { 10, 'a' };
        double[][] doubleArray26 = new double[][] { doubleArray22, doubleArray25 };
        com.operations.Matrix.Matrix matrix27 = new com.operations.Matrix.Matrix(doubleArray26);
        com.operations.Matrix.Matrix matrix28 = new com.operations.Matrix.Matrix(doubleArray26);
        com.operations.Matrix.Matrix matrix29 = new com.operations.Matrix.Matrix(doubleArray26);
        boolean boolean31 = com.operations.Matrix.MatrixUtils.compare(matrix10, matrix29, (double) (-1));
        double[] doubleArray34 = new double[] { 10, 'a' };
        double[] doubleArray37 = new double[] { 10, 'a' };
        double[][] doubleArray38 = new double[][] { doubleArray34, doubleArray37 };
        com.operations.Matrix.Matrix matrix39 = new com.operations.Matrix.Matrix(doubleArray38);
        com.operations.Matrix.Matrix matrix40 = new com.operations.Matrix.Matrix(doubleArray38);
        boolean boolean41 = com.operations.Matrix.MatrixUtils.isSquare(matrix40);
        com.operations.Matrix.Matrix matrix42 = com.operations.Matrix.MatrixOperations.multiply(matrix29, matrix40);
        com.operations.Matrix.Matrix matrix44 = com.operations.Matrix.MatrixOperations.scalarMultiply(matrix40, (double) (short) -1);
        matrix40.print();
        boolean boolean46 = com.operations.Matrix.MatrixUtils.isSymmetric(matrix40);
        com.operations.Matrix.Matrix matrix48 = com.operations.Matrix.MatrixTransformations.rotate2D((double) 1.0f);
        com.operations.Matrix.Matrix matrix51 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0L, (double) (byte) 10);
        int int52 = matrix51.getRows();
        com.operations.Matrix.Matrix matrix54 = com.operations.Matrix.MatrixOperations.scalarMultiply(matrix51, (double) 2);
        double double55 = com.operations.Matrix.MatrixUtils.frobeniusNorm(matrix51);
        com.operations.Matrix.Matrix matrix58 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0L, (double) (byte) 10);
        int int59 = matrix58.getRows();
        com.operations.Matrix.Matrix matrix61 = com.operations.Matrix.MatrixOperations.scalarMultiply(matrix58, (double) 2);
        com.operations.Matrix.Matrix matrix62 = com.operations.Matrix.MatrixOperations.subtract(matrix51, matrix61);
        com.operations.Matrix.Matrix matrix63 = com.operations.Matrix.MatrixOperations.add(matrix48, matrix61);
        matrix48.print();
        double[] doubleArray67 = new double[] { 10, 'a' };
        double[] doubleArray70 = new double[] { 10, 'a' };
        double[][] doubleArray71 = new double[][] { doubleArray67, doubleArray70 };
        com.operations.Matrix.Matrix matrix72 = new com.operations.Matrix.Matrix(doubleArray71);
        com.operations.Matrix.Matrix matrix73 = com.operations.Matrix.MatrixOperations.transpose(matrix72);
        com.operations.Matrix.Matrix matrix76 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0L, (double) (byte) 10);
        int int77 = matrix76.getRows();
        com.operations.Matrix.Matrix matrix83 = com.operations.Matrix.MatrixUtils.generateRandomMatrix(100, (int) (byte) 1, (int) '#', (int) '#', 1L);
        boolean boolean85 = com.operations.Matrix.MatrixUtils.compare(matrix76, matrix83, (double) 1.0f);
        com.operations.Matrix.Matrix matrix87 = com.operations.Matrix.MatrixOperations.scalarMultiply(matrix76, (double) 1L);
        matrix76.print();
        com.operations.Matrix.Matrix matrix89 = com.operations.Matrix.MatrixOperations.multiply(matrix73, matrix76);
        com.operations.Matrix.Matrix matrix90 = com.operations.Matrix.MatrixOperations.multiply(matrix48, matrix76);
        com.operations.Matrix.Matrix matrix92 = com.operations.Matrix.MatrixTransformations.rotate2D((double) 1.0f);
        boolean boolean94 = com.operations.Matrix.MatrixUtils.compare(matrix76, matrix92, (double) (short) 0);
        com.operations.Matrix.Matrix matrix95 = com.operations.Matrix.MatrixDecompositions.choleskyDecomposition(matrix92);
        com.operations.Matrix.Matrix matrix96 = com.operations.Matrix.MatrixDecompositions.choleskyDecomposition(matrix95);
        boolean boolean98 = com.operations.Matrix.MatrixUtils.compare(matrix40, matrix96, (double) (short) 0);
        java.lang.Class<?> wildcardClass99 = matrix40.getClass();
        org.junit.Assert.assertNotNull(matrix2);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertArrayEquals(doubleArray5, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertArrayEquals(doubleArray8, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 2 + "'", int11 == 2);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 2 + "'", int12 == 2);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 2 + "'", int13 == 2);
        org.junit.Assert.assertNotNull(matrixArray14);
        org.junit.Assert.assertNotNull(matrix15);
        org.junit.Assert.assertNotNull(matrix17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertArrayEquals(doubleArray22, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertArrayEquals(doubleArray25, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertArrayEquals(doubleArray34, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertArrayEquals(doubleArray37, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertNotNull(matrix42);
        org.junit.Assert.assertNotNull(matrix44);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(matrix48);
        org.junit.Assert.assertNotNull(matrix51);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 2 + "'", int52 == 2);
        org.junit.Assert.assertNotNull(matrix54);
        org.junit.Assert.assertTrue("'" + double55 + "' != '" + 10.0d + "'", double55 == 10.0d);
        org.junit.Assert.assertNotNull(matrix58);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 2 + "'", int59 == 2);
        org.junit.Assert.assertNotNull(matrix61);
        org.junit.Assert.assertNotNull(matrix62);
        org.junit.Assert.assertNotNull(matrix63);
        org.junit.Assert.assertNotNull(doubleArray67);
        org.junit.Assert.assertArrayEquals(doubleArray67, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray70);
        org.junit.Assert.assertArrayEquals(doubleArray70, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray71);
        org.junit.Assert.assertNotNull(matrix73);
        org.junit.Assert.assertNotNull(matrix76);
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + 2 + "'", int77 == 2);
        org.junit.Assert.assertNotNull(matrix83);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false);
        org.junit.Assert.assertNotNull(matrix87);
        org.junit.Assert.assertNotNull(matrix89);
        org.junit.Assert.assertNotNull(matrix90);
        org.junit.Assert.assertNotNull(matrix92);
        org.junit.Assert.assertTrue("'" + boolean94 + "' != '" + false + "'", boolean94 == false);
        org.junit.Assert.assertNotNull(matrix95);
        org.junit.Assert.assertNotNull(matrix96);
        org.junit.Assert.assertTrue("'" + boolean98 + "' != '" + false + "'", boolean98 == false);
        org.junit.Assert.assertNotNull(wildcardClass99);
    }

    @Test
    public void test3593() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3593");
        com.operations.Matrix.Matrix matrix0 = null;
        // The following exception was thrown during execution in test generation
        try {
            com.operations.Matrix.Matrix matrix2 = com.operations.Matrix.MatrixOperations.scalarMultiply(matrix0, 6.0d);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test3594() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3594");
        com.operations.Matrix.Matrix matrix2 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0L, (double) (byte) 10);
        int int3 = matrix2.getRows();
        com.operations.Matrix.Matrix matrix9 = com.operations.Matrix.MatrixUtils.generateRandomMatrix(100, (int) (byte) 1, (int) '#', (int) '#', 1L);
        boolean boolean11 = com.operations.Matrix.MatrixUtils.compare(matrix2, matrix9, (double) 1.0f);
        int int12 = matrix2.getCols();
        com.operations.Matrix.Matrix matrix14 = com.operations.Matrix.MatrixTransformations.rotate2D((double) (short) 100);
        double[] doubleArray17 = new double[] { 137.90576492663388d, (byte) -1 };
        double[] doubleArray18 = com.operations.Matrix.MatrixSolver.solveGaussian(matrix14, doubleArray17);
        com.operations.Matrix.Matrix matrix21 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0L, (double) (byte) 10);
        double[] doubleArray24 = new double[] { 10, 'a' };
        double[] doubleArray27 = new double[] { 10, 'a' };
        double[][] doubleArray28 = new double[][] { doubleArray24, doubleArray27 };
        com.operations.Matrix.Matrix matrix29 = new com.operations.Matrix.Matrix(doubleArray28);
        int int30 = matrix29.getCols();
        int int31 = matrix29.getCols();
        int int32 = matrix29.getCols();
        com.operations.Matrix.Matrix[] matrixArray33 = com.operations.Matrix.MatrixDecompositions.luDecomposition(matrix29);
        com.operations.Matrix.Matrix matrix34 = com.operations.Matrix.MatrixOperations.multiply(matrix21, matrix29);
        boolean boolean36 = com.operations.Matrix.MatrixUtils.compare(matrix14, matrix21, (double) (-1L));
        boolean boolean38 = com.operations.Matrix.MatrixUtils.compare(matrix2, matrix14, (double) 'a');
        boolean boolean39 = com.operations.Matrix.MatrixUtils.isSymmetric(matrix14);
        com.operations.Matrix.Matrix matrix41 = com.operations.Matrix.MatrixOperations.scalarMultiply(matrix14, 576.1705606798018d);
        matrix41.print();
        org.junit.Assert.assertNotNull(matrix2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 2 + "'", int3 == 2);
        org.junit.Assert.assertNotNull(matrix9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 2 + "'", int12 == 2);
        org.junit.Assert.assertNotNull(matrix14);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertArrayEquals(doubleArray17, new double[] { 137.90576492663388d, (-1.0d) }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertArrayEquals(doubleArray18, new double[] { (-24.931892522286255d), (-135.63701830716116d) }, 1.0E-15);
        org.junit.Assert.assertNotNull(matrix21);
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertArrayEquals(doubleArray24, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertArrayEquals(doubleArray27, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 2 + "'", int30 == 2);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 2 + "'", int31 == 2);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 2 + "'", int32 == 2);
        org.junit.Assert.assertNotNull(matrixArray33);
        org.junit.Assert.assertNotNull(matrix34);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(matrix41);
    }

    @Test
    public void test3595() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3595");
        com.operations.Matrix.Matrix matrix4 = com.operations.Matrix.MatrixUtils.generateRandomMatrix(1, (int) '4', (int) (short) 10, 32);
        matrix4.print();
        com.operations.Matrix.Matrix matrix8 = com.operations.Matrix.MatrixTransformations.scale2D(33.34013029422918d, 22.360679774997898d);
        // The following exception was thrown during execution in test generation
        try {
            com.operations.Matrix.Matrix matrix9 = com.operations.Matrix.MatrixOperations.add(matrix4, matrix8);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Matrices must have the same dimensions for addition.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(matrix4);
        org.junit.Assert.assertNotNull(matrix8);
    }

    @Test
    public void test3596() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3596");
        com.operations.Matrix.Matrix matrix1 = com.operations.Matrix.MatrixTransformations.rotate2D((double) '4');
        double[] doubleArray4 = new double[] { 10, 'a' };
        double[] doubleArray7 = new double[] { 10, 'a' };
        double[][] doubleArray8 = new double[][] { doubleArray4, doubleArray7 };
        com.operations.Matrix.Matrix matrix9 = new com.operations.Matrix.Matrix(doubleArray8);
        com.operations.Matrix.Matrix matrix10 = new com.operations.Matrix.Matrix(doubleArray8);
        com.operations.Matrix.Matrix matrix12 = com.operations.Matrix.MatrixTransformations.rotate2D((double) (short) 100);
        double[] doubleArray15 = new double[] { 137.90576492663388d, (byte) -1 };
        double[] doubleArray16 = com.operations.Matrix.MatrixSolver.solveGaussian(matrix12, doubleArray15);
        com.operations.Matrix.Matrix matrix17 = com.operations.Matrix.MatrixOperations.add(matrix10, matrix12);
        boolean boolean18 = com.operations.Matrix.MatrixUtils.isSymmetric(matrix17);
        boolean boolean20 = com.operations.Matrix.MatrixUtils.compare(matrix1, matrix17, 364.0054944640259d);
        int int21 = matrix17.getCols();
        com.operations.Matrix.Matrix matrix24 = new com.operations.Matrix.Matrix((int) (short) 1, 0);
        boolean boolean26 = com.operations.Matrix.MatrixUtils.compare(matrix17, matrix24, (double) (byte) 10);
        com.operations.Matrix.Matrix[] matrixArray27 = com.operations.Matrix.MatrixDecompositions.luDecomposition(matrix17);
        boolean boolean28 = com.operations.Matrix.MatrixUtils.isSquare(matrix17);
        org.junit.Assert.assertNotNull(matrix1);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertArrayEquals(doubleArray4, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertArrayEquals(doubleArray7, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertNotNull(matrix12);
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertArrayEquals(doubleArray15, new double[] { 137.90576492663388d, (-1.0d) }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertArrayEquals(doubleArray16, new double[] { (-24.931892522286255d), (-135.63701830716116d) }, 1.0E-15);
        org.junit.Assert.assertNotNull(matrix17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 2 + "'", int21 == 2);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(matrixArray27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
    }

    @Test
    public void test3597() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3597");
        com.operations.Matrix.Matrix matrix2 = com.operations.Matrix.MatrixTransformations.project2D(21.023651153076518d, 32.0d);
        double[] doubleArray3 = null;
        // The following exception was thrown during execution in test generation
        try {
            double[] doubleArray4 = com.operations.Matrix.MatrixSolver.solveGaussian(matrix2, doubleArray3);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(matrix2);
    }

    @Test
    public void test3598() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3598");
        com.operations.Matrix.Matrix matrix2 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0L, (double) (byte) 10);
        double[] doubleArray5 = new double[] { 10, 'a' };
        double[] doubleArray8 = new double[] { 10, 'a' };
        double[][] doubleArray9 = new double[][] { doubleArray5, doubleArray8 };
        com.operations.Matrix.Matrix matrix10 = new com.operations.Matrix.Matrix(doubleArray9);
        int int11 = matrix10.getCols();
        int int12 = matrix10.getCols();
        int int13 = matrix10.getCols();
        com.operations.Matrix.Matrix[] matrixArray14 = com.operations.Matrix.MatrixDecompositions.luDecomposition(matrix10);
        com.operations.Matrix.Matrix matrix15 = com.operations.Matrix.MatrixOperations.multiply(matrix2, matrix10);
        com.operations.Matrix.Matrix matrix17 = com.operations.Matrix.MatrixTransformations.rotate2D((double) (short) 100);
        boolean boolean19 = com.operations.Matrix.MatrixUtils.compare(matrix10, matrix17, (double) (byte) 0);
        com.operations.Matrix.Matrix matrix20 = com.operations.Matrix.MatrixOperations.transpose(matrix10);
        com.operations.Matrix.Matrix matrix22 = com.operations.Matrix.MatrixOperations.scalarMultiply(matrix20, (double) 10);
        com.operations.Matrix.Matrix matrix23 = com.operations.Matrix.MatrixOperations.transpose(matrix22);
        // The following exception was thrown during execution in test generation
        try {
            matrix23.setValue(0, (int) (byte) 100, 137.90576492663385d);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: Index 100 out of bounds for length 2");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(matrix2);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertArrayEquals(doubleArray5, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertArrayEquals(doubleArray8, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 2 + "'", int11 == 2);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 2 + "'", int12 == 2);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 2 + "'", int13 == 2);
        org.junit.Assert.assertNotNull(matrixArray14);
        org.junit.Assert.assertNotNull(matrix15);
        org.junit.Assert.assertNotNull(matrix17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(matrix20);
        org.junit.Assert.assertNotNull(matrix22);
        org.junit.Assert.assertNotNull(matrix23);
    }

    @Test
    public void test3599() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3599");
        com.operations.Matrix.Matrix matrix4 = com.operations.Matrix.MatrixUtils.generateRandomMatrix(100, 0, (int) ' ', (int) (byte) 1);
        // The following exception was thrown during execution in test generation
        try {
            double double7 = matrix4.getValue(32, (int) (short) 0);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(matrix4);
    }

    @Test
    public void test3600() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3600");
        com.operations.Matrix.Matrix matrix2 = com.operations.Matrix.MatrixTransformations.project2D((double) (byte) 0, (double) 10L);
        com.operations.Matrix.Matrix[] matrixArray3 = com.operations.Matrix.MatrixDecompositions.luDecomposition(matrix2);
        com.operations.Matrix.Matrix matrix5 = com.operations.Matrix.MatrixTransformations.rotate2D(100.0d);
        int int6 = matrix5.getCols();
        int int7 = matrix5.getRows();
        double[] doubleArray10 = new double[] { 10, 'a' };
        double[] doubleArray13 = new double[] { 10, 'a' };
        double[][] doubleArray14 = new double[][] { doubleArray10, doubleArray13 };
        com.operations.Matrix.Matrix matrix15 = new com.operations.Matrix.Matrix(doubleArray14);
        com.operations.Matrix.Matrix matrix16 = com.operations.Matrix.MatrixOperations.transpose(matrix15);
        com.operations.Matrix.Matrix matrix19 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0L, (double) (byte) 10);
        int int20 = matrix19.getRows();
        com.operations.Matrix.Matrix matrix26 = com.operations.Matrix.MatrixUtils.generateRandomMatrix(100, (int) (byte) 1, (int) '#', (int) '#', 1L);
        boolean boolean28 = com.operations.Matrix.MatrixUtils.compare(matrix19, matrix26, (double) 1.0f);
        com.operations.Matrix.Matrix matrix30 = com.operations.Matrix.MatrixOperations.scalarMultiply(matrix19, (double) 1L);
        matrix19.print();
        com.operations.Matrix.Matrix matrix32 = com.operations.Matrix.MatrixOperations.multiply(matrix16, matrix19);
        boolean boolean33 = com.operations.Matrix.MatrixUtils.isSymmetric(matrix19);
        com.operations.Matrix.Matrix matrix34 = com.operations.Matrix.MatrixOperations.subtract(matrix5, matrix19);
        com.operations.Matrix.Matrix matrix35 = com.operations.Matrix.MatrixOperations.add(matrix2, matrix5);
        org.junit.Assert.assertNotNull(matrix2);
        org.junit.Assert.assertNotNull(matrixArray3);
        org.junit.Assert.assertNotNull(matrix5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 2 + "'", int6 == 2);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 2 + "'", int7 == 2);
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertArrayEquals(doubleArray10, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertArrayEquals(doubleArray13, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertNotNull(matrix16);
        org.junit.Assert.assertNotNull(matrix19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 2 + "'", int20 == 2);
        org.junit.Assert.assertNotNull(matrix26);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(matrix30);
        org.junit.Assert.assertNotNull(matrix32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertNotNull(matrix34);
        org.junit.Assert.assertNotNull(matrix35);
    }

    @Test
    public void test3601() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3601");
        com.operations.Matrix.Matrix matrix2 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0L, (double) (byte) 10);
        double[] doubleArray5 = new double[] { 10, 'a' };
        double[] doubleArray8 = new double[] { 10, 'a' };
        double[][] doubleArray9 = new double[][] { doubleArray5, doubleArray8 };
        com.operations.Matrix.Matrix matrix10 = new com.operations.Matrix.Matrix(doubleArray9);
        int int11 = matrix10.getCols();
        int int12 = matrix10.getCols();
        int int13 = matrix10.getCols();
        com.operations.Matrix.Matrix[] matrixArray14 = com.operations.Matrix.MatrixDecompositions.luDecomposition(matrix10);
        com.operations.Matrix.Matrix matrix15 = com.operations.Matrix.MatrixOperations.multiply(matrix2, matrix10);
        com.operations.Matrix.Matrix matrix17 = com.operations.Matrix.MatrixTransformations.rotate2D((double) (short) 100);
        boolean boolean19 = com.operations.Matrix.MatrixUtils.compare(matrix10, matrix17, (double) (byte) 0);
        double[] doubleArray22 = new double[] { 10, 'a' };
        double[] doubleArray25 = new double[] { 10, 'a' };
        double[][] doubleArray26 = new double[][] { doubleArray22, doubleArray25 };
        com.operations.Matrix.Matrix matrix27 = new com.operations.Matrix.Matrix(doubleArray26);
        com.operations.Matrix.Matrix matrix28 = com.operations.Matrix.MatrixOperations.multiply(matrix10, matrix27);
        double double29 = com.operations.Matrix.MatrixUtils.frobeniusNorm(matrix27);
        int int30 = matrix27.getRows();
        double double31 = com.operations.Matrix.MatrixUtils.frobeniusNorm(matrix27);
        org.junit.Assert.assertNotNull(matrix2);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertArrayEquals(doubleArray5, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertArrayEquals(doubleArray8, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 2 + "'", int11 == 2);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 2 + "'", int12 == 2);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 2 + "'", int13 == 2);
        org.junit.Assert.assertNotNull(matrixArray14);
        org.junit.Assert.assertNotNull(matrix15);
        org.junit.Assert.assertNotNull(matrix17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertArrayEquals(doubleArray22, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertArrayEquals(doubleArray25, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertNotNull(matrix28);
        org.junit.Assert.assertTrue("'" + double29 + "' != '" + 137.90576492663388d + "'", double29 == 137.90576492663388d);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 2 + "'", int30 == 2);
        org.junit.Assert.assertTrue("'" + double31 + "' != '" + 137.90576492663388d + "'", double31 == 137.90576492663388d);
    }

    @Test
    public void test3602() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3602");
        com.operations.Matrix.Matrix matrix1 = com.operations.Matrix.MatrixTransformations.rotate2D((double) 1.0f);
        com.operations.Matrix.Matrix matrix4 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0L, (double) (byte) 10);
        int int5 = matrix4.getRows();
        com.operations.Matrix.Matrix matrix7 = com.operations.Matrix.MatrixOperations.scalarMultiply(matrix4, (double) 2);
        boolean boolean9 = com.operations.Matrix.MatrixUtils.compare(matrix1, matrix7, (double) 10.0f);
        com.operations.Matrix.Matrix[] matrixArray10 = com.operations.Matrix.MatrixDecompositions.luDecomposition(matrix7);
        matrix7.print();
        com.operations.Matrix.Matrix matrix16 = com.operations.Matrix.MatrixUtils.generateRandomMatrix(100, (int) 'a', (int) (byte) -1, 2);
        // The following exception was thrown during execution in test generation
        try {
            com.operations.Matrix.Matrix matrix17 = com.operations.Matrix.MatrixOperations.multiply(matrix7, matrix16);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Matrix A's columns must match Matrix B's rows for multiplication.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(matrix1);
        org.junit.Assert.assertNotNull(matrix4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 2 + "'", int5 == 2);
        org.junit.Assert.assertNotNull(matrix7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(matrixArray10);
        org.junit.Assert.assertNotNull(matrix16);
    }

    @Test
    public void test3603() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3603");
        com.operations.Matrix.Matrix matrix2 = com.operations.Matrix.MatrixTransformations.project2D(137.15495886388925d, (double) (-1.0f));
        // The following exception was thrown during execution in test generation
        try {
            matrix2.setValue((int) (byte) 10, 0, (double) (byte) 1);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: Index 10 out of bounds for length 2");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(matrix2);
    }

    @Test
    public void test3604() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3604");
        com.operations.Matrix.Matrix matrix2 = com.operations.Matrix.MatrixTransformations.project2D((double) 100.0f, (double) (short) -1);
        com.operations.Matrix.Matrix matrix4 = com.operations.Matrix.MatrixOperations.scalarMultiply(matrix2, (double) 0.0f);
        com.operations.Matrix.Matrix matrix6 = com.operations.Matrix.MatrixOperations.scalarMultiply(matrix2, 0.0d);
        com.operations.Matrix.Matrix matrix8 = com.operations.Matrix.MatrixTransformations.rotate2D((double) (short) -1);
        com.operations.Matrix.Matrix matrix9 = com.operations.Matrix.MatrixOperations.multiply(matrix2, matrix8);
        // The following exception was thrown during execution in test generation
        try {
            double double12 = matrix8.getValue((int) 'a', 0);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(matrix2);
        org.junit.Assert.assertNotNull(matrix4);
        org.junit.Assert.assertNotNull(matrix6);
        org.junit.Assert.assertNotNull(matrix8);
        org.junit.Assert.assertNotNull(matrix9);
    }

    @Test
    public void test3605() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3605");
        com.operations.Matrix.Matrix matrix2 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0L, (double) (byte) 10);
        int int3 = matrix2.getRows();
        com.operations.Matrix.Matrix matrix9 = com.operations.Matrix.MatrixUtils.generateRandomMatrix(100, (int) (byte) 1, (int) '#', (int) '#', 1L);
        boolean boolean11 = com.operations.Matrix.MatrixUtils.compare(matrix2, matrix9, (double) 1.0f);
        matrix9.print();
        com.operations.Matrix.Matrix matrix14 = com.operations.Matrix.MatrixOperations.scalarMultiply(matrix9, 52.009614495783374d);
        com.operations.Matrix.Matrix matrix17 = com.operations.Matrix.MatrixTransformations.scale2D(1363.6076983299943d, (double) 2);
        double[] doubleArray20 = new double[] { 10, 'a' };
        double[] doubleArray23 = new double[] { 10, 'a' };
        double[][] doubleArray24 = new double[][] { doubleArray20, doubleArray23 };
        com.operations.Matrix.Matrix matrix25 = new com.operations.Matrix.Matrix(doubleArray24);
        com.operations.Matrix.Matrix matrix26 = new com.operations.Matrix.Matrix(doubleArray24);
        com.operations.Matrix.Matrix matrix28 = com.operations.Matrix.MatrixTransformations.rotate2D((double) (short) 100);
        double[] doubleArray31 = new double[] { 137.90576492663388d, (byte) -1 };
        double[] doubleArray32 = com.operations.Matrix.MatrixSolver.solveGaussian(matrix28, doubleArray31);
        com.operations.Matrix.Matrix matrix33 = com.operations.Matrix.MatrixOperations.add(matrix26, matrix28);
        com.operations.Matrix.Matrix matrix34 = com.operations.Matrix.MatrixOperations.transpose(matrix28);
        double double35 = com.operations.Matrix.MatrixUtils.frobeniusNorm(matrix34);
        double[][] doubleArray36 = matrix34.getData();
        com.operations.Matrix.Matrix matrix38 = com.operations.Matrix.MatrixOperations.scalarMultiply(matrix34, (double) 'a');
        com.operations.Matrix.Matrix matrix40 = com.operations.Matrix.MatrixTransformations.rotate2D(350.0d);
        com.operations.Matrix.Matrix matrix42 = com.operations.Matrix.MatrixTransformations.rotate2D((double) (short) 100);
        double[] doubleArray45 = new double[] { 137.90576492663388d, (byte) -1 };
        double[] doubleArray46 = com.operations.Matrix.MatrixSolver.solveGaussian(matrix42, doubleArray45);
        double[] doubleArray47 = com.operations.Matrix.MatrixSolver.solveGaussian(matrix40, doubleArray46);
        double[] doubleArray48 = com.operations.Matrix.MatrixSolver.solveGaussian(matrix34, doubleArray46);
        double[] doubleArray49 = com.operations.Matrix.MatrixSolver.solveGaussian(matrix17, doubleArray48);
        // The following exception was thrown during execution in test generation
        try {
            double[] doubleArray50 = com.operations.Matrix.MatrixSolver.solveGaussian(matrix9, doubleArray49);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Matrix must be square to solve equations.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(matrix2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 2 + "'", int3 == 2);
        org.junit.Assert.assertNotNull(matrix9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(matrix14);
        org.junit.Assert.assertNotNull(matrix17);
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertArrayEquals(doubleArray20, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertArrayEquals(doubleArray23, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertNotNull(matrix28);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertArrayEquals(doubleArray31, new double[] { 137.90576492663388d, (-1.0d) }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertArrayEquals(doubleArray32, new double[] { (-24.931892522286255d), (-135.63701830716116d) }, 1.0E-15);
        org.junit.Assert.assertNotNull(matrix33);
        org.junit.Assert.assertNotNull(matrix34);
        org.junit.Assert.assertTrue("'" + double35 + "' != '" + 1.414213562373095d + "'", double35 == 1.414213562373095d);
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertNotNull(matrix38);
        org.junit.Assert.assertNotNull(matrix40);
        org.junit.Assert.assertNotNull(matrix42);
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertArrayEquals(doubleArray45, new double[] { 137.90576492663388d, (-1.0d) }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray46);
        org.junit.Assert.assertArrayEquals(doubleArray46, new double[] { (-24.931892522286255d), (-135.63701830716116d) }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertArrayEquals(doubleArray47, new double[] { (-0.9999999999999858d), (-137.90576492663388d) }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertArrayEquals(doubleArray48, new double[] { 137.90576492663388d, (-1.0000000000000022d) }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertArrayEquals(doubleArray49, new double[] { 0.1011330202194712d, (-0.5000000000000011d) }, 1.0E-15);
    }

    @Test
    public void test3606() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3606");
        // The following exception was thrown during execution in test generation
        try {
            com.operations.Matrix.Matrix matrix4 = com.operations.Matrix.MatrixUtils.generateRandomMatrix((int) (byte) 0, 1, (int) '4', 52);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
    }

    @Test
    public void test3607() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3607");
        com.operations.Matrix.Matrix matrix1 = com.operations.Matrix.MatrixTransformations.rotate2D(146.4308710620817d);
        double[][] doubleArray2 = matrix1.getData();
        com.operations.Matrix.Matrix matrix5 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0L, (double) (byte) 10);
        double[] doubleArray8 = new double[] { 10, 'a' };
        double[] doubleArray11 = new double[] { 10, 'a' };
        double[][] doubleArray12 = new double[][] { doubleArray8, doubleArray11 };
        com.operations.Matrix.Matrix matrix13 = new com.operations.Matrix.Matrix(doubleArray12);
        int int14 = matrix13.getCols();
        int int15 = matrix13.getCols();
        int int16 = matrix13.getCols();
        com.operations.Matrix.Matrix[] matrixArray17 = com.operations.Matrix.MatrixDecompositions.luDecomposition(matrix13);
        com.operations.Matrix.Matrix matrix18 = com.operations.Matrix.MatrixOperations.multiply(matrix5, matrix13);
        com.operations.Matrix.Matrix matrix20 = com.operations.Matrix.MatrixTransformations.rotate2D((double) (short) 100);
        boolean boolean22 = com.operations.Matrix.MatrixUtils.compare(matrix13, matrix20, (double) (byte) 0);
        double[] doubleArray25 = new double[] { 10, 'a' };
        double[] doubleArray28 = new double[] { 10, 'a' };
        double[][] doubleArray29 = new double[][] { doubleArray25, doubleArray28 };
        com.operations.Matrix.Matrix matrix30 = new com.operations.Matrix.Matrix(doubleArray29);
        com.operations.Matrix.Matrix matrix31 = new com.operations.Matrix.Matrix(doubleArray29);
        com.operations.Matrix.Matrix matrix32 = new com.operations.Matrix.Matrix(doubleArray29);
        boolean boolean34 = com.operations.Matrix.MatrixUtils.compare(matrix13, matrix32, (double) (-1));
        double[] doubleArray37 = new double[] { 10, 'a' };
        double[] doubleArray40 = new double[] { 10, 'a' };
        double[][] doubleArray41 = new double[][] { doubleArray37, doubleArray40 };
        com.operations.Matrix.Matrix matrix42 = new com.operations.Matrix.Matrix(doubleArray41);
        com.operations.Matrix.Matrix matrix43 = new com.operations.Matrix.Matrix(doubleArray41);
        boolean boolean44 = com.operations.Matrix.MatrixUtils.isSquare(matrix43);
        com.operations.Matrix.Matrix matrix45 = com.operations.Matrix.MatrixOperations.multiply(matrix32, matrix43);
        double[][] doubleArray46 = matrix43.getData();
        com.operations.Matrix.Matrix matrix47 = new com.operations.Matrix.Matrix(doubleArray46);
        com.operations.Matrix.Matrix matrix48 = new com.operations.Matrix.Matrix(doubleArray46);
        com.operations.Matrix.Matrix matrix49 = new com.operations.Matrix.Matrix(doubleArray46);
        com.operations.Matrix.Matrix matrix51 = com.operations.Matrix.MatrixOperations.scalarMultiply(matrix49, (double) 'a');
        com.operations.Matrix.Matrix matrix52 = com.operations.Matrix.MatrixOperations.add(matrix1, matrix49);
        double[] doubleArray55 = new double[] { 10, 'a' };
        double[] doubleArray58 = new double[] { 10, 'a' };
        double[][] doubleArray59 = new double[][] { doubleArray55, doubleArray58 };
        com.operations.Matrix.Matrix matrix60 = new com.operations.Matrix.Matrix(doubleArray59);
        int int61 = matrix60.getCols();
        int int62 = matrix60.getCols();
        boolean boolean63 = com.operations.Matrix.MatrixUtils.isSquare(matrix60);
        com.operations.Matrix.Matrix matrix64 = com.operations.Matrix.MatrixDecompositions.choleskyDecomposition(matrix60);
        com.operations.Matrix.Matrix matrix67 = com.operations.Matrix.MatrixTransformations.project2D(0.0d, (double) 0);
        com.operations.Matrix.Matrix matrix68 = com.operations.Matrix.MatrixOperations.subtract(matrix64, matrix67);
        com.operations.Matrix.Matrix matrix69 = com.operations.Matrix.MatrixOperations.transpose(matrix67);
        com.operations.Matrix.Matrix matrix70 = com.operations.Matrix.MatrixOperations.add(matrix52, matrix67);
        double[][] doubleArray71 = matrix67.getData();
        com.operations.Matrix.Matrix matrix72 = new com.operations.Matrix.Matrix(doubleArray71);
        java.lang.Class<?> wildcardClass73 = doubleArray71.getClass();
        org.junit.Assert.assertNotNull(matrix1);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertNotNull(matrix5);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertArrayEquals(doubleArray8, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertArrayEquals(doubleArray11, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 2 + "'", int14 == 2);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 2 + "'", int15 == 2);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 2 + "'", int16 == 2);
        org.junit.Assert.assertNotNull(matrixArray17);
        org.junit.Assert.assertNotNull(matrix18);
        org.junit.Assert.assertNotNull(matrix20);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertArrayEquals(doubleArray25, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertArrayEquals(doubleArray28, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertArrayEquals(doubleArray37, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertArrayEquals(doubleArray40, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertNotNull(matrix45);
        org.junit.Assert.assertNotNull(doubleArray46);
        org.junit.Assert.assertNotNull(matrix51);
        org.junit.Assert.assertNotNull(matrix52);
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertArrayEquals(doubleArray55, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray58);
        org.junit.Assert.assertArrayEquals(doubleArray58, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray59);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 2 + "'", int61 == 2);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 2 + "'", int62 == 2);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + true + "'", boolean63 == true);
        org.junit.Assert.assertNotNull(matrix64);
        org.junit.Assert.assertNotNull(matrix67);
        org.junit.Assert.assertNotNull(matrix68);
        org.junit.Assert.assertNotNull(matrix69);
        org.junit.Assert.assertNotNull(matrix70);
        org.junit.Assert.assertNotNull(doubleArray71);
        org.junit.Assert.assertNotNull(wildcardClass73);
    }

    @Test
    public void test3608() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3608");
        double[] doubleArray2 = new double[] { 10, 'a' };
        double[] doubleArray5 = new double[] { 10, 'a' };
        double[][] doubleArray6 = new double[][] { doubleArray2, doubleArray5 };
        com.operations.Matrix.Matrix matrix7 = new com.operations.Matrix.Matrix(doubleArray6);
        com.operations.Matrix.Matrix matrix8 = new com.operations.Matrix.Matrix(doubleArray6);
        boolean boolean9 = com.operations.Matrix.MatrixUtils.isSquare(matrix8);
        double[] doubleArray12 = new double[] { 10, 'a' };
        double[] doubleArray15 = new double[] { 10, 'a' };
        double[][] doubleArray16 = new double[][] { doubleArray12, doubleArray15 };
        com.operations.Matrix.Matrix matrix17 = new com.operations.Matrix.Matrix(doubleArray16);
        int int18 = matrix17.getCols();
        int int19 = matrix17.getCols();
        matrix17.print();
        double[] doubleArray23 = new double[] { 10, 'a' };
        double[] doubleArray26 = new double[] { 10, 'a' };
        double[][] doubleArray27 = new double[][] { doubleArray23, doubleArray26 };
        com.operations.Matrix.Matrix matrix28 = new com.operations.Matrix.Matrix(doubleArray27);
        boolean boolean30 = com.operations.Matrix.MatrixUtils.compare(matrix17, matrix28, (double) (-1));
        com.operations.Matrix.Matrix matrix31 = com.operations.Matrix.MatrixOperations.subtract(matrix8, matrix28);
        com.operations.Matrix.Matrix matrix33 = com.operations.Matrix.MatrixOperations.scalarMultiply(matrix8, (double) 0.0f);
        int int34 = matrix8.getCols();
        double[] doubleArray37 = new double[] { 10, 'a' };
        double[] doubleArray40 = new double[] { 10, 'a' };
        double[][] doubleArray41 = new double[][] { doubleArray37, doubleArray40 };
        com.operations.Matrix.Matrix matrix42 = new com.operations.Matrix.Matrix(doubleArray41);
        com.operations.Matrix.Matrix matrix43 = new com.operations.Matrix.Matrix(doubleArray41);
        com.operations.Matrix.Matrix matrix44 = new com.operations.Matrix.Matrix(doubleArray41);
        com.operations.Matrix.Matrix matrix45 = com.operations.Matrix.MatrixOperations.multiply(matrix8, matrix44);
        com.operations.Matrix.Matrix matrix47 = com.operations.Matrix.MatrixOperations.scalarMultiply(matrix44, (double) (short) 0);
        com.operations.Matrix.Matrix matrix50 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0L, (double) (byte) 10);
        int int51 = matrix50.getRows();
        com.operations.Matrix.Matrix matrix53 = com.operations.Matrix.MatrixOperations.scalarMultiply(matrix50, (double) 2);
        matrix50.print();
        com.operations.Matrix.Matrix matrix56 = com.operations.Matrix.MatrixOperations.scalarMultiply(matrix50, 100.00499987500625d);
        int int57 = matrix56.getRows();
        com.operations.Matrix.Matrix matrix59 = com.operations.Matrix.MatrixTransformations.rotate2D((double) 1.0f);
        com.operations.Matrix.Matrix matrix62 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0L, (double) (byte) 10);
        int int63 = matrix62.getRows();
        com.operations.Matrix.Matrix matrix65 = com.operations.Matrix.MatrixOperations.scalarMultiply(matrix62, (double) 2);
        double double66 = com.operations.Matrix.MatrixUtils.frobeniusNorm(matrix62);
        com.operations.Matrix.Matrix matrix69 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0L, (double) (byte) 10);
        int int70 = matrix69.getRows();
        com.operations.Matrix.Matrix matrix72 = com.operations.Matrix.MatrixOperations.scalarMultiply(matrix69, (double) 2);
        com.operations.Matrix.Matrix matrix73 = com.operations.Matrix.MatrixOperations.subtract(matrix62, matrix72);
        com.operations.Matrix.Matrix matrix74 = com.operations.Matrix.MatrixOperations.add(matrix59, matrix72);
        com.operations.Matrix.Matrix[] matrixArray75 = com.operations.Matrix.MatrixDecompositions.luDecomposition(matrix72);
        boolean boolean76 = com.operations.Matrix.MatrixUtils.isSquare(matrix72);
        com.operations.Matrix.Matrix matrix77 = com.operations.Matrix.MatrixOperations.transpose(matrix72);
        com.operations.Matrix.Matrix matrix79 = com.operations.Matrix.MatrixOperations.scalarMultiply(matrix72, (double) ' ');
        com.operations.Matrix.Matrix matrix80 = com.operations.Matrix.MatrixOperations.multiply(matrix56, matrix79);
        com.operations.Matrix.Matrix matrix81 = com.operations.Matrix.MatrixOperations.add(matrix44, matrix80);
        double double82 = com.operations.Matrix.MatrixUtils.frobeniusNorm(matrix80);
        // The following exception was thrown during execution in test generation
        try {
            matrix80.setValue(97, (int) (short) 100, 146.4308710620817d);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: Index 97 out of bounds for length 2");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertArrayEquals(doubleArray2, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertArrayEquals(doubleArray5, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertArrayEquals(doubleArray12, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertArrayEquals(doubleArray15, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 2 + "'", int18 == 2);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 2 + "'", int19 == 2);
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertArrayEquals(doubleArray23, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertArrayEquals(doubleArray26, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(matrix31);
        org.junit.Assert.assertNotNull(matrix33);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 2 + "'", int34 == 2);
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertArrayEquals(doubleArray37, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertArrayEquals(doubleArray40, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertNotNull(matrix45);
        org.junit.Assert.assertNotNull(matrix47);
        org.junit.Assert.assertNotNull(matrix50);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 2 + "'", int51 == 2);
        org.junit.Assert.assertNotNull(matrix53);
        org.junit.Assert.assertNotNull(matrix56);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 2 + "'", int57 == 2);
        org.junit.Assert.assertNotNull(matrix59);
        org.junit.Assert.assertNotNull(matrix62);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 2 + "'", int63 == 2);
        org.junit.Assert.assertNotNull(matrix65);
        org.junit.Assert.assertTrue("'" + double66 + "' != '" + 10.0d + "'", double66 == 10.0d);
        org.junit.Assert.assertNotNull(matrix69);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 2 + "'", int70 == 2);
        org.junit.Assert.assertNotNull(matrix72);
        org.junit.Assert.assertNotNull(matrix73);
        org.junit.Assert.assertNotNull(matrix74);
        org.junit.Assert.assertNotNull(matrixArray75);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + true + "'", boolean76 == true);
        org.junit.Assert.assertNotNull(matrix77);
        org.junit.Assert.assertNotNull(matrix79);
        org.junit.Assert.assertNotNull(matrix80);
        org.junit.Assert.assertNotNull(matrix81);
        org.junit.Assert.assertTrue("'" + double82 + "' != '" + 640031.99920004d + "'", double82 == 640031.99920004d);
    }

    @Test
    public void test3609() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3609");
        com.operations.Matrix.Matrix matrix2 = new com.operations.Matrix.Matrix((int) (short) 10, (int) (short) 0);
        // The following exception was thrown during execution in test generation
        try {
            com.operations.Matrix.Matrix[] matrixArray3 = com.operations.Matrix.MatrixDecompositions.luDecomposition(matrix2);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Matrix must be square for LU decomposition.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test3610() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3610");
        com.operations.Matrix.Matrix matrix2 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0L, (double) (byte) 10);
        double[] doubleArray5 = new double[] { 10, 'a' };
        double[] doubleArray8 = new double[] { 10, 'a' };
        double[][] doubleArray9 = new double[][] { doubleArray5, doubleArray8 };
        com.operations.Matrix.Matrix matrix10 = new com.operations.Matrix.Matrix(doubleArray9);
        int int11 = matrix10.getCols();
        int int12 = matrix10.getCols();
        int int13 = matrix10.getCols();
        com.operations.Matrix.Matrix[] matrixArray14 = com.operations.Matrix.MatrixDecompositions.luDecomposition(matrix10);
        com.operations.Matrix.Matrix matrix15 = com.operations.Matrix.MatrixOperations.multiply(matrix2, matrix10);
        com.operations.Matrix.Matrix matrix17 = com.operations.Matrix.MatrixTransformations.rotate2D((double) (short) 100);
        boolean boolean19 = com.operations.Matrix.MatrixUtils.compare(matrix10, matrix17, (double) (byte) 0);
        boolean boolean20 = com.operations.Matrix.MatrixUtils.isSymmetric(matrix17);
        boolean boolean21 = com.operations.Matrix.MatrixUtils.isSquare(matrix17);
        com.operations.Matrix.Matrix matrix24 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0L, (double) (byte) 10);
        double[] doubleArray27 = new double[] { 10, 'a' };
        double[] doubleArray30 = new double[] { 10, 'a' };
        double[][] doubleArray31 = new double[][] { doubleArray27, doubleArray30 };
        com.operations.Matrix.Matrix matrix32 = new com.operations.Matrix.Matrix(doubleArray31);
        int int33 = matrix32.getCols();
        int int34 = matrix32.getCols();
        int int35 = matrix32.getCols();
        com.operations.Matrix.Matrix[] matrixArray36 = com.operations.Matrix.MatrixDecompositions.luDecomposition(matrix32);
        com.operations.Matrix.Matrix matrix37 = com.operations.Matrix.MatrixOperations.multiply(matrix24, matrix32);
        com.operations.Matrix.Matrix matrix39 = com.operations.Matrix.MatrixTransformations.rotate2D((double) (short) 100);
        boolean boolean41 = com.operations.Matrix.MatrixUtils.compare(matrix32, matrix39, (double) (byte) 0);
        double[] doubleArray44 = new double[] { 10, 'a' };
        double[] doubleArray47 = new double[] { 10, 'a' };
        double[][] doubleArray48 = new double[][] { doubleArray44, doubleArray47 };
        com.operations.Matrix.Matrix matrix49 = new com.operations.Matrix.Matrix(doubleArray48);
        com.operations.Matrix.Matrix matrix50 = new com.operations.Matrix.Matrix(doubleArray48);
        com.operations.Matrix.Matrix matrix51 = new com.operations.Matrix.Matrix(doubleArray48);
        boolean boolean53 = com.operations.Matrix.MatrixUtils.compare(matrix32, matrix51, (double) (-1));
        double[] doubleArray56 = new double[] { 10, 'a' };
        double[] doubleArray59 = new double[] { 10, 'a' };
        double[][] doubleArray60 = new double[][] { doubleArray56, doubleArray59 };
        com.operations.Matrix.Matrix matrix61 = new com.operations.Matrix.Matrix(doubleArray60);
        com.operations.Matrix.Matrix matrix62 = new com.operations.Matrix.Matrix(doubleArray60);
        boolean boolean63 = com.operations.Matrix.MatrixUtils.isSquare(matrix62);
        com.operations.Matrix.Matrix matrix64 = com.operations.Matrix.MatrixOperations.multiply(matrix51, matrix62);
        com.operations.Matrix.Matrix matrix67 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0L, (double) (byte) 10);
        int int68 = matrix67.getRows();
        com.operations.Matrix.Matrix matrix70 = com.operations.Matrix.MatrixOperations.scalarMultiply(matrix67, (double) 2);
        matrix67.print();
        matrix67.print();
        com.operations.Matrix.Matrix matrix73 = com.operations.Matrix.MatrixOperations.multiply(matrix64, matrix67);
        boolean boolean75 = com.operations.Matrix.MatrixUtils.compare(matrix17, matrix73, (-1.0d));
        double double76 = com.operations.Matrix.MatrixUtils.frobeniusNorm(matrix73);
        com.operations.Matrix.Matrix matrix79 = com.operations.Matrix.MatrixTransformations.project2D(0.0d, (double) 0);
        com.operations.Matrix.Matrix[] matrixArray80 = com.operations.Matrix.MatrixDecompositions.luDecomposition(matrix79);
        com.operations.Matrix.Matrix matrix83 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0L, (double) (byte) 10);
        int int84 = matrix83.getRows();
        com.operations.Matrix.Matrix matrix86 = com.operations.Matrix.MatrixOperations.scalarMultiply(matrix83, (double) 2);
        double double87 = com.operations.Matrix.MatrixUtils.frobeniusNorm(matrix83);
        int int88 = matrix83.getRows();
        com.operations.Matrix.Matrix matrix89 = com.operations.Matrix.MatrixOperations.transpose(matrix83);
        com.operations.Matrix.Matrix matrix90 = com.operations.Matrix.MatrixOperations.multiply(matrix79, matrix89);
        com.operations.Matrix.Matrix matrix92 = com.operations.Matrix.MatrixOperations.scalarMultiply(matrix89, (double) 0);
        com.operations.Matrix.Matrix matrix93 = com.operations.Matrix.MatrixOperations.subtract(matrix73, matrix89);
        com.operations.Matrix.Matrix[] matrixArray94 = com.operations.Matrix.MatrixDecompositions.luDecomposition(matrix73);
        double[][] doubleArray95 = matrix73.getData();
        com.operations.Matrix.Matrix matrix96 = new com.operations.Matrix.Matrix(doubleArray95);
        org.junit.Assert.assertNotNull(matrix2);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertArrayEquals(doubleArray5, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertArrayEquals(doubleArray8, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 2 + "'", int11 == 2);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 2 + "'", int12 == 2);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 2 + "'", int13 == 2);
        org.junit.Assert.assertNotNull(matrixArray14);
        org.junit.Assert.assertNotNull(matrix15);
        org.junit.Assert.assertNotNull(matrix17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertNotNull(matrix24);
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertArrayEquals(doubleArray27, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertArrayEquals(doubleArray30, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 2 + "'", int33 == 2);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 2 + "'", int34 == 2);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 2 + "'", int35 == 2);
        org.junit.Assert.assertNotNull(matrixArray36);
        org.junit.Assert.assertNotNull(matrix37);
        org.junit.Assert.assertNotNull(matrix39);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertArrayEquals(doubleArray44, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertArrayEquals(doubleArray47, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(doubleArray56);
        org.junit.Assert.assertArrayEquals(doubleArray56, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray59);
        org.junit.Assert.assertArrayEquals(doubleArray59, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray60);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + true + "'", boolean63 == true);
        org.junit.Assert.assertNotNull(matrix64);
        org.junit.Assert.assertNotNull(matrix67);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 2 + "'", int68 == 2);
        org.junit.Assert.assertNotNull(matrix70);
        org.junit.Assert.assertNotNull(matrix73);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertTrue("'" + double76 + "' != '" + 146781.22563870353d + "'", double76 == 146781.22563870353d);
        org.junit.Assert.assertNotNull(matrix79);
        org.junit.Assert.assertNotNull(matrixArray80);
        org.junit.Assert.assertNotNull(matrix83);
        org.junit.Assert.assertTrue("'" + int84 + "' != '" + 2 + "'", int84 == 2);
        org.junit.Assert.assertNotNull(matrix86);
        org.junit.Assert.assertTrue("'" + double87 + "' != '" + 10.0d + "'", double87 == 10.0d);
        org.junit.Assert.assertTrue("'" + int88 + "' != '" + 2 + "'", int88 == 2);
        org.junit.Assert.assertNotNull(matrix89);
        org.junit.Assert.assertNotNull(matrix90);
        org.junit.Assert.assertNotNull(matrix92);
        org.junit.Assert.assertNotNull(matrix93);
        org.junit.Assert.assertNotNull(matrixArray94);
        org.junit.Assert.assertNotNull(doubleArray95);
    }

    @Test
    public void test3611() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3611");
        com.operations.Matrix.Matrix matrix2 = com.operations.Matrix.MatrixTransformations.project2D(0.0d, (-0.1736481776669303d));
        com.operations.Matrix.Matrix matrix5 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0.0f, (double) (-1));
        com.operations.Matrix.Matrix matrix8 = com.operations.Matrix.MatrixTransformations.scale2D(146.4308710620817d, (double) 10L);
        com.operations.Matrix.Matrix matrix9 = com.operations.Matrix.MatrixOperations.multiply(matrix5, matrix8);
        double double12 = matrix5.getValue((int) (short) 0, (int) (byte) 1);
        double double13 = com.operations.Matrix.MatrixUtils.frobeniusNorm(matrix5);
        com.operations.Matrix.Matrix matrix14 = com.operations.Matrix.MatrixOperations.multiply(matrix2, matrix5);
        // The following exception was thrown during execution in test generation
        try {
            matrix5.setValue((int) ' ', (int) (byte) 100, (double) 2);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: Index 32 out of bounds for length 2");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(matrix2);
        org.junit.Assert.assertNotNull(matrix5);
        org.junit.Assert.assertNotNull(matrix8);
        org.junit.Assert.assertNotNull(matrix9);
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 0.0d + "'", double12 == 0.0d);
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 1.0d + "'", double13 == 1.0d);
        org.junit.Assert.assertNotNull(matrix14);
    }

    @Test
    public void test3612() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3612");
        com.operations.Matrix.Matrix matrix1 = com.operations.Matrix.MatrixTransformations.rotate2D((double) 1.0f);
        com.operations.Matrix.Matrix matrix4 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0L, (double) (byte) 10);
        int int5 = matrix4.getRows();
        com.operations.Matrix.Matrix matrix7 = com.operations.Matrix.MatrixOperations.scalarMultiply(matrix4, (double) 2);
        double double8 = com.operations.Matrix.MatrixUtils.frobeniusNorm(matrix4);
        com.operations.Matrix.Matrix matrix11 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0L, (double) (byte) 10);
        int int12 = matrix11.getRows();
        com.operations.Matrix.Matrix matrix14 = com.operations.Matrix.MatrixOperations.scalarMultiply(matrix11, (double) 2);
        com.operations.Matrix.Matrix matrix15 = com.operations.Matrix.MatrixOperations.subtract(matrix4, matrix14);
        com.operations.Matrix.Matrix matrix16 = com.operations.Matrix.MatrixOperations.add(matrix1, matrix14);
        int int17 = matrix14.getCols();
        matrix14.print();
        boolean boolean19 = com.operations.Matrix.MatrixUtils.isSquare(matrix14);
        org.junit.Assert.assertNotNull(matrix1);
        org.junit.Assert.assertNotNull(matrix4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 2 + "'", int5 == 2);
        org.junit.Assert.assertNotNull(matrix7);
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 10.0d + "'", double8 == 10.0d);
        org.junit.Assert.assertNotNull(matrix11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 2 + "'", int12 == 2);
        org.junit.Assert.assertNotNull(matrix14);
        org.junit.Assert.assertNotNull(matrix15);
        org.junit.Assert.assertNotNull(matrix16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 2 + "'", int17 == 2);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
    }

    @Test
    public void test3613() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3613");
        // The following exception was thrown during execution in test generation
        try {
            com.operations.Matrix.Matrix matrix4 = com.operations.Matrix.MatrixUtils.generateRandomMatrix((int) (short) -1, 100, (int) (byte) 100, (int) ' ');
            org.junit.Assert.fail("Expected exception of type java.lang.NegativeArraySizeException; message: -1");
        } catch (java.lang.NegativeArraySizeException e) {
            // Expected exception.
        }
    }

    @Test
    public void test3614() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3614");
        // The following exception was thrown during execution in test generation
        try {
            com.operations.Matrix.Matrix matrix5 = com.operations.Matrix.MatrixUtils.generateRandomMatrix((int) (byte) 0, 0, 0, (int) (short) 1, (long) (byte) 1);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
    }

    @Test
    public void test3615() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3615");
        com.operations.Matrix.Matrix matrix2 = com.operations.Matrix.MatrixTransformations.project2D((-1.0d), (double) (short) -1);
        boolean boolean3 = com.operations.Matrix.MatrixUtils.isSymmetric(matrix2);
        boolean boolean4 = com.operations.Matrix.MatrixUtils.isSymmetric(matrix2);
        java.lang.Class<?> wildcardClass5 = matrix2.getClass();
        org.junit.Assert.assertNotNull(matrix2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(wildcardClass5);
    }

    @Test
    public void test3616() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3616");
        com.operations.Matrix.Matrix matrix2 = com.operations.Matrix.MatrixTransformations.scale2D((double) (byte) 10, (double) 10);
        double[] doubleArray5 = new double[] { 10, 'a' };
        double[] doubleArray8 = new double[] { 10, 'a' };
        double[][] doubleArray9 = new double[][] { doubleArray5, doubleArray8 };
        com.operations.Matrix.Matrix matrix10 = new com.operations.Matrix.Matrix(doubleArray9);
        com.operations.Matrix.Matrix matrix11 = new com.operations.Matrix.Matrix(doubleArray9);
        boolean boolean12 = com.operations.Matrix.MatrixUtils.isSquare(matrix11);
        double[] doubleArray15 = new double[] { 10, 'a' };
        double[] doubleArray18 = new double[] { 10, 'a' };
        double[][] doubleArray19 = new double[][] { doubleArray15, doubleArray18 };
        com.operations.Matrix.Matrix matrix20 = new com.operations.Matrix.Matrix(doubleArray19);
        int int21 = matrix20.getCols();
        int int22 = matrix20.getCols();
        matrix20.print();
        double[] doubleArray26 = new double[] { 10, 'a' };
        double[] doubleArray29 = new double[] { 10, 'a' };
        double[][] doubleArray30 = new double[][] { doubleArray26, doubleArray29 };
        com.operations.Matrix.Matrix matrix31 = new com.operations.Matrix.Matrix(doubleArray30);
        boolean boolean33 = com.operations.Matrix.MatrixUtils.compare(matrix20, matrix31, (double) (-1));
        com.operations.Matrix.Matrix matrix34 = com.operations.Matrix.MatrixOperations.subtract(matrix11, matrix31);
        com.operations.Matrix.Matrix[] matrixArray35 = com.operations.Matrix.MatrixDecompositions.luDecomposition(matrix34);
        double[][] doubleArray36 = matrix34.getData();
        com.operations.Matrix.Matrix matrix37 = new com.operations.Matrix.Matrix(doubleArray36);
        com.operations.Matrix.Matrix matrix38 = com.operations.Matrix.MatrixOperations.multiply(matrix2, matrix37);
        com.operations.Matrix.Matrix matrix40 = com.operations.Matrix.MatrixOperations.scalarMultiply(matrix37, (double) (short) -1);
        com.operations.Matrix.Matrix matrix43 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0L, (double) (byte) 10);
        int int44 = matrix43.getRows();
        com.operations.Matrix.Matrix matrix46 = com.operations.Matrix.MatrixOperations.scalarMultiply(matrix43, (double) 2);
        matrix43.print();
        com.operations.Matrix.Matrix matrix49 = com.operations.Matrix.MatrixOperations.scalarMultiply(matrix43, 100.00499987500625d);
        int int50 = matrix49.getCols();
        com.operations.Matrix.Matrix matrix51 = com.operations.Matrix.MatrixOperations.multiply(matrix37, matrix49);
        boolean boolean52 = com.operations.Matrix.MatrixUtils.isSquare(matrix51);
        org.junit.Assert.assertNotNull(matrix2);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertArrayEquals(doubleArray5, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertArrayEquals(doubleArray8, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertArrayEquals(doubleArray15, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertArrayEquals(doubleArray18, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 2 + "'", int21 == 2);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 2 + "'", int22 == 2);
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertArrayEquals(doubleArray26, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertArrayEquals(doubleArray29, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(matrix34);
        org.junit.Assert.assertNotNull(matrixArray35);
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertNotNull(matrix38);
        org.junit.Assert.assertNotNull(matrix40);
        org.junit.Assert.assertNotNull(matrix43);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 2 + "'", int44 == 2);
        org.junit.Assert.assertNotNull(matrix46);
        org.junit.Assert.assertNotNull(matrix49);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 2 + "'", int50 == 2);
        org.junit.Assert.assertNotNull(matrix51);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + true + "'", boolean52 == true);
    }

    @Test
    public void test3617() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3617");
        com.operations.Matrix.Matrix matrix2 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0L, (double) 10L);
        com.operations.Matrix.Matrix matrix5 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0L, (double) (byte) 10);
        double[] doubleArray8 = new double[] { 10, 'a' };
        double[] doubleArray11 = new double[] { 10, 'a' };
        double[][] doubleArray12 = new double[][] { doubleArray8, doubleArray11 };
        com.operations.Matrix.Matrix matrix13 = new com.operations.Matrix.Matrix(doubleArray12);
        int int14 = matrix13.getCols();
        int int15 = matrix13.getCols();
        int int16 = matrix13.getCols();
        com.operations.Matrix.Matrix[] matrixArray17 = com.operations.Matrix.MatrixDecompositions.luDecomposition(matrix13);
        com.operations.Matrix.Matrix matrix18 = com.operations.Matrix.MatrixOperations.multiply(matrix5, matrix13);
        com.operations.Matrix.Matrix matrix20 = com.operations.Matrix.MatrixTransformations.rotate2D((double) (short) 100);
        boolean boolean22 = com.operations.Matrix.MatrixUtils.compare(matrix13, matrix20, (double) (byte) 0);
        double[] doubleArray25 = new double[] { 10, 'a' };
        double[] doubleArray28 = new double[] { 10, 'a' };
        double[][] doubleArray29 = new double[][] { doubleArray25, doubleArray28 };
        com.operations.Matrix.Matrix matrix30 = new com.operations.Matrix.Matrix(doubleArray29);
        com.operations.Matrix.Matrix matrix31 = new com.operations.Matrix.Matrix(doubleArray29);
        com.operations.Matrix.Matrix matrix32 = new com.operations.Matrix.Matrix(doubleArray29);
        boolean boolean34 = com.operations.Matrix.MatrixUtils.compare(matrix13, matrix32, (double) (-1));
        com.operations.Matrix.Matrix matrix36 = com.operations.Matrix.MatrixTransformations.rotate2D((double) (short) 100);
        double[] doubleArray39 = new double[] { 137.90576492663388d, (byte) -1 };
        double[] doubleArray40 = com.operations.Matrix.MatrixSolver.solveGaussian(matrix36, doubleArray39);
        com.operations.Matrix.Matrix matrix43 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0L, (double) (byte) 10);
        double[] doubleArray46 = new double[] { 10, 'a' };
        double[] doubleArray49 = new double[] { 10, 'a' };
        double[][] doubleArray50 = new double[][] { doubleArray46, doubleArray49 };
        com.operations.Matrix.Matrix matrix51 = new com.operations.Matrix.Matrix(doubleArray50);
        int int52 = matrix51.getCols();
        int int53 = matrix51.getCols();
        int int54 = matrix51.getCols();
        com.operations.Matrix.Matrix[] matrixArray55 = com.operations.Matrix.MatrixDecompositions.luDecomposition(matrix51);
        com.operations.Matrix.Matrix matrix56 = com.operations.Matrix.MatrixOperations.multiply(matrix43, matrix51);
        boolean boolean58 = com.operations.Matrix.MatrixUtils.compare(matrix36, matrix43, (double) (-1L));
        com.operations.Matrix.Matrix matrix59 = com.operations.Matrix.MatrixOperations.add(matrix32, matrix43);
        boolean boolean61 = com.operations.Matrix.MatrixUtils.compare(matrix2, matrix59, 146.4308710620817d);
        com.operations.Matrix.Matrix matrix63 = com.operations.Matrix.MatrixOperations.scalarMultiply(matrix59, (double) 100L);
        double[][] doubleArray64 = matrix63.getData();
        com.operations.Matrix.Matrix matrix65 = new com.operations.Matrix.Matrix(doubleArray64);
        org.junit.Assert.assertNotNull(matrix2);
        org.junit.Assert.assertNotNull(matrix5);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertArrayEquals(doubleArray8, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertArrayEquals(doubleArray11, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 2 + "'", int14 == 2);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 2 + "'", int15 == 2);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 2 + "'", int16 == 2);
        org.junit.Assert.assertNotNull(matrixArray17);
        org.junit.Assert.assertNotNull(matrix18);
        org.junit.Assert.assertNotNull(matrix20);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertArrayEquals(doubleArray25, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertArrayEquals(doubleArray28, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(matrix36);
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertArrayEquals(doubleArray39, new double[] { 137.90576492663388d, (-1.0d) }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertArrayEquals(doubleArray40, new double[] { (-24.931892522286255d), (-135.63701830716116d) }, 1.0E-15);
        org.junit.Assert.assertNotNull(matrix43);
        org.junit.Assert.assertNotNull(doubleArray46);
        org.junit.Assert.assertArrayEquals(doubleArray46, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertArrayEquals(doubleArray49, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 2 + "'", int52 == 2);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 2 + "'", int53 == 2);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 2 + "'", int54 == 2);
        org.junit.Assert.assertNotNull(matrixArray55);
        org.junit.Assert.assertNotNull(matrix56);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(matrix59);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + true + "'", boolean61 == true);
        org.junit.Assert.assertNotNull(matrix63);
        org.junit.Assert.assertNotNull(doubleArray64);
    }

    @Test
    public void test3618() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3618");
        com.operations.Matrix.Matrix matrix2 = com.operations.Matrix.MatrixTransformations.scale2D(365.68429006453096d, 400.0d);
        com.operations.Matrix.Matrix matrix4 = com.operations.Matrix.MatrixOperations.scalarMultiply(matrix2, 2.82842712474619d);
        org.junit.Assert.assertNotNull(matrix2);
        org.junit.Assert.assertNotNull(matrix4);
    }

    @Test
    public void test3619() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3619");
        // The following exception was thrown during execution in test generation
        try {
            com.operations.Matrix.Matrix matrix2 = new com.operations.Matrix.Matrix(97, (-1));
            org.junit.Assert.fail("Expected exception of type java.lang.NegativeArraySizeException; message: -1");
        } catch (java.lang.NegativeArraySizeException e) {
            // Expected exception.
        }
    }

    @Test
    public void test3620() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3620");
        com.operations.Matrix.Matrix matrix2 = com.operations.Matrix.MatrixTransformations.project2D((double) 100.0f, (double) 1);
        com.operations.Matrix.Matrix matrix4 = com.operations.Matrix.MatrixTransformations.rotate2D((double) 'a');
        com.operations.Matrix.Matrix matrix6 = com.operations.Matrix.MatrixTransformations.rotate2D((double) 1.0f);
        com.operations.Matrix.Matrix matrix7 = com.operations.Matrix.MatrixOperations.add(matrix4, matrix6);
        com.operations.Matrix.Matrix matrix8 = com.operations.Matrix.MatrixOperations.subtract(matrix2, matrix7);
        boolean boolean9 = com.operations.Matrix.MatrixUtils.isSymmetric(matrix2);
        org.junit.Assert.assertNotNull(matrix2);
        org.junit.Assert.assertNotNull(matrix4);
        org.junit.Assert.assertNotNull(matrix6);
        org.junit.Assert.assertNotNull(matrix7);
        org.junit.Assert.assertNotNull(matrix8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
    }

    @Test
    public void test3621() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3621");
        double[] doubleArray2 = new double[] { 10, 'a' };
        double[] doubleArray5 = new double[] { 10, 'a' };
        double[][] doubleArray6 = new double[][] { doubleArray2, doubleArray5 };
        com.operations.Matrix.Matrix matrix7 = new com.operations.Matrix.Matrix(doubleArray6);
        com.operations.Matrix.Matrix matrix8 = new com.operations.Matrix.Matrix(doubleArray6);
        boolean boolean9 = com.operations.Matrix.MatrixUtils.isSquare(matrix8);
        double[] doubleArray12 = new double[] { 10, 'a' };
        double[] doubleArray15 = new double[] { 10, 'a' };
        double[][] doubleArray16 = new double[][] { doubleArray12, doubleArray15 };
        com.operations.Matrix.Matrix matrix17 = new com.operations.Matrix.Matrix(doubleArray16);
        int int18 = matrix17.getCols();
        int int19 = matrix17.getCols();
        matrix17.print();
        double[] doubleArray23 = new double[] { 10, 'a' };
        double[] doubleArray26 = new double[] { 10, 'a' };
        double[][] doubleArray27 = new double[][] { doubleArray23, doubleArray26 };
        com.operations.Matrix.Matrix matrix28 = new com.operations.Matrix.Matrix(doubleArray27);
        boolean boolean30 = com.operations.Matrix.MatrixUtils.compare(matrix17, matrix28, (double) (-1));
        com.operations.Matrix.Matrix matrix31 = com.operations.Matrix.MatrixOperations.subtract(matrix8, matrix28);
        com.operations.Matrix.Matrix matrix33 = com.operations.Matrix.MatrixOperations.scalarMultiply(matrix8, (double) 0.0f);
        int int34 = matrix8.getCols();
        double[][] doubleArray35 = matrix8.getData();
        com.operations.Matrix.Matrix matrix36 = new com.operations.Matrix.Matrix(doubleArray35);
        com.operations.Matrix.Matrix matrix37 = new com.operations.Matrix.Matrix(doubleArray35);
        // The following exception was thrown during execution in test generation
        try {
            matrix37.setValue((int) '#', 1, 400.0d);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: Index 35 out of bounds for length 2");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertArrayEquals(doubleArray2, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertArrayEquals(doubleArray5, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertArrayEquals(doubleArray12, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertArrayEquals(doubleArray15, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 2 + "'", int18 == 2);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 2 + "'", int19 == 2);
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertArrayEquals(doubleArray23, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertArrayEquals(doubleArray26, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(matrix31);
        org.junit.Assert.assertNotNull(matrix33);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 2 + "'", int34 == 2);
        org.junit.Assert.assertNotNull(doubleArray35);
    }

    @Test
    public void test3622() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3622");
        com.operations.Matrix.Matrix matrix4 = com.operations.Matrix.MatrixUtils.generateRandomMatrix((int) (short) 1, (int) (byte) 1, 10, (int) (short) 0);
        double[] doubleArray7 = new double[] { 10, 'a' };
        double[] doubleArray10 = new double[] { 10, 'a' };
        double[][] doubleArray11 = new double[][] { doubleArray7, doubleArray10 };
        com.operations.Matrix.Matrix matrix12 = new com.operations.Matrix.Matrix(doubleArray11);
        com.operations.Matrix.Matrix matrix13 = new com.operations.Matrix.Matrix(doubleArray11);
        com.operations.Matrix.Matrix[] matrixArray14 = com.operations.Matrix.MatrixDecompositions.luDecomposition(matrix13);
        com.operations.Matrix.Matrix matrix17 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0, (double) 100L);
        com.operations.Matrix.Matrix matrix18 = com.operations.Matrix.MatrixOperations.subtract(matrix13, matrix17);
        double[][] doubleArray19 = matrix18.getData();
        com.operations.Matrix.Matrix matrix20 = new com.operations.Matrix.Matrix(doubleArray19);
        com.operations.Matrix.Matrix matrix21 = new com.operations.Matrix.Matrix(doubleArray19);
        com.operations.Matrix.Matrix matrix22 = new com.operations.Matrix.Matrix(doubleArray19);
        com.operations.Matrix.Matrix matrix23 = new com.operations.Matrix.Matrix(doubleArray19);
        com.operations.Matrix.Matrix matrix24 = new com.operations.Matrix.Matrix(doubleArray19);
        com.operations.Matrix.Matrix matrix25 = new com.operations.Matrix.Matrix(doubleArray19);
        com.operations.Matrix.Matrix matrix26 = com.operations.Matrix.MatrixOperations.transpose(matrix25);
        // The following exception was thrown during execution in test generation
        try {
            com.operations.Matrix.Matrix matrix27 = com.operations.Matrix.MatrixOperations.subtract(matrix4, matrix26);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Matrices must have the same dimensions for subtraction.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(matrix4);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertArrayEquals(doubleArray7, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertArrayEquals(doubleArray10, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertNotNull(matrixArray14);
        org.junit.Assert.assertNotNull(matrix17);
        org.junit.Assert.assertNotNull(matrix18);
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertNotNull(matrix26);
    }

    @Test
    public void test3623() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3623");
        com.operations.Matrix.Matrix matrix1 = com.operations.Matrix.MatrixTransformations.rotate2D(365.68429006453096d);
        int int2 = matrix1.getRows();
        boolean boolean3 = com.operations.Matrix.MatrixUtils.isSymmetric(matrix1);
        org.junit.Assert.assertNotNull(matrix1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 2 + "'", int2 == 2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
    }

    @Test
    public void test3624() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3624");
        com.operations.Matrix.Matrix matrix2 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0L, (double) (byte) 10);
        double[] doubleArray5 = new double[] { 10, 'a' };
        double[] doubleArray8 = new double[] { 10, 'a' };
        double[][] doubleArray9 = new double[][] { doubleArray5, doubleArray8 };
        com.operations.Matrix.Matrix matrix10 = new com.operations.Matrix.Matrix(doubleArray9);
        int int11 = matrix10.getCols();
        int int12 = matrix10.getCols();
        int int13 = matrix10.getCols();
        com.operations.Matrix.Matrix[] matrixArray14 = com.operations.Matrix.MatrixDecompositions.luDecomposition(matrix10);
        com.operations.Matrix.Matrix matrix15 = com.operations.Matrix.MatrixOperations.multiply(matrix2, matrix10);
        com.operations.Matrix.Matrix matrix17 = com.operations.Matrix.MatrixTransformations.rotate2D((double) (short) 100);
        boolean boolean19 = com.operations.Matrix.MatrixUtils.compare(matrix10, matrix17, (double) (byte) 0);
        com.operations.Matrix.Matrix[] matrixArray20 = com.operations.Matrix.MatrixDecompositions.luDecomposition(matrix10);
        com.operations.Matrix.Matrix matrix21 = com.operations.Matrix.MatrixOperations.transpose(matrix10);
        com.operations.Matrix.Matrix matrix24 = com.operations.Matrix.MatrixTransformations.scale2D(0.0d, (double) 0L);
        com.operations.Matrix.Matrix matrix25 = com.operations.Matrix.MatrixOperations.add(matrix10, matrix24);
        com.operations.Matrix.Matrix matrix26 = com.operations.Matrix.MatrixOperations.transpose(matrix24);
        int int27 = matrix26.getCols();
        org.junit.Assert.assertNotNull(matrix2);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertArrayEquals(doubleArray5, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertArrayEquals(doubleArray8, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 2 + "'", int11 == 2);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 2 + "'", int12 == 2);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 2 + "'", int13 == 2);
        org.junit.Assert.assertNotNull(matrixArray14);
        org.junit.Assert.assertNotNull(matrix15);
        org.junit.Assert.assertNotNull(matrix17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(matrixArray20);
        org.junit.Assert.assertNotNull(matrix21);
        org.junit.Assert.assertNotNull(matrix24);
        org.junit.Assert.assertNotNull(matrix25);
        org.junit.Assert.assertNotNull(matrix26);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 2 + "'", int27 == 2);
    }

    @Test
    public void test3625() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3625");
        com.operations.Matrix.Matrix matrix1 = com.operations.Matrix.MatrixTransformations.rotate2D((double) 'a');
        com.operations.Matrix.Matrix matrix3 = com.operations.Matrix.MatrixTransformations.rotate2D((double) 1.0f);
        com.operations.Matrix.Matrix matrix4 = com.operations.Matrix.MatrixOperations.add(matrix1, matrix3);
        com.operations.Matrix.Matrix matrix6 = com.operations.Matrix.MatrixTransformations.rotate2D((double) '4');
        double[] doubleArray9 = new double[] { 10, 'a' };
        double[] doubleArray12 = new double[] { 10, 'a' };
        double[][] doubleArray13 = new double[][] { doubleArray9, doubleArray12 };
        com.operations.Matrix.Matrix matrix14 = new com.operations.Matrix.Matrix(doubleArray13);
        com.operations.Matrix.Matrix matrix15 = new com.operations.Matrix.Matrix(doubleArray13);
        com.operations.Matrix.Matrix matrix17 = com.operations.Matrix.MatrixTransformations.rotate2D((double) (short) 100);
        double[] doubleArray20 = new double[] { 137.90576492663388d, (byte) -1 };
        double[] doubleArray21 = com.operations.Matrix.MatrixSolver.solveGaussian(matrix17, doubleArray20);
        com.operations.Matrix.Matrix matrix22 = com.operations.Matrix.MatrixOperations.add(matrix15, matrix17);
        boolean boolean23 = com.operations.Matrix.MatrixUtils.isSymmetric(matrix22);
        boolean boolean25 = com.operations.Matrix.MatrixUtils.compare(matrix6, matrix22, 364.0054944640259d);
        com.operations.Matrix.Matrix[] matrixArray26 = com.operations.Matrix.MatrixDecompositions.luDecomposition(matrix22);
        com.operations.Matrix.Matrix matrix28 = com.operations.Matrix.MatrixOperations.scalarMultiply(matrix22, (double) 1L);
        com.operations.Matrix.Matrix matrix31 = com.operations.Matrix.MatrixTransformations.scale2D((double) 100.0f, (double) (byte) 1);
        com.operations.Matrix.Matrix matrix34 = com.operations.Matrix.MatrixTransformations.scale2D((double) 1.0f, (double) 1);
        com.operations.Matrix.Matrix matrix36 = com.operations.Matrix.MatrixTransformations.rotate2D((double) 1.0f);
        com.operations.Matrix.Matrix matrix39 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0L, (double) (byte) 10);
        int int40 = matrix39.getRows();
        com.operations.Matrix.Matrix matrix42 = com.operations.Matrix.MatrixOperations.scalarMultiply(matrix39, (double) 2);
        double double43 = com.operations.Matrix.MatrixUtils.frobeniusNorm(matrix39);
        com.operations.Matrix.Matrix matrix46 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0L, (double) (byte) 10);
        int int47 = matrix46.getRows();
        com.operations.Matrix.Matrix matrix49 = com.operations.Matrix.MatrixOperations.scalarMultiply(matrix46, (double) 2);
        com.operations.Matrix.Matrix matrix50 = com.operations.Matrix.MatrixOperations.subtract(matrix39, matrix49);
        com.operations.Matrix.Matrix matrix51 = com.operations.Matrix.MatrixOperations.add(matrix36, matrix49);
        boolean boolean53 = com.operations.Matrix.MatrixUtils.compare(matrix34, matrix36, (double) (byte) -1);
        com.operations.Matrix.Matrix matrix54 = com.operations.Matrix.MatrixOperations.transpose(matrix36);
        com.operations.Matrix.Matrix matrix57 = com.operations.Matrix.MatrixTransformations.project2D((double) 10L, 10.0d);
        com.operations.Matrix.Matrix matrix59 = com.operations.Matrix.MatrixTransformations.rotate2D((double) (short) 100);
        double[] doubleArray62 = new double[] { 137.90576492663388d, (byte) -1 };
        double[] doubleArray63 = com.operations.Matrix.MatrixSolver.solveGaussian(matrix59, doubleArray62);
        com.operations.Matrix.Matrix matrix66 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0L, (double) (byte) 10);
        double[] doubleArray69 = new double[] { 10, 'a' };
        double[] doubleArray72 = new double[] { 10, 'a' };
        double[][] doubleArray73 = new double[][] { doubleArray69, doubleArray72 };
        com.operations.Matrix.Matrix matrix74 = new com.operations.Matrix.Matrix(doubleArray73);
        int int75 = matrix74.getCols();
        int int76 = matrix74.getCols();
        int int77 = matrix74.getCols();
        com.operations.Matrix.Matrix[] matrixArray78 = com.operations.Matrix.MatrixDecompositions.luDecomposition(matrix74);
        com.operations.Matrix.Matrix matrix79 = com.operations.Matrix.MatrixOperations.multiply(matrix66, matrix74);
        boolean boolean81 = com.operations.Matrix.MatrixUtils.compare(matrix59, matrix66, (double) (-1L));
        double[][] doubleArray82 = matrix59.getData();
        com.operations.Matrix.Matrix matrix84 = com.operations.Matrix.MatrixTransformations.rotate2D((double) (short) 100);
        double[] doubleArray87 = new double[] { 137.90576492663388d, (byte) -1 };
        double[] doubleArray88 = com.operations.Matrix.MatrixSolver.solveGaussian(matrix84, doubleArray87);
        double[] doubleArray89 = com.operations.Matrix.MatrixSolver.solveGaussian(matrix59, doubleArray87);
        double[] doubleArray90 = com.operations.Matrix.MatrixSolver.solveGaussian(matrix57, doubleArray89);
        double[] doubleArray91 = com.operations.Matrix.MatrixSolver.solveGaussian(matrix36, doubleArray90);
        double[] doubleArray92 = com.operations.Matrix.MatrixSolver.solveGaussian(matrix31, doubleArray91);
        double[] doubleArray93 = com.operations.Matrix.MatrixSolver.solveGaussian(matrix22, doubleArray91);
        double[] doubleArray94 = com.operations.Matrix.MatrixSolver.solveGaussian(matrix4, doubleArray93);
        boolean boolean95 = com.operations.Matrix.MatrixUtils.isSquare(matrix4);
        org.junit.Assert.assertNotNull(matrix1);
        org.junit.Assert.assertNotNull(matrix3);
        org.junit.Assert.assertNotNull(matrix4);
        org.junit.Assert.assertNotNull(matrix6);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertArrayEquals(doubleArray9, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertArrayEquals(doubleArray12, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertNotNull(matrix17);
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertArrayEquals(doubleArray20, new double[] { 137.90576492663388d, (-1.0d) }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertArrayEquals(doubleArray21, new double[] { (-24.931892522286255d), (-135.63701830716116d) }, 1.0E-15);
        org.junit.Assert.assertNotNull(matrix22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertNotNull(matrixArray26);
        org.junit.Assert.assertNotNull(matrix28);
        org.junit.Assert.assertNotNull(matrix31);
        org.junit.Assert.assertNotNull(matrix34);
        org.junit.Assert.assertNotNull(matrix36);
        org.junit.Assert.assertNotNull(matrix39);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 2 + "'", int40 == 2);
        org.junit.Assert.assertNotNull(matrix42);
        org.junit.Assert.assertTrue("'" + double43 + "' != '" + 10.0d + "'", double43 == 10.0d);
        org.junit.Assert.assertNotNull(matrix46);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 2 + "'", int47 == 2);
        org.junit.Assert.assertNotNull(matrix49);
        org.junit.Assert.assertNotNull(matrix50);
        org.junit.Assert.assertNotNull(matrix51);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(matrix54);
        org.junit.Assert.assertNotNull(matrix57);
        org.junit.Assert.assertNotNull(matrix59);
        org.junit.Assert.assertNotNull(doubleArray62);
        org.junit.Assert.assertArrayEquals(doubleArray62, new double[] { 137.90576492663388d, (-1.0d) }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray63);
        org.junit.Assert.assertArrayEquals(doubleArray63, new double[] { (-24.931892522286255d), (-135.63701830716116d) }, 1.0E-15);
        org.junit.Assert.assertNotNull(matrix66);
        org.junit.Assert.assertNotNull(doubleArray69);
        org.junit.Assert.assertArrayEquals(doubleArray69, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray72);
        org.junit.Assert.assertArrayEquals(doubleArray72, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray73);
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + 2 + "'", int75 == 2);
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 2 + "'", int76 == 2);
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + 2 + "'", int77 == 2);
        org.junit.Assert.assertNotNull(matrixArray78);
        org.junit.Assert.assertNotNull(matrix79);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
        org.junit.Assert.assertNotNull(doubleArray82);
        org.junit.Assert.assertNotNull(matrix84);
        org.junit.Assert.assertNotNull(doubleArray87);
        org.junit.Assert.assertArrayEquals(doubleArray87, new double[] { 137.90576492663388d, (-1.0d) }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray88);
        org.junit.Assert.assertArrayEquals(doubleArray88, new double[] { (-24.931892522286255d), (-135.63701830716116d) }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray89);
        org.junit.Assert.assertArrayEquals(doubleArray89, new double[] { (-24.931892522286255d), (-135.63701830716116d) }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray90);
        org.junit.Assert.assertArrayEquals(doubleArray90, new double[] { (-2.4931892522286256d), (-13.563701830716116d) }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray91);
        org.junit.Assert.assertArrayEquals(doubleArray91, new double[] { (-2.7295287645732618d), (-13.518123861075072d) }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray92);
        org.junit.Assert.assertArrayEquals(doubleArray92, new double[] { (-0.027295287645732618d), (-13.518123861075072d) }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray93);
        org.junit.Assert.assertArrayEquals(doubleArray93, new double[] { (-10.010349291411998d), 0.996047427487017d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray94);
        org.junit.Assert.assertArrayEquals(doubleArray94, new double[] { (-4.345678889017899d), 6.133610046906377d }, 1.0E-15);
        org.junit.Assert.assertTrue("'" + boolean95 + "' != '" + true + "'", boolean95 == true);
    }

    @Test
    public void test3626() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3626");
        com.operations.Matrix.Matrix matrix2 = com.operations.Matrix.MatrixTransformations.project2D((double) ' ', 0.0d);
        double[] doubleArray5 = new double[] { 10, 'a' };
        double[] doubleArray8 = new double[] { 10, 'a' };
        double[][] doubleArray9 = new double[][] { doubleArray5, doubleArray8 };
        com.operations.Matrix.Matrix matrix10 = new com.operations.Matrix.Matrix(doubleArray9);
        int int11 = matrix10.getCols();
        boolean boolean12 = com.operations.Matrix.MatrixUtils.isSquare(matrix10);
        com.operations.Matrix.Matrix matrix13 = com.operations.Matrix.MatrixOperations.transpose(matrix10);
        int int14 = matrix13.getRows();
        com.operations.Matrix.Matrix matrix17 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0L, (double) (byte) 10);
        double[] doubleArray20 = new double[] { 10, 'a' };
        double[] doubleArray23 = new double[] { 10, 'a' };
        double[][] doubleArray24 = new double[][] { doubleArray20, doubleArray23 };
        com.operations.Matrix.Matrix matrix25 = new com.operations.Matrix.Matrix(doubleArray24);
        int int26 = matrix25.getCols();
        int int27 = matrix25.getCols();
        int int28 = matrix25.getCols();
        com.operations.Matrix.Matrix[] matrixArray29 = com.operations.Matrix.MatrixDecompositions.luDecomposition(matrix25);
        com.operations.Matrix.Matrix matrix30 = com.operations.Matrix.MatrixOperations.multiply(matrix17, matrix25);
        com.operations.Matrix.Matrix matrix32 = com.operations.Matrix.MatrixTransformations.rotate2D((double) (short) 100);
        boolean boolean34 = com.operations.Matrix.MatrixUtils.compare(matrix25, matrix32, (double) (byte) 0);
        com.operations.Matrix.Matrix matrix35 = com.operations.Matrix.MatrixOperations.multiply(matrix13, matrix25);
        com.operations.Matrix.Matrix matrix36 = com.operations.Matrix.MatrixOperations.add(matrix2, matrix25);
        com.operations.Matrix.Matrix matrix37 = com.operations.Matrix.MatrixOperations.transpose(matrix2);
        com.operations.Matrix.Matrix matrix40 = com.operations.Matrix.MatrixTransformations.scale2D((double) (byte) 100, 350.0d);
        double double41 = com.operations.Matrix.MatrixUtils.frobeniusNorm(matrix40);
        int int42 = matrix40.getCols();
        com.operations.Matrix.Matrix matrix43 = com.operations.Matrix.MatrixOperations.multiply(matrix2, matrix40);
        com.operations.Matrix.Matrix matrix46 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0L, (double) (byte) 10);
        int int47 = matrix46.getRows();
        com.operations.Matrix.Matrix matrix49 = com.operations.Matrix.MatrixOperations.scalarMultiply(matrix46, (double) 2);
        double double50 = com.operations.Matrix.MatrixUtils.frobeniusNorm(matrix46);
        int int51 = matrix46.getRows();
        com.operations.Matrix.Matrix matrix52 = com.operations.Matrix.MatrixOperations.transpose(matrix46);
        com.operations.Matrix.Matrix matrix53 = com.operations.Matrix.MatrixOperations.add(matrix43, matrix52);
        com.operations.Matrix.Matrix matrix54 = com.operations.Matrix.MatrixOperations.transpose(matrix53);
        com.operations.Matrix.Matrix matrix56 = com.operations.Matrix.MatrixOperations.scalarMultiply(matrix54, 52.009614495783374d);
        matrix56.setValue(1, (int) (byte) 1, 1950.2820308868152d);
        boolean boolean61 = com.operations.Matrix.MatrixUtils.isSquare(matrix56);
        org.junit.Assert.assertNotNull(matrix2);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertArrayEquals(doubleArray5, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertArrayEquals(doubleArray8, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 2 + "'", int11 == 2);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(matrix13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 2 + "'", int14 == 2);
        org.junit.Assert.assertNotNull(matrix17);
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertArrayEquals(doubleArray20, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertArrayEquals(doubleArray23, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 2 + "'", int26 == 2);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 2 + "'", int27 == 2);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 2 + "'", int28 == 2);
        org.junit.Assert.assertNotNull(matrixArray29);
        org.junit.Assert.assertNotNull(matrix30);
        org.junit.Assert.assertNotNull(matrix32);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(matrix35);
        org.junit.Assert.assertNotNull(matrix36);
        org.junit.Assert.assertNotNull(matrix37);
        org.junit.Assert.assertNotNull(matrix40);
        org.junit.Assert.assertTrue("'" + double41 + "' != '" + 364.0054944640259d + "'", double41 == 364.0054944640259d);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 2 + "'", int42 == 2);
        org.junit.Assert.assertNotNull(matrix43);
        org.junit.Assert.assertNotNull(matrix46);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 2 + "'", int47 == 2);
        org.junit.Assert.assertNotNull(matrix49);
        org.junit.Assert.assertTrue("'" + double50 + "' != '" + 10.0d + "'", double50 == 10.0d);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 2 + "'", int51 == 2);
        org.junit.Assert.assertNotNull(matrix52);
        org.junit.Assert.assertNotNull(matrix53);
        org.junit.Assert.assertNotNull(matrix54);
        org.junit.Assert.assertNotNull(matrix56);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + true + "'", boolean61 == true);
    }

    @Test
    public void test3627() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3627");
        com.operations.Matrix.Matrix matrix1 = com.operations.Matrix.MatrixTransformations.rotate2D(100.0d);
        int int2 = matrix1.getCols();
        double[][] doubleArray3 = matrix1.getData();
        double double4 = com.operations.Matrix.MatrixUtils.frobeniusNorm(matrix1);
        com.operations.Matrix.Matrix matrix6 = com.operations.Matrix.MatrixOperations.scalarMultiply(matrix1, (double) (short) 10);
        com.operations.Matrix.Matrix[] matrixArray7 = com.operations.Matrix.MatrixDecompositions.luDecomposition(matrix1);
        com.operations.Matrix.Matrix[] matrixArray8 = com.operations.Matrix.MatrixDecompositions.luDecomposition(matrix1);
        com.operations.Matrix.Matrix matrix9 = com.operations.Matrix.MatrixOperations.transpose(matrix1);
        double double10 = com.operations.Matrix.MatrixUtils.frobeniusNorm(matrix9);
        org.junit.Assert.assertNotNull(matrix1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 2 + "'", int2 == 2);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertTrue("'" + double4 + "' != '" + 1.414213562373095d + "'", double4 == 1.414213562373095d);
        org.junit.Assert.assertNotNull(matrix6);
        org.junit.Assert.assertNotNull(matrixArray7);
        org.junit.Assert.assertNotNull(matrixArray8);
        org.junit.Assert.assertNotNull(matrix9);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 1.414213562373095d + "'", double10 == 1.414213562373095d);
    }

    @Test
    public void test3628() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3628");
        double[] doubleArray2 = new double[] { 10, 'a' };
        double[] doubleArray5 = new double[] { 10, 'a' };
        double[][] doubleArray6 = new double[][] { doubleArray2, doubleArray5 };
        com.operations.Matrix.Matrix matrix7 = new com.operations.Matrix.Matrix(doubleArray6);
        com.operations.Matrix.Matrix matrix8 = new com.operations.Matrix.Matrix(doubleArray6);
        boolean boolean9 = com.operations.Matrix.MatrixUtils.isSquare(matrix8);
        double[] doubleArray12 = new double[] { 10, 'a' };
        double[] doubleArray15 = new double[] { 10, 'a' };
        double[][] doubleArray16 = new double[][] { doubleArray12, doubleArray15 };
        com.operations.Matrix.Matrix matrix17 = new com.operations.Matrix.Matrix(doubleArray16);
        int int18 = matrix17.getCols();
        int int19 = matrix17.getCols();
        matrix17.print();
        double[] doubleArray23 = new double[] { 10, 'a' };
        double[] doubleArray26 = new double[] { 10, 'a' };
        double[][] doubleArray27 = new double[][] { doubleArray23, doubleArray26 };
        com.operations.Matrix.Matrix matrix28 = new com.operations.Matrix.Matrix(doubleArray27);
        boolean boolean30 = com.operations.Matrix.MatrixUtils.compare(matrix17, matrix28, (double) (-1));
        com.operations.Matrix.Matrix matrix31 = com.operations.Matrix.MatrixOperations.subtract(matrix8, matrix28);
        com.operations.Matrix.Matrix matrix32 = com.operations.Matrix.MatrixDecompositions.choleskyDecomposition(matrix8);
        double[] doubleArray35 = new double[] { 10, 'a' };
        double[] doubleArray38 = new double[] { 10, 'a' };
        double[][] doubleArray39 = new double[][] { doubleArray35, doubleArray38 };
        com.operations.Matrix.Matrix matrix40 = new com.operations.Matrix.Matrix(doubleArray39);
        com.operations.Matrix.Matrix matrix41 = com.operations.Matrix.MatrixOperations.transpose(matrix40);
        com.operations.Matrix.Matrix matrix44 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0L, (double) (byte) 10);
        int int45 = matrix44.getRows();
        com.operations.Matrix.Matrix matrix51 = com.operations.Matrix.MatrixUtils.generateRandomMatrix(100, (int) (byte) 1, (int) '#', (int) '#', 1L);
        boolean boolean53 = com.operations.Matrix.MatrixUtils.compare(matrix44, matrix51, (double) 1.0f);
        com.operations.Matrix.Matrix matrix55 = com.operations.Matrix.MatrixOperations.scalarMultiply(matrix44, (double) 1L);
        matrix44.print();
        com.operations.Matrix.Matrix matrix57 = com.operations.Matrix.MatrixOperations.multiply(matrix41, matrix44);
        boolean boolean59 = com.operations.Matrix.MatrixUtils.compare(matrix8, matrix41, 137.15495886388925d);
        com.operations.Matrix.Matrix matrix62 = com.operations.Matrix.MatrixTransformations.scale2D(146.4308710620817d, 0.9998476951563913d);
        double[] doubleArray65 = new double[] { 10, 'a' };
        double[] doubleArray68 = new double[] { 10, 'a' };
        double[][] doubleArray69 = new double[][] { doubleArray65, doubleArray68 };
        com.operations.Matrix.Matrix matrix70 = new com.operations.Matrix.Matrix(doubleArray69);
        com.operations.Matrix.Matrix matrix71 = new com.operations.Matrix.Matrix(doubleArray69);
        boolean boolean72 = com.operations.Matrix.MatrixUtils.isSquare(matrix71);
        com.operations.Matrix.Matrix[] matrixArray73 = com.operations.Matrix.MatrixDecompositions.luDecomposition(matrix71);
        com.operations.Matrix.Matrix matrix74 = com.operations.Matrix.MatrixOperations.multiply(matrix62, matrix71);
        boolean boolean76 = com.operations.Matrix.MatrixUtils.compare(matrix8, matrix62, 391.8840992892044d);
        com.operations.Matrix.Matrix matrix78 = com.operations.Matrix.MatrixOperations.scalarMultiply(matrix8, 18.985133644271098d);
        com.operations.Matrix.Matrix matrix81 = new com.operations.Matrix.Matrix((int) (short) 1, (int) 'a');
        // The following exception was thrown during execution in test generation
        try {
            com.operations.Matrix.Matrix matrix82 = com.operations.Matrix.MatrixOperations.multiply(matrix78, matrix81);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Matrix A's columns must match Matrix B's rows for multiplication.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertArrayEquals(doubleArray2, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertArrayEquals(doubleArray5, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertArrayEquals(doubleArray12, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertArrayEquals(doubleArray15, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 2 + "'", int18 == 2);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 2 + "'", int19 == 2);
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertArrayEquals(doubleArray23, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertArrayEquals(doubleArray26, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(matrix31);
        org.junit.Assert.assertNotNull(matrix32);
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertArrayEquals(doubleArray35, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertArrayEquals(doubleArray38, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertNotNull(matrix41);
        org.junit.Assert.assertNotNull(matrix44);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 2 + "'", int45 == 2);
        org.junit.Assert.assertNotNull(matrix51);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(matrix55);
        org.junit.Assert.assertNotNull(matrix57);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + true + "'", boolean59 == true);
        org.junit.Assert.assertNotNull(matrix62);
        org.junit.Assert.assertNotNull(doubleArray65);
        org.junit.Assert.assertArrayEquals(doubleArray65, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray68);
        org.junit.Assert.assertArrayEquals(doubleArray68, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray69);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + true + "'", boolean72 == true);
        org.junit.Assert.assertNotNull(matrixArray73);
        org.junit.Assert.assertNotNull(matrix74);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + true + "'", boolean76 == true);
        org.junit.Assert.assertNotNull(matrix78);
    }

    @Test
    public void test3629() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3629");
        com.operations.Matrix.Matrix matrix2 = com.operations.Matrix.MatrixTransformations.scale2D(0.0d, (double) 1.0f);
        com.operations.Matrix.Matrix matrix4 = com.operations.Matrix.MatrixTransformations.rotate2D((double) 1.0f);
        com.operations.Matrix.Matrix matrix7 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0L, (double) (byte) 10);
        int int8 = matrix7.getRows();
        com.operations.Matrix.Matrix matrix10 = com.operations.Matrix.MatrixOperations.scalarMultiply(matrix7, (double) 2);
        double double11 = com.operations.Matrix.MatrixUtils.frobeniusNorm(matrix7);
        com.operations.Matrix.Matrix matrix14 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0L, (double) (byte) 10);
        int int15 = matrix14.getRows();
        com.operations.Matrix.Matrix matrix17 = com.operations.Matrix.MatrixOperations.scalarMultiply(matrix14, (double) 2);
        com.operations.Matrix.Matrix matrix18 = com.operations.Matrix.MatrixOperations.subtract(matrix7, matrix17);
        com.operations.Matrix.Matrix matrix19 = com.operations.Matrix.MatrixOperations.add(matrix4, matrix17);
        com.operations.Matrix.Matrix matrix21 = com.operations.Matrix.MatrixOperations.scalarMultiply(matrix19, (double) 0L);
        com.operations.Matrix.Matrix matrix22 = com.operations.Matrix.MatrixOperations.subtract(matrix2, matrix21);
        com.operations.Matrix.Matrix[] matrixArray23 = com.operations.Matrix.MatrixDecompositions.luDecomposition(matrix22);
        java.lang.Class<?> wildcardClass24 = matrix22.getClass();
        org.junit.Assert.assertNotNull(matrix2);
        org.junit.Assert.assertNotNull(matrix4);
        org.junit.Assert.assertNotNull(matrix7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 2 + "'", int8 == 2);
        org.junit.Assert.assertNotNull(matrix10);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 10.0d + "'", double11 == 10.0d);
        org.junit.Assert.assertNotNull(matrix14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 2 + "'", int15 == 2);
        org.junit.Assert.assertNotNull(matrix17);
        org.junit.Assert.assertNotNull(matrix18);
        org.junit.Assert.assertNotNull(matrix19);
        org.junit.Assert.assertNotNull(matrix21);
        org.junit.Assert.assertNotNull(matrix22);
        org.junit.Assert.assertNotNull(matrixArray23);
        org.junit.Assert.assertNotNull(wildcardClass24);
    }

    @Test
    public void test3630() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3630");
        com.operations.Matrix.Matrix matrix2 = com.operations.Matrix.MatrixTransformations.project2D((double) (byte) 0, (double) 35);
        org.junit.Assert.assertNotNull(matrix2);
    }

    @Test
    public void test3631() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3631");
        com.operations.Matrix.Matrix matrix2 = new com.operations.Matrix.Matrix(52, 52);
        com.operations.Matrix.Matrix[] matrixArray3 = com.operations.Matrix.MatrixDecompositions.luDecomposition(matrix2);
        com.operations.Matrix.Matrix matrix5 = com.operations.Matrix.MatrixOperations.scalarMultiply(matrix2, 146.4308710620817d);
        double double6 = com.operations.Matrix.MatrixUtils.frobeniusNorm(matrix2);
        org.junit.Assert.assertNotNull(matrixArray3);
        org.junit.Assert.assertNotNull(matrix5);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.0d + "'", double6 == 0.0d);
    }

    @Test
    public void test3632() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3632");
        com.operations.Matrix.Matrix matrix5 = com.operations.Matrix.MatrixUtils.generateRandomMatrix(10, (int) (byte) 1, 10, 1, (long) 100);
        com.operations.Matrix.Matrix matrix6 = com.operations.Matrix.MatrixOperations.transpose(matrix5);
        com.operations.Matrix.Matrix matrix9 = com.operations.Matrix.MatrixTransformations.scale2D(0.0d, 0.0d);
        com.operations.Matrix.Matrix matrix12 = com.operations.Matrix.MatrixTransformations.scale2D((double) 1, (-1.0d));
        com.operations.Matrix.Matrix matrix15 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0L, (double) (byte) 10);
        double[] doubleArray18 = new double[] { 10, 'a' };
        double[] doubleArray21 = new double[] { 10, 'a' };
        double[][] doubleArray22 = new double[][] { doubleArray18, doubleArray21 };
        com.operations.Matrix.Matrix matrix23 = new com.operations.Matrix.Matrix(doubleArray22);
        int int24 = matrix23.getCols();
        int int25 = matrix23.getCols();
        int int26 = matrix23.getCols();
        com.operations.Matrix.Matrix[] matrixArray27 = com.operations.Matrix.MatrixDecompositions.luDecomposition(matrix23);
        com.operations.Matrix.Matrix matrix28 = com.operations.Matrix.MatrixOperations.multiply(matrix15, matrix23);
        int int29 = matrix23.getRows();
        int int30 = matrix23.getCols();
        com.operations.Matrix.Matrix matrix33 = com.operations.Matrix.MatrixTransformations.project2D((double) (-1L), (double) (short) 100);
        com.operations.Matrix.Matrix matrix34 = com.operations.Matrix.MatrixOperations.subtract(matrix23, matrix33);
        com.operations.Matrix.Matrix matrix35 = com.operations.Matrix.MatrixOperations.add(matrix12, matrix34);
        com.operations.Matrix.Matrix matrix36 = com.operations.Matrix.MatrixOperations.add(matrix9, matrix12);
        double[] doubleArray39 = new double[] { 10, 'a' };
        double[] doubleArray42 = new double[] { 10, 'a' };
        double[][] doubleArray43 = new double[][] { doubleArray39, doubleArray42 };
        com.operations.Matrix.Matrix matrix44 = new com.operations.Matrix.Matrix(doubleArray43);
        com.operations.Matrix.Matrix matrix45 = new com.operations.Matrix.Matrix(doubleArray43);
        com.operations.Matrix.Matrix matrix47 = com.operations.Matrix.MatrixTransformations.rotate2D((double) (short) 100);
        double[] doubleArray50 = new double[] { 137.90576492663388d, (byte) -1 };
        double[] doubleArray51 = com.operations.Matrix.MatrixSolver.solveGaussian(matrix47, doubleArray50);
        com.operations.Matrix.Matrix matrix52 = com.operations.Matrix.MatrixOperations.add(matrix45, matrix47);
        com.operations.Matrix.Matrix matrix53 = com.operations.Matrix.MatrixOperations.transpose(matrix47);
        int int54 = matrix47.getCols();
        com.operations.Matrix.Matrix matrix57 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0L, (double) (byte) 10);
        double[] doubleArray60 = new double[] { 10, 'a' };
        double[] doubleArray63 = new double[] { 10, 'a' };
        double[][] doubleArray64 = new double[][] { doubleArray60, doubleArray63 };
        com.operations.Matrix.Matrix matrix65 = new com.operations.Matrix.Matrix(doubleArray64);
        int int66 = matrix65.getCols();
        int int67 = matrix65.getCols();
        int int68 = matrix65.getCols();
        com.operations.Matrix.Matrix[] matrixArray69 = com.operations.Matrix.MatrixDecompositions.luDecomposition(matrix65);
        com.operations.Matrix.Matrix matrix70 = com.operations.Matrix.MatrixOperations.multiply(matrix57, matrix65);
        com.operations.Matrix.Matrix matrix72 = com.operations.Matrix.MatrixTransformations.rotate2D((double) (short) 100);
        boolean boolean74 = com.operations.Matrix.MatrixUtils.compare(matrix65, matrix72, (double) (byte) 0);
        boolean boolean75 = com.operations.Matrix.MatrixUtils.isSymmetric(matrix72);
        boolean boolean76 = com.operations.Matrix.MatrixUtils.isSquare(matrix72);
        com.operations.Matrix.Matrix matrix78 = com.operations.Matrix.MatrixTransformations.rotate2D((double) (short) 100);
        boolean boolean80 = com.operations.Matrix.MatrixUtils.compare(matrix72, matrix78, (double) (byte) 100);
        matrix78.print();
        com.operations.Matrix.Matrix matrix82 = com.operations.Matrix.MatrixOperations.add(matrix47, matrix78);
        com.operations.Matrix.Matrix matrix83 = com.operations.Matrix.MatrixOperations.subtract(matrix9, matrix47);
        // The following exception was thrown during execution in test generation
        try {
            com.operations.Matrix.Matrix matrix84 = com.operations.Matrix.MatrixOperations.multiply(matrix6, matrix83);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Matrix A's columns must match Matrix B's rows for multiplication.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(matrix5);
        org.junit.Assert.assertNotNull(matrix6);
        org.junit.Assert.assertNotNull(matrix9);
        org.junit.Assert.assertNotNull(matrix12);
        org.junit.Assert.assertNotNull(matrix15);
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertArrayEquals(doubleArray18, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertArrayEquals(doubleArray21, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 2 + "'", int24 == 2);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 2 + "'", int25 == 2);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 2 + "'", int26 == 2);
        org.junit.Assert.assertNotNull(matrixArray27);
        org.junit.Assert.assertNotNull(matrix28);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 2 + "'", int29 == 2);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 2 + "'", int30 == 2);
        org.junit.Assert.assertNotNull(matrix33);
        org.junit.Assert.assertNotNull(matrix34);
        org.junit.Assert.assertNotNull(matrix35);
        org.junit.Assert.assertNotNull(matrix36);
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertArrayEquals(doubleArray39, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertArrayEquals(doubleArray42, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertNotNull(matrix47);
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertArrayEquals(doubleArray50, new double[] { 137.90576492663388d, (-1.0d) }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertArrayEquals(doubleArray51, new double[] { (-24.931892522286255d), (-135.63701830716116d) }, 1.0E-15);
        org.junit.Assert.assertNotNull(matrix52);
        org.junit.Assert.assertNotNull(matrix53);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 2 + "'", int54 == 2);
        org.junit.Assert.assertNotNull(matrix57);
        org.junit.Assert.assertNotNull(doubleArray60);
        org.junit.Assert.assertArrayEquals(doubleArray60, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray63);
        org.junit.Assert.assertArrayEquals(doubleArray63, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray64);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 2 + "'", int66 == 2);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 2 + "'", int67 == 2);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 2 + "'", int68 == 2);
        org.junit.Assert.assertNotNull(matrixArray69);
        org.junit.Assert.assertNotNull(matrix70);
        org.junit.Assert.assertNotNull(matrix72);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + true + "'", boolean76 == true);
        org.junit.Assert.assertNotNull(matrix78);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + true + "'", boolean80 == true);
        org.junit.Assert.assertNotNull(matrix82);
        org.junit.Assert.assertNotNull(matrix83);
    }

    @Test
    public void test3633() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3633");
        // The following exception was thrown during execution in test generation
        try {
            com.operations.Matrix.Matrix matrix2 = new com.operations.Matrix.Matrix(35, (int) (short) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.NegativeArraySizeException; message: -1");
        } catch (java.lang.NegativeArraySizeException e) {
            // Expected exception.
        }
    }

    @Test
    public void test3634() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3634");
        double[] doubleArray2 = new double[] { 10, 'a' };
        double[] doubleArray5 = new double[] { 10, 'a' };
        double[][] doubleArray6 = new double[][] { doubleArray2, doubleArray5 };
        com.operations.Matrix.Matrix matrix7 = new com.operations.Matrix.Matrix(doubleArray6);
        com.operations.Matrix.Matrix matrix8 = new com.operations.Matrix.Matrix(doubleArray6);
        boolean boolean9 = com.operations.Matrix.MatrixUtils.isSquare(matrix8);
        double[] doubleArray12 = new double[] { 10, 'a' };
        double[] doubleArray15 = new double[] { 10, 'a' };
        double[][] doubleArray16 = new double[][] { doubleArray12, doubleArray15 };
        com.operations.Matrix.Matrix matrix17 = new com.operations.Matrix.Matrix(doubleArray16);
        int int18 = matrix17.getCols();
        int int19 = matrix17.getCols();
        matrix17.print();
        double[] doubleArray23 = new double[] { 10, 'a' };
        double[] doubleArray26 = new double[] { 10, 'a' };
        double[][] doubleArray27 = new double[][] { doubleArray23, doubleArray26 };
        com.operations.Matrix.Matrix matrix28 = new com.operations.Matrix.Matrix(doubleArray27);
        boolean boolean30 = com.operations.Matrix.MatrixUtils.compare(matrix17, matrix28, (double) (-1));
        com.operations.Matrix.Matrix matrix31 = com.operations.Matrix.MatrixOperations.subtract(matrix8, matrix28);
        com.operations.Matrix.Matrix matrix32 = com.operations.Matrix.MatrixDecompositions.choleskyDecomposition(matrix8);
        double[] doubleArray35 = new double[] { 10, 'a' };
        double[] doubleArray38 = new double[] { 10, 'a' };
        double[][] doubleArray39 = new double[][] { doubleArray35, doubleArray38 };
        com.operations.Matrix.Matrix matrix40 = new com.operations.Matrix.Matrix(doubleArray39);
        com.operations.Matrix.Matrix matrix41 = com.operations.Matrix.MatrixOperations.transpose(matrix40);
        com.operations.Matrix.Matrix matrix44 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0L, (double) (byte) 10);
        int int45 = matrix44.getRows();
        com.operations.Matrix.Matrix matrix51 = com.operations.Matrix.MatrixUtils.generateRandomMatrix(100, (int) (byte) 1, (int) '#', (int) '#', 1L);
        boolean boolean53 = com.operations.Matrix.MatrixUtils.compare(matrix44, matrix51, (double) 1.0f);
        com.operations.Matrix.Matrix matrix55 = com.operations.Matrix.MatrixOperations.scalarMultiply(matrix44, (double) 1L);
        matrix44.print();
        com.operations.Matrix.Matrix matrix57 = com.operations.Matrix.MatrixOperations.multiply(matrix41, matrix44);
        boolean boolean59 = com.operations.Matrix.MatrixUtils.compare(matrix8, matrix41, 137.15495886388925d);
        com.operations.Matrix.Matrix matrix62 = com.operations.Matrix.MatrixTransformations.scale2D(146.4308710620817d, 0.9998476951563913d);
        double[] doubleArray65 = new double[] { 10, 'a' };
        double[] doubleArray68 = new double[] { 10, 'a' };
        double[][] doubleArray69 = new double[][] { doubleArray65, doubleArray68 };
        com.operations.Matrix.Matrix matrix70 = new com.operations.Matrix.Matrix(doubleArray69);
        com.operations.Matrix.Matrix matrix71 = new com.operations.Matrix.Matrix(doubleArray69);
        boolean boolean72 = com.operations.Matrix.MatrixUtils.isSquare(matrix71);
        com.operations.Matrix.Matrix[] matrixArray73 = com.operations.Matrix.MatrixDecompositions.luDecomposition(matrix71);
        com.operations.Matrix.Matrix matrix74 = com.operations.Matrix.MatrixOperations.multiply(matrix62, matrix71);
        boolean boolean76 = com.operations.Matrix.MatrixUtils.compare(matrix8, matrix62, 391.8840992892044d);
        int int77 = matrix8.getCols();
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertArrayEquals(doubleArray2, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertArrayEquals(doubleArray5, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertArrayEquals(doubleArray12, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertArrayEquals(doubleArray15, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 2 + "'", int18 == 2);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 2 + "'", int19 == 2);
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertArrayEquals(doubleArray23, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertArrayEquals(doubleArray26, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(matrix31);
        org.junit.Assert.assertNotNull(matrix32);
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertArrayEquals(doubleArray35, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertArrayEquals(doubleArray38, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertNotNull(matrix41);
        org.junit.Assert.assertNotNull(matrix44);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 2 + "'", int45 == 2);
        org.junit.Assert.assertNotNull(matrix51);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(matrix55);
        org.junit.Assert.assertNotNull(matrix57);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + true + "'", boolean59 == true);
        org.junit.Assert.assertNotNull(matrix62);
        org.junit.Assert.assertNotNull(doubleArray65);
        org.junit.Assert.assertArrayEquals(doubleArray65, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray68);
        org.junit.Assert.assertArrayEquals(doubleArray68, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray69);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + true + "'", boolean72 == true);
        org.junit.Assert.assertNotNull(matrixArray73);
        org.junit.Assert.assertNotNull(matrix74);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + true + "'", boolean76 == true);
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + 2 + "'", int77 == 2);
    }

    @Test
    public void test3635() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3635");
        com.operations.Matrix.Matrix matrix2 = com.operations.Matrix.MatrixTransformations.project2D((double) 100L, 1.4142135623730951d);
        org.junit.Assert.assertNotNull(matrix2);
    }

    @Test
    public void test3636() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3636");
        com.operations.Matrix.Matrix matrix2 = com.operations.Matrix.MatrixTransformations.scale2D(350.0d, 0.984807753012208d);
        org.junit.Assert.assertNotNull(matrix2);
    }

    @Test
    public void test3637() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3637");
        com.operations.Matrix.Matrix matrix2 = new com.operations.Matrix.Matrix((int) ' ', (int) (short) 0);
        com.operations.Matrix.Matrix matrix4 = com.operations.Matrix.MatrixTransformations.rotate2D(136.9141301851733d);
        // The following exception was thrown during execution in test generation
        try {
            com.operations.Matrix.Matrix matrix5 = com.operations.Matrix.MatrixOperations.multiply(matrix2, matrix4);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Matrix A's columns must match Matrix B's rows for multiplication.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(matrix4);
    }

    @Test
    public void test3638() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3638");
        com.operations.Matrix.Matrix matrix2 = com.operations.Matrix.MatrixTransformations.scale2D(21.023651153076518d, 21.023651153076518d);
        int int3 = matrix2.getRows();
        org.junit.Assert.assertNotNull(matrix2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 2 + "'", int3 == 2);
    }

    @Test
    public void test3639() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3639");
        com.operations.Matrix.Matrix matrix2 = com.operations.Matrix.MatrixTransformations.project2D((double) 100.0f, (double) (short) -1);
        com.operations.Matrix.Matrix matrix4 = com.operations.Matrix.MatrixOperations.scalarMultiply(matrix2, (double) 0.0f);
        com.operations.Matrix.Matrix matrix7 = com.operations.Matrix.MatrixTransformations.scale2D((double) ' ', (double) 0L);
        double double8 = com.operations.Matrix.MatrixUtils.frobeniusNorm(matrix7);
        com.operations.Matrix.Matrix matrix10 = com.operations.Matrix.MatrixOperations.scalarMultiply(matrix7, (double) 10L);
        com.operations.Matrix.Matrix matrix11 = com.operations.Matrix.MatrixOperations.multiply(matrix2, matrix7);
        com.operations.Matrix.Matrix matrix12 = com.operations.Matrix.MatrixOperations.transpose(matrix2);
        org.junit.Assert.assertNotNull(matrix2);
        org.junit.Assert.assertNotNull(matrix4);
        org.junit.Assert.assertNotNull(matrix7);
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 32.0d + "'", double8 == 32.0d);
        org.junit.Assert.assertNotNull(matrix10);
        org.junit.Assert.assertNotNull(matrix11);
        org.junit.Assert.assertNotNull(matrix12);
    }

    @Test
    public void test3640() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3640");
        com.operations.Matrix.Matrix matrix2 = com.operations.Matrix.MatrixTransformations.project2D(0.0d, (double) (-1L));
        com.operations.Matrix.Matrix matrix3 = com.operations.Matrix.MatrixOperations.transpose(matrix2);
        boolean boolean4 = com.operations.Matrix.MatrixUtils.isSymmetric(matrix3);
        org.junit.Assert.assertNotNull(matrix2);
        org.junit.Assert.assertNotNull(matrix3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
    }

    @Test
    public void test3641() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3641");
        double[] doubleArray2 = new double[] { 10, 'a' };
        double[] doubleArray5 = new double[] { 10, 'a' };
        double[][] doubleArray6 = new double[][] { doubleArray2, doubleArray5 };
        com.operations.Matrix.Matrix matrix7 = new com.operations.Matrix.Matrix(doubleArray6);
        com.operations.Matrix.Matrix matrix8 = new com.operations.Matrix.Matrix(doubleArray6);
        com.operations.Matrix.Matrix matrix9 = new com.operations.Matrix.Matrix(doubleArray6);
        boolean boolean10 = com.operations.Matrix.MatrixUtils.isSymmetric(matrix9);
        boolean boolean11 = com.operations.Matrix.MatrixUtils.isSquare(matrix9);
        com.operations.Matrix.Matrix matrix12 = com.operations.Matrix.MatrixDecompositions.choleskyDecomposition(matrix9);
        matrix9.print();
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertArrayEquals(doubleArray2, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertArrayEquals(doubleArray5, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNotNull(matrix12);
    }

    @Test
    public void test3642() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3642");
        com.operations.Matrix.Matrix matrix2 = com.operations.Matrix.MatrixTransformations.scale2D(24.03204160570106d, 1.969615506024416d);
        org.junit.Assert.assertNotNull(matrix2);
    }

    @Test
    public void test3643() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3643");
        com.operations.Matrix.Matrix matrix1 = com.operations.Matrix.MatrixTransformations.rotate2D((double) 1.0f);
        com.operations.Matrix.Matrix matrix4 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0L, (double) (byte) 10);
        int int5 = matrix4.getRows();
        com.operations.Matrix.Matrix matrix7 = com.operations.Matrix.MatrixOperations.scalarMultiply(matrix4, (double) 2);
        double double8 = com.operations.Matrix.MatrixUtils.frobeniusNorm(matrix4);
        com.operations.Matrix.Matrix matrix11 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0L, (double) (byte) 10);
        int int12 = matrix11.getRows();
        com.operations.Matrix.Matrix matrix14 = com.operations.Matrix.MatrixOperations.scalarMultiply(matrix11, (double) 2);
        com.operations.Matrix.Matrix matrix15 = com.operations.Matrix.MatrixOperations.subtract(matrix4, matrix14);
        com.operations.Matrix.Matrix matrix16 = com.operations.Matrix.MatrixOperations.add(matrix1, matrix14);
        com.operations.Matrix.Matrix[] matrixArray17 = com.operations.Matrix.MatrixDecompositions.luDecomposition(matrix14);
        boolean boolean18 = com.operations.Matrix.MatrixUtils.isSquare(matrix14);
        com.operations.Matrix.Matrix matrix19 = com.operations.Matrix.MatrixOperations.transpose(matrix14);
        com.operations.Matrix.Matrix matrix21 = com.operations.Matrix.MatrixOperations.scalarMultiply(matrix14, (double) ' ');
        int int22 = matrix14.getRows();
        org.junit.Assert.assertNotNull(matrix1);
        org.junit.Assert.assertNotNull(matrix4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 2 + "'", int5 == 2);
        org.junit.Assert.assertNotNull(matrix7);
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 10.0d + "'", double8 == 10.0d);
        org.junit.Assert.assertNotNull(matrix11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 2 + "'", int12 == 2);
        org.junit.Assert.assertNotNull(matrix14);
        org.junit.Assert.assertNotNull(matrix15);
        org.junit.Assert.assertNotNull(matrix16);
        org.junit.Assert.assertNotNull(matrixArray17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(matrix19);
        org.junit.Assert.assertNotNull(matrix21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 2 + "'", int22 == 2);
    }

    @Test
    public void test3644() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3644");
        com.operations.Matrix.Matrix matrix5 = com.operations.Matrix.MatrixUtils.generateRandomMatrix((int) ' ', (int) '#', (int) (byte) 10, (int) (short) 0, (long) (short) 1);
        boolean boolean6 = com.operations.Matrix.MatrixUtils.isSymmetric(matrix5);
        com.operations.Matrix.Matrix matrix8 = com.operations.Matrix.MatrixOperations.scalarMultiply(matrix5, 100.00499987500625d);
        com.operations.Matrix.Matrix matrix9 = com.operations.Matrix.MatrixOperations.transpose(matrix8);
        // The following exception was thrown during execution in test generation
        try {
            double double12 = matrix9.getValue((int) (byte) -1, (int) '#');
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(matrix5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(matrix8);
        org.junit.Assert.assertNotNull(matrix9);
    }

    @Test
    public void test3645() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3645");
        double[] doubleArray2 = new double[] { 10, 'a' };
        double[] doubleArray5 = new double[] { 10, 'a' };
        double[][] doubleArray6 = new double[][] { doubleArray2, doubleArray5 };
        com.operations.Matrix.Matrix matrix7 = new com.operations.Matrix.Matrix(doubleArray6);
        int int8 = matrix7.getCols();
        int int9 = matrix7.getCols();
        matrix7.print();
        boolean boolean11 = com.operations.Matrix.MatrixUtils.isSymmetric(matrix7);
        com.operations.Matrix.Matrix matrix13 = com.operations.Matrix.MatrixTransformations.rotate2D((double) 1.0f);
        int int14 = matrix13.getRows();
        com.operations.Matrix.Matrix matrix15 = com.operations.Matrix.MatrixOperations.add(matrix7, matrix13);
        // The following exception was thrown during execution in test generation
        try {
            matrix7.setValue(100, 100, 100.00000152293244d);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: Index 100 out of bounds for length 2");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertArrayEquals(doubleArray2, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertArrayEquals(doubleArray5, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 2 + "'", int8 == 2);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 2 + "'", int9 == 2);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(matrix13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 2 + "'", int14 == 2);
        org.junit.Assert.assertNotNull(matrix15);
    }

    @Test
    public void test3646() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3646");
        com.operations.Matrix.Matrix matrix5 = com.operations.Matrix.MatrixUtils.generateRandomMatrix((int) '4', (int) (byte) 100, 52, 0, (long) (byte) 10);
        org.junit.Assert.assertNotNull(matrix5);
    }

    @Test
    public void test3647() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3647");
        com.operations.Matrix.Matrix matrix2 = com.operations.Matrix.MatrixTransformations.scale2D((double) (short) 100, (double) (-1.0f));
        com.operations.Matrix.Matrix matrix3 = null;
        // The following exception was thrown during execution in test generation
        try {
            com.operations.Matrix.Matrix matrix4 = com.operations.Matrix.MatrixOperations.add(matrix2, matrix3);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot invoke \"com.operations.Matrix.Matrix.getRows()\" because \"b\" is null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(matrix2);
    }

    @Test
    public void test3648() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3648");
        double[] doubleArray2 = new double[] { 10, 'a' };
        double[] doubleArray5 = new double[] { 10, 'a' };
        double[][] doubleArray6 = new double[][] { doubleArray2, doubleArray5 };
        com.operations.Matrix.Matrix matrix7 = new com.operations.Matrix.Matrix(doubleArray6);
        int int8 = matrix7.getCols();
        int int9 = matrix7.getCols();
        int int10 = matrix7.getCols();
        com.operations.Matrix.Matrix matrix16 = com.operations.Matrix.MatrixUtils.generateRandomMatrix(100, (int) (byte) 1, (int) '#', (int) '#', 1L);
        double double19 = matrix16.getValue((int) '4', 0);
        double double20 = com.operations.Matrix.MatrixUtils.frobeniusNorm(matrix16);
        boolean boolean21 = com.operations.Matrix.MatrixUtils.isSquare(matrix16);
        boolean boolean23 = com.operations.Matrix.MatrixUtils.compare(matrix7, matrix16, (double) 100L);
        double[][] doubleArray24 = matrix7.getData();
        com.operations.Matrix.Matrix matrix25 = com.operations.Matrix.MatrixDecompositions.choleskyDecomposition(matrix7);
        com.operations.Matrix.Matrix matrix27 = com.operations.Matrix.MatrixOperations.scalarMultiply(matrix25, 1363.6076983299943d);
        com.operations.Matrix.Matrix matrix32 = com.operations.Matrix.MatrixUtils.generateRandomMatrix(32, (int) (byte) 10, (int) (short) 10, 1);
        boolean boolean34 = com.operations.Matrix.MatrixUtils.compare(matrix27, matrix32, 21.023651153076518d);
        com.operations.Matrix.Matrix matrix36 = com.operations.Matrix.MatrixOperations.scalarMultiply(matrix27, (double) 100.0f);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertArrayEquals(doubleArray2, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertArrayEquals(doubleArray5, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 2 + "'", int8 == 2);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 2 + "'", int9 == 2);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 2 + "'", int10 == 2);
        org.junit.Assert.assertNotNull(matrix16);
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 35.0d + "'", double19 == 35.0d);
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 350.0d + "'", double20 == 350.0d);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertNotNull(matrix25);
        org.junit.Assert.assertNotNull(matrix27);
        org.junit.Assert.assertNotNull(matrix32);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(matrix36);
    }

    @Test
    public void test3649() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3649");
        com.operations.Matrix.Matrix matrix1 = com.operations.Matrix.MatrixTransformations.rotate2D(10.344080432788601d);
        com.operations.Matrix.Matrix matrix2 = com.operations.Matrix.MatrixOperations.transpose(matrix1);
        int int3 = matrix2.getRows();
        int int4 = matrix2.getCols();
        org.junit.Assert.assertNotNull(matrix1);
        org.junit.Assert.assertNotNull(matrix2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 2 + "'", int3 == 2);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 2 + "'", int4 == 2);
    }

    @Test
    public void test3650() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3650");
        double[] doubleArray2 = new double[] { 10, 'a' };
        double[] doubleArray5 = new double[] { 10, 'a' };
        double[][] doubleArray6 = new double[][] { doubleArray2, doubleArray5 };
        com.operations.Matrix.Matrix matrix7 = new com.operations.Matrix.Matrix(doubleArray6);
        com.operations.Matrix.Matrix matrix8 = new com.operations.Matrix.Matrix(doubleArray6);
        com.operations.Matrix.Matrix matrix10 = com.operations.Matrix.MatrixTransformations.rotate2D((double) (short) 100);
        double[] doubleArray13 = new double[] { 137.90576492663388d, (byte) -1 };
        double[] doubleArray14 = com.operations.Matrix.MatrixSolver.solveGaussian(matrix10, doubleArray13);
        com.operations.Matrix.Matrix matrix15 = com.operations.Matrix.MatrixOperations.add(matrix8, matrix10);
        com.operations.Matrix.Matrix matrix16 = com.operations.Matrix.MatrixOperations.transpose(matrix10);
        int int17 = matrix10.getCols();
        com.operations.Matrix.Matrix matrix20 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0L, (double) (byte) 10);
        double[] doubleArray23 = new double[] { 10, 'a' };
        double[] doubleArray26 = new double[] { 10, 'a' };
        double[][] doubleArray27 = new double[][] { doubleArray23, doubleArray26 };
        com.operations.Matrix.Matrix matrix28 = new com.operations.Matrix.Matrix(doubleArray27);
        int int29 = matrix28.getCols();
        int int30 = matrix28.getCols();
        int int31 = matrix28.getCols();
        com.operations.Matrix.Matrix[] matrixArray32 = com.operations.Matrix.MatrixDecompositions.luDecomposition(matrix28);
        com.operations.Matrix.Matrix matrix33 = com.operations.Matrix.MatrixOperations.multiply(matrix20, matrix28);
        com.operations.Matrix.Matrix matrix35 = com.operations.Matrix.MatrixTransformations.rotate2D((double) (short) 100);
        boolean boolean37 = com.operations.Matrix.MatrixUtils.compare(matrix28, matrix35, (double) (byte) 0);
        boolean boolean38 = com.operations.Matrix.MatrixUtils.isSymmetric(matrix35);
        boolean boolean39 = com.operations.Matrix.MatrixUtils.isSquare(matrix35);
        com.operations.Matrix.Matrix matrix41 = com.operations.Matrix.MatrixTransformations.rotate2D((double) (short) 100);
        boolean boolean43 = com.operations.Matrix.MatrixUtils.compare(matrix35, matrix41, (double) (byte) 100);
        matrix41.print();
        com.operations.Matrix.Matrix matrix45 = com.operations.Matrix.MatrixOperations.add(matrix10, matrix41);
        com.operations.Matrix.Matrix matrix48 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0L, (double) (byte) 10);
        int int49 = matrix48.getRows();
        com.operations.Matrix.Matrix matrix51 = com.operations.Matrix.MatrixOperations.scalarMultiply(matrix48, (double) 2);
        matrix48.print();
        com.operations.Matrix.Matrix matrix54 = com.operations.Matrix.MatrixOperations.scalarMultiply(matrix48, 100.00499987500625d);
        com.operations.Matrix.Matrix matrix57 = new com.operations.Matrix.Matrix(10, (int) (byte) 1);
        boolean boolean59 = com.operations.Matrix.MatrixUtils.compare(matrix54, matrix57, (double) 100L);
        com.operations.Matrix.Matrix matrix60 = com.operations.Matrix.MatrixOperations.add(matrix41, matrix54);
        // The following exception was thrown during execution in test generation
        try {
            matrix60.setValue((int) '4', (int) (byte) -1, 18.14229652832025d);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: Index 52 out of bounds for length 2");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertArrayEquals(doubleArray2, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertArrayEquals(doubleArray5, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertNotNull(matrix10);
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertArrayEquals(doubleArray13, new double[] { 137.90576492663388d, (-1.0d) }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertArrayEquals(doubleArray14, new double[] { (-24.931892522286255d), (-135.63701830716116d) }, 1.0E-15);
        org.junit.Assert.assertNotNull(matrix15);
        org.junit.Assert.assertNotNull(matrix16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 2 + "'", int17 == 2);
        org.junit.Assert.assertNotNull(matrix20);
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertArrayEquals(doubleArray23, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertArrayEquals(doubleArray26, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 2 + "'", int29 == 2);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 2 + "'", int30 == 2);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 2 + "'", int31 == 2);
        org.junit.Assert.assertNotNull(matrixArray32);
        org.junit.Assert.assertNotNull(matrix33);
        org.junit.Assert.assertNotNull(matrix35);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertNotNull(matrix41);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertNotNull(matrix45);
        org.junit.Assert.assertNotNull(matrix48);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 2 + "'", int49 == 2);
        org.junit.Assert.assertNotNull(matrix51);
        org.junit.Assert.assertNotNull(matrix54);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNotNull(matrix60);
    }

    @Test
    public void test3651() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3651");
        double[] doubleArray2 = new double[] { 10, 'a' };
        double[] doubleArray5 = new double[] { 10, 'a' };
        double[][] doubleArray6 = new double[][] { doubleArray2, doubleArray5 };
        com.operations.Matrix.Matrix matrix7 = new com.operations.Matrix.Matrix(doubleArray6);
        int int8 = matrix7.getCols();
        boolean boolean9 = com.operations.Matrix.MatrixUtils.isSquare(matrix7);
        com.operations.Matrix.Matrix matrix10 = com.operations.Matrix.MatrixOperations.transpose(matrix7);
        int int11 = matrix10.getRows();
        com.operations.Matrix.Matrix matrix14 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0L, (double) (byte) 10);
        double[] doubleArray17 = new double[] { 10, 'a' };
        double[] doubleArray20 = new double[] { 10, 'a' };
        double[][] doubleArray21 = new double[][] { doubleArray17, doubleArray20 };
        com.operations.Matrix.Matrix matrix22 = new com.operations.Matrix.Matrix(doubleArray21);
        int int23 = matrix22.getCols();
        int int24 = matrix22.getCols();
        int int25 = matrix22.getCols();
        com.operations.Matrix.Matrix[] matrixArray26 = com.operations.Matrix.MatrixDecompositions.luDecomposition(matrix22);
        com.operations.Matrix.Matrix matrix27 = com.operations.Matrix.MatrixOperations.multiply(matrix14, matrix22);
        com.operations.Matrix.Matrix matrix29 = com.operations.Matrix.MatrixTransformations.rotate2D((double) (short) 100);
        boolean boolean31 = com.operations.Matrix.MatrixUtils.compare(matrix22, matrix29, (double) (byte) 0);
        com.operations.Matrix.Matrix matrix32 = com.operations.Matrix.MatrixOperations.multiply(matrix10, matrix22);
        int int33 = matrix10.getCols();
        com.operations.Matrix.Matrix matrix35 = com.operations.Matrix.MatrixTransformations.rotate2D((double) (short) 0);
        boolean boolean37 = com.operations.Matrix.MatrixUtils.compare(matrix10, matrix35, (double) (short) 100);
        com.operations.Matrix.Matrix matrix39 = com.operations.Matrix.MatrixTransformations.rotate2D(10.344080432788601d);
        boolean boolean40 = com.operations.Matrix.MatrixUtils.isSquare(matrix39);
        boolean boolean42 = com.operations.Matrix.MatrixUtils.compare(matrix10, matrix39, 18.985133644271098d);
        double[][] doubleArray43 = matrix10.getData();
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertArrayEquals(doubleArray2, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertArrayEquals(doubleArray5, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 2 + "'", int8 == 2);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertNotNull(matrix10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 2 + "'", int11 == 2);
        org.junit.Assert.assertNotNull(matrix14);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertArrayEquals(doubleArray17, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertArrayEquals(doubleArray20, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 2 + "'", int23 == 2);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 2 + "'", int24 == 2);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 2 + "'", int25 == 2);
        org.junit.Assert.assertNotNull(matrixArray26);
        org.junit.Assert.assertNotNull(matrix27);
        org.junit.Assert.assertNotNull(matrix29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(matrix32);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 2 + "'", int33 == 2);
        org.junit.Assert.assertNotNull(matrix35);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertNotNull(matrix39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(doubleArray43);
    }

    @Test
    public void test3652() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3652");
        com.operations.Matrix.Matrix matrix2 = com.operations.Matrix.MatrixTransformations.scale2D(10.270003094125075d, 36.45545226711637d);
        org.junit.Assert.assertNotNull(matrix2);
    }

    @Test
    public void test3653() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3653");
        com.operations.Matrix.Matrix matrix2 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0L, (double) (byte) 10);
        int int3 = matrix2.getRows();
        com.operations.Matrix.Matrix matrix6 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0L, (double) (byte) 10);
        int int7 = matrix6.getRows();
        com.operations.Matrix.Matrix matrix9 = com.operations.Matrix.MatrixOperations.scalarMultiply(matrix6, (double) 2);
        com.operations.Matrix.Matrix matrix10 = com.operations.Matrix.MatrixOperations.subtract(matrix2, matrix6);
        com.operations.Matrix.Matrix matrix13 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0L, (double) (byte) 10);
        int int14 = matrix13.getRows();
        com.operations.Matrix.Matrix matrix20 = com.operations.Matrix.MatrixUtils.generateRandomMatrix(100, (int) (byte) 1, (int) '#', (int) '#', 1L);
        boolean boolean22 = com.operations.Matrix.MatrixUtils.compare(matrix13, matrix20, (double) 1.0f);
        com.operations.Matrix.Matrix matrix24 = com.operations.Matrix.MatrixOperations.scalarMultiply(matrix13, (double) 1L);
        boolean boolean26 = com.operations.Matrix.MatrixUtils.compare(matrix10, matrix24, 0.0d);
        com.operations.Matrix.Matrix matrix28 = com.operations.Matrix.MatrixOperations.scalarMultiply(matrix10, 10.0d);
        com.operations.Matrix.Matrix matrix31 = com.operations.Matrix.MatrixTransformations.scale2D((double) (-1L), (double) '4');
        com.operations.Matrix.Matrix matrix32 = com.operations.Matrix.MatrixOperations.transpose(matrix31);
        double[] doubleArray35 = new double[] { 10, 'a' };
        double[] doubleArray38 = new double[] { 10, 'a' };
        double[][] doubleArray39 = new double[][] { doubleArray35, doubleArray38 };
        com.operations.Matrix.Matrix matrix40 = new com.operations.Matrix.Matrix(doubleArray39);
        com.operations.Matrix.Matrix matrix41 = new com.operations.Matrix.Matrix(doubleArray39);
        com.operations.Matrix.Matrix matrix43 = com.operations.Matrix.MatrixTransformations.rotate2D((double) (short) 100);
        double[] doubleArray46 = new double[] { 137.90576492663388d, (byte) -1 };
        double[] doubleArray47 = com.operations.Matrix.MatrixSolver.solveGaussian(matrix43, doubleArray46);
        com.operations.Matrix.Matrix matrix48 = com.operations.Matrix.MatrixOperations.add(matrix41, matrix43);
        com.operations.Matrix.Matrix matrix49 = com.operations.Matrix.MatrixOperations.transpose(matrix43);
        com.operations.Matrix.Matrix matrix50 = com.operations.Matrix.MatrixOperations.multiply(matrix32, matrix43);
        boolean boolean52 = com.operations.Matrix.MatrixUtils.compare(matrix28, matrix43, (double) 1L);
        int int53 = matrix43.getCols();
        org.junit.Assert.assertNotNull(matrix2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 2 + "'", int3 == 2);
        org.junit.Assert.assertNotNull(matrix6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 2 + "'", int7 == 2);
        org.junit.Assert.assertNotNull(matrix9);
        org.junit.Assert.assertNotNull(matrix10);
        org.junit.Assert.assertNotNull(matrix13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 2 + "'", int14 == 2);
        org.junit.Assert.assertNotNull(matrix20);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(matrix24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(matrix28);
        org.junit.Assert.assertNotNull(matrix31);
        org.junit.Assert.assertNotNull(matrix32);
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertArrayEquals(doubleArray35, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertArrayEquals(doubleArray38, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertNotNull(matrix43);
        org.junit.Assert.assertNotNull(doubleArray46);
        org.junit.Assert.assertArrayEquals(doubleArray46, new double[] { 137.90576492663388d, (-1.0d) }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertArrayEquals(doubleArray47, new double[] { (-24.931892522286255d), (-135.63701830716116d) }, 1.0E-15);
        org.junit.Assert.assertNotNull(matrix48);
        org.junit.Assert.assertNotNull(matrix49);
        org.junit.Assert.assertNotNull(matrix50);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + true + "'", boolean52 == true);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 2 + "'", int53 == 2);
    }

    @Test
    public void test3654() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3654");
        com.operations.Matrix.Matrix matrix0 = null;
        com.operations.Matrix.Matrix matrix3 = new com.operations.Matrix.Matrix((int) (byte) 1, (int) (byte) 10);
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean5 = com.operations.Matrix.MatrixUtils.compare(matrix0, matrix3, (double) (-1L));
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test3655() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3655");
        com.operations.Matrix.Matrix matrix2 = com.operations.Matrix.MatrixTransformations.project2D(693.7418269995209d, 30.0d);
        com.operations.Matrix.Matrix matrix3 = com.operations.Matrix.MatrixOperations.transpose(matrix2);
        org.junit.Assert.assertNotNull(matrix2);
        org.junit.Assert.assertNotNull(matrix3);
    }

    @Test
    public void test3656() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3656");
        // The following exception was thrown during execution in test generation
        try {
            com.operations.Matrix.Matrix matrix5 = com.operations.Matrix.MatrixUtils.generateRandomMatrix((int) 'a', (int) (short) -1, 2, 32, (long) (byte) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.NegativeArraySizeException; message: -1");
        } catch (java.lang.NegativeArraySizeException e) {
            // Expected exception.
        }
    }

    @Test
    public void test3657() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3657");
        com.operations.Matrix.Matrix matrix2 = new com.operations.Matrix.Matrix((int) '4', (int) ' ');
        double[][] doubleArray3 = matrix2.getData();
        double[] doubleArray6 = new double[] { 10, 'a' };
        double[] doubleArray9 = new double[] { 10, 'a' };
        double[][] doubleArray10 = new double[][] { doubleArray6, doubleArray9 };
        com.operations.Matrix.Matrix matrix11 = new com.operations.Matrix.Matrix(doubleArray10);
        int int12 = matrix11.getCols();
        int int13 = matrix11.getCols();
        matrix11.print();
        double[] doubleArray17 = new double[] { 10, 'a' };
        double[] doubleArray20 = new double[] { 10, 'a' };
        double[][] doubleArray21 = new double[][] { doubleArray17, doubleArray20 };
        com.operations.Matrix.Matrix matrix22 = new com.operations.Matrix.Matrix(doubleArray21);
        boolean boolean24 = com.operations.Matrix.MatrixUtils.compare(matrix11, matrix22, (double) (-1));
        com.operations.Matrix.Matrix matrix25 = com.operations.Matrix.MatrixDecompositions.choleskyDecomposition(matrix22);
        com.operations.Matrix.Matrix matrix27 = com.operations.Matrix.MatrixOperations.scalarMultiply(matrix25, 32.0d);
        int int28 = matrix27.getRows();
        com.operations.Matrix.Matrix matrix30 = com.operations.Matrix.MatrixTransformations.rotate2D(100.0d);
        int int31 = matrix30.getCols();
        matrix30.print();
        com.operations.Matrix.Matrix matrix34 = com.operations.Matrix.MatrixOperations.scalarMultiply(matrix30, (double) (byte) 1);
        boolean boolean35 = com.operations.Matrix.MatrixUtils.isSymmetric(matrix30);
        com.operations.Matrix.Matrix matrix37 = com.operations.Matrix.MatrixTransformations.rotate2D((-1.0d));
        com.operations.Matrix.Matrix matrix39 = com.operations.Matrix.MatrixTransformations.rotate2D((double) (-1L));
        com.operations.Matrix.Matrix matrix41 = com.operations.Matrix.MatrixTransformations.rotate2D((double) (short) 100);
        double[] doubleArray44 = new double[] { 137.90576492663388d, (byte) -1 };
        double[] doubleArray45 = com.operations.Matrix.MatrixSolver.solveGaussian(matrix41, doubleArray44);
        double[] doubleArray46 = com.operations.Matrix.MatrixSolver.solveGaussian(matrix39, doubleArray44);
        double[] doubleArray47 = com.operations.Matrix.MatrixSolver.solveGaussian(matrix37, doubleArray44);
        double[] doubleArray48 = com.operations.Matrix.MatrixSolver.solveGaussian(matrix30, doubleArray47);
        double[] doubleArray49 = com.operations.Matrix.MatrixSolver.solveGaussian(matrix27, doubleArray48);
        // The following exception was thrown during execution in test generation
        try {
            double[] doubleArray50 = com.operations.Matrix.MatrixSolver.solveGaussian(matrix2, doubleArray49);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Matrix must be square to solve equations.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertArrayEquals(doubleArray6, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertArrayEquals(doubleArray9, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 2 + "'", int12 == 2);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 2 + "'", int13 == 2);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertArrayEquals(doubleArray17, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertArrayEquals(doubleArray20, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(matrix25);
        org.junit.Assert.assertNotNull(matrix27);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 2 + "'", int28 == 2);
        org.junit.Assert.assertNotNull(matrix30);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 2 + "'", int31 == 2);
        org.junit.Assert.assertNotNull(matrix34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(matrix37);
        org.junit.Assert.assertNotNull(matrix39);
        org.junit.Assert.assertNotNull(matrix41);
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertArrayEquals(doubleArray44, new double[] { 137.90576492663388d, (-1.0d) }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertArrayEquals(doubleArray45, new double[] { (-24.931892522286255d), (-135.63701830716116d) }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray46);
        org.junit.Assert.assertArrayEquals(doubleArray46, new double[] { 137.90221361711127d, 1.4069397643877004d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertArrayEquals(doubleArray47, new double[] { 137.90221361711127d, 1.4069397643877004d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertArrayEquals(doubleArray48, new double[] { (-22.56090290285694d), (-136.05148165384995d) }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertArrayEquals(doubleArray49, new double[] { (-0.22294949763416388d), (-0.38023335020292337d) }, 1.0E-15);
    }

    @Test
    public void test3658() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3658");
        com.operations.Matrix.Matrix matrix2 = com.operations.Matrix.MatrixTransformations.scale2D(30.0d, (double) (-1));
        int int3 = matrix2.getCols();
        matrix2.print();
        org.junit.Assert.assertNotNull(matrix2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 2 + "'", int3 == 2);
    }

    @Test
    public void test3659() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3659");
        com.operations.Matrix.Matrix matrix0 = null;
        double[] doubleArray3 = new double[] { 10, 'a' };
        double[] doubleArray6 = new double[] { 10, 'a' };
        double[][] doubleArray7 = new double[][] { doubleArray3, doubleArray6 };
        com.operations.Matrix.Matrix matrix8 = new com.operations.Matrix.Matrix(doubleArray7);
        com.operations.Matrix.Matrix matrix9 = new com.operations.Matrix.Matrix(doubleArray7);
        boolean boolean10 = com.operations.Matrix.MatrixUtils.isSquare(matrix9);
        double[] doubleArray13 = new double[] { 10, 'a' };
        double[] doubleArray16 = new double[] { 10, 'a' };
        double[][] doubleArray17 = new double[][] { doubleArray13, doubleArray16 };
        com.operations.Matrix.Matrix matrix18 = new com.operations.Matrix.Matrix(doubleArray17);
        int int19 = matrix18.getCols();
        int int20 = matrix18.getCols();
        matrix18.print();
        double[] doubleArray24 = new double[] { 10, 'a' };
        double[] doubleArray27 = new double[] { 10, 'a' };
        double[][] doubleArray28 = new double[][] { doubleArray24, doubleArray27 };
        com.operations.Matrix.Matrix matrix29 = new com.operations.Matrix.Matrix(doubleArray28);
        boolean boolean31 = com.operations.Matrix.MatrixUtils.compare(matrix18, matrix29, (double) (-1));
        com.operations.Matrix.Matrix matrix32 = com.operations.Matrix.MatrixOperations.subtract(matrix9, matrix29);
        com.operations.Matrix.Matrix matrix34 = com.operations.Matrix.MatrixOperations.scalarMultiply(matrix9, (double) 0.0f);
        com.operations.Matrix.Matrix matrix35 = com.operations.Matrix.MatrixOperations.transpose(matrix9);
        double[][] doubleArray36 = matrix9.getData();
        double double37 = com.operations.Matrix.MatrixUtils.frobeniusNorm(matrix9);
        com.operations.Matrix.Matrix matrix40 = com.operations.Matrix.MatrixTransformations.project2D(0.0d, (double) 0);
        double[][] doubleArray41 = matrix40.getData();
        com.operations.Matrix.Matrix matrix42 = new com.operations.Matrix.Matrix(doubleArray41);
        com.operations.Matrix.Matrix[] matrixArray43 = com.operations.Matrix.MatrixDecompositions.luDecomposition(matrix42);
        boolean boolean45 = com.operations.Matrix.MatrixUtils.compare(matrix9, matrix42, (double) (byte) 10);
        // The following exception was thrown during execution in test generation
        try {
            com.operations.Matrix.Matrix matrix46 = com.operations.Matrix.MatrixOperations.subtract(matrix0, matrix42);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertArrayEquals(doubleArray3, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertArrayEquals(doubleArray6, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertArrayEquals(doubleArray13, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertArrayEquals(doubleArray16, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 2 + "'", int19 == 2);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 2 + "'", int20 == 2);
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertArrayEquals(doubleArray24, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertArrayEquals(doubleArray27, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(matrix32);
        org.junit.Assert.assertNotNull(matrix34);
        org.junit.Assert.assertNotNull(matrix35);
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertTrue("'" + double37 + "' != '" + 137.90576492663388d + "'", double37 == 137.90576492663388d);
        org.junit.Assert.assertNotNull(matrix40);
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertNotNull(matrixArray43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
    }

    @Test
    public void test3660() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3660");
        com.operations.Matrix.Matrix matrix1 = com.operations.Matrix.MatrixTransformations.rotate2D((double) (short) 100);
        double[] doubleArray4 = new double[] { 137.90576492663388d, (byte) -1 };
        double[] doubleArray5 = com.operations.Matrix.MatrixSolver.solveGaussian(matrix1, doubleArray4);
        com.operations.Matrix.Matrix matrix8 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0L, (double) (byte) 10);
        double[] doubleArray11 = new double[] { 10, 'a' };
        double[] doubleArray14 = new double[] { 10, 'a' };
        double[][] doubleArray15 = new double[][] { doubleArray11, doubleArray14 };
        com.operations.Matrix.Matrix matrix16 = new com.operations.Matrix.Matrix(doubleArray15);
        int int17 = matrix16.getCols();
        int int18 = matrix16.getCols();
        int int19 = matrix16.getCols();
        com.operations.Matrix.Matrix[] matrixArray20 = com.operations.Matrix.MatrixDecompositions.luDecomposition(matrix16);
        com.operations.Matrix.Matrix matrix21 = com.operations.Matrix.MatrixOperations.multiply(matrix8, matrix16);
        boolean boolean23 = com.operations.Matrix.MatrixUtils.compare(matrix1, matrix8, (double) (-1L));
        double[][] doubleArray24 = matrix1.getData();
        matrix1.print();
        com.operations.Matrix.Matrix matrix27 = com.operations.Matrix.MatrixOperations.scalarMultiply(matrix1, (double) (-1));
        double double28 = com.operations.Matrix.MatrixUtils.frobeniusNorm(matrix27);
        com.operations.Matrix.Matrix matrix29 = null;
        // The following exception was thrown during execution in test generation
        try {
            com.operations.Matrix.Matrix matrix30 = com.operations.Matrix.MatrixOperations.subtract(matrix27, matrix29);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(matrix1);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertArrayEquals(doubleArray4, new double[] { 137.90576492663388d, (-1.0d) }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertArrayEquals(doubleArray5, new double[] { (-24.931892522286255d), (-135.63701830716116d) }, 1.0E-15);
        org.junit.Assert.assertNotNull(matrix8);
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertArrayEquals(doubleArray11, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertArrayEquals(doubleArray14, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 2 + "'", int17 == 2);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 2 + "'", int18 == 2);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 2 + "'", int19 == 2);
        org.junit.Assert.assertNotNull(matrixArray20);
        org.junit.Assert.assertNotNull(matrix21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertNotNull(matrix27);
        org.junit.Assert.assertTrue("'" + double28 + "' != '" + 1.414213562373095d + "'", double28 == 1.414213562373095d);
    }

    @Test
    public void test3661() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3661");
        com.operations.Matrix.Matrix matrix4 = com.operations.Matrix.MatrixUtils.generateRandomMatrix(35, (int) ' ', 100, (-1));
        double[] doubleArray7 = new double[] { 10, 'a' };
        double[] doubleArray10 = new double[] { 10, 'a' };
        double[][] doubleArray11 = new double[][] { doubleArray7, doubleArray10 };
        com.operations.Matrix.Matrix matrix12 = new com.operations.Matrix.Matrix(doubleArray11);
        com.operations.Matrix.Matrix matrix13 = new com.operations.Matrix.Matrix(doubleArray11);
        com.operations.Matrix.Matrix[] matrixArray14 = com.operations.Matrix.MatrixDecompositions.luDecomposition(matrix13);
        com.operations.Matrix.Matrix matrix17 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0, (double) 100L);
        com.operations.Matrix.Matrix matrix18 = com.operations.Matrix.MatrixOperations.subtract(matrix13, matrix17);
        double[][] doubleArray19 = matrix18.getData();
        com.operations.Matrix.Matrix matrix20 = new com.operations.Matrix.Matrix(doubleArray19);
        com.operations.Matrix.Matrix matrix21 = new com.operations.Matrix.Matrix(doubleArray19);
        com.operations.Matrix.Matrix matrix22 = new com.operations.Matrix.Matrix(doubleArray19);
        com.operations.Matrix.Matrix matrix23 = new com.operations.Matrix.Matrix(doubleArray19);
        int int24 = matrix23.getRows();
        // The following exception was thrown during execution in test generation
        try {
            com.operations.Matrix.Matrix matrix25 = com.operations.Matrix.MatrixOperations.multiply(matrix4, matrix23);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Matrix A's columns must match Matrix B's rows for multiplication.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(matrix4);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertArrayEquals(doubleArray7, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertArrayEquals(doubleArray10, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertNotNull(matrixArray14);
        org.junit.Assert.assertNotNull(matrix17);
        org.junit.Assert.assertNotNull(matrix18);
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 2 + "'", int24 == 2);
    }

    @Test
    public void test3662() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3662");
        com.operations.Matrix.Matrix matrix2 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0L, (double) (byte) 10);
        int int3 = matrix2.getRows();
        com.operations.Matrix.Matrix matrix9 = com.operations.Matrix.MatrixUtils.generateRandomMatrix(100, (int) (byte) 1, (int) '#', (int) '#', 1L);
        boolean boolean11 = com.operations.Matrix.MatrixUtils.compare(matrix2, matrix9, (double) 1.0f);
        double[] doubleArray14 = new double[] { 10, 'a' };
        double[] doubleArray17 = new double[] { 10, 'a' };
        double[][] doubleArray18 = new double[][] { doubleArray14, doubleArray17 };
        com.operations.Matrix.Matrix matrix19 = new com.operations.Matrix.Matrix(doubleArray18);
        int int20 = matrix19.getCols();
        int int21 = matrix19.getCols();
        int int22 = matrix19.getCols();
        com.operations.Matrix.Matrix matrix28 = com.operations.Matrix.MatrixUtils.generateRandomMatrix(100, (int) (byte) 1, (int) '#', (int) '#', 1L);
        double double31 = matrix28.getValue((int) '4', 0);
        double double32 = com.operations.Matrix.MatrixUtils.frobeniusNorm(matrix28);
        boolean boolean33 = com.operations.Matrix.MatrixUtils.isSquare(matrix28);
        boolean boolean35 = com.operations.Matrix.MatrixUtils.compare(matrix19, matrix28, (double) 100L);
        com.operations.Matrix.Matrix matrix36 = com.operations.Matrix.MatrixDecompositions.choleskyDecomposition(matrix19);
        double[] doubleArray39 = new double[] { 10, 'a' };
        double[] doubleArray42 = new double[] { 10, 'a' };
        double[][] doubleArray43 = new double[][] { doubleArray39, doubleArray42 };
        com.operations.Matrix.Matrix matrix44 = new com.operations.Matrix.Matrix(doubleArray43);
        int int45 = matrix44.getCols();
        int int46 = matrix44.getCols();
        int int47 = matrix44.getCols();
        com.operations.Matrix.Matrix matrix49 = com.operations.Matrix.MatrixOperations.scalarMultiply(matrix44, (double) 0.0f);
        boolean boolean51 = com.operations.Matrix.MatrixUtils.compare(matrix36, matrix44, (double) '4');
        matrix44.print();
        boolean boolean54 = com.operations.Matrix.MatrixUtils.compare(matrix9, matrix44, 137.90576492663388d);
        double[][] doubleArray55 = matrix44.getData();
        com.operations.Matrix.Matrix matrix56 = new com.operations.Matrix.Matrix(doubleArray55);
        boolean boolean57 = com.operations.Matrix.MatrixUtils.isSymmetric(matrix56);
        double[][] doubleArray58 = matrix56.getData();
        int int59 = matrix56.getCols();
        int int60 = matrix56.getRows();
        org.junit.Assert.assertNotNull(matrix2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 2 + "'", int3 == 2);
        org.junit.Assert.assertNotNull(matrix9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertArrayEquals(doubleArray14, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertArrayEquals(doubleArray17, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 2 + "'", int20 == 2);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 2 + "'", int21 == 2);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 2 + "'", int22 == 2);
        org.junit.Assert.assertNotNull(matrix28);
        org.junit.Assert.assertTrue("'" + double31 + "' != '" + 35.0d + "'", double31 == 35.0d);
        org.junit.Assert.assertTrue("'" + double32 + "' != '" + 350.0d + "'", double32 == 350.0d);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(matrix36);
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertArrayEquals(doubleArray39, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertArrayEquals(doubleArray42, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 2 + "'", int45 == 2);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 2 + "'", int46 == 2);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 2 + "'", int47 == 2);
        org.junit.Assert.assertNotNull(matrix49);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNotNull(doubleArray58);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 2 + "'", int59 == 2);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 2 + "'", int60 == 2);
    }

    @Test
    public void test3663() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3663");
        com.operations.Matrix.Matrix matrix2 = com.operations.Matrix.MatrixTransformations.scale2D((double) 10, 21.023651153076518d);
        boolean boolean3 = com.operations.Matrix.MatrixUtils.isSquare(matrix2);
        org.junit.Assert.assertNotNull(matrix2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
    }

    @Test
    public void test3664() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3664");
        com.operations.Matrix.Matrix matrix2 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0L, (double) (byte) 10);
        double[] doubleArray5 = new double[] { 10, 'a' };
        double[] doubleArray8 = new double[] { 10, 'a' };
        double[][] doubleArray9 = new double[][] { doubleArray5, doubleArray8 };
        com.operations.Matrix.Matrix matrix10 = new com.operations.Matrix.Matrix(doubleArray9);
        int int11 = matrix10.getCols();
        int int12 = matrix10.getCols();
        int int13 = matrix10.getCols();
        com.operations.Matrix.Matrix[] matrixArray14 = com.operations.Matrix.MatrixDecompositions.luDecomposition(matrix10);
        com.operations.Matrix.Matrix matrix15 = com.operations.Matrix.MatrixOperations.multiply(matrix2, matrix10);
        com.operations.Matrix.Matrix matrix17 = com.operations.Matrix.MatrixTransformations.rotate2D((double) (short) 100);
        boolean boolean19 = com.operations.Matrix.MatrixUtils.compare(matrix10, matrix17, (double) (byte) 0);
        boolean boolean20 = com.operations.Matrix.MatrixUtils.isSymmetric(matrix17);
        boolean boolean21 = com.operations.Matrix.MatrixUtils.isSquare(matrix17);
        com.operations.Matrix.Matrix matrix23 = com.operations.Matrix.MatrixOperations.scalarMultiply(matrix17, (double) 2);
        com.operations.Matrix.Matrix matrix24 = com.operations.Matrix.MatrixOperations.transpose(matrix23);
        int int25 = matrix24.getCols();
        int int26 = matrix24.getCols();
        org.junit.Assert.assertNotNull(matrix2);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertArrayEquals(doubleArray5, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertArrayEquals(doubleArray8, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 2 + "'", int11 == 2);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 2 + "'", int12 == 2);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 2 + "'", int13 == 2);
        org.junit.Assert.assertNotNull(matrixArray14);
        org.junit.Assert.assertNotNull(matrix15);
        org.junit.Assert.assertNotNull(matrix17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertNotNull(matrix23);
        org.junit.Assert.assertNotNull(matrix24);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 2 + "'", int25 == 2);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 2 + "'", int26 == 2);
    }

    @Test
    public void test3665() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3665");
        com.operations.Matrix.Matrix matrix2 = com.operations.Matrix.MatrixTransformations.project2D(1.414213562373095d, 52.009614495783374d);
        com.operations.Matrix.Matrix matrix3 = com.operations.Matrix.MatrixOperations.transpose(matrix2);
        com.operations.Matrix.Matrix matrix6 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0L, (double) (byte) 10);
        double[] doubleArray9 = new double[] { 10, 'a' };
        double[] doubleArray12 = new double[] { 10, 'a' };
        double[][] doubleArray13 = new double[][] { doubleArray9, doubleArray12 };
        com.operations.Matrix.Matrix matrix14 = new com.operations.Matrix.Matrix(doubleArray13);
        int int15 = matrix14.getCols();
        int int16 = matrix14.getCols();
        int int17 = matrix14.getCols();
        com.operations.Matrix.Matrix[] matrixArray18 = com.operations.Matrix.MatrixDecompositions.luDecomposition(matrix14);
        com.operations.Matrix.Matrix matrix19 = com.operations.Matrix.MatrixOperations.multiply(matrix6, matrix14);
        com.operations.Matrix.Matrix matrix21 = com.operations.Matrix.MatrixTransformations.rotate2D((double) (short) 100);
        boolean boolean23 = com.operations.Matrix.MatrixUtils.compare(matrix14, matrix21, (double) (byte) 0);
        double[] doubleArray26 = new double[] { 10, 'a' };
        double[] doubleArray29 = new double[] { 10, 'a' };
        double[][] doubleArray30 = new double[][] { doubleArray26, doubleArray29 };
        com.operations.Matrix.Matrix matrix31 = new com.operations.Matrix.Matrix(doubleArray30);
        com.operations.Matrix.Matrix matrix32 = new com.operations.Matrix.Matrix(doubleArray30);
        com.operations.Matrix.Matrix matrix33 = new com.operations.Matrix.Matrix(doubleArray30);
        boolean boolean35 = com.operations.Matrix.MatrixUtils.compare(matrix14, matrix33, (double) (-1));
        com.operations.Matrix.Matrix matrix38 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0L, (double) (byte) 10);
        double[] doubleArray41 = new double[] { 10, 'a' };
        double[] doubleArray44 = new double[] { 10, 'a' };
        double[][] doubleArray45 = new double[][] { doubleArray41, doubleArray44 };
        com.operations.Matrix.Matrix matrix46 = new com.operations.Matrix.Matrix(doubleArray45);
        int int47 = matrix46.getCols();
        int int48 = matrix46.getCols();
        int int49 = matrix46.getCols();
        com.operations.Matrix.Matrix[] matrixArray50 = com.operations.Matrix.MatrixDecompositions.luDecomposition(matrix46);
        com.operations.Matrix.Matrix matrix51 = com.operations.Matrix.MatrixOperations.multiply(matrix38, matrix46);
        boolean boolean53 = com.operations.Matrix.MatrixUtils.compare(matrix33, matrix38, (double) 10L);
        matrix33.print();
        com.operations.Matrix.Matrix matrix55 = com.operations.Matrix.MatrixOperations.add(matrix2, matrix33);
        org.junit.Assert.assertNotNull(matrix2);
        org.junit.Assert.assertNotNull(matrix3);
        org.junit.Assert.assertNotNull(matrix6);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertArrayEquals(doubleArray9, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertArrayEquals(doubleArray12, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 2 + "'", int15 == 2);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 2 + "'", int16 == 2);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 2 + "'", int17 == 2);
        org.junit.Assert.assertNotNull(matrixArray18);
        org.junit.Assert.assertNotNull(matrix19);
        org.junit.Assert.assertNotNull(matrix21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertArrayEquals(doubleArray26, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertArrayEquals(doubleArray29, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(matrix38);
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertArrayEquals(doubleArray41, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertArrayEquals(doubleArray44, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 2 + "'", int47 == 2);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 2 + "'", int48 == 2);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 2 + "'", int49 == 2);
        org.junit.Assert.assertNotNull(matrixArray50);
        org.junit.Assert.assertNotNull(matrix51);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(matrix55);
    }

    @Test
    public void test3666() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3666");
        com.operations.Matrix.Matrix matrix2 = com.operations.Matrix.MatrixTransformations.project2D((double) 100.0f, (double) 1);
        com.operations.Matrix.Matrix matrix4 = com.operations.Matrix.MatrixTransformations.rotate2D((double) 'a');
        com.operations.Matrix.Matrix matrix6 = com.operations.Matrix.MatrixTransformations.rotate2D((double) 1.0f);
        com.operations.Matrix.Matrix matrix7 = com.operations.Matrix.MatrixOperations.add(matrix4, matrix6);
        com.operations.Matrix.Matrix matrix8 = com.operations.Matrix.MatrixOperations.subtract(matrix2, matrix7);
        double[] doubleArray9 = null;
        // The following exception was thrown during execution in test generation
        try {
            double[] doubleArray10 = com.operations.Matrix.MatrixSolver.solveGaussian(matrix7, doubleArray9);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(matrix2);
        org.junit.Assert.assertNotNull(matrix4);
        org.junit.Assert.assertNotNull(matrix6);
        org.junit.Assert.assertNotNull(matrix7);
        org.junit.Assert.assertNotNull(matrix8);
    }

    @Test
    public void test3667() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3667");
        com.operations.Matrix.Matrix matrix2 = com.operations.Matrix.MatrixTransformations.scale2D(0.0d, 1.414213562373095d);
        java.lang.Class<?> wildcardClass3 = matrix2.getClass();
        org.junit.Assert.assertNotNull(matrix2);
        org.junit.Assert.assertNotNull(wildcardClass3);
    }

    @Test
    public void test3668() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3668");
        com.operations.Matrix.Matrix matrix4 = com.operations.Matrix.MatrixUtils.generateRandomMatrix((int) (byte) 100, (int) (short) 10, 0, 0);
        org.junit.Assert.assertNotNull(matrix4);
    }

    @Test
    public void test3669() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3669");
        com.operations.Matrix.Matrix matrix5 = com.operations.Matrix.MatrixUtils.generateRandomMatrix(1, 0, (int) (byte) 1, 100, (long) (short) 1);
        boolean boolean6 = com.operations.Matrix.MatrixUtils.isSymmetric(matrix5);
        matrix5.print();
        boolean boolean8 = com.operations.Matrix.MatrixUtils.isSquare(matrix5);
        int int9 = matrix5.getCols();
        int int10 = matrix5.getCols();
        org.junit.Assert.assertNotNull(matrix5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
    }

    @Test
    public void test3670() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3670");
        com.operations.Matrix.Matrix matrix2 = new com.operations.Matrix.Matrix(1, (int) (short) 1);
        // The following exception was thrown during execution in test generation
        try {
            matrix2.setValue(2, (int) (short) 1, 1.0d);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: Index 2 out of bounds for length 1");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
    }

    @Test
    public void test3671() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3671");
        com.operations.Matrix.Matrix matrix2 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0L, (double) (byte) 10);
        double[] doubleArray5 = new double[] { 10, 'a' };
        double[] doubleArray8 = new double[] { 10, 'a' };
        double[][] doubleArray9 = new double[][] { doubleArray5, doubleArray8 };
        com.operations.Matrix.Matrix matrix10 = new com.operations.Matrix.Matrix(doubleArray9);
        int int11 = matrix10.getCols();
        int int12 = matrix10.getCols();
        int int13 = matrix10.getCols();
        com.operations.Matrix.Matrix[] matrixArray14 = com.operations.Matrix.MatrixDecompositions.luDecomposition(matrix10);
        com.operations.Matrix.Matrix matrix15 = com.operations.Matrix.MatrixOperations.multiply(matrix2, matrix10);
        com.operations.Matrix.Matrix matrix17 = com.operations.Matrix.MatrixTransformations.rotate2D((double) (short) 100);
        boolean boolean19 = com.operations.Matrix.MatrixUtils.compare(matrix10, matrix17, (double) (byte) 0);
        double[] doubleArray22 = new double[] { 10, 'a' };
        double[] doubleArray25 = new double[] { 10, 'a' };
        double[][] doubleArray26 = new double[][] { doubleArray22, doubleArray25 };
        com.operations.Matrix.Matrix matrix27 = new com.operations.Matrix.Matrix(doubleArray26);
        com.operations.Matrix.Matrix matrix28 = new com.operations.Matrix.Matrix(doubleArray26);
        com.operations.Matrix.Matrix matrix29 = new com.operations.Matrix.Matrix(doubleArray26);
        boolean boolean31 = com.operations.Matrix.MatrixUtils.compare(matrix10, matrix29, (double) (-1));
        com.operations.Matrix.Matrix[] matrixArray32 = com.operations.Matrix.MatrixDecompositions.luDecomposition(matrix10);
        org.junit.Assert.assertNotNull(matrix2);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertArrayEquals(doubleArray5, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertArrayEquals(doubleArray8, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 2 + "'", int11 == 2);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 2 + "'", int12 == 2);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 2 + "'", int13 == 2);
        org.junit.Assert.assertNotNull(matrixArray14);
        org.junit.Assert.assertNotNull(matrix15);
        org.junit.Assert.assertNotNull(matrix17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertArrayEquals(doubleArray22, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertArrayEquals(doubleArray25, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(matrixArray32);
    }

    @Test
    public void test3672() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3672");
        com.operations.Matrix.Matrix matrix2 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0L, (double) (byte) 10);
        double[] doubleArray5 = new double[] { 10, 'a' };
        double[] doubleArray8 = new double[] { 10, 'a' };
        double[][] doubleArray9 = new double[][] { doubleArray5, doubleArray8 };
        com.operations.Matrix.Matrix matrix10 = new com.operations.Matrix.Matrix(doubleArray9);
        int int11 = matrix10.getCols();
        int int12 = matrix10.getCols();
        int int13 = matrix10.getCols();
        com.operations.Matrix.Matrix[] matrixArray14 = com.operations.Matrix.MatrixDecompositions.luDecomposition(matrix10);
        com.operations.Matrix.Matrix matrix15 = com.operations.Matrix.MatrixOperations.multiply(matrix2, matrix10);
        com.operations.Matrix.Matrix matrix17 = com.operations.Matrix.MatrixTransformations.rotate2D((double) (short) 100);
        boolean boolean19 = com.operations.Matrix.MatrixUtils.compare(matrix10, matrix17, (double) (byte) 0);
        com.operations.Matrix.Matrix[] matrixArray20 = com.operations.Matrix.MatrixDecompositions.luDecomposition(matrix10);
        com.operations.Matrix.Matrix matrix21 = com.operations.Matrix.MatrixOperations.transpose(matrix10);
        com.operations.Matrix.Matrix matrix24 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0L, (double) (byte) 10);
        int int25 = matrix24.getRows();
        com.operations.Matrix.Matrix matrix28 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0L, (double) (byte) 10);
        int int29 = matrix28.getRows();
        com.operations.Matrix.Matrix matrix31 = com.operations.Matrix.MatrixOperations.scalarMultiply(matrix28, (double) 2);
        com.operations.Matrix.Matrix matrix32 = com.operations.Matrix.MatrixOperations.subtract(matrix24, matrix28);
        boolean boolean34 = com.operations.Matrix.MatrixUtils.compare(matrix10, matrix24, (double) ' ');
        com.operations.Matrix.Matrix matrix36 = com.operations.Matrix.MatrixOperations.scalarMultiply(matrix10, 137.90576492663388d);
        boolean boolean37 = com.operations.Matrix.MatrixUtils.isSquare(matrix36);
        com.operations.Matrix.Matrix matrix38 = com.operations.Matrix.MatrixDecompositions.choleskyDecomposition(matrix36);
        java.lang.Class<?> wildcardClass39 = matrix36.getClass();
        org.junit.Assert.assertNotNull(matrix2);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertArrayEquals(doubleArray5, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertArrayEquals(doubleArray8, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 2 + "'", int11 == 2);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 2 + "'", int12 == 2);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 2 + "'", int13 == 2);
        org.junit.Assert.assertNotNull(matrixArray14);
        org.junit.Assert.assertNotNull(matrix15);
        org.junit.Assert.assertNotNull(matrix17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(matrixArray20);
        org.junit.Assert.assertNotNull(matrix21);
        org.junit.Assert.assertNotNull(matrix24);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 2 + "'", int25 == 2);
        org.junit.Assert.assertNotNull(matrix28);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 2 + "'", int29 == 2);
        org.junit.Assert.assertNotNull(matrix31);
        org.junit.Assert.assertNotNull(matrix32);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(matrix36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertNotNull(matrix38);
        org.junit.Assert.assertNotNull(wildcardClass39);
    }

    @Test
    public void test3673() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3673");
        com.operations.Matrix.Matrix matrix2 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0L, (double) (byte) 10);
        int int3 = matrix2.getRows();
        com.operations.Matrix.Matrix matrix9 = com.operations.Matrix.MatrixUtils.generateRandomMatrix(100, (int) (byte) 1, (int) '#', (int) '#', 1L);
        boolean boolean11 = com.operations.Matrix.MatrixUtils.compare(matrix2, matrix9, (double) 1.0f);
        matrix9.print();
        double[][] doubleArray13 = matrix9.getData();
        com.operations.Matrix.Matrix matrix14 = new com.operations.Matrix.Matrix(doubleArray13);
        com.operations.Matrix.Matrix matrix15 = new com.operations.Matrix.Matrix(doubleArray13);
        com.operations.Matrix.Matrix matrix16 = new com.operations.Matrix.Matrix(doubleArray13);
        com.operations.Matrix.Matrix matrix17 = new com.operations.Matrix.Matrix(doubleArray13);
        org.junit.Assert.assertNotNull(matrix2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 2 + "'", int3 == 2);
        org.junit.Assert.assertNotNull(matrix9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(doubleArray13);
    }

    @Test
    public void test3674() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3674");
        com.operations.Matrix.Matrix matrix5 = com.operations.Matrix.MatrixUtils.generateRandomMatrix((int) (short) 100, 97, (int) (short) 1, 1, (long) '4');
        org.junit.Assert.assertNotNull(matrix5);
    }

    @Test
    public void test3675() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3675");
        com.operations.Matrix.Matrix matrix1 = com.operations.Matrix.MatrixTransformations.rotate2D((double) 1.0f);
        com.operations.Matrix.Matrix matrix4 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0L, (double) (byte) 10);
        int int5 = matrix4.getRows();
        com.operations.Matrix.Matrix matrix7 = com.operations.Matrix.MatrixOperations.scalarMultiply(matrix4, (double) 2);
        double double8 = com.operations.Matrix.MatrixUtils.frobeniusNorm(matrix4);
        com.operations.Matrix.Matrix matrix11 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0L, (double) (byte) 10);
        int int12 = matrix11.getRows();
        com.operations.Matrix.Matrix matrix14 = com.operations.Matrix.MatrixOperations.scalarMultiply(matrix11, (double) 2);
        com.operations.Matrix.Matrix matrix15 = com.operations.Matrix.MatrixOperations.subtract(matrix4, matrix14);
        com.operations.Matrix.Matrix matrix16 = com.operations.Matrix.MatrixOperations.add(matrix1, matrix14);
        matrix1.print();
        double[] doubleArray20 = new double[] { 10, 'a' };
        double[] doubleArray23 = new double[] { 10, 'a' };
        double[][] doubleArray24 = new double[][] { doubleArray20, doubleArray23 };
        com.operations.Matrix.Matrix matrix25 = new com.operations.Matrix.Matrix(doubleArray24);
        com.operations.Matrix.Matrix matrix26 = com.operations.Matrix.MatrixOperations.transpose(matrix25);
        com.operations.Matrix.Matrix matrix29 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0L, (double) (byte) 10);
        int int30 = matrix29.getRows();
        com.operations.Matrix.Matrix matrix36 = com.operations.Matrix.MatrixUtils.generateRandomMatrix(100, (int) (byte) 1, (int) '#', (int) '#', 1L);
        boolean boolean38 = com.operations.Matrix.MatrixUtils.compare(matrix29, matrix36, (double) 1.0f);
        com.operations.Matrix.Matrix matrix40 = com.operations.Matrix.MatrixOperations.scalarMultiply(matrix29, (double) 1L);
        matrix29.print();
        com.operations.Matrix.Matrix matrix42 = com.operations.Matrix.MatrixOperations.multiply(matrix26, matrix29);
        com.operations.Matrix.Matrix matrix43 = com.operations.Matrix.MatrixOperations.multiply(matrix1, matrix29);
        com.operations.Matrix.Matrix matrix45 = com.operations.Matrix.MatrixTransformations.rotate2D((double) 1.0f);
        boolean boolean47 = com.operations.Matrix.MatrixUtils.compare(matrix29, matrix45, (double) (short) 0);
        com.operations.Matrix.Matrix matrix48 = com.operations.Matrix.MatrixDecompositions.choleskyDecomposition(matrix45);
        com.operations.Matrix.Matrix matrix49 = com.operations.Matrix.MatrixDecompositions.choleskyDecomposition(matrix48);
        java.lang.Class<?> wildcardClass50 = matrix48.getClass();
        org.junit.Assert.assertNotNull(matrix1);
        org.junit.Assert.assertNotNull(matrix4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 2 + "'", int5 == 2);
        org.junit.Assert.assertNotNull(matrix7);
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 10.0d + "'", double8 == 10.0d);
        org.junit.Assert.assertNotNull(matrix11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 2 + "'", int12 == 2);
        org.junit.Assert.assertNotNull(matrix14);
        org.junit.Assert.assertNotNull(matrix15);
        org.junit.Assert.assertNotNull(matrix16);
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertArrayEquals(doubleArray20, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertArrayEquals(doubleArray23, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertNotNull(matrix26);
        org.junit.Assert.assertNotNull(matrix29);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 2 + "'", int30 == 2);
        org.junit.Assert.assertNotNull(matrix36);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(matrix40);
        org.junit.Assert.assertNotNull(matrix42);
        org.junit.Assert.assertNotNull(matrix43);
        org.junit.Assert.assertNotNull(matrix45);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(matrix48);
        org.junit.Assert.assertNotNull(matrix49);
        org.junit.Assert.assertNotNull(wildcardClass50);
    }

    @Test
    public void test3676() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3676");
        com.operations.Matrix.Matrix matrix2 = com.operations.Matrix.MatrixTransformations.project2D(8.603303277930165d, 8.603303277930165d);
        org.junit.Assert.assertNotNull(matrix2);
    }

    @Test
    public void test3677() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3677");
        com.operations.Matrix.Matrix matrix2 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0L, (double) (byte) 10);
        int int3 = matrix2.getRows();
        com.operations.Matrix.Matrix matrix5 = com.operations.Matrix.MatrixOperations.scalarMultiply(matrix2, (double) 2);
        double double6 = com.operations.Matrix.MatrixUtils.frobeniusNorm(matrix2);
        int int7 = matrix2.getRows();
        com.operations.Matrix.Matrix matrix8 = com.operations.Matrix.MatrixOperations.transpose(matrix2);
        com.operations.Matrix.Matrix matrix14 = com.operations.Matrix.MatrixUtils.generateRandomMatrix(52, 0, 0, (int) (short) -1, (long) (short) 10);
        boolean boolean16 = com.operations.Matrix.MatrixUtils.compare(matrix8, matrix14, 0.0d);
        // The following exception was thrown during execution in test generation
        try {
            com.operations.Matrix.Matrix[] matrixArray17 = com.operations.Matrix.MatrixDecompositions.luDecomposition(matrix14);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Matrix must be square for LU decomposition.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(matrix2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 2 + "'", int3 == 2);
        org.junit.Assert.assertNotNull(matrix5);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 10.0d + "'", double6 == 10.0d);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 2 + "'", int7 == 2);
        org.junit.Assert.assertNotNull(matrix8);
        org.junit.Assert.assertNotNull(matrix14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
    }

    @Test
    public void test3678() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3678");
        double[] doubleArray2 = new double[] { 10, 'a' };
        double[] doubleArray5 = new double[] { 10, 'a' };
        double[][] doubleArray6 = new double[][] { doubleArray2, doubleArray5 };
        com.operations.Matrix.Matrix matrix7 = new com.operations.Matrix.Matrix(doubleArray6);
        int int8 = matrix7.getCols();
        int int9 = matrix7.getCols();
        matrix7.print();
        boolean boolean11 = com.operations.Matrix.MatrixUtils.isSymmetric(matrix7);
        com.operations.Matrix.Matrix matrix13 = com.operations.Matrix.MatrixTransformations.rotate2D((double) 1.0f);
        int int14 = matrix13.getRows();
        com.operations.Matrix.Matrix matrix15 = com.operations.Matrix.MatrixOperations.add(matrix7, matrix13);
        com.operations.Matrix.Matrix matrix16 = com.operations.Matrix.MatrixOperations.transpose(matrix7);
        int int17 = matrix7.getCols();
        matrix7.print();
        com.operations.Matrix.Matrix matrix21 = com.operations.Matrix.MatrixTransformations.scale2D((double) (byte) 1, 1363.6076983299943d);
        com.operations.Matrix.Matrix matrix24 = com.operations.Matrix.MatrixTransformations.project2D((double) 100.0f, (double) (short) -1);
        com.operations.Matrix.Matrix matrix26 = com.operations.Matrix.MatrixOperations.scalarMultiply(matrix24, (double) 0.0f);
        com.operations.Matrix.Matrix matrix29 = com.operations.Matrix.MatrixTransformations.scale2D((double) ' ', (double) 0L);
        double double30 = com.operations.Matrix.MatrixUtils.frobeniusNorm(matrix29);
        com.operations.Matrix.Matrix matrix32 = com.operations.Matrix.MatrixOperations.scalarMultiply(matrix29, (double) 10L);
        com.operations.Matrix.Matrix matrix33 = com.operations.Matrix.MatrixOperations.multiply(matrix24, matrix29);
        int int34 = matrix33.getCols();
        com.operations.Matrix.Matrix matrix35 = com.operations.Matrix.MatrixOperations.subtract(matrix21, matrix33);
        com.operations.Matrix.Matrix matrix38 = com.operations.Matrix.MatrixTransformations.project2D(10.0d, 1.4142135623730951d);
        int int39 = matrix38.getRows();
        com.operations.Matrix.Matrix matrix42 = com.operations.Matrix.MatrixTransformations.project2D((double) (short) 100, 35.0d);
        com.operations.Matrix.Matrix matrix44 = com.operations.Matrix.MatrixTransformations.rotate2D((double) (-1L));
        com.operations.Matrix.Matrix matrix46 = com.operations.Matrix.MatrixTransformations.rotate2D((double) (short) 100);
        double[] doubleArray49 = new double[] { 137.90576492663388d, (byte) -1 };
        double[] doubleArray50 = com.operations.Matrix.MatrixSolver.solveGaussian(matrix46, doubleArray49);
        double[] doubleArray51 = com.operations.Matrix.MatrixSolver.solveGaussian(matrix44, doubleArray49);
        double[] doubleArray52 = com.operations.Matrix.MatrixSolver.solveGaussian(matrix42, doubleArray51);
        double[] doubleArray53 = com.operations.Matrix.MatrixSolver.solveGaussian(matrix38, doubleArray51);
        double[] doubleArray54 = com.operations.Matrix.MatrixSolver.solveGaussian(matrix35, doubleArray53);
        com.operations.Matrix.Matrix matrix55 = com.operations.Matrix.MatrixOperations.add(matrix7, matrix35);
        com.operations.Matrix.Matrix matrix58 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0L, (double) (byte) 10);
        int int59 = matrix58.getRows();
        com.operations.Matrix.Matrix matrix65 = com.operations.Matrix.MatrixUtils.generateRandomMatrix(100, (int) (byte) 1, (int) '#', (int) '#', 1L);
        boolean boolean67 = com.operations.Matrix.MatrixUtils.compare(matrix58, matrix65, (double) 1.0f);
        matrix65.print();
        com.operations.Matrix.Matrix matrix69 = com.operations.Matrix.MatrixOperations.transpose(matrix65);
        double double70 = com.operations.Matrix.MatrixUtils.frobeniusNorm(matrix69);
        boolean boolean72 = com.operations.Matrix.MatrixUtils.compare(matrix55, matrix69, 176.5915398536741d);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertArrayEquals(doubleArray2, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertArrayEquals(doubleArray5, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 2 + "'", int8 == 2);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 2 + "'", int9 == 2);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(matrix13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 2 + "'", int14 == 2);
        org.junit.Assert.assertNotNull(matrix15);
        org.junit.Assert.assertNotNull(matrix16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 2 + "'", int17 == 2);
        org.junit.Assert.assertNotNull(matrix21);
        org.junit.Assert.assertNotNull(matrix24);
        org.junit.Assert.assertNotNull(matrix26);
        org.junit.Assert.assertNotNull(matrix29);
        org.junit.Assert.assertTrue("'" + double30 + "' != '" + 32.0d + "'", double30 == 32.0d);
        org.junit.Assert.assertNotNull(matrix32);
        org.junit.Assert.assertNotNull(matrix33);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 2 + "'", int34 == 2);
        org.junit.Assert.assertNotNull(matrix35);
        org.junit.Assert.assertNotNull(matrix38);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 2 + "'", int39 == 2);
        org.junit.Assert.assertNotNull(matrix42);
        org.junit.Assert.assertNotNull(matrix44);
        org.junit.Assert.assertNotNull(matrix46);
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertArrayEquals(doubleArray49, new double[] { 137.90576492663388d, (-1.0d) }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertArrayEquals(doubleArray50, new double[] { (-24.931892522286255d), (-135.63701830716116d) }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertArrayEquals(doubleArray51, new double[] { 137.90221361711127d, 1.4069397643877004d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertArrayEquals(doubleArray52, new double[] { 1.3790221361711128d, 0.04019827898250573d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertArrayEquals(doubleArray53, new double[] { 13.790221361711128d, 0.9948566481195463d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray54);
        org.junit.Assert.assertArrayEquals(doubleArray54, new double[] { (-0.004310791297815295d), 7.295768785538127E-4d }, 1.0E-15);
        org.junit.Assert.assertNotNull(matrix55);
        org.junit.Assert.assertNotNull(matrix58);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 2 + "'", int59 == 2);
        org.junit.Assert.assertNotNull(matrix65);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertNotNull(matrix69);
        org.junit.Assert.assertTrue("'" + double70 + "' != '" + 350.0d + "'", double70 == 350.0d);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
    }

    @Test
    public void test3679() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3679");
        com.operations.Matrix.Matrix matrix4 = com.operations.Matrix.MatrixUtils.generateRandomMatrix((int) ' ', 2, 10, (-1));
        org.junit.Assert.assertNotNull(matrix4);
    }

    @Test
    public void test3680() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3680");
        com.operations.Matrix.Matrix matrix2 = com.operations.Matrix.MatrixTransformations.project2D((double) (byte) 100, 32.0d);
        boolean boolean3 = com.operations.Matrix.MatrixUtils.isSymmetric(matrix2);
        matrix2.print();
        com.operations.Matrix.Matrix matrix5 = com.operations.Matrix.MatrixOperations.transpose(matrix2);
        com.operations.Matrix.Matrix matrix6 = com.operations.Matrix.MatrixDecompositions.choleskyDecomposition(matrix2);
        com.operations.Matrix.Matrix[] matrixArray7 = com.operations.Matrix.MatrixDecompositions.luDecomposition(matrix2);
        com.operations.Matrix.Matrix matrix9 = com.operations.Matrix.MatrixTransformations.rotate2D((double) (short) 100);
        double[] doubleArray12 = new double[] { 137.90576492663388d, (byte) -1 };
        double[] doubleArray13 = com.operations.Matrix.MatrixSolver.solveGaussian(matrix9, doubleArray12);
        com.operations.Matrix.Matrix matrix16 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0L, (double) (byte) 10);
        double[] doubleArray19 = new double[] { 10, 'a' };
        double[] doubleArray22 = new double[] { 10, 'a' };
        double[][] doubleArray23 = new double[][] { doubleArray19, doubleArray22 };
        com.operations.Matrix.Matrix matrix24 = new com.operations.Matrix.Matrix(doubleArray23);
        int int25 = matrix24.getCols();
        int int26 = matrix24.getCols();
        int int27 = matrix24.getCols();
        com.operations.Matrix.Matrix[] matrixArray28 = com.operations.Matrix.MatrixDecompositions.luDecomposition(matrix24);
        com.operations.Matrix.Matrix matrix29 = com.operations.Matrix.MatrixOperations.multiply(matrix16, matrix24);
        boolean boolean31 = com.operations.Matrix.MatrixUtils.compare(matrix9, matrix16, (double) (-1L));
        boolean boolean32 = com.operations.Matrix.MatrixUtils.isSymmetric(matrix9);
        int int33 = matrix9.getCols();
        com.operations.Matrix.Matrix[] matrixArray34 = com.operations.Matrix.MatrixDecompositions.luDecomposition(matrix9);
        double double35 = com.operations.Matrix.MatrixUtils.frobeniusNorm(matrix9);
        com.operations.Matrix.Matrix matrix37 = com.operations.Matrix.MatrixTransformations.rotate2D(100.0d);
        int int38 = matrix37.getCols();
        matrix37.print();
        com.operations.Matrix.Matrix matrix41 = com.operations.Matrix.MatrixOperations.scalarMultiply(matrix37, (double) (byte) 1);
        com.operations.Matrix.Matrix matrix43 = com.operations.Matrix.MatrixTransformations.rotate2D(350.0d);
        com.operations.Matrix.Matrix matrix45 = com.operations.Matrix.MatrixTransformations.rotate2D((double) (short) 100);
        double[] doubleArray48 = new double[] { 137.90576492663388d, (byte) -1 };
        double[] doubleArray49 = com.operations.Matrix.MatrixSolver.solveGaussian(matrix45, doubleArray48);
        double[] doubleArray50 = com.operations.Matrix.MatrixSolver.solveGaussian(matrix43, doubleArray49);
        double[] doubleArray51 = com.operations.Matrix.MatrixSolver.solveGaussian(matrix37, doubleArray49);
        double[] doubleArray52 = com.operations.Matrix.MatrixSolver.solveGaussian(matrix9, doubleArray51);
        boolean boolean53 = com.operations.Matrix.MatrixUtils.isSymmetric(matrix9);
        double[] doubleArray56 = new double[] { 10, 'a' };
        double[] doubleArray59 = new double[] { 10, 'a' };
        double[][] doubleArray60 = new double[][] { doubleArray56, doubleArray59 };
        com.operations.Matrix.Matrix matrix61 = new com.operations.Matrix.Matrix(doubleArray60);
        com.operations.Matrix.Matrix matrix62 = new com.operations.Matrix.Matrix(doubleArray60);
        com.operations.Matrix.Matrix matrix64 = com.operations.Matrix.MatrixTransformations.rotate2D((double) (short) 100);
        double[] doubleArray67 = new double[] { 137.90576492663388d, (byte) -1 };
        double[] doubleArray68 = com.operations.Matrix.MatrixSolver.solveGaussian(matrix64, doubleArray67);
        com.operations.Matrix.Matrix matrix69 = com.operations.Matrix.MatrixOperations.add(matrix62, matrix64);
        com.operations.Matrix.Matrix matrix70 = com.operations.Matrix.MatrixOperations.transpose(matrix64);
        double double71 = com.operations.Matrix.MatrixUtils.frobeniusNorm(matrix70);
        double[][] doubleArray72 = matrix70.getData();
        com.operations.Matrix.Matrix matrix74 = com.operations.Matrix.MatrixOperations.scalarMultiply(matrix70, (double) 'a');
        com.operations.Matrix.Matrix matrix76 = com.operations.Matrix.MatrixTransformations.rotate2D(350.0d);
        com.operations.Matrix.Matrix matrix78 = com.operations.Matrix.MatrixTransformations.rotate2D((double) (short) 100);
        double[] doubleArray81 = new double[] { 137.90576492663388d, (byte) -1 };
        double[] doubleArray82 = com.operations.Matrix.MatrixSolver.solveGaussian(matrix78, doubleArray81);
        double[] doubleArray83 = com.operations.Matrix.MatrixSolver.solveGaussian(matrix76, doubleArray82);
        double[] doubleArray84 = com.operations.Matrix.MatrixSolver.solveGaussian(matrix70, doubleArray82);
        double[] doubleArray85 = com.operations.Matrix.MatrixSolver.solveGaussian(matrix9, doubleArray84);
        double[] doubleArray86 = com.operations.Matrix.MatrixSolver.solveGaussian(matrix2, doubleArray85);
        double[][] doubleArray87 = matrix2.getData();
        org.junit.Assert.assertNotNull(matrix2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNotNull(matrix5);
        org.junit.Assert.assertNotNull(matrix6);
        org.junit.Assert.assertNotNull(matrixArray7);
        org.junit.Assert.assertNotNull(matrix9);
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertArrayEquals(doubleArray12, new double[] { 137.90576492663388d, (-1.0d) }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertArrayEquals(doubleArray13, new double[] { (-24.931892522286255d), (-135.63701830716116d) }, 1.0E-15);
        org.junit.Assert.assertNotNull(matrix16);
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertArrayEquals(doubleArray19, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertArrayEquals(doubleArray22, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 2 + "'", int25 == 2);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 2 + "'", int26 == 2);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 2 + "'", int27 == 2);
        org.junit.Assert.assertNotNull(matrixArray28);
        org.junit.Assert.assertNotNull(matrix29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 2 + "'", int33 == 2);
        org.junit.Assert.assertNotNull(matrixArray34);
        org.junit.Assert.assertTrue("'" + double35 + "' != '" + 1.414213562373095d + "'", double35 == 1.414213562373095d);
        org.junit.Assert.assertNotNull(matrix37);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 2 + "'", int38 == 2);
        org.junit.Assert.assertNotNull(matrix41);
        org.junit.Assert.assertNotNull(matrix43);
        org.junit.Assert.assertNotNull(matrix45);
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertArrayEquals(doubleArray48, new double[] { 137.90576492663388d, (-1.0d) }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertArrayEquals(doubleArray49, new double[] { (-24.931892522286255d), (-135.63701830716116d) }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertArrayEquals(doubleArray50, new double[] { (-0.9999999999999858d), (-137.90576492663388d) }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertArrayEquals(doubleArray51, new double[] { (-129.24700952206834d), 48.1062421064292d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertArrayEquals(doubleArray52, new double[] { 69.81890786710137d, 118.92989575479001d }, 1.0E-15);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(doubleArray56);
        org.junit.Assert.assertArrayEquals(doubleArray56, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray59);
        org.junit.Assert.assertArrayEquals(doubleArray59, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray60);
        org.junit.Assert.assertNotNull(matrix64);
        org.junit.Assert.assertNotNull(doubleArray67);
        org.junit.Assert.assertArrayEquals(doubleArray67, new double[] { 137.90576492663388d, (-1.0d) }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray68);
        org.junit.Assert.assertArrayEquals(doubleArray68, new double[] { (-24.931892522286255d), (-135.63701830716116d) }, 1.0E-15);
        org.junit.Assert.assertNotNull(matrix69);
        org.junit.Assert.assertNotNull(matrix70);
        org.junit.Assert.assertTrue("'" + double71 + "' != '" + 1.414213562373095d + "'", double71 == 1.414213562373095d);
        org.junit.Assert.assertNotNull(doubleArray72);
        org.junit.Assert.assertNotNull(matrix74);
        org.junit.Assert.assertNotNull(matrix76);
        org.junit.Assert.assertNotNull(matrix78);
        org.junit.Assert.assertNotNull(doubleArray81);
        org.junit.Assert.assertArrayEquals(doubleArray81, new double[] { 137.90576492663388d, (-1.0d) }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray82);
        org.junit.Assert.assertArrayEquals(doubleArray82, new double[] { (-24.931892522286255d), (-135.63701830716116d) }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray83);
        org.junit.Assert.assertArrayEquals(doubleArray83, new double[] { (-0.9999999999999858d), (-137.90576492663388d) }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray84);
        org.junit.Assert.assertArrayEquals(doubleArray84, new double[] { 137.90576492663388d, (-1.0000000000000022d) }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray85);
        org.junit.Assert.assertArrayEquals(doubleArray85, new double[] { (-24.931892522286258d), (-135.63701830716116d) }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray86);
        org.junit.Assert.assertArrayEquals(doubleArray86, new double[] { (-0.2493189252228626d), (-4.238656822098786d) }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray87);
    }

    @Test
    public void test3681() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3681");
        // The following exception was thrown during execution in test generation
        try {
            com.operations.Matrix.Matrix matrix4 = com.operations.Matrix.MatrixUtils.generateRandomMatrix((int) (short) 0, (int) (byte) 100, 0, (int) (byte) 1);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
    }

    @Test
    public void test3682() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3682");
        com.operations.Matrix.Matrix matrix1 = com.operations.Matrix.MatrixTransformations.rotate2D((double) 'a');
        com.operations.Matrix.Matrix matrix3 = com.operations.Matrix.MatrixTransformations.rotate2D((double) 1.0f);
        com.operations.Matrix.Matrix matrix4 = com.operations.Matrix.MatrixOperations.add(matrix1, matrix3);
        double[] doubleArray7 = new double[] { 10, 'a' };
        double[] doubleArray10 = new double[] { 10, 'a' };
        double[][] doubleArray11 = new double[][] { doubleArray7, doubleArray10 };
        com.operations.Matrix.Matrix matrix12 = new com.operations.Matrix.Matrix(doubleArray11);
        com.operations.Matrix.Matrix matrix13 = new com.operations.Matrix.Matrix(doubleArray11);
        com.operations.Matrix.Matrix[] matrixArray14 = com.operations.Matrix.MatrixDecompositions.luDecomposition(matrix13);
        double double15 = com.operations.Matrix.MatrixUtils.frobeniusNorm(matrix13);
        double[] doubleArray18 = new double[] { 10, 'a' };
        double[] doubleArray21 = new double[] { 10, 'a' };
        double[][] doubleArray22 = new double[][] { doubleArray18, doubleArray21 };
        com.operations.Matrix.Matrix matrix23 = new com.operations.Matrix.Matrix(doubleArray22);
        com.operations.Matrix.Matrix matrix24 = new com.operations.Matrix.Matrix(doubleArray22);
        boolean boolean25 = com.operations.Matrix.MatrixUtils.isSquare(matrix24);
        double[] doubleArray28 = new double[] { 10, 'a' };
        double[] doubleArray31 = new double[] { 10, 'a' };
        double[][] doubleArray32 = new double[][] { doubleArray28, doubleArray31 };
        com.operations.Matrix.Matrix matrix33 = new com.operations.Matrix.Matrix(doubleArray32);
        int int34 = matrix33.getCols();
        int int35 = matrix33.getCols();
        matrix33.print();
        double[] doubleArray39 = new double[] { 10, 'a' };
        double[] doubleArray42 = new double[] { 10, 'a' };
        double[][] doubleArray43 = new double[][] { doubleArray39, doubleArray42 };
        com.operations.Matrix.Matrix matrix44 = new com.operations.Matrix.Matrix(doubleArray43);
        boolean boolean46 = com.operations.Matrix.MatrixUtils.compare(matrix33, matrix44, (double) (-1));
        com.operations.Matrix.Matrix matrix47 = com.operations.Matrix.MatrixOperations.subtract(matrix24, matrix44);
        com.operations.Matrix.Matrix[] matrixArray48 = com.operations.Matrix.MatrixDecompositions.luDecomposition(matrix47);
        double[][] doubleArray49 = matrix47.getData();
        com.operations.Matrix.Matrix matrix52 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0L, (double) (byte) 10);
        double[] doubleArray55 = new double[] { 10, 'a' };
        double[] doubleArray58 = new double[] { 10, 'a' };
        double[][] doubleArray59 = new double[][] { doubleArray55, doubleArray58 };
        com.operations.Matrix.Matrix matrix60 = new com.operations.Matrix.Matrix(doubleArray59);
        int int61 = matrix60.getCols();
        int int62 = matrix60.getCols();
        int int63 = matrix60.getCols();
        com.operations.Matrix.Matrix[] matrixArray64 = com.operations.Matrix.MatrixDecompositions.luDecomposition(matrix60);
        com.operations.Matrix.Matrix matrix65 = com.operations.Matrix.MatrixOperations.multiply(matrix52, matrix60);
        int int66 = matrix60.getRows();
        com.operations.Matrix.Matrix matrix67 = com.operations.Matrix.MatrixOperations.multiply(matrix47, matrix60);
        boolean boolean69 = com.operations.Matrix.MatrixUtils.compare(matrix13, matrix67, (double) 2);
        com.operations.Matrix.Matrix matrix70 = com.operations.Matrix.MatrixOperations.transpose(matrix67);
        com.operations.Matrix.Matrix matrix72 = com.operations.Matrix.MatrixOperations.scalarMultiply(matrix67, (double) (short) -1);
        com.operations.Matrix.Matrix matrix73 = com.operations.Matrix.MatrixOperations.add(matrix3, matrix72);
        boolean boolean74 = com.operations.Matrix.MatrixUtils.isSquare(matrix3);
        org.junit.Assert.assertNotNull(matrix1);
        org.junit.Assert.assertNotNull(matrix3);
        org.junit.Assert.assertNotNull(matrix4);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertArrayEquals(doubleArray7, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertArrayEquals(doubleArray10, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertNotNull(matrixArray14);
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 137.90576492663388d + "'", double15 == 137.90576492663388d);
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertArrayEquals(doubleArray18, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertArrayEquals(doubleArray21, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertArrayEquals(doubleArray28, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertArrayEquals(doubleArray31, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 2 + "'", int34 == 2);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 2 + "'", int35 == 2);
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertArrayEquals(doubleArray39, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertArrayEquals(doubleArray42, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(matrix47);
        org.junit.Assert.assertNotNull(matrixArray48);
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertNotNull(matrix52);
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertArrayEquals(doubleArray55, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray58);
        org.junit.Assert.assertArrayEquals(doubleArray58, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray59);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 2 + "'", int61 == 2);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 2 + "'", int62 == 2);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 2 + "'", int63 == 2);
        org.junit.Assert.assertNotNull(matrixArray64);
        org.junit.Assert.assertNotNull(matrix65);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 2 + "'", int66 == 2);
        org.junit.Assert.assertNotNull(matrix67);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertNotNull(matrix70);
        org.junit.Assert.assertNotNull(matrix72);
        org.junit.Assert.assertNotNull(matrix73);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + true + "'", boolean74 == true);
    }

    @Test
    public void test3683() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3683");
        com.operations.Matrix.Matrix matrix2 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0L, (double) (byte) 10);
        int int3 = matrix2.getRows();
        com.operations.Matrix.Matrix matrix5 = com.operations.Matrix.MatrixOperations.scalarMultiply(matrix2, (double) 2);
        matrix2.print();
        com.operations.Matrix.Matrix matrix12 = com.operations.Matrix.MatrixUtils.generateRandomMatrix((int) (short) 10, (int) (short) 100, (int) (byte) -1, (-1), (long) (byte) 10);
        boolean boolean14 = com.operations.Matrix.MatrixUtils.compare(matrix2, matrix12, (double) (short) 10);
        double[] doubleArray17 = new double[] { 10, 'a' };
        double[] doubleArray20 = new double[] { 10, 'a' };
        double[][] doubleArray21 = new double[][] { doubleArray17, doubleArray20 };
        com.operations.Matrix.Matrix matrix22 = new com.operations.Matrix.Matrix(doubleArray21);
        com.operations.Matrix.Matrix matrix23 = new com.operations.Matrix.Matrix(doubleArray21);
        com.operations.Matrix.Matrix matrix25 = com.operations.Matrix.MatrixTransformations.rotate2D((double) (short) 100);
        double[] doubleArray28 = new double[] { 137.90576492663388d, (byte) -1 };
        double[] doubleArray29 = com.operations.Matrix.MatrixSolver.solveGaussian(matrix25, doubleArray28);
        com.operations.Matrix.Matrix matrix30 = com.operations.Matrix.MatrixOperations.add(matrix23, matrix25);
        com.operations.Matrix.Matrix matrix31 = com.operations.Matrix.MatrixDecompositions.choleskyDecomposition(matrix23);
        com.operations.Matrix.Matrix matrix34 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0L, (double) (byte) 10);
        double[] doubleArray37 = new double[] { 10, 'a' };
        double[] doubleArray40 = new double[] { 10, 'a' };
        double[][] doubleArray41 = new double[][] { doubleArray37, doubleArray40 };
        com.operations.Matrix.Matrix matrix42 = new com.operations.Matrix.Matrix(doubleArray41);
        int int43 = matrix42.getCols();
        int int44 = matrix42.getCols();
        int int45 = matrix42.getCols();
        com.operations.Matrix.Matrix[] matrixArray46 = com.operations.Matrix.MatrixDecompositions.luDecomposition(matrix42);
        com.operations.Matrix.Matrix matrix47 = com.operations.Matrix.MatrixOperations.multiply(matrix34, matrix42);
        com.operations.Matrix.Matrix matrix49 = com.operations.Matrix.MatrixTransformations.rotate2D((double) (short) 100);
        boolean boolean51 = com.operations.Matrix.MatrixUtils.compare(matrix42, matrix49, (double) (byte) 0);
        com.operations.Matrix.Matrix matrix52 = com.operations.Matrix.MatrixOperations.transpose(matrix42);
        com.operations.Matrix.Matrix matrix54 = com.operations.Matrix.MatrixOperations.scalarMultiply(matrix52, (double) 10);
        com.operations.Matrix.Matrix matrix55 = com.operations.Matrix.MatrixOperations.add(matrix31, matrix52);
        com.operations.Matrix.Matrix matrix57 = com.operations.Matrix.MatrixOperations.scalarMultiply(matrix55, 137.90576492663388d);
        com.operations.Matrix.Matrix matrix58 = com.operations.Matrix.MatrixOperations.multiply(matrix2, matrix55);
        int int59 = matrix58.getRows();
        org.junit.Assert.assertNotNull(matrix2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 2 + "'", int3 == 2);
        org.junit.Assert.assertNotNull(matrix5);
        org.junit.Assert.assertNotNull(matrix12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertArrayEquals(doubleArray17, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertArrayEquals(doubleArray20, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertNotNull(matrix25);
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertArrayEquals(doubleArray28, new double[] { 137.90576492663388d, (-1.0d) }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertArrayEquals(doubleArray29, new double[] { (-24.931892522286255d), (-135.63701830716116d) }, 1.0E-15);
        org.junit.Assert.assertNotNull(matrix30);
        org.junit.Assert.assertNotNull(matrix31);
        org.junit.Assert.assertNotNull(matrix34);
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertArrayEquals(doubleArray37, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertArrayEquals(doubleArray40, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 2 + "'", int43 == 2);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 2 + "'", int44 == 2);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 2 + "'", int45 == 2);
        org.junit.Assert.assertNotNull(matrixArray46);
        org.junit.Assert.assertNotNull(matrix47);
        org.junit.Assert.assertNotNull(matrix49);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(matrix52);
        org.junit.Assert.assertNotNull(matrix54);
        org.junit.Assert.assertNotNull(matrix55);
        org.junit.Assert.assertNotNull(matrix57);
        org.junit.Assert.assertNotNull(matrix58);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 2 + "'", int59 == 2);
    }

    @Test
    public void test3684() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3684");
        // The following exception was thrown during execution in test generation
        try {
            com.operations.Matrix.Matrix matrix5 = com.operations.Matrix.MatrixUtils.generateRandomMatrix((int) (byte) -1, (-1), 10, (int) (short) 100, (long) (byte) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.NegativeArraySizeException; message: -1");
        } catch (java.lang.NegativeArraySizeException e) {
            // Expected exception.
        }
    }

    @Test
    public void test3685() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3685");
        com.operations.Matrix.Matrix matrix0 = null;
        com.operations.Matrix.Matrix matrix3 = com.operations.Matrix.MatrixTransformations.scale2D((double) 100L, 1.0d);
        com.operations.Matrix.Matrix matrix4 = com.operations.Matrix.MatrixOperations.transpose(matrix3);
        com.operations.Matrix.Matrix matrix7 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0L, (double) (byte) 10);
        double[] doubleArray10 = new double[] { 10, 'a' };
        double[] doubleArray13 = new double[] { 10, 'a' };
        double[][] doubleArray14 = new double[][] { doubleArray10, doubleArray13 };
        com.operations.Matrix.Matrix matrix15 = new com.operations.Matrix.Matrix(doubleArray14);
        int int16 = matrix15.getCols();
        int int17 = matrix15.getCols();
        int int18 = matrix15.getCols();
        com.operations.Matrix.Matrix[] matrixArray19 = com.operations.Matrix.MatrixDecompositions.luDecomposition(matrix15);
        com.operations.Matrix.Matrix matrix20 = com.operations.Matrix.MatrixOperations.multiply(matrix7, matrix15);
        int int21 = matrix15.getRows();
        boolean boolean23 = com.operations.Matrix.MatrixUtils.compare(matrix3, matrix15, (-1.0d));
        com.operations.Matrix.Matrix[] matrixArray24 = com.operations.Matrix.MatrixDecompositions.luDecomposition(matrix3);
        boolean boolean25 = com.operations.Matrix.MatrixUtils.isSymmetric(matrix3);
        double[] doubleArray28 = new double[] { 10, 'a' };
        double[] doubleArray31 = new double[] { 10, 'a' };
        double[][] doubleArray32 = new double[][] { doubleArray28, doubleArray31 };
        com.operations.Matrix.Matrix matrix33 = new com.operations.Matrix.Matrix(doubleArray32);
        int int34 = matrix33.getCols();
        int int35 = matrix33.getCols();
        matrix33.print();
        double[] doubleArray39 = new double[] { 10, 'a' };
        double[] doubleArray42 = new double[] { 10, 'a' };
        double[][] doubleArray43 = new double[][] { doubleArray39, doubleArray42 };
        com.operations.Matrix.Matrix matrix44 = new com.operations.Matrix.Matrix(doubleArray43);
        boolean boolean46 = com.operations.Matrix.MatrixUtils.compare(matrix33, matrix44, (double) (-1));
        boolean boolean47 = com.operations.Matrix.MatrixUtils.isSymmetric(matrix33);
        int int48 = matrix33.getRows();
        com.operations.Matrix.Matrix matrix49 = com.operations.Matrix.MatrixOperations.add(matrix3, matrix33);
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean51 = com.operations.Matrix.MatrixUtils.compare(matrix0, matrix3, 137.90576492663385d);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(matrix3);
        org.junit.Assert.assertNotNull(matrix4);
        org.junit.Assert.assertNotNull(matrix7);
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertArrayEquals(doubleArray10, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertArrayEquals(doubleArray13, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 2 + "'", int16 == 2);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 2 + "'", int17 == 2);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 2 + "'", int18 == 2);
        org.junit.Assert.assertNotNull(matrixArray19);
        org.junit.Assert.assertNotNull(matrix20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 2 + "'", int21 == 2);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(matrixArray24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertArrayEquals(doubleArray28, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertArrayEquals(doubleArray31, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 2 + "'", int34 == 2);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 2 + "'", int35 == 2);
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertArrayEquals(doubleArray39, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertArrayEquals(doubleArray42, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 2 + "'", int48 == 2);
        org.junit.Assert.assertNotNull(matrix49);
    }

    @Test
    public void test3686() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3686");
        // The following exception was thrown during execution in test generation
        try {
            com.operations.Matrix.Matrix matrix5 = com.operations.Matrix.MatrixUtils.generateRandomMatrix(32, (int) (short) -1, (int) (short) 100, (int) (short) -1, (long) (short) 0);
            org.junit.Assert.fail("Expected exception of type java.lang.NegativeArraySizeException; message: -1");
        } catch (java.lang.NegativeArraySizeException e) {
            // Expected exception.
        }
    }

    @Test
    public void test3687() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3687");
        com.operations.Matrix.Matrix matrix2 = com.operations.Matrix.MatrixTransformations.scale2D(0.0d, 65.19779036970327d);
        com.operations.Matrix.Matrix[] matrixArray3 = com.operations.Matrix.MatrixDecompositions.luDecomposition(matrix2);
        double double6 = matrix2.getValue(1, (int) (byte) 1);
        int int7 = matrix2.getRows();
        com.operations.Matrix.Matrix[] matrixArray8 = com.operations.Matrix.MatrixDecompositions.luDecomposition(matrix2);
        org.junit.Assert.assertNotNull(matrix2);
        org.junit.Assert.assertNotNull(matrixArray3);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 65.19779036970327d + "'", double6 == 65.19779036970327d);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 2 + "'", int7 == 2);
        org.junit.Assert.assertNotNull(matrixArray8);
    }

    @Test
    public void test3688() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3688");
        com.operations.Matrix.Matrix matrix2 = new com.operations.Matrix.Matrix(100, 97);
        com.operations.Matrix.Matrix matrix4 = com.operations.Matrix.MatrixTransformations.rotate2D(260.95643973734866d);
        int int5 = matrix4.getCols();
        // The following exception was thrown during execution in test generation
        try {
            com.operations.Matrix.Matrix matrix6 = com.operations.Matrix.MatrixOperations.multiply(matrix2, matrix4);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Matrix A's columns must match Matrix B's rows for multiplication.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(matrix4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 2 + "'", int5 == 2);
    }

    @Test
    public void test3689() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3689");
        // The following exception was thrown during execution in test generation
        try {
            com.operations.Matrix.Matrix matrix5 = com.operations.Matrix.MatrixUtils.generateRandomMatrix((int) (short) -1, (int) (short) 0, (-1), (int) (byte) 0, (long) 0);
            org.junit.Assert.fail("Expected exception of type java.lang.NegativeArraySizeException; message: -1");
        } catch (java.lang.NegativeArraySizeException e) {
            // Expected exception.
        }
    }

    @Test
    public void test3690() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3690");
        double[] doubleArray2 = new double[] { 10, 'a' };
        double[] doubleArray5 = new double[] { 10, 'a' };
        double[][] doubleArray6 = new double[][] { doubleArray2, doubleArray5 };
        com.operations.Matrix.Matrix matrix7 = new com.operations.Matrix.Matrix(doubleArray6);
        int int8 = matrix7.getCols();
        boolean boolean9 = com.operations.Matrix.MatrixUtils.isSquare(matrix7);
        com.operations.Matrix.Matrix matrix10 = com.operations.Matrix.MatrixOperations.transpose(matrix7);
        int int11 = matrix10.getRows();
        com.operations.Matrix.Matrix matrix14 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0L, (double) (byte) 10);
        double[] doubleArray17 = new double[] { 10, 'a' };
        double[] doubleArray20 = new double[] { 10, 'a' };
        double[][] doubleArray21 = new double[][] { doubleArray17, doubleArray20 };
        com.operations.Matrix.Matrix matrix22 = new com.operations.Matrix.Matrix(doubleArray21);
        int int23 = matrix22.getCols();
        int int24 = matrix22.getCols();
        int int25 = matrix22.getCols();
        com.operations.Matrix.Matrix[] matrixArray26 = com.operations.Matrix.MatrixDecompositions.luDecomposition(matrix22);
        com.operations.Matrix.Matrix matrix27 = com.operations.Matrix.MatrixOperations.multiply(matrix14, matrix22);
        com.operations.Matrix.Matrix matrix29 = com.operations.Matrix.MatrixTransformations.rotate2D((double) (short) 100);
        boolean boolean31 = com.operations.Matrix.MatrixUtils.compare(matrix22, matrix29, (double) (byte) 0);
        com.operations.Matrix.Matrix matrix32 = com.operations.Matrix.MatrixOperations.multiply(matrix10, matrix22);
        int int33 = matrix10.getCols();
        double[][] doubleArray34 = matrix10.getData();
        com.operations.Matrix.Matrix matrix37 = com.operations.Matrix.MatrixTransformations.project2D((double) 10L, 10.0d);
        com.operations.Matrix.Matrix matrix39 = com.operations.Matrix.MatrixTransformations.rotate2D((double) (short) 100);
        double[] doubleArray42 = new double[] { 137.90576492663388d, (byte) -1 };
        double[] doubleArray43 = com.operations.Matrix.MatrixSolver.solveGaussian(matrix39, doubleArray42);
        com.operations.Matrix.Matrix matrix46 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0L, (double) (byte) 10);
        double[] doubleArray49 = new double[] { 10, 'a' };
        double[] doubleArray52 = new double[] { 10, 'a' };
        double[][] doubleArray53 = new double[][] { doubleArray49, doubleArray52 };
        com.operations.Matrix.Matrix matrix54 = new com.operations.Matrix.Matrix(doubleArray53);
        int int55 = matrix54.getCols();
        int int56 = matrix54.getCols();
        int int57 = matrix54.getCols();
        com.operations.Matrix.Matrix[] matrixArray58 = com.operations.Matrix.MatrixDecompositions.luDecomposition(matrix54);
        com.operations.Matrix.Matrix matrix59 = com.operations.Matrix.MatrixOperations.multiply(matrix46, matrix54);
        boolean boolean61 = com.operations.Matrix.MatrixUtils.compare(matrix39, matrix46, (double) (-1L));
        double[][] doubleArray62 = matrix39.getData();
        com.operations.Matrix.Matrix matrix64 = com.operations.Matrix.MatrixTransformations.rotate2D((double) (short) 100);
        double[] doubleArray67 = new double[] { 137.90576492663388d, (byte) -1 };
        double[] doubleArray68 = com.operations.Matrix.MatrixSolver.solveGaussian(matrix64, doubleArray67);
        double[] doubleArray69 = com.operations.Matrix.MatrixSolver.solveGaussian(matrix39, doubleArray67);
        double[] doubleArray70 = com.operations.Matrix.MatrixSolver.solveGaussian(matrix37, doubleArray69);
        boolean boolean72 = com.operations.Matrix.MatrixUtils.compare(matrix10, matrix37, (double) 100.0f);
        com.operations.Matrix.Matrix matrix74 = com.operations.Matrix.MatrixOperations.scalarMultiply(matrix10, (-1.0d));
        double[][] doubleArray75 = matrix74.getData();
        com.operations.Matrix.Matrix matrix77 = com.operations.Matrix.MatrixTransformations.rotate2D(4362.86355112226d);
        boolean boolean79 = com.operations.Matrix.MatrixUtils.compare(matrix74, matrix77, 136.9141301851733d);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertArrayEquals(doubleArray2, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertArrayEquals(doubleArray5, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 2 + "'", int8 == 2);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertNotNull(matrix10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 2 + "'", int11 == 2);
        org.junit.Assert.assertNotNull(matrix14);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertArrayEquals(doubleArray17, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertArrayEquals(doubleArray20, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 2 + "'", int23 == 2);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 2 + "'", int24 == 2);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 2 + "'", int25 == 2);
        org.junit.Assert.assertNotNull(matrixArray26);
        org.junit.Assert.assertNotNull(matrix27);
        org.junit.Assert.assertNotNull(matrix29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(matrix32);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 2 + "'", int33 == 2);
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertNotNull(matrix37);
        org.junit.Assert.assertNotNull(matrix39);
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertArrayEquals(doubleArray42, new double[] { 137.90576492663388d, (-1.0d) }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertArrayEquals(doubleArray43, new double[] { (-24.931892522286255d), (-135.63701830716116d) }, 1.0E-15);
        org.junit.Assert.assertNotNull(matrix46);
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertArrayEquals(doubleArray49, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertArrayEquals(doubleArray52, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 2 + "'", int55 == 2);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 2 + "'", int56 == 2);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 2 + "'", int57 == 2);
        org.junit.Assert.assertNotNull(matrixArray58);
        org.junit.Assert.assertNotNull(matrix59);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNotNull(doubleArray62);
        org.junit.Assert.assertNotNull(matrix64);
        org.junit.Assert.assertNotNull(doubleArray67);
        org.junit.Assert.assertArrayEquals(doubleArray67, new double[] { 137.90576492663388d, (-1.0d) }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray68);
        org.junit.Assert.assertArrayEquals(doubleArray68, new double[] { (-24.931892522286255d), (-135.63701830716116d) }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray69);
        org.junit.Assert.assertArrayEquals(doubleArray69, new double[] { (-24.931892522286255d), (-135.63701830716116d) }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray70);
        org.junit.Assert.assertArrayEquals(doubleArray70, new double[] { (-2.4931892522286256d), (-13.563701830716116d) }, 1.0E-15);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + true + "'", boolean72 == true);
        org.junit.Assert.assertNotNull(matrix74);
        org.junit.Assert.assertNotNull(doubleArray75);
        org.junit.Assert.assertNotNull(matrix77);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + true + "'", boolean79 == true);
    }

    @Test
    public void test3691() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3691");
        com.operations.Matrix.Matrix matrix2 = new com.operations.Matrix.Matrix(0, 10);
        matrix2.print();
        // The following exception was thrown during execution in test generation
        try {
            matrix2.setValue((int) (byte) 10, 0, 0.01745240643728351d);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: Index 10 out of bounds for length 0");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
    }

    @Test
    public void test3692() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3692");
        com.operations.Matrix.Matrix matrix1 = com.operations.Matrix.MatrixTransformations.rotate2D((double) 1.0f);
        com.operations.Matrix.Matrix matrix4 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0L, (double) (byte) 10);
        int int5 = matrix4.getRows();
        com.operations.Matrix.Matrix matrix7 = com.operations.Matrix.MatrixOperations.scalarMultiply(matrix4, (double) 2);
        double double8 = com.operations.Matrix.MatrixUtils.frobeniusNorm(matrix4);
        com.operations.Matrix.Matrix matrix11 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0L, (double) (byte) 10);
        int int12 = matrix11.getRows();
        com.operations.Matrix.Matrix matrix14 = com.operations.Matrix.MatrixOperations.scalarMultiply(matrix11, (double) 2);
        com.operations.Matrix.Matrix matrix15 = com.operations.Matrix.MatrixOperations.subtract(matrix4, matrix14);
        com.operations.Matrix.Matrix matrix16 = com.operations.Matrix.MatrixOperations.add(matrix1, matrix14);
        com.operations.Matrix.Matrix[] matrixArray17 = com.operations.Matrix.MatrixDecompositions.luDecomposition(matrix14);
        boolean boolean18 = com.operations.Matrix.MatrixUtils.isSquare(matrix14);
        com.operations.Matrix.Matrix matrix19 = com.operations.Matrix.MatrixOperations.transpose(matrix14);
        com.operations.Matrix.Matrix matrix21 = com.operations.Matrix.MatrixOperations.scalarMultiply(matrix19, (double) '4');
        com.operations.Matrix.Matrix matrix27 = com.operations.Matrix.MatrixUtils.generateRandomMatrix(100, (int) (short) 10, 0, (-1), (long) (byte) -1);
        matrix27.print();
        // The following exception was thrown during execution in test generation
        try {
            com.operations.Matrix.Matrix matrix29 = com.operations.Matrix.MatrixOperations.subtract(matrix21, matrix27);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Matrices must have the same dimensions for subtraction.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(matrix1);
        org.junit.Assert.assertNotNull(matrix4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 2 + "'", int5 == 2);
        org.junit.Assert.assertNotNull(matrix7);
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 10.0d + "'", double8 == 10.0d);
        org.junit.Assert.assertNotNull(matrix11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 2 + "'", int12 == 2);
        org.junit.Assert.assertNotNull(matrix14);
        org.junit.Assert.assertNotNull(matrix15);
        org.junit.Assert.assertNotNull(matrix16);
        org.junit.Assert.assertNotNull(matrixArray17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(matrix19);
        org.junit.Assert.assertNotNull(matrix21);
        org.junit.Assert.assertNotNull(matrix27);
    }

    @Test
    public void test3693() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3693");
        double[] doubleArray2 = new double[] { 10, 'a' };
        double[] doubleArray5 = new double[] { 10, 'a' };
        double[][] doubleArray6 = new double[][] { doubleArray2, doubleArray5 };
        com.operations.Matrix.Matrix matrix7 = new com.operations.Matrix.Matrix(doubleArray6);
        com.operations.Matrix.Matrix matrix8 = new com.operations.Matrix.Matrix(doubleArray6);
        boolean boolean9 = com.operations.Matrix.MatrixUtils.isSquare(matrix8);
        double[] doubleArray12 = new double[] { 10, 'a' };
        double[] doubleArray15 = new double[] { 10, 'a' };
        double[][] doubleArray16 = new double[][] { doubleArray12, doubleArray15 };
        com.operations.Matrix.Matrix matrix17 = new com.operations.Matrix.Matrix(doubleArray16);
        int int18 = matrix17.getCols();
        int int19 = matrix17.getCols();
        matrix17.print();
        double[] doubleArray23 = new double[] { 10, 'a' };
        double[] doubleArray26 = new double[] { 10, 'a' };
        double[][] doubleArray27 = new double[][] { doubleArray23, doubleArray26 };
        com.operations.Matrix.Matrix matrix28 = new com.operations.Matrix.Matrix(doubleArray27);
        boolean boolean30 = com.operations.Matrix.MatrixUtils.compare(matrix17, matrix28, (double) (-1));
        com.operations.Matrix.Matrix matrix31 = com.operations.Matrix.MatrixOperations.subtract(matrix8, matrix28);
        com.operations.Matrix.Matrix matrix33 = com.operations.Matrix.MatrixOperations.scalarMultiply(matrix8, (double) 0.0f);
        com.operations.Matrix.Matrix matrix35 = com.operations.Matrix.MatrixTransformations.rotate2D((double) 100L);
        com.operations.Matrix.Matrix matrix37 = com.operations.Matrix.MatrixOperations.scalarMultiply(matrix35, (double) ' ');
        boolean boolean39 = com.operations.Matrix.MatrixUtils.compare(matrix33, matrix35, (double) 2);
        com.operations.Matrix.Matrix matrix41 = com.operations.Matrix.MatrixOperations.scalarMultiply(matrix35, 36.45545226711637d);
        com.operations.Matrix.Matrix matrix44 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0L, (double) (byte) 10);
        int int45 = matrix44.getRows();
        com.operations.Matrix.Matrix matrix48 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0L, (double) (byte) 10);
        int int49 = matrix48.getRows();
        com.operations.Matrix.Matrix matrix51 = com.operations.Matrix.MatrixOperations.scalarMultiply(matrix48, (double) 2);
        com.operations.Matrix.Matrix matrix52 = com.operations.Matrix.MatrixOperations.subtract(matrix44, matrix48);
        com.operations.Matrix.Matrix matrix55 = com.operations.Matrix.MatrixTransformations.scale2D(146.4308710620817d, (double) 10L);
        boolean boolean57 = com.operations.Matrix.MatrixUtils.compare(matrix48, matrix55, (double) (byte) 1);
        boolean boolean58 = com.operations.Matrix.MatrixUtils.isSymmetric(matrix55);
        com.operations.Matrix.Matrix matrix59 = com.operations.Matrix.MatrixDecompositions.choleskyDecomposition(matrix55);
        double[][] doubleArray60 = matrix55.getData();
        com.operations.Matrix.Matrix matrix62 = com.operations.Matrix.MatrixOperations.scalarMultiply(matrix55, (double) 97);
        boolean boolean64 = com.operations.Matrix.MatrixUtils.compare(matrix35, matrix62, 104.9952379872535d);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertArrayEquals(doubleArray2, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertArrayEquals(doubleArray5, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertArrayEquals(doubleArray12, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertArrayEquals(doubleArray15, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 2 + "'", int18 == 2);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 2 + "'", int19 == 2);
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertArrayEquals(doubleArray23, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertArrayEquals(doubleArray26, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(matrix31);
        org.junit.Assert.assertNotNull(matrix33);
        org.junit.Assert.assertNotNull(matrix35);
        org.junit.Assert.assertNotNull(matrix37);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertNotNull(matrix41);
        org.junit.Assert.assertNotNull(matrix44);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 2 + "'", int45 == 2);
        org.junit.Assert.assertNotNull(matrix48);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 2 + "'", int49 == 2);
        org.junit.Assert.assertNotNull(matrix51);
        org.junit.Assert.assertNotNull(matrix52);
        org.junit.Assert.assertNotNull(matrix55);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + true + "'", boolean58 == true);
        org.junit.Assert.assertNotNull(matrix59);
        org.junit.Assert.assertNotNull(doubleArray60);
        org.junit.Assert.assertNotNull(matrix62);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
    }

    @Test
    public void test3694() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3694");
        com.operations.Matrix.Matrix matrix1 = com.operations.Matrix.MatrixTransformations.rotate2D((double) (short) 100);
        double[] doubleArray4 = new double[] { 137.90576492663388d, (byte) -1 };
        double[] doubleArray5 = com.operations.Matrix.MatrixSolver.solveGaussian(matrix1, doubleArray4);
        com.operations.Matrix.Matrix matrix8 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0L, (double) (byte) 10);
        double[] doubleArray11 = new double[] { 10, 'a' };
        double[] doubleArray14 = new double[] { 10, 'a' };
        double[][] doubleArray15 = new double[][] { doubleArray11, doubleArray14 };
        com.operations.Matrix.Matrix matrix16 = new com.operations.Matrix.Matrix(doubleArray15);
        int int17 = matrix16.getCols();
        int int18 = matrix16.getCols();
        int int19 = matrix16.getCols();
        com.operations.Matrix.Matrix[] matrixArray20 = com.operations.Matrix.MatrixDecompositions.luDecomposition(matrix16);
        com.operations.Matrix.Matrix matrix21 = com.operations.Matrix.MatrixOperations.multiply(matrix8, matrix16);
        boolean boolean23 = com.operations.Matrix.MatrixUtils.compare(matrix1, matrix8, (double) (-1L));
        double[][] doubleArray24 = matrix1.getData();
        com.operations.Matrix.Matrix matrix27 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0L, (double) 10L);
        boolean boolean29 = com.operations.Matrix.MatrixUtils.compare(matrix1, matrix27, 146.4308710620817d);
        com.operations.Matrix.Matrix matrix31 = com.operations.Matrix.MatrixOperations.scalarMultiply(matrix27, 1.4142135623730951d);
        com.operations.Matrix.Matrix matrix33 = com.operations.Matrix.MatrixTransformations.rotate2D((-0.1736481776669303d));
        int int34 = matrix33.getRows();
        com.operations.Matrix.Matrix matrix35 = com.operations.Matrix.MatrixOperations.subtract(matrix27, matrix33);
        // The following exception was thrown during execution in test generation
        try {
            com.operations.Matrix.Matrix matrix36 = com.operations.Matrix.MatrixDecompositions.choleskyDecomposition(matrix27);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Matrix is not positive definite.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(matrix1);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertArrayEquals(doubleArray4, new double[] { 137.90576492663388d, (-1.0d) }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertArrayEquals(doubleArray5, new double[] { (-24.931892522286255d), (-135.63701830716116d) }, 1.0E-15);
        org.junit.Assert.assertNotNull(matrix8);
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertArrayEquals(doubleArray11, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertArrayEquals(doubleArray14, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 2 + "'", int17 == 2);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 2 + "'", int18 == 2);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 2 + "'", int19 == 2);
        org.junit.Assert.assertNotNull(matrixArray20);
        org.junit.Assert.assertNotNull(matrix21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertNotNull(matrix27);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertNotNull(matrix31);
        org.junit.Assert.assertNotNull(matrix33);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 2 + "'", int34 == 2);
        org.junit.Assert.assertNotNull(matrix35);
    }

    @Test
    public void test3695() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3695");
        com.operations.Matrix.Matrix matrix4 = com.operations.Matrix.MatrixUtils.generateRandomMatrix((int) 'a', 35, 100, 100);
        matrix4.setValue((int) '#', (int) (short) 10, (-0.1736481776669303d));
        // The following exception was thrown during execution in test generation
        try {
            matrix4.setValue((int) (byte) -1, 1, 98.07140255956371d);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: Index -1 out of bounds for length 97");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(matrix4);
    }

    @Test
    public void test3696() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3696");
        com.operations.Matrix.Matrix matrix2 = new com.operations.Matrix.Matrix(32, (int) (short) 10);
    }

    @Test
    public void test3697() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3697");
        double[] doubleArray2 = new double[] { 10, 'a' };
        double[] doubleArray5 = new double[] { 10, 'a' };
        double[][] doubleArray6 = new double[][] { doubleArray2, doubleArray5 };
        com.operations.Matrix.Matrix matrix7 = new com.operations.Matrix.Matrix(doubleArray6);
        com.operations.Matrix.Matrix matrix8 = new com.operations.Matrix.Matrix(doubleArray6);
        boolean boolean9 = com.operations.Matrix.MatrixUtils.isSquare(matrix8);
        com.operations.Matrix.Matrix matrix14 = com.operations.Matrix.MatrixUtils.generateRandomMatrix(100, 0, (int) ' ', (int) (byte) 1);
        matrix14.print();
        boolean boolean16 = com.operations.Matrix.MatrixUtils.isSymmetric(matrix14);
        boolean boolean18 = com.operations.Matrix.MatrixUtils.compare(matrix8, matrix14, 0.01745240643728351d);
        // The following exception was thrown during execution in test generation
        try {
            double double21 = matrix14.getValue(32, 35);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertArrayEquals(doubleArray2, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertArrayEquals(doubleArray5, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertNotNull(matrix14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
    }

    @Test
    public void test3698() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3698");
        double[] doubleArray2 = new double[] { 10, 'a' };
        double[] doubleArray5 = new double[] { 10, 'a' };
        double[][] doubleArray6 = new double[][] { doubleArray2, doubleArray5 };
        com.operations.Matrix.Matrix matrix7 = new com.operations.Matrix.Matrix(doubleArray6);
        com.operations.Matrix.Matrix matrix8 = new com.operations.Matrix.Matrix(doubleArray6);
        com.operations.Matrix.Matrix matrix10 = com.operations.Matrix.MatrixTransformations.rotate2D((double) (short) 100);
        double[] doubleArray13 = new double[] { 137.90576492663388d, (byte) -1 };
        double[] doubleArray14 = com.operations.Matrix.MatrixSolver.solveGaussian(matrix10, doubleArray13);
        com.operations.Matrix.Matrix matrix15 = com.operations.Matrix.MatrixOperations.add(matrix8, matrix10);
        com.operations.Matrix.Matrix matrix16 = com.operations.Matrix.MatrixOperations.transpose(matrix10);
        int int17 = matrix10.getCols();
        int int18 = matrix10.getRows();
        com.operations.Matrix.Matrix matrix19 = com.operations.Matrix.MatrixOperations.transpose(matrix10);
        com.operations.Matrix.Matrix matrix22 = com.operations.Matrix.MatrixTransformations.scale2D((double) (byte) 10, (double) 10);
        double[] doubleArray25 = new double[] { 10, 'a' };
        double[] doubleArray28 = new double[] { 10, 'a' };
        double[][] doubleArray29 = new double[][] { doubleArray25, doubleArray28 };
        com.operations.Matrix.Matrix matrix30 = new com.operations.Matrix.Matrix(doubleArray29);
        com.operations.Matrix.Matrix matrix31 = new com.operations.Matrix.Matrix(doubleArray29);
        boolean boolean32 = com.operations.Matrix.MatrixUtils.isSquare(matrix31);
        double[] doubleArray35 = new double[] { 10, 'a' };
        double[] doubleArray38 = new double[] { 10, 'a' };
        double[][] doubleArray39 = new double[][] { doubleArray35, doubleArray38 };
        com.operations.Matrix.Matrix matrix40 = new com.operations.Matrix.Matrix(doubleArray39);
        int int41 = matrix40.getCols();
        int int42 = matrix40.getCols();
        matrix40.print();
        double[] doubleArray46 = new double[] { 10, 'a' };
        double[] doubleArray49 = new double[] { 10, 'a' };
        double[][] doubleArray50 = new double[][] { doubleArray46, doubleArray49 };
        com.operations.Matrix.Matrix matrix51 = new com.operations.Matrix.Matrix(doubleArray50);
        boolean boolean53 = com.operations.Matrix.MatrixUtils.compare(matrix40, matrix51, (double) (-1));
        com.operations.Matrix.Matrix matrix54 = com.operations.Matrix.MatrixOperations.subtract(matrix31, matrix51);
        com.operations.Matrix.Matrix[] matrixArray55 = com.operations.Matrix.MatrixDecompositions.luDecomposition(matrix54);
        double[][] doubleArray56 = matrix54.getData();
        com.operations.Matrix.Matrix matrix57 = new com.operations.Matrix.Matrix(doubleArray56);
        com.operations.Matrix.Matrix matrix58 = com.operations.Matrix.MatrixOperations.multiply(matrix22, matrix57);
        double[][] doubleArray59 = matrix22.getData();
        com.operations.Matrix.Matrix matrix60 = com.operations.Matrix.MatrixOperations.add(matrix10, matrix22);
        com.operations.Matrix.Matrix matrix62 = com.operations.Matrix.MatrixTransformations.rotate2D(52.009614495783374d);
        boolean boolean64 = com.operations.Matrix.MatrixUtils.compare(matrix10, matrix62, (double) (-1));
        int int65 = matrix62.getRows();
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertArrayEquals(doubleArray2, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertArrayEquals(doubleArray5, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertNotNull(matrix10);
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertArrayEquals(doubleArray13, new double[] { 137.90576492663388d, (-1.0d) }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertArrayEquals(doubleArray14, new double[] { (-24.931892522286255d), (-135.63701830716116d) }, 1.0E-15);
        org.junit.Assert.assertNotNull(matrix15);
        org.junit.Assert.assertNotNull(matrix16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 2 + "'", int17 == 2);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 2 + "'", int18 == 2);
        org.junit.Assert.assertNotNull(matrix19);
        org.junit.Assert.assertNotNull(matrix22);
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertArrayEquals(doubleArray25, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertArrayEquals(doubleArray28, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertArrayEquals(doubleArray35, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertArrayEquals(doubleArray38, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 2 + "'", int41 == 2);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 2 + "'", int42 == 2);
        org.junit.Assert.assertNotNull(doubleArray46);
        org.junit.Assert.assertArrayEquals(doubleArray46, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertArrayEquals(doubleArray49, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(matrix54);
        org.junit.Assert.assertNotNull(matrixArray55);
        org.junit.Assert.assertNotNull(doubleArray56);
        org.junit.Assert.assertNotNull(matrix58);
        org.junit.Assert.assertNotNull(doubleArray59);
        org.junit.Assert.assertNotNull(matrix60);
        org.junit.Assert.assertNotNull(matrix62);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 2 + "'", int65 == 2);
    }

    @Test
    public void test3699() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3699");
        com.operations.Matrix.Matrix matrix2 = new com.operations.Matrix.Matrix((int) '#', (int) (short) 0);
        // The following exception was thrown during execution in test generation
        try {
            com.operations.Matrix.Matrix[] matrixArray3 = com.operations.Matrix.MatrixDecompositions.luDecomposition(matrix2);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Matrix must be square for LU decomposition.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test3700() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3700");
        com.operations.Matrix.Matrix matrix2 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0L, (double) (byte) 10);
        double[] doubleArray5 = new double[] { 10, 'a' };
        double[] doubleArray8 = new double[] { 10, 'a' };
        double[][] doubleArray9 = new double[][] { doubleArray5, doubleArray8 };
        com.operations.Matrix.Matrix matrix10 = new com.operations.Matrix.Matrix(doubleArray9);
        int int11 = matrix10.getCols();
        int int12 = matrix10.getCols();
        int int13 = matrix10.getCols();
        com.operations.Matrix.Matrix[] matrixArray14 = com.operations.Matrix.MatrixDecompositions.luDecomposition(matrix10);
        com.operations.Matrix.Matrix matrix15 = com.operations.Matrix.MatrixOperations.multiply(matrix2, matrix10);
        com.operations.Matrix.Matrix matrix17 = com.operations.Matrix.MatrixTransformations.rotate2D((double) (short) 100);
        boolean boolean19 = com.operations.Matrix.MatrixUtils.compare(matrix10, matrix17, (double) (byte) 0);
        double[] doubleArray22 = new double[] { 10, 'a' };
        double[] doubleArray25 = new double[] { 10, 'a' };
        double[][] doubleArray26 = new double[][] { doubleArray22, doubleArray25 };
        com.operations.Matrix.Matrix matrix27 = new com.operations.Matrix.Matrix(doubleArray26);
        com.operations.Matrix.Matrix matrix28 = new com.operations.Matrix.Matrix(doubleArray26);
        com.operations.Matrix.Matrix matrix29 = new com.operations.Matrix.Matrix(doubleArray26);
        boolean boolean31 = com.operations.Matrix.MatrixUtils.compare(matrix10, matrix29, (double) (-1));
        double[] doubleArray34 = new double[] { 10, 'a' };
        double[] doubleArray37 = new double[] { 10, 'a' };
        double[][] doubleArray38 = new double[][] { doubleArray34, doubleArray37 };
        com.operations.Matrix.Matrix matrix39 = new com.operations.Matrix.Matrix(doubleArray38);
        com.operations.Matrix.Matrix matrix40 = new com.operations.Matrix.Matrix(doubleArray38);
        boolean boolean41 = com.operations.Matrix.MatrixUtils.isSquare(matrix40);
        com.operations.Matrix.Matrix matrix42 = com.operations.Matrix.MatrixOperations.multiply(matrix29, matrix40);
        double[][] doubleArray43 = matrix40.getData();
        com.operations.Matrix.Matrix matrix44 = new com.operations.Matrix.Matrix(doubleArray43);
        com.operations.Matrix.Matrix matrix45 = new com.operations.Matrix.Matrix(doubleArray43);
        com.operations.Matrix.Matrix matrix46 = new com.operations.Matrix.Matrix(doubleArray43);
        com.operations.Matrix.Matrix matrix48 = com.operations.Matrix.MatrixOperations.scalarMultiply(matrix46, (double) 'a');
        double[][] doubleArray49 = matrix48.getData();
        com.operations.Matrix.Matrix matrix52 = com.operations.Matrix.MatrixTransformations.scale2D((double) 100.0f, 20.0d);
        com.operations.Matrix.Matrix matrix53 = com.operations.Matrix.MatrixOperations.add(matrix48, matrix52);
        com.operations.Matrix.Matrix matrix55 = com.operations.Matrix.MatrixTransformations.rotate2D((double) '4');
        double[] doubleArray58 = new double[] { 10, 'a' };
        double[] doubleArray61 = new double[] { 10, 'a' };
        double[][] doubleArray62 = new double[][] { doubleArray58, doubleArray61 };
        com.operations.Matrix.Matrix matrix63 = new com.operations.Matrix.Matrix(doubleArray62);
        com.operations.Matrix.Matrix matrix64 = new com.operations.Matrix.Matrix(doubleArray62);
        com.operations.Matrix.Matrix matrix66 = com.operations.Matrix.MatrixTransformations.rotate2D((double) (short) 100);
        double[] doubleArray69 = new double[] { 137.90576492663388d, (byte) -1 };
        double[] doubleArray70 = com.operations.Matrix.MatrixSolver.solveGaussian(matrix66, doubleArray69);
        com.operations.Matrix.Matrix matrix71 = com.operations.Matrix.MatrixOperations.add(matrix64, matrix66);
        boolean boolean72 = com.operations.Matrix.MatrixUtils.isSymmetric(matrix71);
        boolean boolean74 = com.operations.Matrix.MatrixUtils.compare(matrix55, matrix71, 364.0054944640259d);
        com.operations.Matrix.Matrix matrix77 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0L, (double) (byte) 10);
        int int78 = matrix77.getRows();
        com.operations.Matrix.Matrix matrix80 = com.operations.Matrix.MatrixOperations.scalarMultiply(matrix77, (double) 2);
        matrix77.print();
        com.operations.Matrix.Matrix matrix82 = com.operations.Matrix.MatrixOperations.multiply(matrix71, matrix77);
        com.operations.Matrix.Matrix[] matrixArray83 = com.operations.Matrix.MatrixDecompositions.luDecomposition(matrix71);
        double double84 = com.operations.Matrix.MatrixUtils.frobeniusNorm(matrix71);
        boolean boolean85 = com.operations.Matrix.MatrixUtils.isSquare(matrix71);
        com.operations.Matrix.Matrix matrix86 = com.operations.Matrix.MatrixOperations.add(matrix52, matrix71);
        org.junit.Assert.assertNotNull(matrix2);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertArrayEquals(doubleArray5, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertArrayEquals(doubleArray8, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 2 + "'", int11 == 2);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 2 + "'", int12 == 2);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 2 + "'", int13 == 2);
        org.junit.Assert.assertNotNull(matrixArray14);
        org.junit.Assert.assertNotNull(matrix15);
        org.junit.Assert.assertNotNull(matrix17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertArrayEquals(doubleArray22, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertArrayEquals(doubleArray25, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertArrayEquals(doubleArray34, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertArrayEquals(doubleArray37, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertNotNull(matrix42);
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertNotNull(matrix48);
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertNotNull(matrix52);
        org.junit.Assert.assertNotNull(matrix53);
        org.junit.Assert.assertNotNull(matrix55);
        org.junit.Assert.assertNotNull(doubleArray58);
        org.junit.Assert.assertArrayEquals(doubleArray58, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray61);
        org.junit.Assert.assertArrayEquals(doubleArray61, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray62);
        org.junit.Assert.assertNotNull(matrix66);
        org.junit.Assert.assertNotNull(doubleArray69);
        org.junit.Assert.assertArrayEquals(doubleArray69, new double[] { 137.90576492663388d, (-1.0d) }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray70);
        org.junit.Assert.assertArrayEquals(doubleArray70, new double[] { (-24.931892522286255d), (-135.63701830716116d) }, 1.0E-15);
        org.junit.Assert.assertNotNull(matrix71);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + true + "'", boolean74 == true);
        org.junit.Assert.assertNotNull(matrix77);
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + 2 + "'", int78 == 2);
        org.junit.Assert.assertNotNull(matrix80);
        org.junit.Assert.assertNotNull(matrix82);
        org.junit.Assert.assertNotNull(matrixArray83);
        org.junit.Assert.assertTrue("'" + double84 + "' != '" + 137.15495886388925d + "'", double84 == 137.15495886388925d);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + true + "'", boolean85 == true);
        org.junit.Assert.assertNotNull(matrix86);
    }

    @Test
    public void test3701() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3701");
        com.operations.Matrix.Matrix matrix1 = com.operations.Matrix.MatrixTransformations.rotate2D(100.0d);
        int int2 = matrix1.getCols();
        com.operations.Matrix.Matrix matrix5 = com.operations.Matrix.MatrixTransformations.project2D((double) 1, 364.0054944640259d);
        com.operations.Matrix.Matrix matrix6 = com.operations.Matrix.MatrixOperations.multiply(matrix1, matrix5);
        com.operations.Matrix.Matrix matrix8 = com.operations.Matrix.MatrixTransformations.rotate2D(1.414213562373095d);
        double[][] doubleArray9 = matrix8.getData();
        com.operations.Matrix.Matrix matrix10 = new com.operations.Matrix.Matrix(doubleArray9);
        com.operations.Matrix.Matrix matrix12 = com.operations.Matrix.MatrixTransformations.rotate2D((double) (short) 100);
        double[] doubleArray15 = new double[] { 137.90576492663388d, (byte) -1 };
        double[] doubleArray16 = com.operations.Matrix.MatrixSolver.solveGaussian(matrix12, doubleArray15);
        com.operations.Matrix.Matrix matrix19 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0L, (double) (byte) 10);
        double[] doubleArray22 = new double[] { 10, 'a' };
        double[] doubleArray25 = new double[] { 10, 'a' };
        double[][] doubleArray26 = new double[][] { doubleArray22, doubleArray25 };
        com.operations.Matrix.Matrix matrix27 = new com.operations.Matrix.Matrix(doubleArray26);
        int int28 = matrix27.getCols();
        int int29 = matrix27.getCols();
        int int30 = matrix27.getCols();
        com.operations.Matrix.Matrix[] matrixArray31 = com.operations.Matrix.MatrixDecompositions.luDecomposition(matrix27);
        com.operations.Matrix.Matrix matrix32 = com.operations.Matrix.MatrixOperations.multiply(matrix19, matrix27);
        boolean boolean34 = com.operations.Matrix.MatrixUtils.compare(matrix12, matrix19, (double) (-1L));
        boolean boolean35 = com.operations.Matrix.MatrixUtils.isSymmetric(matrix12);
        com.operations.Matrix.Matrix matrix38 = com.operations.Matrix.MatrixTransformations.scale2D((double) (-1L), (double) '4');
        double[][] doubleArray39 = matrix38.getData();
        com.operations.Matrix.Matrix matrix40 = com.operations.Matrix.MatrixOperations.multiply(matrix12, matrix38);
        com.operations.Matrix.Matrix matrix42 = com.operations.Matrix.MatrixTransformations.rotate2D((double) (-1L));
        com.operations.Matrix.Matrix matrix44 = com.operations.Matrix.MatrixTransformations.rotate2D((double) (short) 100);
        double[] doubleArray47 = new double[] { 137.90576492663388d, (byte) -1 };
        double[] doubleArray48 = com.operations.Matrix.MatrixSolver.solveGaussian(matrix44, doubleArray47);
        double[] doubleArray49 = com.operations.Matrix.MatrixSolver.solveGaussian(matrix42, doubleArray47);
        double[] doubleArray50 = com.operations.Matrix.MatrixSolver.solveGaussian(matrix38, doubleArray47);
        double[] doubleArray51 = com.operations.Matrix.MatrixSolver.solveGaussian(matrix10, doubleArray47);
        double[] doubleArray52 = com.operations.Matrix.MatrixSolver.solveGaussian(matrix6, doubleArray51);
        // The following exception was thrown during execution in test generation
        try {
            com.operations.Matrix.Matrix matrix53 = com.operations.Matrix.MatrixDecompositions.choleskyDecomposition(matrix6);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Matrix is not positive definite.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(matrix1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 2 + "'", int2 == 2);
        org.junit.Assert.assertNotNull(matrix5);
        org.junit.Assert.assertNotNull(matrix6);
        org.junit.Assert.assertNotNull(matrix8);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertNotNull(matrix12);
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertArrayEquals(doubleArray15, new double[] { 137.90576492663388d, (-1.0d) }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertArrayEquals(doubleArray16, new double[] { (-24.931892522286255d), (-135.63701830716116d) }, 1.0E-15);
        org.junit.Assert.assertNotNull(matrix19);
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertArrayEquals(doubleArray22, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertArrayEquals(doubleArray25, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 2 + "'", int28 == 2);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 2 + "'", int29 == 2);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 2 + "'", int30 == 2);
        org.junit.Assert.assertNotNull(matrixArray31);
        org.junit.Assert.assertNotNull(matrix32);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(matrix38);
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertNotNull(matrix40);
        org.junit.Assert.assertNotNull(matrix42);
        org.junit.Assert.assertNotNull(matrix44);
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertArrayEquals(doubleArray47, new double[] { 137.90576492663388d, (-1.0d) }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertArrayEquals(doubleArray48, new double[] { (-24.931892522286255d), (-135.63701830716116d) }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertArrayEquals(doubleArray49, new double[] { 137.90221361711127d, 1.4069397643877004d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertArrayEquals(doubleArray50, new double[] { (-137.90576492663388d), (-0.019230769230769232d) }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertArrayEquals(doubleArray51, new double[] { 137.8390783842506d, (-4.403234059237104d) }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertArrayEquals(doubleArray52, new double[] { (-28.2718438125784d), (-0.37081962097684734d) }, 1.0E-15);
    }

    @Test
    public void test3702() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3702");
        double[] doubleArray2 = new double[] { 10, 'a' };
        double[] doubleArray5 = new double[] { 10, 'a' };
        double[][] doubleArray6 = new double[][] { doubleArray2, doubleArray5 };
        com.operations.Matrix.Matrix matrix7 = new com.operations.Matrix.Matrix(doubleArray6);
        com.operations.Matrix.Matrix matrix8 = new com.operations.Matrix.Matrix(doubleArray6);
        boolean boolean9 = com.operations.Matrix.MatrixUtils.isSquare(matrix8);
        double[] doubleArray12 = new double[] { 10, 'a' };
        double[] doubleArray15 = new double[] { 10, 'a' };
        double[][] doubleArray16 = new double[][] { doubleArray12, doubleArray15 };
        com.operations.Matrix.Matrix matrix17 = new com.operations.Matrix.Matrix(doubleArray16);
        int int18 = matrix17.getCols();
        int int19 = matrix17.getCols();
        matrix17.print();
        double[] doubleArray23 = new double[] { 10, 'a' };
        double[] doubleArray26 = new double[] { 10, 'a' };
        double[][] doubleArray27 = new double[][] { doubleArray23, doubleArray26 };
        com.operations.Matrix.Matrix matrix28 = new com.operations.Matrix.Matrix(doubleArray27);
        boolean boolean30 = com.operations.Matrix.MatrixUtils.compare(matrix17, matrix28, (double) (-1));
        com.operations.Matrix.Matrix matrix31 = com.operations.Matrix.MatrixOperations.subtract(matrix8, matrix28);
        com.operations.Matrix.Matrix matrix33 = com.operations.Matrix.MatrixOperations.scalarMultiply(matrix8, (double) 0.0f);
        com.operations.Matrix.Matrix matrix34 = com.operations.Matrix.MatrixOperations.transpose(matrix8);
        com.operations.Matrix.Matrix matrix40 = com.operations.Matrix.MatrixUtils.generateRandomMatrix(2, (int) (byte) 10, (int) (byte) -1, 0, (long) (byte) 10);
        matrix40.print();
        boolean boolean43 = com.operations.Matrix.MatrixUtils.compare(matrix34, matrix40, 975.1410154434076d);
        boolean boolean44 = com.operations.Matrix.MatrixUtils.isSymmetric(matrix34);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertArrayEquals(doubleArray2, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertArrayEquals(doubleArray5, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertArrayEquals(doubleArray12, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertArrayEquals(doubleArray15, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 2 + "'", int18 == 2);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 2 + "'", int19 == 2);
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertArrayEquals(doubleArray23, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertArrayEquals(doubleArray26, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(matrix31);
        org.junit.Assert.assertNotNull(matrix33);
        org.junit.Assert.assertNotNull(matrix34);
        org.junit.Assert.assertNotNull(matrix40);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
    }

    @Test
    public void test3703() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3703");
        com.operations.Matrix.Matrix matrix2 = com.operations.Matrix.MatrixTransformations.project2D((double) ' ', 0.0d);
        double[] doubleArray5 = new double[] { 10, 'a' };
        double[] doubleArray8 = new double[] { 10, 'a' };
        double[][] doubleArray9 = new double[][] { doubleArray5, doubleArray8 };
        com.operations.Matrix.Matrix matrix10 = new com.operations.Matrix.Matrix(doubleArray9);
        int int11 = matrix10.getCols();
        boolean boolean12 = com.operations.Matrix.MatrixUtils.isSquare(matrix10);
        com.operations.Matrix.Matrix matrix13 = com.operations.Matrix.MatrixOperations.transpose(matrix10);
        int int14 = matrix13.getRows();
        com.operations.Matrix.Matrix matrix17 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0L, (double) (byte) 10);
        double[] doubleArray20 = new double[] { 10, 'a' };
        double[] doubleArray23 = new double[] { 10, 'a' };
        double[][] doubleArray24 = new double[][] { doubleArray20, doubleArray23 };
        com.operations.Matrix.Matrix matrix25 = new com.operations.Matrix.Matrix(doubleArray24);
        int int26 = matrix25.getCols();
        int int27 = matrix25.getCols();
        int int28 = matrix25.getCols();
        com.operations.Matrix.Matrix[] matrixArray29 = com.operations.Matrix.MatrixDecompositions.luDecomposition(matrix25);
        com.operations.Matrix.Matrix matrix30 = com.operations.Matrix.MatrixOperations.multiply(matrix17, matrix25);
        com.operations.Matrix.Matrix matrix32 = com.operations.Matrix.MatrixTransformations.rotate2D((double) (short) 100);
        boolean boolean34 = com.operations.Matrix.MatrixUtils.compare(matrix25, matrix32, (double) (byte) 0);
        com.operations.Matrix.Matrix matrix35 = com.operations.Matrix.MatrixOperations.multiply(matrix13, matrix25);
        com.operations.Matrix.Matrix matrix36 = com.operations.Matrix.MatrixOperations.add(matrix2, matrix25);
        com.operations.Matrix.Matrix matrix37 = com.operations.Matrix.MatrixOperations.transpose(matrix2);
        com.operations.Matrix.Matrix matrix40 = com.operations.Matrix.MatrixTransformations.scale2D((double) (byte) 100, 350.0d);
        double double41 = com.operations.Matrix.MatrixUtils.frobeniusNorm(matrix40);
        int int42 = matrix40.getCols();
        com.operations.Matrix.Matrix matrix43 = com.operations.Matrix.MatrixOperations.multiply(matrix2, matrix40);
        int int44 = matrix40.getRows();
        com.operations.Matrix.Matrix[] matrixArray45 = com.operations.Matrix.MatrixDecompositions.luDecomposition(matrix40);
        com.operations.Matrix.Matrix matrix47 = com.operations.Matrix.MatrixOperations.scalarMultiply(matrix40, (double) (byte) -1);
        org.junit.Assert.assertNotNull(matrix2);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertArrayEquals(doubleArray5, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertArrayEquals(doubleArray8, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 2 + "'", int11 == 2);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(matrix13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 2 + "'", int14 == 2);
        org.junit.Assert.assertNotNull(matrix17);
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertArrayEquals(doubleArray20, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertArrayEquals(doubleArray23, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 2 + "'", int26 == 2);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 2 + "'", int27 == 2);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 2 + "'", int28 == 2);
        org.junit.Assert.assertNotNull(matrixArray29);
        org.junit.Assert.assertNotNull(matrix30);
        org.junit.Assert.assertNotNull(matrix32);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(matrix35);
        org.junit.Assert.assertNotNull(matrix36);
        org.junit.Assert.assertNotNull(matrix37);
        org.junit.Assert.assertNotNull(matrix40);
        org.junit.Assert.assertTrue("'" + double41 + "' != '" + 364.0054944640259d + "'", double41 == 364.0054944640259d);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 2 + "'", int42 == 2);
        org.junit.Assert.assertNotNull(matrix43);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 2 + "'", int44 == 2);
        org.junit.Assert.assertNotNull(matrixArray45);
        org.junit.Assert.assertNotNull(matrix47);
    }

    @Test
    public void test3704() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3704");
        double[] doubleArray2 = new double[] { 10, 'a' };
        double[] doubleArray5 = new double[] { 10, 'a' };
        double[][] doubleArray6 = new double[][] { doubleArray2, doubleArray5 };
        com.operations.Matrix.Matrix matrix7 = new com.operations.Matrix.Matrix(doubleArray6);
        com.operations.Matrix.Matrix matrix8 = new com.operations.Matrix.Matrix(doubleArray6);
        com.operations.Matrix.Matrix matrix9 = new com.operations.Matrix.Matrix(doubleArray6);
        boolean boolean10 = com.operations.Matrix.MatrixUtils.isSymmetric(matrix9);
        boolean boolean11 = com.operations.Matrix.MatrixUtils.isSquare(matrix9);
        com.operations.Matrix.Matrix matrix13 = com.operations.Matrix.MatrixOperations.scalarMultiply(matrix9, 1.472965077159101d);
        double[][] doubleArray14 = matrix13.getData();
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertArrayEquals(doubleArray2, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertArrayEquals(doubleArray5, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNotNull(matrix13);
        org.junit.Assert.assertNotNull(doubleArray14);
    }

    @Test
    public void test3705() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3705");
        com.operations.Matrix.Matrix matrix2 = com.operations.Matrix.MatrixTransformations.project2D(693.7418269995209d, 30.0d);
        // The following exception was thrown during execution in test generation
        try {
            double double5 = matrix2.getValue((int) (byte) 0, (int) (short) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(matrix2);
    }

    @Test
    public void test3706() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3706");
        com.operations.Matrix.Matrix matrix2 = com.operations.Matrix.MatrixTransformations.project2D(21.023651153076518d, 32.0d);
        matrix2.print();
        org.junit.Assert.assertNotNull(matrix2);
    }

    @Test
    public void test3707() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3707");
        com.operations.Matrix.Matrix matrix2 = com.operations.Matrix.MatrixTransformations.scale2D((double) '4', 1950.2820308868152d);
        org.junit.Assert.assertNotNull(matrix2);
    }

    @Test
    public void test3708() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3708");
        com.operations.Matrix.Matrix matrix1 = com.operations.Matrix.MatrixTransformations.rotate2D((double) 1.0f);
        int int2 = matrix1.getRows();
        double double3 = com.operations.Matrix.MatrixUtils.frobeniusNorm(matrix1);
        org.junit.Assert.assertNotNull(matrix1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 2 + "'", int2 == 2);
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + 1.4142135623730951d + "'", double3 == 1.4142135623730951d);
    }

    @Test
    public void test3709() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3709");
        com.operations.Matrix.Matrix matrix1 = com.operations.Matrix.MatrixTransformations.rotate2D((double) (-1L));
        com.operations.Matrix.Matrix matrix3 = com.operations.Matrix.MatrixTransformations.rotate2D((double) (short) 100);
        double[] doubleArray6 = new double[] { 137.90576492663388d, (byte) -1 };
        double[] doubleArray7 = com.operations.Matrix.MatrixSolver.solveGaussian(matrix3, doubleArray6);
        double[] doubleArray8 = com.operations.Matrix.MatrixSolver.solveGaussian(matrix1, doubleArray6);
        double[][] doubleArray9 = matrix1.getData();
        com.operations.Matrix.Matrix matrix12 = com.operations.Matrix.MatrixTransformations.project2D((double) ' ', 0.0d);
        double[] doubleArray15 = new double[] { 10, 'a' };
        double[] doubleArray18 = new double[] { 10, 'a' };
        double[][] doubleArray19 = new double[][] { doubleArray15, doubleArray18 };
        com.operations.Matrix.Matrix matrix20 = new com.operations.Matrix.Matrix(doubleArray19);
        int int21 = matrix20.getCols();
        boolean boolean22 = com.operations.Matrix.MatrixUtils.isSquare(matrix20);
        com.operations.Matrix.Matrix matrix23 = com.operations.Matrix.MatrixOperations.transpose(matrix20);
        int int24 = matrix23.getRows();
        com.operations.Matrix.Matrix matrix27 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0L, (double) (byte) 10);
        double[] doubleArray30 = new double[] { 10, 'a' };
        double[] doubleArray33 = new double[] { 10, 'a' };
        double[][] doubleArray34 = new double[][] { doubleArray30, doubleArray33 };
        com.operations.Matrix.Matrix matrix35 = new com.operations.Matrix.Matrix(doubleArray34);
        int int36 = matrix35.getCols();
        int int37 = matrix35.getCols();
        int int38 = matrix35.getCols();
        com.operations.Matrix.Matrix[] matrixArray39 = com.operations.Matrix.MatrixDecompositions.luDecomposition(matrix35);
        com.operations.Matrix.Matrix matrix40 = com.operations.Matrix.MatrixOperations.multiply(matrix27, matrix35);
        com.operations.Matrix.Matrix matrix42 = com.operations.Matrix.MatrixTransformations.rotate2D((double) (short) 100);
        boolean boolean44 = com.operations.Matrix.MatrixUtils.compare(matrix35, matrix42, (double) (byte) 0);
        com.operations.Matrix.Matrix matrix45 = com.operations.Matrix.MatrixOperations.multiply(matrix23, matrix35);
        com.operations.Matrix.Matrix matrix46 = com.operations.Matrix.MatrixOperations.add(matrix12, matrix35);
        double[][] doubleArray47 = matrix46.getData();
        com.operations.Matrix.Matrix matrix48 = com.operations.Matrix.MatrixOperations.add(matrix1, matrix46);
        com.operations.Matrix.Matrix matrix49 = com.operations.Matrix.MatrixOperations.transpose(matrix48);
        org.junit.Assert.assertNotNull(matrix1);
        org.junit.Assert.assertNotNull(matrix3);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertArrayEquals(doubleArray6, new double[] { 137.90576492663388d, (-1.0d) }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertArrayEquals(doubleArray7, new double[] { (-24.931892522286255d), (-135.63701830716116d) }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertArrayEquals(doubleArray8, new double[] { 137.90221361711127d, 1.4069397643877004d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertNotNull(matrix12);
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertArrayEquals(doubleArray15, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertArrayEquals(doubleArray18, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 2 + "'", int21 == 2);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertNotNull(matrix23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 2 + "'", int24 == 2);
        org.junit.Assert.assertNotNull(matrix27);
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertArrayEquals(doubleArray30, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertArrayEquals(doubleArray33, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 2 + "'", int36 == 2);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 2 + "'", int37 == 2);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 2 + "'", int38 == 2);
        org.junit.Assert.assertNotNull(matrixArray39);
        org.junit.Assert.assertNotNull(matrix40);
        org.junit.Assert.assertNotNull(matrix42);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(matrix45);
        org.junit.Assert.assertNotNull(matrix46);
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertNotNull(matrix48);
        org.junit.Assert.assertNotNull(matrix49);
    }

    @Test
    public void test3710() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3710");
        double[] doubleArray2 = new double[] { 10, 'a' };
        double[] doubleArray5 = new double[] { 10, 'a' };
        double[][] doubleArray6 = new double[][] { doubleArray2, doubleArray5 };
        com.operations.Matrix.Matrix matrix7 = new com.operations.Matrix.Matrix(doubleArray6);
        com.operations.Matrix.Matrix matrix8 = new com.operations.Matrix.Matrix(doubleArray6);
        com.operations.Matrix.Matrix[] matrixArray9 = com.operations.Matrix.MatrixDecompositions.luDecomposition(matrix8);
        com.operations.Matrix.Matrix matrix12 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0, (double) 100L);
        com.operations.Matrix.Matrix matrix13 = com.operations.Matrix.MatrixOperations.subtract(matrix8, matrix12);
        double[][] doubleArray14 = matrix13.getData();
        com.operations.Matrix.Matrix matrix15 = new com.operations.Matrix.Matrix(doubleArray14);
        com.operations.Matrix.Matrix matrix16 = new com.operations.Matrix.Matrix(doubleArray14);
        com.operations.Matrix.Matrix matrix17 = new com.operations.Matrix.Matrix(doubleArray14);
        com.operations.Matrix.Matrix matrix18 = new com.operations.Matrix.Matrix(doubleArray14);
        com.operations.Matrix.Matrix matrix19 = new com.operations.Matrix.Matrix(doubleArray14);
        boolean boolean20 = com.operations.Matrix.MatrixUtils.isSquare(matrix19);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertArrayEquals(doubleArray2, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertArrayEquals(doubleArray5, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertNotNull(matrixArray9);
        org.junit.Assert.assertNotNull(matrix12);
        org.junit.Assert.assertNotNull(matrix13);
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
    }

    @Test
    public void test3711() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3711");
        com.operations.Matrix.Matrix matrix2 = com.operations.Matrix.MatrixTransformations.scale2D((double) '4', 975.1410154434076d);
        com.operations.Matrix.Matrix matrix3 = com.operations.Matrix.MatrixDecompositions.choleskyDecomposition(matrix2);
        com.operations.Matrix.Matrix matrix5 = com.operations.Matrix.MatrixOperations.scalarMultiply(matrix3, 1.414213562373095d);
        com.operations.Matrix.Matrix matrix7 = com.operations.Matrix.MatrixOperations.scalarMultiply(matrix3, 10.0d);
        matrix3.print();
        org.junit.Assert.assertNotNull(matrix2);
        org.junit.Assert.assertNotNull(matrix3);
        org.junit.Assert.assertNotNull(matrix5);
        org.junit.Assert.assertNotNull(matrix7);
    }

    @Test
    public void test3712() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3712");
        com.operations.Matrix.Matrix matrix2 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0L, (double) (byte) 10);
        double[] doubleArray5 = new double[] { 10, 'a' };
        double[] doubleArray8 = new double[] { 10, 'a' };
        double[][] doubleArray9 = new double[][] { doubleArray5, doubleArray8 };
        com.operations.Matrix.Matrix matrix10 = new com.operations.Matrix.Matrix(doubleArray9);
        int int11 = matrix10.getCols();
        int int12 = matrix10.getCols();
        int int13 = matrix10.getCols();
        com.operations.Matrix.Matrix[] matrixArray14 = com.operations.Matrix.MatrixDecompositions.luDecomposition(matrix10);
        com.operations.Matrix.Matrix matrix15 = com.operations.Matrix.MatrixOperations.multiply(matrix2, matrix10);
        com.operations.Matrix.Matrix matrix17 = com.operations.Matrix.MatrixTransformations.rotate2D((double) (short) 100);
        boolean boolean19 = com.operations.Matrix.MatrixUtils.compare(matrix10, matrix17, (double) (byte) 0);
        double[] doubleArray22 = new double[] { 10, 'a' };
        double[] doubleArray25 = new double[] { 10, 'a' };
        double[][] doubleArray26 = new double[][] { doubleArray22, doubleArray25 };
        com.operations.Matrix.Matrix matrix27 = new com.operations.Matrix.Matrix(doubleArray26);
        com.operations.Matrix.Matrix matrix28 = new com.operations.Matrix.Matrix(doubleArray26);
        com.operations.Matrix.Matrix matrix29 = new com.operations.Matrix.Matrix(doubleArray26);
        boolean boolean31 = com.operations.Matrix.MatrixUtils.compare(matrix10, matrix29, (double) (-1));
        double double32 = com.operations.Matrix.MatrixUtils.frobeniusNorm(matrix10);
        com.operations.Matrix.Matrix matrix34 = com.operations.Matrix.MatrixOperations.scalarMultiply(matrix10, (double) '#');
        com.operations.Matrix.Matrix matrix36 = com.operations.Matrix.MatrixOperations.scalarMultiply(matrix34, 131.06486943494812d);
        com.operations.Matrix.Matrix[] matrixArray37 = com.operations.Matrix.MatrixDecompositions.luDecomposition(matrix36);
        org.junit.Assert.assertNotNull(matrix2);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertArrayEquals(doubleArray5, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertArrayEquals(doubleArray8, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 2 + "'", int11 == 2);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 2 + "'", int12 == 2);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 2 + "'", int13 == 2);
        org.junit.Assert.assertNotNull(matrixArray14);
        org.junit.Assert.assertNotNull(matrix15);
        org.junit.Assert.assertNotNull(matrix17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertArrayEquals(doubleArray22, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertArrayEquals(doubleArray25, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + double32 + "' != '" + 137.90576492663388d + "'", double32 == 137.90576492663388d);
        org.junit.Assert.assertNotNull(matrix34);
        org.junit.Assert.assertNotNull(matrix36);
        org.junit.Assert.assertNotNull(matrixArray37);
    }

    @Test
    public void test3713() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3713");
        com.operations.Matrix.Matrix matrix1 = com.operations.Matrix.MatrixTransformations.rotate2D(100.0d);
        int int2 = matrix1.getCols();
        matrix1.print();
        com.operations.Matrix.Matrix matrix5 = com.operations.Matrix.MatrixOperations.scalarMultiply(matrix1, (double) (byte) 1);
        com.operations.Matrix.Matrix[] matrixArray6 = com.operations.Matrix.MatrixDecompositions.luDecomposition(matrix1);
        com.operations.Matrix.Matrix matrix7 = com.operations.Matrix.MatrixOperations.transpose(matrix1);
        com.operations.Matrix.Matrix[] matrixArray8 = com.operations.Matrix.MatrixDecompositions.luDecomposition(matrix7);
        com.operations.Matrix.Matrix matrix11 = com.operations.Matrix.MatrixTransformations.project2D(3500.0d, 0.9998476951563913d);
        com.operations.Matrix.Matrix matrix14 = com.operations.Matrix.MatrixTransformations.project2D((double) (-1L), (-1.0d));
        com.operations.Matrix.Matrix matrix17 = com.operations.Matrix.MatrixTransformations.scale2D((double) 1.0f, (double) 1);
        com.operations.Matrix.Matrix matrix19 = com.operations.Matrix.MatrixTransformations.rotate2D((double) 1.0f);
        com.operations.Matrix.Matrix matrix22 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0L, (double) (byte) 10);
        int int23 = matrix22.getRows();
        com.operations.Matrix.Matrix matrix25 = com.operations.Matrix.MatrixOperations.scalarMultiply(matrix22, (double) 2);
        double double26 = com.operations.Matrix.MatrixUtils.frobeniusNorm(matrix22);
        com.operations.Matrix.Matrix matrix29 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0L, (double) (byte) 10);
        int int30 = matrix29.getRows();
        com.operations.Matrix.Matrix matrix32 = com.operations.Matrix.MatrixOperations.scalarMultiply(matrix29, (double) 2);
        com.operations.Matrix.Matrix matrix33 = com.operations.Matrix.MatrixOperations.subtract(matrix22, matrix32);
        com.operations.Matrix.Matrix matrix34 = com.operations.Matrix.MatrixOperations.add(matrix19, matrix32);
        boolean boolean36 = com.operations.Matrix.MatrixUtils.compare(matrix17, matrix19, (double) (byte) -1);
        com.operations.Matrix.Matrix matrix37 = com.operations.Matrix.MatrixOperations.transpose(matrix19);
        com.operations.Matrix.Matrix matrix40 = com.operations.Matrix.MatrixTransformations.project2D((double) 10L, 10.0d);
        com.operations.Matrix.Matrix matrix42 = com.operations.Matrix.MatrixTransformations.rotate2D((double) (short) 100);
        double[] doubleArray45 = new double[] { 137.90576492663388d, (byte) -1 };
        double[] doubleArray46 = com.operations.Matrix.MatrixSolver.solveGaussian(matrix42, doubleArray45);
        com.operations.Matrix.Matrix matrix49 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0L, (double) (byte) 10);
        double[] doubleArray52 = new double[] { 10, 'a' };
        double[] doubleArray55 = new double[] { 10, 'a' };
        double[][] doubleArray56 = new double[][] { doubleArray52, doubleArray55 };
        com.operations.Matrix.Matrix matrix57 = new com.operations.Matrix.Matrix(doubleArray56);
        int int58 = matrix57.getCols();
        int int59 = matrix57.getCols();
        int int60 = matrix57.getCols();
        com.operations.Matrix.Matrix[] matrixArray61 = com.operations.Matrix.MatrixDecompositions.luDecomposition(matrix57);
        com.operations.Matrix.Matrix matrix62 = com.operations.Matrix.MatrixOperations.multiply(matrix49, matrix57);
        boolean boolean64 = com.operations.Matrix.MatrixUtils.compare(matrix42, matrix49, (double) (-1L));
        double[][] doubleArray65 = matrix42.getData();
        com.operations.Matrix.Matrix matrix67 = com.operations.Matrix.MatrixTransformations.rotate2D((double) (short) 100);
        double[] doubleArray70 = new double[] { 137.90576492663388d, (byte) -1 };
        double[] doubleArray71 = com.operations.Matrix.MatrixSolver.solveGaussian(matrix67, doubleArray70);
        double[] doubleArray72 = com.operations.Matrix.MatrixSolver.solveGaussian(matrix42, doubleArray70);
        double[] doubleArray73 = com.operations.Matrix.MatrixSolver.solveGaussian(matrix40, doubleArray72);
        double[] doubleArray74 = com.operations.Matrix.MatrixSolver.solveGaussian(matrix19, doubleArray73);
        double[] doubleArray75 = com.operations.Matrix.MatrixSolver.solveGaussian(matrix14, doubleArray73);
        double[] doubleArray76 = com.operations.Matrix.MatrixSolver.solveGaussian(matrix11, doubleArray73);
        double[] doubleArray77 = com.operations.Matrix.MatrixSolver.solveGaussian(matrix7, doubleArray76);
        java.lang.Class<?> wildcardClass78 = matrix7.getClass();
        org.junit.Assert.assertNotNull(matrix1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 2 + "'", int2 == 2);
        org.junit.Assert.assertNotNull(matrix5);
        org.junit.Assert.assertNotNull(matrixArray6);
        org.junit.Assert.assertNotNull(matrix7);
        org.junit.Assert.assertNotNull(matrixArray8);
        org.junit.Assert.assertNotNull(matrix11);
        org.junit.Assert.assertNotNull(matrix14);
        org.junit.Assert.assertNotNull(matrix17);
        org.junit.Assert.assertNotNull(matrix19);
        org.junit.Assert.assertNotNull(matrix22);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 2 + "'", int23 == 2);
        org.junit.Assert.assertNotNull(matrix25);
        org.junit.Assert.assertTrue("'" + double26 + "' != '" + 10.0d + "'", double26 == 10.0d);
        org.junit.Assert.assertNotNull(matrix29);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 2 + "'", int30 == 2);
        org.junit.Assert.assertNotNull(matrix32);
        org.junit.Assert.assertNotNull(matrix33);
        org.junit.Assert.assertNotNull(matrix34);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(matrix37);
        org.junit.Assert.assertNotNull(matrix40);
        org.junit.Assert.assertNotNull(matrix42);
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertArrayEquals(doubleArray45, new double[] { 137.90576492663388d, (-1.0d) }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray46);
        org.junit.Assert.assertArrayEquals(doubleArray46, new double[] { (-24.931892522286255d), (-135.63701830716116d) }, 1.0E-15);
        org.junit.Assert.assertNotNull(matrix49);
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertArrayEquals(doubleArray52, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertArrayEquals(doubleArray55, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray56);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 2 + "'", int58 == 2);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 2 + "'", int59 == 2);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 2 + "'", int60 == 2);
        org.junit.Assert.assertNotNull(matrixArray61);
        org.junit.Assert.assertNotNull(matrix62);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertNotNull(doubleArray65);
        org.junit.Assert.assertNotNull(matrix67);
        org.junit.Assert.assertNotNull(doubleArray70);
        org.junit.Assert.assertArrayEquals(doubleArray70, new double[] { 137.90576492663388d, (-1.0d) }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray71);
        org.junit.Assert.assertArrayEquals(doubleArray71, new double[] { (-24.931892522286255d), (-135.63701830716116d) }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray72);
        org.junit.Assert.assertArrayEquals(doubleArray72, new double[] { (-24.931892522286255d), (-135.63701830716116d) }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray73);
        org.junit.Assert.assertArrayEquals(doubleArray73, new double[] { (-2.4931892522286256d), (-13.563701830716116d) }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray74);
        org.junit.Assert.assertArrayEquals(doubleArray74, new double[] { (-2.7295287645732618d), (-13.518123861075072d) }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray75);
        org.junit.Assert.assertArrayEquals(doubleArray75, new double[] { 2.4931892522286256d, 13.563701830716116d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray76);
        org.junit.Assert.assertArrayEquals(doubleArray76, new double[] { (-7.123397863510359E-4d), (-13.565767962884136d) }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray77);
        org.junit.Assert.assertArrayEquals(doubleArray77, new double[] { 13.359797161918706d, 2.3549693676628785d }, 1.0E-15);
        org.junit.Assert.assertNotNull(wildcardClass78);
    }

    @Test
    public void test3714() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3714");
        com.operations.Matrix.Matrix matrix2 = new com.operations.Matrix.Matrix(100, (int) (byte) 0);
        int int3 = matrix2.getCols();
        // The following exception was thrown during execution in test generation
        try {
            com.operations.Matrix.Matrix matrix4 = com.operations.Matrix.MatrixDecompositions.choleskyDecomposition(matrix2);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Matrix must be square for Cholesky decomposition.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
    }

    @Test
    public void test3715() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3715");
        com.operations.Matrix.Matrix matrix4 = com.operations.Matrix.MatrixUtils.generateRandomMatrix((int) (byte) 10, (int) 'a', (int) '4', 32);
        org.junit.Assert.assertNotNull(matrix4);
    }

    @Test
    public void test3716() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3716");
        // The following exception was thrown during execution in test generation
        try {
            com.operations.Matrix.Matrix matrix4 = com.operations.Matrix.MatrixUtils.generateRandomMatrix((int) (byte) -1, (int) (byte) 100, (int) (short) 100, (int) (byte) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.NegativeArraySizeException; message: -1");
        } catch (java.lang.NegativeArraySizeException e) {
            // Expected exception.
        }
    }

    @Test
    public void test3717() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3717");
        double[] doubleArray2 = new double[] { 10, 'a' };
        double[] doubleArray5 = new double[] { 10, 'a' };
        double[][] doubleArray6 = new double[][] { doubleArray2, doubleArray5 };
        com.operations.Matrix.Matrix matrix7 = new com.operations.Matrix.Matrix(doubleArray6);
        com.operations.Matrix.Matrix matrix8 = new com.operations.Matrix.Matrix(doubleArray6);
        com.operations.Matrix.Matrix[] matrixArray9 = com.operations.Matrix.MatrixDecompositions.luDecomposition(matrix8);
        double double10 = com.operations.Matrix.MatrixUtils.frobeniusNorm(matrix8);
        double[] doubleArray13 = new double[] { 10, 'a' };
        double[] doubleArray16 = new double[] { 10, 'a' };
        double[][] doubleArray17 = new double[][] { doubleArray13, doubleArray16 };
        com.operations.Matrix.Matrix matrix18 = new com.operations.Matrix.Matrix(doubleArray17);
        com.operations.Matrix.Matrix matrix19 = new com.operations.Matrix.Matrix(doubleArray17);
        boolean boolean20 = com.operations.Matrix.MatrixUtils.isSquare(matrix19);
        double[] doubleArray23 = new double[] { 10, 'a' };
        double[] doubleArray26 = new double[] { 10, 'a' };
        double[][] doubleArray27 = new double[][] { doubleArray23, doubleArray26 };
        com.operations.Matrix.Matrix matrix28 = new com.operations.Matrix.Matrix(doubleArray27);
        int int29 = matrix28.getCols();
        int int30 = matrix28.getCols();
        matrix28.print();
        double[] doubleArray34 = new double[] { 10, 'a' };
        double[] doubleArray37 = new double[] { 10, 'a' };
        double[][] doubleArray38 = new double[][] { doubleArray34, doubleArray37 };
        com.operations.Matrix.Matrix matrix39 = new com.operations.Matrix.Matrix(doubleArray38);
        boolean boolean41 = com.operations.Matrix.MatrixUtils.compare(matrix28, matrix39, (double) (-1));
        com.operations.Matrix.Matrix matrix42 = com.operations.Matrix.MatrixOperations.subtract(matrix19, matrix39);
        com.operations.Matrix.Matrix[] matrixArray43 = com.operations.Matrix.MatrixDecompositions.luDecomposition(matrix42);
        double[][] doubleArray44 = matrix42.getData();
        com.operations.Matrix.Matrix matrix47 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0L, (double) (byte) 10);
        double[] doubleArray50 = new double[] { 10, 'a' };
        double[] doubleArray53 = new double[] { 10, 'a' };
        double[][] doubleArray54 = new double[][] { doubleArray50, doubleArray53 };
        com.operations.Matrix.Matrix matrix55 = new com.operations.Matrix.Matrix(doubleArray54);
        int int56 = matrix55.getCols();
        int int57 = matrix55.getCols();
        int int58 = matrix55.getCols();
        com.operations.Matrix.Matrix[] matrixArray59 = com.operations.Matrix.MatrixDecompositions.luDecomposition(matrix55);
        com.operations.Matrix.Matrix matrix60 = com.operations.Matrix.MatrixOperations.multiply(matrix47, matrix55);
        int int61 = matrix55.getRows();
        com.operations.Matrix.Matrix matrix62 = com.operations.Matrix.MatrixOperations.multiply(matrix42, matrix55);
        boolean boolean64 = com.operations.Matrix.MatrixUtils.compare(matrix8, matrix62, (double) 2);
        com.operations.Matrix.Matrix matrix65 = com.operations.Matrix.MatrixOperations.transpose(matrix62);
        double[] doubleArray68 = new double[] { 10, 'a' };
        double[] doubleArray71 = new double[] { 10, 'a' };
        double[][] doubleArray72 = new double[][] { doubleArray68, doubleArray71 };
        com.operations.Matrix.Matrix matrix73 = new com.operations.Matrix.Matrix(doubleArray72);
        int int74 = matrix73.getCols();
        int int75 = matrix73.getCols();
        int int76 = matrix73.getCols();
        com.operations.Matrix.Matrix matrix82 = com.operations.Matrix.MatrixUtils.generateRandomMatrix(100, (int) (byte) 1, (int) '#', (int) '#', 1L);
        double double85 = matrix82.getValue((int) '4', 0);
        double double86 = com.operations.Matrix.MatrixUtils.frobeniusNorm(matrix82);
        boolean boolean87 = com.operations.Matrix.MatrixUtils.isSquare(matrix82);
        boolean boolean89 = com.operations.Matrix.MatrixUtils.compare(matrix73, matrix82, (double) 100L);
        double[][] doubleArray90 = matrix73.getData();
        com.operations.Matrix.Matrix matrix91 = com.operations.Matrix.MatrixDecompositions.choleskyDecomposition(matrix73);
        com.operations.Matrix.Matrix matrix92 = com.operations.Matrix.MatrixOperations.subtract(matrix62, matrix73);
        int int93 = matrix92.getRows();
        int int94 = matrix92.getRows();
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertArrayEquals(doubleArray2, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertArrayEquals(doubleArray5, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertNotNull(matrixArray9);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 137.90576492663388d + "'", double10 == 137.90576492663388d);
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertArrayEquals(doubleArray13, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertArrayEquals(doubleArray16, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertArrayEquals(doubleArray23, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertArrayEquals(doubleArray26, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 2 + "'", int29 == 2);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 2 + "'", int30 == 2);
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertArrayEquals(doubleArray34, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertArrayEquals(doubleArray37, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(matrix42);
        org.junit.Assert.assertNotNull(matrixArray43);
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertNotNull(matrix47);
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertArrayEquals(doubleArray50, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertArrayEquals(doubleArray53, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray54);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 2 + "'", int56 == 2);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 2 + "'", int57 == 2);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 2 + "'", int58 == 2);
        org.junit.Assert.assertNotNull(matrixArray59);
        org.junit.Assert.assertNotNull(matrix60);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 2 + "'", int61 == 2);
        org.junit.Assert.assertNotNull(matrix62);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertNotNull(matrix65);
        org.junit.Assert.assertNotNull(doubleArray68);
        org.junit.Assert.assertArrayEquals(doubleArray68, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray71);
        org.junit.Assert.assertArrayEquals(doubleArray71, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray72);
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 2 + "'", int74 == 2);
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + 2 + "'", int75 == 2);
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 2 + "'", int76 == 2);
        org.junit.Assert.assertNotNull(matrix82);
        org.junit.Assert.assertTrue("'" + double85 + "' != '" + 35.0d + "'", double85 == 35.0d);
        org.junit.Assert.assertTrue("'" + double86 + "' != '" + 350.0d + "'", double86 == 350.0d);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + false + "'", boolean87 == false);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + false + "'", boolean89 == false);
        org.junit.Assert.assertNotNull(doubleArray90);
        org.junit.Assert.assertNotNull(matrix91);
        org.junit.Assert.assertNotNull(matrix92);
        org.junit.Assert.assertTrue("'" + int93 + "' != '" + 2 + "'", int93 == 2);
        org.junit.Assert.assertTrue("'" + int94 + "' != '" + 2 + "'", int94 == 2);
    }

    @Test
    public void test3718() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3718");
        com.operations.Matrix.Matrix matrix2 = com.operations.Matrix.MatrixTransformations.project2D(10.0d, (double) 1);
        double[][] doubleArray3 = matrix2.getData();
        com.operations.Matrix.Matrix matrix4 = new com.operations.Matrix.Matrix(doubleArray3);
        com.operations.Matrix.Matrix matrix6 = com.operations.Matrix.MatrixOperations.scalarMultiply(matrix4, (-1.0d));
        matrix6.print();
        com.operations.Matrix.Matrix matrix9 = com.operations.Matrix.MatrixTransformations.rotate2D((double) '4');
        double[] doubleArray12 = new double[] { 10, 'a' };
        double[] doubleArray15 = new double[] { 10, 'a' };
        double[][] doubleArray16 = new double[][] { doubleArray12, doubleArray15 };
        com.operations.Matrix.Matrix matrix17 = new com.operations.Matrix.Matrix(doubleArray16);
        com.operations.Matrix.Matrix matrix18 = new com.operations.Matrix.Matrix(doubleArray16);
        com.operations.Matrix.Matrix matrix20 = com.operations.Matrix.MatrixTransformations.rotate2D((double) (short) 100);
        double[] doubleArray23 = new double[] { 137.90576492663388d, (byte) -1 };
        double[] doubleArray24 = com.operations.Matrix.MatrixSolver.solveGaussian(matrix20, doubleArray23);
        com.operations.Matrix.Matrix matrix25 = com.operations.Matrix.MatrixOperations.add(matrix18, matrix20);
        boolean boolean26 = com.operations.Matrix.MatrixUtils.isSymmetric(matrix25);
        boolean boolean28 = com.operations.Matrix.MatrixUtils.compare(matrix9, matrix25, 364.0054944640259d);
        com.operations.Matrix.Matrix matrix31 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0L, (double) (byte) 10);
        double[] doubleArray34 = new double[] { 10, 'a' };
        double[] doubleArray37 = new double[] { 10, 'a' };
        double[][] doubleArray38 = new double[][] { doubleArray34, doubleArray37 };
        com.operations.Matrix.Matrix matrix39 = new com.operations.Matrix.Matrix(doubleArray38);
        int int40 = matrix39.getCols();
        int int41 = matrix39.getCols();
        int int42 = matrix39.getCols();
        com.operations.Matrix.Matrix[] matrixArray43 = com.operations.Matrix.MatrixDecompositions.luDecomposition(matrix39);
        com.operations.Matrix.Matrix matrix44 = com.operations.Matrix.MatrixOperations.multiply(matrix31, matrix39);
        com.operations.Matrix.Matrix matrix46 = com.operations.Matrix.MatrixTransformations.rotate2D((double) (short) 100);
        boolean boolean48 = com.operations.Matrix.MatrixUtils.compare(matrix39, matrix46, (double) (byte) 0);
        com.operations.Matrix.Matrix[] matrixArray49 = com.operations.Matrix.MatrixDecompositions.luDecomposition(matrix39);
        com.operations.Matrix.Matrix matrix50 = com.operations.Matrix.MatrixOperations.transpose(matrix39);
        com.operations.Matrix.Matrix matrix53 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0L, (double) (byte) 10);
        int int54 = matrix53.getRows();
        com.operations.Matrix.Matrix matrix57 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0L, (double) (byte) 10);
        int int58 = matrix57.getRows();
        com.operations.Matrix.Matrix matrix60 = com.operations.Matrix.MatrixOperations.scalarMultiply(matrix57, (double) 2);
        com.operations.Matrix.Matrix matrix61 = com.operations.Matrix.MatrixOperations.subtract(matrix53, matrix57);
        boolean boolean63 = com.operations.Matrix.MatrixUtils.compare(matrix39, matrix53, (double) ' ');
        boolean boolean65 = com.operations.Matrix.MatrixUtils.compare(matrix25, matrix39, (double) 0L);
        boolean boolean66 = com.operations.Matrix.MatrixUtils.isSymmetric(matrix39);
        com.operations.Matrix.Matrix matrix68 = com.operations.Matrix.MatrixTransformations.rotate2D(100.0d);
        int int69 = matrix68.getCols();
        com.operations.Matrix.Matrix matrix71 = com.operations.Matrix.MatrixOperations.scalarMultiply(matrix68, (double) ' ');
        com.operations.Matrix.Matrix matrix72 = com.operations.Matrix.MatrixOperations.multiply(matrix39, matrix68);
        com.operations.Matrix.Matrix matrix75 = com.operations.Matrix.MatrixTransformations.project2D(400.0d, 36.40054944640259d);
        com.operations.Matrix.Matrix matrix77 = com.operations.Matrix.MatrixTransformations.rotate2D(100.0d);
        int int78 = matrix77.getCols();
        matrix77.print();
        com.operations.Matrix.Matrix matrix81 = com.operations.Matrix.MatrixOperations.scalarMultiply(matrix77, (double) (byte) 1);
        com.operations.Matrix.Matrix matrix83 = com.operations.Matrix.MatrixTransformations.rotate2D(350.0d);
        com.operations.Matrix.Matrix matrix85 = com.operations.Matrix.MatrixTransformations.rotate2D((double) (short) 100);
        double[] doubleArray88 = new double[] { 137.90576492663388d, (byte) -1 };
        double[] doubleArray89 = com.operations.Matrix.MatrixSolver.solveGaussian(matrix85, doubleArray88);
        double[] doubleArray90 = com.operations.Matrix.MatrixSolver.solveGaussian(matrix83, doubleArray89);
        double[] doubleArray91 = com.operations.Matrix.MatrixSolver.solveGaussian(matrix77, doubleArray89);
        double[] doubleArray92 = com.operations.Matrix.MatrixSolver.solveGaussian(matrix75, doubleArray89);
        double[] doubleArray93 = com.operations.Matrix.MatrixSolver.solveGaussian(matrix68, doubleArray92);
        double[] doubleArray94 = com.operations.Matrix.MatrixSolver.solveGaussian(matrix6, doubleArray92);
        org.junit.Assert.assertNotNull(matrix2);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertNotNull(matrix6);
        org.junit.Assert.assertNotNull(matrix9);
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertArrayEquals(doubleArray12, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertArrayEquals(doubleArray15, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertNotNull(matrix20);
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertArrayEquals(doubleArray23, new double[] { 137.90576492663388d, (-1.0d) }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertArrayEquals(doubleArray24, new double[] { (-24.931892522286255d), (-135.63701830716116d) }, 1.0E-15);
        org.junit.Assert.assertNotNull(matrix25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertNotNull(matrix31);
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertArrayEquals(doubleArray34, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertArrayEquals(doubleArray37, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 2 + "'", int40 == 2);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 2 + "'", int41 == 2);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 2 + "'", int42 == 2);
        org.junit.Assert.assertNotNull(matrixArray43);
        org.junit.Assert.assertNotNull(matrix44);
        org.junit.Assert.assertNotNull(matrix46);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(matrixArray49);
        org.junit.Assert.assertNotNull(matrix50);
        org.junit.Assert.assertNotNull(matrix53);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 2 + "'", int54 == 2);
        org.junit.Assert.assertNotNull(matrix57);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 2 + "'", int58 == 2);
        org.junit.Assert.assertNotNull(matrix60);
        org.junit.Assert.assertNotNull(matrix61);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertNotNull(matrix68);
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 2 + "'", int69 == 2);
        org.junit.Assert.assertNotNull(matrix71);
        org.junit.Assert.assertNotNull(matrix72);
        org.junit.Assert.assertNotNull(matrix75);
        org.junit.Assert.assertNotNull(matrix77);
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + 2 + "'", int78 == 2);
        org.junit.Assert.assertNotNull(matrix81);
        org.junit.Assert.assertNotNull(matrix83);
        org.junit.Assert.assertNotNull(matrix85);
        org.junit.Assert.assertNotNull(doubleArray88);
        org.junit.Assert.assertArrayEquals(doubleArray88, new double[] { 137.90576492663388d, (-1.0d) }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray89);
        org.junit.Assert.assertArrayEquals(doubleArray89, new double[] { (-24.931892522286255d), (-135.63701830716116d) }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray90);
        org.junit.Assert.assertArrayEquals(doubleArray90, new double[] { (-0.9999999999999858d), (-137.90576492663388d) }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray91);
        org.junit.Assert.assertArrayEquals(doubleArray91, new double[] { (-129.24700952206834d), 48.1062421064292d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray92);
        org.junit.Assert.assertArrayEquals(doubleArray92, new double[] { (-0.06232973130571564d), (-3.7262354653980627d) }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray93);
        org.junit.Assert.assertArrayEquals(doubleArray93, new double[] { (-3.658802131617359d), 0.7084368007572961d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray94);
        org.junit.Assert.assertArrayEquals(doubleArray94, new double[] { 0.006232973130571564d, 3.7262354653980627d }, 1.0E-15);
    }

    @Test
    public void test3719() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3719");
        com.operations.Matrix.Matrix matrix2 = com.operations.Matrix.MatrixTransformations.project2D((double) ' ', 260.95643973734866d);
        org.junit.Assert.assertNotNull(matrix2);
    }

    @Test
    public void test3720() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3720");
        com.operations.Matrix.Matrix matrix2 = com.operations.Matrix.MatrixTransformations.project2D(3500.011571801086d, 130.28797221734817d);
        matrix2.print();
        boolean boolean4 = com.operations.Matrix.MatrixUtils.isSymmetric(matrix2);
        org.junit.Assert.assertNotNull(matrix2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
    }

    @Test
    public void test3721() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3721");
        double[] doubleArray2 = new double[] { 10, 'a' };
        double[] doubleArray5 = new double[] { 10, 'a' };
        double[][] doubleArray6 = new double[][] { doubleArray2, doubleArray5 };
        com.operations.Matrix.Matrix matrix7 = new com.operations.Matrix.Matrix(doubleArray6);
        com.operations.Matrix.Matrix matrix8 = new com.operations.Matrix.Matrix(doubleArray6);
        com.operations.Matrix.Matrix matrix10 = com.operations.Matrix.MatrixTransformations.rotate2D((double) (short) 100);
        double[] doubleArray13 = new double[] { 137.90576492663388d, (byte) -1 };
        double[] doubleArray14 = com.operations.Matrix.MatrixSolver.solveGaussian(matrix10, doubleArray13);
        com.operations.Matrix.Matrix matrix15 = com.operations.Matrix.MatrixOperations.add(matrix8, matrix10);
        com.operations.Matrix.Matrix matrix16 = com.operations.Matrix.MatrixOperations.transpose(matrix10);
        int int17 = matrix10.getCols();
        int int18 = matrix10.getRows();
        com.operations.Matrix.Matrix matrix21 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0L, (double) (byte) 10);
        double[] doubleArray24 = new double[] { 10, 'a' };
        double[] doubleArray27 = new double[] { 10, 'a' };
        double[][] doubleArray28 = new double[][] { doubleArray24, doubleArray27 };
        com.operations.Matrix.Matrix matrix29 = new com.operations.Matrix.Matrix(doubleArray28);
        int int30 = matrix29.getCols();
        int int31 = matrix29.getCols();
        int int32 = matrix29.getCols();
        com.operations.Matrix.Matrix[] matrixArray33 = com.operations.Matrix.MatrixDecompositions.luDecomposition(matrix29);
        com.operations.Matrix.Matrix matrix34 = com.operations.Matrix.MatrixOperations.multiply(matrix21, matrix29);
        com.operations.Matrix.Matrix matrix36 = com.operations.Matrix.MatrixTransformations.rotate2D((double) (short) 100);
        boolean boolean38 = com.operations.Matrix.MatrixUtils.compare(matrix29, matrix36, (double) (byte) 0);
        double[] doubleArray41 = new double[] { 10, 'a' };
        double[] doubleArray44 = new double[] { 10, 'a' };
        double[][] doubleArray45 = new double[][] { doubleArray41, doubleArray44 };
        com.operations.Matrix.Matrix matrix46 = new com.operations.Matrix.Matrix(doubleArray45);
        com.operations.Matrix.Matrix matrix47 = new com.operations.Matrix.Matrix(doubleArray45);
        com.operations.Matrix.Matrix matrix48 = new com.operations.Matrix.Matrix(doubleArray45);
        boolean boolean50 = com.operations.Matrix.MatrixUtils.compare(matrix29, matrix48, (double) (-1));
        double[] doubleArray53 = new double[] { 10, 'a' };
        double[] doubleArray56 = new double[] { 10, 'a' };
        double[][] doubleArray57 = new double[][] { doubleArray53, doubleArray56 };
        com.operations.Matrix.Matrix matrix58 = new com.operations.Matrix.Matrix(doubleArray57);
        com.operations.Matrix.Matrix matrix59 = new com.operations.Matrix.Matrix(doubleArray57);
        boolean boolean60 = com.operations.Matrix.MatrixUtils.isSquare(matrix59);
        com.operations.Matrix.Matrix matrix61 = com.operations.Matrix.MatrixOperations.multiply(matrix48, matrix59);
        com.operations.Matrix.Matrix matrix64 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0L, (double) (byte) 10);
        int int65 = matrix64.getRows();
        com.operations.Matrix.Matrix matrix67 = com.operations.Matrix.MatrixOperations.scalarMultiply(matrix64, (double) 2);
        matrix64.print();
        matrix64.print();
        com.operations.Matrix.Matrix matrix70 = com.operations.Matrix.MatrixOperations.multiply(matrix61, matrix64);
        com.operations.Matrix.Matrix matrix73 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0.0f, 350.0d);
        com.operations.Matrix.Matrix matrix76 = com.operations.Matrix.MatrixTransformations.project2D(0.0d, (double) 0);
        com.operations.Matrix.Matrix[] matrixArray77 = com.operations.Matrix.MatrixDecompositions.luDecomposition(matrix76);
        com.operations.Matrix.Matrix matrix80 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0L, (double) (byte) 10);
        int int81 = matrix80.getRows();
        com.operations.Matrix.Matrix matrix83 = com.operations.Matrix.MatrixOperations.scalarMultiply(matrix80, (double) 2);
        double double84 = com.operations.Matrix.MatrixUtils.frobeniusNorm(matrix80);
        int int85 = matrix80.getRows();
        com.operations.Matrix.Matrix matrix86 = com.operations.Matrix.MatrixOperations.transpose(matrix80);
        com.operations.Matrix.Matrix matrix87 = com.operations.Matrix.MatrixOperations.multiply(matrix76, matrix86);
        com.operations.Matrix.Matrix matrix88 = com.operations.Matrix.MatrixOperations.multiply(matrix73, matrix86);
        com.operations.Matrix.Matrix matrix89 = com.operations.Matrix.MatrixOperations.transpose(matrix88);
        double double90 = com.operations.Matrix.MatrixUtils.frobeniusNorm(matrix89);
        boolean boolean91 = com.operations.Matrix.MatrixUtils.isSymmetric(matrix89);
        com.operations.Matrix.Matrix matrix92 = com.operations.Matrix.MatrixOperations.add(matrix70, matrix89);
        com.operations.Matrix.Matrix matrix93 = com.operations.Matrix.MatrixOperations.multiply(matrix10, matrix89);
        matrix93.print();
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertArrayEquals(doubleArray2, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertArrayEquals(doubleArray5, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertNotNull(matrix10);
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertArrayEquals(doubleArray13, new double[] { 137.90576492663388d, (-1.0d) }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertArrayEquals(doubleArray14, new double[] { (-24.931892522286255d), (-135.63701830716116d) }, 1.0E-15);
        org.junit.Assert.assertNotNull(matrix15);
        org.junit.Assert.assertNotNull(matrix16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 2 + "'", int17 == 2);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 2 + "'", int18 == 2);
        org.junit.Assert.assertNotNull(matrix21);
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertArrayEquals(doubleArray24, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertArrayEquals(doubleArray27, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 2 + "'", int30 == 2);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 2 + "'", int31 == 2);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 2 + "'", int32 == 2);
        org.junit.Assert.assertNotNull(matrixArray33);
        org.junit.Assert.assertNotNull(matrix34);
        org.junit.Assert.assertNotNull(matrix36);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertArrayEquals(doubleArray41, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertArrayEquals(doubleArray44, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertArrayEquals(doubleArray53, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray56);
        org.junit.Assert.assertArrayEquals(doubleArray56, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray57);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + true + "'", boolean60 == true);
        org.junit.Assert.assertNotNull(matrix61);
        org.junit.Assert.assertNotNull(matrix64);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 2 + "'", int65 == 2);
        org.junit.Assert.assertNotNull(matrix67);
        org.junit.Assert.assertNotNull(matrix70);
        org.junit.Assert.assertNotNull(matrix73);
        org.junit.Assert.assertNotNull(matrix76);
        org.junit.Assert.assertNotNull(matrixArray77);
        org.junit.Assert.assertNotNull(matrix80);
        org.junit.Assert.assertTrue("'" + int81 + "' != '" + 2 + "'", int81 == 2);
        org.junit.Assert.assertNotNull(matrix83);
        org.junit.Assert.assertTrue("'" + double84 + "' != '" + 10.0d + "'", double84 == 10.0d);
        org.junit.Assert.assertTrue("'" + int85 + "' != '" + 2 + "'", int85 == 2);
        org.junit.Assert.assertNotNull(matrix86);
        org.junit.Assert.assertNotNull(matrix87);
        org.junit.Assert.assertNotNull(matrix88);
        org.junit.Assert.assertNotNull(matrix89);
        org.junit.Assert.assertTrue("'" + double90 + "' != '" + 3500.0d + "'", double90 == 3500.0d);
        org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + true + "'", boolean91 == true);
        org.junit.Assert.assertNotNull(matrix92);
        org.junit.Assert.assertNotNull(matrix93);
    }

    @Test
    public void test3722() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3722");
        com.operations.Matrix.Matrix matrix2 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0L, (double) (byte) 10);
        double[] doubleArray5 = new double[] { 10, 'a' };
        double[] doubleArray8 = new double[] { 10, 'a' };
        double[][] doubleArray9 = new double[][] { doubleArray5, doubleArray8 };
        com.operations.Matrix.Matrix matrix10 = new com.operations.Matrix.Matrix(doubleArray9);
        int int11 = matrix10.getCols();
        int int12 = matrix10.getCols();
        int int13 = matrix10.getCols();
        com.operations.Matrix.Matrix[] matrixArray14 = com.operations.Matrix.MatrixDecompositions.luDecomposition(matrix10);
        com.operations.Matrix.Matrix matrix15 = com.operations.Matrix.MatrixOperations.multiply(matrix2, matrix10);
        com.operations.Matrix.Matrix matrix17 = com.operations.Matrix.MatrixTransformations.rotate2D((double) (short) 100);
        boolean boolean19 = com.operations.Matrix.MatrixUtils.compare(matrix10, matrix17, (double) (byte) 0);
        com.operations.Matrix.Matrix[] matrixArray20 = com.operations.Matrix.MatrixDecompositions.luDecomposition(matrix10);
        com.operations.Matrix.Matrix matrix21 = com.operations.Matrix.MatrixDecompositions.choleskyDecomposition(matrix10);
        com.operations.Matrix.Matrix matrix22 = com.operations.Matrix.MatrixOperations.transpose(matrix21);
        com.operations.Matrix.Matrix matrix24 = com.operations.Matrix.MatrixOperations.scalarMultiply(matrix21, 0.984807753012208d);
        com.operations.Matrix.Matrix matrix26 = com.operations.Matrix.MatrixOperations.scalarMultiply(matrix24, 52.952809179494906d);
        org.junit.Assert.assertNotNull(matrix2);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertArrayEquals(doubleArray5, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertArrayEquals(doubleArray8, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 2 + "'", int11 == 2);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 2 + "'", int12 == 2);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 2 + "'", int13 == 2);
        org.junit.Assert.assertNotNull(matrixArray14);
        org.junit.Assert.assertNotNull(matrix15);
        org.junit.Assert.assertNotNull(matrix17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(matrixArray20);
        org.junit.Assert.assertNotNull(matrix21);
        org.junit.Assert.assertNotNull(matrix22);
        org.junit.Assert.assertNotNull(matrix24);
        org.junit.Assert.assertNotNull(matrix26);
    }

    @Test
    public void test3723() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3723");
        double[] doubleArray2 = new double[] { 10, 'a' };
        double[] doubleArray5 = new double[] { 10, 'a' };
        double[][] doubleArray6 = new double[][] { doubleArray2, doubleArray5 };
        com.operations.Matrix.Matrix matrix7 = new com.operations.Matrix.Matrix(doubleArray6);
        int int8 = matrix7.getCols();
        int int9 = matrix7.getCols();
        boolean boolean10 = com.operations.Matrix.MatrixUtils.isSquare(matrix7);
        com.operations.Matrix.Matrix matrix11 = com.operations.Matrix.MatrixDecompositions.choleskyDecomposition(matrix7);
        com.operations.Matrix.Matrix matrix14 = com.operations.Matrix.MatrixTransformations.project2D(0.0d, (double) 0);
        com.operations.Matrix.Matrix matrix15 = com.operations.Matrix.MatrixOperations.subtract(matrix11, matrix14);
        com.operations.Matrix.Matrix matrix16 = com.operations.Matrix.MatrixOperations.transpose(matrix14);
        double[] doubleArray19 = new double[] { 10, 'a' };
        double[] doubleArray22 = new double[] { 10, 'a' };
        double[][] doubleArray23 = new double[][] { doubleArray19, doubleArray22 };
        com.operations.Matrix.Matrix matrix24 = new com.operations.Matrix.Matrix(doubleArray23);
        int int25 = matrix24.getCols();
        int int26 = matrix24.getCols();
        boolean boolean27 = com.operations.Matrix.MatrixUtils.isSquare(matrix24);
        com.operations.Matrix.Matrix matrix28 = com.operations.Matrix.MatrixDecompositions.choleskyDecomposition(matrix24);
        com.operations.Matrix.Matrix matrix31 = com.operations.Matrix.MatrixTransformations.project2D(0.0d, (double) 0);
        com.operations.Matrix.Matrix matrix32 = com.operations.Matrix.MatrixOperations.subtract(matrix28, matrix31);
        com.operations.Matrix.Matrix matrix34 = com.operations.Matrix.MatrixOperations.scalarMultiply(matrix28, (double) 1.0f);
        int int35 = matrix34.getCols();
        com.operations.Matrix.Matrix matrix36 = com.operations.Matrix.MatrixOperations.subtract(matrix16, matrix34);
        com.operations.Matrix.Matrix[] matrixArray37 = com.operations.Matrix.MatrixDecompositions.luDecomposition(matrix34);
        // The following exception was thrown during execution in test generation
        try {
            matrix34.setValue((int) (short) -1, (int) '4', 104.9952379872535d);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: Index -1 out of bounds for length 2");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertArrayEquals(doubleArray2, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertArrayEquals(doubleArray5, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 2 + "'", int8 == 2);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 2 + "'", int9 == 2);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(matrix11);
        org.junit.Assert.assertNotNull(matrix14);
        org.junit.Assert.assertNotNull(matrix15);
        org.junit.Assert.assertNotNull(matrix16);
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertArrayEquals(doubleArray19, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertArrayEquals(doubleArray22, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 2 + "'", int25 == 2);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 2 + "'", int26 == 2);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertNotNull(matrix28);
        org.junit.Assert.assertNotNull(matrix31);
        org.junit.Assert.assertNotNull(matrix32);
        org.junit.Assert.assertNotNull(matrix34);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 2 + "'", int35 == 2);
        org.junit.Assert.assertNotNull(matrix36);
        org.junit.Assert.assertNotNull(matrixArray37);
    }

    @Test
    public void test3724() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3724");
        com.operations.Matrix.Matrix matrix5 = com.operations.Matrix.MatrixUtils.generateRandomMatrix((int) (short) 10, 2, (int) (short) -1, (int) (short) 100, (long) '4');
        // The following exception was thrown during execution in test generation
        try {
            com.operations.Matrix.Matrix[] matrixArray6 = com.operations.Matrix.MatrixDecompositions.luDecomposition(matrix5);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Matrix must be square for LU decomposition.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(matrix5);
    }

    @Test
    public void test3725() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3725");
        com.operations.Matrix.Matrix matrix5 = com.operations.Matrix.MatrixUtils.generateRandomMatrix(100, (int) (byte) 1, (int) '#', (int) '#', 1L);
        com.operations.Matrix.Matrix matrix7 = com.operations.Matrix.MatrixTransformations.rotate2D((double) (short) 100);
        double[] doubleArray10 = new double[] { 137.90576492663388d, (byte) -1 };
        double[] doubleArray11 = com.operations.Matrix.MatrixSolver.solveGaussian(matrix7, doubleArray10);
        com.operations.Matrix.Matrix matrix14 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0L, (double) (byte) 10);
        double[] doubleArray17 = new double[] { 10, 'a' };
        double[] doubleArray20 = new double[] { 10, 'a' };
        double[][] doubleArray21 = new double[][] { doubleArray17, doubleArray20 };
        com.operations.Matrix.Matrix matrix22 = new com.operations.Matrix.Matrix(doubleArray21);
        int int23 = matrix22.getCols();
        int int24 = matrix22.getCols();
        int int25 = matrix22.getCols();
        com.operations.Matrix.Matrix[] matrixArray26 = com.operations.Matrix.MatrixDecompositions.luDecomposition(matrix22);
        com.operations.Matrix.Matrix matrix27 = com.operations.Matrix.MatrixOperations.multiply(matrix14, matrix22);
        boolean boolean29 = com.operations.Matrix.MatrixUtils.compare(matrix7, matrix14, (double) (-1L));
        double[][] doubleArray30 = matrix7.getData();
        matrix7.print();
        com.operations.Matrix.Matrix matrix33 = com.operations.Matrix.MatrixOperations.scalarMultiply(matrix7, (double) (-1));
        double double34 = com.operations.Matrix.MatrixUtils.frobeniusNorm(matrix33);
        // The following exception was thrown during execution in test generation
        try {
            com.operations.Matrix.Matrix matrix35 = com.operations.Matrix.MatrixOperations.add(matrix5, matrix33);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Matrices must have the same dimensions for addition.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(matrix5);
        org.junit.Assert.assertNotNull(matrix7);
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertArrayEquals(doubleArray10, new double[] { 137.90576492663388d, (-1.0d) }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertArrayEquals(doubleArray11, new double[] { (-24.931892522286255d), (-135.63701830716116d) }, 1.0E-15);
        org.junit.Assert.assertNotNull(matrix14);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertArrayEquals(doubleArray17, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertArrayEquals(doubleArray20, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 2 + "'", int23 == 2);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 2 + "'", int24 == 2);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 2 + "'", int25 == 2);
        org.junit.Assert.assertNotNull(matrixArray26);
        org.junit.Assert.assertNotNull(matrix27);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertNotNull(matrix33);
        org.junit.Assert.assertTrue("'" + double34 + "' != '" + 1.414213562373095d + "'", double34 == 1.414213562373095d);
    }

    @Test
    public void test3726() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3726");
        com.operations.Matrix.Matrix matrix2 = com.operations.Matrix.MatrixTransformations.scale2D(104.9952379872535d, 1.4142135623730951d);
        org.junit.Assert.assertNotNull(matrix2);
    }

    @Test
    public void test3727() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3727");
        double[] doubleArray2 = new double[] { 10, 'a' };
        double[] doubleArray5 = new double[] { 10, 'a' };
        double[][] doubleArray6 = new double[][] { doubleArray2, doubleArray5 };
        com.operations.Matrix.Matrix matrix7 = new com.operations.Matrix.Matrix(doubleArray6);
        com.operations.Matrix.Matrix matrix8 = new com.operations.Matrix.Matrix(doubleArray6);
        com.operations.Matrix.Matrix[] matrixArray9 = com.operations.Matrix.MatrixDecompositions.luDecomposition(matrix8);
        com.operations.Matrix.Matrix matrix12 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0, (double) 100L);
        com.operations.Matrix.Matrix matrix13 = com.operations.Matrix.MatrixOperations.subtract(matrix8, matrix12);
        double[][] doubleArray14 = matrix13.getData();
        com.operations.Matrix.Matrix matrix15 = new com.operations.Matrix.Matrix(doubleArray14);
        com.operations.Matrix.Matrix matrix17 = com.operations.Matrix.MatrixTransformations.rotate2D(100.0d);
        com.operations.Matrix.Matrix matrix18 = com.operations.Matrix.MatrixOperations.subtract(matrix15, matrix17);
        // The following exception was thrown during execution in test generation
        try {
            double double21 = matrix15.getValue((int) (short) 10, 10);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertArrayEquals(doubleArray2, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertArrayEquals(doubleArray5, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertNotNull(matrixArray9);
        org.junit.Assert.assertNotNull(matrix12);
        org.junit.Assert.assertNotNull(matrix13);
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertNotNull(matrix17);
        org.junit.Assert.assertNotNull(matrix18);
    }

    @Test
    public void test3728() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3728");
        com.operations.Matrix.Matrix matrix2 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0L, (double) (byte) 10);
        int int3 = matrix2.getRows();
        com.operations.Matrix.Matrix matrix6 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0L, (double) (byte) 10);
        int int7 = matrix6.getRows();
        com.operations.Matrix.Matrix matrix9 = com.operations.Matrix.MatrixOperations.scalarMultiply(matrix6, (double) 2);
        com.operations.Matrix.Matrix matrix10 = com.operations.Matrix.MatrixOperations.subtract(matrix2, matrix6);
        com.operations.Matrix.Matrix matrix13 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0L, (double) (byte) 10);
        int int14 = matrix13.getRows();
        com.operations.Matrix.Matrix matrix20 = com.operations.Matrix.MatrixUtils.generateRandomMatrix(100, (int) (byte) 1, (int) '#', (int) '#', 1L);
        boolean boolean22 = com.operations.Matrix.MatrixUtils.compare(matrix13, matrix20, (double) 1.0f);
        com.operations.Matrix.Matrix matrix24 = com.operations.Matrix.MatrixOperations.scalarMultiply(matrix13, (double) 1L);
        boolean boolean26 = com.operations.Matrix.MatrixUtils.compare(matrix10, matrix24, 0.0d);
        int int27 = matrix24.getCols();
        com.operations.Matrix.Matrix matrix28 = com.operations.Matrix.MatrixOperations.transpose(matrix24);
        double double29 = com.operations.Matrix.MatrixUtils.frobeniusNorm(matrix28);
        com.operations.Matrix.Matrix matrix31 = com.operations.Matrix.MatrixOperations.scalarMultiply(matrix28, 0.01745240643728351d);
        double[][] doubleArray32 = matrix31.getData();
        double[][] doubleArray33 = matrix31.getData();
        boolean boolean34 = com.operations.Matrix.MatrixUtils.isSquare(matrix31);
        org.junit.Assert.assertNotNull(matrix2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 2 + "'", int3 == 2);
        org.junit.Assert.assertNotNull(matrix6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 2 + "'", int7 == 2);
        org.junit.Assert.assertNotNull(matrix9);
        org.junit.Assert.assertNotNull(matrix10);
        org.junit.Assert.assertNotNull(matrix13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 2 + "'", int14 == 2);
        org.junit.Assert.assertNotNull(matrix20);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(matrix24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 2 + "'", int27 == 2);
        org.junit.Assert.assertNotNull(matrix28);
        org.junit.Assert.assertTrue("'" + double29 + "' != '" + 10.0d + "'", double29 == 10.0d);
        org.junit.Assert.assertNotNull(matrix31);
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
    }

    @Test
    public void test3729() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3729");
        double[] doubleArray2 = new double[] { 10, 'a' };
        double[] doubleArray5 = new double[] { 10, 'a' };
        double[][] doubleArray6 = new double[][] { doubleArray2, doubleArray5 };
        com.operations.Matrix.Matrix matrix7 = new com.operations.Matrix.Matrix(doubleArray6);
        int int8 = matrix7.getCols();
        int int9 = matrix7.getCols();
        matrix7.print();
        double[] doubleArray13 = new double[] { 10, 'a' };
        double[] doubleArray16 = new double[] { 10, 'a' };
        double[][] doubleArray17 = new double[][] { doubleArray13, doubleArray16 };
        com.operations.Matrix.Matrix matrix18 = new com.operations.Matrix.Matrix(doubleArray17);
        boolean boolean20 = com.operations.Matrix.MatrixUtils.compare(matrix7, matrix18, (double) (-1));
        com.operations.Matrix.Matrix matrix21 = com.operations.Matrix.MatrixDecompositions.choleskyDecomposition(matrix18);
        com.operations.Matrix.Matrix matrix23 = com.operations.Matrix.MatrixOperations.scalarMultiply(matrix21, 32.0d);
        com.operations.Matrix.Matrix matrix24 = com.operations.Matrix.MatrixDecompositions.choleskyDecomposition(matrix21);
        com.operations.Matrix.Matrix matrix25 = com.operations.Matrix.MatrixOperations.transpose(matrix24);
        com.operations.Matrix.Matrix matrix28 = com.operations.Matrix.MatrixTransformations.project2D((double) '#', 364.0054944640259d);
        com.operations.Matrix.Matrix matrix29 = com.operations.Matrix.MatrixDecompositions.choleskyDecomposition(matrix28);
        matrix28.print();
        int int31 = matrix28.getRows();
        com.operations.Matrix.Matrix matrix32 = com.operations.Matrix.MatrixOperations.add(matrix24, matrix28);
        com.operations.Matrix.Matrix matrix35 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0L, (double) (byte) 10);
        double[] doubleArray38 = new double[] { 10, 'a' };
        double[] doubleArray41 = new double[] { 10, 'a' };
        double[][] doubleArray42 = new double[][] { doubleArray38, doubleArray41 };
        com.operations.Matrix.Matrix matrix43 = new com.operations.Matrix.Matrix(doubleArray42);
        int int44 = matrix43.getCols();
        int int45 = matrix43.getCols();
        int int46 = matrix43.getCols();
        com.operations.Matrix.Matrix[] matrixArray47 = com.operations.Matrix.MatrixDecompositions.luDecomposition(matrix43);
        com.operations.Matrix.Matrix matrix48 = com.operations.Matrix.MatrixOperations.multiply(matrix35, matrix43);
        com.operations.Matrix.Matrix matrix50 = com.operations.Matrix.MatrixTransformations.rotate2D((double) (short) 100);
        boolean boolean52 = com.operations.Matrix.MatrixUtils.compare(matrix43, matrix50, (double) (byte) 0);
        com.operations.Matrix.Matrix[] matrixArray53 = com.operations.Matrix.MatrixDecompositions.luDecomposition(matrix43);
        com.operations.Matrix.Matrix matrix54 = com.operations.Matrix.MatrixOperations.transpose(matrix43);
        com.operations.Matrix.Matrix matrix57 = com.operations.Matrix.MatrixTransformations.scale2D((double) 1.0f, (double) 1);
        com.operations.Matrix.Matrix matrix59 = com.operations.Matrix.MatrixTransformations.rotate2D((double) 1.0f);
        com.operations.Matrix.Matrix matrix62 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0L, (double) (byte) 10);
        int int63 = matrix62.getRows();
        com.operations.Matrix.Matrix matrix65 = com.operations.Matrix.MatrixOperations.scalarMultiply(matrix62, (double) 2);
        double double66 = com.operations.Matrix.MatrixUtils.frobeniusNorm(matrix62);
        com.operations.Matrix.Matrix matrix69 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0L, (double) (byte) 10);
        int int70 = matrix69.getRows();
        com.operations.Matrix.Matrix matrix72 = com.operations.Matrix.MatrixOperations.scalarMultiply(matrix69, (double) 2);
        com.operations.Matrix.Matrix matrix73 = com.operations.Matrix.MatrixOperations.subtract(matrix62, matrix72);
        com.operations.Matrix.Matrix matrix74 = com.operations.Matrix.MatrixOperations.add(matrix59, matrix72);
        boolean boolean76 = com.operations.Matrix.MatrixUtils.compare(matrix57, matrix59, (double) (byte) -1);
        com.operations.Matrix.Matrix matrix77 = com.operations.Matrix.MatrixOperations.subtract(matrix54, matrix57);
        com.operations.Matrix.Matrix matrix78 = com.operations.Matrix.MatrixOperations.multiply(matrix28, matrix54);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertArrayEquals(doubleArray2, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertArrayEquals(doubleArray5, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 2 + "'", int8 == 2);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 2 + "'", int9 == 2);
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertArrayEquals(doubleArray13, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertArrayEquals(doubleArray16, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(matrix21);
        org.junit.Assert.assertNotNull(matrix23);
        org.junit.Assert.assertNotNull(matrix24);
        org.junit.Assert.assertNotNull(matrix25);
        org.junit.Assert.assertNotNull(matrix28);
        org.junit.Assert.assertNotNull(matrix29);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 2 + "'", int31 == 2);
        org.junit.Assert.assertNotNull(matrix32);
        org.junit.Assert.assertNotNull(matrix35);
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertArrayEquals(doubleArray38, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertArrayEquals(doubleArray41, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 2 + "'", int44 == 2);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 2 + "'", int45 == 2);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 2 + "'", int46 == 2);
        org.junit.Assert.assertNotNull(matrixArray47);
        org.junit.Assert.assertNotNull(matrix48);
        org.junit.Assert.assertNotNull(matrix50);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(matrixArray53);
        org.junit.Assert.assertNotNull(matrix54);
        org.junit.Assert.assertNotNull(matrix57);
        org.junit.Assert.assertNotNull(matrix59);
        org.junit.Assert.assertNotNull(matrix62);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 2 + "'", int63 == 2);
        org.junit.Assert.assertNotNull(matrix65);
        org.junit.Assert.assertTrue("'" + double66 + "' != '" + 10.0d + "'", double66 == 10.0d);
        org.junit.Assert.assertNotNull(matrix69);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 2 + "'", int70 == 2);
        org.junit.Assert.assertNotNull(matrix72);
        org.junit.Assert.assertNotNull(matrix73);
        org.junit.Assert.assertNotNull(matrix74);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertNotNull(matrix77);
        org.junit.Assert.assertNotNull(matrix78);
    }

    @Test
    public void test3730() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3730");
        com.operations.Matrix.Matrix matrix5 = com.operations.Matrix.MatrixUtils.generateRandomMatrix((int) ' ', (int) '#', (int) (byte) 10, (int) (short) 0, (long) (short) 1);
        boolean boolean6 = com.operations.Matrix.MatrixUtils.isSymmetric(matrix5);
        com.operations.Matrix.Matrix matrix8 = com.operations.Matrix.MatrixOperations.scalarMultiply(matrix5, 100.00499987500625d);
        boolean boolean9 = com.operations.Matrix.MatrixUtils.isSquare(matrix8);
        com.operations.Matrix.Matrix matrix12 = com.operations.Matrix.MatrixTransformations.scale2D((double) 1.0f, (double) 1);
        com.operations.Matrix.Matrix matrix14 = com.operations.Matrix.MatrixTransformations.rotate2D((double) 1.0f);
        com.operations.Matrix.Matrix matrix17 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0L, (double) (byte) 10);
        int int18 = matrix17.getRows();
        com.operations.Matrix.Matrix matrix20 = com.operations.Matrix.MatrixOperations.scalarMultiply(matrix17, (double) 2);
        double double21 = com.operations.Matrix.MatrixUtils.frobeniusNorm(matrix17);
        com.operations.Matrix.Matrix matrix24 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0L, (double) (byte) 10);
        int int25 = matrix24.getRows();
        com.operations.Matrix.Matrix matrix27 = com.operations.Matrix.MatrixOperations.scalarMultiply(matrix24, (double) 2);
        com.operations.Matrix.Matrix matrix28 = com.operations.Matrix.MatrixOperations.subtract(matrix17, matrix27);
        com.operations.Matrix.Matrix matrix29 = com.operations.Matrix.MatrixOperations.add(matrix14, matrix27);
        boolean boolean31 = com.operations.Matrix.MatrixUtils.compare(matrix12, matrix14, (double) (byte) -1);
        com.operations.Matrix.Matrix matrix32 = com.operations.Matrix.MatrixOperations.transpose(matrix14);
        com.operations.Matrix.Matrix matrix35 = com.operations.Matrix.MatrixTransformations.project2D((double) 10L, 10.0d);
        com.operations.Matrix.Matrix matrix37 = com.operations.Matrix.MatrixTransformations.rotate2D((double) (short) 100);
        double[] doubleArray40 = new double[] { 137.90576492663388d, (byte) -1 };
        double[] doubleArray41 = com.operations.Matrix.MatrixSolver.solveGaussian(matrix37, doubleArray40);
        com.operations.Matrix.Matrix matrix44 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0L, (double) (byte) 10);
        double[] doubleArray47 = new double[] { 10, 'a' };
        double[] doubleArray50 = new double[] { 10, 'a' };
        double[][] doubleArray51 = new double[][] { doubleArray47, doubleArray50 };
        com.operations.Matrix.Matrix matrix52 = new com.operations.Matrix.Matrix(doubleArray51);
        int int53 = matrix52.getCols();
        int int54 = matrix52.getCols();
        int int55 = matrix52.getCols();
        com.operations.Matrix.Matrix[] matrixArray56 = com.operations.Matrix.MatrixDecompositions.luDecomposition(matrix52);
        com.operations.Matrix.Matrix matrix57 = com.operations.Matrix.MatrixOperations.multiply(matrix44, matrix52);
        boolean boolean59 = com.operations.Matrix.MatrixUtils.compare(matrix37, matrix44, (double) (-1L));
        double[][] doubleArray60 = matrix37.getData();
        com.operations.Matrix.Matrix matrix62 = com.operations.Matrix.MatrixTransformations.rotate2D((double) (short) 100);
        double[] doubleArray65 = new double[] { 137.90576492663388d, (byte) -1 };
        double[] doubleArray66 = com.operations.Matrix.MatrixSolver.solveGaussian(matrix62, doubleArray65);
        double[] doubleArray67 = com.operations.Matrix.MatrixSolver.solveGaussian(matrix37, doubleArray65);
        double[] doubleArray68 = com.operations.Matrix.MatrixSolver.solveGaussian(matrix35, doubleArray67);
        double[] doubleArray69 = com.operations.Matrix.MatrixSolver.solveGaussian(matrix14, doubleArray68);
        com.operations.Matrix.Matrix matrix70 = com.operations.Matrix.MatrixDecompositions.choleskyDecomposition(matrix14);
        int int71 = matrix70.getCols();
        com.operations.Matrix.Matrix matrix77 = com.operations.Matrix.MatrixUtils.generateRandomMatrix(100, (int) (byte) 1, (int) '#', (int) '#', 1L);
        double double80 = matrix77.getValue((int) '4', 0);
        double double81 = com.operations.Matrix.MatrixUtils.frobeniusNorm(matrix77);
        int int82 = matrix77.getCols();
        boolean boolean83 = com.operations.Matrix.MatrixUtils.isSymmetric(matrix77);
        boolean boolean85 = com.operations.Matrix.MatrixUtils.compare(matrix70, matrix77, (double) (short) 10);
        boolean boolean87 = com.operations.Matrix.MatrixUtils.compare(matrix8, matrix77, 0.0d);
        org.junit.Assert.assertNotNull(matrix5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(matrix8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(matrix12);
        org.junit.Assert.assertNotNull(matrix14);
        org.junit.Assert.assertNotNull(matrix17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 2 + "'", int18 == 2);
        org.junit.Assert.assertNotNull(matrix20);
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 10.0d + "'", double21 == 10.0d);
        org.junit.Assert.assertNotNull(matrix24);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 2 + "'", int25 == 2);
        org.junit.Assert.assertNotNull(matrix27);
        org.junit.Assert.assertNotNull(matrix28);
        org.junit.Assert.assertNotNull(matrix29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(matrix32);
        org.junit.Assert.assertNotNull(matrix35);
        org.junit.Assert.assertNotNull(matrix37);
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertArrayEquals(doubleArray40, new double[] { 137.90576492663388d, (-1.0d) }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertArrayEquals(doubleArray41, new double[] { (-24.931892522286255d), (-135.63701830716116d) }, 1.0E-15);
        org.junit.Assert.assertNotNull(matrix44);
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertArrayEquals(doubleArray47, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertArrayEquals(doubleArray50, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 2 + "'", int53 == 2);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 2 + "'", int54 == 2);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 2 + "'", int55 == 2);
        org.junit.Assert.assertNotNull(matrixArray56);
        org.junit.Assert.assertNotNull(matrix57);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNotNull(doubleArray60);
        org.junit.Assert.assertNotNull(matrix62);
        org.junit.Assert.assertNotNull(doubleArray65);
        org.junit.Assert.assertArrayEquals(doubleArray65, new double[] { 137.90576492663388d, (-1.0d) }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray66);
        org.junit.Assert.assertArrayEquals(doubleArray66, new double[] { (-24.931892522286255d), (-135.63701830716116d) }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray67);
        org.junit.Assert.assertArrayEquals(doubleArray67, new double[] { (-24.931892522286255d), (-135.63701830716116d) }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray68);
        org.junit.Assert.assertArrayEquals(doubleArray68, new double[] { (-2.4931892522286256d), (-13.563701830716116d) }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray69);
        org.junit.Assert.assertArrayEquals(doubleArray69, new double[] { (-2.7295287645732618d), (-13.518123861075072d) }, 1.0E-15);
        org.junit.Assert.assertNotNull(matrix70);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 2 + "'", int71 == 2);
        org.junit.Assert.assertNotNull(matrix77);
        org.junit.Assert.assertTrue("'" + double80 + "' != '" + 35.0d + "'", double80 == 35.0d);
        org.junit.Assert.assertTrue("'" + double81 + "' != '" + 350.0d + "'", double81 == 350.0d);
        org.junit.Assert.assertTrue("'" + int82 + "' != '" + 1 + "'", int82 == 1);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + false + "'", boolean87 == false);
    }

    @Test
    public void test3731() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3731");
        com.operations.Matrix.Matrix matrix1 = com.operations.Matrix.MatrixTransformations.rotate2D(0.984807753012208d);
        com.operations.Matrix.Matrix matrix3 = com.operations.Matrix.MatrixTransformations.rotate2D((double) 1.0f);
        com.operations.Matrix.Matrix matrix6 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0L, (double) (byte) 10);
        int int7 = matrix6.getRows();
        com.operations.Matrix.Matrix matrix9 = com.operations.Matrix.MatrixOperations.scalarMultiply(matrix6, (double) 2);
        double double10 = com.operations.Matrix.MatrixUtils.frobeniusNorm(matrix6);
        com.operations.Matrix.Matrix matrix13 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0L, (double) (byte) 10);
        int int14 = matrix13.getRows();
        com.operations.Matrix.Matrix matrix16 = com.operations.Matrix.MatrixOperations.scalarMultiply(matrix13, (double) 2);
        com.operations.Matrix.Matrix matrix17 = com.operations.Matrix.MatrixOperations.subtract(matrix6, matrix16);
        com.operations.Matrix.Matrix matrix18 = com.operations.Matrix.MatrixOperations.add(matrix3, matrix16);
        matrix3.print();
        double[] doubleArray22 = new double[] { 10, 'a' };
        double[] doubleArray25 = new double[] { 10, 'a' };
        double[][] doubleArray26 = new double[][] { doubleArray22, doubleArray25 };
        com.operations.Matrix.Matrix matrix27 = new com.operations.Matrix.Matrix(doubleArray26);
        com.operations.Matrix.Matrix matrix28 = com.operations.Matrix.MatrixOperations.transpose(matrix27);
        com.operations.Matrix.Matrix matrix31 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0L, (double) (byte) 10);
        int int32 = matrix31.getRows();
        com.operations.Matrix.Matrix matrix38 = com.operations.Matrix.MatrixUtils.generateRandomMatrix(100, (int) (byte) 1, (int) '#', (int) '#', 1L);
        boolean boolean40 = com.operations.Matrix.MatrixUtils.compare(matrix31, matrix38, (double) 1.0f);
        com.operations.Matrix.Matrix matrix42 = com.operations.Matrix.MatrixOperations.scalarMultiply(matrix31, (double) 1L);
        matrix31.print();
        com.operations.Matrix.Matrix matrix44 = com.operations.Matrix.MatrixOperations.multiply(matrix28, matrix31);
        com.operations.Matrix.Matrix matrix45 = com.operations.Matrix.MatrixOperations.multiply(matrix3, matrix31);
        com.operations.Matrix.Matrix matrix46 = com.operations.Matrix.MatrixOperations.add(matrix1, matrix31);
        com.operations.Matrix.Matrix matrix48 = com.operations.Matrix.MatrixTransformations.rotate2D((double) 32);
        com.operations.Matrix.Matrix matrix49 = com.operations.Matrix.MatrixOperations.add(matrix1, matrix48);
        com.operations.Matrix.Matrix matrix50 = com.operations.Matrix.MatrixDecompositions.choleskyDecomposition(matrix48);
        double double51 = com.operations.Matrix.MatrixUtils.frobeniusNorm(matrix48);
        org.junit.Assert.assertNotNull(matrix1);
        org.junit.Assert.assertNotNull(matrix3);
        org.junit.Assert.assertNotNull(matrix6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 2 + "'", int7 == 2);
        org.junit.Assert.assertNotNull(matrix9);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 10.0d + "'", double10 == 10.0d);
        org.junit.Assert.assertNotNull(matrix13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 2 + "'", int14 == 2);
        org.junit.Assert.assertNotNull(matrix16);
        org.junit.Assert.assertNotNull(matrix17);
        org.junit.Assert.assertNotNull(matrix18);
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertArrayEquals(doubleArray22, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertArrayEquals(doubleArray25, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertNotNull(matrix28);
        org.junit.Assert.assertNotNull(matrix31);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 2 + "'", int32 == 2);
        org.junit.Assert.assertNotNull(matrix38);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(matrix42);
        org.junit.Assert.assertNotNull(matrix44);
        org.junit.Assert.assertNotNull(matrix45);
        org.junit.Assert.assertNotNull(matrix46);
        org.junit.Assert.assertNotNull(matrix48);
        org.junit.Assert.assertNotNull(matrix49);
        org.junit.Assert.assertNotNull(matrix50);
        org.junit.Assert.assertTrue("'" + double51 + "' != '" + 1.4142135623730951d + "'", double51 == 1.4142135623730951d);
    }

    @Test
    public void test3732() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3732");
        com.operations.Matrix.Matrix matrix4 = com.operations.Matrix.MatrixUtils.generateRandomMatrix(35, (int) (byte) 10, 10, 0);
        boolean boolean5 = com.operations.Matrix.MatrixUtils.isSquare(matrix4);
        int int6 = matrix4.getCols();
        int int7 = matrix4.getCols();
        org.junit.Assert.assertNotNull(matrix4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 10 + "'", int6 == 10);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 10 + "'", int7 == 10);
    }

    @Test
    public void test3733() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3733");
        double[] doubleArray2 = new double[] { 10, 'a' };
        double[] doubleArray5 = new double[] { 10, 'a' };
        double[][] doubleArray6 = new double[][] { doubleArray2, doubleArray5 };
        com.operations.Matrix.Matrix matrix7 = new com.operations.Matrix.Matrix(doubleArray6);
        com.operations.Matrix.Matrix matrix8 = new com.operations.Matrix.Matrix(doubleArray6);
        com.operations.Matrix.Matrix[] matrixArray9 = com.operations.Matrix.MatrixDecompositions.luDecomposition(matrix8);
        double double10 = com.operations.Matrix.MatrixUtils.frobeniusNorm(matrix8);
        int int11 = matrix8.getRows();
        com.operations.Matrix.Matrix matrix13 = com.operations.Matrix.MatrixOperations.scalarMultiply(matrix8, 400.0d);
        double[][] doubleArray14 = matrix13.getData();
        boolean boolean15 = com.operations.Matrix.MatrixUtils.isSymmetric(matrix13);
        // The following exception was thrown during execution in test generation
        try {
            double double18 = matrix13.getValue((int) '#', (int) (byte) 10);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertArrayEquals(doubleArray2, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertArrayEquals(doubleArray5, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertNotNull(matrixArray9);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 137.90576492663388d + "'", double10 == 137.90576492663388d);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 2 + "'", int11 == 2);
        org.junit.Assert.assertNotNull(matrix13);
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
    }

    @Test
    public void test3734() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3734");
        com.operations.Matrix.Matrix matrix5 = com.operations.Matrix.MatrixUtils.generateRandomMatrix((int) (byte) 1, (int) 'a', 100, (int) (byte) 1, (long) (short) 1);
        matrix5.print();
        matrix5.print();
        // The following exception was thrown during execution in test generation
        try {
            com.operations.Matrix.Matrix matrix8 = com.operations.Matrix.MatrixDecompositions.choleskyDecomposition(matrix5);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Matrix must be square for Cholesky decomposition.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(matrix5);
    }

    @Test
    public void test3735() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3735");
        com.operations.Matrix.Matrix matrix2 = new com.operations.Matrix.Matrix(0, 97);
    }

    @Test
    public void test3736() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3736");
        // The following exception was thrown during execution in test generation
        try {
            com.operations.Matrix.Matrix matrix5 = com.operations.Matrix.MatrixUtils.generateRandomMatrix(0, 1, 35, (-1), (long) 1);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
    }

    @Test
    public void test3737() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3737");
        com.operations.Matrix.Matrix matrix2 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0L, (double) (byte) 10);
        int int3 = matrix2.getRows();
        com.operations.Matrix.Matrix matrix9 = com.operations.Matrix.MatrixUtils.generateRandomMatrix(100, (int) (byte) 1, (int) '#', (int) '#', 1L);
        boolean boolean11 = com.operations.Matrix.MatrixUtils.compare(matrix2, matrix9, (double) 1.0f);
        com.operations.Matrix.Matrix matrix13 = com.operations.Matrix.MatrixOperations.scalarMultiply(matrix2, (double) 1L);
        com.operations.Matrix.Matrix[] matrixArray14 = com.operations.Matrix.MatrixDecompositions.luDecomposition(matrix2);
        boolean boolean15 = com.operations.Matrix.MatrixUtils.isSymmetric(matrix2);
        com.operations.Matrix.Matrix matrix17 = com.operations.Matrix.MatrixTransformations.rotate2D(100.0d);
        int int18 = matrix17.getCols();
        com.operations.Matrix.Matrix matrix21 = com.operations.Matrix.MatrixTransformations.project2D((double) 1, 364.0054944640259d);
        com.operations.Matrix.Matrix matrix22 = com.operations.Matrix.MatrixOperations.multiply(matrix17, matrix21);
        com.operations.Matrix.Matrix matrix23 = com.operations.Matrix.MatrixOperations.add(matrix2, matrix22);
        com.operations.Matrix.Matrix matrix26 = com.operations.Matrix.MatrixTransformations.project2D((double) (byte) 100, 32.0d);
        com.operations.Matrix.Matrix matrix27 = com.operations.Matrix.MatrixOperations.subtract(matrix2, matrix26);
        com.operations.Matrix.Matrix matrix30 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0L, (double) (byte) 10);
        double[] doubleArray33 = new double[] { 10, 'a' };
        double[] doubleArray36 = new double[] { 10, 'a' };
        double[][] doubleArray37 = new double[][] { doubleArray33, doubleArray36 };
        com.operations.Matrix.Matrix matrix38 = new com.operations.Matrix.Matrix(doubleArray37);
        int int39 = matrix38.getCols();
        int int40 = matrix38.getCols();
        int int41 = matrix38.getCols();
        com.operations.Matrix.Matrix[] matrixArray42 = com.operations.Matrix.MatrixDecompositions.luDecomposition(matrix38);
        com.operations.Matrix.Matrix matrix43 = com.operations.Matrix.MatrixOperations.multiply(matrix30, matrix38);
        com.operations.Matrix.Matrix matrix45 = com.operations.Matrix.MatrixTransformations.rotate2D((double) (short) 100);
        boolean boolean47 = com.operations.Matrix.MatrixUtils.compare(matrix38, matrix45, (double) (byte) 0);
        com.operations.Matrix.Matrix[] matrixArray48 = com.operations.Matrix.MatrixDecompositions.luDecomposition(matrix38);
        com.operations.Matrix.Matrix matrix49 = com.operations.Matrix.MatrixDecompositions.choleskyDecomposition(matrix38);
        boolean boolean50 = com.operations.Matrix.MatrixUtils.isSquare(matrix49);
        com.operations.Matrix.Matrix matrix51 = com.operations.Matrix.MatrixOperations.subtract(matrix27, matrix49);
        org.junit.Assert.assertNotNull(matrix2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 2 + "'", int3 == 2);
        org.junit.Assert.assertNotNull(matrix9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(matrix13);
        org.junit.Assert.assertNotNull(matrixArray14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNotNull(matrix17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 2 + "'", int18 == 2);
        org.junit.Assert.assertNotNull(matrix21);
        org.junit.Assert.assertNotNull(matrix22);
        org.junit.Assert.assertNotNull(matrix23);
        org.junit.Assert.assertNotNull(matrix26);
        org.junit.Assert.assertNotNull(matrix27);
        org.junit.Assert.assertNotNull(matrix30);
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertArrayEquals(doubleArray33, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertArrayEquals(doubleArray36, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 2 + "'", int39 == 2);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 2 + "'", int40 == 2);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 2 + "'", int41 == 2);
        org.junit.Assert.assertNotNull(matrixArray42);
        org.junit.Assert.assertNotNull(matrix43);
        org.junit.Assert.assertNotNull(matrix45);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(matrixArray48);
        org.junit.Assert.assertNotNull(matrix49);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
        org.junit.Assert.assertNotNull(matrix51);
    }

    @Test
    public void test3738() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3738");
        com.operations.Matrix.Matrix matrix2 = new com.operations.Matrix.Matrix(35, (int) (byte) 10);
        com.operations.Matrix.Matrix matrix5 = com.operations.Matrix.MatrixTransformations.project2D((double) ' ', 0.0d);
        double[] doubleArray8 = new double[] { 10, 'a' };
        double[] doubleArray11 = new double[] { 10, 'a' };
        double[][] doubleArray12 = new double[][] { doubleArray8, doubleArray11 };
        com.operations.Matrix.Matrix matrix13 = new com.operations.Matrix.Matrix(doubleArray12);
        int int14 = matrix13.getCols();
        boolean boolean15 = com.operations.Matrix.MatrixUtils.isSquare(matrix13);
        com.operations.Matrix.Matrix matrix16 = com.operations.Matrix.MatrixOperations.transpose(matrix13);
        int int17 = matrix16.getRows();
        com.operations.Matrix.Matrix matrix20 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0L, (double) (byte) 10);
        double[] doubleArray23 = new double[] { 10, 'a' };
        double[] doubleArray26 = new double[] { 10, 'a' };
        double[][] doubleArray27 = new double[][] { doubleArray23, doubleArray26 };
        com.operations.Matrix.Matrix matrix28 = new com.operations.Matrix.Matrix(doubleArray27);
        int int29 = matrix28.getCols();
        int int30 = matrix28.getCols();
        int int31 = matrix28.getCols();
        com.operations.Matrix.Matrix[] matrixArray32 = com.operations.Matrix.MatrixDecompositions.luDecomposition(matrix28);
        com.operations.Matrix.Matrix matrix33 = com.operations.Matrix.MatrixOperations.multiply(matrix20, matrix28);
        com.operations.Matrix.Matrix matrix35 = com.operations.Matrix.MatrixTransformations.rotate2D((double) (short) 100);
        boolean boolean37 = com.operations.Matrix.MatrixUtils.compare(matrix28, matrix35, (double) (byte) 0);
        com.operations.Matrix.Matrix matrix38 = com.operations.Matrix.MatrixOperations.multiply(matrix16, matrix28);
        com.operations.Matrix.Matrix matrix39 = com.operations.Matrix.MatrixOperations.add(matrix5, matrix28);
        com.operations.Matrix.Matrix matrix40 = com.operations.Matrix.MatrixOperations.transpose(matrix5);
        com.operations.Matrix.Matrix matrix43 = com.operations.Matrix.MatrixTransformations.scale2D((double) (byte) 100, 350.0d);
        double double44 = com.operations.Matrix.MatrixUtils.frobeniusNorm(matrix43);
        int int45 = matrix43.getCols();
        com.operations.Matrix.Matrix matrix46 = com.operations.Matrix.MatrixOperations.multiply(matrix5, matrix43);
        int int47 = matrix5.getRows();
        com.operations.Matrix.Matrix matrix49 = com.operations.Matrix.MatrixTransformations.rotate2D(100.0d);
        int int50 = matrix49.getCols();
        double[][] doubleArray51 = matrix49.getData();
        double double52 = com.operations.Matrix.MatrixUtils.frobeniusNorm(matrix49);
        com.operations.Matrix.Matrix matrix54 = com.operations.Matrix.MatrixOperations.scalarMultiply(matrix49, (double) (short) 10);
        com.operations.Matrix.Matrix matrix55 = com.operations.Matrix.MatrixOperations.add(matrix5, matrix49);
        // The following exception was thrown during execution in test generation
        try {
            com.operations.Matrix.Matrix matrix56 = com.operations.Matrix.MatrixOperations.multiply(matrix2, matrix5);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Matrix A's columns must match Matrix B's rows for multiplication.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(matrix5);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertArrayEquals(doubleArray8, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertArrayEquals(doubleArray11, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 2 + "'", int14 == 2);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNotNull(matrix16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 2 + "'", int17 == 2);
        org.junit.Assert.assertNotNull(matrix20);
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertArrayEquals(doubleArray23, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertArrayEquals(doubleArray26, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 2 + "'", int29 == 2);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 2 + "'", int30 == 2);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 2 + "'", int31 == 2);
        org.junit.Assert.assertNotNull(matrixArray32);
        org.junit.Assert.assertNotNull(matrix33);
        org.junit.Assert.assertNotNull(matrix35);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(matrix38);
        org.junit.Assert.assertNotNull(matrix39);
        org.junit.Assert.assertNotNull(matrix40);
        org.junit.Assert.assertNotNull(matrix43);
        org.junit.Assert.assertTrue("'" + double44 + "' != '" + 364.0054944640259d + "'", double44 == 364.0054944640259d);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 2 + "'", int45 == 2);
        org.junit.Assert.assertNotNull(matrix46);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 2 + "'", int47 == 2);
        org.junit.Assert.assertNotNull(matrix49);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 2 + "'", int50 == 2);
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertTrue("'" + double52 + "' != '" + 1.414213562373095d + "'", double52 == 1.414213562373095d);
        org.junit.Assert.assertNotNull(matrix54);
        org.junit.Assert.assertNotNull(matrix55);
    }

    @Test
    public void test3739() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3739");
        com.operations.Matrix.Matrix matrix2 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0L, (double) (byte) 10);
        int int3 = matrix2.getRows();
        com.operations.Matrix.Matrix matrix5 = com.operations.Matrix.MatrixOperations.scalarMultiply(matrix2, (double) 2);
        matrix2.print();
        com.operations.Matrix.Matrix matrix12 = com.operations.Matrix.MatrixUtils.generateRandomMatrix((int) (short) 10, (int) (short) 100, (int) (byte) -1, (-1), (long) (byte) 10);
        boolean boolean14 = com.operations.Matrix.MatrixUtils.compare(matrix2, matrix12, (double) (short) 10);
        double double15 = com.operations.Matrix.MatrixUtils.frobeniusNorm(matrix2);
        com.operations.Matrix.Matrix matrix16 = com.operations.Matrix.MatrixOperations.transpose(matrix2);
        int int17 = matrix16.getCols();
        org.junit.Assert.assertNotNull(matrix2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 2 + "'", int3 == 2);
        org.junit.Assert.assertNotNull(matrix5);
        org.junit.Assert.assertNotNull(matrix12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 10.0d + "'", double15 == 10.0d);
        org.junit.Assert.assertNotNull(matrix16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 2 + "'", int17 == 2);
    }

    @Test
    public void test3740() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3740");
        com.operations.Matrix.Matrix matrix1 = com.operations.Matrix.MatrixTransformations.rotate2D(350.0d);
        com.operations.Matrix.Matrix matrix3 = com.operations.Matrix.MatrixTransformations.rotate2D((double) (short) 100);
        double[] doubleArray6 = new double[] { 137.90576492663388d, (byte) -1 };
        double[] doubleArray7 = com.operations.Matrix.MatrixSolver.solveGaussian(matrix3, doubleArray6);
        double[] doubleArray8 = com.operations.Matrix.MatrixSolver.solveGaussian(matrix1, doubleArray7);
        com.operations.Matrix.Matrix matrix11 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0L, (double) (byte) 10);
        double[] doubleArray14 = new double[] { 10, 'a' };
        double[] doubleArray17 = new double[] { 10, 'a' };
        double[][] doubleArray18 = new double[][] { doubleArray14, doubleArray17 };
        com.operations.Matrix.Matrix matrix19 = new com.operations.Matrix.Matrix(doubleArray18);
        int int20 = matrix19.getCols();
        int int21 = matrix19.getCols();
        int int22 = matrix19.getCols();
        com.operations.Matrix.Matrix[] matrixArray23 = com.operations.Matrix.MatrixDecompositions.luDecomposition(matrix19);
        com.operations.Matrix.Matrix matrix24 = com.operations.Matrix.MatrixOperations.multiply(matrix11, matrix19);
        com.operations.Matrix.Matrix matrix26 = com.operations.Matrix.MatrixTransformations.rotate2D((double) (short) 100);
        boolean boolean28 = com.operations.Matrix.MatrixUtils.compare(matrix19, matrix26, (double) (byte) 0);
        double[] doubleArray31 = new double[] { 10, 'a' };
        double[] doubleArray34 = new double[] { 10, 'a' };
        double[][] doubleArray35 = new double[][] { doubleArray31, doubleArray34 };
        com.operations.Matrix.Matrix matrix36 = new com.operations.Matrix.Matrix(doubleArray35);
        com.operations.Matrix.Matrix matrix37 = new com.operations.Matrix.Matrix(doubleArray35);
        com.operations.Matrix.Matrix matrix38 = new com.operations.Matrix.Matrix(doubleArray35);
        boolean boolean40 = com.operations.Matrix.MatrixUtils.compare(matrix19, matrix38, (double) (-1));
        int int41 = matrix19.getRows();
        com.operations.Matrix.Matrix matrix42 = com.operations.Matrix.MatrixOperations.add(matrix1, matrix19);
        matrix42.print();
        boolean boolean44 = com.operations.Matrix.MatrixUtils.isSquare(matrix42);
        com.operations.Matrix.Matrix matrix46 = com.operations.Matrix.MatrixTransformations.rotate2D((double) 100L);
        com.operations.Matrix.Matrix matrix48 = com.operations.Matrix.MatrixOperations.scalarMultiply(matrix46, (double) ' ');
        com.operations.Matrix.Matrix[] matrixArray49 = com.operations.Matrix.MatrixDecompositions.luDecomposition(matrix48);
        com.operations.Matrix.Matrix matrix50 = com.operations.Matrix.MatrixOperations.subtract(matrix42, matrix48);
        double[][] doubleArray51 = matrix50.getData();
        org.junit.Assert.assertNotNull(matrix1);
        org.junit.Assert.assertNotNull(matrix3);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertArrayEquals(doubleArray6, new double[] { 137.90576492663388d, (-1.0d) }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertArrayEquals(doubleArray7, new double[] { (-24.931892522286255d), (-135.63701830716116d) }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertArrayEquals(doubleArray8, new double[] { (-0.9999999999999858d), (-137.90576492663388d) }, 1.0E-15);
        org.junit.Assert.assertNotNull(matrix11);
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertArrayEquals(doubleArray14, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertArrayEquals(doubleArray17, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 2 + "'", int20 == 2);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 2 + "'", int21 == 2);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 2 + "'", int22 == 2);
        org.junit.Assert.assertNotNull(matrixArray23);
        org.junit.Assert.assertNotNull(matrix24);
        org.junit.Assert.assertNotNull(matrix26);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertArrayEquals(doubleArray31, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertArrayEquals(doubleArray34, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 2 + "'", int41 == 2);
        org.junit.Assert.assertNotNull(matrix42);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertNotNull(matrix46);
        org.junit.Assert.assertNotNull(matrix48);
        org.junit.Assert.assertNotNull(matrixArray49);
        org.junit.Assert.assertNotNull(matrix50);
        org.junit.Assert.assertNotNull(doubleArray51);
    }

    @Test
    public void test3741() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3741");
        // The following exception was thrown during execution in test generation
        try {
            com.operations.Matrix.Matrix matrix4 = com.operations.Matrix.MatrixUtils.generateRandomMatrix((int) (byte) 0, 35, (int) (short) 1, 0);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
    }

    @Test
    public void test3742() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3742");
        com.operations.Matrix.Matrix matrix2 = com.operations.Matrix.MatrixTransformations.scale2D(310.45666917731234d, 18.14229652832025d);
        org.junit.Assert.assertNotNull(matrix2);
    }

    @Test
    public void test3743() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3743");
        com.operations.Matrix.Matrix matrix2 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0L, (double) (byte) 10);
        double[] doubleArray5 = new double[] { 10, 'a' };
        double[] doubleArray8 = new double[] { 10, 'a' };
        double[][] doubleArray9 = new double[][] { doubleArray5, doubleArray8 };
        com.operations.Matrix.Matrix matrix10 = new com.operations.Matrix.Matrix(doubleArray9);
        int int11 = matrix10.getCols();
        int int12 = matrix10.getCols();
        int int13 = matrix10.getCols();
        com.operations.Matrix.Matrix[] matrixArray14 = com.operations.Matrix.MatrixDecompositions.luDecomposition(matrix10);
        com.operations.Matrix.Matrix matrix15 = com.operations.Matrix.MatrixOperations.multiply(matrix2, matrix10);
        int int16 = matrix10.getRows();
        int int17 = matrix10.getCols();
        double[][] doubleArray18 = matrix10.getData();
        double double19 = com.operations.Matrix.MatrixUtils.frobeniusNorm(matrix10);
        int int20 = matrix10.getCols();
        com.operations.Matrix.Matrix matrix22 = com.operations.Matrix.MatrixOperations.scalarMultiply(matrix10, (double) 1);
        com.operations.Matrix.Matrix[] matrixArray23 = com.operations.Matrix.MatrixDecompositions.luDecomposition(matrix10);
        java.lang.Class<?> wildcardClass24 = matrix10.getClass();
        org.junit.Assert.assertNotNull(matrix2);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertArrayEquals(doubleArray5, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertArrayEquals(doubleArray8, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 2 + "'", int11 == 2);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 2 + "'", int12 == 2);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 2 + "'", int13 == 2);
        org.junit.Assert.assertNotNull(matrixArray14);
        org.junit.Assert.assertNotNull(matrix15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 2 + "'", int16 == 2);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 2 + "'", int17 == 2);
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 137.90576492663388d + "'", double19 == 137.90576492663388d);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 2 + "'", int20 == 2);
        org.junit.Assert.assertNotNull(matrix22);
        org.junit.Assert.assertNotNull(matrixArray23);
        org.junit.Assert.assertNotNull(wildcardClass24);
    }

    @Test
    public void test3744() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3744");
        com.operations.Matrix.Matrix matrix2 = com.operations.Matrix.MatrixTransformations.scale2D((double) 'a', (double) 10.0f);
        org.junit.Assert.assertNotNull(matrix2);
    }

    @Test
    public void test3745() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3745");
        double[] doubleArray2 = new double[] { 10, 'a' };
        double[] doubleArray5 = new double[] { 10, 'a' };
        double[][] doubleArray6 = new double[][] { doubleArray2, doubleArray5 };
        com.operations.Matrix.Matrix matrix7 = new com.operations.Matrix.Matrix(doubleArray6);
        int int8 = matrix7.getCols();
        int int9 = matrix7.getCols();
        int int10 = matrix7.getCols();
        com.operations.Matrix.Matrix matrix16 = com.operations.Matrix.MatrixUtils.generateRandomMatrix(100, (int) (byte) 1, (int) '#', (int) '#', 1L);
        double double19 = matrix16.getValue((int) '4', 0);
        double double20 = com.operations.Matrix.MatrixUtils.frobeniusNorm(matrix16);
        boolean boolean21 = com.operations.Matrix.MatrixUtils.isSquare(matrix16);
        boolean boolean23 = com.operations.Matrix.MatrixUtils.compare(matrix7, matrix16, (double) 100L);
        int int24 = matrix7.getCols();
        com.operations.Matrix.Matrix matrix25 = com.operations.Matrix.MatrixOperations.transpose(matrix7);
        com.operations.Matrix.Matrix matrix26 = com.operations.Matrix.MatrixDecompositions.choleskyDecomposition(matrix7);
        double double27 = com.operations.Matrix.MatrixUtils.frobeniusNorm(matrix7);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertArrayEquals(doubleArray2, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertArrayEquals(doubleArray5, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 2 + "'", int8 == 2);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 2 + "'", int9 == 2);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 2 + "'", int10 == 2);
        org.junit.Assert.assertNotNull(matrix16);
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 35.0d + "'", double19 == 35.0d);
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 350.0d + "'", double20 == 350.0d);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 2 + "'", int24 == 2);
        org.junit.Assert.assertNotNull(matrix25);
        org.junit.Assert.assertNotNull(matrix26);
        org.junit.Assert.assertTrue("'" + double27 + "' != '" + 137.90576492663388d + "'", double27 == 137.90576492663388d);
    }

    @Test
    public void test3746() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3746");
        com.operations.Matrix.Matrix matrix2 = com.operations.Matrix.MatrixTransformations.scale2D(693.7418269995209d, (double) (-1L));
        org.junit.Assert.assertNotNull(matrix2);
    }

    @Test
    public void test3747() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3747");
        double[] doubleArray2 = new double[] { 10, 'a' };
        double[] doubleArray5 = new double[] { 10, 'a' };
        double[][] doubleArray6 = new double[][] { doubleArray2, doubleArray5 };
        com.operations.Matrix.Matrix matrix7 = new com.operations.Matrix.Matrix(doubleArray6);
        int int8 = matrix7.getCols();
        int int9 = matrix7.getCols();
        int int10 = matrix7.getCols();
        com.operations.Matrix.Matrix matrix16 = com.operations.Matrix.MatrixUtils.generateRandomMatrix(100, (int) (byte) 1, (int) '#', (int) '#', 1L);
        double double19 = matrix16.getValue((int) '4', 0);
        double double20 = com.operations.Matrix.MatrixUtils.frobeniusNorm(matrix16);
        boolean boolean21 = com.operations.Matrix.MatrixUtils.isSquare(matrix16);
        boolean boolean23 = com.operations.Matrix.MatrixUtils.compare(matrix7, matrix16, (double) 100L);
        int int24 = matrix7.getCols();
        com.operations.Matrix.Matrix matrix25 = com.operations.Matrix.MatrixOperations.transpose(matrix7);
        com.operations.Matrix.Matrix matrix26 = com.operations.Matrix.MatrixOperations.transpose(matrix25);
        int int27 = matrix25.getCols();
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertArrayEquals(doubleArray2, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertArrayEquals(doubleArray5, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 2 + "'", int8 == 2);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 2 + "'", int9 == 2);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 2 + "'", int10 == 2);
        org.junit.Assert.assertNotNull(matrix16);
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 35.0d + "'", double19 == 35.0d);
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 350.0d + "'", double20 == 350.0d);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 2 + "'", int24 == 2);
        org.junit.Assert.assertNotNull(matrix25);
        org.junit.Assert.assertNotNull(matrix26);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 2 + "'", int27 == 2);
    }

    @Test
    public void test3748() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3748");
        com.operations.Matrix.Matrix matrix2 = com.operations.Matrix.MatrixTransformations.scale2D((double) 1.0f, 104.9952379872535d);
        org.junit.Assert.assertNotNull(matrix2);
    }

    @Test
    public void test3749() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3749");
        com.operations.Matrix.Matrix matrix1 = com.operations.Matrix.MatrixTransformations.rotate2D((double) (short) 100);
        double[] doubleArray4 = new double[] { 137.90576492663388d, (byte) -1 };
        double[] doubleArray5 = com.operations.Matrix.MatrixSolver.solveGaussian(matrix1, doubleArray4);
        com.operations.Matrix.Matrix matrix8 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0L, (double) (byte) 10);
        double[] doubleArray11 = new double[] { 10, 'a' };
        double[] doubleArray14 = new double[] { 10, 'a' };
        double[][] doubleArray15 = new double[][] { doubleArray11, doubleArray14 };
        com.operations.Matrix.Matrix matrix16 = new com.operations.Matrix.Matrix(doubleArray15);
        int int17 = matrix16.getCols();
        int int18 = matrix16.getCols();
        int int19 = matrix16.getCols();
        com.operations.Matrix.Matrix[] matrixArray20 = com.operations.Matrix.MatrixDecompositions.luDecomposition(matrix16);
        com.operations.Matrix.Matrix matrix21 = com.operations.Matrix.MatrixOperations.multiply(matrix8, matrix16);
        boolean boolean23 = com.operations.Matrix.MatrixUtils.compare(matrix1, matrix8, (double) (-1L));
        double[][] doubleArray24 = matrix1.getData();
        com.operations.Matrix.Matrix matrix27 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0L, (double) 10L);
        boolean boolean29 = com.operations.Matrix.MatrixUtils.compare(matrix1, matrix27, 146.4308710620817d);
        com.operations.Matrix.Matrix matrix31 = com.operations.Matrix.MatrixOperations.scalarMultiply(matrix27, 1.4142135623730951d);
        com.operations.Matrix.Matrix matrix33 = com.operations.Matrix.MatrixTransformations.rotate2D((-0.1736481776669303d));
        int int34 = matrix33.getRows();
        com.operations.Matrix.Matrix matrix35 = com.operations.Matrix.MatrixOperations.subtract(matrix27, matrix33);
        // The following exception was thrown during execution in test generation
        try {
            double double38 = matrix27.getValue(0, 32);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(matrix1);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertArrayEquals(doubleArray4, new double[] { 137.90576492663388d, (-1.0d) }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertArrayEquals(doubleArray5, new double[] { (-24.931892522286255d), (-135.63701830716116d) }, 1.0E-15);
        org.junit.Assert.assertNotNull(matrix8);
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertArrayEquals(doubleArray11, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertArrayEquals(doubleArray14, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 2 + "'", int17 == 2);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 2 + "'", int18 == 2);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 2 + "'", int19 == 2);
        org.junit.Assert.assertNotNull(matrixArray20);
        org.junit.Assert.assertNotNull(matrix21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertNotNull(matrix27);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertNotNull(matrix31);
        org.junit.Assert.assertNotNull(matrix33);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 2 + "'", int34 == 2);
        org.junit.Assert.assertNotNull(matrix35);
    }

    @Test
    public void test3750() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3750");
        com.operations.Matrix.Matrix matrix5 = com.operations.Matrix.MatrixUtils.generateRandomMatrix((int) (byte) 1, (int) (byte) 0, 100, (-1), (long) (short) -1);
        com.operations.Matrix.Matrix matrix7 = com.operations.Matrix.MatrixOperations.scalarMultiply(matrix5, 10.0d);
        // The following exception was thrown during execution in test generation
        try {
            com.operations.Matrix.Matrix matrix8 = com.operations.Matrix.MatrixDecompositions.choleskyDecomposition(matrix7);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Matrix must be square for Cholesky decomposition.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(matrix5);
        org.junit.Assert.assertNotNull(matrix7);
    }

    @Test
    public void test3751() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3751");
        double[] doubleArray2 = new double[] { 10, 'a' };
        double[] doubleArray5 = new double[] { 10, 'a' };
        double[][] doubleArray6 = new double[][] { doubleArray2, doubleArray5 };
        com.operations.Matrix.Matrix matrix7 = new com.operations.Matrix.Matrix(doubleArray6);
        int int8 = matrix7.getCols();
        int int9 = matrix7.getCols();
        int int10 = matrix7.getCols();
        com.operations.Matrix.Matrix matrix16 = com.operations.Matrix.MatrixUtils.generateRandomMatrix(100, (int) (byte) 1, (int) '#', (int) '#', 1L);
        double double19 = matrix16.getValue((int) '4', 0);
        double double20 = com.operations.Matrix.MatrixUtils.frobeniusNorm(matrix16);
        boolean boolean21 = com.operations.Matrix.MatrixUtils.isSquare(matrix16);
        boolean boolean23 = com.operations.Matrix.MatrixUtils.compare(matrix7, matrix16, (double) 100L);
        int int24 = matrix7.getCols();
        com.operations.Matrix.Matrix matrix25 = com.operations.Matrix.MatrixOperations.transpose(matrix7);
        com.operations.Matrix.Matrix matrix28 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0L, (double) (byte) 10);
        int int29 = matrix28.getRows();
        com.operations.Matrix.Matrix matrix32 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0L, (double) (byte) 10);
        int int33 = matrix32.getRows();
        com.operations.Matrix.Matrix matrix35 = com.operations.Matrix.MatrixOperations.scalarMultiply(matrix32, (double) 2);
        com.operations.Matrix.Matrix matrix36 = com.operations.Matrix.MatrixOperations.subtract(matrix28, matrix32);
        com.operations.Matrix.Matrix matrix39 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0L, (double) (byte) 10);
        int int40 = matrix39.getRows();
        com.operations.Matrix.Matrix matrix46 = com.operations.Matrix.MatrixUtils.generateRandomMatrix(100, (int) (byte) 1, (int) '#', (int) '#', 1L);
        boolean boolean48 = com.operations.Matrix.MatrixUtils.compare(matrix39, matrix46, (double) 1.0f);
        com.operations.Matrix.Matrix matrix50 = com.operations.Matrix.MatrixOperations.scalarMultiply(matrix39, (double) 1L);
        boolean boolean52 = com.operations.Matrix.MatrixUtils.compare(matrix36, matrix50, 0.0d);
        int int53 = matrix50.getCols();
        com.operations.Matrix.Matrix matrix54 = com.operations.Matrix.MatrixOperations.transpose(matrix50);
        double double55 = com.operations.Matrix.MatrixUtils.frobeniusNorm(matrix54);
        com.operations.Matrix.Matrix matrix56 = com.operations.Matrix.MatrixOperations.add(matrix7, matrix54);
        java.lang.Class<?> wildcardClass57 = matrix54.getClass();
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertArrayEquals(doubleArray2, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertArrayEquals(doubleArray5, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 2 + "'", int8 == 2);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 2 + "'", int9 == 2);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 2 + "'", int10 == 2);
        org.junit.Assert.assertNotNull(matrix16);
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 35.0d + "'", double19 == 35.0d);
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 350.0d + "'", double20 == 350.0d);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 2 + "'", int24 == 2);
        org.junit.Assert.assertNotNull(matrix25);
        org.junit.Assert.assertNotNull(matrix28);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 2 + "'", int29 == 2);
        org.junit.Assert.assertNotNull(matrix32);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 2 + "'", int33 == 2);
        org.junit.Assert.assertNotNull(matrix35);
        org.junit.Assert.assertNotNull(matrix36);
        org.junit.Assert.assertNotNull(matrix39);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 2 + "'", int40 == 2);
        org.junit.Assert.assertNotNull(matrix46);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(matrix50);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 2 + "'", int53 == 2);
        org.junit.Assert.assertNotNull(matrix54);
        org.junit.Assert.assertTrue("'" + double55 + "' != '" + 10.0d + "'", double55 == 10.0d);
        org.junit.Assert.assertNotNull(matrix56);
        org.junit.Assert.assertNotNull(wildcardClass57);
    }

    @Test
    public void test3752() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3752");
        com.operations.Matrix.Matrix matrix2 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0L, (double) (byte) 10);
        double[] doubleArray5 = new double[] { 10, 'a' };
        double[] doubleArray8 = new double[] { 10, 'a' };
        double[][] doubleArray9 = new double[][] { doubleArray5, doubleArray8 };
        com.operations.Matrix.Matrix matrix10 = new com.operations.Matrix.Matrix(doubleArray9);
        int int11 = matrix10.getCols();
        int int12 = matrix10.getCols();
        int int13 = matrix10.getCols();
        com.operations.Matrix.Matrix[] matrixArray14 = com.operations.Matrix.MatrixDecompositions.luDecomposition(matrix10);
        com.operations.Matrix.Matrix matrix15 = com.operations.Matrix.MatrixOperations.multiply(matrix2, matrix10);
        int int16 = matrix10.getRows();
        com.operations.Matrix.Matrix matrix18 = com.operations.Matrix.MatrixOperations.scalarMultiply(matrix10, (double) (-1L));
        com.operations.Matrix.Matrix matrix20 = com.operations.Matrix.MatrixTransformations.rotate2D(35.0d);
        matrix20.print();
        int int22 = matrix20.getRows();
        com.operations.Matrix.Matrix matrix23 = com.operations.Matrix.MatrixOperations.subtract(matrix10, matrix20);
        com.operations.Matrix.Matrix matrix25 = com.operations.Matrix.MatrixOperations.scalarMultiply(matrix10, 137.15495886388925d);
        double[][] doubleArray26 = matrix25.getData();
        int int27 = matrix25.getRows();
        org.junit.Assert.assertNotNull(matrix2);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertArrayEquals(doubleArray5, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertArrayEquals(doubleArray8, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 2 + "'", int11 == 2);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 2 + "'", int12 == 2);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 2 + "'", int13 == 2);
        org.junit.Assert.assertNotNull(matrixArray14);
        org.junit.Assert.assertNotNull(matrix15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 2 + "'", int16 == 2);
        org.junit.Assert.assertNotNull(matrix18);
        org.junit.Assert.assertNotNull(matrix20);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 2 + "'", int22 == 2);
        org.junit.Assert.assertNotNull(matrix23);
        org.junit.Assert.assertNotNull(matrix25);
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 2 + "'", int27 == 2);
    }

    @Test
    public void test3753() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3753");
        double[] doubleArray2 = new double[] { 10, 'a' };
        double[] doubleArray5 = new double[] { 10, 'a' };
        double[][] doubleArray6 = new double[][] { doubleArray2, doubleArray5 };
        com.operations.Matrix.Matrix matrix7 = new com.operations.Matrix.Matrix(doubleArray6);
        int int8 = matrix7.getCols();
        int int9 = matrix7.getCols();
        boolean boolean10 = com.operations.Matrix.MatrixUtils.isSquare(matrix7);
        com.operations.Matrix.Matrix matrix11 = com.operations.Matrix.MatrixDecompositions.choleskyDecomposition(matrix7);
        com.operations.Matrix.Matrix matrix14 = com.operations.Matrix.MatrixTransformations.project2D(0.0d, (double) 0);
        com.operations.Matrix.Matrix matrix15 = com.operations.Matrix.MatrixOperations.subtract(matrix11, matrix14);
        double[] doubleArray18 = new double[] { 10, 'a' };
        double[] doubleArray21 = new double[] { 10, 'a' };
        double[][] doubleArray22 = new double[][] { doubleArray18, doubleArray21 };
        com.operations.Matrix.Matrix matrix23 = new com.operations.Matrix.Matrix(doubleArray22);
        com.operations.Matrix.Matrix matrix24 = new com.operations.Matrix.Matrix(doubleArray22);
        com.operations.Matrix.Matrix matrix26 = com.operations.Matrix.MatrixTransformations.rotate2D((double) (short) 100);
        double[] doubleArray29 = new double[] { 137.90576492663388d, (byte) -1 };
        double[] doubleArray30 = com.operations.Matrix.MatrixSolver.solveGaussian(matrix26, doubleArray29);
        com.operations.Matrix.Matrix matrix31 = com.operations.Matrix.MatrixOperations.add(matrix24, matrix26);
        com.operations.Matrix.Matrix matrix32 = com.operations.Matrix.MatrixOperations.transpose(matrix26);
        int int33 = matrix26.getCols();
        int int34 = matrix26.getRows();
        com.operations.Matrix.Matrix matrix35 = com.operations.Matrix.MatrixOperations.subtract(matrix15, matrix26);
        com.operations.Matrix.Matrix matrix38 = new com.operations.Matrix.Matrix((int) (short) 100, 1);
        boolean boolean40 = com.operations.Matrix.MatrixUtils.compare(matrix35, matrix38, 99.83621769912266d);
        boolean boolean41 = com.operations.Matrix.MatrixUtils.isSquare(matrix35);
        com.operations.Matrix.Matrix matrix42 = com.operations.Matrix.MatrixDecompositions.choleskyDecomposition(matrix35);
        double double43 = com.operations.Matrix.MatrixUtils.frobeniusNorm(matrix42);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertArrayEquals(doubleArray2, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertArrayEquals(doubleArray5, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 2 + "'", int8 == 2);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 2 + "'", int9 == 2);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(matrix11);
        org.junit.Assert.assertNotNull(matrix14);
        org.junit.Assert.assertNotNull(matrix15);
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertArrayEquals(doubleArray18, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertArrayEquals(doubleArray21, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertNotNull(matrix26);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertArrayEquals(doubleArray29, new double[] { 137.90576492663388d, (-1.0d) }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertArrayEquals(doubleArray30, new double[] { (-24.931892522286255d), (-135.63701830716116d) }, 1.0E-15);
        org.junit.Assert.assertNotNull(matrix31);
        org.junit.Assert.assertNotNull(matrix32);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 2 + "'", int33 == 2);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 2 + "'", int34 == 2);
        org.junit.Assert.assertNotNull(matrix35);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertNotNull(matrix42);
        org.junit.Assert.assertTrue("'" + double43 + "' != '" + 3.5828693903896434d + "'", double43 == 3.5828693903896434d);
    }

    @Test
    public void test3754() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3754");
        com.operations.Matrix.Matrix matrix5 = com.operations.Matrix.MatrixUtils.generateRandomMatrix(35, 0, (int) (byte) -1, 0, (-1L));
        org.junit.Assert.assertNotNull(matrix5);
    }

    @Test
    public void test3755() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3755");
        double[] doubleArray2 = new double[] { 10, 'a' };
        double[] doubleArray5 = new double[] { 10, 'a' };
        double[][] doubleArray6 = new double[][] { doubleArray2, doubleArray5 };
        com.operations.Matrix.Matrix matrix7 = new com.operations.Matrix.Matrix(doubleArray6);
        com.operations.Matrix.Matrix matrix8 = new com.operations.Matrix.Matrix(doubleArray6);
        boolean boolean9 = com.operations.Matrix.MatrixUtils.isSquare(matrix8);
        double[] doubleArray12 = new double[] { 10, 'a' };
        double[] doubleArray15 = new double[] { 10, 'a' };
        double[][] doubleArray16 = new double[][] { doubleArray12, doubleArray15 };
        com.operations.Matrix.Matrix matrix17 = new com.operations.Matrix.Matrix(doubleArray16);
        int int18 = matrix17.getCols();
        int int19 = matrix17.getCols();
        matrix17.print();
        double[] doubleArray23 = new double[] { 10, 'a' };
        double[] doubleArray26 = new double[] { 10, 'a' };
        double[][] doubleArray27 = new double[][] { doubleArray23, doubleArray26 };
        com.operations.Matrix.Matrix matrix28 = new com.operations.Matrix.Matrix(doubleArray27);
        boolean boolean30 = com.operations.Matrix.MatrixUtils.compare(matrix17, matrix28, (double) (-1));
        com.operations.Matrix.Matrix matrix31 = com.operations.Matrix.MatrixOperations.subtract(matrix8, matrix28);
        com.operations.Matrix.Matrix matrix33 = com.operations.Matrix.MatrixOperations.scalarMultiply(matrix8, (double) 0.0f);
        int int34 = matrix8.getCols();
        double[] doubleArray37 = new double[] { 10, 'a' };
        double[] doubleArray40 = new double[] { 10, 'a' };
        double[][] doubleArray41 = new double[][] { doubleArray37, doubleArray40 };
        com.operations.Matrix.Matrix matrix42 = new com.operations.Matrix.Matrix(doubleArray41);
        com.operations.Matrix.Matrix matrix43 = new com.operations.Matrix.Matrix(doubleArray41);
        com.operations.Matrix.Matrix matrix44 = new com.operations.Matrix.Matrix(doubleArray41);
        com.operations.Matrix.Matrix matrix45 = com.operations.Matrix.MatrixOperations.multiply(matrix8, matrix44);
        int int46 = matrix45.getRows();
        matrix45.print();
        boolean boolean48 = com.operations.Matrix.MatrixUtils.isSymmetric(matrix45);
        java.lang.Class<?> wildcardClass49 = matrix45.getClass();
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertArrayEquals(doubleArray2, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertArrayEquals(doubleArray5, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertArrayEquals(doubleArray12, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertArrayEquals(doubleArray15, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 2 + "'", int18 == 2);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 2 + "'", int19 == 2);
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertArrayEquals(doubleArray23, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertArrayEquals(doubleArray26, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(matrix31);
        org.junit.Assert.assertNotNull(matrix33);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 2 + "'", int34 == 2);
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertArrayEquals(doubleArray37, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertArrayEquals(doubleArray40, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertNotNull(matrix45);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 2 + "'", int46 == 2);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(wildcardClass49);
    }

    @Test
    public void test3756() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3756");
        com.operations.Matrix.Matrix matrix2 = com.operations.Matrix.MatrixTransformations.scale2D(52.009614495783374d, (double) 0.0f);
        double double3 = com.operations.Matrix.MatrixUtils.frobeniusNorm(matrix2);
        double[] doubleArray6 = new double[] { 10, 'a' };
        double[] doubleArray9 = new double[] { 10, 'a' };
        double[][] doubleArray10 = new double[][] { doubleArray6, doubleArray9 };
        com.operations.Matrix.Matrix matrix11 = new com.operations.Matrix.Matrix(doubleArray10);
        int int12 = matrix11.getCols();
        int int13 = matrix11.getCols();
        boolean boolean14 = com.operations.Matrix.MatrixUtils.isSquare(matrix11);
        com.operations.Matrix.Matrix matrix15 = com.operations.Matrix.MatrixDecompositions.choleskyDecomposition(matrix11);
        com.operations.Matrix.Matrix matrix18 = com.operations.Matrix.MatrixTransformations.project2D(0.0d, (double) 0);
        com.operations.Matrix.Matrix matrix19 = com.operations.Matrix.MatrixOperations.subtract(matrix15, matrix18);
        com.operations.Matrix.Matrix matrix20 = com.operations.Matrix.MatrixOperations.multiply(matrix2, matrix19);
        boolean boolean21 = com.operations.Matrix.MatrixUtils.isSquare(matrix19);
        org.junit.Assert.assertNotNull(matrix2);
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + 52.009614495783374d + "'", double3 == 52.009614495783374d);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertArrayEquals(doubleArray6, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertArrayEquals(doubleArray9, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 2 + "'", int12 == 2);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 2 + "'", int13 == 2);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNotNull(matrix15);
        org.junit.Assert.assertNotNull(matrix18);
        org.junit.Assert.assertNotNull(matrix19);
        org.junit.Assert.assertNotNull(matrix20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
    }

    @Test
    public void test3757() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3757");
        com.operations.Matrix.Matrix matrix2 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0L, (double) (byte) 10);
        double[] doubleArray5 = new double[] { 10, 'a' };
        double[] doubleArray8 = new double[] { 10, 'a' };
        double[][] doubleArray9 = new double[][] { doubleArray5, doubleArray8 };
        com.operations.Matrix.Matrix matrix10 = new com.operations.Matrix.Matrix(doubleArray9);
        int int11 = matrix10.getCols();
        int int12 = matrix10.getCols();
        int int13 = matrix10.getCols();
        com.operations.Matrix.Matrix[] matrixArray14 = com.operations.Matrix.MatrixDecompositions.luDecomposition(matrix10);
        com.operations.Matrix.Matrix matrix15 = com.operations.Matrix.MatrixOperations.multiply(matrix2, matrix10);
        com.operations.Matrix.Matrix matrix17 = com.operations.Matrix.MatrixTransformations.rotate2D((double) (short) 100);
        boolean boolean19 = com.operations.Matrix.MatrixUtils.compare(matrix10, matrix17, (double) (byte) 0);
        com.operations.Matrix.Matrix[] matrixArray20 = com.operations.Matrix.MatrixDecompositions.luDecomposition(matrix10);
        com.operations.Matrix.Matrix matrix21 = com.operations.Matrix.MatrixOperations.transpose(matrix10);
        com.operations.Matrix.Matrix matrix24 = com.operations.Matrix.MatrixTransformations.scale2D(0.0d, (double) 0L);
        com.operations.Matrix.Matrix matrix25 = com.operations.Matrix.MatrixOperations.add(matrix10, matrix24);
        double[][] doubleArray26 = matrix24.getData();
        org.junit.Assert.assertNotNull(matrix2);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertArrayEquals(doubleArray5, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertArrayEquals(doubleArray8, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 2 + "'", int11 == 2);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 2 + "'", int12 == 2);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 2 + "'", int13 == 2);
        org.junit.Assert.assertNotNull(matrixArray14);
        org.junit.Assert.assertNotNull(matrix15);
        org.junit.Assert.assertNotNull(matrix17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(matrixArray20);
        org.junit.Assert.assertNotNull(matrix21);
        org.junit.Assert.assertNotNull(matrix24);
        org.junit.Assert.assertNotNull(matrix25);
        org.junit.Assert.assertNotNull(doubleArray26);
    }

    @Test
    public void test3758() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3758");
        com.operations.Matrix.Matrix matrix2 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0L, (double) (byte) 10);
        int int3 = matrix2.getRows();
        com.operations.Matrix.Matrix matrix6 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0L, (double) (byte) 10);
        int int7 = matrix6.getRows();
        com.operations.Matrix.Matrix matrix9 = com.operations.Matrix.MatrixOperations.scalarMultiply(matrix6, (double) 2);
        com.operations.Matrix.Matrix matrix10 = com.operations.Matrix.MatrixOperations.subtract(matrix2, matrix6);
        com.operations.Matrix.Matrix matrix13 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0L, (double) (byte) 10);
        int int14 = matrix13.getRows();
        com.operations.Matrix.Matrix matrix20 = com.operations.Matrix.MatrixUtils.generateRandomMatrix(100, (int) (byte) 1, (int) '#', (int) '#', 1L);
        boolean boolean22 = com.operations.Matrix.MatrixUtils.compare(matrix13, matrix20, (double) 1.0f);
        com.operations.Matrix.Matrix matrix24 = com.operations.Matrix.MatrixOperations.scalarMultiply(matrix13, (double) 1L);
        boolean boolean26 = com.operations.Matrix.MatrixUtils.compare(matrix10, matrix24, 0.0d);
        com.operations.Matrix.Matrix matrix27 = com.operations.Matrix.MatrixOperations.transpose(matrix10);
        com.operations.Matrix.Matrix matrix30 = new com.operations.Matrix.Matrix(35, (int) (short) 0);
        boolean boolean32 = com.operations.Matrix.MatrixUtils.compare(matrix27, matrix30, (double) 35);
        org.junit.Assert.assertNotNull(matrix2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 2 + "'", int3 == 2);
        org.junit.Assert.assertNotNull(matrix6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 2 + "'", int7 == 2);
        org.junit.Assert.assertNotNull(matrix9);
        org.junit.Assert.assertNotNull(matrix10);
        org.junit.Assert.assertNotNull(matrix13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 2 + "'", int14 == 2);
        org.junit.Assert.assertNotNull(matrix20);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(matrix24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(matrix27);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
    }

    @Test
    public void test3759() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3759");
        com.operations.Matrix.Matrix matrix4 = com.operations.Matrix.MatrixUtils.generateRandomMatrix(1, (int) (short) 1, 0, (int) (short) 10);
        boolean boolean5 = com.operations.Matrix.MatrixUtils.isSquare(matrix4);
        int int6 = matrix4.getRows();
        double double7 = com.operations.Matrix.MatrixUtils.frobeniusNorm(matrix4);
        boolean boolean8 = com.operations.Matrix.MatrixUtils.isSquare(matrix4);
        org.junit.Assert.assertNotNull(matrix4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 3.618031071604718d + "'", double7 == 3.618031071604718d);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
    }

    @Test
    public void test3760() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3760");
        com.operations.Matrix.Matrix matrix2 = com.operations.Matrix.MatrixTransformations.project2D((double) (byte) 100, (double) 100L);
        org.junit.Assert.assertNotNull(matrix2);
    }

    @Test
    public void test3761() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3761");
        com.operations.Matrix.Matrix matrix5 = com.operations.Matrix.MatrixUtils.generateRandomMatrix(52, 32, (int) (short) 0, (int) (short) 100, (long) 2);
        org.junit.Assert.assertNotNull(matrix5);
    }

    @Test
    public void test3762() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3762");
        com.operations.Matrix.Matrix matrix2 = new com.operations.Matrix.Matrix(2, (int) (byte) 1);
        boolean boolean3 = com.operations.Matrix.MatrixUtils.isSymmetric(matrix2);
        int int4 = matrix2.getRows();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 2 + "'", int4 == 2);
    }

    @Test
    public void test3763() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3763");
        com.operations.Matrix.Matrix matrix5 = com.operations.Matrix.MatrixUtils.generateRandomMatrix((int) (short) 100, (int) '4', 35, (int) (short) 100, (long) 32);
        org.junit.Assert.assertNotNull(matrix5);
    }

    @Test
    public void test3764() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3764");
        com.operations.Matrix.Matrix matrix1 = com.operations.Matrix.MatrixTransformations.rotate2D((double) (short) 100);
        double[] doubleArray4 = new double[] { 137.90576492663388d, (byte) -1 };
        double[] doubleArray5 = com.operations.Matrix.MatrixSolver.solveGaussian(matrix1, doubleArray4);
        com.operations.Matrix.Matrix matrix8 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0L, (double) (byte) 10);
        double[] doubleArray11 = new double[] { 10, 'a' };
        double[] doubleArray14 = new double[] { 10, 'a' };
        double[][] doubleArray15 = new double[][] { doubleArray11, doubleArray14 };
        com.operations.Matrix.Matrix matrix16 = new com.operations.Matrix.Matrix(doubleArray15);
        int int17 = matrix16.getCols();
        int int18 = matrix16.getCols();
        int int19 = matrix16.getCols();
        com.operations.Matrix.Matrix[] matrixArray20 = com.operations.Matrix.MatrixDecompositions.luDecomposition(matrix16);
        com.operations.Matrix.Matrix matrix21 = com.operations.Matrix.MatrixOperations.multiply(matrix8, matrix16);
        boolean boolean23 = com.operations.Matrix.MatrixUtils.compare(matrix1, matrix8, (double) (-1L));
        matrix1.setValue((int) (byte) 0, (int) (short) 1, 0.0d);
        double[][] doubleArray28 = matrix1.getData();
        com.operations.Matrix.Matrix matrix29 = com.operations.Matrix.MatrixOperations.transpose(matrix1);
        // The following exception was thrown during execution in test generation
        try {
            matrix1.setValue((-1), 0, (double) 1.0f);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: Index -1 out of bounds for length 2");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(matrix1);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertArrayEquals(doubleArray4, new double[] { 137.90576492663388d, (-1.0d) }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertArrayEquals(doubleArray5, new double[] { (-24.931892522286255d), (-135.63701830716116d) }, 1.0E-15);
        org.junit.Assert.assertNotNull(matrix8);
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertArrayEquals(doubleArray11, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertArrayEquals(doubleArray14, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 2 + "'", int17 == 2);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 2 + "'", int18 == 2);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 2 + "'", int19 == 2);
        org.junit.Assert.assertNotNull(matrixArray20);
        org.junit.Assert.assertNotNull(matrix21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertNotNull(matrix29);
    }

    @Test
    public void test3765() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3765");
        com.operations.Matrix.Matrix matrix2 = new com.operations.Matrix.Matrix((int) '#', 35);
    }

    @Test
    public void test3766() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3766");
        com.operations.Matrix.Matrix matrix2 = new com.operations.Matrix.Matrix(35, (int) (byte) 0);
        double[] doubleArray5 = new double[] { 10, 'a' };
        double[] doubleArray8 = new double[] { 10, 'a' };
        double[][] doubleArray9 = new double[][] { doubleArray5, doubleArray8 };
        com.operations.Matrix.Matrix matrix10 = new com.operations.Matrix.Matrix(doubleArray9);
        com.operations.Matrix.Matrix matrix11 = new com.operations.Matrix.Matrix(doubleArray9);
        com.operations.Matrix.Matrix matrix13 = com.operations.Matrix.MatrixTransformations.rotate2D((double) (short) 100);
        double[] doubleArray16 = new double[] { 137.90576492663388d, (byte) -1 };
        double[] doubleArray17 = com.operations.Matrix.MatrixSolver.solveGaussian(matrix13, doubleArray16);
        com.operations.Matrix.Matrix matrix18 = com.operations.Matrix.MatrixOperations.add(matrix11, matrix13);
        com.operations.Matrix.Matrix matrix19 = com.operations.Matrix.MatrixOperations.transpose(matrix13);
        double double20 = com.operations.Matrix.MatrixUtils.frobeniusNorm(matrix19);
        double[][] doubleArray21 = matrix19.getData();
        com.operations.Matrix.Matrix matrix23 = com.operations.Matrix.MatrixOperations.scalarMultiply(matrix19, (double) 'a');
        // The following exception was thrown during execution in test generation
        try {
            com.operations.Matrix.Matrix matrix24 = com.operations.Matrix.MatrixOperations.add(matrix2, matrix23);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Matrices must have the same dimensions for addition.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertArrayEquals(doubleArray5, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertArrayEquals(doubleArray8, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertNotNull(matrix13);
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertArrayEquals(doubleArray16, new double[] { 137.90576492663388d, (-1.0d) }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertArrayEquals(doubleArray17, new double[] { (-24.931892522286255d), (-135.63701830716116d) }, 1.0E-15);
        org.junit.Assert.assertNotNull(matrix18);
        org.junit.Assert.assertNotNull(matrix19);
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 1.414213562373095d + "'", double20 == 1.414213562373095d);
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertNotNull(matrix23);
    }

    @Test
    public void test3767() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3767");
        com.operations.Matrix.Matrix matrix2 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0L, (double) (byte) 10);
        int int3 = matrix2.getRows();
        com.operations.Matrix.Matrix matrix5 = com.operations.Matrix.MatrixOperations.scalarMultiply(matrix2, (double) 2);
        double double6 = com.operations.Matrix.MatrixUtils.frobeniusNorm(matrix2);
        com.operations.Matrix.Matrix matrix9 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0L, (double) (byte) 10);
        int int10 = matrix9.getRows();
        com.operations.Matrix.Matrix matrix12 = com.operations.Matrix.MatrixOperations.scalarMultiply(matrix9, (double) 2);
        com.operations.Matrix.Matrix matrix13 = com.operations.Matrix.MatrixOperations.subtract(matrix2, matrix12);
        com.operations.Matrix.Matrix matrix15 = com.operations.Matrix.MatrixTransformations.rotate2D((double) (short) 100);
        double[] doubleArray18 = new double[] { 137.90576492663388d, (byte) -1 };
        double[] doubleArray19 = com.operations.Matrix.MatrixSolver.solveGaussian(matrix15, doubleArray18);
        com.operations.Matrix.Matrix matrix22 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0L, (double) (byte) 10);
        double[] doubleArray25 = new double[] { 10, 'a' };
        double[] doubleArray28 = new double[] { 10, 'a' };
        double[][] doubleArray29 = new double[][] { doubleArray25, doubleArray28 };
        com.operations.Matrix.Matrix matrix30 = new com.operations.Matrix.Matrix(doubleArray29);
        int int31 = matrix30.getCols();
        int int32 = matrix30.getCols();
        int int33 = matrix30.getCols();
        com.operations.Matrix.Matrix[] matrixArray34 = com.operations.Matrix.MatrixDecompositions.luDecomposition(matrix30);
        com.operations.Matrix.Matrix matrix35 = com.operations.Matrix.MatrixOperations.multiply(matrix22, matrix30);
        boolean boolean37 = com.operations.Matrix.MatrixUtils.compare(matrix15, matrix22, (double) (-1L));
        double[][] doubleArray38 = matrix15.getData();
        com.operations.Matrix.Matrix matrix41 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0L, (double) 10L);
        boolean boolean43 = com.operations.Matrix.MatrixUtils.compare(matrix15, matrix41, 146.4308710620817d);
        com.operations.Matrix.Matrix matrix44 = com.operations.Matrix.MatrixOperations.subtract(matrix13, matrix41);
        com.operations.Matrix.Matrix matrix47 = com.operations.Matrix.MatrixTransformations.project2D((double) 0L, (double) 0);
        com.operations.Matrix.Matrix[] matrixArray48 = com.operations.Matrix.MatrixDecompositions.luDecomposition(matrix47);
        com.operations.Matrix.Matrix matrix49 = com.operations.Matrix.MatrixOperations.transpose(matrix47);
        com.operations.Matrix.Matrix matrix50 = com.operations.Matrix.MatrixOperations.multiply(matrix41, matrix49);
        double[][] doubleArray51 = matrix49.getData();
        org.junit.Assert.assertNotNull(matrix2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 2 + "'", int3 == 2);
        org.junit.Assert.assertNotNull(matrix5);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 10.0d + "'", double6 == 10.0d);
        org.junit.Assert.assertNotNull(matrix9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 2 + "'", int10 == 2);
        org.junit.Assert.assertNotNull(matrix12);
        org.junit.Assert.assertNotNull(matrix13);
        org.junit.Assert.assertNotNull(matrix15);
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertArrayEquals(doubleArray18, new double[] { 137.90576492663388d, (-1.0d) }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertArrayEquals(doubleArray19, new double[] { (-24.931892522286255d), (-135.63701830716116d) }, 1.0E-15);
        org.junit.Assert.assertNotNull(matrix22);
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertArrayEquals(doubleArray25, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertArrayEquals(doubleArray28, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 2 + "'", int31 == 2);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 2 + "'", int32 == 2);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 2 + "'", int33 == 2);
        org.junit.Assert.assertNotNull(matrixArray34);
        org.junit.Assert.assertNotNull(matrix35);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertNotNull(matrix41);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertNotNull(matrix44);
        org.junit.Assert.assertNotNull(matrix47);
        org.junit.Assert.assertNotNull(matrixArray48);
        org.junit.Assert.assertNotNull(matrix49);
        org.junit.Assert.assertNotNull(matrix50);
        org.junit.Assert.assertNotNull(doubleArray51);
    }

    @Test
    public void test3768() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3768");
        com.operations.Matrix.Matrix matrix2 = com.operations.Matrix.MatrixTransformations.scale2D(0.0d, (double) 2);
        org.junit.Assert.assertNotNull(matrix2);
    }

    @Test
    public void test3769() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3769");
        com.operations.Matrix.Matrix matrix2 = com.operations.Matrix.MatrixTransformations.scale2D(131.06486943494812d, (double) 10.0f);
        com.operations.Matrix.Matrix matrix4 = com.operations.Matrix.MatrixOperations.scalarMultiply(matrix2, 131.06486943494812d);
        java.lang.Class<?> wildcardClass5 = matrix2.getClass();
        org.junit.Assert.assertNotNull(matrix2);
        org.junit.Assert.assertNotNull(matrix4);
        org.junit.Assert.assertNotNull(wildcardClass5);
    }

    @Test
    public void test3770() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3770");
        com.operations.Matrix.Matrix matrix1 = com.operations.Matrix.MatrixTransformations.rotate2D(32.0d);
        com.operations.Matrix.Matrix matrix2 = com.operations.Matrix.MatrixDecompositions.choleskyDecomposition(matrix1);
        // The following exception was thrown during execution in test generation
        try {
            matrix1.setValue((int) '#', (int) (short) 1, (double) (byte) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: Index 35 out of bounds for length 2");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(matrix1);
        org.junit.Assert.assertNotNull(matrix2);
    }

    @Test
    public void test3771() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3771");
        com.operations.Matrix.Matrix matrix2 = com.operations.Matrix.MatrixTransformations.scale2D(0.0d, 65.19779036970327d);
        com.operations.Matrix.Matrix matrix3 = com.operations.Matrix.MatrixOperations.transpose(matrix2);
        com.operations.Matrix.Matrix matrix5 = com.operations.Matrix.MatrixTransformations.rotate2D(10.0d);
        com.operations.Matrix.Matrix matrix7 = com.operations.Matrix.MatrixOperations.scalarMultiply(matrix5, 0.01745240643728351d);
        com.operations.Matrix.Matrix matrix8 = com.operations.Matrix.MatrixOperations.subtract(matrix3, matrix7);
        // The following exception was thrown during execution in test generation
        try {
            matrix8.setValue(2, 100, 1040.0d);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: Index 2 out of bounds for length 2");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(matrix2);
        org.junit.Assert.assertNotNull(matrix3);
        org.junit.Assert.assertNotNull(matrix5);
        org.junit.Assert.assertNotNull(matrix7);
        org.junit.Assert.assertNotNull(matrix8);
    }

    @Test
    public void test3772() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3772");
        com.operations.Matrix.Matrix matrix1 = com.operations.Matrix.MatrixTransformations.rotate2D(350.0d);
        com.operations.Matrix.Matrix matrix2 = com.operations.Matrix.MatrixDecompositions.choleskyDecomposition(matrix1);
        com.operations.Matrix.Matrix matrix3 = com.operations.Matrix.MatrixDecompositions.choleskyDecomposition(matrix2);
        matrix3.print();
        int int5 = matrix3.getCols();
        org.junit.Assert.assertNotNull(matrix1);
        org.junit.Assert.assertNotNull(matrix2);
        org.junit.Assert.assertNotNull(matrix3);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 2 + "'", int5 == 2);
    }

    @Test
    public void test3773() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3773");
        com.operations.Matrix.Matrix matrix5 = com.operations.Matrix.MatrixUtils.generateRandomMatrix((int) '4', (int) ' ', 2, (int) (short) 100, (long) (short) 10);
        org.junit.Assert.assertNotNull(matrix5);
    }

    @Test
    public void test3774() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3774");
        com.operations.Matrix.Matrix matrix2 = com.operations.Matrix.MatrixTransformations.scale2D(101.9803902718557d, 108225.86824260534d);
        boolean boolean3 = com.operations.Matrix.MatrixUtils.isSquare(matrix2);
        org.junit.Assert.assertNotNull(matrix2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
    }

    @Test
    public void test3775() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3775");
        // The following exception was thrown during execution in test generation
        try {
            com.operations.Matrix.Matrix matrix4 = com.operations.Matrix.MatrixUtils.generateRandomMatrix((int) (short) 0, 1, (int) (byte) 1, (int) '#');
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
    }

    @Test
    public void test3776() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3776");
        com.operations.Matrix.Matrix matrix5 = com.operations.Matrix.MatrixUtils.generateRandomMatrix((int) (byte) 10, 1, 2, (int) ' ', 0L);
        org.junit.Assert.assertNotNull(matrix5);
    }

    @Test
    public void test3777() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3777");
        com.operations.Matrix.Matrix matrix1 = com.operations.Matrix.MatrixTransformations.rotate2D(1.414213562373095d);
        com.operations.Matrix.Matrix matrix2 = com.operations.Matrix.MatrixOperations.transpose(matrix1);
        com.operations.Matrix.Matrix matrix5 = com.operations.Matrix.MatrixTransformations.project2D((double) ' ', 0.0d);
        double[] doubleArray8 = new double[] { 10, 'a' };
        double[] doubleArray11 = new double[] { 10, 'a' };
        double[][] doubleArray12 = new double[][] { doubleArray8, doubleArray11 };
        com.operations.Matrix.Matrix matrix13 = new com.operations.Matrix.Matrix(doubleArray12);
        int int14 = matrix13.getCols();
        boolean boolean15 = com.operations.Matrix.MatrixUtils.isSquare(matrix13);
        com.operations.Matrix.Matrix matrix16 = com.operations.Matrix.MatrixOperations.transpose(matrix13);
        int int17 = matrix16.getRows();
        com.operations.Matrix.Matrix matrix20 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0L, (double) (byte) 10);
        double[] doubleArray23 = new double[] { 10, 'a' };
        double[] doubleArray26 = new double[] { 10, 'a' };
        double[][] doubleArray27 = new double[][] { doubleArray23, doubleArray26 };
        com.operations.Matrix.Matrix matrix28 = new com.operations.Matrix.Matrix(doubleArray27);
        int int29 = matrix28.getCols();
        int int30 = matrix28.getCols();
        int int31 = matrix28.getCols();
        com.operations.Matrix.Matrix[] matrixArray32 = com.operations.Matrix.MatrixDecompositions.luDecomposition(matrix28);
        com.operations.Matrix.Matrix matrix33 = com.operations.Matrix.MatrixOperations.multiply(matrix20, matrix28);
        com.operations.Matrix.Matrix matrix35 = com.operations.Matrix.MatrixTransformations.rotate2D((double) (short) 100);
        boolean boolean37 = com.operations.Matrix.MatrixUtils.compare(matrix28, matrix35, (double) (byte) 0);
        com.operations.Matrix.Matrix matrix38 = com.operations.Matrix.MatrixOperations.multiply(matrix16, matrix28);
        com.operations.Matrix.Matrix matrix39 = com.operations.Matrix.MatrixOperations.add(matrix5, matrix28);
        matrix28.print();
        com.operations.Matrix.Matrix[] matrixArray41 = com.operations.Matrix.MatrixDecompositions.luDecomposition(matrix28);
        com.operations.Matrix.Matrix matrix42 = com.operations.Matrix.MatrixOperations.add(matrix1, matrix28);
        double double43 = com.operations.Matrix.MatrixUtils.frobeniusNorm(matrix1);
        boolean boolean44 = com.operations.Matrix.MatrixUtils.isSquare(matrix1);
        matrix1.setValue((int) (short) 0, (int) (short) 0, 10.270003094125075d);
        org.junit.Assert.assertNotNull(matrix1);
        org.junit.Assert.assertNotNull(matrix2);
        org.junit.Assert.assertNotNull(matrix5);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertArrayEquals(doubleArray8, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertArrayEquals(doubleArray11, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 2 + "'", int14 == 2);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNotNull(matrix16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 2 + "'", int17 == 2);
        org.junit.Assert.assertNotNull(matrix20);
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertArrayEquals(doubleArray23, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertArrayEquals(doubleArray26, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 2 + "'", int29 == 2);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 2 + "'", int30 == 2);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 2 + "'", int31 == 2);
        org.junit.Assert.assertNotNull(matrixArray32);
        org.junit.Assert.assertNotNull(matrix33);
        org.junit.Assert.assertNotNull(matrix35);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(matrix38);
        org.junit.Assert.assertNotNull(matrix39);
        org.junit.Assert.assertNotNull(matrixArray41);
        org.junit.Assert.assertNotNull(matrix42);
        org.junit.Assert.assertTrue("'" + double43 + "' != '" + 1.414213562373095d + "'", double43 == 1.414213562373095d);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
    }

    @Test
    public void test3778() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3778");
        com.operations.Matrix.Matrix matrix2 = com.operations.Matrix.MatrixTransformations.project2D(1.0d, (double) (byte) 10);
        boolean boolean3 = com.operations.Matrix.MatrixUtils.isSquare(matrix2);
        matrix2.print();
        org.junit.Assert.assertNotNull(matrix2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
    }

    @Test
    public void test3779() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3779");
        com.operations.Matrix.Matrix matrix2 = new com.operations.Matrix.Matrix((int) '4', 1);
        int int3 = matrix2.getRows();
        com.operations.Matrix.Matrix matrix6 = com.operations.Matrix.MatrixTransformations.scale2D((double) '4', 975.1410154434076d);
        boolean boolean8 = com.operations.Matrix.MatrixUtils.compare(matrix2, matrix6, 35.0d);
        // The following exception was thrown during execution in test generation
        try {
            double double11 = matrix2.getValue(100, (int) '4');
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 52 + "'", int3 == 52);
        org.junit.Assert.assertNotNull(matrix6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
    }

    @Test
    public void test3780() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3780");
        com.operations.Matrix.Matrix matrix2 = new com.operations.Matrix.Matrix(52, 2);
        // The following exception was thrown during execution in test generation
        try {
            com.operations.Matrix.Matrix matrix3 = com.operations.Matrix.MatrixDecompositions.choleskyDecomposition(matrix2);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Matrix must be square for Cholesky decomposition.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test3781() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3781");
        com.operations.Matrix.Matrix matrix2 = com.operations.Matrix.MatrixTransformations.project2D(36.40054944640259d, 365.8209944768069d);
        com.operations.Matrix.Matrix matrix5 = com.operations.Matrix.MatrixTransformations.project2D(0.0d, (double) 0);
        com.operations.Matrix.Matrix[] matrixArray6 = com.operations.Matrix.MatrixDecompositions.luDecomposition(matrix5);
        com.operations.Matrix.Matrix matrix9 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0L, (double) (byte) 10);
        int int10 = matrix9.getRows();
        com.operations.Matrix.Matrix matrix12 = com.operations.Matrix.MatrixOperations.scalarMultiply(matrix9, (double) 2);
        double double13 = com.operations.Matrix.MatrixUtils.frobeniusNorm(matrix9);
        int int14 = matrix9.getRows();
        com.operations.Matrix.Matrix matrix15 = com.operations.Matrix.MatrixOperations.transpose(matrix9);
        com.operations.Matrix.Matrix matrix16 = com.operations.Matrix.MatrixOperations.multiply(matrix5, matrix15);
        com.operations.Matrix.Matrix matrix17 = com.operations.Matrix.MatrixOperations.add(matrix2, matrix16);
        int int18 = matrix2.getCols();
        org.junit.Assert.assertNotNull(matrix2);
        org.junit.Assert.assertNotNull(matrix5);
        org.junit.Assert.assertNotNull(matrixArray6);
        org.junit.Assert.assertNotNull(matrix9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 2 + "'", int10 == 2);
        org.junit.Assert.assertNotNull(matrix12);
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 10.0d + "'", double13 == 10.0d);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 2 + "'", int14 == 2);
        org.junit.Assert.assertNotNull(matrix15);
        org.junit.Assert.assertNotNull(matrix16);
        org.junit.Assert.assertNotNull(matrix17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 2 + "'", int18 == 2);
    }

    @Test
    public void test3782() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3782");
        com.operations.Matrix.Matrix matrix5 = com.operations.Matrix.MatrixUtils.generateRandomMatrix((int) (byte) 1, (int) 'a', 100, (int) (byte) 1, (long) (short) 1);
        matrix5.print();
        matrix5.print();
        boolean boolean8 = com.operations.Matrix.MatrixUtils.isSquare(matrix5);
        com.operations.Matrix.Matrix matrix10 = com.operations.Matrix.MatrixOperations.scalarMultiply(matrix5, 98.33107342035883d);
        org.junit.Assert.assertNotNull(matrix5);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(matrix10);
    }

    @Test
    public void test3783() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3783");
        com.operations.Matrix.Matrix matrix2 = com.operations.Matrix.MatrixTransformations.scale2D((double) 100L, 1.0d);
        com.operations.Matrix.Matrix matrix3 = com.operations.Matrix.MatrixOperations.transpose(matrix2);
        com.operations.Matrix.Matrix matrix6 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0L, (double) (byte) 10);
        double[] doubleArray9 = new double[] { 10, 'a' };
        double[] doubleArray12 = new double[] { 10, 'a' };
        double[][] doubleArray13 = new double[][] { doubleArray9, doubleArray12 };
        com.operations.Matrix.Matrix matrix14 = new com.operations.Matrix.Matrix(doubleArray13);
        int int15 = matrix14.getCols();
        int int16 = matrix14.getCols();
        int int17 = matrix14.getCols();
        com.operations.Matrix.Matrix[] matrixArray18 = com.operations.Matrix.MatrixDecompositions.luDecomposition(matrix14);
        com.operations.Matrix.Matrix matrix19 = com.operations.Matrix.MatrixOperations.multiply(matrix6, matrix14);
        int int20 = matrix14.getRows();
        boolean boolean22 = com.operations.Matrix.MatrixUtils.compare(matrix2, matrix14, (-1.0d));
        com.operations.Matrix.Matrix[] matrixArray23 = com.operations.Matrix.MatrixDecompositions.luDecomposition(matrix2);
        boolean boolean24 = com.operations.Matrix.MatrixUtils.isSymmetric(matrix2);
        double[] doubleArray27 = new double[] { 10, 'a' };
        double[] doubleArray30 = new double[] { 10, 'a' };
        double[][] doubleArray31 = new double[][] { doubleArray27, doubleArray30 };
        com.operations.Matrix.Matrix matrix32 = new com.operations.Matrix.Matrix(doubleArray31);
        int int33 = matrix32.getCols();
        int int34 = matrix32.getCols();
        matrix32.print();
        double[] doubleArray38 = new double[] { 10, 'a' };
        double[] doubleArray41 = new double[] { 10, 'a' };
        double[][] doubleArray42 = new double[][] { doubleArray38, doubleArray41 };
        com.operations.Matrix.Matrix matrix43 = new com.operations.Matrix.Matrix(doubleArray42);
        boolean boolean45 = com.operations.Matrix.MatrixUtils.compare(matrix32, matrix43, (double) (-1));
        boolean boolean46 = com.operations.Matrix.MatrixUtils.isSymmetric(matrix32);
        int int47 = matrix32.getRows();
        com.operations.Matrix.Matrix matrix48 = com.operations.Matrix.MatrixOperations.add(matrix2, matrix32);
        double[] doubleArray51 = new double[] { 10, 'a' };
        double[] doubleArray54 = new double[] { 10, 'a' };
        double[][] doubleArray55 = new double[][] { doubleArray51, doubleArray54 };
        com.operations.Matrix.Matrix matrix56 = new com.operations.Matrix.Matrix(doubleArray55);
        int int57 = matrix56.getCols();
        int int58 = matrix56.getCols();
        boolean boolean59 = com.operations.Matrix.MatrixUtils.isSquare(matrix56);
        com.operations.Matrix.Matrix matrix60 = com.operations.Matrix.MatrixDecompositions.choleskyDecomposition(matrix56);
        com.operations.Matrix.Matrix matrix63 = com.operations.Matrix.MatrixTransformations.project2D(0.0d, (double) 0);
        com.operations.Matrix.Matrix matrix64 = com.operations.Matrix.MatrixOperations.subtract(matrix60, matrix63);
        com.operations.Matrix.Matrix matrix66 = com.operations.Matrix.MatrixOperations.scalarMultiply(matrix60, (double) 1.0f);
        int int67 = matrix66.getCols();
        double[] doubleArray70 = new double[] { 10, 'a' };
        double[] doubleArray73 = new double[] { 10, 'a' };
        double[][] doubleArray74 = new double[][] { doubleArray70, doubleArray73 };
        com.operations.Matrix.Matrix matrix75 = new com.operations.Matrix.Matrix(doubleArray74);
        com.operations.Matrix.Matrix matrix76 = new com.operations.Matrix.Matrix(doubleArray74);
        com.operations.Matrix.Matrix[] matrixArray77 = com.operations.Matrix.MatrixDecompositions.luDecomposition(matrix76);
        com.operations.Matrix.Matrix matrix80 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0, (double) 100L);
        com.operations.Matrix.Matrix matrix81 = com.operations.Matrix.MatrixOperations.subtract(matrix76, matrix80);
        boolean boolean82 = com.operations.Matrix.MatrixUtils.isSymmetric(matrix76);
        matrix76.setValue(0, 0, (double) '#');
        boolean boolean88 = com.operations.Matrix.MatrixUtils.compare(matrix66, matrix76, (-0.1736481776669303d));
        com.operations.Matrix.Matrix matrix89 = com.operations.Matrix.MatrixOperations.add(matrix32, matrix76);
        matrix89.print();
        boolean boolean91 = com.operations.Matrix.MatrixUtils.isSymmetric(matrix89);
        org.junit.Assert.assertNotNull(matrix2);
        org.junit.Assert.assertNotNull(matrix3);
        org.junit.Assert.assertNotNull(matrix6);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertArrayEquals(doubleArray9, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertArrayEquals(doubleArray12, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 2 + "'", int15 == 2);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 2 + "'", int16 == 2);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 2 + "'", int17 == 2);
        org.junit.Assert.assertNotNull(matrixArray18);
        org.junit.Assert.assertNotNull(matrix19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 2 + "'", int20 == 2);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(matrixArray23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertArrayEquals(doubleArray27, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertArrayEquals(doubleArray30, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 2 + "'", int33 == 2);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 2 + "'", int34 == 2);
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertArrayEquals(doubleArray38, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertArrayEquals(doubleArray41, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 2 + "'", int47 == 2);
        org.junit.Assert.assertNotNull(matrix48);
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertArrayEquals(doubleArray51, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray54);
        org.junit.Assert.assertArrayEquals(doubleArray54, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 2 + "'", int57 == 2);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 2 + "'", int58 == 2);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + true + "'", boolean59 == true);
        org.junit.Assert.assertNotNull(matrix60);
        org.junit.Assert.assertNotNull(matrix63);
        org.junit.Assert.assertNotNull(matrix64);
        org.junit.Assert.assertNotNull(matrix66);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 2 + "'", int67 == 2);
        org.junit.Assert.assertNotNull(doubleArray70);
        org.junit.Assert.assertArrayEquals(doubleArray70, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray73);
        org.junit.Assert.assertArrayEquals(doubleArray73, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray74);
        org.junit.Assert.assertNotNull(matrixArray77);
        org.junit.Assert.assertNotNull(matrix80);
        org.junit.Assert.assertNotNull(matrix81);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
        org.junit.Assert.assertNotNull(matrix89);
        org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + false + "'", boolean91 == false);
    }

    @Test
    public void test3784() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3784");
        com.operations.Matrix.Matrix matrix5 = com.operations.Matrix.MatrixUtils.generateRandomMatrix((int) ' ', 10, (int) (short) 0, 10, (-1L));
        com.operations.Matrix.Matrix matrix7 = com.operations.Matrix.MatrixTransformations.rotate2D((double) '4');
        double[] doubleArray10 = new double[] { 10, 'a' };
        double[] doubleArray13 = new double[] { 10, 'a' };
        double[][] doubleArray14 = new double[][] { doubleArray10, doubleArray13 };
        com.operations.Matrix.Matrix matrix15 = new com.operations.Matrix.Matrix(doubleArray14);
        com.operations.Matrix.Matrix matrix16 = new com.operations.Matrix.Matrix(doubleArray14);
        com.operations.Matrix.Matrix matrix18 = com.operations.Matrix.MatrixTransformations.rotate2D((double) (short) 100);
        double[] doubleArray21 = new double[] { 137.90576492663388d, (byte) -1 };
        double[] doubleArray22 = com.operations.Matrix.MatrixSolver.solveGaussian(matrix18, doubleArray21);
        com.operations.Matrix.Matrix matrix23 = com.operations.Matrix.MatrixOperations.add(matrix16, matrix18);
        boolean boolean24 = com.operations.Matrix.MatrixUtils.isSymmetric(matrix23);
        boolean boolean26 = com.operations.Matrix.MatrixUtils.compare(matrix7, matrix23, 364.0054944640259d);
        com.operations.Matrix.Matrix matrix29 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0L, (double) (byte) 10);
        int int30 = matrix29.getRows();
        com.operations.Matrix.Matrix matrix32 = com.operations.Matrix.MatrixOperations.scalarMultiply(matrix29, (double) 2);
        matrix29.print();
        com.operations.Matrix.Matrix matrix34 = com.operations.Matrix.MatrixOperations.multiply(matrix23, matrix29);
        com.operations.Matrix.Matrix matrix37 = com.operations.Matrix.MatrixTransformations.project2D((double) ' ', 0.0d);
        double[] doubleArray40 = new double[] { 10, 'a' };
        double[] doubleArray43 = new double[] { 10, 'a' };
        double[][] doubleArray44 = new double[][] { doubleArray40, doubleArray43 };
        com.operations.Matrix.Matrix matrix45 = new com.operations.Matrix.Matrix(doubleArray44);
        int int46 = matrix45.getCols();
        boolean boolean47 = com.operations.Matrix.MatrixUtils.isSquare(matrix45);
        com.operations.Matrix.Matrix matrix48 = com.operations.Matrix.MatrixOperations.transpose(matrix45);
        int int49 = matrix48.getRows();
        com.operations.Matrix.Matrix matrix52 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0L, (double) (byte) 10);
        double[] doubleArray55 = new double[] { 10, 'a' };
        double[] doubleArray58 = new double[] { 10, 'a' };
        double[][] doubleArray59 = new double[][] { doubleArray55, doubleArray58 };
        com.operations.Matrix.Matrix matrix60 = new com.operations.Matrix.Matrix(doubleArray59);
        int int61 = matrix60.getCols();
        int int62 = matrix60.getCols();
        int int63 = matrix60.getCols();
        com.operations.Matrix.Matrix[] matrixArray64 = com.operations.Matrix.MatrixDecompositions.luDecomposition(matrix60);
        com.operations.Matrix.Matrix matrix65 = com.operations.Matrix.MatrixOperations.multiply(matrix52, matrix60);
        com.operations.Matrix.Matrix matrix67 = com.operations.Matrix.MatrixTransformations.rotate2D((double) (short) 100);
        boolean boolean69 = com.operations.Matrix.MatrixUtils.compare(matrix60, matrix67, (double) (byte) 0);
        com.operations.Matrix.Matrix matrix70 = com.operations.Matrix.MatrixOperations.multiply(matrix48, matrix60);
        com.operations.Matrix.Matrix matrix71 = com.operations.Matrix.MatrixOperations.add(matrix37, matrix60);
        matrix60.print();
        com.operations.Matrix.Matrix matrix73 = com.operations.Matrix.MatrixOperations.add(matrix29, matrix60);
        com.operations.Matrix.Matrix matrix74 = com.operations.Matrix.MatrixOperations.transpose(matrix29);
        boolean boolean75 = com.operations.Matrix.MatrixUtils.isSquare(matrix29);
        com.operations.Matrix.Matrix matrix76 = com.operations.Matrix.MatrixOperations.transpose(matrix29);
        // The following exception was thrown during execution in test generation
        try {
            com.operations.Matrix.Matrix matrix77 = com.operations.Matrix.MatrixOperations.multiply(matrix5, matrix76);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Matrix A's columns must match Matrix B's rows for multiplication.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(matrix5);
        org.junit.Assert.assertNotNull(matrix7);
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertArrayEquals(doubleArray10, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertArrayEquals(doubleArray13, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertNotNull(matrix18);
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertArrayEquals(doubleArray21, new double[] { 137.90576492663388d, (-1.0d) }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertArrayEquals(doubleArray22, new double[] { (-24.931892522286255d), (-135.63701830716116d) }, 1.0E-15);
        org.junit.Assert.assertNotNull(matrix23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNotNull(matrix29);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 2 + "'", int30 == 2);
        org.junit.Assert.assertNotNull(matrix32);
        org.junit.Assert.assertNotNull(matrix34);
        org.junit.Assert.assertNotNull(matrix37);
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertArrayEquals(doubleArray40, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertArrayEquals(doubleArray43, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 2 + "'", int46 == 2);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        org.junit.Assert.assertNotNull(matrix48);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 2 + "'", int49 == 2);
        org.junit.Assert.assertNotNull(matrix52);
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertArrayEquals(doubleArray55, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray58);
        org.junit.Assert.assertArrayEquals(doubleArray58, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray59);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 2 + "'", int61 == 2);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 2 + "'", int62 == 2);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 2 + "'", int63 == 2);
        org.junit.Assert.assertNotNull(matrixArray64);
        org.junit.Assert.assertNotNull(matrix65);
        org.junit.Assert.assertNotNull(matrix67);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertNotNull(matrix70);
        org.junit.Assert.assertNotNull(matrix71);
        org.junit.Assert.assertNotNull(matrix73);
        org.junit.Assert.assertNotNull(matrix74);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + true + "'", boolean75 == true);
        org.junit.Assert.assertNotNull(matrix76);
    }

    @Test
    public void test3785() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3785");
        com.operations.Matrix.Matrix matrix4 = com.operations.Matrix.MatrixUtils.generateRandomMatrix((int) (short) 10, (int) (short) 1, (int) (short) 100, (int) (short) -1);
        org.junit.Assert.assertNotNull(matrix4);
    }

    @Test
    public void test3786() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3786");
        double[] doubleArray2 = new double[] { 10, 'a' };
        double[] doubleArray5 = new double[] { 10, 'a' };
        double[][] doubleArray6 = new double[][] { doubleArray2, doubleArray5 };
        com.operations.Matrix.Matrix matrix7 = new com.operations.Matrix.Matrix(doubleArray6);
        int int8 = matrix7.getCols();
        int int9 = matrix7.getCols();
        int int10 = matrix7.getCols();
        com.operations.Matrix.Matrix matrix16 = com.operations.Matrix.MatrixUtils.generateRandomMatrix(100, (int) (byte) 1, (int) '#', (int) '#', 1L);
        double double19 = matrix16.getValue((int) '4', 0);
        double double20 = com.operations.Matrix.MatrixUtils.frobeniusNorm(matrix16);
        boolean boolean21 = com.operations.Matrix.MatrixUtils.isSquare(matrix16);
        boolean boolean23 = com.operations.Matrix.MatrixUtils.compare(matrix7, matrix16, (double) 100L);
        com.operations.Matrix.Matrix matrix24 = com.operations.Matrix.MatrixOperations.transpose(matrix16);
        // The following exception was thrown during execution in test generation
        try {
            double double27 = matrix24.getValue((int) (short) -1, 0);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertArrayEquals(doubleArray2, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertArrayEquals(doubleArray5, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 2 + "'", int8 == 2);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 2 + "'", int9 == 2);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 2 + "'", int10 == 2);
        org.junit.Assert.assertNotNull(matrix16);
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 35.0d + "'", double19 == 35.0d);
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 350.0d + "'", double20 == 350.0d);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(matrix24);
    }

    @Test
    public void test3787() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3787");
        com.operations.Matrix.Matrix matrix5 = com.operations.Matrix.MatrixUtils.generateRandomMatrix(32, 97, (int) ' ', (int) (byte) 100, (long) (short) 1);
        com.operations.Matrix.Matrix matrix8 = com.operations.Matrix.MatrixTransformations.project2D((double) (byte) 100, 32.0d);
        // The following exception was thrown during execution in test generation
        try {
            com.operations.Matrix.Matrix matrix9 = com.operations.Matrix.MatrixOperations.multiply(matrix5, matrix8);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Matrix A's columns must match Matrix B's rows for multiplication.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(matrix5);
        org.junit.Assert.assertNotNull(matrix8);
    }

    @Test
    public void test3788() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3788");
        com.operations.Matrix.Matrix matrix2 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0L, 100.00499987500625d);
        boolean boolean3 = com.operations.Matrix.MatrixUtils.isSquare(matrix2);
        matrix2.print();
        org.junit.Assert.assertNotNull(matrix2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
    }

    @Test
    public void test3789() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3789");
        com.operations.Matrix.Matrix matrix2 = com.operations.Matrix.MatrixTransformations.project2D((double) 0L, 30.0d);
        com.operations.Matrix.Matrix matrix5 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0L, (double) (byte) 10);
        double[] doubleArray8 = new double[] { 10, 'a' };
        double[] doubleArray11 = new double[] { 10, 'a' };
        double[][] doubleArray12 = new double[][] { doubleArray8, doubleArray11 };
        com.operations.Matrix.Matrix matrix13 = new com.operations.Matrix.Matrix(doubleArray12);
        int int14 = matrix13.getCols();
        int int15 = matrix13.getCols();
        int int16 = matrix13.getCols();
        com.operations.Matrix.Matrix[] matrixArray17 = com.operations.Matrix.MatrixDecompositions.luDecomposition(matrix13);
        com.operations.Matrix.Matrix matrix18 = com.operations.Matrix.MatrixOperations.multiply(matrix5, matrix13);
        com.operations.Matrix.Matrix matrix20 = com.operations.Matrix.MatrixTransformations.rotate2D((double) (short) 100);
        boolean boolean22 = com.operations.Matrix.MatrixUtils.compare(matrix13, matrix20, (double) (byte) 0);
        double[] doubleArray25 = new double[] { 10, 'a' };
        double[] doubleArray28 = new double[] { 10, 'a' };
        double[][] doubleArray29 = new double[][] { doubleArray25, doubleArray28 };
        com.operations.Matrix.Matrix matrix30 = new com.operations.Matrix.Matrix(doubleArray29);
        com.operations.Matrix.Matrix matrix31 = new com.operations.Matrix.Matrix(doubleArray29);
        com.operations.Matrix.Matrix matrix32 = new com.operations.Matrix.Matrix(doubleArray29);
        boolean boolean34 = com.operations.Matrix.MatrixUtils.compare(matrix13, matrix32, (double) (-1));
        double[] doubleArray37 = new double[] { 10, 'a' };
        double[] doubleArray40 = new double[] { 10, 'a' };
        double[][] doubleArray41 = new double[][] { doubleArray37, doubleArray40 };
        com.operations.Matrix.Matrix matrix42 = new com.operations.Matrix.Matrix(doubleArray41);
        com.operations.Matrix.Matrix matrix43 = new com.operations.Matrix.Matrix(doubleArray41);
        boolean boolean44 = com.operations.Matrix.MatrixUtils.isSquare(matrix43);
        com.operations.Matrix.Matrix matrix45 = com.operations.Matrix.MatrixOperations.multiply(matrix32, matrix43);
        com.operations.Matrix.Matrix matrix48 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0L, (double) (byte) 10);
        int int49 = matrix48.getRows();
        com.operations.Matrix.Matrix matrix51 = com.operations.Matrix.MatrixOperations.scalarMultiply(matrix48, (double) 2);
        matrix48.print();
        matrix48.print();
        com.operations.Matrix.Matrix matrix54 = com.operations.Matrix.MatrixOperations.multiply(matrix45, matrix48);
        com.operations.Matrix.Matrix matrix57 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0L, (double) (byte) 10);
        double[] doubleArray60 = new double[] { 10, 'a' };
        double[] doubleArray63 = new double[] { 10, 'a' };
        double[][] doubleArray64 = new double[][] { doubleArray60, doubleArray63 };
        com.operations.Matrix.Matrix matrix65 = new com.operations.Matrix.Matrix(doubleArray64);
        int int66 = matrix65.getCols();
        int int67 = matrix65.getCols();
        int int68 = matrix65.getCols();
        com.operations.Matrix.Matrix[] matrixArray69 = com.operations.Matrix.MatrixDecompositions.luDecomposition(matrix65);
        com.operations.Matrix.Matrix matrix70 = com.operations.Matrix.MatrixOperations.multiply(matrix57, matrix65);
        com.operations.Matrix.Matrix matrix72 = com.operations.Matrix.MatrixTransformations.rotate2D((double) (short) 100);
        boolean boolean74 = com.operations.Matrix.MatrixUtils.compare(matrix65, matrix72, (double) (byte) 0);
        boolean boolean75 = com.operations.Matrix.MatrixUtils.isSymmetric(matrix72);
        boolean boolean76 = com.operations.Matrix.MatrixUtils.isSquare(matrix72);
        com.operations.Matrix.Matrix matrix78 = com.operations.Matrix.MatrixTransformations.rotate2D((double) (short) 100);
        boolean boolean80 = com.operations.Matrix.MatrixUtils.compare(matrix72, matrix78, (double) (byte) 100);
        matrix78.print();
        com.operations.Matrix.Matrix[] matrixArray82 = com.operations.Matrix.MatrixDecompositions.luDecomposition(matrix78);
        boolean boolean84 = com.operations.Matrix.MatrixUtils.compare(matrix45, matrix78, 145.11374848717816d);
        boolean boolean86 = com.operations.Matrix.MatrixUtils.compare(matrix2, matrix45, 21.023651153076518d);
        // The following exception was thrown during execution in test generation
        try {
            double double89 = matrix2.getValue((int) (short) -1, 0);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(matrix2);
        org.junit.Assert.assertNotNull(matrix5);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertArrayEquals(doubleArray8, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertArrayEquals(doubleArray11, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 2 + "'", int14 == 2);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 2 + "'", int15 == 2);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 2 + "'", int16 == 2);
        org.junit.Assert.assertNotNull(matrixArray17);
        org.junit.Assert.assertNotNull(matrix18);
        org.junit.Assert.assertNotNull(matrix20);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertArrayEquals(doubleArray25, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertArrayEquals(doubleArray28, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertArrayEquals(doubleArray37, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertArrayEquals(doubleArray40, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertNotNull(matrix45);
        org.junit.Assert.assertNotNull(matrix48);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 2 + "'", int49 == 2);
        org.junit.Assert.assertNotNull(matrix51);
        org.junit.Assert.assertNotNull(matrix54);
        org.junit.Assert.assertNotNull(matrix57);
        org.junit.Assert.assertNotNull(doubleArray60);
        org.junit.Assert.assertArrayEquals(doubleArray60, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray63);
        org.junit.Assert.assertArrayEquals(doubleArray63, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray64);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 2 + "'", int66 == 2);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 2 + "'", int67 == 2);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 2 + "'", int68 == 2);
        org.junit.Assert.assertNotNull(matrixArray69);
        org.junit.Assert.assertNotNull(matrix70);
        org.junit.Assert.assertNotNull(matrix72);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + true + "'", boolean76 == true);
        org.junit.Assert.assertNotNull(matrix78);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + true + "'", boolean80 == true);
        org.junit.Assert.assertNotNull(matrixArray82);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
    }

    @Test
    public void test3790() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3790");
        com.operations.Matrix.Matrix matrix1 = com.operations.Matrix.MatrixTransformations.rotate2D(375.213087380171d);
        org.junit.Assert.assertNotNull(matrix1);
    }

    @Test
    public void test3791() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3791");
        com.operations.Matrix.Matrix matrix1 = com.operations.Matrix.MatrixTransformations.rotate2D((double) 1.0f);
        com.operations.Matrix.Matrix matrix4 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0L, (double) (byte) 10);
        int int5 = matrix4.getRows();
        com.operations.Matrix.Matrix matrix7 = com.operations.Matrix.MatrixOperations.scalarMultiply(matrix4, (double) 2);
        boolean boolean9 = com.operations.Matrix.MatrixUtils.compare(matrix1, matrix7, (double) 10.0f);
        com.operations.Matrix.Matrix[] matrixArray10 = com.operations.Matrix.MatrixDecompositions.luDecomposition(matrix7);
        com.operations.Matrix.Matrix matrix12 = com.operations.Matrix.MatrixOperations.scalarMultiply(matrix7, 20.0d);
        com.operations.Matrix.Matrix matrix14 = com.operations.Matrix.MatrixTransformations.rotate2D(350.0d);
        com.operations.Matrix.Matrix matrix16 = com.operations.Matrix.MatrixTransformations.rotate2D((double) (short) 100);
        double[] doubleArray19 = new double[] { 137.90576492663388d, (byte) -1 };
        double[] doubleArray20 = com.operations.Matrix.MatrixSolver.solveGaussian(matrix16, doubleArray19);
        double[] doubleArray21 = com.operations.Matrix.MatrixSolver.solveGaussian(matrix14, doubleArray20);
        com.operations.Matrix.Matrix matrix22 = com.operations.Matrix.MatrixOperations.multiply(matrix12, matrix14);
        boolean boolean23 = com.operations.Matrix.MatrixUtils.isSymmetric(matrix12);
        double[] doubleArray26 = new double[] { 10, 'a' };
        double[] doubleArray29 = new double[] { 10, 'a' };
        double[][] doubleArray30 = new double[][] { doubleArray26, doubleArray29 };
        com.operations.Matrix.Matrix matrix31 = new com.operations.Matrix.Matrix(doubleArray30);
        com.operations.Matrix.Matrix matrix32 = new com.operations.Matrix.Matrix(doubleArray30);
        boolean boolean33 = com.operations.Matrix.MatrixUtils.isSquare(matrix32);
        com.operations.Matrix.Matrix matrix35 = com.operations.Matrix.MatrixOperations.scalarMultiply(matrix32, (double) 1.0f);
        com.operations.Matrix.Matrix matrix36 = com.operations.Matrix.MatrixOperations.transpose(matrix35);
        boolean boolean38 = com.operations.Matrix.MatrixUtils.compare(matrix12, matrix35, 35.0d);
        boolean boolean39 = com.operations.Matrix.MatrixUtils.isSymmetric(matrix12);
        org.junit.Assert.assertNotNull(matrix1);
        org.junit.Assert.assertNotNull(matrix4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 2 + "'", int5 == 2);
        org.junit.Assert.assertNotNull(matrix7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(matrixArray10);
        org.junit.Assert.assertNotNull(matrix12);
        org.junit.Assert.assertNotNull(matrix14);
        org.junit.Assert.assertNotNull(matrix16);
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertArrayEquals(doubleArray19, new double[] { 137.90576492663388d, (-1.0d) }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertArrayEquals(doubleArray20, new double[] { (-24.931892522286255d), (-135.63701830716116d) }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertArrayEquals(doubleArray21, new double[] { (-0.9999999999999858d), (-137.90576492663388d) }, 1.0E-15);
        org.junit.Assert.assertNotNull(matrix22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertArrayEquals(doubleArray26, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertArrayEquals(doubleArray29, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertNotNull(matrix35);
        org.junit.Assert.assertNotNull(matrix36);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
    }

    @Test
    public void test3792() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3792");
        com.operations.Matrix.Matrix matrix1 = com.operations.Matrix.MatrixTransformations.rotate2D(4826.701772432185d);
        org.junit.Assert.assertNotNull(matrix1);
    }

    @Test
    public void test3793() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3793");
        com.operations.Matrix.Matrix matrix2 = com.operations.Matrix.MatrixTransformations.scale2D((double) 10, (double) 0);
        java.lang.Class<?> wildcardClass3 = matrix2.getClass();
        org.junit.Assert.assertNotNull(matrix2);
        org.junit.Assert.assertNotNull(wildcardClass3);
    }

    @Test
    public void test3794() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3794");
        com.operations.Matrix.Matrix matrix2 = com.operations.Matrix.MatrixTransformations.project2D(263.29311316552224d, (-0.1736481776669303d));
        org.junit.Assert.assertNotNull(matrix2);
    }

    @Test
    public void test3795() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3795");
        com.operations.Matrix.Matrix matrix2 = new com.operations.Matrix.Matrix((int) 'a', (int) (short) 100);
        double double3 = com.operations.Matrix.MatrixUtils.frobeniusNorm(matrix2);
        // The following exception was thrown during execution in test generation
        try {
            double double6 = matrix2.getValue((int) (byte) -1, (int) (short) 1);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + 0.0d + "'", double3 == 0.0d);
    }

    @Test
    public void test3796() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3796");
        com.operations.Matrix.Matrix matrix2 = com.operations.Matrix.MatrixTransformations.scale2D((-0.1736481776669303d), (double) 100L);
        matrix2.print();
        org.junit.Assert.assertNotNull(matrix2);
    }

    @Test
    public void test3797() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3797");
        com.operations.Matrix.Matrix matrix1 = com.operations.Matrix.MatrixTransformations.rotate2D((double) '4');
        double[] doubleArray4 = new double[] { 10, 'a' };
        double[] doubleArray7 = new double[] { 10, 'a' };
        double[][] doubleArray8 = new double[][] { doubleArray4, doubleArray7 };
        com.operations.Matrix.Matrix matrix9 = new com.operations.Matrix.Matrix(doubleArray8);
        com.operations.Matrix.Matrix matrix10 = new com.operations.Matrix.Matrix(doubleArray8);
        com.operations.Matrix.Matrix matrix12 = com.operations.Matrix.MatrixTransformations.rotate2D((double) (short) 100);
        double[] doubleArray15 = new double[] { 137.90576492663388d, (byte) -1 };
        double[] doubleArray16 = com.operations.Matrix.MatrixSolver.solveGaussian(matrix12, doubleArray15);
        com.operations.Matrix.Matrix matrix17 = com.operations.Matrix.MatrixOperations.add(matrix10, matrix12);
        boolean boolean18 = com.operations.Matrix.MatrixUtils.isSymmetric(matrix17);
        boolean boolean20 = com.operations.Matrix.MatrixUtils.compare(matrix1, matrix17, 364.0054944640259d);
        double double21 = com.operations.Matrix.MatrixUtils.frobeniusNorm(matrix17);
        boolean boolean22 = com.operations.Matrix.MatrixUtils.isSquare(matrix17);
        double double23 = com.operations.Matrix.MatrixUtils.frobeniusNorm(matrix17);
        double double24 = com.operations.Matrix.MatrixUtils.frobeniusNorm(matrix17);
        double double25 = com.operations.Matrix.MatrixUtils.frobeniusNorm(matrix17);
        org.junit.Assert.assertNotNull(matrix1);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertArrayEquals(doubleArray4, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertArrayEquals(doubleArray7, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertNotNull(matrix12);
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertArrayEquals(doubleArray15, new double[] { 137.90576492663388d, (-1.0d) }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertArrayEquals(doubleArray16, new double[] { (-24.931892522286255d), (-135.63701830716116d) }, 1.0E-15);
        org.junit.Assert.assertNotNull(matrix17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 137.15495886388925d + "'", double21 == 137.15495886388925d);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertTrue("'" + double23 + "' != '" + 137.15495886388925d + "'", double23 == 137.15495886388925d);
        org.junit.Assert.assertTrue("'" + double24 + "' != '" + 137.15495886388925d + "'", double24 == 137.15495886388925d);
        org.junit.Assert.assertTrue("'" + double25 + "' != '" + 137.15495886388925d + "'", double25 == 137.15495886388925d);
    }

    @Test
    public void test3798() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3798");
        com.operations.Matrix.Matrix matrix2 = com.operations.Matrix.MatrixTransformations.project2D(145.11374848717816d, 10.270003094125075d);
        org.junit.Assert.assertNotNull(matrix2);
    }

    @Test
    public void test3799() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3799");
        com.operations.Matrix.Matrix matrix2 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0.0f, 350.0d);
        com.operations.Matrix.Matrix matrix3 = com.operations.Matrix.MatrixOperations.transpose(matrix2);
        java.lang.Class<?> wildcardClass4 = matrix2.getClass();
        org.junit.Assert.assertNotNull(matrix2);
        org.junit.Assert.assertNotNull(matrix3);
        org.junit.Assert.assertNotNull(wildcardClass4);
    }

    @Test
    public void test3800() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3800");
        double[] doubleArray2 = new double[] { 10, 'a' };
        double[] doubleArray5 = new double[] { 10, 'a' };
        double[][] doubleArray6 = new double[][] { doubleArray2, doubleArray5 };
        com.operations.Matrix.Matrix matrix7 = new com.operations.Matrix.Matrix(doubleArray6);
        int int8 = matrix7.getCols();
        int int9 = matrix7.getCols();
        int int10 = matrix7.getCols();
        com.operations.Matrix.Matrix matrix16 = com.operations.Matrix.MatrixUtils.generateRandomMatrix(100, (int) (byte) 1, (int) '#', (int) '#', 1L);
        double double19 = matrix16.getValue((int) '4', 0);
        double double20 = com.operations.Matrix.MatrixUtils.frobeniusNorm(matrix16);
        boolean boolean21 = com.operations.Matrix.MatrixUtils.isSquare(matrix16);
        boolean boolean23 = com.operations.Matrix.MatrixUtils.compare(matrix7, matrix16, (double) 100L);
        com.operations.Matrix.Matrix matrix24 = com.operations.Matrix.MatrixDecompositions.choleskyDecomposition(matrix7);
        int int25 = matrix7.getRows();
        com.operations.Matrix.Matrix matrix28 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0L, (double) (byte) 10);
        int int29 = matrix28.getRows();
        com.operations.Matrix.Matrix matrix31 = com.operations.Matrix.MatrixOperations.scalarMultiply(matrix28, (double) 2);
        double double32 = com.operations.Matrix.MatrixUtils.frobeniusNorm(matrix28);
        com.operations.Matrix.Matrix matrix35 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0L, (double) (byte) 10);
        double[] doubleArray38 = new double[] { 10, 'a' };
        double[] doubleArray41 = new double[] { 10, 'a' };
        double[][] doubleArray42 = new double[][] { doubleArray38, doubleArray41 };
        com.operations.Matrix.Matrix matrix43 = new com.operations.Matrix.Matrix(doubleArray42);
        int int44 = matrix43.getCols();
        int int45 = matrix43.getCols();
        int int46 = matrix43.getCols();
        com.operations.Matrix.Matrix[] matrixArray47 = com.operations.Matrix.MatrixDecompositions.luDecomposition(matrix43);
        com.operations.Matrix.Matrix matrix48 = com.operations.Matrix.MatrixOperations.multiply(matrix35, matrix43);
        com.operations.Matrix.Matrix matrix50 = com.operations.Matrix.MatrixTransformations.rotate2D((double) (short) 100);
        boolean boolean52 = com.operations.Matrix.MatrixUtils.compare(matrix43, matrix50, (double) (byte) 0);
        com.operations.Matrix.Matrix[] matrixArray53 = com.operations.Matrix.MatrixDecompositions.luDecomposition(matrix43);
        com.operations.Matrix.Matrix matrix54 = com.operations.Matrix.MatrixDecompositions.choleskyDecomposition(matrix43);
        int int55 = matrix43.getCols();
        boolean boolean57 = com.operations.Matrix.MatrixUtils.compare(matrix28, matrix43, 260.95643973734866d);
        com.operations.Matrix.Matrix matrix58 = com.operations.Matrix.MatrixOperations.multiply(matrix7, matrix43);
        com.operations.Matrix.Matrix matrix61 = com.operations.Matrix.MatrixTransformations.scale2D(0.0d, 65.19779036970327d);
        com.operations.Matrix.Matrix[] matrixArray62 = com.operations.Matrix.MatrixDecompositions.luDecomposition(matrix61);
        com.operations.Matrix.Matrix[] matrixArray63 = com.operations.Matrix.MatrixDecompositions.luDecomposition(matrix61);
        boolean boolean65 = com.operations.Matrix.MatrixUtils.compare(matrix58, matrix61, 98.33107342035883d);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertArrayEquals(doubleArray2, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertArrayEquals(doubleArray5, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 2 + "'", int8 == 2);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 2 + "'", int9 == 2);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 2 + "'", int10 == 2);
        org.junit.Assert.assertNotNull(matrix16);
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 35.0d + "'", double19 == 35.0d);
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 350.0d + "'", double20 == 350.0d);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(matrix24);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 2 + "'", int25 == 2);
        org.junit.Assert.assertNotNull(matrix28);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 2 + "'", int29 == 2);
        org.junit.Assert.assertNotNull(matrix31);
        org.junit.Assert.assertTrue("'" + double32 + "' != '" + 10.0d + "'", double32 == 10.0d);
        org.junit.Assert.assertNotNull(matrix35);
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertArrayEquals(doubleArray38, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertArrayEquals(doubleArray41, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 2 + "'", int44 == 2);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 2 + "'", int45 == 2);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 2 + "'", int46 == 2);
        org.junit.Assert.assertNotNull(matrixArray47);
        org.junit.Assert.assertNotNull(matrix48);
        org.junit.Assert.assertNotNull(matrix50);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(matrixArray53);
        org.junit.Assert.assertNotNull(matrix54);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 2 + "'", int55 == 2);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + true + "'", boolean57 == true);
        org.junit.Assert.assertNotNull(matrix58);
        org.junit.Assert.assertNotNull(matrix61);
        org.junit.Assert.assertNotNull(matrixArray62);
        org.junit.Assert.assertNotNull(matrixArray63);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
    }

    @Test
    public void test3801() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3801");
        com.operations.Matrix.Matrix matrix5 = com.operations.Matrix.MatrixUtils.generateRandomMatrix((int) (short) 10, 2, (int) (short) -1, (int) (short) 100, (long) '4');
        // The following exception was thrown during execution in test generation
        try {
            com.operations.Matrix.Matrix matrix6 = com.operations.Matrix.MatrixDecompositions.choleskyDecomposition(matrix5);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Matrix must be square for Cholesky decomposition.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(matrix5);
    }

    @Test
    public void test3802() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3802");
        com.operations.Matrix.Matrix matrix4 = com.operations.Matrix.MatrixUtils.generateRandomMatrix((int) (short) 1, 35, (int) (byte) 0, (int) (short) 100);
        org.junit.Assert.assertNotNull(matrix4);
    }

    @Test
    public void test3803() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3803");
        com.operations.Matrix.Matrix matrix2 = com.operations.Matrix.MatrixTransformations.scale2D((double) (short) 10, 263.4829471529277d);
        double double5 = matrix2.getValue(0, (int) (short) 1);
        org.junit.Assert.assertNotNull(matrix2);
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 0.0d + "'", double5 == 0.0d);
    }

    @Test
    public void test3804() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3804");
        com.operations.Matrix.Matrix matrix4 = com.operations.Matrix.MatrixUtils.generateRandomMatrix(10, 1, (int) ' ', (int) (byte) 10);
        java.lang.Class<?> wildcardClass5 = matrix4.getClass();
        org.junit.Assert.assertNotNull(matrix4);
        org.junit.Assert.assertNotNull(wildcardClass5);
    }

    @Test
    public void test3805() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3805");
        com.operations.Matrix.Matrix matrix1 = com.operations.Matrix.MatrixTransformations.rotate2D((double) (byte) 100);
        double double2 = com.operations.Matrix.MatrixUtils.frobeniusNorm(matrix1);
        com.operations.Matrix.Matrix matrix5 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0.0f, (double) (-1));
        com.operations.Matrix.Matrix matrix8 = com.operations.Matrix.MatrixTransformations.scale2D(146.4308710620817d, (double) 10L);
        com.operations.Matrix.Matrix matrix9 = com.operations.Matrix.MatrixOperations.multiply(matrix5, matrix8);
        com.operations.Matrix.Matrix matrix11 = com.operations.Matrix.MatrixTransformations.rotate2D((double) 1.0f);
        com.operations.Matrix.Matrix matrix14 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0L, (double) (byte) 10);
        int int15 = matrix14.getRows();
        com.operations.Matrix.Matrix matrix17 = com.operations.Matrix.MatrixOperations.scalarMultiply(matrix14, (double) 2);
        double double18 = com.operations.Matrix.MatrixUtils.frobeniusNorm(matrix14);
        com.operations.Matrix.Matrix matrix21 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0L, (double) (byte) 10);
        int int22 = matrix21.getRows();
        com.operations.Matrix.Matrix matrix24 = com.operations.Matrix.MatrixOperations.scalarMultiply(matrix21, (double) 2);
        com.operations.Matrix.Matrix matrix25 = com.operations.Matrix.MatrixOperations.subtract(matrix14, matrix24);
        com.operations.Matrix.Matrix matrix26 = com.operations.Matrix.MatrixOperations.add(matrix11, matrix24);
        matrix11.print();
        double[] doubleArray30 = new double[] { 10, 'a' };
        double[] doubleArray33 = new double[] { 10, 'a' };
        double[][] doubleArray34 = new double[][] { doubleArray30, doubleArray33 };
        com.operations.Matrix.Matrix matrix35 = new com.operations.Matrix.Matrix(doubleArray34);
        com.operations.Matrix.Matrix matrix36 = com.operations.Matrix.MatrixOperations.transpose(matrix35);
        com.operations.Matrix.Matrix matrix39 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0L, (double) (byte) 10);
        int int40 = matrix39.getRows();
        com.operations.Matrix.Matrix matrix46 = com.operations.Matrix.MatrixUtils.generateRandomMatrix(100, (int) (byte) 1, (int) '#', (int) '#', 1L);
        boolean boolean48 = com.operations.Matrix.MatrixUtils.compare(matrix39, matrix46, (double) 1.0f);
        com.operations.Matrix.Matrix matrix50 = com.operations.Matrix.MatrixOperations.scalarMultiply(matrix39, (double) 1L);
        matrix39.print();
        com.operations.Matrix.Matrix matrix52 = com.operations.Matrix.MatrixOperations.multiply(matrix36, matrix39);
        com.operations.Matrix.Matrix matrix53 = com.operations.Matrix.MatrixOperations.multiply(matrix11, matrix39);
        com.operations.Matrix.Matrix matrix54 = com.operations.Matrix.MatrixOperations.subtract(matrix5, matrix39);
        com.operations.Matrix.Matrix matrix55 = com.operations.Matrix.MatrixOperations.subtract(matrix1, matrix5);
        com.operations.Matrix.Matrix matrix57 = com.operations.Matrix.MatrixOperations.scalarMultiply(matrix1, 626.0990336999411d);
        org.junit.Assert.assertNotNull(matrix1);
        org.junit.Assert.assertTrue("'" + double2 + "' != '" + 1.414213562373095d + "'", double2 == 1.414213562373095d);
        org.junit.Assert.assertNotNull(matrix5);
        org.junit.Assert.assertNotNull(matrix8);
        org.junit.Assert.assertNotNull(matrix9);
        org.junit.Assert.assertNotNull(matrix11);
        org.junit.Assert.assertNotNull(matrix14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 2 + "'", int15 == 2);
        org.junit.Assert.assertNotNull(matrix17);
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 10.0d + "'", double18 == 10.0d);
        org.junit.Assert.assertNotNull(matrix21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 2 + "'", int22 == 2);
        org.junit.Assert.assertNotNull(matrix24);
        org.junit.Assert.assertNotNull(matrix25);
        org.junit.Assert.assertNotNull(matrix26);
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertArrayEquals(doubleArray30, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertArrayEquals(doubleArray33, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertNotNull(matrix36);
        org.junit.Assert.assertNotNull(matrix39);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 2 + "'", int40 == 2);
        org.junit.Assert.assertNotNull(matrix46);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(matrix50);
        org.junit.Assert.assertNotNull(matrix52);
        org.junit.Assert.assertNotNull(matrix53);
        org.junit.Assert.assertNotNull(matrix54);
        org.junit.Assert.assertNotNull(matrix55);
        org.junit.Assert.assertNotNull(matrix57);
    }

    @Test
    public void test3806() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3806");
        com.operations.Matrix.Matrix matrix2 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0L, (double) (byte) 10);
        int int3 = matrix2.getRows();
        com.operations.Matrix.Matrix matrix5 = com.operations.Matrix.MatrixOperations.scalarMultiply(matrix2, (double) 2);
        double double6 = com.operations.Matrix.MatrixUtils.frobeniusNorm(matrix2);
        com.operations.Matrix.Matrix matrix9 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0L, (double) (byte) 10);
        int int10 = matrix9.getRows();
        com.operations.Matrix.Matrix matrix12 = com.operations.Matrix.MatrixOperations.scalarMultiply(matrix9, (double) 2);
        com.operations.Matrix.Matrix matrix13 = com.operations.Matrix.MatrixOperations.subtract(matrix2, matrix12);
        com.operations.Matrix.Matrix matrix15 = com.operations.Matrix.MatrixTransformations.rotate2D((double) (short) 100);
        double[] doubleArray18 = new double[] { 137.90576492663388d, (byte) -1 };
        double[] doubleArray19 = com.operations.Matrix.MatrixSolver.solveGaussian(matrix15, doubleArray18);
        com.operations.Matrix.Matrix matrix22 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0L, (double) (byte) 10);
        double[] doubleArray25 = new double[] { 10, 'a' };
        double[] doubleArray28 = new double[] { 10, 'a' };
        double[][] doubleArray29 = new double[][] { doubleArray25, doubleArray28 };
        com.operations.Matrix.Matrix matrix30 = new com.operations.Matrix.Matrix(doubleArray29);
        int int31 = matrix30.getCols();
        int int32 = matrix30.getCols();
        int int33 = matrix30.getCols();
        com.operations.Matrix.Matrix[] matrixArray34 = com.operations.Matrix.MatrixDecompositions.luDecomposition(matrix30);
        com.operations.Matrix.Matrix matrix35 = com.operations.Matrix.MatrixOperations.multiply(matrix22, matrix30);
        boolean boolean37 = com.operations.Matrix.MatrixUtils.compare(matrix15, matrix22, (double) (-1L));
        double[][] doubleArray38 = matrix15.getData();
        boolean boolean40 = com.operations.Matrix.MatrixUtils.compare(matrix2, matrix15, (double) '#');
        int int41 = matrix15.getCols();
        org.junit.Assert.assertNotNull(matrix2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 2 + "'", int3 == 2);
        org.junit.Assert.assertNotNull(matrix5);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 10.0d + "'", double6 == 10.0d);
        org.junit.Assert.assertNotNull(matrix9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 2 + "'", int10 == 2);
        org.junit.Assert.assertNotNull(matrix12);
        org.junit.Assert.assertNotNull(matrix13);
        org.junit.Assert.assertNotNull(matrix15);
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertArrayEquals(doubleArray18, new double[] { 137.90576492663388d, (-1.0d) }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertArrayEquals(doubleArray19, new double[] { (-24.931892522286255d), (-135.63701830716116d) }, 1.0E-15);
        org.junit.Assert.assertNotNull(matrix22);
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertArrayEquals(doubleArray25, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertArrayEquals(doubleArray28, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 2 + "'", int31 == 2);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 2 + "'", int32 == 2);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 2 + "'", int33 == 2);
        org.junit.Assert.assertNotNull(matrixArray34);
        org.junit.Assert.assertNotNull(matrix35);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 2 + "'", int41 == 2);
    }

    @Test
    public void test3807() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3807");
        // The following exception was thrown during execution in test generation
        try {
            com.operations.Matrix.Matrix matrix5 = com.operations.Matrix.MatrixUtils.generateRandomMatrix((int) (byte) -1, 2, (int) (byte) 10, (int) (byte) -1, (long) 35);
            org.junit.Assert.fail("Expected exception of type java.lang.NegativeArraySizeException; message: -1");
        } catch (java.lang.NegativeArraySizeException e) {
            // Expected exception.
        }
    }

    @Test
    public void test3808() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3808");
        com.operations.Matrix.Matrix matrix2 = com.operations.Matrix.MatrixTransformations.scale2D((double) (short) 10, 263.4829471529277d);
        // The following exception was thrown during execution in test generation
        try {
            matrix2.setValue((int) (byte) 0, (int) ' ', 33.34013029422918d);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: Index 32 out of bounds for length 2");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(matrix2);
    }

    @Test
    public void test3809() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3809");
        com.operations.Matrix.Matrix matrix1 = com.operations.Matrix.MatrixTransformations.rotate2D((double) 1.0f);
        com.operations.Matrix.Matrix matrix4 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0L, (double) (byte) 10);
        int int5 = matrix4.getRows();
        com.operations.Matrix.Matrix matrix7 = com.operations.Matrix.MatrixOperations.scalarMultiply(matrix4, (double) 2);
        boolean boolean9 = com.operations.Matrix.MatrixUtils.compare(matrix1, matrix7, (double) 10.0f);
        double[] doubleArray12 = new double[] { 10, 'a' };
        double[] doubleArray15 = new double[] { 10, 'a' };
        double[][] doubleArray16 = new double[][] { doubleArray12, doubleArray15 };
        com.operations.Matrix.Matrix matrix17 = new com.operations.Matrix.Matrix(doubleArray16);
        com.operations.Matrix.Matrix matrix18 = new com.operations.Matrix.Matrix(doubleArray16);
        boolean boolean19 = com.operations.Matrix.MatrixUtils.isSquare(matrix18);
        double[] doubleArray22 = new double[] { 10, 'a' };
        double[] doubleArray25 = new double[] { 10, 'a' };
        double[][] doubleArray26 = new double[][] { doubleArray22, doubleArray25 };
        com.operations.Matrix.Matrix matrix27 = new com.operations.Matrix.Matrix(doubleArray26);
        int int28 = matrix27.getCols();
        int int29 = matrix27.getCols();
        matrix27.print();
        double[] doubleArray33 = new double[] { 10, 'a' };
        double[] doubleArray36 = new double[] { 10, 'a' };
        double[][] doubleArray37 = new double[][] { doubleArray33, doubleArray36 };
        com.operations.Matrix.Matrix matrix38 = new com.operations.Matrix.Matrix(doubleArray37);
        boolean boolean40 = com.operations.Matrix.MatrixUtils.compare(matrix27, matrix38, (double) (-1));
        com.operations.Matrix.Matrix matrix41 = com.operations.Matrix.MatrixOperations.subtract(matrix18, matrix38);
        com.operations.Matrix.Matrix matrix43 = com.operations.Matrix.MatrixOperations.scalarMultiply(matrix18, (double) 0.0f);
        com.operations.Matrix.Matrix matrix44 = com.operations.Matrix.MatrixOperations.transpose(matrix18);
        com.operations.Matrix.Matrix matrix45 = com.operations.Matrix.MatrixOperations.transpose(matrix44);
        com.operations.Matrix.Matrix matrix46 = com.operations.Matrix.MatrixOperations.multiply(matrix7, matrix45);
        com.operations.Matrix.Matrix matrix48 = com.operations.Matrix.MatrixOperations.scalarMultiply(matrix7, (double) 0L);
        matrix48.print();
        org.junit.Assert.assertNotNull(matrix1);
        org.junit.Assert.assertNotNull(matrix4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 2 + "'", int5 == 2);
        org.junit.Assert.assertNotNull(matrix7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertArrayEquals(doubleArray12, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertArrayEquals(doubleArray15, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertArrayEquals(doubleArray22, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertArrayEquals(doubleArray25, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 2 + "'", int28 == 2);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 2 + "'", int29 == 2);
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertArrayEquals(doubleArray33, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertArrayEquals(doubleArray36, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(matrix41);
        org.junit.Assert.assertNotNull(matrix43);
        org.junit.Assert.assertNotNull(matrix44);
        org.junit.Assert.assertNotNull(matrix45);
        org.junit.Assert.assertNotNull(matrix46);
        org.junit.Assert.assertNotNull(matrix48);
    }

    @Test
    public void test3810() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3810");
        com.operations.Matrix.Matrix matrix4 = com.operations.Matrix.MatrixUtils.generateRandomMatrix((int) '#', 0, (int) (short) -1, (int) (short) -1);
        com.operations.Matrix.Matrix matrix7 = com.operations.Matrix.MatrixTransformations.scale2D((double) 1.0f, 20.0d);
        boolean boolean9 = com.operations.Matrix.MatrixUtils.compare(matrix4, matrix7, 1.6135503908876414d);
        org.junit.Assert.assertNotNull(matrix4);
        org.junit.Assert.assertNotNull(matrix7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
    }

    @Test
    public void test3811() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3811");
        com.operations.Matrix.Matrix matrix2 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0L, (double) (byte) 10);
        int int3 = matrix2.getRows();
        com.operations.Matrix.Matrix matrix6 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0L, (double) (byte) 10);
        int int7 = matrix6.getRows();
        com.operations.Matrix.Matrix matrix9 = com.operations.Matrix.MatrixOperations.scalarMultiply(matrix6, (double) 2);
        com.operations.Matrix.Matrix matrix10 = com.operations.Matrix.MatrixOperations.subtract(matrix2, matrix6);
        com.operations.Matrix.Matrix matrix13 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0L, (double) (byte) 10);
        int int14 = matrix13.getRows();
        com.operations.Matrix.Matrix matrix20 = com.operations.Matrix.MatrixUtils.generateRandomMatrix(100, (int) (byte) 1, (int) '#', (int) '#', 1L);
        boolean boolean22 = com.operations.Matrix.MatrixUtils.compare(matrix13, matrix20, (double) 1.0f);
        com.operations.Matrix.Matrix matrix24 = com.operations.Matrix.MatrixOperations.scalarMultiply(matrix13, (double) 1L);
        boolean boolean26 = com.operations.Matrix.MatrixUtils.compare(matrix10, matrix24, 0.0d);
        int int27 = matrix24.getCols();
        com.operations.Matrix.Matrix matrix28 = com.operations.Matrix.MatrixOperations.transpose(matrix24);
        double double29 = com.operations.Matrix.MatrixUtils.frobeniusNorm(matrix28);
        com.operations.Matrix.Matrix matrix31 = com.operations.Matrix.MatrixOperations.scalarMultiply(matrix28, 0.01745240643728351d);
        double[][] doubleArray32 = matrix31.getData();
        com.operations.Matrix.Matrix matrix33 = new com.operations.Matrix.Matrix(doubleArray32);
        // The following exception was thrown during execution in test generation
        try {
            matrix33.setValue((-1), 10, 36.45545226711637d);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: Index -1 out of bounds for length 2");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(matrix2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 2 + "'", int3 == 2);
        org.junit.Assert.assertNotNull(matrix6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 2 + "'", int7 == 2);
        org.junit.Assert.assertNotNull(matrix9);
        org.junit.Assert.assertNotNull(matrix10);
        org.junit.Assert.assertNotNull(matrix13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 2 + "'", int14 == 2);
        org.junit.Assert.assertNotNull(matrix20);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(matrix24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 2 + "'", int27 == 2);
        org.junit.Assert.assertNotNull(matrix28);
        org.junit.Assert.assertTrue("'" + double29 + "' != '" + 10.0d + "'", double29 == 10.0d);
        org.junit.Assert.assertNotNull(matrix31);
        org.junit.Assert.assertNotNull(doubleArray32);
    }

    @Test
    public void test3812() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3812");
        com.operations.Matrix.Matrix matrix2 = com.operations.Matrix.MatrixTransformations.scale2D(0.0d, (double) 1.0f);
        com.operations.Matrix.Matrix matrix4 = com.operations.Matrix.MatrixTransformations.rotate2D((double) 1.0f);
        com.operations.Matrix.Matrix matrix7 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0L, (double) (byte) 10);
        int int8 = matrix7.getRows();
        com.operations.Matrix.Matrix matrix10 = com.operations.Matrix.MatrixOperations.scalarMultiply(matrix7, (double) 2);
        double double11 = com.operations.Matrix.MatrixUtils.frobeniusNorm(matrix7);
        com.operations.Matrix.Matrix matrix14 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0L, (double) (byte) 10);
        int int15 = matrix14.getRows();
        com.operations.Matrix.Matrix matrix17 = com.operations.Matrix.MatrixOperations.scalarMultiply(matrix14, (double) 2);
        com.operations.Matrix.Matrix matrix18 = com.operations.Matrix.MatrixOperations.subtract(matrix7, matrix17);
        com.operations.Matrix.Matrix matrix19 = com.operations.Matrix.MatrixOperations.add(matrix4, matrix17);
        com.operations.Matrix.Matrix matrix21 = com.operations.Matrix.MatrixOperations.scalarMultiply(matrix19, (double) 0L);
        com.operations.Matrix.Matrix matrix22 = com.operations.Matrix.MatrixOperations.subtract(matrix2, matrix21);
        boolean boolean23 = com.operations.Matrix.MatrixUtils.isSquare(matrix2);
        matrix2.print();
        com.operations.Matrix.Matrix[] matrixArray25 = com.operations.Matrix.MatrixDecompositions.luDecomposition(matrix2);
        com.operations.Matrix.Matrix matrix26 = com.operations.Matrix.MatrixOperations.transpose(matrix2);
        org.junit.Assert.assertNotNull(matrix2);
        org.junit.Assert.assertNotNull(matrix4);
        org.junit.Assert.assertNotNull(matrix7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 2 + "'", int8 == 2);
        org.junit.Assert.assertNotNull(matrix10);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 10.0d + "'", double11 == 10.0d);
        org.junit.Assert.assertNotNull(matrix14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 2 + "'", int15 == 2);
        org.junit.Assert.assertNotNull(matrix17);
        org.junit.Assert.assertNotNull(matrix18);
        org.junit.Assert.assertNotNull(matrix19);
        org.junit.Assert.assertNotNull(matrix21);
        org.junit.Assert.assertNotNull(matrix22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertNotNull(matrixArray25);
        org.junit.Assert.assertNotNull(matrix26);
    }

    @Test
    public void test3813() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3813");
        com.operations.Matrix.Matrix matrix1 = com.operations.Matrix.MatrixTransformations.rotate2D(100.0d);
        int int2 = matrix1.getCols();
        double[][] doubleArray3 = matrix1.getData();
        double[] doubleArray6 = new double[] { 10, 'a' };
        double[] doubleArray9 = new double[] { 10, 'a' };
        double[][] doubleArray10 = new double[][] { doubleArray6, doubleArray9 };
        com.operations.Matrix.Matrix matrix11 = new com.operations.Matrix.Matrix(doubleArray10);
        com.operations.Matrix.Matrix matrix12 = com.operations.Matrix.MatrixOperations.transpose(matrix11);
        com.operations.Matrix.Matrix matrix15 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0L, (double) (byte) 10);
        int int16 = matrix15.getRows();
        com.operations.Matrix.Matrix matrix22 = com.operations.Matrix.MatrixUtils.generateRandomMatrix(100, (int) (byte) 1, (int) '#', (int) '#', 1L);
        boolean boolean24 = com.operations.Matrix.MatrixUtils.compare(matrix15, matrix22, (double) 1.0f);
        com.operations.Matrix.Matrix matrix26 = com.operations.Matrix.MatrixOperations.scalarMultiply(matrix15, (double) 1L);
        matrix15.print();
        com.operations.Matrix.Matrix matrix28 = com.operations.Matrix.MatrixOperations.multiply(matrix12, matrix15);
        boolean boolean30 = com.operations.Matrix.MatrixUtils.compare(matrix1, matrix28, (double) 0.0f);
        boolean boolean31 = com.operations.Matrix.MatrixUtils.isSquare(matrix28);
        double double32 = com.operations.Matrix.MatrixUtils.frobeniusNorm(matrix28);
        com.operations.Matrix.Matrix matrix35 = com.operations.Matrix.MatrixTransformations.scale2D((double) 100L, 1.0d);
        com.operations.Matrix.Matrix matrix36 = com.operations.Matrix.MatrixOperations.transpose(matrix35);
        double[][] doubleArray37 = matrix36.getData();
        boolean boolean39 = com.operations.Matrix.MatrixUtils.compare(matrix28, matrix36, 641.7761389614766d);
        com.operations.Matrix.Matrix matrix40 = com.operations.Matrix.MatrixOperations.transpose(matrix28);
        boolean boolean41 = com.operations.Matrix.MatrixUtils.isSquare(matrix40);
        org.junit.Assert.assertNotNull(matrix1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 2 + "'", int2 == 2);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertArrayEquals(doubleArray6, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertArrayEquals(doubleArray9, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertNotNull(matrix12);
        org.junit.Assert.assertNotNull(matrix15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 2 + "'", int16 == 2);
        org.junit.Assert.assertNotNull(matrix22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(matrix26);
        org.junit.Assert.assertNotNull(matrix28);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertTrue("'" + double32 + "' != '" + 975.1410154434076d + "'", double32 == 975.1410154434076d);
        org.junit.Assert.assertNotNull(matrix35);
        org.junit.Assert.assertNotNull(matrix36);
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(matrix40);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
    }

    @Test
    public void test3814() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3814");
        com.operations.Matrix.Matrix matrix2 = com.operations.Matrix.MatrixTransformations.project2D((double) (short) 100, (double) 0L);
        boolean boolean3 = com.operations.Matrix.MatrixUtils.isSquare(matrix2);
        double[] doubleArray6 = new double[] { 10, 'a' };
        double[] doubleArray9 = new double[] { 10, 'a' };
        double[][] doubleArray10 = new double[][] { doubleArray6, doubleArray9 };
        com.operations.Matrix.Matrix matrix11 = new com.operations.Matrix.Matrix(doubleArray10);
        com.operations.Matrix.Matrix matrix12 = new com.operations.Matrix.Matrix(doubleArray10);
        com.operations.Matrix.Matrix matrix14 = com.operations.Matrix.MatrixTransformations.rotate2D((double) (short) 100);
        double[] doubleArray17 = new double[] { 137.90576492663388d, (byte) -1 };
        double[] doubleArray18 = com.operations.Matrix.MatrixSolver.solveGaussian(matrix14, doubleArray17);
        com.operations.Matrix.Matrix matrix19 = com.operations.Matrix.MatrixOperations.add(matrix12, matrix14);
        com.operations.Matrix.Matrix matrix20 = com.operations.Matrix.MatrixOperations.transpose(matrix14);
        int int21 = matrix14.getCols();
        int int22 = matrix14.getRows();
        double[] doubleArray25 = new double[] { 10, 'a' };
        double[] doubleArray28 = new double[] { 10, 'a' };
        double[][] doubleArray29 = new double[][] { doubleArray25, doubleArray28 };
        com.operations.Matrix.Matrix matrix30 = new com.operations.Matrix.Matrix(doubleArray29);
        int int31 = matrix30.getCols();
        int int32 = matrix30.getCols();
        matrix30.print();
        double[] doubleArray36 = new double[] { 10, 'a' };
        double[] doubleArray39 = new double[] { 10, 'a' };
        double[][] doubleArray40 = new double[][] { doubleArray36, doubleArray39 };
        com.operations.Matrix.Matrix matrix41 = new com.operations.Matrix.Matrix(doubleArray40);
        boolean boolean43 = com.operations.Matrix.MatrixUtils.compare(matrix30, matrix41, (double) (-1));
        com.operations.Matrix.Matrix matrix44 = com.operations.Matrix.MatrixOperations.multiply(matrix14, matrix30);
        double double47 = matrix14.getValue((int) (short) 0, 0);
        com.operations.Matrix.Matrix matrix48 = com.operations.Matrix.MatrixOperations.add(matrix2, matrix14);
        double[][] doubleArray49 = matrix48.getData();
        double double50 = com.operations.Matrix.MatrixUtils.frobeniusNorm(matrix48);
        org.junit.Assert.assertNotNull(matrix2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertArrayEquals(doubleArray6, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertArrayEquals(doubleArray9, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertNotNull(matrix14);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertArrayEquals(doubleArray17, new double[] { 137.90576492663388d, (-1.0d) }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertArrayEquals(doubleArray18, new double[] { (-24.931892522286255d), (-135.63701830716116d) }, 1.0E-15);
        org.junit.Assert.assertNotNull(matrix19);
        org.junit.Assert.assertNotNull(matrix20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 2 + "'", int21 == 2);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 2 + "'", int22 == 2);
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertArrayEquals(doubleArray25, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertArrayEquals(doubleArray28, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 2 + "'", int31 == 2);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 2 + "'", int32 == 2);
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertArrayEquals(doubleArray36, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertArrayEquals(doubleArray39, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(matrix44);
        org.junit.Assert.assertTrue("'" + double47 + "' != '" + (-0.1736481776669303d) + "'", double47 == (-0.1736481776669303d));
        org.junit.Assert.assertNotNull(matrix48);
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertTrue("'" + double50 + "' != '" + 99.83621769912266d + "'", double50 == 99.83621769912266d);
    }

    @Test
    public void test3815() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3815");
        com.operations.Matrix.Matrix matrix2 = new com.operations.Matrix.Matrix((int) '4', (int) (byte) 0);
        com.operations.Matrix.Matrix matrix8 = com.operations.Matrix.MatrixUtils.generateRandomMatrix((int) '4', (int) ' ', 10, 0, (long) (short) -1);
        boolean boolean10 = com.operations.Matrix.MatrixUtils.compare(matrix2, matrix8, 14.142135623730951d);
        // The following exception was thrown during execution in test generation
        try {
            com.operations.Matrix.Matrix matrix11 = com.operations.Matrix.MatrixDecompositions.choleskyDecomposition(matrix2);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Matrix must be square for Cholesky decomposition.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(matrix8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
    }

    @Test
    public void test3816() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3816");
        com.operations.Matrix.Matrix matrix2 = com.operations.Matrix.MatrixTransformations.project2D(146.4308710620817d, (double) (byte) 0);
        org.junit.Assert.assertNotNull(matrix2);
    }

    @Test
    public void test3817() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3817");
        com.operations.Matrix.Matrix matrix1 = com.operations.Matrix.MatrixTransformations.rotate2D((double) (byte) 100);
        matrix1.setValue((int) (short) 0, 0, 1950.2820308868152d);
        org.junit.Assert.assertNotNull(matrix1);
    }

    @Test
    public void test3818() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3818");
        com.operations.Matrix.Matrix matrix2 = com.operations.Matrix.MatrixTransformations.project2D((double) 10, 10.344080432788601d);
        // The following exception was thrown during execution in test generation
        try {
            double double5 = matrix2.getValue(35, (int) (short) 1);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(matrix2);
    }

    @Test
    public void test3819() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3819");
        com.operations.Matrix.Matrix matrix1 = com.operations.Matrix.MatrixTransformations.rotate2D((double) (short) 100);
        double[] doubleArray4 = new double[] { 137.90576492663388d, (byte) -1 };
        double[] doubleArray5 = com.operations.Matrix.MatrixSolver.solveGaussian(matrix1, doubleArray4);
        com.operations.Matrix.Matrix matrix8 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0L, (double) (byte) 10);
        double[] doubleArray11 = new double[] { 10, 'a' };
        double[] doubleArray14 = new double[] { 10, 'a' };
        double[][] doubleArray15 = new double[][] { doubleArray11, doubleArray14 };
        com.operations.Matrix.Matrix matrix16 = new com.operations.Matrix.Matrix(doubleArray15);
        int int17 = matrix16.getCols();
        int int18 = matrix16.getCols();
        int int19 = matrix16.getCols();
        com.operations.Matrix.Matrix[] matrixArray20 = com.operations.Matrix.MatrixDecompositions.luDecomposition(matrix16);
        com.operations.Matrix.Matrix matrix21 = com.operations.Matrix.MatrixOperations.multiply(matrix8, matrix16);
        boolean boolean23 = com.operations.Matrix.MatrixUtils.compare(matrix1, matrix8, (double) (-1L));
        double[][] doubleArray24 = matrix1.getData();
        com.operations.Matrix.Matrix matrix25 = new com.operations.Matrix.Matrix(doubleArray24);
        com.operations.Matrix.Matrix matrix27 = com.operations.Matrix.MatrixTransformations.rotate2D((double) '4');
        double[] doubleArray30 = new double[] { 10, 'a' };
        double[] doubleArray33 = new double[] { 10, 'a' };
        double[][] doubleArray34 = new double[][] { doubleArray30, doubleArray33 };
        com.operations.Matrix.Matrix matrix35 = new com.operations.Matrix.Matrix(doubleArray34);
        com.operations.Matrix.Matrix matrix36 = new com.operations.Matrix.Matrix(doubleArray34);
        com.operations.Matrix.Matrix matrix38 = com.operations.Matrix.MatrixTransformations.rotate2D((double) (short) 100);
        double[] doubleArray41 = new double[] { 137.90576492663388d, (byte) -1 };
        double[] doubleArray42 = com.operations.Matrix.MatrixSolver.solveGaussian(matrix38, doubleArray41);
        com.operations.Matrix.Matrix matrix43 = com.operations.Matrix.MatrixOperations.add(matrix36, matrix38);
        boolean boolean44 = com.operations.Matrix.MatrixUtils.isSymmetric(matrix43);
        boolean boolean46 = com.operations.Matrix.MatrixUtils.compare(matrix27, matrix43, 364.0054944640259d);
        com.operations.Matrix.Matrix matrix49 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0L, (double) (byte) 10);
        double[] doubleArray52 = new double[] { 10, 'a' };
        double[] doubleArray55 = new double[] { 10, 'a' };
        double[][] doubleArray56 = new double[][] { doubleArray52, doubleArray55 };
        com.operations.Matrix.Matrix matrix57 = new com.operations.Matrix.Matrix(doubleArray56);
        int int58 = matrix57.getCols();
        int int59 = matrix57.getCols();
        int int60 = matrix57.getCols();
        com.operations.Matrix.Matrix[] matrixArray61 = com.operations.Matrix.MatrixDecompositions.luDecomposition(matrix57);
        com.operations.Matrix.Matrix matrix62 = com.operations.Matrix.MatrixOperations.multiply(matrix49, matrix57);
        com.operations.Matrix.Matrix matrix64 = com.operations.Matrix.MatrixTransformations.rotate2D((double) (short) 100);
        boolean boolean66 = com.operations.Matrix.MatrixUtils.compare(matrix57, matrix64, (double) (byte) 0);
        com.operations.Matrix.Matrix[] matrixArray67 = com.operations.Matrix.MatrixDecompositions.luDecomposition(matrix57);
        com.operations.Matrix.Matrix matrix68 = com.operations.Matrix.MatrixOperations.transpose(matrix57);
        com.operations.Matrix.Matrix matrix71 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0L, (double) (byte) 10);
        int int72 = matrix71.getRows();
        com.operations.Matrix.Matrix matrix75 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0L, (double) (byte) 10);
        int int76 = matrix75.getRows();
        com.operations.Matrix.Matrix matrix78 = com.operations.Matrix.MatrixOperations.scalarMultiply(matrix75, (double) 2);
        com.operations.Matrix.Matrix matrix79 = com.operations.Matrix.MatrixOperations.subtract(matrix71, matrix75);
        boolean boolean81 = com.operations.Matrix.MatrixUtils.compare(matrix57, matrix71, (double) ' ');
        boolean boolean83 = com.operations.Matrix.MatrixUtils.compare(matrix43, matrix57, (double) 0L);
        boolean boolean84 = com.operations.Matrix.MatrixUtils.isSymmetric(matrix57);
        com.operations.Matrix.Matrix matrix86 = com.operations.Matrix.MatrixTransformations.rotate2D(100.0d);
        int int87 = matrix86.getCols();
        com.operations.Matrix.Matrix matrix89 = com.operations.Matrix.MatrixOperations.scalarMultiply(matrix86, (double) ' ');
        com.operations.Matrix.Matrix matrix90 = com.operations.Matrix.MatrixOperations.multiply(matrix57, matrix86);
        com.operations.Matrix.Matrix matrix91 = com.operations.Matrix.MatrixOperations.subtract(matrix25, matrix90);
        org.junit.Assert.assertNotNull(matrix1);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertArrayEquals(doubleArray4, new double[] { 137.90576492663388d, (-1.0d) }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertArrayEquals(doubleArray5, new double[] { (-24.931892522286255d), (-135.63701830716116d) }, 1.0E-15);
        org.junit.Assert.assertNotNull(matrix8);
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertArrayEquals(doubleArray11, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertArrayEquals(doubleArray14, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 2 + "'", int17 == 2);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 2 + "'", int18 == 2);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 2 + "'", int19 == 2);
        org.junit.Assert.assertNotNull(matrixArray20);
        org.junit.Assert.assertNotNull(matrix21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertNotNull(matrix27);
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertArrayEquals(doubleArray30, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertArrayEquals(doubleArray33, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertNotNull(matrix38);
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertArrayEquals(doubleArray41, new double[] { 137.90576492663388d, (-1.0d) }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertArrayEquals(doubleArray42, new double[] { (-24.931892522286255d), (-135.63701830716116d) }, 1.0E-15);
        org.junit.Assert.assertNotNull(matrix43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertNotNull(matrix49);
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertArrayEquals(doubleArray52, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertArrayEquals(doubleArray55, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray56);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 2 + "'", int58 == 2);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 2 + "'", int59 == 2);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 2 + "'", int60 == 2);
        org.junit.Assert.assertNotNull(matrixArray61);
        org.junit.Assert.assertNotNull(matrix62);
        org.junit.Assert.assertNotNull(matrix64);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertNotNull(matrixArray67);
        org.junit.Assert.assertNotNull(matrix68);
        org.junit.Assert.assertNotNull(matrix71);
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 2 + "'", int72 == 2);
        org.junit.Assert.assertNotNull(matrix75);
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 2 + "'", int76 == 2);
        org.junit.Assert.assertNotNull(matrix78);
        org.junit.Assert.assertNotNull(matrix79);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
        org.junit.Assert.assertNotNull(matrix86);
        org.junit.Assert.assertTrue("'" + int87 + "' != '" + 2 + "'", int87 == 2);
        org.junit.Assert.assertNotNull(matrix89);
        org.junit.Assert.assertNotNull(matrix90);
        org.junit.Assert.assertNotNull(matrix91);
    }

    @Test
    public void test3820() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3820");
        com.operations.Matrix.Matrix matrix2 = com.operations.Matrix.MatrixTransformations.scale2D((double) 10L, (double) 2);
        // The following exception was thrown during execution in test generation
        try {
            double double5 = matrix2.getValue(100, 0);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(matrix2);
    }

    @Test
    public void test3821() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3821");
        // The following exception was thrown during execution in test generation
        try {
            com.operations.Matrix.Matrix matrix5 = com.operations.Matrix.MatrixUtils.generateRandomMatrix((int) (short) 1, (-1), 97, (int) '4', (long) 10);
            org.junit.Assert.fail("Expected exception of type java.lang.NegativeArraySizeException; message: -1");
        } catch (java.lang.NegativeArraySizeException e) {
            // Expected exception.
        }
    }

    @Test
    public void test3822() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3822");
        // The following exception was thrown during execution in test generation
        try {
            com.operations.Matrix.Matrix matrix5 = com.operations.Matrix.MatrixUtils.generateRandomMatrix(0, (int) (short) 1, 32, (int) (short) 1, (long) (short) 10);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
    }

    @Test
    public void test3823() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3823");
        double[] doubleArray2 = new double[] { 10, 'a' };
        double[] doubleArray5 = new double[] { 10, 'a' };
        double[][] doubleArray6 = new double[][] { doubleArray2, doubleArray5 };
        com.operations.Matrix.Matrix matrix7 = new com.operations.Matrix.Matrix(doubleArray6);
        int int8 = matrix7.getCols();
        int int9 = matrix7.getCols();
        matrix7.print();
        boolean boolean11 = com.operations.Matrix.MatrixUtils.isSymmetric(matrix7);
        com.operations.Matrix.Matrix matrix13 = com.operations.Matrix.MatrixTransformations.rotate2D((double) 1.0f);
        int int14 = matrix13.getRows();
        com.operations.Matrix.Matrix matrix15 = com.operations.Matrix.MatrixOperations.add(matrix7, matrix13);
        com.operations.Matrix.Matrix matrix16 = com.operations.Matrix.MatrixOperations.transpose(matrix7);
        int int17 = matrix7.getCols();
        com.operations.Matrix.Matrix[] matrixArray18 = com.operations.Matrix.MatrixDecompositions.luDecomposition(matrix7);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertArrayEquals(doubleArray2, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertArrayEquals(doubleArray5, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 2 + "'", int8 == 2);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 2 + "'", int9 == 2);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(matrix13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 2 + "'", int14 == 2);
        org.junit.Assert.assertNotNull(matrix15);
        org.junit.Assert.assertNotNull(matrix16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 2 + "'", int17 == 2);
        org.junit.Assert.assertNotNull(matrixArray18);
    }

    @Test
    public void test3824() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3824");
        com.operations.Matrix.Matrix matrix4 = com.operations.Matrix.MatrixUtils.generateRandomMatrix(97, 1, (int) (short) 100, (int) 'a');
        org.junit.Assert.assertNotNull(matrix4);
    }

    @Test
    public void test3825() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3825");
        com.operations.Matrix.Matrix matrix2 = com.operations.Matrix.MatrixTransformations.scale2D((double) (byte) 10, (double) 10);
        double[] doubleArray5 = new double[] { 10, 'a' };
        double[] doubleArray8 = new double[] { 10, 'a' };
        double[][] doubleArray9 = new double[][] { doubleArray5, doubleArray8 };
        com.operations.Matrix.Matrix matrix10 = new com.operations.Matrix.Matrix(doubleArray9);
        com.operations.Matrix.Matrix matrix11 = new com.operations.Matrix.Matrix(doubleArray9);
        boolean boolean12 = com.operations.Matrix.MatrixUtils.isSquare(matrix11);
        double[] doubleArray15 = new double[] { 10, 'a' };
        double[] doubleArray18 = new double[] { 10, 'a' };
        double[][] doubleArray19 = new double[][] { doubleArray15, doubleArray18 };
        com.operations.Matrix.Matrix matrix20 = new com.operations.Matrix.Matrix(doubleArray19);
        int int21 = matrix20.getCols();
        int int22 = matrix20.getCols();
        matrix20.print();
        double[] doubleArray26 = new double[] { 10, 'a' };
        double[] doubleArray29 = new double[] { 10, 'a' };
        double[][] doubleArray30 = new double[][] { doubleArray26, doubleArray29 };
        com.operations.Matrix.Matrix matrix31 = new com.operations.Matrix.Matrix(doubleArray30);
        boolean boolean33 = com.operations.Matrix.MatrixUtils.compare(matrix20, matrix31, (double) (-1));
        com.operations.Matrix.Matrix matrix34 = com.operations.Matrix.MatrixOperations.subtract(matrix11, matrix31);
        com.operations.Matrix.Matrix[] matrixArray35 = com.operations.Matrix.MatrixDecompositions.luDecomposition(matrix34);
        double[][] doubleArray36 = matrix34.getData();
        com.operations.Matrix.Matrix matrix37 = new com.operations.Matrix.Matrix(doubleArray36);
        com.operations.Matrix.Matrix matrix38 = com.operations.Matrix.MatrixOperations.multiply(matrix2, matrix37);
        com.operations.Matrix.Matrix matrix44 = com.operations.Matrix.MatrixUtils.generateRandomMatrix((int) (short) 100, (int) (short) 100, (int) (short) 0, (int) ' ', (long) (short) 10);
        // The following exception was thrown during execution in test generation
        try {
            com.operations.Matrix.Matrix matrix45 = com.operations.Matrix.MatrixOperations.add(matrix38, matrix44);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Matrices must have the same dimensions for addition.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(matrix2);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertArrayEquals(doubleArray5, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertArrayEquals(doubleArray8, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertArrayEquals(doubleArray15, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertArrayEquals(doubleArray18, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 2 + "'", int21 == 2);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 2 + "'", int22 == 2);
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertArrayEquals(doubleArray26, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertArrayEquals(doubleArray29, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(matrix34);
        org.junit.Assert.assertNotNull(matrixArray35);
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertNotNull(matrix38);
        org.junit.Assert.assertNotNull(matrix44);
    }

    @Test
    public void test3826() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3826");
        com.operations.Matrix.Matrix matrix2 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0L, (double) (byte) 10);
        double[] doubleArray5 = new double[] { 10, 'a' };
        double[] doubleArray8 = new double[] { 10, 'a' };
        double[][] doubleArray9 = new double[][] { doubleArray5, doubleArray8 };
        com.operations.Matrix.Matrix matrix10 = new com.operations.Matrix.Matrix(doubleArray9);
        int int11 = matrix10.getCols();
        int int12 = matrix10.getCols();
        int int13 = matrix10.getCols();
        com.operations.Matrix.Matrix[] matrixArray14 = com.operations.Matrix.MatrixDecompositions.luDecomposition(matrix10);
        com.operations.Matrix.Matrix matrix15 = com.operations.Matrix.MatrixOperations.multiply(matrix2, matrix10);
        com.operations.Matrix.Matrix matrix17 = com.operations.Matrix.MatrixTransformations.rotate2D((double) (short) 100);
        boolean boolean19 = com.operations.Matrix.MatrixUtils.compare(matrix10, matrix17, (double) (byte) 0);
        com.operations.Matrix.Matrix matrix20 = com.operations.Matrix.MatrixOperations.transpose(matrix10);
        com.operations.Matrix.Matrix matrix22 = com.operations.Matrix.MatrixOperations.scalarMultiply(matrix20, (double) 10);
        double[] doubleArray25 = new double[] { 10, 'a' };
        double[] doubleArray28 = new double[] { 10, 'a' };
        double[][] doubleArray29 = new double[][] { doubleArray25, doubleArray28 };
        com.operations.Matrix.Matrix matrix30 = new com.operations.Matrix.Matrix(doubleArray29);
        int int31 = matrix30.getCols();
        int int32 = matrix30.getCols();
        int int33 = matrix30.getCols();
        com.operations.Matrix.Matrix matrix39 = com.operations.Matrix.MatrixUtils.generateRandomMatrix(100, (int) (byte) 1, (int) '#', (int) '#', 1L);
        double double42 = matrix39.getValue((int) '4', 0);
        double double43 = com.operations.Matrix.MatrixUtils.frobeniusNorm(matrix39);
        boolean boolean44 = com.operations.Matrix.MatrixUtils.isSquare(matrix39);
        boolean boolean46 = com.operations.Matrix.MatrixUtils.compare(matrix30, matrix39, (double) 100L);
        com.operations.Matrix.Matrix matrix47 = com.operations.Matrix.MatrixDecompositions.choleskyDecomposition(matrix30);
        boolean boolean49 = com.operations.Matrix.MatrixUtils.compare(matrix20, matrix47, 0.0d);
        com.operations.Matrix.Matrix[] matrixArray50 = com.operations.Matrix.MatrixDecompositions.luDecomposition(matrix20);
        com.operations.Matrix.Matrix[] matrixArray51 = com.operations.Matrix.MatrixDecompositions.luDecomposition(matrix20);
        org.junit.Assert.assertNotNull(matrix2);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertArrayEquals(doubleArray5, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertArrayEquals(doubleArray8, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 2 + "'", int11 == 2);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 2 + "'", int12 == 2);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 2 + "'", int13 == 2);
        org.junit.Assert.assertNotNull(matrixArray14);
        org.junit.Assert.assertNotNull(matrix15);
        org.junit.Assert.assertNotNull(matrix17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(matrix20);
        org.junit.Assert.assertNotNull(matrix22);
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertArrayEquals(doubleArray25, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertArrayEquals(doubleArray28, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 2 + "'", int31 == 2);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 2 + "'", int32 == 2);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 2 + "'", int33 == 2);
        org.junit.Assert.assertNotNull(matrix39);
        org.junit.Assert.assertTrue("'" + double42 + "' != '" + 35.0d + "'", double42 == 35.0d);
        org.junit.Assert.assertTrue("'" + double43 + "' != '" + 350.0d + "'", double43 == 350.0d);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(matrix47);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(matrixArray50);
        org.junit.Assert.assertNotNull(matrixArray51);
    }

    @Test
    public void test3827() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3827");
        com.operations.Matrix.Matrix matrix1 = com.operations.Matrix.MatrixTransformations.rotate2D(100.0d);
        int int2 = matrix1.getCols();
        matrix1.print();
        com.operations.Matrix.Matrix matrix5 = com.operations.Matrix.MatrixOperations.scalarMultiply(matrix1, (double) (byte) 1);
        com.operations.Matrix.Matrix matrix8 = com.operations.Matrix.MatrixTransformations.project2D((double) ' ', 0.0d);
        double[] doubleArray11 = new double[] { 10, 'a' };
        double[] doubleArray14 = new double[] { 10, 'a' };
        double[][] doubleArray15 = new double[][] { doubleArray11, doubleArray14 };
        com.operations.Matrix.Matrix matrix16 = new com.operations.Matrix.Matrix(doubleArray15);
        int int17 = matrix16.getCols();
        boolean boolean18 = com.operations.Matrix.MatrixUtils.isSquare(matrix16);
        com.operations.Matrix.Matrix matrix19 = com.operations.Matrix.MatrixOperations.transpose(matrix16);
        int int20 = matrix19.getRows();
        com.operations.Matrix.Matrix matrix23 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0L, (double) (byte) 10);
        double[] doubleArray26 = new double[] { 10, 'a' };
        double[] doubleArray29 = new double[] { 10, 'a' };
        double[][] doubleArray30 = new double[][] { doubleArray26, doubleArray29 };
        com.operations.Matrix.Matrix matrix31 = new com.operations.Matrix.Matrix(doubleArray30);
        int int32 = matrix31.getCols();
        int int33 = matrix31.getCols();
        int int34 = matrix31.getCols();
        com.operations.Matrix.Matrix[] matrixArray35 = com.operations.Matrix.MatrixDecompositions.luDecomposition(matrix31);
        com.operations.Matrix.Matrix matrix36 = com.operations.Matrix.MatrixOperations.multiply(matrix23, matrix31);
        com.operations.Matrix.Matrix matrix38 = com.operations.Matrix.MatrixTransformations.rotate2D((double) (short) 100);
        boolean boolean40 = com.operations.Matrix.MatrixUtils.compare(matrix31, matrix38, (double) (byte) 0);
        com.operations.Matrix.Matrix matrix41 = com.operations.Matrix.MatrixOperations.multiply(matrix19, matrix31);
        com.operations.Matrix.Matrix matrix42 = com.operations.Matrix.MatrixOperations.add(matrix8, matrix31);
        matrix31.print();
        boolean boolean44 = com.operations.Matrix.MatrixUtils.isSquare(matrix31);
        boolean boolean46 = com.operations.Matrix.MatrixUtils.compare(matrix1, matrix31, 1.414213562373095d);
        com.operations.Matrix.Matrix matrix48 = com.operations.Matrix.MatrixTransformations.rotate2D(100.0d);
        int int49 = matrix48.getCols();
        com.operations.Matrix.Matrix matrix50 = com.operations.Matrix.MatrixOperations.subtract(matrix31, matrix48);
        boolean boolean51 = com.operations.Matrix.MatrixUtils.isSquare(matrix48);
        com.operations.Matrix.Matrix matrix53 = com.operations.Matrix.MatrixTransformations.rotate2D((double) 1.0f);
        com.operations.Matrix.Matrix matrix56 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0L, (double) (byte) 10);
        int int57 = matrix56.getRows();
        com.operations.Matrix.Matrix matrix59 = com.operations.Matrix.MatrixOperations.scalarMultiply(matrix56, (double) 2);
        double double60 = com.operations.Matrix.MatrixUtils.frobeniusNorm(matrix56);
        com.operations.Matrix.Matrix matrix63 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0L, (double) (byte) 10);
        int int64 = matrix63.getRows();
        com.operations.Matrix.Matrix matrix66 = com.operations.Matrix.MatrixOperations.scalarMultiply(matrix63, (double) 2);
        com.operations.Matrix.Matrix matrix67 = com.operations.Matrix.MatrixOperations.subtract(matrix56, matrix66);
        com.operations.Matrix.Matrix matrix68 = com.operations.Matrix.MatrixOperations.add(matrix53, matrix66);
        com.operations.Matrix.Matrix[] matrixArray69 = com.operations.Matrix.MatrixDecompositions.luDecomposition(matrix66);
        boolean boolean70 = com.operations.Matrix.MatrixUtils.isSquare(matrix66);
        com.operations.Matrix.Matrix matrix71 = com.operations.Matrix.MatrixOperations.transpose(matrix66);
        com.operations.Matrix.Matrix matrix73 = com.operations.Matrix.MatrixOperations.scalarMultiply(matrix66, (double) ' ');
        com.operations.Matrix.Matrix matrix76 = com.operations.Matrix.MatrixTransformations.project2D(0.0d, (double) 0);
        double[][] doubleArray77 = matrix76.getData();
        com.operations.Matrix.Matrix matrix78 = new com.operations.Matrix.Matrix(doubleArray77);
        com.operations.Matrix.Matrix matrix79 = new com.operations.Matrix.Matrix(doubleArray77);
        com.operations.Matrix.Matrix matrix80 = com.operations.Matrix.MatrixOperations.multiply(matrix66, matrix79);
        com.operations.Matrix.Matrix matrix81 = com.operations.Matrix.MatrixOperations.transpose(matrix66);
        boolean boolean83 = com.operations.Matrix.MatrixUtils.compare(matrix48, matrix81, 1.414213562373095d);
        matrix48.print();
        org.junit.Assert.assertNotNull(matrix1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 2 + "'", int2 == 2);
        org.junit.Assert.assertNotNull(matrix5);
        org.junit.Assert.assertNotNull(matrix8);
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertArrayEquals(doubleArray11, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertArrayEquals(doubleArray14, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 2 + "'", int17 == 2);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(matrix19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 2 + "'", int20 == 2);
        org.junit.Assert.assertNotNull(matrix23);
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertArrayEquals(doubleArray26, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertArrayEquals(doubleArray29, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 2 + "'", int32 == 2);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 2 + "'", int33 == 2);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 2 + "'", int34 == 2);
        org.junit.Assert.assertNotNull(matrixArray35);
        org.junit.Assert.assertNotNull(matrix36);
        org.junit.Assert.assertNotNull(matrix38);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(matrix41);
        org.junit.Assert.assertNotNull(matrix42);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(matrix48);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 2 + "'", int49 == 2);
        org.junit.Assert.assertNotNull(matrix50);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + true + "'", boolean51 == true);
        org.junit.Assert.assertNotNull(matrix53);
        org.junit.Assert.assertNotNull(matrix56);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 2 + "'", int57 == 2);
        org.junit.Assert.assertNotNull(matrix59);
        org.junit.Assert.assertTrue("'" + double60 + "' != '" + 10.0d + "'", double60 == 10.0d);
        org.junit.Assert.assertNotNull(matrix63);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 2 + "'", int64 == 2);
        org.junit.Assert.assertNotNull(matrix66);
        org.junit.Assert.assertNotNull(matrix67);
        org.junit.Assert.assertNotNull(matrix68);
        org.junit.Assert.assertNotNull(matrixArray69);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + true + "'", boolean70 == true);
        org.junit.Assert.assertNotNull(matrix71);
        org.junit.Assert.assertNotNull(matrix73);
        org.junit.Assert.assertNotNull(matrix76);
        org.junit.Assert.assertNotNull(doubleArray77);
        org.junit.Assert.assertNotNull(matrix80);
        org.junit.Assert.assertNotNull(matrix81);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
    }

    @Test
    public void test3828() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3828");
        com.operations.Matrix.Matrix matrix2 = new com.operations.Matrix.Matrix((int) (short) 100, 10);
    }

    @Test
    public void test3829() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3829");
        com.operations.Matrix.Matrix matrix2 = com.operations.Matrix.MatrixTransformations.project2D((-1.0d), (double) 1L);
        double double3 = com.operations.Matrix.MatrixUtils.frobeniusNorm(matrix2);
        com.operations.Matrix.Matrix matrix6 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0L, (double) (byte) 10);
        double[] doubleArray9 = new double[] { 10, 'a' };
        double[] doubleArray12 = new double[] { 10, 'a' };
        double[][] doubleArray13 = new double[][] { doubleArray9, doubleArray12 };
        com.operations.Matrix.Matrix matrix14 = new com.operations.Matrix.Matrix(doubleArray13);
        int int15 = matrix14.getCols();
        int int16 = matrix14.getCols();
        int int17 = matrix14.getCols();
        com.operations.Matrix.Matrix[] matrixArray18 = com.operations.Matrix.MatrixDecompositions.luDecomposition(matrix14);
        com.operations.Matrix.Matrix matrix19 = com.operations.Matrix.MatrixOperations.multiply(matrix6, matrix14);
        com.operations.Matrix.Matrix matrix21 = com.operations.Matrix.MatrixTransformations.rotate2D((double) (short) 100);
        boolean boolean23 = com.operations.Matrix.MatrixUtils.compare(matrix14, matrix21, (double) (byte) 0);
        com.operations.Matrix.Matrix[] matrixArray24 = com.operations.Matrix.MatrixDecompositions.luDecomposition(matrix14);
        com.operations.Matrix.Matrix matrix25 = com.operations.Matrix.MatrixOperations.transpose(matrix14);
        com.operations.Matrix.Matrix matrix28 = com.operations.Matrix.MatrixTransformations.scale2D((double) 1.0f, (double) 1);
        com.operations.Matrix.Matrix matrix30 = com.operations.Matrix.MatrixTransformations.rotate2D((double) 1.0f);
        com.operations.Matrix.Matrix matrix33 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0L, (double) (byte) 10);
        int int34 = matrix33.getRows();
        com.operations.Matrix.Matrix matrix36 = com.operations.Matrix.MatrixOperations.scalarMultiply(matrix33, (double) 2);
        double double37 = com.operations.Matrix.MatrixUtils.frobeniusNorm(matrix33);
        com.operations.Matrix.Matrix matrix40 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0L, (double) (byte) 10);
        int int41 = matrix40.getRows();
        com.operations.Matrix.Matrix matrix43 = com.operations.Matrix.MatrixOperations.scalarMultiply(matrix40, (double) 2);
        com.operations.Matrix.Matrix matrix44 = com.operations.Matrix.MatrixOperations.subtract(matrix33, matrix43);
        com.operations.Matrix.Matrix matrix45 = com.operations.Matrix.MatrixOperations.add(matrix30, matrix43);
        boolean boolean47 = com.operations.Matrix.MatrixUtils.compare(matrix28, matrix30, (double) (byte) -1);
        com.operations.Matrix.Matrix matrix48 = com.operations.Matrix.MatrixOperations.subtract(matrix25, matrix28);
        com.operations.Matrix.Matrix matrix49 = com.operations.Matrix.MatrixOperations.multiply(matrix2, matrix28);
        com.operations.Matrix.Matrix matrix51 = com.operations.Matrix.MatrixTransformations.rotate2D((double) (-1L));
        com.operations.Matrix.Matrix matrix53 = com.operations.Matrix.MatrixTransformations.rotate2D((double) (short) 100);
        double[] doubleArray56 = new double[] { 137.90576492663388d, (byte) -1 };
        double[] doubleArray57 = com.operations.Matrix.MatrixSolver.solveGaussian(matrix53, doubleArray56);
        double[] doubleArray58 = com.operations.Matrix.MatrixSolver.solveGaussian(matrix51, doubleArray56);
        double[] doubleArray59 = com.operations.Matrix.MatrixSolver.solveGaussian(matrix49, doubleArray56);
        boolean boolean60 = com.operations.Matrix.MatrixUtils.isSymmetric(matrix49);
        int int61 = matrix49.getCols();
        org.junit.Assert.assertNotNull(matrix2);
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + 1.4142135623730951d + "'", double3 == 1.4142135623730951d);
        org.junit.Assert.assertNotNull(matrix6);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertArrayEquals(doubleArray9, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertArrayEquals(doubleArray12, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 2 + "'", int15 == 2);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 2 + "'", int16 == 2);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 2 + "'", int17 == 2);
        org.junit.Assert.assertNotNull(matrixArray18);
        org.junit.Assert.assertNotNull(matrix19);
        org.junit.Assert.assertNotNull(matrix21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(matrixArray24);
        org.junit.Assert.assertNotNull(matrix25);
        org.junit.Assert.assertNotNull(matrix28);
        org.junit.Assert.assertNotNull(matrix30);
        org.junit.Assert.assertNotNull(matrix33);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 2 + "'", int34 == 2);
        org.junit.Assert.assertNotNull(matrix36);
        org.junit.Assert.assertTrue("'" + double37 + "' != '" + 10.0d + "'", double37 == 10.0d);
        org.junit.Assert.assertNotNull(matrix40);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 2 + "'", int41 == 2);
        org.junit.Assert.assertNotNull(matrix43);
        org.junit.Assert.assertNotNull(matrix44);
        org.junit.Assert.assertNotNull(matrix45);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(matrix48);
        org.junit.Assert.assertNotNull(matrix49);
        org.junit.Assert.assertNotNull(matrix51);
        org.junit.Assert.assertNotNull(matrix53);
        org.junit.Assert.assertNotNull(doubleArray56);
        org.junit.Assert.assertArrayEquals(doubleArray56, new double[] { 137.90576492663388d, (-1.0d) }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray57);
        org.junit.Assert.assertArrayEquals(doubleArray57, new double[] { (-24.931892522286255d), (-135.63701830716116d) }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray58);
        org.junit.Assert.assertArrayEquals(doubleArray58, new double[] { 137.90221361711127d, 1.4069397643877004d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray59);
        org.junit.Assert.assertArrayEquals(doubleArray59, new double[] { (-137.90576492663388d), (-1.0d) }, 1.0E-15);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + true + "'", boolean60 == true);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 2 + "'", int61 == 2);
    }

    @Test
    public void test3830() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3830");
        double[] doubleArray2 = new double[] { 10, 'a' };
        double[] doubleArray5 = new double[] { 10, 'a' };
        double[][] doubleArray6 = new double[][] { doubleArray2, doubleArray5 };
        com.operations.Matrix.Matrix matrix7 = new com.operations.Matrix.Matrix(doubleArray6);
        com.operations.Matrix.Matrix matrix8 = new com.operations.Matrix.Matrix(doubleArray6);
        com.operations.Matrix.Matrix matrix10 = com.operations.Matrix.MatrixTransformations.rotate2D((double) (short) 100);
        double[] doubleArray13 = new double[] { 137.90576492663388d, (byte) -1 };
        double[] doubleArray14 = com.operations.Matrix.MatrixSolver.solveGaussian(matrix10, doubleArray13);
        com.operations.Matrix.Matrix matrix15 = com.operations.Matrix.MatrixOperations.add(matrix8, matrix10);
        com.operations.Matrix.Matrix matrix16 = com.operations.Matrix.MatrixOperations.transpose(matrix10);
        int int17 = matrix10.getCols();
        int int18 = matrix10.getRows();
        double[] doubleArray21 = new double[] { 10, 'a' };
        double[] doubleArray24 = new double[] { 10, 'a' };
        double[][] doubleArray25 = new double[][] { doubleArray21, doubleArray24 };
        com.operations.Matrix.Matrix matrix26 = new com.operations.Matrix.Matrix(doubleArray25);
        int int27 = matrix26.getCols();
        int int28 = matrix26.getCols();
        matrix26.print();
        double[] doubleArray32 = new double[] { 10, 'a' };
        double[] doubleArray35 = new double[] { 10, 'a' };
        double[][] doubleArray36 = new double[][] { doubleArray32, doubleArray35 };
        com.operations.Matrix.Matrix matrix37 = new com.operations.Matrix.Matrix(doubleArray36);
        boolean boolean39 = com.operations.Matrix.MatrixUtils.compare(matrix26, matrix37, (double) (-1));
        com.operations.Matrix.Matrix matrix40 = com.operations.Matrix.MatrixOperations.multiply(matrix10, matrix26);
        double double41 = com.operations.Matrix.MatrixUtils.frobeniusNorm(matrix26);
        double[] doubleArray44 = new double[] { 10, 'a' };
        double[] doubleArray47 = new double[] { 10, 'a' };
        double[][] doubleArray48 = new double[][] { doubleArray44, doubleArray47 };
        com.operations.Matrix.Matrix matrix49 = new com.operations.Matrix.Matrix(doubleArray48);
        com.operations.Matrix.Matrix matrix50 = new com.operations.Matrix.Matrix(doubleArray48);
        com.operations.Matrix.Matrix[] matrixArray51 = com.operations.Matrix.MatrixDecompositions.luDecomposition(matrix50);
        com.operations.Matrix.Matrix matrix54 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0, (double) 100L);
        com.operations.Matrix.Matrix matrix55 = com.operations.Matrix.MatrixOperations.subtract(matrix50, matrix54);
        com.operations.Matrix.Matrix matrix57 = com.operations.Matrix.MatrixTransformations.rotate2D((double) (short) 100);
        double[] doubleArray60 = new double[] { 137.90576492663388d, (byte) -1 };
        double[] doubleArray61 = com.operations.Matrix.MatrixSolver.solveGaussian(matrix57, doubleArray60);
        com.operations.Matrix.Matrix matrix64 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0L, (double) (byte) 10);
        double[] doubleArray67 = new double[] { 10, 'a' };
        double[] doubleArray70 = new double[] { 10, 'a' };
        double[][] doubleArray71 = new double[][] { doubleArray67, doubleArray70 };
        com.operations.Matrix.Matrix matrix72 = new com.operations.Matrix.Matrix(doubleArray71);
        int int73 = matrix72.getCols();
        int int74 = matrix72.getCols();
        int int75 = matrix72.getCols();
        com.operations.Matrix.Matrix[] matrixArray76 = com.operations.Matrix.MatrixDecompositions.luDecomposition(matrix72);
        com.operations.Matrix.Matrix matrix77 = com.operations.Matrix.MatrixOperations.multiply(matrix64, matrix72);
        boolean boolean79 = com.operations.Matrix.MatrixUtils.compare(matrix57, matrix64, (double) (-1L));
        com.operations.Matrix.Matrix matrix80 = com.operations.Matrix.MatrixOperations.add(matrix50, matrix57);
        com.operations.Matrix.Matrix matrix81 = com.operations.Matrix.MatrixOperations.subtract(matrix26, matrix50);
        com.operations.Matrix.Matrix matrix83 = com.operations.Matrix.MatrixOperations.scalarMultiply(matrix81, 0.0d);
        // The following exception was thrown during execution in test generation
        try {
            matrix81.setValue((int) (byte) -1, (int) (short) 0, 33.52610922848042d);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: Index -1 out of bounds for length 2");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertArrayEquals(doubleArray2, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertArrayEquals(doubleArray5, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertNotNull(matrix10);
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertArrayEquals(doubleArray13, new double[] { 137.90576492663388d, (-1.0d) }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertArrayEquals(doubleArray14, new double[] { (-24.931892522286255d), (-135.63701830716116d) }, 1.0E-15);
        org.junit.Assert.assertNotNull(matrix15);
        org.junit.Assert.assertNotNull(matrix16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 2 + "'", int17 == 2);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 2 + "'", int18 == 2);
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertArrayEquals(doubleArray21, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertArrayEquals(doubleArray24, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 2 + "'", int27 == 2);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 2 + "'", int28 == 2);
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertArrayEquals(doubleArray32, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertArrayEquals(doubleArray35, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(matrix40);
        org.junit.Assert.assertTrue("'" + double41 + "' != '" + 137.90576492663388d + "'", double41 == 137.90576492663388d);
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertArrayEquals(doubleArray44, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertArrayEquals(doubleArray47, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertNotNull(matrixArray51);
        org.junit.Assert.assertNotNull(matrix54);
        org.junit.Assert.assertNotNull(matrix55);
        org.junit.Assert.assertNotNull(matrix57);
        org.junit.Assert.assertNotNull(doubleArray60);
        org.junit.Assert.assertArrayEquals(doubleArray60, new double[] { 137.90576492663388d, (-1.0d) }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray61);
        org.junit.Assert.assertArrayEquals(doubleArray61, new double[] { (-24.931892522286255d), (-135.63701830716116d) }, 1.0E-15);
        org.junit.Assert.assertNotNull(matrix64);
        org.junit.Assert.assertNotNull(doubleArray67);
        org.junit.Assert.assertArrayEquals(doubleArray67, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray70);
        org.junit.Assert.assertArrayEquals(doubleArray70, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray71);
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + 2 + "'", int73 == 2);
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 2 + "'", int74 == 2);
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + 2 + "'", int75 == 2);
        org.junit.Assert.assertNotNull(matrixArray76);
        org.junit.Assert.assertNotNull(matrix77);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertNotNull(matrix80);
        org.junit.Assert.assertNotNull(matrix81);
        org.junit.Assert.assertNotNull(matrix83);
    }

    @Test
    public void test3831() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3831");
        com.operations.Matrix.Matrix matrix2 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0L, (double) (byte) 10);
        int int3 = matrix2.getRows();
        com.operations.Matrix.Matrix matrix6 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0L, (double) (byte) 10);
        int int7 = matrix6.getRows();
        com.operations.Matrix.Matrix matrix9 = com.operations.Matrix.MatrixOperations.scalarMultiply(matrix6, (double) 2);
        com.operations.Matrix.Matrix matrix10 = com.operations.Matrix.MatrixOperations.subtract(matrix2, matrix6);
        com.operations.Matrix.Matrix matrix13 = com.operations.Matrix.MatrixTransformations.scale2D(146.4308710620817d, (double) 10L);
        boolean boolean15 = com.operations.Matrix.MatrixUtils.compare(matrix6, matrix13, (double) (byte) 1);
        boolean boolean16 = com.operations.Matrix.MatrixUtils.isSymmetric(matrix13);
        com.operations.Matrix.Matrix matrix17 = com.operations.Matrix.MatrixDecompositions.choleskyDecomposition(matrix13);
        double[][] doubleArray18 = matrix13.getData();
        com.operations.Matrix.Matrix matrix19 = com.operations.Matrix.MatrixOperations.transpose(matrix13);
        org.junit.Assert.assertNotNull(matrix2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 2 + "'", int3 == 2);
        org.junit.Assert.assertNotNull(matrix6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 2 + "'", int7 == 2);
        org.junit.Assert.assertNotNull(matrix9);
        org.junit.Assert.assertNotNull(matrix10);
        org.junit.Assert.assertNotNull(matrix13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertNotNull(matrix17);
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertNotNull(matrix19);
    }

    @Test
    public void test3832() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3832");
        com.operations.Matrix.Matrix matrix2 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0L, (double) (byte) 10);
        int int3 = matrix2.getRows();
        com.operations.Matrix.Matrix matrix6 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0L, (double) (byte) 10);
        int int7 = matrix6.getRows();
        com.operations.Matrix.Matrix matrix9 = com.operations.Matrix.MatrixOperations.scalarMultiply(matrix6, (double) 2);
        com.operations.Matrix.Matrix matrix10 = com.operations.Matrix.MatrixOperations.subtract(matrix2, matrix6);
        com.operations.Matrix.Matrix matrix13 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0L, (double) (byte) 10);
        int int14 = matrix13.getRows();
        com.operations.Matrix.Matrix matrix20 = com.operations.Matrix.MatrixUtils.generateRandomMatrix(100, (int) (byte) 1, (int) '#', (int) '#', 1L);
        boolean boolean22 = com.operations.Matrix.MatrixUtils.compare(matrix13, matrix20, (double) 1.0f);
        com.operations.Matrix.Matrix matrix24 = com.operations.Matrix.MatrixOperations.scalarMultiply(matrix13, (double) 1L);
        boolean boolean26 = com.operations.Matrix.MatrixUtils.compare(matrix10, matrix24, 0.0d);
        int int27 = matrix24.getCols();
        com.operations.Matrix.Matrix matrix28 = com.operations.Matrix.MatrixOperations.transpose(matrix24);
        com.operations.Matrix.Matrix matrix31 = com.operations.Matrix.MatrixTransformations.scale2D((double) (short) 1, (double) 0L);
        com.operations.Matrix.Matrix matrix32 = com.operations.Matrix.MatrixOperations.multiply(matrix24, matrix31);
        // The following exception was thrown during execution in test generation
        try {
            matrix32.setValue((int) (byte) -1, (int) (short) 100, (double) 0);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: Index -1 out of bounds for length 2");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(matrix2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 2 + "'", int3 == 2);
        org.junit.Assert.assertNotNull(matrix6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 2 + "'", int7 == 2);
        org.junit.Assert.assertNotNull(matrix9);
        org.junit.Assert.assertNotNull(matrix10);
        org.junit.Assert.assertNotNull(matrix13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 2 + "'", int14 == 2);
        org.junit.Assert.assertNotNull(matrix20);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(matrix24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 2 + "'", int27 == 2);
        org.junit.Assert.assertNotNull(matrix28);
        org.junit.Assert.assertNotNull(matrix31);
        org.junit.Assert.assertNotNull(matrix32);
    }

    @Test
    public void test3833() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3833");
        com.operations.Matrix.Matrix matrix2 = com.operations.Matrix.MatrixTransformations.scale2D(137.9093905432114d, 1363.6076983299943d);
        com.operations.Matrix.Matrix matrix3 = com.operations.Matrix.MatrixOperations.transpose(matrix2);
        com.operations.Matrix.Matrix matrix4 = com.operations.Matrix.MatrixDecompositions.choleskyDecomposition(matrix2);
        com.operations.Matrix.Matrix matrix5 = null;
        // The following exception was thrown during execution in test generation
        try {
            com.operations.Matrix.Matrix matrix6 = com.operations.Matrix.MatrixOperations.add(matrix2, matrix5);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot invoke \"com.operations.Matrix.Matrix.getRows()\" because \"b\" is null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(matrix2);
        org.junit.Assert.assertNotNull(matrix3);
        org.junit.Assert.assertNotNull(matrix4);
    }

    @Test
    public void test3834() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3834");
        com.operations.Matrix.Matrix matrix5 = com.operations.Matrix.MatrixUtils.generateRandomMatrix((int) ' ', 100, 1, 0, (long) (-1));
        // The following exception was thrown during execution in test generation
        try {
            matrix5.setValue(100, (int) (byte) 1, 0.0d);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: Index 100 out of bounds for length 32");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(matrix5);
    }

    @Test
    public void test3835() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3835");
        double[] doubleArray2 = new double[] { 10, 'a' };
        double[] doubleArray5 = new double[] { 10, 'a' };
        double[][] doubleArray6 = new double[][] { doubleArray2, doubleArray5 };
        com.operations.Matrix.Matrix matrix7 = new com.operations.Matrix.Matrix(doubleArray6);
        int int8 = matrix7.getCols();
        boolean boolean9 = com.operations.Matrix.MatrixUtils.isSquare(matrix7);
        com.operations.Matrix.Matrix matrix10 = com.operations.Matrix.MatrixOperations.transpose(matrix7);
        int int11 = matrix10.getRows();
        com.operations.Matrix.Matrix matrix14 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0L, (double) (byte) 10);
        double[] doubleArray17 = new double[] { 10, 'a' };
        double[] doubleArray20 = new double[] { 10, 'a' };
        double[][] doubleArray21 = new double[][] { doubleArray17, doubleArray20 };
        com.operations.Matrix.Matrix matrix22 = new com.operations.Matrix.Matrix(doubleArray21);
        int int23 = matrix22.getCols();
        int int24 = matrix22.getCols();
        int int25 = matrix22.getCols();
        com.operations.Matrix.Matrix[] matrixArray26 = com.operations.Matrix.MatrixDecompositions.luDecomposition(matrix22);
        com.operations.Matrix.Matrix matrix27 = com.operations.Matrix.MatrixOperations.multiply(matrix14, matrix22);
        com.operations.Matrix.Matrix matrix29 = com.operations.Matrix.MatrixTransformations.rotate2D((double) (short) 100);
        boolean boolean31 = com.operations.Matrix.MatrixUtils.compare(matrix22, matrix29, (double) (byte) 0);
        com.operations.Matrix.Matrix matrix32 = com.operations.Matrix.MatrixOperations.multiply(matrix10, matrix22);
        double[] doubleArray35 = new double[] { 10, 'a' };
        double[] doubleArray38 = new double[] { 10, 'a' };
        double[][] doubleArray39 = new double[][] { doubleArray35, doubleArray38 };
        com.operations.Matrix.Matrix matrix40 = new com.operations.Matrix.Matrix(doubleArray39);
        int int41 = matrix40.getCols();
        int int42 = matrix40.getCols();
        matrix40.print();
        com.operations.Matrix.Matrix matrix44 = com.operations.Matrix.MatrixOperations.multiply(matrix10, matrix40);
        // The following exception was thrown during execution in test generation
        try {
            double double47 = matrix10.getValue(0, (int) '4');
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertArrayEquals(doubleArray2, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertArrayEquals(doubleArray5, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 2 + "'", int8 == 2);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertNotNull(matrix10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 2 + "'", int11 == 2);
        org.junit.Assert.assertNotNull(matrix14);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertArrayEquals(doubleArray17, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertArrayEquals(doubleArray20, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 2 + "'", int23 == 2);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 2 + "'", int24 == 2);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 2 + "'", int25 == 2);
        org.junit.Assert.assertNotNull(matrixArray26);
        org.junit.Assert.assertNotNull(matrix27);
        org.junit.Assert.assertNotNull(matrix29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(matrix32);
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertArrayEquals(doubleArray35, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertArrayEquals(doubleArray38, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 2 + "'", int41 == 2);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 2 + "'", int42 == 2);
        org.junit.Assert.assertNotNull(matrix44);
    }

    @Test
    public void test3836() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3836");
        com.operations.Matrix.Matrix matrix1 = com.operations.Matrix.MatrixTransformations.rotate2D((double) '4');
        double[] doubleArray4 = new double[] { 10, 'a' };
        double[] doubleArray7 = new double[] { 10, 'a' };
        double[][] doubleArray8 = new double[][] { doubleArray4, doubleArray7 };
        com.operations.Matrix.Matrix matrix9 = new com.operations.Matrix.Matrix(doubleArray8);
        com.operations.Matrix.Matrix matrix10 = new com.operations.Matrix.Matrix(doubleArray8);
        com.operations.Matrix.Matrix matrix12 = com.operations.Matrix.MatrixTransformations.rotate2D((double) (short) 100);
        double[] doubleArray15 = new double[] { 137.90576492663388d, (byte) -1 };
        double[] doubleArray16 = com.operations.Matrix.MatrixSolver.solveGaussian(matrix12, doubleArray15);
        com.operations.Matrix.Matrix matrix17 = com.operations.Matrix.MatrixOperations.add(matrix10, matrix12);
        boolean boolean18 = com.operations.Matrix.MatrixUtils.isSymmetric(matrix17);
        boolean boolean20 = com.operations.Matrix.MatrixUtils.compare(matrix1, matrix17, 364.0054944640259d);
        com.operations.Matrix.Matrix[] matrixArray21 = com.operations.Matrix.MatrixDecompositions.luDecomposition(matrix17);
        com.operations.Matrix.Matrix matrix24 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0.0f, 350.0d);
        com.operations.Matrix.Matrix matrix27 = com.operations.Matrix.MatrixTransformations.project2D(0.0d, (double) 0);
        com.operations.Matrix.Matrix[] matrixArray28 = com.operations.Matrix.MatrixDecompositions.luDecomposition(matrix27);
        com.operations.Matrix.Matrix matrix31 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0L, (double) (byte) 10);
        int int32 = matrix31.getRows();
        com.operations.Matrix.Matrix matrix34 = com.operations.Matrix.MatrixOperations.scalarMultiply(matrix31, (double) 2);
        double double35 = com.operations.Matrix.MatrixUtils.frobeniusNorm(matrix31);
        int int36 = matrix31.getRows();
        com.operations.Matrix.Matrix matrix37 = com.operations.Matrix.MatrixOperations.transpose(matrix31);
        com.operations.Matrix.Matrix matrix38 = com.operations.Matrix.MatrixOperations.multiply(matrix27, matrix37);
        com.operations.Matrix.Matrix matrix39 = com.operations.Matrix.MatrixOperations.multiply(matrix24, matrix37);
        double[][] doubleArray40 = matrix39.getData();
        com.operations.Matrix.Matrix matrix41 = new com.operations.Matrix.Matrix(doubleArray40);
        com.operations.Matrix.Matrix matrix42 = new com.operations.Matrix.Matrix(doubleArray40);
        com.operations.Matrix.Matrix matrix43 = com.operations.Matrix.MatrixOperations.subtract(matrix17, matrix42);
        com.operations.Matrix.Matrix matrix46 = com.operations.Matrix.MatrixTransformations.project2D(3.618031071604718d, 100.0d);
        com.operations.Matrix.Matrix matrix47 = com.operations.Matrix.MatrixOperations.add(matrix42, matrix46);
        com.operations.Matrix.Matrix matrix48 = com.operations.Matrix.MatrixOperations.transpose(matrix42);
        org.junit.Assert.assertNotNull(matrix1);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertArrayEquals(doubleArray4, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertArrayEquals(doubleArray7, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertNotNull(matrix12);
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertArrayEquals(doubleArray15, new double[] { 137.90576492663388d, (-1.0d) }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertArrayEquals(doubleArray16, new double[] { (-24.931892522286255d), (-135.63701830716116d) }, 1.0E-15);
        org.junit.Assert.assertNotNull(matrix17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertNotNull(matrixArray21);
        org.junit.Assert.assertNotNull(matrix24);
        org.junit.Assert.assertNotNull(matrix27);
        org.junit.Assert.assertNotNull(matrixArray28);
        org.junit.Assert.assertNotNull(matrix31);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 2 + "'", int32 == 2);
        org.junit.Assert.assertNotNull(matrix34);
        org.junit.Assert.assertTrue("'" + double35 + "' != '" + 10.0d + "'", double35 == 10.0d);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 2 + "'", int36 == 2);
        org.junit.Assert.assertNotNull(matrix37);
        org.junit.Assert.assertNotNull(matrix38);
        org.junit.Assert.assertNotNull(matrix39);
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertNotNull(matrix43);
        org.junit.Assert.assertNotNull(matrix46);
        org.junit.Assert.assertNotNull(matrix47);
        org.junit.Assert.assertNotNull(matrix48);
    }

    @Test
    public void test3837() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3837");
        com.operations.Matrix.Matrix matrix5 = com.operations.Matrix.MatrixUtils.generateRandomMatrix(1, 0, (int) (byte) 1, 100, (long) (short) 1);
        boolean boolean6 = com.operations.Matrix.MatrixUtils.isSymmetric(matrix5);
        matrix5.print();
        boolean boolean8 = com.operations.Matrix.MatrixUtils.isSquare(matrix5);
        int int9 = matrix5.getCols();
        com.operations.Matrix.Matrix matrix14 = com.operations.Matrix.MatrixUtils.generateRandomMatrix((int) '#', (int) (byte) 0, 10, (int) (short) -1);
        com.operations.Matrix.Matrix matrix16 = com.operations.Matrix.MatrixOperations.scalarMultiply(matrix14, (double) 100L);
        com.operations.Matrix.Matrix matrix18 = com.operations.Matrix.MatrixOperations.scalarMultiply(matrix14, (double) 100.0f);
        double[][] doubleArray19 = matrix14.getData();
        com.operations.Matrix.Matrix matrix20 = new com.operations.Matrix.Matrix(doubleArray19);
        com.operations.Matrix.Matrix matrix21 = new com.operations.Matrix.Matrix(doubleArray19);
        boolean boolean23 = com.operations.Matrix.MatrixUtils.compare(matrix5, matrix21, (-10.34729635533386d));
        org.junit.Assert.assertNotNull(matrix5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertNotNull(matrix14);
        org.junit.Assert.assertNotNull(matrix16);
        org.junit.Assert.assertNotNull(matrix18);
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
    }

    @Test
    public void test3838() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3838");
        com.operations.Matrix.Matrix matrix2 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0L, (double) (byte) 10);
        double[] doubleArray5 = new double[] { 10, 'a' };
        double[] doubleArray8 = new double[] { 10, 'a' };
        double[][] doubleArray9 = new double[][] { doubleArray5, doubleArray8 };
        com.operations.Matrix.Matrix matrix10 = new com.operations.Matrix.Matrix(doubleArray9);
        int int11 = matrix10.getCols();
        int int12 = matrix10.getCols();
        int int13 = matrix10.getCols();
        com.operations.Matrix.Matrix[] matrixArray14 = com.operations.Matrix.MatrixDecompositions.luDecomposition(matrix10);
        com.operations.Matrix.Matrix matrix15 = com.operations.Matrix.MatrixOperations.multiply(matrix2, matrix10);
        com.operations.Matrix.Matrix matrix17 = com.operations.Matrix.MatrixTransformations.rotate2D((double) (short) 100);
        boolean boolean19 = com.operations.Matrix.MatrixUtils.compare(matrix10, matrix17, (double) (byte) 0);
        com.operations.Matrix.Matrix[] matrixArray20 = com.operations.Matrix.MatrixDecompositions.luDecomposition(matrix10);
        com.operations.Matrix.Matrix matrix21 = com.operations.Matrix.MatrixDecompositions.choleskyDecomposition(matrix10);
        double[] doubleArray24 = new double[] { 10, 'a' };
        double[] doubleArray27 = new double[] { 10, 'a' };
        double[][] doubleArray28 = new double[][] { doubleArray24, doubleArray27 };
        com.operations.Matrix.Matrix matrix29 = new com.operations.Matrix.Matrix(doubleArray28);
        com.operations.Matrix.Matrix matrix30 = new com.operations.Matrix.Matrix(doubleArray28);
        com.operations.Matrix.Matrix[] matrixArray31 = com.operations.Matrix.MatrixDecompositions.luDecomposition(matrix30);
        com.operations.Matrix.Matrix matrix34 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0, (double) 100L);
        com.operations.Matrix.Matrix matrix35 = com.operations.Matrix.MatrixOperations.subtract(matrix30, matrix34);
        com.operations.Matrix.Matrix matrix37 = com.operations.Matrix.MatrixTransformations.rotate2D((double) (short) 100);
        double[] doubleArray40 = new double[] { 137.90576492663388d, (byte) -1 };
        double[] doubleArray41 = com.operations.Matrix.MatrixSolver.solveGaussian(matrix37, doubleArray40);
        com.operations.Matrix.Matrix matrix44 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0L, (double) (byte) 10);
        double[] doubleArray47 = new double[] { 10, 'a' };
        double[] doubleArray50 = new double[] { 10, 'a' };
        double[][] doubleArray51 = new double[][] { doubleArray47, doubleArray50 };
        com.operations.Matrix.Matrix matrix52 = new com.operations.Matrix.Matrix(doubleArray51);
        int int53 = matrix52.getCols();
        int int54 = matrix52.getCols();
        int int55 = matrix52.getCols();
        com.operations.Matrix.Matrix[] matrixArray56 = com.operations.Matrix.MatrixDecompositions.luDecomposition(matrix52);
        com.operations.Matrix.Matrix matrix57 = com.operations.Matrix.MatrixOperations.multiply(matrix44, matrix52);
        boolean boolean59 = com.operations.Matrix.MatrixUtils.compare(matrix37, matrix44, (double) (-1L));
        com.operations.Matrix.Matrix matrix60 = com.operations.Matrix.MatrixOperations.add(matrix30, matrix37);
        com.operations.Matrix.Matrix matrix61 = com.operations.Matrix.MatrixOperations.subtract(matrix21, matrix37);
        boolean boolean62 = com.operations.Matrix.MatrixUtils.isSquare(matrix37);
        com.operations.Matrix.Matrix matrix65 = com.operations.Matrix.MatrixTransformations.project2D((double) 0L, (double) 1);
        com.operations.Matrix.Matrix matrix67 = com.operations.Matrix.MatrixOperations.scalarMultiply(matrix65, (double) 97);
        boolean boolean69 = com.operations.Matrix.MatrixUtils.compare(matrix37, matrix65, (double) 1.0f);
        // The following exception was thrown during execution in test generation
        try {
            matrix65.setValue((int) (short) -1, (-1), (double) (short) 0);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: Index -1 out of bounds for length 2");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(matrix2);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertArrayEquals(doubleArray5, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertArrayEquals(doubleArray8, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 2 + "'", int11 == 2);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 2 + "'", int12 == 2);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 2 + "'", int13 == 2);
        org.junit.Assert.assertNotNull(matrixArray14);
        org.junit.Assert.assertNotNull(matrix15);
        org.junit.Assert.assertNotNull(matrix17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(matrixArray20);
        org.junit.Assert.assertNotNull(matrix21);
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertArrayEquals(doubleArray24, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertArrayEquals(doubleArray27, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertNotNull(matrixArray31);
        org.junit.Assert.assertNotNull(matrix34);
        org.junit.Assert.assertNotNull(matrix35);
        org.junit.Assert.assertNotNull(matrix37);
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertArrayEquals(doubleArray40, new double[] { 137.90576492663388d, (-1.0d) }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertArrayEquals(doubleArray41, new double[] { (-24.931892522286255d), (-135.63701830716116d) }, 1.0E-15);
        org.junit.Assert.assertNotNull(matrix44);
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertArrayEquals(doubleArray47, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertArrayEquals(doubleArray50, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 2 + "'", int53 == 2);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 2 + "'", int54 == 2);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 2 + "'", int55 == 2);
        org.junit.Assert.assertNotNull(matrixArray56);
        org.junit.Assert.assertNotNull(matrix57);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNotNull(matrix60);
        org.junit.Assert.assertNotNull(matrix61);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + true + "'", boolean62 == true);
        org.junit.Assert.assertNotNull(matrix65);
        org.junit.Assert.assertNotNull(matrix67);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
    }

    @Test
    public void test3839() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3839");
        com.operations.Matrix.Matrix matrix2 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0L, (double) (byte) 10);
        int int3 = matrix2.getRows();
        com.operations.Matrix.Matrix matrix5 = com.operations.Matrix.MatrixOperations.scalarMultiply(matrix2, (double) 2);
        matrix2.print();
        com.operations.Matrix.Matrix matrix8 = com.operations.Matrix.MatrixOperations.scalarMultiply(matrix2, 100.00499987500625d);
        int int9 = matrix8.getRows();
        com.operations.Matrix.Matrix matrix11 = com.operations.Matrix.MatrixTransformations.rotate2D((double) 1.0f);
        com.operations.Matrix.Matrix matrix14 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0L, (double) (byte) 10);
        int int15 = matrix14.getRows();
        com.operations.Matrix.Matrix matrix17 = com.operations.Matrix.MatrixOperations.scalarMultiply(matrix14, (double) 2);
        double double18 = com.operations.Matrix.MatrixUtils.frobeniusNorm(matrix14);
        com.operations.Matrix.Matrix matrix21 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0L, (double) (byte) 10);
        int int22 = matrix21.getRows();
        com.operations.Matrix.Matrix matrix24 = com.operations.Matrix.MatrixOperations.scalarMultiply(matrix21, (double) 2);
        com.operations.Matrix.Matrix matrix25 = com.operations.Matrix.MatrixOperations.subtract(matrix14, matrix24);
        com.operations.Matrix.Matrix matrix26 = com.operations.Matrix.MatrixOperations.add(matrix11, matrix24);
        com.operations.Matrix.Matrix[] matrixArray27 = com.operations.Matrix.MatrixDecompositions.luDecomposition(matrix24);
        boolean boolean28 = com.operations.Matrix.MatrixUtils.isSquare(matrix24);
        com.operations.Matrix.Matrix matrix29 = com.operations.Matrix.MatrixOperations.transpose(matrix24);
        com.operations.Matrix.Matrix matrix31 = com.operations.Matrix.MatrixOperations.scalarMultiply(matrix24, (double) ' ');
        com.operations.Matrix.Matrix matrix32 = com.operations.Matrix.MatrixOperations.multiply(matrix8, matrix31);
        int int33 = matrix31.getCols();
        org.junit.Assert.assertNotNull(matrix2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 2 + "'", int3 == 2);
        org.junit.Assert.assertNotNull(matrix5);
        org.junit.Assert.assertNotNull(matrix8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 2 + "'", int9 == 2);
        org.junit.Assert.assertNotNull(matrix11);
        org.junit.Assert.assertNotNull(matrix14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 2 + "'", int15 == 2);
        org.junit.Assert.assertNotNull(matrix17);
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 10.0d + "'", double18 == 10.0d);
        org.junit.Assert.assertNotNull(matrix21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 2 + "'", int22 == 2);
        org.junit.Assert.assertNotNull(matrix24);
        org.junit.Assert.assertNotNull(matrix25);
        org.junit.Assert.assertNotNull(matrix26);
        org.junit.Assert.assertNotNull(matrixArray27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertNotNull(matrix29);
        org.junit.Assert.assertNotNull(matrix31);
        org.junit.Assert.assertNotNull(matrix32);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 2 + "'", int33 == 2);
    }

    @Test
    public void test3840() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3840");
        com.operations.Matrix.Matrix matrix4 = com.operations.Matrix.MatrixUtils.generateRandomMatrix((int) '4', (int) (byte) 100, 100, (int) (short) 0);
        org.junit.Assert.assertNotNull(matrix4);
    }

    @Test
    public void test3841() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3841");
        com.operations.Matrix.Matrix matrix2 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0L, (double) (byte) 10);
        int int3 = matrix2.getRows();
        com.operations.Matrix.Matrix matrix5 = com.operations.Matrix.MatrixOperations.scalarMultiply(matrix2, (double) 2);
        double double6 = com.operations.Matrix.MatrixUtils.frobeniusNorm(matrix2);
        com.operations.Matrix.Matrix matrix9 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0L, (double) (byte) 10);
        int int10 = matrix9.getRows();
        com.operations.Matrix.Matrix matrix12 = com.operations.Matrix.MatrixOperations.scalarMultiply(matrix9, (double) 2);
        com.operations.Matrix.Matrix matrix13 = com.operations.Matrix.MatrixOperations.subtract(matrix2, matrix12);
        com.operations.Matrix.Matrix matrix15 = com.operations.Matrix.MatrixTransformations.rotate2D((double) (short) 100);
        double[] doubleArray18 = new double[] { 137.90576492663388d, (byte) -1 };
        double[] doubleArray19 = com.operations.Matrix.MatrixSolver.solveGaussian(matrix15, doubleArray18);
        com.operations.Matrix.Matrix matrix22 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0L, (double) (byte) 10);
        double[] doubleArray25 = new double[] { 10, 'a' };
        double[] doubleArray28 = new double[] { 10, 'a' };
        double[][] doubleArray29 = new double[][] { doubleArray25, doubleArray28 };
        com.operations.Matrix.Matrix matrix30 = new com.operations.Matrix.Matrix(doubleArray29);
        int int31 = matrix30.getCols();
        int int32 = matrix30.getCols();
        int int33 = matrix30.getCols();
        com.operations.Matrix.Matrix[] matrixArray34 = com.operations.Matrix.MatrixDecompositions.luDecomposition(matrix30);
        com.operations.Matrix.Matrix matrix35 = com.operations.Matrix.MatrixOperations.multiply(matrix22, matrix30);
        boolean boolean37 = com.operations.Matrix.MatrixUtils.compare(matrix15, matrix22, (double) (-1L));
        double[][] doubleArray38 = matrix15.getData();
        boolean boolean40 = com.operations.Matrix.MatrixUtils.compare(matrix2, matrix15, (double) '#');
        com.operations.Matrix.Matrix matrix43 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0L, (double) (byte) 10);
        double[] doubleArray46 = new double[] { 10, 'a' };
        double[] doubleArray49 = new double[] { 10, 'a' };
        double[][] doubleArray50 = new double[][] { doubleArray46, doubleArray49 };
        com.operations.Matrix.Matrix matrix51 = new com.operations.Matrix.Matrix(doubleArray50);
        int int52 = matrix51.getCols();
        int int53 = matrix51.getCols();
        int int54 = matrix51.getCols();
        com.operations.Matrix.Matrix[] matrixArray55 = com.operations.Matrix.MatrixDecompositions.luDecomposition(matrix51);
        com.operations.Matrix.Matrix matrix56 = com.operations.Matrix.MatrixOperations.multiply(matrix43, matrix51);
        com.operations.Matrix.Matrix matrix58 = com.operations.Matrix.MatrixTransformations.rotate2D((double) (short) 100);
        boolean boolean60 = com.operations.Matrix.MatrixUtils.compare(matrix51, matrix58, (double) (byte) 0);
        boolean boolean61 = com.operations.Matrix.MatrixUtils.isSymmetric(matrix58);
        boolean boolean62 = com.operations.Matrix.MatrixUtils.isSquare(matrix58);
        com.operations.Matrix.Matrix matrix64 = com.operations.Matrix.MatrixOperations.scalarMultiply(matrix58, (double) 2);
        com.operations.Matrix.Matrix matrix65 = com.operations.Matrix.MatrixOperations.subtract(matrix2, matrix64);
        org.junit.Assert.assertNotNull(matrix2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 2 + "'", int3 == 2);
        org.junit.Assert.assertNotNull(matrix5);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 10.0d + "'", double6 == 10.0d);
        org.junit.Assert.assertNotNull(matrix9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 2 + "'", int10 == 2);
        org.junit.Assert.assertNotNull(matrix12);
        org.junit.Assert.assertNotNull(matrix13);
        org.junit.Assert.assertNotNull(matrix15);
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertArrayEquals(doubleArray18, new double[] { 137.90576492663388d, (-1.0d) }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertArrayEquals(doubleArray19, new double[] { (-24.931892522286255d), (-135.63701830716116d) }, 1.0E-15);
        org.junit.Assert.assertNotNull(matrix22);
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertArrayEquals(doubleArray25, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertArrayEquals(doubleArray28, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 2 + "'", int31 == 2);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 2 + "'", int32 == 2);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 2 + "'", int33 == 2);
        org.junit.Assert.assertNotNull(matrixArray34);
        org.junit.Assert.assertNotNull(matrix35);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertNotNull(matrix43);
        org.junit.Assert.assertNotNull(doubleArray46);
        org.junit.Assert.assertArrayEquals(doubleArray46, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertArrayEquals(doubleArray49, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 2 + "'", int52 == 2);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 2 + "'", int53 == 2);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 2 + "'", int54 == 2);
        org.junit.Assert.assertNotNull(matrixArray55);
        org.junit.Assert.assertNotNull(matrix56);
        org.junit.Assert.assertNotNull(matrix58);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + true + "'", boolean62 == true);
        org.junit.Assert.assertNotNull(matrix64);
        org.junit.Assert.assertNotNull(matrix65);
    }

    @Test
    public void test3842() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3842");
        com.operations.Matrix.Matrix matrix2 = com.operations.Matrix.MatrixTransformations.project2D(10.0d, (double) 1);
        double[][] doubleArray3 = matrix2.getData();
        double[] doubleArray6 = new double[] { 10, 'a' };
        double[] doubleArray9 = new double[] { 10, 'a' };
        double[][] doubleArray10 = new double[][] { doubleArray6, doubleArray9 };
        com.operations.Matrix.Matrix matrix11 = new com.operations.Matrix.Matrix(doubleArray10);
        com.operations.Matrix.Matrix matrix12 = new com.operations.Matrix.Matrix(doubleArray10);
        com.operations.Matrix.Matrix matrix14 = com.operations.Matrix.MatrixTransformations.rotate2D((double) (short) 100);
        double[] doubleArray17 = new double[] { 137.90576492663388d, (byte) -1 };
        double[] doubleArray18 = com.operations.Matrix.MatrixSolver.solveGaussian(matrix14, doubleArray17);
        com.operations.Matrix.Matrix matrix19 = com.operations.Matrix.MatrixOperations.add(matrix12, matrix14);
        double[][] doubleArray20 = matrix12.getData();
        int int21 = matrix12.getCols();
        double[][] doubleArray22 = matrix12.getData();
        com.operations.Matrix.Matrix matrix23 = com.operations.Matrix.MatrixOperations.add(matrix2, matrix12);
        com.operations.Matrix.Matrix matrix24 = com.operations.Matrix.MatrixOperations.transpose(matrix2);
        org.junit.Assert.assertNotNull(matrix2);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertArrayEquals(doubleArray6, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertArrayEquals(doubleArray9, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertNotNull(matrix14);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertArrayEquals(doubleArray17, new double[] { 137.90576492663388d, (-1.0d) }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertArrayEquals(doubleArray18, new double[] { (-24.931892522286255d), (-135.63701830716116d) }, 1.0E-15);
        org.junit.Assert.assertNotNull(matrix19);
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 2 + "'", int21 == 2);
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertNotNull(matrix23);
        org.junit.Assert.assertNotNull(matrix24);
    }

    @Test
    public void test3843() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3843");
        com.operations.Matrix.Matrix matrix2 = com.operations.Matrix.MatrixTransformations.project2D((-1.0d), (double) 1L);
        boolean boolean3 = com.operations.Matrix.MatrixUtils.isSquare(matrix2);
        boolean boolean4 = com.operations.Matrix.MatrixUtils.isSquare(matrix2);
        double[] doubleArray7 = new double[] { 10, 'a' };
        double[] doubleArray10 = new double[] { 10, 'a' };
        double[][] doubleArray11 = new double[][] { doubleArray7, doubleArray10 };
        com.operations.Matrix.Matrix matrix12 = new com.operations.Matrix.Matrix(doubleArray11);
        com.operations.Matrix.Matrix matrix13 = new com.operations.Matrix.Matrix(doubleArray11);
        com.operations.Matrix.Matrix matrix15 = com.operations.Matrix.MatrixTransformations.rotate2D((double) (short) 100);
        double[] doubleArray18 = new double[] { 137.90576492663388d, (byte) -1 };
        double[] doubleArray19 = com.operations.Matrix.MatrixSolver.solveGaussian(matrix15, doubleArray18);
        com.operations.Matrix.Matrix matrix20 = com.operations.Matrix.MatrixOperations.add(matrix13, matrix15);
        com.operations.Matrix.Matrix matrix21 = com.operations.Matrix.MatrixOperations.transpose(matrix15);
        com.operations.Matrix.Matrix matrix22 = com.operations.Matrix.MatrixOperations.subtract(matrix2, matrix15);
        com.operations.Matrix.Matrix matrix24 = com.operations.Matrix.MatrixOperations.scalarMultiply(matrix22, 65.19779036970327d);
        org.junit.Assert.assertNotNull(matrix2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertArrayEquals(doubleArray7, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertArrayEquals(doubleArray10, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertNotNull(matrix15);
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertArrayEquals(doubleArray18, new double[] { 137.90576492663388d, (-1.0d) }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertArrayEquals(doubleArray19, new double[] { (-24.931892522286255d), (-135.63701830716116d) }, 1.0E-15);
        org.junit.Assert.assertNotNull(matrix20);
        org.junit.Assert.assertNotNull(matrix21);
        org.junit.Assert.assertNotNull(matrix22);
        org.junit.Assert.assertNotNull(matrix24);
    }

    @Test
    public void test3844() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3844");
        // The following exception was thrown during execution in test generation
        try {
            com.operations.Matrix.Matrix matrix4 = com.operations.Matrix.MatrixUtils.generateRandomMatrix(0, (int) (short) 1, 97, 97);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
    }

    @Test
    public void test3845() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3845");
        com.operations.Matrix.Matrix matrix4 = com.operations.Matrix.MatrixUtils.generateRandomMatrix(32, (int) (byte) 1, 10, (int) (byte) 10);
        org.junit.Assert.assertNotNull(matrix4);
    }

    @Test
    public void test3846() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3846");
        double[] doubleArray2 = new double[] { 10, 'a' };
        double[] doubleArray5 = new double[] { 10, 'a' };
        double[][] doubleArray6 = new double[][] { doubleArray2, doubleArray5 };
        com.operations.Matrix.Matrix matrix7 = new com.operations.Matrix.Matrix(doubleArray6);
        int int8 = matrix7.getCols();
        int int9 = matrix7.getCols();
        matrix7.print();
        double[] doubleArray13 = new double[] { 10, 'a' };
        double[] doubleArray16 = new double[] { 10, 'a' };
        double[][] doubleArray17 = new double[][] { doubleArray13, doubleArray16 };
        com.operations.Matrix.Matrix matrix18 = new com.operations.Matrix.Matrix(doubleArray17);
        boolean boolean20 = com.operations.Matrix.MatrixUtils.compare(matrix7, matrix18, (double) (-1));
        double[][] doubleArray21 = matrix7.getData();
        com.operations.Matrix.Matrix matrix22 = new com.operations.Matrix.Matrix(doubleArray21);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertArrayEquals(doubleArray2, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertArrayEquals(doubleArray5, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 2 + "'", int8 == 2);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 2 + "'", int9 == 2);
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertArrayEquals(doubleArray13, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertArrayEquals(doubleArray16, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(doubleArray21);
    }

    @Test
    public void test3847() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3847");
        com.operations.Matrix.Matrix matrix5 = com.operations.Matrix.MatrixUtils.generateRandomMatrix((int) 'a', (int) (byte) 10, (int) '#', 100, 100L);
        com.operations.Matrix.Matrix matrix8 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0L, (double) (byte) 10);
        int int9 = matrix8.getRows();
        com.operations.Matrix.Matrix matrix15 = com.operations.Matrix.MatrixUtils.generateRandomMatrix(100, (int) (byte) 1, (int) '#', (int) '#', 1L);
        boolean boolean17 = com.operations.Matrix.MatrixUtils.compare(matrix8, matrix15, (double) 1.0f);
        matrix15.print();
        com.operations.Matrix.Matrix matrix19 = com.operations.Matrix.MatrixOperations.transpose(matrix15);
        boolean boolean20 = com.operations.Matrix.MatrixUtils.isSquare(matrix19);
        com.operations.Matrix.Matrix matrix22 = com.operations.Matrix.MatrixOperations.scalarMultiply(matrix19, 0.0d);
        boolean boolean24 = com.operations.Matrix.MatrixUtils.compare(matrix5, matrix22, 975.1410154434076d);
        int int25 = matrix5.getCols();
        org.junit.Assert.assertNotNull(matrix5);
        org.junit.Assert.assertNotNull(matrix8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 2 + "'", int9 == 2);
        org.junit.Assert.assertNotNull(matrix15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(matrix19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(matrix22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 10 + "'", int25 == 10);
    }

    @Test
    public void test3848() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3848");
        com.operations.Matrix.Matrix matrix2 = com.operations.Matrix.MatrixTransformations.project2D(146781.22563870353d, 20.0d);
        boolean boolean3 = com.operations.Matrix.MatrixUtils.isSquare(matrix2);
        org.junit.Assert.assertNotNull(matrix2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
    }

    @Test
    public void test3849() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3849");
        com.operations.Matrix.Matrix matrix2 = com.operations.Matrix.MatrixTransformations.project2D(32.524725901652594d, 100.0d);
        org.junit.Assert.assertNotNull(matrix2);
    }

    @Test
    public void test3850() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3850");
        // The following exception was thrown during execution in test generation
        try {
            com.operations.Matrix.Matrix matrix5 = com.operations.Matrix.MatrixUtils.generateRandomMatrix((-1), (int) (short) 100, (int) (byte) 100, 1, (long) 32);
            org.junit.Assert.fail("Expected exception of type java.lang.NegativeArraySizeException; message: -1");
        } catch (java.lang.NegativeArraySizeException e) {
            // Expected exception.
        }
    }

    @Test
    public void test3851() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3851");
        com.operations.Matrix.Matrix matrix2 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0L, (double) (byte) 10);
        int int3 = matrix2.getRows();
        com.operations.Matrix.Matrix matrix5 = com.operations.Matrix.MatrixOperations.scalarMultiply(matrix2, (double) 2);
        double double6 = com.operations.Matrix.MatrixUtils.frobeniusNorm(matrix2);
        double[][] doubleArray7 = matrix2.getData();
        com.operations.Matrix.Matrix matrix8 = new com.operations.Matrix.Matrix(doubleArray7);
        matrix8.print();
        com.operations.Matrix.Matrix[] matrixArray10 = com.operations.Matrix.MatrixDecompositions.luDecomposition(matrix8);
        org.junit.Assert.assertNotNull(matrix2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 2 + "'", int3 == 2);
        org.junit.Assert.assertNotNull(matrix5);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 10.0d + "'", double6 == 10.0d);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertNotNull(matrixArray10);
    }

    @Test
    public void test3852() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3852");
        com.operations.Matrix.Matrix matrix2 = com.operations.Matrix.MatrixTransformations.scale2D((double) 1.0f, (double) 1);
        com.operations.Matrix.Matrix matrix4 = com.operations.Matrix.MatrixTransformations.rotate2D((double) 1.0f);
        com.operations.Matrix.Matrix matrix7 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0L, (double) (byte) 10);
        int int8 = matrix7.getRows();
        com.operations.Matrix.Matrix matrix10 = com.operations.Matrix.MatrixOperations.scalarMultiply(matrix7, (double) 2);
        double double11 = com.operations.Matrix.MatrixUtils.frobeniusNorm(matrix7);
        com.operations.Matrix.Matrix matrix14 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0L, (double) (byte) 10);
        int int15 = matrix14.getRows();
        com.operations.Matrix.Matrix matrix17 = com.operations.Matrix.MatrixOperations.scalarMultiply(matrix14, (double) 2);
        com.operations.Matrix.Matrix matrix18 = com.operations.Matrix.MatrixOperations.subtract(matrix7, matrix17);
        com.operations.Matrix.Matrix matrix19 = com.operations.Matrix.MatrixOperations.add(matrix4, matrix17);
        boolean boolean21 = com.operations.Matrix.MatrixUtils.compare(matrix2, matrix4, (double) (byte) -1);
        com.operations.Matrix.Matrix matrix22 = com.operations.Matrix.MatrixOperations.transpose(matrix4);
        double double25 = matrix22.getValue(0, (int) (short) 0);
        com.operations.Matrix.Matrix matrix26 = com.operations.Matrix.MatrixOperations.transpose(matrix22);
        int int27 = matrix26.getCols();
        com.operations.Matrix.Matrix matrix30 = com.operations.Matrix.MatrixTransformations.scale2D(137.15495886388925d, 100.00499987500625d);
        com.operations.Matrix.Matrix matrix31 = com.operations.Matrix.MatrixOperations.subtract(matrix26, matrix30);
        boolean boolean32 = com.operations.Matrix.MatrixUtils.isSquare(matrix31);
        // The following exception was thrown during execution in test generation
        try {
            double double35 = matrix31.getValue((int) ' ', 10);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(matrix2);
        org.junit.Assert.assertNotNull(matrix4);
        org.junit.Assert.assertNotNull(matrix7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 2 + "'", int8 == 2);
        org.junit.Assert.assertNotNull(matrix10);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 10.0d + "'", double11 == 10.0d);
        org.junit.Assert.assertNotNull(matrix14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 2 + "'", int15 == 2);
        org.junit.Assert.assertNotNull(matrix17);
        org.junit.Assert.assertNotNull(matrix18);
        org.junit.Assert.assertNotNull(matrix19);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(matrix22);
        org.junit.Assert.assertTrue("'" + double25 + "' != '" + 0.9998476951563913d + "'", double25 == 0.9998476951563913d);
        org.junit.Assert.assertNotNull(matrix26);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 2 + "'", int27 == 2);
        org.junit.Assert.assertNotNull(matrix30);
        org.junit.Assert.assertNotNull(matrix31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
    }

    @Test
    public void test3853() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3853");
        com.operations.Matrix.Matrix matrix2 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0L, (double) (byte) 10);
        int int3 = matrix2.getRows();
        com.operations.Matrix.Matrix matrix5 = com.operations.Matrix.MatrixOperations.scalarMultiply(matrix2, (double) 2);
        com.operations.Matrix.Matrix[] matrixArray6 = com.operations.Matrix.MatrixDecompositions.luDecomposition(matrix5);
        com.operations.Matrix.Matrix matrix7 = com.operations.Matrix.MatrixOperations.transpose(matrix5);
        com.operations.Matrix.Matrix matrix8 = com.operations.Matrix.MatrixOperations.transpose(matrix5);
        com.operations.Matrix.Matrix matrix10 = com.operations.Matrix.MatrixOperations.scalarMultiply(matrix5, 35.0d);
        int int11 = matrix10.getCols();
        org.junit.Assert.assertNotNull(matrix2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 2 + "'", int3 == 2);
        org.junit.Assert.assertNotNull(matrix5);
        org.junit.Assert.assertNotNull(matrixArray6);
        org.junit.Assert.assertNotNull(matrix7);
        org.junit.Assert.assertNotNull(matrix8);
        org.junit.Assert.assertNotNull(matrix10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 2 + "'", int11 == 2);
    }

    @Test
    public void test3854() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3854");
        com.operations.Matrix.Matrix matrix4 = com.operations.Matrix.MatrixUtils.generateRandomMatrix((int) (short) 10, 97, (int) ' ', 0);
        org.junit.Assert.assertNotNull(matrix4);
    }

    @Test
    public void test3855() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3855");
        // The following exception was thrown during execution in test generation
        try {
            com.operations.Matrix.Matrix matrix4 = com.operations.Matrix.MatrixUtils.generateRandomMatrix((int) (short) -1, 0, 1, (int) '#');
            org.junit.Assert.fail("Expected exception of type java.lang.NegativeArraySizeException; message: -1");
        } catch (java.lang.NegativeArraySizeException e) {
            // Expected exception.
        }
    }

    @Test
    public void test3856() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3856");
        com.operations.Matrix.Matrix matrix2 = new com.operations.Matrix.Matrix((int) (short) 10, 52);
    }

    @Test
    public void test3857() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3857");
        double[] doubleArray2 = new double[] { 10, 'a' };
        double[] doubleArray5 = new double[] { 10, 'a' };
        double[][] doubleArray6 = new double[][] { doubleArray2, doubleArray5 };
        com.operations.Matrix.Matrix matrix7 = new com.operations.Matrix.Matrix(doubleArray6);
        com.operations.Matrix.Matrix matrix8 = new com.operations.Matrix.Matrix(doubleArray6);
        com.operations.Matrix.Matrix matrix10 = com.operations.Matrix.MatrixTransformations.rotate2D((double) (short) 100);
        double[] doubleArray13 = new double[] { 137.90576492663388d, (byte) -1 };
        double[] doubleArray14 = com.operations.Matrix.MatrixSolver.solveGaussian(matrix10, doubleArray13);
        com.operations.Matrix.Matrix matrix15 = com.operations.Matrix.MatrixOperations.add(matrix8, matrix10);
        com.operations.Matrix.Matrix matrix16 = com.operations.Matrix.MatrixOperations.transpose(matrix10);
        int int17 = matrix10.getCols();
        int int18 = matrix10.getRows();
        double[] doubleArray21 = new double[] { 10, 'a' };
        double[] doubleArray24 = new double[] { 10, 'a' };
        double[][] doubleArray25 = new double[][] { doubleArray21, doubleArray24 };
        com.operations.Matrix.Matrix matrix26 = new com.operations.Matrix.Matrix(doubleArray25);
        int int27 = matrix26.getCols();
        int int28 = matrix26.getCols();
        matrix26.print();
        double[] doubleArray32 = new double[] { 10, 'a' };
        double[] doubleArray35 = new double[] { 10, 'a' };
        double[][] doubleArray36 = new double[][] { doubleArray32, doubleArray35 };
        com.operations.Matrix.Matrix matrix37 = new com.operations.Matrix.Matrix(doubleArray36);
        boolean boolean39 = com.operations.Matrix.MatrixUtils.compare(matrix26, matrix37, (double) (-1));
        com.operations.Matrix.Matrix matrix40 = com.operations.Matrix.MatrixOperations.multiply(matrix10, matrix26);
        double double43 = matrix10.getValue((int) (short) 0, 0);
        boolean boolean44 = com.operations.Matrix.MatrixUtils.isSymmetric(matrix10);
        boolean boolean45 = com.operations.Matrix.MatrixUtils.isSquare(matrix10);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertArrayEquals(doubleArray2, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertArrayEquals(doubleArray5, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertNotNull(matrix10);
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertArrayEquals(doubleArray13, new double[] { 137.90576492663388d, (-1.0d) }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertArrayEquals(doubleArray14, new double[] { (-24.931892522286255d), (-135.63701830716116d) }, 1.0E-15);
        org.junit.Assert.assertNotNull(matrix15);
        org.junit.Assert.assertNotNull(matrix16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 2 + "'", int17 == 2);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 2 + "'", int18 == 2);
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertArrayEquals(doubleArray21, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertArrayEquals(doubleArray24, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 2 + "'", int27 == 2);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 2 + "'", int28 == 2);
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertArrayEquals(doubleArray32, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertArrayEquals(doubleArray35, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(matrix40);
        org.junit.Assert.assertTrue("'" + double43 + "' != '" + (-0.1736481776669303d) + "'", double43 == (-0.1736481776669303d));
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
    }

    @Test
    public void test3858() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3858");
        com.operations.Matrix.Matrix matrix2 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0L, (double) (byte) 10);
        com.operations.Matrix.Matrix matrix4 = com.operations.Matrix.MatrixTransformations.rotate2D((double) 1.0f);
        com.operations.Matrix.Matrix matrix7 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0L, (double) (byte) 10);
        int int8 = matrix7.getRows();
        com.operations.Matrix.Matrix matrix10 = com.operations.Matrix.MatrixOperations.scalarMultiply(matrix7, (double) 2);
        double double11 = com.operations.Matrix.MatrixUtils.frobeniusNorm(matrix7);
        com.operations.Matrix.Matrix matrix14 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0L, (double) (byte) 10);
        int int15 = matrix14.getRows();
        com.operations.Matrix.Matrix matrix17 = com.operations.Matrix.MatrixOperations.scalarMultiply(matrix14, (double) 2);
        com.operations.Matrix.Matrix matrix18 = com.operations.Matrix.MatrixOperations.subtract(matrix7, matrix17);
        com.operations.Matrix.Matrix matrix19 = com.operations.Matrix.MatrixOperations.add(matrix4, matrix17);
        matrix4.print();
        double[] doubleArray23 = new double[] { 10, 'a' };
        double[] doubleArray26 = new double[] { 10, 'a' };
        double[][] doubleArray27 = new double[][] { doubleArray23, doubleArray26 };
        com.operations.Matrix.Matrix matrix28 = new com.operations.Matrix.Matrix(doubleArray27);
        com.operations.Matrix.Matrix matrix29 = com.operations.Matrix.MatrixOperations.transpose(matrix28);
        com.operations.Matrix.Matrix matrix32 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0L, (double) (byte) 10);
        int int33 = matrix32.getRows();
        com.operations.Matrix.Matrix matrix39 = com.operations.Matrix.MatrixUtils.generateRandomMatrix(100, (int) (byte) 1, (int) '#', (int) '#', 1L);
        boolean boolean41 = com.operations.Matrix.MatrixUtils.compare(matrix32, matrix39, (double) 1.0f);
        com.operations.Matrix.Matrix matrix43 = com.operations.Matrix.MatrixOperations.scalarMultiply(matrix32, (double) 1L);
        matrix32.print();
        com.operations.Matrix.Matrix matrix45 = com.operations.Matrix.MatrixOperations.multiply(matrix29, matrix32);
        com.operations.Matrix.Matrix matrix46 = com.operations.Matrix.MatrixOperations.multiply(matrix4, matrix32);
        double[][] doubleArray47 = matrix4.getData();
        boolean boolean49 = com.operations.Matrix.MatrixUtils.compare(matrix2, matrix4, (double) (byte) 10);
        com.operations.Matrix.Matrix matrix51 = com.operations.Matrix.MatrixOperations.scalarMultiply(matrix2, 364.0054944640259d);
        org.junit.Assert.assertNotNull(matrix2);
        org.junit.Assert.assertNotNull(matrix4);
        org.junit.Assert.assertNotNull(matrix7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 2 + "'", int8 == 2);
        org.junit.Assert.assertNotNull(matrix10);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 10.0d + "'", double11 == 10.0d);
        org.junit.Assert.assertNotNull(matrix14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 2 + "'", int15 == 2);
        org.junit.Assert.assertNotNull(matrix17);
        org.junit.Assert.assertNotNull(matrix18);
        org.junit.Assert.assertNotNull(matrix19);
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertArrayEquals(doubleArray23, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertArrayEquals(doubleArray26, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertNotNull(matrix29);
        org.junit.Assert.assertNotNull(matrix32);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 2 + "'", int33 == 2);
        org.junit.Assert.assertNotNull(matrix39);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(matrix43);
        org.junit.Assert.assertNotNull(matrix45);
        org.junit.Assert.assertNotNull(matrix46);
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
        org.junit.Assert.assertNotNull(matrix51);
    }

    @Test
    public void test3859() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3859");
        com.operations.Matrix.Matrix matrix2 = com.operations.Matrix.MatrixTransformations.project2D(100.00499987500625d, 3.618031071604718d);
        org.junit.Assert.assertNotNull(matrix2);
    }

    @Test
    public void test3860() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3860");
        com.operations.Matrix.Matrix matrix1 = com.operations.Matrix.MatrixTransformations.rotate2D((double) 100L);
        com.operations.Matrix.Matrix matrix3 = com.operations.Matrix.MatrixOperations.scalarMultiply(matrix1, (double) ' ');
        // The following exception was thrown during execution in test generation
        try {
            matrix3.setValue((int) (short) 100, 32, 43.079766291379094d);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: Index 100 out of bounds for length 2");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(matrix1);
        org.junit.Assert.assertNotNull(matrix3);
    }

    @Test
    public void test3861() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3861");
        com.operations.Matrix.Matrix matrix1 = com.operations.Matrix.MatrixTransformations.rotate2D((double) '4');
        double[] doubleArray4 = new double[] { 10, 'a' };
        double[] doubleArray7 = new double[] { 10, 'a' };
        double[][] doubleArray8 = new double[][] { doubleArray4, doubleArray7 };
        com.operations.Matrix.Matrix matrix9 = new com.operations.Matrix.Matrix(doubleArray8);
        com.operations.Matrix.Matrix matrix10 = new com.operations.Matrix.Matrix(doubleArray8);
        com.operations.Matrix.Matrix matrix12 = com.operations.Matrix.MatrixTransformations.rotate2D((double) (short) 100);
        double[] doubleArray15 = new double[] { 137.90576492663388d, (byte) -1 };
        double[] doubleArray16 = com.operations.Matrix.MatrixSolver.solveGaussian(matrix12, doubleArray15);
        com.operations.Matrix.Matrix matrix17 = com.operations.Matrix.MatrixOperations.add(matrix10, matrix12);
        boolean boolean18 = com.operations.Matrix.MatrixUtils.isSymmetric(matrix17);
        boolean boolean20 = com.operations.Matrix.MatrixUtils.compare(matrix1, matrix17, 364.0054944640259d);
        com.operations.Matrix.Matrix matrix23 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0L, (double) (byte) 10);
        int int24 = matrix23.getRows();
        com.operations.Matrix.Matrix matrix26 = com.operations.Matrix.MatrixOperations.scalarMultiply(matrix23, (double) 2);
        matrix23.print();
        com.operations.Matrix.Matrix matrix28 = com.operations.Matrix.MatrixOperations.multiply(matrix17, matrix23);
        int int29 = matrix28.getRows();
        com.operations.Matrix.Matrix matrix32 = com.operations.Matrix.MatrixTransformations.scale2D(1.414213562373095d, 36.40054944640259d);
        com.operations.Matrix.Matrix matrix33 = com.operations.Matrix.MatrixOperations.transpose(matrix32);
        com.operations.Matrix.Matrix matrix34 = com.operations.Matrix.MatrixOperations.multiply(matrix28, matrix33);
        com.operations.Matrix.Matrix matrix37 = com.operations.Matrix.MatrixTransformations.project2D(0.0d, (double) (-1L));
        com.operations.Matrix.Matrix matrix38 = com.operations.Matrix.MatrixOperations.multiply(matrix28, matrix37);
        com.operations.Matrix.Matrix matrix40 = com.operations.Matrix.MatrixOperations.scalarMultiply(matrix38, (double) (short) 0);
        // The following exception was thrown during execution in test generation
        try {
            double double43 = matrix40.getValue((int) (byte) -1, 97);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(matrix1);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertArrayEquals(doubleArray4, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertArrayEquals(doubleArray7, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertNotNull(matrix12);
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertArrayEquals(doubleArray15, new double[] { 137.90576492663388d, (-1.0d) }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertArrayEquals(doubleArray16, new double[] { (-24.931892522286255d), (-135.63701830716116d) }, 1.0E-15);
        org.junit.Assert.assertNotNull(matrix17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertNotNull(matrix23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 2 + "'", int24 == 2);
        org.junit.Assert.assertNotNull(matrix26);
        org.junit.Assert.assertNotNull(matrix28);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 2 + "'", int29 == 2);
        org.junit.Assert.assertNotNull(matrix32);
        org.junit.Assert.assertNotNull(matrix33);
        org.junit.Assert.assertNotNull(matrix34);
        org.junit.Assert.assertNotNull(matrix37);
        org.junit.Assert.assertNotNull(matrix38);
        org.junit.Assert.assertNotNull(matrix40);
    }

    @Test
    public void test3862() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3862");
        com.operations.Matrix.Matrix matrix1 = com.operations.Matrix.MatrixTransformations.rotate2D(350.0d);
        com.operations.Matrix.Matrix matrix2 = com.operations.Matrix.MatrixDecompositions.choleskyDecomposition(matrix1);
        // The following exception was thrown during execution in test generation
        try {
            double double5 = matrix2.getValue(32, (int) (short) 10);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(matrix1);
        org.junit.Assert.assertNotNull(matrix2);
    }

    @Test
    public void test3863() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3863");
        com.operations.Matrix.Matrix matrix5 = com.operations.Matrix.MatrixUtils.generateRandomMatrix(35, (int) ' ', 10, (int) (byte) 1, (long) 97);
        org.junit.Assert.assertNotNull(matrix5);
    }

    @Test
    public void test3864() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3864");
        com.operations.Matrix.Matrix matrix2 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0L, (double) (byte) 10);
        double[] doubleArray5 = new double[] { 10, 'a' };
        double[] doubleArray8 = new double[] { 10, 'a' };
        double[][] doubleArray9 = new double[][] { doubleArray5, doubleArray8 };
        com.operations.Matrix.Matrix matrix10 = new com.operations.Matrix.Matrix(doubleArray9);
        int int11 = matrix10.getCols();
        int int12 = matrix10.getCols();
        int int13 = matrix10.getCols();
        com.operations.Matrix.Matrix[] matrixArray14 = com.operations.Matrix.MatrixDecompositions.luDecomposition(matrix10);
        com.operations.Matrix.Matrix matrix15 = com.operations.Matrix.MatrixOperations.multiply(matrix2, matrix10);
        com.operations.Matrix.Matrix matrix17 = com.operations.Matrix.MatrixTransformations.rotate2D((double) (short) 100);
        boolean boolean19 = com.operations.Matrix.MatrixUtils.compare(matrix10, matrix17, (double) (byte) 0);
        double[] doubleArray22 = new double[] { 10, 'a' };
        double[] doubleArray25 = new double[] { 10, 'a' };
        double[][] doubleArray26 = new double[][] { doubleArray22, doubleArray25 };
        com.operations.Matrix.Matrix matrix27 = new com.operations.Matrix.Matrix(doubleArray26);
        com.operations.Matrix.Matrix matrix28 = new com.operations.Matrix.Matrix(doubleArray26);
        com.operations.Matrix.Matrix matrix29 = new com.operations.Matrix.Matrix(doubleArray26);
        boolean boolean31 = com.operations.Matrix.MatrixUtils.compare(matrix10, matrix29, (double) (-1));
        double[] doubleArray34 = new double[] { 10, 'a' };
        double[] doubleArray37 = new double[] { 10, 'a' };
        double[][] doubleArray38 = new double[][] { doubleArray34, doubleArray37 };
        com.operations.Matrix.Matrix matrix39 = new com.operations.Matrix.Matrix(doubleArray38);
        com.operations.Matrix.Matrix matrix40 = new com.operations.Matrix.Matrix(doubleArray38);
        boolean boolean41 = com.operations.Matrix.MatrixUtils.isSquare(matrix40);
        com.operations.Matrix.Matrix matrix42 = com.operations.Matrix.MatrixOperations.multiply(matrix29, matrix40);
        boolean boolean43 = com.operations.Matrix.MatrixUtils.isSymmetric(matrix29);
        com.operations.Matrix.Matrix matrix45 = com.operations.Matrix.MatrixOperations.scalarMultiply(matrix29, (double) ' ');
        double[][] doubleArray46 = matrix29.getData();
        org.junit.Assert.assertNotNull(matrix2);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertArrayEquals(doubleArray5, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertArrayEquals(doubleArray8, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 2 + "'", int11 == 2);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 2 + "'", int12 == 2);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 2 + "'", int13 == 2);
        org.junit.Assert.assertNotNull(matrixArray14);
        org.junit.Assert.assertNotNull(matrix15);
        org.junit.Assert.assertNotNull(matrix17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertArrayEquals(doubleArray22, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertArrayEquals(doubleArray25, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertArrayEquals(doubleArray34, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertArrayEquals(doubleArray37, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertNotNull(matrix42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(matrix45);
        org.junit.Assert.assertNotNull(doubleArray46);
    }

    @Test
    public void test3865() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3865");
        com.operations.Matrix.Matrix matrix2 = com.operations.Matrix.MatrixTransformations.project2D(3200.015624961853d, 36.40054944640259d);
        org.junit.Assert.assertNotNull(matrix2);
    }

    @Test
    public void test3866() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3866");
        com.operations.Matrix.Matrix matrix5 = com.operations.Matrix.MatrixUtils.generateRandomMatrix((int) '#', (int) 'a', 1, (int) (short) 0, (long) 0);
        org.junit.Assert.assertNotNull(matrix5);
    }

    @Test
    public void test3867() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3867");
        // The following exception was thrown during execution in test generation
        try {
            com.operations.Matrix.Matrix matrix5 = com.operations.Matrix.MatrixUtils.generateRandomMatrix((int) ' ', (int) (short) -1, (int) '#', (int) '4', (long) (byte) 1);
            org.junit.Assert.fail("Expected exception of type java.lang.NegativeArraySizeException; message: -1");
        } catch (java.lang.NegativeArraySizeException e) {
            // Expected exception.
        }
    }

    @Test
    public void test3868() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3868");
        com.operations.Matrix.Matrix matrix4 = com.operations.Matrix.MatrixUtils.generateRandomMatrix((int) (short) 100, 1, (int) (byte) 1, 97);
        com.operations.Matrix.Matrix matrix5 = com.operations.Matrix.MatrixOperations.transpose(matrix4);
        // The following exception was thrown during execution in test generation
        try {
            double double8 = matrix5.getValue((int) '4', (int) (short) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(matrix4);
        org.junit.Assert.assertNotNull(matrix5);
    }

    @Test
    public void test3869() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3869");
        com.operations.Matrix.Matrix matrix2 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0L, (double) (byte) 10);
        double[] doubleArray5 = new double[] { 10, 'a' };
        double[] doubleArray8 = new double[] { 10, 'a' };
        double[][] doubleArray9 = new double[][] { doubleArray5, doubleArray8 };
        com.operations.Matrix.Matrix matrix10 = new com.operations.Matrix.Matrix(doubleArray9);
        int int11 = matrix10.getCols();
        int int12 = matrix10.getCols();
        int int13 = matrix10.getCols();
        com.operations.Matrix.Matrix[] matrixArray14 = com.operations.Matrix.MatrixDecompositions.luDecomposition(matrix10);
        com.operations.Matrix.Matrix matrix15 = com.operations.Matrix.MatrixOperations.multiply(matrix2, matrix10);
        com.operations.Matrix.Matrix matrix17 = com.operations.Matrix.MatrixTransformations.rotate2D((double) (short) 100);
        boolean boolean19 = com.operations.Matrix.MatrixUtils.compare(matrix10, matrix17, (double) (byte) 0);
        com.operations.Matrix.Matrix matrix21 = com.operations.Matrix.MatrixTransformations.rotate2D((double) 1.0f);
        com.operations.Matrix.Matrix matrix24 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0L, (double) (byte) 10);
        int int25 = matrix24.getRows();
        com.operations.Matrix.Matrix matrix27 = com.operations.Matrix.MatrixOperations.scalarMultiply(matrix24, (double) 2);
        double double28 = com.operations.Matrix.MatrixUtils.frobeniusNorm(matrix24);
        com.operations.Matrix.Matrix matrix31 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0L, (double) (byte) 10);
        int int32 = matrix31.getRows();
        com.operations.Matrix.Matrix matrix34 = com.operations.Matrix.MatrixOperations.scalarMultiply(matrix31, (double) 2);
        com.operations.Matrix.Matrix matrix35 = com.operations.Matrix.MatrixOperations.subtract(matrix24, matrix34);
        com.operations.Matrix.Matrix matrix36 = com.operations.Matrix.MatrixOperations.add(matrix21, matrix34);
        double[] doubleArray39 = new double[] { 10, 'a' };
        double[] doubleArray42 = new double[] { 10, 'a' };
        double[][] doubleArray43 = new double[][] { doubleArray39, doubleArray42 };
        com.operations.Matrix.Matrix matrix44 = new com.operations.Matrix.Matrix(doubleArray43);
        int int45 = matrix44.getCols();
        int int46 = matrix44.getCols();
        int int47 = matrix44.getCols();
        com.operations.Matrix.Matrix matrix53 = com.operations.Matrix.MatrixUtils.generateRandomMatrix(100, (int) (byte) 1, (int) '#', (int) '#', 1L);
        double double56 = matrix53.getValue((int) '4', 0);
        double double57 = com.operations.Matrix.MatrixUtils.frobeniusNorm(matrix53);
        boolean boolean58 = com.operations.Matrix.MatrixUtils.isSquare(matrix53);
        boolean boolean60 = com.operations.Matrix.MatrixUtils.compare(matrix44, matrix53, (double) 100L);
        com.operations.Matrix.Matrix matrix62 = com.operations.Matrix.MatrixTransformations.rotate2D((double) (short) 100);
        double[] doubleArray65 = new double[] { 137.90576492663388d, (byte) -1 };
        double[] doubleArray66 = com.operations.Matrix.MatrixSolver.solveGaussian(matrix62, doubleArray65);
        com.operations.Matrix.Matrix matrix69 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0L, (double) (byte) 10);
        double[] doubleArray72 = new double[] { 10, 'a' };
        double[] doubleArray75 = new double[] { 10, 'a' };
        double[][] doubleArray76 = new double[][] { doubleArray72, doubleArray75 };
        com.operations.Matrix.Matrix matrix77 = new com.operations.Matrix.Matrix(doubleArray76);
        int int78 = matrix77.getCols();
        int int79 = matrix77.getCols();
        int int80 = matrix77.getCols();
        com.operations.Matrix.Matrix[] matrixArray81 = com.operations.Matrix.MatrixDecompositions.luDecomposition(matrix77);
        com.operations.Matrix.Matrix matrix82 = com.operations.Matrix.MatrixOperations.multiply(matrix69, matrix77);
        boolean boolean84 = com.operations.Matrix.MatrixUtils.compare(matrix62, matrix69, (double) (-1L));
        com.operations.Matrix.Matrix matrix85 = com.operations.Matrix.MatrixOperations.subtract(matrix44, matrix69);
        com.operations.Matrix.Matrix matrix86 = com.operations.Matrix.MatrixOperations.add(matrix34, matrix69);
        com.operations.Matrix.Matrix matrix87 = com.operations.Matrix.MatrixOperations.add(matrix17, matrix86);
        com.operations.Matrix.Matrix matrix88 = com.operations.Matrix.MatrixOperations.transpose(matrix86);
        com.operations.Matrix.Matrix matrix91 = com.operations.Matrix.MatrixTransformations.scale2D((double) 1L, 137.90576492663388d);
        com.operations.Matrix.Matrix matrix92 = com.operations.Matrix.MatrixOperations.transpose(matrix91);
        com.operations.Matrix.Matrix matrix93 = com.operations.Matrix.MatrixOperations.add(matrix86, matrix91);
        double double94 = com.operations.Matrix.MatrixUtils.frobeniusNorm(matrix93);
        org.junit.Assert.assertNotNull(matrix2);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertArrayEquals(doubleArray5, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertArrayEquals(doubleArray8, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 2 + "'", int11 == 2);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 2 + "'", int12 == 2);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 2 + "'", int13 == 2);
        org.junit.Assert.assertNotNull(matrixArray14);
        org.junit.Assert.assertNotNull(matrix15);
        org.junit.Assert.assertNotNull(matrix17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(matrix21);
        org.junit.Assert.assertNotNull(matrix24);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 2 + "'", int25 == 2);
        org.junit.Assert.assertNotNull(matrix27);
        org.junit.Assert.assertTrue("'" + double28 + "' != '" + 10.0d + "'", double28 == 10.0d);
        org.junit.Assert.assertNotNull(matrix31);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 2 + "'", int32 == 2);
        org.junit.Assert.assertNotNull(matrix34);
        org.junit.Assert.assertNotNull(matrix35);
        org.junit.Assert.assertNotNull(matrix36);
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertArrayEquals(doubleArray39, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertArrayEquals(doubleArray42, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 2 + "'", int45 == 2);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 2 + "'", int46 == 2);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 2 + "'", int47 == 2);
        org.junit.Assert.assertNotNull(matrix53);
        org.junit.Assert.assertTrue("'" + double56 + "' != '" + 35.0d + "'", double56 == 35.0d);
        org.junit.Assert.assertTrue("'" + double57 + "' != '" + 350.0d + "'", double57 == 350.0d);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertNotNull(matrix62);
        org.junit.Assert.assertNotNull(doubleArray65);
        org.junit.Assert.assertArrayEquals(doubleArray65, new double[] { 137.90576492663388d, (-1.0d) }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray66);
        org.junit.Assert.assertArrayEquals(doubleArray66, new double[] { (-24.931892522286255d), (-135.63701830716116d) }, 1.0E-15);
        org.junit.Assert.assertNotNull(matrix69);
        org.junit.Assert.assertNotNull(doubleArray72);
        org.junit.Assert.assertArrayEquals(doubleArray72, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray75);
        org.junit.Assert.assertArrayEquals(doubleArray75, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray76);
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + 2 + "'", int78 == 2);
        org.junit.Assert.assertTrue("'" + int79 + "' != '" + 2 + "'", int79 == 2);
        org.junit.Assert.assertTrue("'" + int80 + "' != '" + 2 + "'", int80 == 2);
        org.junit.Assert.assertNotNull(matrixArray81);
        org.junit.Assert.assertNotNull(matrix82);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
        org.junit.Assert.assertNotNull(matrix85);
        org.junit.Assert.assertNotNull(matrix86);
        org.junit.Assert.assertNotNull(matrix87);
        org.junit.Assert.assertNotNull(matrix88);
        org.junit.Assert.assertNotNull(matrix91);
        org.junit.Assert.assertNotNull(matrix92);
        org.junit.Assert.assertNotNull(matrix93);
        org.junit.Assert.assertTrue("'" + double94 + "' != '" + 167.9087427610547d + "'", double94 == 167.9087427610547d);
    }

    @Test
    public void test3870() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3870");
        com.operations.Matrix.Matrix matrix2 = new com.operations.Matrix.Matrix((int) 'a', (int) (short) 100);
        double double3 = com.operations.Matrix.MatrixUtils.frobeniusNorm(matrix2);
        int int4 = matrix2.getRows();
        // The following exception was thrown during execution in test generation
        try {
            com.operations.Matrix.Matrix[] matrixArray5 = com.operations.Matrix.MatrixDecompositions.luDecomposition(matrix2);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Matrix must be square for LU decomposition.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + 0.0d + "'", double3 == 0.0d);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 97 + "'", int4 == 97);
    }

    @Test
    public void test3871() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3871");
        com.operations.Matrix.Matrix matrix4 = com.operations.Matrix.MatrixUtils.generateRandomMatrix((int) ' ', 100, (int) ' ', 1);
        // The following exception was thrown during execution in test generation
        try {
            com.operations.Matrix.Matrix matrix5 = com.operations.Matrix.MatrixDecompositions.choleskyDecomposition(matrix4);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Matrix must be square for Cholesky decomposition.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(matrix4);
    }

    @Test
    public void test3872() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3872");
        com.operations.Matrix.Matrix matrix1 = com.operations.Matrix.MatrixTransformations.rotate2D((double) (byte) 100);
        com.operations.Matrix.Matrix matrix4 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0L, (double) (byte) 10);
        double[] doubleArray7 = new double[] { 10, 'a' };
        double[] doubleArray10 = new double[] { 10, 'a' };
        double[][] doubleArray11 = new double[][] { doubleArray7, doubleArray10 };
        com.operations.Matrix.Matrix matrix12 = new com.operations.Matrix.Matrix(doubleArray11);
        int int13 = matrix12.getCols();
        int int14 = matrix12.getCols();
        int int15 = matrix12.getCols();
        com.operations.Matrix.Matrix[] matrixArray16 = com.operations.Matrix.MatrixDecompositions.luDecomposition(matrix12);
        com.operations.Matrix.Matrix matrix17 = com.operations.Matrix.MatrixOperations.multiply(matrix4, matrix12);
        com.operations.Matrix.Matrix matrix19 = com.operations.Matrix.MatrixTransformations.rotate2D((double) (short) 100);
        boolean boolean21 = com.operations.Matrix.MatrixUtils.compare(matrix12, matrix19, (double) (byte) 0);
        com.operations.Matrix.Matrix[] matrixArray22 = com.operations.Matrix.MatrixDecompositions.luDecomposition(matrix12);
        com.operations.Matrix.Matrix matrix23 = com.operations.Matrix.MatrixDecompositions.choleskyDecomposition(matrix12);
        boolean boolean25 = com.operations.Matrix.MatrixUtils.compare(matrix1, matrix12, 350.0d);
        com.operations.Matrix.Matrix matrix27 = com.operations.Matrix.MatrixOperations.scalarMultiply(matrix12, (double) (-1));
        int int28 = matrix27.getCols();
        org.junit.Assert.assertNotNull(matrix1);
        org.junit.Assert.assertNotNull(matrix4);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertArrayEquals(doubleArray7, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertArrayEquals(doubleArray10, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 2 + "'", int13 == 2);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 2 + "'", int14 == 2);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 2 + "'", int15 == 2);
        org.junit.Assert.assertNotNull(matrixArray16);
        org.junit.Assert.assertNotNull(matrix17);
        org.junit.Assert.assertNotNull(matrix19);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(matrixArray22);
        org.junit.Assert.assertNotNull(matrix23);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertNotNull(matrix27);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 2 + "'", int28 == 2);
    }

    @Test
    public void test3873() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3873");
        com.operations.Matrix.Matrix matrix2 = com.operations.Matrix.MatrixTransformations.project2D(260.95643973734866d, 137.15495886388925d);
        double[][] doubleArray3 = matrix2.getData();
        com.operations.Matrix.Matrix matrix6 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0L, (double) (byte) 10);
        int int7 = matrix6.getRows();
        com.operations.Matrix.Matrix matrix9 = com.operations.Matrix.MatrixOperations.scalarMultiply(matrix6, (double) 2);
        matrix6.print();
        com.operations.Matrix.Matrix matrix16 = com.operations.Matrix.MatrixUtils.generateRandomMatrix((int) (short) 10, (int) (short) 100, (int) (byte) -1, (-1), (long) (byte) 10);
        boolean boolean18 = com.operations.Matrix.MatrixUtils.compare(matrix6, matrix16, (double) (short) 10);
        boolean boolean20 = com.operations.Matrix.MatrixUtils.compare(matrix2, matrix6, (double) 100L);
        com.operations.Matrix.Matrix matrix21 = com.operations.Matrix.MatrixOperations.transpose(matrix6);
        boolean boolean22 = com.operations.Matrix.MatrixUtils.isSquare(matrix21);
        org.junit.Assert.assertNotNull(matrix2);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertNotNull(matrix6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 2 + "'", int7 == 2);
        org.junit.Assert.assertNotNull(matrix9);
        org.junit.Assert.assertNotNull(matrix16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(matrix21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
    }

    @Test
    public void test3874() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3874");
        com.operations.Matrix.Matrix matrix2 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0L, (double) (byte) 10);
        int int3 = matrix2.getRows();
        com.operations.Matrix.Matrix matrix5 = com.operations.Matrix.MatrixOperations.scalarMultiply(matrix2, (double) 2);
        double double6 = com.operations.Matrix.MatrixUtils.frobeniusNorm(matrix2);
        com.operations.Matrix.Matrix matrix9 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0L, (double) (byte) 10);
        int int10 = matrix9.getRows();
        com.operations.Matrix.Matrix matrix12 = com.operations.Matrix.MatrixOperations.scalarMultiply(matrix9, (double) 2);
        com.operations.Matrix.Matrix matrix13 = com.operations.Matrix.MatrixOperations.subtract(matrix2, matrix12);
        com.operations.Matrix.Matrix matrix15 = com.operations.Matrix.MatrixTransformations.rotate2D((double) (short) 100);
        double[] doubleArray18 = new double[] { 137.90576492663388d, (byte) -1 };
        double[] doubleArray19 = com.operations.Matrix.MatrixSolver.solveGaussian(matrix15, doubleArray18);
        com.operations.Matrix.Matrix matrix22 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0L, (double) (byte) 10);
        double[] doubleArray25 = new double[] { 10, 'a' };
        double[] doubleArray28 = new double[] { 10, 'a' };
        double[][] doubleArray29 = new double[][] { doubleArray25, doubleArray28 };
        com.operations.Matrix.Matrix matrix30 = new com.operations.Matrix.Matrix(doubleArray29);
        int int31 = matrix30.getCols();
        int int32 = matrix30.getCols();
        int int33 = matrix30.getCols();
        com.operations.Matrix.Matrix[] matrixArray34 = com.operations.Matrix.MatrixDecompositions.luDecomposition(matrix30);
        com.operations.Matrix.Matrix matrix35 = com.operations.Matrix.MatrixOperations.multiply(matrix22, matrix30);
        boolean boolean37 = com.operations.Matrix.MatrixUtils.compare(matrix15, matrix22, (double) (-1L));
        double[][] doubleArray38 = matrix15.getData();
        com.operations.Matrix.Matrix matrix41 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0L, (double) 10L);
        boolean boolean43 = com.operations.Matrix.MatrixUtils.compare(matrix15, matrix41, 146.4308710620817d);
        com.operations.Matrix.Matrix matrix44 = com.operations.Matrix.MatrixOperations.subtract(matrix13, matrix41);
        com.operations.Matrix.Matrix matrix47 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0L, (double) (byte) 10);
        double[] doubleArray50 = new double[] { 10, 'a' };
        double[] doubleArray53 = new double[] { 10, 'a' };
        double[][] doubleArray54 = new double[][] { doubleArray50, doubleArray53 };
        com.operations.Matrix.Matrix matrix55 = new com.operations.Matrix.Matrix(doubleArray54);
        int int56 = matrix55.getCols();
        int int57 = matrix55.getCols();
        int int58 = matrix55.getCols();
        com.operations.Matrix.Matrix[] matrixArray59 = com.operations.Matrix.MatrixDecompositions.luDecomposition(matrix55);
        com.operations.Matrix.Matrix matrix60 = com.operations.Matrix.MatrixOperations.multiply(matrix47, matrix55);
        com.operations.Matrix.Matrix matrix62 = com.operations.Matrix.MatrixTransformations.rotate2D((double) (short) 100);
        boolean boolean64 = com.operations.Matrix.MatrixUtils.compare(matrix55, matrix62, (double) (byte) 0);
        com.operations.Matrix.Matrix[] matrixArray65 = com.operations.Matrix.MatrixDecompositions.luDecomposition(matrix55);
        com.operations.Matrix.Matrix matrix66 = com.operations.Matrix.MatrixOperations.transpose(matrix55);
        com.operations.Matrix.Matrix matrix69 = com.operations.Matrix.MatrixTransformations.scale2D((double) 1.0f, (double) 1);
        com.operations.Matrix.Matrix matrix71 = com.operations.Matrix.MatrixTransformations.rotate2D((double) 1.0f);
        com.operations.Matrix.Matrix matrix74 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0L, (double) (byte) 10);
        int int75 = matrix74.getRows();
        com.operations.Matrix.Matrix matrix77 = com.operations.Matrix.MatrixOperations.scalarMultiply(matrix74, (double) 2);
        double double78 = com.operations.Matrix.MatrixUtils.frobeniusNorm(matrix74);
        com.operations.Matrix.Matrix matrix81 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0L, (double) (byte) 10);
        int int82 = matrix81.getRows();
        com.operations.Matrix.Matrix matrix84 = com.operations.Matrix.MatrixOperations.scalarMultiply(matrix81, (double) 2);
        com.operations.Matrix.Matrix matrix85 = com.operations.Matrix.MatrixOperations.subtract(matrix74, matrix84);
        com.operations.Matrix.Matrix matrix86 = com.operations.Matrix.MatrixOperations.add(matrix71, matrix84);
        boolean boolean88 = com.operations.Matrix.MatrixUtils.compare(matrix69, matrix71, (double) (byte) -1);
        com.operations.Matrix.Matrix matrix89 = com.operations.Matrix.MatrixOperations.subtract(matrix66, matrix69);
        matrix66.print();
        com.operations.Matrix.Matrix matrix91 = com.operations.Matrix.MatrixOperations.add(matrix41, matrix66);
        com.operations.Matrix.Matrix[] matrixArray92 = com.operations.Matrix.MatrixDecompositions.luDecomposition(matrix91);
        int int93 = matrix91.getRows();
        double double94 = com.operations.Matrix.MatrixUtils.frobeniusNorm(matrix91);
        com.operations.Matrix.Matrix matrix96 = com.operations.Matrix.MatrixOperations.scalarMultiply(matrix91, 41.14922324710797d);
        org.junit.Assert.assertNotNull(matrix2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 2 + "'", int3 == 2);
        org.junit.Assert.assertNotNull(matrix5);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 10.0d + "'", double6 == 10.0d);
        org.junit.Assert.assertNotNull(matrix9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 2 + "'", int10 == 2);
        org.junit.Assert.assertNotNull(matrix12);
        org.junit.Assert.assertNotNull(matrix13);
        org.junit.Assert.assertNotNull(matrix15);
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertArrayEquals(doubleArray18, new double[] { 137.90576492663388d, (-1.0d) }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertArrayEquals(doubleArray19, new double[] { (-24.931892522286255d), (-135.63701830716116d) }, 1.0E-15);
        org.junit.Assert.assertNotNull(matrix22);
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertArrayEquals(doubleArray25, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertArrayEquals(doubleArray28, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 2 + "'", int31 == 2);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 2 + "'", int32 == 2);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 2 + "'", int33 == 2);
        org.junit.Assert.assertNotNull(matrixArray34);
        org.junit.Assert.assertNotNull(matrix35);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertNotNull(matrix41);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertNotNull(matrix44);
        org.junit.Assert.assertNotNull(matrix47);
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertArrayEquals(doubleArray50, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertArrayEquals(doubleArray53, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray54);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 2 + "'", int56 == 2);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 2 + "'", int57 == 2);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 2 + "'", int58 == 2);
        org.junit.Assert.assertNotNull(matrixArray59);
        org.junit.Assert.assertNotNull(matrix60);
        org.junit.Assert.assertNotNull(matrix62);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertNotNull(matrixArray65);
        org.junit.Assert.assertNotNull(matrix66);
        org.junit.Assert.assertNotNull(matrix69);
        org.junit.Assert.assertNotNull(matrix71);
        org.junit.Assert.assertNotNull(matrix74);
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + 2 + "'", int75 == 2);
        org.junit.Assert.assertNotNull(matrix77);
        org.junit.Assert.assertTrue("'" + double78 + "' != '" + 10.0d + "'", double78 == 10.0d);
        org.junit.Assert.assertNotNull(matrix81);
        org.junit.Assert.assertTrue("'" + int82 + "' != '" + 2 + "'", int82 == 2);
        org.junit.Assert.assertNotNull(matrix84);
        org.junit.Assert.assertNotNull(matrix85);
        org.junit.Assert.assertNotNull(matrix86);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
        org.junit.Assert.assertNotNull(matrix89);
        org.junit.Assert.assertNotNull(matrix91);
        org.junit.Assert.assertNotNull(matrixArray92);
        org.junit.Assert.assertTrue("'" + int93 + "' != '" + 2 + "'", int93 == 2);
        org.junit.Assert.assertTrue("'" + double94 + "' != '" + 145.11374848717816d + "'", double94 == 145.11374848717816d);
        org.junit.Assert.assertNotNull(matrix96);
    }

    @Test
    public void test3875() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3875");
        // The following exception was thrown during execution in test generation
        try {
            com.operations.Matrix.Matrix matrix5 = com.operations.Matrix.MatrixUtils.generateRandomMatrix(0, 100, (int) (byte) 0, 97, (long) (byte) 0);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
    }

    @Test
    public void test3876() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3876");
        com.operations.Matrix.Matrix matrix2 = com.operations.Matrix.MatrixTransformations.scale2D(1.969615506024416d, 640031.99920004d);
        double[] doubleArray5 = new double[] { 10, 'a' };
        double[] doubleArray8 = new double[] { 10, 'a' };
        double[][] doubleArray9 = new double[][] { doubleArray5, doubleArray8 };
        com.operations.Matrix.Matrix matrix10 = new com.operations.Matrix.Matrix(doubleArray9);
        com.operations.Matrix.Matrix matrix11 = new com.operations.Matrix.Matrix(doubleArray9);
        boolean boolean12 = com.operations.Matrix.MatrixUtils.isSquare(matrix11);
        double[] doubleArray15 = new double[] { 10, 'a' };
        double[] doubleArray18 = new double[] { 10, 'a' };
        double[][] doubleArray19 = new double[][] { doubleArray15, doubleArray18 };
        com.operations.Matrix.Matrix matrix20 = new com.operations.Matrix.Matrix(doubleArray19);
        int int21 = matrix20.getCols();
        int int22 = matrix20.getCols();
        matrix20.print();
        double[] doubleArray26 = new double[] { 10, 'a' };
        double[] doubleArray29 = new double[] { 10, 'a' };
        double[][] doubleArray30 = new double[][] { doubleArray26, doubleArray29 };
        com.operations.Matrix.Matrix matrix31 = new com.operations.Matrix.Matrix(doubleArray30);
        boolean boolean33 = com.operations.Matrix.MatrixUtils.compare(matrix20, matrix31, (double) (-1));
        com.operations.Matrix.Matrix matrix34 = com.operations.Matrix.MatrixOperations.subtract(matrix11, matrix31);
        com.operations.Matrix.Matrix matrix36 = com.operations.Matrix.MatrixOperations.scalarMultiply(matrix11, (double) 0.0f);
        matrix11.print();
        com.operations.Matrix.Matrix matrix38 = com.operations.Matrix.MatrixOperations.subtract(matrix2, matrix11);
        double double39 = com.operations.Matrix.MatrixUtils.frobeniusNorm(matrix11);
        org.junit.Assert.assertNotNull(matrix2);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertArrayEquals(doubleArray5, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertArrayEquals(doubleArray8, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertArrayEquals(doubleArray15, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertArrayEquals(doubleArray18, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 2 + "'", int21 == 2);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 2 + "'", int22 == 2);
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertArrayEquals(doubleArray26, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertArrayEquals(doubleArray29, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(matrix34);
        org.junit.Assert.assertNotNull(matrix36);
        org.junit.Assert.assertNotNull(matrix38);
        org.junit.Assert.assertTrue("'" + double39 + "' != '" + 137.90576492663388d + "'", double39 == 137.90576492663388d);
    }

    @Test
    public void test3877() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3877");
        double[] doubleArray2 = new double[] { 10, 'a' };
        double[] doubleArray5 = new double[] { 10, 'a' };
        double[][] doubleArray6 = new double[][] { doubleArray2, doubleArray5 };
        com.operations.Matrix.Matrix matrix7 = new com.operations.Matrix.Matrix(doubleArray6);
        int int8 = matrix7.getCols();
        int int9 = matrix7.getCols();
        int int10 = matrix7.getCols();
        com.operations.Matrix.Matrix matrix16 = com.operations.Matrix.MatrixUtils.generateRandomMatrix(100, (int) (byte) 1, (int) '#', (int) '#', 1L);
        double double19 = matrix16.getValue((int) '4', 0);
        double double20 = com.operations.Matrix.MatrixUtils.frobeniusNorm(matrix16);
        boolean boolean21 = com.operations.Matrix.MatrixUtils.isSquare(matrix16);
        boolean boolean23 = com.operations.Matrix.MatrixUtils.compare(matrix7, matrix16, (double) 100L);
        com.operations.Matrix.Matrix matrix24 = com.operations.Matrix.MatrixDecompositions.choleskyDecomposition(matrix7);
        int int25 = matrix7.getRows();
        com.operations.Matrix.Matrix matrix28 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0L, (double) (byte) 10);
        int int29 = matrix28.getRows();
        com.operations.Matrix.Matrix matrix31 = com.operations.Matrix.MatrixOperations.scalarMultiply(matrix28, (double) 2);
        double double32 = com.operations.Matrix.MatrixUtils.frobeniusNorm(matrix28);
        com.operations.Matrix.Matrix matrix35 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0L, (double) (byte) 10);
        double[] doubleArray38 = new double[] { 10, 'a' };
        double[] doubleArray41 = new double[] { 10, 'a' };
        double[][] doubleArray42 = new double[][] { doubleArray38, doubleArray41 };
        com.operations.Matrix.Matrix matrix43 = new com.operations.Matrix.Matrix(doubleArray42);
        int int44 = matrix43.getCols();
        int int45 = matrix43.getCols();
        int int46 = matrix43.getCols();
        com.operations.Matrix.Matrix[] matrixArray47 = com.operations.Matrix.MatrixDecompositions.luDecomposition(matrix43);
        com.operations.Matrix.Matrix matrix48 = com.operations.Matrix.MatrixOperations.multiply(matrix35, matrix43);
        com.operations.Matrix.Matrix matrix50 = com.operations.Matrix.MatrixTransformations.rotate2D((double) (short) 100);
        boolean boolean52 = com.operations.Matrix.MatrixUtils.compare(matrix43, matrix50, (double) (byte) 0);
        com.operations.Matrix.Matrix[] matrixArray53 = com.operations.Matrix.MatrixDecompositions.luDecomposition(matrix43);
        com.operations.Matrix.Matrix matrix54 = com.operations.Matrix.MatrixDecompositions.choleskyDecomposition(matrix43);
        int int55 = matrix43.getCols();
        boolean boolean57 = com.operations.Matrix.MatrixUtils.compare(matrix28, matrix43, 260.95643973734866d);
        com.operations.Matrix.Matrix matrix58 = com.operations.Matrix.MatrixOperations.multiply(matrix7, matrix43);
        com.operations.Matrix.Matrix matrix59 = com.operations.Matrix.MatrixDecompositions.choleskyDecomposition(matrix43);
        boolean boolean60 = com.operations.Matrix.MatrixUtils.isSquare(matrix59);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertArrayEquals(doubleArray2, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertArrayEquals(doubleArray5, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 2 + "'", int8 == 2);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 2 + "'", int9 == 2);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 2 + "'", int10 == 2);
        org.junit.Assert.assertNotNull(matrix16);
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 35.0d + "'", double19 == 35.0d);
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 350.0d + "'", double20 == 350.0d);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(matrix24);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 2 + "'", int25 == 2);
        org.junit.Assert.assertNotNull(matrix28);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 2 + "'", int29 == 2);
        org.junit.Assert.assertNotNull(matrix31);
        org.junit.Assert.assertTrue("'" + double32 + "' != '" + 10.0d + "'", double32 == 10.0d);
        org.junit.Assert.assertNotNull(matrix35);
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertArrayEquals(doubleArray38, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertArrayEquals(doubleArray41, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 2 + "'", int44 == 2);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 2 + "'", int45 == 2);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 2 + "'", int46 == 2);
        org.junit.Assert.assertNotNull(matrixArray47);
        org.junit.Assert.assertNotNull(matrix48);
        org.junit.Assert.assertNotNull(matrix50);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(matrixArray53);
        org.junit.Assert.assertNotNull(matrix54);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 2 + "'", int55 == 2);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + true + "'", boolean57 == true);
        org.junit.Assert.assertNotNull(matrix58);
        org.junit.Assert.assertNotNull(matrix59);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + true + "'", boolean60 == true);
    }

    @Test
    public void test3878() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3878");
        com.operations.Matrix.Matrix matrix2 = com.operations.Matrix.MatrixTransformations.project2D((double) (-1L), (-1.0d));
        com.operations.Matrix.Matrix matrix5 = com.operations.Matrix.MatrixTransformations.scale2D((double) 1.0f, (double) 1);
        com.operations.Matrix.Matrix matrix7 = com.operations.Matrix.MatrixTransformations.rotate2D((double) 1.0f);
        com.operations.Matrix.Matrix matrix10 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0L, (double) (byte) 10);
        int int11 = matrix10.getRows();
        com.operations.Matrix.Matrix matrix13 = com.operations.Matrix.MatrixOperations.scalarMultiply(matrix10, (double) 2);
        double double14 = com.operations.Matrix.MatrixUtils.frobeniusNorm(matrix10);
        com.operations.Matrix.Matrix matrix17 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0L, (double) (byte) 10);
        int int18 = matrix17.getRows();
        com.operations.Matrix.Matrix matrix20 = com.operations.Matrix.MatrixOperations.scalarMultiply(matrix17, (double) 2);
        com.operations.Matrix.Matrix matrix21 = com.operations.Matrix.MatrixOperations.subtract(matrix10, matrix20);
        com.operations.Matrix.Matrix matrix22 = com.operations.Matrix.MatrixOperations.add(matrix7, matrix20);
        boolean boolean24 = com.operations.Matrix.MatrixUtils.compare(matrix5, matrix7, (double) (byte) -1);
        com.operations.Matrix.Matrix matrix25 = com.operations.Matrix.MatrixOperations.transpose(matrix7);
        com.operations.Matrix.Matrix matrix28 = com.operations.Matrix.MatrixTransformations.project2D((double) 10L, 10.0d);
        com.operations.Matrix.Matrix matrix30 = com.operations.Matrix.MatrixTransformations.rotate2D((double) (short) 100);
        double[] doubleArray33 = new double[] { 137.90576492663388d, (byte) -1 };
        double[] doubleArray34 = com.operations.Matrix.MatrixSolver.solveGaussian(matrix30, doubleArray33);
        com.operations.Matrix.Matrix matrix37 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0L, (double) (byte) 10);
        double[] doubleArray40 = new double[] { 10, 'a' };
        double[] doubleArray43 = new double[] { 10, 'a' };
        double[][] doubleArray44 = new double[][] { doubleArray40, doubleArray43 };
        com.operations.Matrix.Matrix matrix45 = new com.operations.Matrix.Matrix(doubleArray44);
        int int46 = matrix45.getCols();
        int int47 = matrix45.getCols();
        int int48 = matrix45.getCols();
        com.operations.Matrix.Matrix[] matrixArray49 = com.operations.Matrix.MatrixDecompositions.luDecomposition(matrix45);
        com.operations.Matrix.Matrix matrix50 = com.operations.Matrix.MatrixOperations.multiply(matrix37, matrix45);
        boolean boolean52 = com.operations.Matrix.MatrixUtils.compare(matrix30, matrix37, (double) (-1L));
        double[][] doubleArray53 = matrix30.getData();
        com.operations.Matrix.Matrix matrix55 = com.operations.Matrix.MatrixTransformations.rotate2D((double) (short) 100);
        double[] doubleArray58 = new double[] { 137.90576492663388d, (byte) -1 };
        double[] doubleArray59 = com.operations.Matrix.MatrixSolver.solveGaussian(matrix55, doubleArray58);
        double[] doubleArray60 = com.operations.Matrix.MatrixSolver.solveGaussian(matrix30, doubleArray58);
        double[] doubleArray61 = com.operations.Matrix.MatrixSolver.solveGaussian(matrix28, doubleArray60);
        double[] doubleArray62 = com.operations.Matrix.MatrixSolver.solveGaussian(matrix7, doubleArray61);
        double[] doubleArray63 = com.operations.Matrix.MatrixSolver.solveGaussian(matrix2, doubleArray61);
        double[][] doubleArray64 = matrix2.getData();
        com.operations.Matrix.Matrix matrix65 = new com.operations.Matrix.Matrix(doubleArray64);
        com.operations.Matrix.Matrix matrix66 = new com.operations.Matrix.Matrix(doubleArray64);
        org.junit.Assert.assertNotNull(matrix2);
        org.junit.Assert.assertNotNull(matrix5);
        org.junit.Assert.assertNotNull(matrix7);
        org.junit.Assert.assertNotNull(matrix10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 2 + "'", int11 == 2);
        org.junit.Assert.assertNotNull(matrix13);
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 10.0d + "'", double14 == 10.0d);
        org.junit.Assert.assertNotNull(matrix17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 2 + "'", int18 == 2);
        org.junit.Assert.assertNotNull(matrix20);
        org.junit.Assert.assertNotNull(matrix21);
        org.junit.Assert.assertNotNull(matrix22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(matrix25);
        org.junit.Assert.assertNotNull(matrix28);
        org.junit.Assert.assertNotNull(matrix30);
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertArrayEquals(doubleArray33, new double[] { 137.90576492663388d, (-1.0d) }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertArrayEquals(doubleArray34, new double[] { (-24.931892522286255d), (-135.63701830716116d) }, 1.0E-15);
        org.junit.Assert.assertNotNull(matrix37);
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertArrayEquals(doubleArray40, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertArrayEquals(doubleArray43, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 2 + "'", int46 == 2);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 2 + "'", int47 == 2);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 2 + "'", int48 == 2);
        org.junit.Assert.assertNotNull(matrixArray49);
        org.junit.Assert.assertNotNull(matrix50);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertNotNull(matrix55);
        org.junit.Assert.assertNotNull(doubleArray58);
        org.junit.Assert.assertArrayEquals(doubleArray58, new double[] { 137.90576492663388d, (-1.0d) }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray59);
        org.junit.Assert.assertArrayEquals(doubleArray59, new double[] { (-24.931892522286255d), (-135.63701830716116d) }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray60);
        org.junit.Assert.assertArrayEquals(doubleArray60, new double[] { (-24.931892522286255d), (-135.63701830716116d) }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray61);
        org.junit.Assert.assertArrayEquals(doubleArray61, new double[] { (-2.4931892522286256d), (-13.563701830716116d) }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray62);
        org.junit.Assert.assertArrayEquals(doubleArray62, new double[] { (-2.7295287645732618d), (-13.518123861075072d) }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray63);
        org.junit.Assert.assertArrayEquals(doubleArray63, new double[] { 2.4931892522286256d, 13.563701830716116d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray64);
    }

    @Test
    public void test3879() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3879");
        double[] doubleArray2 = new double[] { 10, 'a' };
        double[] doubleArray5 = new double[] { 10, 'a' };
        double[][] doubleArray6 = new double[][] { doubleArray2, doubleArray5 };
        com.operations.Matrix.Matrix matrix7 = new com.operations.Matrix.Matrix(doubleArray6);
        int int8 = matrix7.getCols();
        int int9 = matrix7.getCols();
        int int10 = matrix7.getCols();
        com.operations.Matrix.Matrix matrix16 = com.operations.Matrix.MatrixUtils.generateRandomMatrix(100, (int) (byte) 1, (int) '#', (int) '#', 1L);
        double double19 = matrix16.getValue((int) '4', 0);
        double double20 = com.operations.Matrix.MatrixUtils.frobeniusNorm(matrix16);
        boolean boolean21 = com.operations.Matrix.MatrixUtils.isSquare(matrix16);
        boolean boolean23 = com.operations.Matrix.MatrixUtils.compare(matrix7, matrix16, (double) 100L);
        double[][] doubleArray24 = matrix7.getData();
        com.operations.Matrix.Matrix matrix25 = com.operations.Matrix.MatrixDecompositions.choleskyDecomposition(matrix7);
        double[] doubleArray28 = new double[] { 10, 'a' };
        double[] doubleArray31 = new double[] { 10, 'a' };
        double[][] doubleArray32 = new double[][] { doubleArray28, doubleArray31 };
        com.operations.Matrix.Matrix matrix33 = new com.operations.Matrix.Matrix(doubleArray32);
        int int34 = matrix33.getCols();
        int int35 = matrix33.getCols();
        matrix33.print();
        double[] doubleArray39 = new double[] { 10, 'a' };
        double[] doubleArray42 = new double[] { 10, 'a' };
        double[][] doubleArray43 = new double[][] { doubleArray39, doubleArray42 };
        com.operations.Matrix.Matrix matrix44 = new com.operations.Matrix.Matrix(doubleArray43);
        boolean boolean46 = com.operations.Matrix.MatrixUtils.compare(matrix33, matrix44, (double) (-1));
        com.operations.Matrix.Matrix matrix47 = com.operations.Matrix.MatrixDecompositions.choleskyDecomposition(matrix44);
        com.operations.Matrix.Matrix matrix49 = com.operations.Matrix.MatrixOperations.scalarMultiply(matrix47, 32.0d);
        com.operations.Matrix.Matrix matrix50 = com.operations.Matrix.MatrixDecompositions.choleskyDecomposition(matrix47);
        com.operations.Matrix.Matrix matrix51 = com.operations.Matrix.MatrixOperations.transpose(matrix50);
        com.operations.Matrix.Matrix matrix53 = com.operations.Matrix.MatrixOperations.scalarMultiply(matrix51, 260.95643973734866d);
        int int54 = matrix51.getCols();
        com.operations.Matrix.Matrix matrix57 = com.operations.Matrix.MatrixTransformations.scale2D((double) (byte) 1, 1363.6076983299943d);
        com.operations.Matrix.Matrix matrix60 = com.operations.Matrix.MatrixTransformations.project2D((double) 100.0f, (double) (short) -1);
        com.operations.Matrix.Matrix matrix62 = com.operations.Matrix.MatrixOperations.scalarMultiply(matrix60, (double) 0.0f);
        com.operations.Matrix.Matrix matrix65 = com.operations.Matrix.MatrixTransformations.scale2D((double) ' ', (double) 0L);
        double double66 = com.operations.Matrix.MatrixUtils.frobeniusNorm(matrix65);
        com.operations.Matrix.Matrix matrix68 = com.operations.Matrix.MatrixOperations.scalarMultiply(matrix65, (double) 10L);
        com.operations.Matrix.Matrix matrix69 = com.operations.Matrix.MatrixOperations.multiply(matrix60, matrix65);
        int int70 = matrix69.getCols();
        com.operations.Matrix.Matrix matrix71 = com.operations.Matrix.MatrixOperations.subtract(matrix57, matrix69);
        com.operations.Matrix.Matrix matrix74 = com.operations.Matrix.MatrixTransformations.project2D(10.0d, 1.4142135623730951d);
        int int75 = matrix74.getRows();
        com.operations.Matrix.Matrix matrix78 = com.operations.Matrix.MatrixTransformations.project2D((double) (short) 100, 35.0d);
        com.operations.Matrix.Matrix matrix80 = com.operations.Matrix.MatrixTransformations.rotate2D((double) (-1L));
        com.operations.Matrix.Matrix matrix82 = com.operations.Matrix.MatrixTransformations.rotate2D((double) (short) 100);
        double[] doubleArray85 = new double[] { 137.90576492663388d, (byte) -1 };
        double[] doubleArray86 = com.operations.Matrix.MatrixSolver.solveGaussian(matrix82, doubleArray85);
        double[] doubleArray87 = com.operations.Matrix.MatrixSolver.solveGaussian(matrix80, doubleArray85);
        double[] doubleArray88 = com.operations.Matrix.MatrixSolver.solveGaussian(matrix78, doubleArray87);
        double[] doubleArray89 = com.operations.Matrix.MatrixSolver.solveGaussian(matrix74, doubleArray87);
        double[] doubleArray90 = com.operations.Matrix.MatrixSolver.solveGaussian(matrix71, doubleArray89);
        double[] doubleArray91 = com.operations.Matrix.MatrixSolver.solveGaussian(matrix51, doubleArray89);
        // The following exception was thrown during execution in test generation
        try {
            double[] doubleArray92 = com.operations.Matrix.MatrixSolver.solveGaussian(matrix7, doubleArray91);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Matrix is singular or nearly singular.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertArrayEquals(doubleArray2, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertArrayEquals(doubleArray5, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 2 + "'", int8 == 2);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 2 + "'", int9 == 2);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 2 + "'", int10 == 2);
        org.junit.Assert.assertNotNull(matrix16);
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 35.0d + "'", double19 == 35.0d);
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 350.0d + "'", double20 == 350.0d);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertNotNull(matrix25);
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertArrayEquals(doubleArray28, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertArrayEquals(doubleArray31, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 2 + "'", int34 == 2);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 2 + "'", int35 == 2);
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertArrayEquals(doubleArray39, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertArrayEquals(doubleArray42, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(matrix47);
        org.junit.Assert.assertNotNull(matrix49);
        org.junit.Assert.assertNotNull(matrix50);
        org.junit.Assert.assertNotNull(matrix51);
        org.junit.Assert.assertNotNull(matrix53);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 2 + "'", int54 == 2);
        org.junit.Assert.assertNotNull(matrix57);
        org.junit.Assert.assertNotNull(matrix60);
        org.junit.Assert.assertNotNull(matrix62);
        org.junit.Assert.assertNotNull(matrix65);
        org.junit.Assert.assertTrue("'" + double66 + "' != '" + 32.0d + "'", double66 == 32.0d);
        org.junit.Assert.assertNotNull(matrix68);
        org.junit.Assert.assertNotNull(matrix69);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 2 + "'", int70 == 2);
        org.junit.Assert.assertNotNull(matrix71);
        org.junit.Assert.assertNotNull(matrix74);
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + 2 + "'", int75 == 2);
        org.junit.Assert.assertNotNull(matrix78);
        org.junit.Assert.assertNotNull(matrix80);
        org.junit.Assert.assertNotNull(matrix82);
        org.junit.Assert.assertNotNull(doubleArray85);
        org.junit.Assert.assertArrayEquals(doubleArray85, new double[] { 137.90576492663388d, (-1.0d) }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray86);
        org.junit.Assert.assertArrayEquals(doubleArray86, new double[] { (-24.931892522286255d), (-135.63701830716116d) }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray87);
        org.junit.Assert.assertArrayEquals(doubleArray87, new double[] { 137.90221361711127d, 1.4069397643877004d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray88);
        org.junit.Assert.assertArrayEquals(doubleArray88, new double[] { 1.3790221361711128d, 0.04019827898250573d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray89);
        org.junit.Assert.assertArrayEquals(doubleArray89, new double[] { 13.790221361711128d, 0.9948566481195463d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray90);
        org.junit.Assert.assertArrayEquals(doubleArray90, new double[] { (-0.004310791297815295d), 7.295768785538127E-4d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray91);
        org.junit.Assert.assertArrayEquals(doubleArray91, new double[] { 7.354138062827108d, 0.4006732923857876d }, 1.0E-15);
    }

    @Test
    public void test3880() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3880");
        com.operations.Matrix.Matrix matrix2 = com.operations.Matrix.MatrixTransformations.project2D(481.29607094437216d, 3.618031071604718d);
        org.junit.Assert.assertNotNull(matrix2);
    }

    @Test
    public void test3881() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3881");
        com.operations.Matrix.Matrix matrix0 = null;
        com.operations.Matrix.Matrix matrix3 = new com.operations.Matrix.Matrix((int) (byte) 0, (int) (short) 100);
        // The following exception was thrown during execution in test generation
        try {
            com.operations.Matrix.Matrix matrix4 = com.operations.Matrix.MatrixOperations.add(matrix0, matrix3);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test3882() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3882");
        com.operations.Matrix.Matrix matrix2 = com.operations.Matrix.MatrixTransformations.project2D((double) (byte) 100, 32.0d);
        boolean boolean3 = com.operations.Matrix.MatrixUtils.isSymmetric(matrix2);
        matrix2.print();
        com.operations.Matrix.Matrix matrix5 = com.operations.Matrix.MatrixOperations.transpose(matrix2);
        com.operations.Matrix.Matrix matrix6 = null;
        // The following exception was thrown during execution in test generation
        try {
            com.operations.Matrix.Matrix matrix7 = com.operations.Matrix.MatrixOperations.subtract(matrix2, matrix6);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(matrix2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNotNull(matrix5);
    }

    @Test
    public void test3883() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3883");
        double[] doubleArray2 = new double[] { 10, 'a' };
        double[] doubleArray5 = new double[] { 10, 'a' };
        double[][] doubleArray6 = new double[][] { doubleArray2, doubleArray5 };
        com.operations.Matrix.Matrix matrix7 = new com.operations.Matrix.Matrix(doubleArray6);
        com.operations.Matrix.Matrix matrix8 = new com.operations.Matrix.Matrix(doubleArray6);
        boolean boolean9 = com.operations.Matrix.MatrixUtils.isSquare(matrix8);
        double[] doubleArray12 = new double[] { 10, 'a' };
        double[] doubleArray15 = new double[] { 10, 'a' };
        double[][] doubleArray16 = new double[][] { doubleArray12, doubleArray15 };
        com.operations.Matrix.Matrix matrix17 = new com.operations.Matrix.Matrix(doubleArray16);
        int int18 = matrix17.getCols();
        int int19 = matrix17.getCols();
        matrix17.print();
        double[] doubleArray23 = new double[] { 10, 'a' };
        double[] doubleArray26 = new double[] { 10, 'a' };
        double[][] doubleArray27 = new double[][] { doubleArray23, doubleArray26 };
        com.operations.Matrix.Matrix matrix28 = new com.operations.Matrix.Matrix(doubleArray27);
        boolean boolean30 = com.operations.Matrix.MatrixUtils.compare(matrix17, matrix28, (double) (-1));
        com.operations.Matrix.Matrix matrix31 = com.operations.Matrix.MatrixOperations.subtract(matrix8, matrix28);
        com.operations.Matrix.Matrix matrix33 = com.operations.Matrix.MatrixOperations.scalarMultiply(matrix8, (double) 0.0f);
        int int34 = matrix8.getCols();
        com.operations.Matrix.Matrix matrix35 = com.operations.Matrix.MatrixDecompositions.choleskyDecomposition(matrix8);
        com.operations.Matrix.Matrix matrix38 = com.operations.Matrix.MatrixTransformations.scale2D((double) 100L, 1.0d);
        com.operations.Matrix.Matrix matrix39 = com.operations.Matrix.MatrixOperations.transpose(matrix38);
        com.operations.Matrix.Matrix matrix40 = com.operations.Matrix.MatrixOperations.add(matrix35, matrix39);
        java.lang.Class<?> wildcardClass41 = matrix35.getClass();
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertArrayEquals(doubleArray2, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertArrayEquals(doubleArray5, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertArrayEquals(doubleArray12, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertArrayEquals(doubleArray15, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 2 + "'", int18 == 2);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 2 + "'", int19 == 2);
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertArrayEquals(doubleArray23, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertArrayEquals(doubleArray26, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(matrix31);
        org.junit.Assert.assertNotNull(matrix33);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 2 + "'", int34 == 2);
        org.junit.Assert.assertNotNull(matrix35);
        org.junit.Assert.assertNotNull(matrix38);
        org.junit.Assert.assertNotNull(matrix39);
        org.junit.Assert.assertNotNull(matrix40);
        org.junit.Assert.assertNotNull(wildcardClass41);
    }

    @Test
    public void test3884() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3884");
        com.operations.Matrix.Matrix matrix2 = new com.operations.Matrix.Matrix(2, (int) (short) 10);
        boolean boolean3 = com.operations.Matrix.MatrixUtils.isSymmetric(matrix2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
    }

    @Test
    public void test3885() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3885");
        com.operations.Matrix.Matrix matrix2 = com.operations.Matrix.MatrixTransformations.scale2D((double) (short) 1, 1.4142135623730951d);
        double double3 = com.operations.Matrix.MatrixUtils.frobeniusNorm(matrix2);
        com.operations.Matrix.Matrix[] matrixArray4 = com.operations.Matrix.MatrixDecompositions.luDecomposition(matrix2);
        com.operations.Matrix.Matrix matrix6 = com.operations.Matrix.MatrixTransformations.rotate2D((double) (-1L));
        matrix6.print();
        matrix6.print();
        com.operations.Matrix.Matrix matrix10 = com.operations.Matrix.MatrixTransformations.rotate2D((double) '4');
        double[] doubleArray13 = new double[] { 10, 'a' };
        double[] doubleArray16 = new double[] { 10, 'a' };
        double[][] doubleArray17 = new double[][] { doubleArray13, doubleArray16 };
        com.operations.Matrix.Matrix matrix18 = new com.operations.Matrix.Matrix(doubleArray17);
        com.operations.Matrix.Matrix matrix19 = new com.operations.Matrix.Matrix(doubleArray17);
        com.operations.Matrix.Matrix matrix21 = com.operations.Matrix.MatrixTransformations.rotate2D((double) (short) 100);
        double[] doubleArray24 = new double[] { 137.90576492663388d, (byte) -1 };
        double[] doubleArray25 = com.operations.Matrix.MatrixSolver.solveGaussian(matrix21, doubleArray24);
        com.operations.Matrix.Matrix matrix26 = com.operations.Matrix.MatrixOperations.add(matrix19, matrix21);
        boolean boolean27 = com.operations.Matrix.MatrixUtils.isSymmetric(matrix26);
        boolean boolean29 = com.operations.Matrix.MatrixUtils.compare(matrix10, matrix26, 364.0054944640259d);
        com.operations.Matrix.Matrix matrix32 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0L, (double) (byte) 10);
        int int33 = matrix32.getRows();
        com.operations.Matrix.Matrix matrix35 = com.operations.Matrix.MatrixOperations.scalarMultiply(matrix32, (double) 2);
        matrix32.print();
        com.operations.Matrix.Matrix matrix37 = com.operations.Matrix.MatrixOperations.multiply(matrix26, matrix32);
        com.operations.Matrix.Matrix matrix38 = com.operations.Matrix.MatrixDecompositions.choleskyDecomposition(matrix26);
        boolean boolean40 = com.operations.Matrix.MatrixUtils.compare(matrix6, matrix26, (double) ' ');
        com.operations.Matrix.Matrix matrix41 = com.operations.Matrix.MatrixOperations.subtract(matrix2, matrix26);
        double double42 = com.operations.Matrix.MatrixUtils.frobeniusNorm(matrix26);
        org.junit.Assert.assertNotNull(matrix2);
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + 1.7320508075688774d + "'", double3 == 1.7320508075688774d);
        org.junit.Assert.assertNotNull(matrixArray4);
        org.junit.Assert.assertNotNull(matrix6);
        org.junit.Assert.assertNotNull(matrix10);
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertArrayEquals(doubleArray13, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertArrayEquals(doubleArray16, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertNotNull(matrix21);
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertArrayEquals(doubleArray24, new double[] { 137.90576492663388d, (-1.0d) }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertArrayEquals(doubleArray25, new double[] { (-24.931892522286255d), (-135.63701830716116d) }, 1.0E-15);
        org.junit.Assert.assertNotNull(matrix26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertNotNull(matrix32);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 2 + "'", int33 == 2);
        org.junit.Assert.assertNotNull(matrix35);
        org.junit.Assert.assertNotNull(matrix37);
        org.junit.Assert.assertNotNull(matrix38);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(matrix41);
        org.junit.Assert.assertTrue("'" + double42 + "' != '" + 137.15495886388925d + "'", double42 == 137.15495886388925d);
    }

    @Test
    public void test3886() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3886");
        com.operations.Matrix.Matrix matrix1 = com.operations.Matrix.MatrixTransformations.rotate2D((double) (short) -1);
        double double2 = com.operations.Matrix.MatrixUtils.frobeniusNorm(matrix1);
        com.operations.Matrix.Matrix matrix3 = com.operations.Matrix.MatrixOperations.transpose(matrix1);
        int int4 = matrix3.getRows();
        org.junit.Assert.assertNotNull(matrix1);
        org.junit.Assert.assertTrue("'" + double2 + "' != '" + 1.4142135623730951d + "'", double2 == 1.4142135623730951d);
        org.junit.Assert.assertNotNull(matrix3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 2 + "'", int4 == 2);
    }

    @Test
    public void test3887() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3887");
        com.operations.Matrix.Matrix matrix2 = com.operations.Matrix.MatrixTransformations.scale2D((double) 1.0f, (double) 1);
        com.operations.Matrix.Matrix matrix4 = com.operations.Matrix.MatrixTransformations.rotate2D((double) 1.0f);
        com.operations.Matrix.Matrix matrix7 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0L, (double) (byte) 10);
        int int8 = matrix7.getRows();
        com.operations.Matrix.Matrix matrix10 = com.operations.Matrix.MatrixOperations.scalarMultiply(matrix7, (double) 2);
        double double11 = com.operations.Matrix.MatrixUtils.frobeniusNorm(matrix7);
        com.operations.Matrix.Matrix matrix14 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0L, (double) (byte) 10);
        int int15 = matrix14.getRows();
        com.operations.Matrix.Matrix matrix17 = com.operations.Matrix.MatrixOperations.scalarMultiply(matrix14, (double) 2);
        com.operations.Matrix.Matrix matrix18 = com.operations.Matrix.MatrixOperations.subtract(matrix7, matrix17);
        com.operations.Matrix.Matrix matrix19 = com.operations.Matrix.MatrixOperations.add(matrix4, matrix17);
        boolean boolean21 = com.operations.Matrix.MatrixUtils.compare(matrix2, matrix4, (double) (byte) -1);
        com.operations.Matrix.Matrix matrix22 = com.operations.Matrix.MatrixOperations.transpose(matrix4);
        com.operations.Matrix.Matrix matrix25 = com.operations.Matrix.MatrixTransformations.project2D((double) 10L, 10.0d);
        com.operations.Matrix.Matrix matrix27 = com.operations.Matrix.MatrixTransformations.rotate2D((double) (short) 100);
        double[] doubleArray30 = new double[] { 137.90576492663388d, (byte) -1 };
        double[] doubleArray31 = com.operations.Matrix.MatrixSolver.solveGaussian(matrix27, doubleArray30);
        com.operations.Matrix.Matrix matrix34 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0L, (double) (byte) 10);
        double[] doubleArray37 = new double[] { 10, 'a' };
        double[] doubleArray40 = new double[] { 10, 'a' };
        double[][] doubleArray41 = new double[][] { doubleArray37, doubleArray40 };
        com.operations.Matrix.Matrix matrix42 = new com.operations.Matrix.Matrix(doubleArray41);
        int int43 = matrix42.getCols();
        int int44 = matrix42.getCols();
        int int45 = matrix42.getCols();
        com.operations.Matrix.Matrix[] matrixArray46 = com.operations.Matrix.MatrixDecompositions.luDecomposition(matrix42);
        com.operations.Matrix.Matrix matrix47 = com.operations.Matrix.MatrixOperations.multiply(matrix34, matrix42);
        boolean boolean49 = com.operations.Matrix.MatrixUtils.compare(matrix27, matrix34, (double) (-1L));
        double[][] doubleArray50 = matrix27.getData();
        com.operations.Matrix.Matrix matrix52 = com.operations.Matrix.MatrixTransformations.rotate2D((double) (short) 100);
        double[] doubleArray55 = new double[] { 137.90576492663388d, (byte) -1 };
        double[] doubleArray56 = com.operations.Matrix.MatrixSolver.solveGaussian(matrix52, doubleArray55);
        double[] doubleArray57 = com.operations.Matrix.MatrixSolver.solveGaussian(matrix27, doubleArray55);
        double[] doubleArray58 = com.operations.Matrix.MatrixSolver.solveGaussian(matrix25, doubleArray57);
        double[] doubleArray59 = com.operations.Matrix.MatrixSolver.solveGaussian(matrix4, doubleArray58);
        com.operations.Matrix.Matrix matrix60 = com.operations.Matrix.MatrixDecompositions.choleskyDecomposition(matrix4);
        com.operations.Matrix.Matrix matrix63 = com.operations.Matrix.MatrixTransformations.scale2D(52.009614495783374d, (double) 0.0f);
        double double64 = com.operations.Matrix.MatrixUtils.frobeniusNorm(matrix63);
        double[] doubleArray67 = new double[] { 10, 'a' };
        double[] doubleArray70 = new double[] { 10, 'a' };
        double[][] doubleArray71 = new double[][] { doubleArray67, doubleArray70 };
        com.operations.Matrix.Matrix matrix72 = new com.operations.Matrix.Matrix(doubleArray71);
        int int73 = matrix72.getCols();
        int int74 = matrix72.getCols();
        boolean boolean75 = com.operations.Matrix.MatrixUtils.isSquare(matrix72);
        com.operations.Matrix.Matrix matrix76 = com.operations.Matrix.MatrixDecompositions.choleskyDecomposition(matrix72);
        com.operations.Matrix.Matrix matrix79 = com.operations.Matrix.MatrixTransformations.project2D(0.0d, (double) 0);
        com.operations.Matrix.Matrix matrix80 = com.operations.Matrix.MatrixOperations.subtract(matrix76, matrix79);
        com.operations.Matrix.Matrix matrix81 = com.operations.Matrix.MatrixOperations.multiply(matrix63, matrix80);
        com.operations.Matrix.Matrix matrix82 = com.operations.Matrix.MatrixOperations.subtract(matrix4, matrix81);
        boolean boolean83 = com.operations.Matrix.MatrixUtils.isSymmetric(matrix81);
        com.operations.Matrix.Matrix matrix84 = com.operations.Matrix.MatrixOperations.transpose(matrix81);
        org.junit.Assert.assertNotNull(matrix2);
        org.junit.Assert.assertNotNull(matrix4);
        org.junit.Assert.assertNotNull(matrix7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 2 + "'", int8 == 2);
        org.junit.Assert.assertNotNull(matrix10);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 10.0d + "'", double11 == 10.0d);
        org.junit.Assert.assertNotNull(matrix14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 2 + "'", int15 == 2);
        org.junit.Assert.assertNotNull(matrix17);
        org.junit.Assert.assertNotNull(matrix18);
        org.junit.Assert.assertNotNull(matrix19);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(matrix22);
        org.junit.Assert.assertNotNull(matrix25);
        org.junit.Assert.assertNotNull(matrix27);
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertArrayEquals(doubleArray30, new double[] { 137.90576492663388d, (-1.0d) }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertArrayEquals(doubleArray31, new double[] { (-24.931892522286255d), (-135.63701830716116d) }, 1.0E-15);
        org.junit.Assert.assertNotNull(matrix34);
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertArrayEquals(doubleArray37, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertArrayEquals(doubleArray40, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 2 + "'", int43 == 2);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 2 + "'", int44 == 2);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 2 + "'", int45 == 2);
        org.junit.Assert.assertNotNull(matrixArray46);
        org.junit.Assert.assertNotNull(matrix47);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertNotNull(matrix52);
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertArrayEquals(doubleArray55, new double[] { 137.90576492663388d, (-1.0d) }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray56);
        org.junit.Assert.assertArrayEquals(doubleArray56, new double[] { (-24.931892522286255d), (-135.63701830716116d) }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray57);
        org.junit.Assert.assertArrayEquals(doubleArray57, new double[] { (-24.931892522286255d), (-135.63701830716116d) }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray58);
        org.junit.Assert.assertArrayEquals(doubleArray58, new double[] { (-2.4931892522286256d), (-13.563701830716116d) }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray59);
        org.junit.Assert.assertArrayEquals(doubleArray59, new double[] { (-2.7295287645732618d), (-13.518123861075072d) }, 1.0E-15);
        org.junit.Assert.assertNotNull(matrix60);
        org.junit.Assert.assertNotNull(matrix63);
        org.junit.Assert.assertTrue("'" + double64 + "' != '" + 52.009614495783374d + "'", double64 == 52.009614495783374d);
        org.junit.Assert.assertNotNull(doubleArray67);
        org.junit.Assert.assertArrayEquals(doubleArray67, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray70);
        org.junit.Assert.assertArrayEquals(doubleArray70, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray71);
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + 2 + "'", int73 == 2);
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 2 + "'", int74 == 2);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + true + "'", boolean75 == true);
        org.junit.Assert.assertNotNull(matrix76);
        org.junit.Assert.assertNotNull(matrix79);
        org.junit.Assert.assertNotNull(matrix80);
        org.junit.Assert.assertNotNull(matrix81);
        org.junit.Assert.assertNotNull(matrix82);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + true + "'", boolean83 == true);
        org.junit.Assert.assertNotNull(matrix84);
    }

    @Test
    public void test3888() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3888");
        com.operations.Matrix.Matrix matrix2 = com.operations.Matrix.MatrixTransformations.scale2D(0.0d, (double) (byte) 0);
        boolean boolean3 = com.operations.Matrix.MatrixUtils.isSquare(matrix2);
        double[][] doubleArray4 = matrix2.getData();
        org.junit.Assert.assertNotNull(matrix2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNotNull(doubleArray4);
    }

    @Test
    public void test3889() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3889");
        double[] doubleArray2 = new double[] { 10, 'a' };
        double[] doubleArray5 = new double[] { 10, 'a' };
        double[][] doubleArray6 = new double[][] { doubleArray2, doubleArray5 };
        com.operations.Matrix.Matrix matrix7 = new com.operations.Matrix.Matrix(doubleArray6);
        com.operations.Matrix.Matrix matrix8 = new com.operations.Matrix.Matrix(doubleArray6);
        com.operations.Matrix.Matrix[] matrixArray9 = com.operations.Matrix.MatrixDecompositions.luDecomposition(matrix8);
        com.operations.Matrix.Matrix matrix12 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0, (double) 100L);
        com.operations.Matrix.Matrix matrix13 = com.operations.Matrix.MatrixOperations.subtract(matrix8, matrix12);
        boolean boolean14 = com.operations.Matrix.MatrixUtils.isSymmetric(matrix8);
        matrix8.setValue(0, 0, (double) '#');
        // The following exception was thrown during execution in test generation
        try {
            matrix8.setValue((int) ' ', (int) '4', 3200.015624961853d);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: Index 32 out of bounds for length 2");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertArrayEquals(doubleArray2, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertArrayEquals(doubleArray5, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertNotNull(matrixArray9);
        org.junit.Assert.assertNotNull(matrix12);
        org.junit.Assert.assertNotNull(matrix13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
    }

    @Test
    public void test3890() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3890");
        com.operations.Matrix.Matrix matrix0 = null;
        double[] doubleArray3 = new double[] { 10, 'a' };
        double[] doubleArray6 = new double[] { 10, 'a' };
        double[][] doubleArray7 = new double[][] { doubleArray3, doubleArray6 };
        com.operations.Matrix.Matrix matrix8 = new com.operations.Matrix.Matrix(doubleArray7);
        com.operations.Matrix.Matrix matrix9 = new com.operations.Matrix.Matrix(doubleArray7);
        com.operations.Matrix.Matrix matrix10 = new com.operations.Matrix.Matrix(doubleArray7);
        com.operations.Matrix.Matrix matrix11 = new com.operations.Matrix.Matrix(doubleArray7);
        com.operations.Matrix.Matrix matrix12 = com.operations.Matrix.MatrixOperations.transpose(matrix11);
        com.operations.Matrix.Matrix matrix15 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0L, (double) (byte) 10);
        double[] doubleArray18 = new double[] { 10, 'a' };
        double[] doubleArray21 = new double[] { 10, 'a' };
        double[][] doubleArray22 = new double[][] { doubleArray18, doubleArray21 };
        com.operations.Matrix.Matrix matrix23 = new com.operations.Matrix.Matrix(doubleArray22);
        int int24 = matrix23.getCols();
        int int25 = matrix23.getCols();
        int int26 = matrix23.getCols();
        com.operations.Matrix.Matrix[] matrixArray27 = com.operations.Matrix.MatrixDecompositions.luDecomposition(matrix23);
        com.operations.Matrix.Matrix matrix28 = com.operations.Matrix.MatrixOperations.multiply(matrix15, matrix23);
        int int29 = matrix23.getRows();
        int int30 = matrix23.getCols();
        com.operations.Matrix.Matrix matrix33 = com.operations.Matrix.MatrixTransformations.project2D((double) (-1L), (double) (short) 100);
        com.operations.Matrix.Matrix matrix34 = com.operations.Matrix.MatrixOperations.subtract(matrix23, matrix33);
        com.operations.Matrix.Matrix matrix37 = com.operations.Matrix.MatrixTransformations.project2D(0.0d, (double) 0);
        double[][] doubleArray38 = matrix37.getData();
        com.operations.Matrix.Matrix matrix41 = com.operations.Matrix.MatrixTransformations.project2D((double) ' ', 0.0d);
        double[] doubleArray44 = new double[] { 10, 'a' };
        double[] doubleArray47 = new double[] { 10, 'a' };
        double[][] doubleArray48 = new double[][] { doubleArray44, doubleArray47 };
        com.operations.Matrix.Matrix matrix49 = new com.operations.Matrix.Matrix(doubleArray48);
        int int50 = matrix49.getCols();
        boolean boolean51 = com.operations.Matrix.MatrixUtils.isSquare(matrix49);
        com.operations.Matrix.Matrix matrix52 = com.operations.Matrix.MatrixOperations.transpose(matrix49);
        int int53 = matrix52.getRows();
        com.operations.Matrix.Matrix matrix56 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0L, (double) (byte) 10);
        double[] doubleArray59 = new double[] { 10, 'a' };
        double[] doubleArray62 = new double[] { 10, 'a' };
        double[][] doubleArray63 = new double[][] { doubleArray59, doubleArray62 };
        com.operations.Matrix.Matrix matrix64 = new com.operations.Matrix.Matrix(doubleArray63);
        int int65 = matrix64.getCols();
        int int66 = matrix64.getCols();
        int int67 = matrix64.getCols();
        com.operations.Matrix.Matrix[] matrixArray68 = com.operations.Matrix.MatrixDecompositions.luDecomposition(matrix64);
        com.operations.Matrix.Matrix matrix69 = com.operations.Matrix.MatrixOperations.multiply(matrix56, matrix64);
        com.operations.Matrix.Matrix matrix71 = com.operations.Matrix.MatrixTransformations.rotate2D((double) (short) 100);
        boolean boolean73 = com.operations.Matrix.MatrixUtils.compare(matrix64, matrix71, (double) (byte) 0);
        com.operations.Matrix.Matrix matrix74 = com.operations.Matrix.MatrixOperations.multiply(matrix52, matrix64);
        com.operations.Matrix.Matrix matrix75 = com.operations.Matrix.MatrixOperations.add(matrix41, matrix64);
        com.operations.Matrix.Matrix matrix76 = com.operations.Matrix.MatrixOperations.transpose(matrix41);
        boolean boolean78 = com.operations.Matrix.MatrixUtils.compare(matrix37, matrix41, (double) 0L);
        com.operations.Matrix.Matrix matrix79 = com.operations.Matrix.MatrixOperations.multiply(matrix34, matrix41);
        double double80 = com.operations.Matrix.MatrixUtils.frobeniusNorm(matrix41);
        com.operations.Matrix.Matrix matrix81 = com.operations.Matrix.MatrixOperations.multiply(matrix11, matrix41);
        matrix11.setValue((int) (byte) 1, (int) (byte) 1, (double) 10.0f);
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean87 = com.operations.Matrix.MatrixUtils.compare(matrix0, matrix11, 391.8840992892044d);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertArrayEquals(doubleArray3, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertArrayEquals(doubleArray6, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertNotNull(matrix12);
        org.junit.Assert.assertNotNull(matrix15);
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertArrayEquals(doubleArray18, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertArrayEquals(doubleArray21, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 2 + "'", int24 == 2);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 2 + "'", int25 == 2);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 2 + "'", int26 == 2);
        org.junit.Assert.assertNotNull(matrixArray27);
        org.junit.Assert.assertNotNull(matrix28);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 2 + "'", int29 == 2);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 2 + "'", int30 == 2);
        org.junit.Assert.assertNotNull(matrix33);
        org.junit.Assert.assertNotNull(matrix34);
        org.junit.Assert.assertNotNull(matrix37);
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertNotNull(matrix41);
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertArrayEquals(doubleArray44, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertArrayEquals(doubleArray47, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 2 + "'", int50 == 2);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + true + "'", boolean51 == true);
        org.junit.Assert.assertNotNull(matrix52);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 2 + "'", int53 == 2);
        org.junit.Assert.assertNotNull(matrix56);
        org.junit.Assert.assertNotNull(doubleArray59);
        org.junit.Assert.assertArrayEquals(doubleArray59, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray62);
        org.junit.Assert.assertArrayEquals(doubleArray62, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray63);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 2 + "'", int65 == 2);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 2 + "'", int66 == 2);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 2 + "'", int67 == 2);
        org.junit.Assert.assertNotNull(matrixArray68);
        org.junit.Assert.assertNotNull(matrix69);
        org.junit.Assert.assertNotNull(matrix71);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertNotNull(matrix74);
        org.junit.Assert.assertNotNull(matrix75);
        org.junit.Assert.assertNotNull(matrix76);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertNotNull(matrix79);
        org.junit.Assert.assertTrue("'" + double80 + "' != '" + 32.0d + "'", double80 == 32.0d);
        org.junit.Assert.assertNotNull(matrix81);
    }

    @Test
    public void test3891() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3891");
        com.operations.Matrix.Matrix matrix2 = com.operations.Matrix.MatrixTransformations.project2D(0.0d, (double) 0);
        com.operations.Matrix.Matrix[] matrixArray3 = com.operations.Matrix.MatrixDecompositions.luDecomposition(matrix2);
        com.operations.Matrix.Matrix matrix6 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0L, (double) (byte) 10);
        int int7 = matrix6.getRows();
        com.operations.Matrix.Matrix matrix9 = com.operations.Matrix.MatrixOperations.scalarMultiply(matrix6, (double) 2);
        double double10 = com.operations.Matrix.MatrixUtils.frobeniusNorm(matrix6);
        int int11 = matrix6.getRows();
        com.operations.Matrix.Matrix matrix12 = com.operations.Matrix.MatrixOperations.transpose(matrix6);
        com.operations.Matrix.Matrix matrix13 = com.operations.Matrix.MatrixOperations.multiply(matrix2, matrix12);
        double[] doubleArray16 = new double[] { 10, 'a' };
        double[] doubleArray19 = new double[] { 10, 'a' };
        double[][] doubleArray20 = new double[][] { doubleArray16, doubleArray19 };
        com.operations.Matrix.Matrix matrix21 = new com.operations.Matrix.Matrix(doubleArray20);
        com.operations.Matrix.Matrix matrix22 = new com.operations.Matrix.Matrix(doubleArray20);
        com.operations.Matrix.Matrix[] matrixArray23 = com.operations.Matrix.MatrixDecompositions.luDecomposition(matrix22);
        com.operations.Matrix.Matrix matrix26 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0, (double) 100L);
        com.operations.Matrix.Matrix matrix27 = com.operations.Matrix.MatrixOperations.subtract(matrix22, matrix26);
        double[][] doubleArray28 = matrix27.getData();
        com.operations.Matrix.Matrix matrix29 = new com.operations.Matrix.Matrix(doubleArray28);
        boolean boolean31 = com.operations.Matrix.MatrixUtils.compare(matrix12, matrix29, 32.0d);
        com.operations.Matrix.Matrix matrix34 = com.operations.Matrix.MatrixTransformations.project2D(0.0d, (double) 0);
        double[][] doubleArray35 = matrix34.getData();
        com.operations.Matrix.Matrix matrix38 = com.operations.Matrix.MatrixTransformations.project2D((double) ' ', 0.0d);
        double[] doubleArray41 = new double[] { 10, 'a' };
        double[] doubleArray44 = new double[] { 10, 'a' };
        double[][] doubleArray45 = new double[][] { doubleArray41, doubleArray44 };
        com.operations.Matrix.Matrix matrix46 = new com.operations.Matrix.Matrix(doubleArray45);
        int int47 = matrix46.getCols();
        boolean boolean48 = com.operations.Matrix.MatrixUtils.isSquare(matrix46);
        com.operations.Matrix.Matrix matrix49 = com.operations.Matrix.MatrixOperations.transpose(matrix46);
        int int50 = matrix49.getRows();
        com.operations.Matrix.Matrix matrix53 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0L, (double) (byte) 10);
        double[] doubleArray56 = new double[] { 10, 'a' };
        double[] doubleArray59 = new double[] { 10, 'a' };
        double[][] doubleArray60 = new double[][] { doubleArray56, doubleArray59 };
        com.operations.Matrix.Matrix matrix61 = new com.operations.Matrix.Matrix(doubleArray60);
        int int62 = matrix61.getCols();
        int int63 = matrix61.getCols();
        int int64 = matrix61.getCols();
        com.operations.Matrix.Matrix[] matrixArray65 = com.operations.Matrix.MatrixDecompositions.luDecomposition(matrix61);
        com.operations.Matrix.Matrix matrix66 = com.operations.Matrix.MatrixOperations.multiply(matrix53, matrix61);
        com.operations.Matrix.Matrix matrix68 = com.operations.Matrix.MatrixTransformations.rotate2D((double) (short) 100);
        boolean boolean70 = com.operations.Matrix.MatrixUtils.compare(matrix61, matrix68, (double) (byte) 0);
        com.operations.Matrix.Matrix matrix71 = com.operations.Matrix.MatrixOperations.multiply(matrix49, matrix61);
        com.operations.Matrix.Matrix matrix72 = com.operations.Matrix.MatrixOperations.add(matrix38, matrix61);
        com.operations.Matrix.Matrix matrix73 = com.operations.Matrix.MatrixOperations.transpose(matrix38);
        boolean boolean75 = com.operations.Matrix.MatrixUtils.compare(matrix34, matrix38, (double) 0L);
        com.operations.Matrix.Matrix matrix76 = com.operations.Matrix.MatrixOperations.transpose(matrix38);
        com.operations.Matrix.Matrix matrix77 = com.operations.Matrix.MatrixOperations.add(matrix12, matrix76);
        com.operations.Matrix.Matrix matrix80 = com.operations.Matrix.MatrixTransformations.scale2D(10.0d, 0.0d);
        com.operations.Matrix.Matrix matrix81 = com.operations.Matrix.MatrixOperations.transpose(matrix80);
        com.operations.Matrix.Matrix matrix82 = com.operations.Matrix.MatrixOperations.multiply(matrix77, matrix81);
        com.operations.Matrix.Matrix[] matrixArray83 = com.operations.Matrix.MatrixDecompositions.luDecomposition(matrix77);
        org.junit.Assert.assertNotNull(matrix2);
        org.junit.Assert.assertNotNull(matrixArray3);
        org.junit.Assert.assertNotNull(matrix6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 2 + "'", int7 == 2);
        org.junit.Assert.assertNotNull(matrix9);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 10.0d + "'", double10 == 10.0d);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 2 + "'", int11 == 2);
        org.junit.Assert.assertNotNull(matrix12);
        org.junit.Assert.assertNotNull(matrix13);
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertArrayEquals(doubleArray16, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertArrayEquals(doubleArray19, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertNotNull(matrixArray23);
        org.junit.Assert.assertNotNull(matrix26);
        org.junit.Assert.assertNotNull(matrix27);
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(matrix34);
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertNotNull(matrix38);
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertArrayEquals(doubleArray41, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertArrayEquals(doubleArray44, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 2 + "'", int47 == 2);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
        org.junit.Assert.assertNotNull(matrix49);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 2 + "'", int50 == 2);
        org.junit.Assert.assertNotNull(matrix53);
        org.junit.Assert.assertNotNull(doubleArray56);
        org.junit.Assert.assertArrayEquals(doubleArray56, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray59);
        org.junit.Assert.assertArrayEquals(doubleArray59, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray60);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 2 + "'", int62 == 2);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 2 + "'", int63 == 2);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 2 + "'", int64 == 2);
        org.junit.Assert.assertNotNull(matrixArray65);
        org.junit.Assert.assertNotNull(matrix66);
        org.junit.Assert.assertNotNull(matrix68);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertNotNull(matrix71);
        org.junit.Assert.assertNotNull(matrix72);
        org.junit.Assert.assertNotNull(matrix73);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertNotNull(matrix76);
        org.junit.Assert.assertNotNull(matrix77);
        org.junit.Assert.assertNotNull(matrix80);
        org.junit.Assert.assertNotNull(matrix81);
        org.junit.Assert.assertNotNull(matrix82);
        org.junit.Assert.assertNotNull(matrixArray83);
    }

    @Test
    public void test3892() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3892");
        com.operations.Matrix.Matrix matrix2 = com.operations.Matrix.MatrixTransformations.scale2D(0.0d, (double) 1.0f);
        com.operations.Matrix.Matrix matrix4 = com.operations.Matrix.MatrixTransformations.rotate2D((double) 1.0f);
        com.operations.Matrix.Matrix matrix7 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0L, (double) (byte) 10);
        int int8 = matrix7.getRows();
        com.operations.Matrix.Matrix matrix10 = com.operations.Matrix.MatrixOperations.scalarMultiply(matrix7, (double) 2);
        double double11 = com.operations.Matrix.MatrixUtils.frobeniusNorm(matrix7);
        com.operations.Matrix.Matrix matrix14 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0L, (double) (byte) 10);
        int int15 = matrix14.getRows();
        com.operations.Matrix.Matrix matrix17 = com.operations.Matrix.MatrixOperations.scalarMultiply(matrix14, (double) 2);
        com.operations.Matrix.Matrix matrix18 = com.operations.Matrix.MatrixOperations.subtract(matrix7, matrix17);
        com.operations.Matrix.Matrix matrix19 = com.operations.Matrix.MatrixOperations.add(matrix4, matrix17);
        com.operations.Matrix.Matrix matrix21 = com.operations.Matrix.MatrixOperations.scalarMultiply(matrix19, (double) 0L);
        com.operations.Matrix.Matrix matrix22 = com.operations.Matrix.MatrixOperations.subtract(matrix2, matrix21);
        com.operations.Matrix.Matrix[] matrixArray23 = com.operations.Matrix.MatrixDecompositions.luDecomposition(matrix22);
        com.operations.Matrix.Matrix matrix28 = com.operations.Matrix.MatrixUtils.generateRandomMatrix(100, 10, 97, (int) (short) -1);
        // The following exception was thrown during execution in test generation
        try {
            com.operations.Matrix.Matrix matrix29 = com.operations.Matrix.MatrixOperations.multiply(matrix22, matrix28);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Matrix A's columns must match Matrix B's rows for multiplication.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(matrix2);
        org.junit.Assert.assertNotNull(matrix4);
        org.junit.Assert.assertNotNull(matrix7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 2 + "'", int8 == 2);
        org.junit.Assert.assertNotNull(matrix10);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 10.0d + "'", double11 == 10.0d);
        org.junit.Assert.assertNotNull(matrix14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 2 + "'", int15 == 2);
        org.junit.Assert.assertNotNull(matrix17);
        org.junit.Assert.assertNotNull(matrix18);
        org.junit.Assert.assertNotNull(matrix19);
        org.junit.Assert.assertNotNull(matrix21);
        org.junit.Assert.assertNotNull(matrix22);
        org.junit.Assert.assertNotNull(matrixArray23);
        org.junit.Assert.assertNotNull(matrix28);
    }

    @Test
    public void test3893() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3893");
        com.operations.Matrix.Matrix matrix0 = null;
        com.operations.Matrix.Matrix matrix3 = com.operations.Matrix.MatrixTransformations.project2D(0.0d, (double) 0);
        com.operations.Matrix.Matrix[] matrixArray4 = com.operations.Matrix.MatrixDecompositions.luDecomposition(matrix3);
        com.operations.Matrix.Matrix matrix7 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0L, (double) (byte) 10);
        int int8 = matrix7.getRows();
        com.operations.Matrix.Matrix matrix10 = com.operations.Matrix.MatrixOperations.scalarMultiply(matrix7, (double) 2);
        double double11 = com.operations.Matrix.MatrixUtils.frobeniusNorm(matrix7);
        int int12 = matrix7.getRows();
        com.operations.Matrix.Matrix matrix13 = com.operations.Matrix.MatrixOperations.transpose(matrix7);
        com.operations.Matrix.Matrix matrix14 = com.operations.Matrix.MatrixOperations.multiply(matrix3, matrix13);
        com.operations.Matrix.Matrix matrix16 = com.operations.Matrix.MatrixOperations.scalarMultiply(matrix13, (double) 0);
        double[] doubleArray19 = new double[] { 10, 'a' };
        double[] doubleArray22 = new double[] { 10, 'a' };
        double[][] doubleArray23 = new double[][] { doubleArray19, doubleArray22 };
        com.operations.Matrix.Matrix matrix24 = new com.operations.Matrix.Matrix(doubleArray23);
        int int25 = matrix24.getCols();
        int int26 = matrix24.getCols();
        int int27 = matrix24.getCols();
        com.operations.Matrix.Matrix matrix33 = com.operations.Matrix.MatrixUtils.generateRandomMatrix(100, (int) (byte) 1, (int) '#', (int) '#', 1L);
        double double36 = matrix33.getValue((int) '4', 0);
        double double37 = com.operations.Matrix.MatrixUtils.frobeniusNorm(matrix33);
        boolean boolean38 = com.operations.Matrix.MatrixUtils.isSquare(matrix33);
        boolean boolean40 = com.operations.Matrix.MatrixUtils.compare(matrix24, matrix33, (double) 100L);
        com.operations.Matrix.Matrix matrix41 = com.operations.Matrix.MatrixDecompositions.choleskyDecomposition(matrix24);
        double[] doubleArray44 = new double[] { 10, 'a' };
        double[] doubleArray47 = new double[] { 10, 'a' };
        double[][] doubleArray48 = new double[][] { doubleArray44, doubleArray47 };
        com.operations.Matrix.Matrix matrix49 = new com.operations.Matrix.Matrix(doubleArray48);
        int int50 = matrix49.getCols();
        int int51 = matrix49.getCols();
        int int52 = matrix49.getCols();
        com.operations.Matrix.Matrix matrix54 = com.operations.Matrix.MatrixOperations.scalarMultiply(matrix49, (double) 0.0f);
        boolean boolean56 = com.operations.Matrix.MatrixUtils.compare(matrix41, matrix49, (double) '4');
        com.operations.Matrix.Matrix matrix59 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0L, (double) 10L);
        double[][] doubleArray60 = matrix59.getData();
        com.operations.Matrix.Matrix matrix61 = com.operations.Matrix.MatrixOperations.add(matrix49, matrix59);
        double double62 = com.operations.Matrix.MatrixUtils.frobeniusNorm(matrix61);
        com.operations.Matrix.Matrix matrix63 = com.operations.Matrix.MatrixDecompositions.choleskyDecomposition(matrix61);
        com.operations.Matrix.Matrix matrix64 = com.operations.Matrix.MatrixOperations.multiply(matrix16, matrix61);
        // The following exception was thrown during execution in test generation
        try {
            com.operations.Matrix.Matrix matrix65 = com.operations.Matrix.MatrixOperations.add(matrix0, matrix61);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(matrix3);
        org.junit.Assert.assertNotNull(matrixArray4);
        org.junit.Assert.assertNotNull(matrix7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 2 + "'", int8 == 2);
        org.junit.Assert.assertNotNull(matrix10);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 10.0d + "'", double11 == 10.0d);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 2 + "'", int12 == 2);
        org.junit.Assert.assertNotNull(matrix13);
        org.junit.Assert.assertNotNull(matrix14);
        org.junit.Assert.assertNotNull(matrix16);
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertArrayEquals(doubleArray19, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertArrayEquals(doubleArray22, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 2 + "'", int25 == 2);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 2 + "'", int26 == 2);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 2 + "'", int27 == 2);
        org.junit.Assert.assertNotNull(matrix33);
        org.junit.Assert.assertTrue("'" + double36 + "' != '" + 35.0d + "'", double36 == 35.0d);
        org.junit.Assert.assertTrue("'" + double37 + "' != '" + 350.0d + "'", double37 == 350.0d);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(matrix41);
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertArrayEquals(doubleArray44, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertArrayEquals(doubleArray47, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 2 + "'", int50 == 2);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 2 + "'", int51 == 2);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 2 + "'", int52 == 2);
        org.junit.Assert.assertNotNull(matrix54);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(matrix59);
        org.junit.Assert.assertNotNull(doubleArray60);
        org.junit.Assert.assertNotNull(matrix61);
        org.junit.Assert.assertTrue("'" + double62 + "' != '" + 145.11374848717816d + "'", double62 == 145.11374848717816d);
        org.junit.Assert.assertNotNull(matrix63);
        org.junit.Assert.assertNotNull(matrix64);
    }

    @Test
    public void test3894() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3894");
        com.operations.Matrix.Matrix matrix4 = com.operations.Matrix.MatrixUtils.generateRandomMatrix((int) (short) 10, (int) (short) 0, (int) (short) 100, (int) (byte) 100);
        com.operations.Matrix.Matrix matrix6 = com.operations.Matrix.MatrixOperations.scalarMultiply(matrix4, 640031.99920004d);
        int int7 = matrix6.getRows();
        org.junit.Assert.assertNotNull(matrix4);
        org.junit.Assert.assertNotNull(matrix6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 10 + "'", int7 == 10);
    }

    @Test
    public void test3895() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3895");
        com.operations.Matrix.Matrix matrix2 = new com.operations.Matrix.Matrix(0, 52);
    }

    @Test
    public void test3896() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3896");
        com.operations.Matrix.Matrix matrix1 = com.operations.Matrix.MatrixTransformations.rotate2D(146.4308710620817d);
        double[][] doubleArray2 = matrix1.getData();
        com.operations.Matrix.Matrix matrix3 = new com.operations.Matrix.Matrix(doubleArray2);
        org.junit.Assert.assertNotNull(matrix1);
        org.junit.Assert.assertNotNull(doubleArray2);
    }

    @Test
    public void test3897() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3897");
        com.operations.Matrix.Matrix matrix2 = com.operations.Matrix.MatrixTransformations.scale2D((double) 100.0f, (double) (short) -1);
        com.operations.Matrix.Matrix matrix4 = com.operations.Matrix.MatrixTransformations.rotate2D(350.0d);
        com.operations.Matrix.Matrix matrix6 = com.operations.Matrix.MatrixTransformations.rotate2D((double) (short) 100);
        double[] doubleArray9 = new double[] { 137.90576492663388d, (byte) -1 };
        double[] doubleArray10 = com.operations.Matrix.MatrixSolver.solveGaussian(matrix6, doubleArray9);
        double[] doubleArray11 = com.operations.Matrix.MatrixSolver.solveGaussian(matrix4, doubleArray10);
        com.operations.Matrix.Matrix matrix14 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0L, (double) (byte) 10);
        double[] doubleArray17 = new double[] { 10, 'a' };
        double[] doubleArray20 = new double[] { 10, 'a' };
        double[][] doubleArray21 = new double[][] { doubleArray17, doubleArray20 };
        com.operations.Matrix.Matrix matrix22 = new com.operations.Matrix.Matrix(doubleArray21);
        int int23 = matrix22.getCols();
        int int24 = matrix22.getCols();
        int int25 = matrix22.getCols();
        com.operations.Matrix.Matrix[] matrixArray26 = com.operations.Matrix.MatrixDecompositions.luDecomposition(matrix22);
        com.operations.Matrix.Matrix matrix27 = com.operations.Matrix.MatrixOperations.multiply(matrix14, matrix22);
        com.operations.Matrix.Matrix matrix29 = com.operations.Matrix.MatrixTransformations.rotate2D((double) (short) 100);
        boolean boolean31 = com.operations.Matrix.MatrixUtils.compare(matrix22, matrix29, (double) (byte) 0);
        double[] doubleArray34 = new double[] { 10, 'a' };
        double[] doubleArray37 = new double[] { 10, 'a' };
        double[][] doubleArray38 = new double[][] { doubleArray34, doubleArray37 };
        com.operations.Matrix.Matrix matrix39 = new com.operations.Matrix.Matrix(doubleArray38);
        com.operations.Matrix.Matrix matrix40 = new com.operations.Matrix.Matrix(doubleArray38);
        com.operations.Matrix.Matrix matrix41 = new com.operations.Matrix.Matrix(doubleArray38);
        boolean boolean43 = com.operations.Matrix.MatrixUtils.compare(matrix22, matrix41, (double) (-1));
        double[] doubleArray46 = new double[] { 10, 'a' };
        double[] doubleArray49 = new double[] { 10, 'a' };
        double[][] doubleArray50 = new double[][] { doubleArray46, doubleArray49 };
        com.operations.Matrix.Matrix matrix51 = new com.operations.Matrix.Matrix(doubleArray50);
        com.operations.Matrix.Matrix matrix52 = new com.operations.Matrix.Matrix(doubleArray50);
        boolean boolean53 = com.operations.Matrix.MatrixUtils.isSquare(matrix52);
        com.operations.Matrix.Matrix matrix54 = com.operations.Matrix.MatrixOperations.multiply(matrix41, matrix52);
        double[][] doubleArray55 = matrix52.getData();
        com.operations.Matrix.Matrix matrix56 = new com.operations.Matrix.Matrix(doubleArray55);
        com.operations.Matrix.Matrix matrix57 = new com.operations.Matrix.Matrix(doubleArray55);
        boolean boolean58 = com.operations.Matrix.MatrixUtils.isSymmetric(matrix57);
        com.operations.Matrix.Matrix matrix59 = com.operations.Matrix.MatrixOperations.subtract(matrix4, matrix57);
        com.operations.Matrix.Matrix matrix60 = com.operations.Matrix.MatrixOperations.add(matrix2, matrix57);
        com.operations.Matrix.Matrix matrix62 = com.operations.Matrix.MatrixTransformations.rotate2D(10.344080432788601d);
        com.operations.Matrix.Matrix matrix63 = com.operations.Matrix.MatrixOperations.subtract(matrix2, matrix62);
        boolean boolean64 = com.operations.Matrix.MatrixUtils.isSymmetric(matrix63);
        org.junit.Assert.assertNotNull(matrix2);
        org.junit.Assert.assertNotNull(matrix4);
        org.junit.Assert.assertNotNull(matrix6);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertArrayEquals(doubleArray9, new double[] { 137.90576492663388d, (-1.0d) }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertArrayEquals(doubleArray10, new double[] { (-24.931892522286255d), (-135.63701830716116d) }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertArrayEquals(doubleArray11, new double[] { (-0.9999999999999858d), (-137.90576492663388d) }, 1.0E-15);
        org.junit.Assert.assertNotNull(matrix14);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertArrayEquals(doubleArray17, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertArrayEquals(doubleArray20, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 2 + "'", int23 == 2);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 2 + "'", int24 == 2);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 2 + "'", int25 == 2);
        org.junit.Assert.assertNotNull(matrixArray26);
        org.junit.Assert.assertNotNull(matrix27);
        org.junit.Assert.assertNotNull(matrix29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertArrayEquals(doubleArray34, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertArrayEquals(doubleArray37, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(doubleArray46);
        org.junit.Assert.assertArrayEquals(doubleArray46, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertArrayEquals(doubleArray49, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true);
        org.junit.Assert.assertNotNull(matrix54);
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(matrix59);
        org.junit.Assert.assertNotNull(matrix60);
        org.junit.Assert.assertNotNull(matrix62);
        org.junit.Assert.assertNotNull(matrix63);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
    }

    @Test
    public void test3898() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3898");
        com.operations.Matrix.Matrix matrix2 = com.operations.Matrix.MatrixTransformations.project2D((double) (short) 100, (double) 0L);
        boolean boolean3 = com.operations.Matrix.MatrixUtils.isSquare(matrix2);
        boolean boolean4 = com.operations.Matrix.MatrixUtils.isSymmetric(matrix2);
        boolean boolean5 = com.operations.Matrix.MatrixUtils.isSquare(matrix2);
        boolean boolean6 = com.operations.Matrix.MatrixUtils.isSymmetric(matrix2);
        org.junit.Assert.assertNotNull(matrix2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
    }

    @Test
    public void test3899() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3899");
        com.operations.Matrix.Matrix matrix1 = com.operations.Matrix.MatrixTransformations.rotate2D((-0.1736481776669303d));
        double[] doubleArray4 = new double[] { 10, 'a' };
        double[] doubleArray7 = new double[] { 10, 'a' };
        double[][] doubleArray8 = new double[][] { doubleArray4, doubleArray7 };
        com.operations.Matrix.Matrix matrix9 = new com.operations.Matrix.Matrix(doubleArray8);
        com.operations.Matrix.Matrix matrix10 = new com.operations.Matrix.Matrix(doubleArray8);
        boolean boolean11 = com.operations.Matrix.MatrixUtils.isSquare(matrix10);
        double[] doubleArray14 = new double[] { 10, 'a' };
        double[] doubleArray17 = new double[] { 10, 'a' };
        double[][] doubleArray18 = new double[][] { doubleArray14, doubleArray17 };
        com.operations.Matrix.Matrix matrix19 = new com.operations.Matrix.Matrix(doubleArray18);
        int int20 = matrix19.getCols();
        int int21 = matrix19.getCols();
        matrix19.print();
        double[] doubleArray25 = new double[] { 10, 'a' };
        double[] doubleArray28 = new double[] { 10, 'a' };
        double[][] doubleArray29 = new double[][] { doubleArray25, doubleArray28 };
        com.operations.Matrix.Matrix matrix30 = new com.operations.Matrix.Matrix(doubleArray29);
        boolean boolean32 = com.operations.Matrix.MatrixUtils.compare(matrix19, matrix30, (double) (-1));
        com.operations.Matrix.Matrix matrix33 = com.operations.Matrix.MatrixOperations.subtract(matrix10, matrix30);
        double[] doubleArray36 = new double[] { 10, 'a' };
        double[] doubleArray39 = new double[] { 10, 'a' };
        double[][] doubleArray40 = new double[][] { doubleArray36, doubleArray39 };
        com.operations.Matrix.Matrix matrix41 = new com.operations.Matrix.Matrix(doubleArray40);
        com.operations.Matrix.Matrix matrix42 = new com.operations.Matrix.Matrix(doubleArray40);
        boolean boolean43 = com.operations.Matrix.MatrixUtils.isSquare(matrix42);
        double[] doubleArray46 = new double[] { 10, 'a' };
        double[] doubleArray49 = new double[] { 10, 'a' };
        double[][] doubleArray50 = new double[][] { doubleArray46, doubleArray49 };
        com.operations.Matrix.Matrix matrix51 = new com.operations.Matrix.Matrix(doubleArray50);
        int int52 = matrix51.getCols();
        int int53 = matrix51.getCols();
        matrix51.print();
        double[] doubleArray57 = new double[] { 10, 'a' };
        double[] doubleArray60 = new double[] { 10, 'a' };
        double[][] doubleArray61 = new double[][] { doubleArray57, doubleArray60 };
        com.operations.Matrix.Matrix matrix62 = new com.operations.Matrix.Matrix(doubleArray61);
        boolean boolean64 = com.operations.Matrix.MatrixUtils.compare(matrix51, matrix62, (double) (-1));
        com.operations.Matrix.Matrix matrix65 = com.operations.Matrix.MatrixOperations.subtract(matrix42, matrix62);
        com.operations.Matrix.Matrix matrix66 = com.operations.Matrix.MatrixOperations.add(matrix10, matrix65);
        com.operations.Matrix.Matrix matrix67 = com.operations.Matrix.MatrixOperations.multiply(matrix1, matrix66);
        matrix66.print();
        boolean boolean69 = com.operations.Matrix.MatrixUtils.isSymmetric(matrix66);
        // The following exception was thrown during execution in test generation
        try {
            matrix66.setValue((int) (byte) 100, 1, 0.0d);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: Index 100 out of bounds for length 2");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(matrix1);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertArrayEquals(doubleArray4, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertArrayEquals(doubleArray7, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertArrayEquals(doubleArray14, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertArrayEquals(doubleArray17, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 2 + "'", int20 == 2);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 2 + "'", int21 == 2);
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertArrayEquals(doubleArray25, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertArrayEquals(doubleArray28, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(matrix33);
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertArrayEquals(doubleArray36, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertArrayEquals(doubleArray39, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertNotNull(doubleArray46);
        org.junit.Assert.assertArrayEquals(doubleArray46, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertArrayEquals(doubleArray49, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 2 + "'", int52 == 2);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 2 + "'", int53 == 2);
        org.junit.Assert.assertNotNull(doubleArray57);
        org.junit.Assert.assertArrayEquals(doubleArray57, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray60);
        org.junit.Assert.assertArrayEquals(doubleArray60, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray61);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertNotNull(matrix65);
        org.junit.Assert.assertNotNull(matrix66);
        org.junit.Assert.assertNotNull(matrix67);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
    }

    @Test
    public void test3900() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3900");
        double[] doubleArray2 = new double[] { 10, 'a' };
        double[] doubleArray5 = new double[] { 10, 'a' };
        double[][] doubleArray6 = new double[][] { doubleArray2, doubleArray5 };
        com.operations.Matrix.Matrix matrix7 = new com.operations.Matrix.Matrix(doubleArray6);
        com.operations.Matrix.Matrix matrix8 = new com.operations.Matrix.Matrix(doubleArray6);
        com.operations.Matrix.Matrix matrix10 = com.operations.Matrix.MatrixTransformations.rotate2D((double) (short) 100);
        double[] doubleArray13 = new double[] { 137.90576492663388d, (byte) -1 };
        double[] doubleArray14 = com.operations.Matrix.MatrixSolver.solveGaussian(matrix10, doubleArray13);
        com.operations.Matrix.Matrix matrix15 = com.operations.Matrix.MatrixOperations.add(matrix8, matrix10);
        com.operations.Matrix.Matrix matrix16 = com.operations.Matrix.MatrixOperations.transpose(matrix10);
        int int17 = matrix10.getCols();
        com.operations.Matrix.Matrix matrix20 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0L, (double) (byte) 10);
        double[] doubleArray23 = new double[] { 10, 'a' };
        double[] doubleArray26 = new double[] { 10, 'a' };
        double[][] doubleArray27 = new double[][] { doubleArray23, doubleArray26 };
        com.operations.Matrix.Matrix matrix28 = new com.operations.Matrix.Matrix(doubleArray27);
        int int29 = matrix28.getCols();
        int int30 = matrix28.getCols();
        int int31 = matrix28.getCols();
        com.operations.Matrix.Matrix[] matrixArray32 = com.operations.Matrix.MatrixDecompositions.luDecomposition(matrix28);
        com.operations.Matrix.Matrix matrix33 = com.operations.Matrix.MatrixOperations.multiply(matrix20, matrix28);
        com.operations.Matrix.Matrix matrix35 = com.operations.Matrix.MatrixTransformations.rotate2D((double) (short) 100);
        boolean boolean37 = com.operations.Matrix.MatrixUtils.compare(matrix28, matrix35, (double) (byte) 0);
        boolean boolean38 = com.operations.Matrix.MatrixUtils.isSymmetric(matrix35);
        boolean boolean39 = com.operations.Matrix.MatrixUtils.isSquare(matrix35);
        com.operations.Matrix.Matrix matrix41 = com.operations.Matrix.MatrixTransformations.rotate2D((double) (short) 100);
        boolean boolean43 = com.operations.Matrix.MatrixUtils.compare(matrix35, matrix41, (double) (byte) 100);
        matrix41.print();
        com.operations.Matrix.Matrix matrix45 = com.operations.Matrix.MatrixOperations.add(matrix10, matrix41);
        boolean boolean46 = com.operations.Matrix.MatrixUtils.isSymmetric(matrix45);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertArrayEquals(doubleArray2, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertArrayEquals(doubleArray5, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertNotNull(matrix10);
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertArrayEquals(doubleArray13, new double[] { 137.90576492663388d, (-1.0d) }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertArrayEquals(doubleArray14, new double[] { (-24.931892522286255d), (-135.63701830716116d) }, 1.0E-15);
        org.junit.Assert.assertNotNull(matrix15);
        org.junit.Assert.assertNotNull(matrix16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 2 + "'", int17 == 2);
        org.junit.Assert.assertNotNull(matrix20);
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertArrayEquals(doubleArray23, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertArrayEquals(doubleArray26, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 2 + "'", int29 == 2);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 2 + "'", int30 == 2);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 2 + "'", int31 == 2);
        org.junit.Assert.assertNotNull(matrixArray32);
        org.junit.Assert.assertNotNull(matrix33);
        org.junit.Assert.assertNotNull(matrix35);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertNotNull(matrix41);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertNotNull(matrix45);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
    }

    @Test
    public void test3901() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3901");
        com.operations.Matrix.Matrix matrix2 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0L, (double) (byte) 10);
        int int3 = matrix2.getRows();
        com.operations.Matrix.Matrix matrix5 = com.operations.Matrix.MatrixOperations.scalarMultiply(matrix2, (double) 2);
        double double6 = com.operations.Matrix.MatrixUtils.frobeniusNorm(matrix2);
        double[][] doubleArray7 = matrix2.getData();
        com.operations.Matrix.Matrix matrix8 = new com.operations.Matrix.Matrix(doubleArray7);
        matrix8.print();
        com.operations.Matrix.Matrix matrix11 = com.operations.Matrix.MatrixOperations.scalarMultiply(matrix8, 145.11374848717816d);
        double double12 = com.operations.Matrix.MatrixUtils.frobeniusNorm(matrix8);
        org.junit.Assert.assertNotNull(matrix2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 2 + "'", int3 == 2);
        org.junit.Assert.assertNotNull(matrix5);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 10.0d + "'", double6 == 10.0d);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertNotNull(matrix11);
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 10.0d + "'", double12 == 10.0d);
    }

    @Test
    public void test3902() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3902");
        double[] doubleArray2 = new double[] { 10, 'a' };
        double[] doubleArray5 = new double[] { 10, 'a' };
        double[][] doubleArray6 = new double[][] { doubleArray2, doubleArray5 };
        com.operations.Matrix.Matrix matrix7 = new com.operations.Matrix.Matrix(doubleArray6);
        com.operations.Matrix.Matrix matrix8 = new com.operations.Matrix.Matrix(doubleArray6);
        com.operations.Matrix.Matrix[] matrixArray9 = com.operations.Matrix.MatrixDecompositions.luDecomposition(matrix8);
        double double10 = com.operations.Matrix.MatrixUtils.frobeniusNorm(matrix8);
        double[] doubleArray13 = new double[] { 10, 'a' };
        double[] doubleArray16 = new double[] { 10, 'a' };
        double[][] doubleArray17 = new double[][] { doubleArray13, doubleArray16 };
        com.operations.Matrix.Matrix matrix18 = new com.operations.Matrix.Matrix(doubleArray17);
        com.operations.Matrix.Matrix matrix19 = new com.operations.Matrix.Matrix(doubleArray17);
        boolean boolean20 = com.operations.Matrix.MatrixUtils.isSquare(matrix19);
        double[] doubleArray23 = new double[] { 10, 'a' };
        double[] doubleArray26 = new double[] { 10, 'a' };
        double[][] doubleArray27 = new double[][] { doubleArray23, doubleArray26 };
        com.operations.Matrix.Matrix matrix28 = new com.operations.Matrix.Matrix(doubleArray27);
        int int29 = matrix28.getCols();
        int int30 = matrix28.getCols();
        matrix28.print();
        double[] doubleArray34 = new double[] { 10, 'a' };
        double[] doubleArray37 = new double[] { 10, 'a' };
        double[][] doubleArray38 = new double[][] { doubleArray34, doubleArray37 };
        com.operations.Matrix.Matrix matrix39 = new com.operations.Matrix.Matrix(doubleArray38);
        boolean boolean41 = com.operations.Matrix.MatrixUtils.compare(matrix28, matrix39, (double) (-1));
        com.operations.Matrix.Matrix matrix42 = com.operations.Matrix.MatrixOperations.subtract(matrix19, matrix39);
        com.operations.Matrix.Matrix[] matrixArray43 = com.operations.Matrix.MatrixDecompositions.luDecomposition(matrix42);
        double[][] doubleArray44 = matrix42.getData();
        com.operations.Matrix.Matrix matrix47 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0L, (double) (byte) 10);
        double[] doubleArray50 = new double[] { 10, 'a' };
        double[] doubleArray53 = new double[] { 10, 'a' };
        double[][] doubleArray54 = new double[][] { doubleArray50, doubleArray53 };
        com.operations.Matrix.Matrix matrix55 = new com.operations.Matrix.Matrix(doubleArray54);
        int int56 = matrix55.getCols();
        int int57 = matrix55.getCols();
        int int58 = matrix55.getCols();
        com.operations.Matrix.Matrix[] matrixArray59 = com.operations.Matrix.MatrixDecompositions.luDecomposition(matrix55);
        com.operations.Matrix.Matrix matrix60 = com.operations.Matrix.MatrixOperations.multiply(matrix47, matrix55);
        int int61 = matrix55.getRows();
        com.operations.Matrix.Matrix matrix62 = com.operations.Matrix.MatrixOperations.multiply(matrix42, matrix55);
        boolean boolean64 = com.operations.Matrix.MatrixUtils.compare(matrix8, matrix62, (double) 2);
        com.operations.Matrix.Matrix matrix65 = com.operations.Matrix.MatrixOperations.transpose(matrix62);
        com.operations.Matrix.Matrix matrix68 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0L, (double) (byte) 10);
        double[] doubleArray71 = new double[] { 10, 'a' };
        double[] doubleArray74 = new double[] { 10, 'a' };
        double[][] doubleArray75 = new double[][] { doubleArray71, doubleArray74 };
        com.operations.Matrix.Matrix matrix76 = new com.operations.Matrix.Matrix(doubleArray75);
        int int77 = matrix76.getCols();
        int int78 = matrix76.getCols();
        int int79 = matrix76.getCols();
        com.operations.Matrix.Matrix[] matrixArray80 = com.operations.Matrix.MatrixDecompositions.luDecomposition(matrix76);
        com.operations.Matrix.Matrix matrix81 = com.operations.Matrix.MatrixOperations.multiply(matrix68, matrix76);
        com.operations.Matrix.Matrix matrix83 = com.operations.Matrix.MatrixTransformations.rotate2D((double) (short) 100);
        boolean boolean85 = com.operations.Matrix.MatrixUtils.compare(matrix76, matrix83, (double) (byte) 0);
        boolean boolean86 = com.operations.Matrix.MatrixUtils.isSymmetric(matrix83);
        boolean boolean87 = com.operations.Matrix.MatrixUtils.isSquare(matrix83);
        com.operations.Matrix.Matrix matrix89 = com.operations.Matrix.MatrixTransformations.rotate2D((double) (short) 100);
        boolean boolean91 = com.operations.Matrix.MatrixUtils.compare(matrix83, matrix89, (double) (byte) 100);
        com.operations.Matrix.Matrix matrix92 = com.operations.Matrix.MatrixOperations.subtract(matrix65, matrix89);
        com.operations.Matrix.Matrix matrix93 = com.operations.Matrix.MatrixOperations.transpose(matrix65);
        // The following exception was thrown during execution in test generation
        try {
            com.operations.Matrix.Matrix matrix94 = com.operations.Matrix.MatrixDecompositions.choleskyDecomposition(matrix93);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Matrix is not positive definite.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertArrayEquals(doubleArray2, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertArrayEquals(doubleArray5, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertNotNull(matrixArray9);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 137.90576492663388d + "'", double10 == 137.90576492663388d);
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertArrayEquals(doubleArray13, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertArrayEquals(doubleArray16, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertArrayEquals(doubleArray23, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertArrayEquals(doubleArray26, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 2 + "'", int29 == 2);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 2 + "'", int30 == 2);
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertArrayEquals(doubleArray34, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertArrayEquals(doubleArray37, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(matrix42);
        org.junit.Assert.assertNotNull(matrixArray43);
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertNotNull(matrix47);
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertArrayEquals(doubleArray50, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertArrayEquals(doubleArray53, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray54);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 2 + "'", int56 == 2);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 2 + "'", int57 == 2);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 2 + "'", int58 == 2);
        org.junit.Assert.assertNotNull(matrixArray59);
        org.junit.Assert.assertNotNull(matrix60);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 2 + "'", int61 == 2);
        org.junit.Assert.assertNotNull(matrix62);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertNotNull(matrix65);
        org.junit.Assert.assertNotNull(matrix68);
        org.junit.Assert.assertNotNull(doubleArray71);
        org.junit.Assert.assertArrayEquals(doubleArray71, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray74);
        org.junit.Assert.assertArrayEquals(doubleArray74, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray75);
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + 2 + "'", int77 == 2);
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + 2 + "'", int78 == 2);
        org.junit.Assert.assertTrue("'" + int79 + "' != '" + 2 + "'", int79 == 2);
        org.junit.Assert.assertNotNull(matrixArray80);
        org.junit.Assert.assertNotNull(matrix81);
        org.junit.Assert.assertNotNull(matrix83);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + true + "'", boolean87 == true);
        org.junit.Assert.assertNotNull(matrix89);
        org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + true + "'", boolean91 == true);
        org.junit.Assert.assertNotNull(matrix92);
        org.junit.Assert.assertNotNull(matrix93);
    }

    @Test
    public void test3903() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3903");
        com.operations.Matrix.Matrix matrix2 = com.operations.Matrix.MatrixTransformations.project2D(10.0d, (double) 1);
        double[][] doubleArray3 = matrix2.getData();
        com.operations.Matrix.Matrix matrix4 = new com.operations.Matrix.Matrix(doubleArray3);
        com.operations.Matrix.Matrix matrix5 = new com.operations.Matrix.Matrix(doubleArray3);
        double double6 = com.operations.Matrix.MatrixUtils.frobeniusNorm(matrix5);
        org.junit.Assert.assertNotNull(matrix2);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 10.04987562112089d + "'", double6 == 10.04987562112089d);
    }

    @Test
    public void test3904() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3904");
        com.operations.Matrix.Matrix matrix2 = com.operations.Matrix.MatrixTransformations.project2D((double) ' ', 0.0d);
        boolean boolean3 = com.operations.Matrix.MatrixUtils.isSymmetric(matrix2);
        int int4 = matrix2.getRows();
        double[][] doubleArray5 = matrix2.getData();
        com.operations.Matrix.Matrix matrix6 = new com.operations.Matrix.Matrix(doubleArray5);
        com.operations.Matrix.Matrix matrix7 = com.operations.Matrix.MatrixOperations.transpose(matrix6);
        org.junit.Assert.assertNotNull(matrix2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 2 + "'", int4 == 2);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertNotNull(matrix7);
    }

    @Test
    public void test3905() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3905");
        com.operations.Matrix.Matrix matrix2 = com.operations.Matrix.MatrixTransformations.scale2D(640031.99920004d, 52.952809179494906d);
        com.operations.Matrix.Matrix matrix5 = com.operations.Matrix.MatrixTransformations.project2D((double) (byte) 100, 32.0d);
        boolean boolean6 = com.operations.Matrix.MatrixUtils.isSquare(matrix5);
        com.operations.Matrix.Matrix matrix7 = com.operations.Matrix.MatrixDecompositions.choleskyDecomposition(matrix5);
        com.operations.Matrix.Matrix matrix10 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0L, (double) (byte) 10);
        int int11 = matrix10.getRows();
        com.operations.Matrix.Matrix matrix14 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0L, (double) (byte) 10);
        int int15 = matrix14.getRows();
        com.operations.Matrix.Matrix matrix17 = com.operations.Matrix.MatrixOperations.scalarMultiply(matrix14, (double) 2);
        com.operations.Matrix.Matrix matrix18 = com.operations.Matrix.MatrixOperations.subtract(matrix10, matrix14);
        com.operations.Matrix.Matrix matrix21 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0L, (double) (byte) 10);
        int int22 = matrix21.getRows();
        com.operations.Matrix.Matrix matrix28 = com.operations.Matrix.MatrixUtils.generateRandomMatrix(100, (int) (byte) 1, (int) '#', (int) '#', 1L);
        boolean boolean30 = com.operations.Matrix.MatrixUtils.compare(matrix21, matrix28, (double) 1.0f);
        com.operations.Matrix.Matrix matrix32 = com.operations.Matrix.MatrixOperations.scalarMultiply(matrix21, (double) 1L);
        boolean boolean34 = com.operations.Matrix.MatrixUtils.compare(matrix18, matrix32, 0.0d);
        com.operations.Matrix.Matrix matrix35 = com.operations.Matrix.MatrixOperations.add(matrix5, matrix18);
        com.operations.Matrix.Matrix matrix38 = com.operations.Matrix.MatrixTransformations.scale2D((double) (byte) 100, 260.95643973734866d);
        com.operations.Matrix.Matrix matrix41 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0L, (double) (byte) 10);
        double[] doubleArray44 = new double[] { 10, 'a' };
        double[] doubleArray47 = new double[] { 10, 'a' };
        double[][] doubleArray48 = new double[][] { doubleArray44, doubleArray47 };
        com.operations.Matrix.Matrix matrix49 = new com.operations.Matrix.Matrix(doubleArray48);
        int int50 = matrix49.getCols();
        int int51 = matrix49.getCols();
        int int52 = matrix49.getCols();
        com.operations.Matrix.Matrix[] matrixArray53 = com.operations.Matrix.MatrixDecompositions.luDecomposition(matrix49);
        com.operations.Matrix.Matrix matrix54 = com.operations.Matrix.MatrixOperations.multiply(matrix41, matrix49);
        com.operations.Matrix.Matrix matrix56 = com.operations.Matrix.MatrixTransformations.rotate2D((double) (short) 100);
        boolean boolean58 = com.operations.Matrix.MatrixUtils.compare(matrix49, matrix56, (double) (byte) 0);
        com.operations.Matrix.Matrix[] matrixArray59 = com.operations.Matrix.MatrixDecompositions.luDecomposition(matrix49);
        com.operations.Matrix.Matrix matrix60 = com.operations.Matrix.MatrixDecompositions.choleskyDecomposition(matrix49);
        com.operations.Matrix.Matrix matrix61 = com.operations.Matrix.MatrixOperations.transpose(matrix60);
        boolean boolean63 = com.operations.Matrix.MatrixUtils.compare(matrix38, matrix60, (double) 100);
        boolean boolean65 = com.operations.Matrix.MatrixUtils.compare(matrix5, matrix60, 14.142135623730951d);
        com.operations.Matrix.Matrix matrix66 = com.operations.Matrix.MatrixOperations.subtract(matrix2, matrix5);
        int int67 = matrix2.getCols();
        org.junit.Assert.assertNotNull(matrix2);
        org.junit.Assert.assertNotNull(matrix5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(matrix7);
        org.junit.Assert.assertNotNull(matrix10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 2 + "'", int11 == 2);
        org.junit.Assert.assertNotNull(matrix14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 2 + "'", int15 == 2);
        org.junit.Assert.assertNotNull(matrix17);
        org.junit.Assert.assertNotNull(matrix18);
        org.junit.Assert.assertNotNull(matrix21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 2 + "'", int22 == 2);
        org.junit.Assert.assertNotNull(matrix28);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(matrix32);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(matrix35);
        org.junit.Assert.assertNotNull(matrix38);
        org.junit.Assert.assertNotNull(matrix41);
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertArrayEquals(doubleArray44, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertArrayEquals(doubleArray47, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 2 + "'", int50 == 2);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 2 + "'", int51 == 2);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 2 + "'", int52 == 2);
        org.junit.Assert.assertNotNull(matrixArray53);
        org.junit.Assert.assertNotNull(matrix54);
        org.junit.Assert.assertNotNull(matrix56);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(matrixArray59);
        org.junit.Assert.assertNotNull(matrix60);
        org.junit.Assert.assertNotNull(matrix61);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertNotNull(matrix66);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 2 + "'", int67 == 2);
    }

    @Test
    public void test3906() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3906");
        com.operations.Matrix.Matrix matrix2 = com.operations.Matrix.MatrixTransformations.scale2D(131.06486943494812d, (double) (byte) 100);
        int int3 = matrix2.getRows();
        org.junit.Assert.assertNotNull(matrix2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 2 + "'", int3 == 2);
    }

    @Test
    public void test3907() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3907");
        com.operations.Matrix.Matrix matrix1 = com.operations.Matrix.MatrixTransformations.rotate2D(400.0d);
        boolean boolean2 = com.operations.Matrix.MatrixUtils.isSymmetric(matrix1);
        org.junit.Assert.assertNotNull(matrix1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
    }

    @Test
    public void test3908() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3908");
        com.operations.Matrix.Matrix matrix2 = com.operations.Matrix.MatrixTransformations.scale2D(0.0d, 65.19779036970327d);
        com.operations.Matrix.Matrix matrix3 = com.operations.Matrix.MatrixOperations.transpose(matrix2);
        com.operations.Matrix.Matrix matrix5 = com.operations.Matrix.MatrixTransformations.rotate2D((double) (-1L));
        com.operations.Matrix.Matrix matrix7 = com.operations.Matrix.MatrixTransformations.rotate2D((double) (short) 100);
        double[] doubleArray10 = new double[] { 137.90576492663388d, (byte) -1 };
        double[] doubleArray11 = com.operations.Matrix.MatrixSolver.solveGaussian(matrix7, doubleArray10);
        double[] doubleArray12 = com.operations.Matrix.MatrixSolver.solveGaussian(matrix5, doubleArray10);
        double[][] doubleArray13 = matrix5.getData();
        com.operations.Matrix.Matrix matrix16 = com.operations.Matrix.MatrixTransformations.project2D((double) ' ', 0.0d);
        double[] doubleArray19 = new double[] { 10, 'a' };
        double[] doubleArray22 = new double[] { 10, 'a' };
        double[][] doubleArray23 = new double[][] { doubleArray19, doubleArray22 };
        com.operations.Matrix.Matrix matrix24 = new com.operations.Matrix.Matrix(doubleArray23);
        int int25 = matrix24.getCols();
        boolean boolean26 = com.operations.Matrix.MatrixUtils.isSquare(matrix24);
        com.operations.Matrix.Matrix matrix27 = com.operations.Matrix.MatrixOperations.transpose(matrix24);
        int int28 = matrix27.getRows();
        com.operations.Matrix.Matrix matrix31 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0L, (double) (byte) 10);
        double[] doubleArray34 = new double[] { 10, 'a' };
        double[] doubleArray37 = new double[] { 10, 'a' };
        double[][] doubleArray38 = new double[][] { doubleArray34, doubleArray37 };
        com.operations.Matrix.Matrix matrix39 = new com.operations.Matrix.Matrix(doubleArray38);
        int int40 = matrix39.getCols();
        int int41 = matrix39.getCols();
        int int42 = matrix39.getCols();
        com.operations.Matrix.Matrix[] matrixArray43 = com.operations.Matrix.MatrixDecompositions.luDecomposition(matrix39);
        com.operations.Matrix.Matrix matrix44 = com.operations.Matrix.MatrixOperations.multiply(matrix31, matrix39);
        com.operations.Matrix.Matrix matrix46 = com.operations.Matrix.MatrixTransformations.rotate2D((double) (short) 100);
        boolean boolean48 = com.operations.Matrix.MatrixUtils.compare(matrix39, matrix46, (double) (byte) 0);
        com.operations.Matrix.Matrix matrix49 = com.operations.Matrix.MatrixOperations.multiply(matrix27, matrix39);
        com.operations.Matrix.Matrix matrix50 = com.operations.Matrix.MatrixOperations.add(matrix16, matrix39);
        double[][] doubleArray51 = matrix50.getData();
        com.operations.Matrix.Matrix matrix52 = com.operations.Matrix.MatrixOperations.add(matrix5, matrix50);
        boolean boolean54 = com.operations.Matrix.MatrixUtils.compare(matrix2, matrix5, 59.62334183013888d);
        org.junit.Assert.assertNotNull(matrix2);
        org.junit.Assert.assertNotNull(matrix3);
        org.junit.Assert.assertNotNull(matrix5);
        org.junit.Assert.assertNotNull(matrix7);
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertArrayEquals(doubleArray10, new double[] { 137.90576492663388d, (-1.0d) }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertArrayEquals(doubleArray11, new double[] { (-24.931892522286255d), (-135.63701830716116d) }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertArrayEquals(doubleArray12, new double[] { 137.90221361711127d, 1.4069397643877004d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertNotNull(matrix16);
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertArrayEquals(doubleArray19, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertArrayEquals(doubleArray22, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 2 + "'", int25 == 2);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNotNull(matrix27);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 2 + "'", int28 == 2);
        org.junit.Assert.assertNotNull(matrix31);
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertArrayEquals(doubleArray34, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertArrayEquals(doubleArray37, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 2 + "'", int40 == 2);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 2 + "'", int41 == 2);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 2 + "'", int42 == 2);
        org.junit.Assert.assertNotNull(matrixArray43);
        org.junit.Assert.assertNotNull(matrix44);
        org.junit.Assert.assertNotNull(matrix46);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(matrix49);
        org.junit.Assert.assertNotNull(matrix50);
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertNotNull(matrix52);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
    }

    @Test
    public void test3909() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3909");
        com.operations.Matrix.Matrix matrix2 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0L, (double) (byte) 10);
        double[] doubleArray5 = new double[] { 10, 'a' };
        double[] doubleArray8 = new double[] { 10, 'a' };
        double[][] doubleArray9 = new double[][] { doubleArray5, doubleArray8 };
        com.operations.Matrix.Matrix matrix10 = new com.operations.Matrix.Matrix(doubleArray9);
        int int11 = matrix10.getCols();
        int int12 = matrix10.getCols();
        int int13 = matrix10.getCols();
        com.operations.Matrix.Matrix[] matrixArray14 = com.operations.Matrix.MatrixDecompositions.luDecomposition(matrix10);
        com.operations.Matrix.Matrix matrix15 = com.operations.Matrix.MatrixOperations.multiply(matrix2, matrix10);
        com.operations.Matrix.Matrix matrix17 = com.operations.Matrix.MatrixTransformations.rotate2D((double) (short) 100);
        boolean boolean19 = com.operations.Matrix.MatrixUtils.compare(matrix10, matrix17, (double) (byte) 0);
        double[] doubleArray22 = new double[] { 10, 'a' };
        double[] doubleArray25 = new double[] { 10, 'a' };
        double[][] doubleArray26 = new double[][] { doubleArray22, doubleArray25 };
        com.operations.Matrix.Matrix matrix27 = new com.operations.Matrix.Matrix(doubleArray26);
        com.operations.Matrix.Matrix matrix28 = new com.operations.Matrix.Matrix(doubleArray26);
        com.operations.Matrix.Matrix matrix29 = new com.operations.Matrix.Matrix(doubleArray26);
        boolean boolean31 = com.operations.Matrix.MatrixUtils.compare(matrix10, matrix29, (double) (-1));
        double[] doubleArray34 = new double[] { 10, 'a' };
        double[] doubleArray37 = new double[] { 10, 'a' };
        double[][] doubleArray38 = new double[][] { doubleArray34, doubleArray37 };
        com.operations.Matrix.Matrix matrix39 = new com.operations.Matrix.Matrix(doubleArray38);
        com.operations.Matrix.Matrix matrix40 = new com.operations.Matrix.Matrix(doubleArray38);
        boolean boolean41 = com.operations.Matrix.MatrixUtils.isSquare(matrix40);
        com.operations.Matrix.Matrix matrix42 = com.operations.Matrix.MatrixOperations.multiply(matrix29, matrix40);
        com.operations.Matrix.Matrix matrix45 = com.operations.Matrix.MatrixTransformations.project2D((double) ' ', 0.0d);
        double[] doubleArray48 = new double[] { 10, 'a' };
        double[] doubleArray51 = new double[] { 10, 'a' };
        double[][] doubleArray52 = new double[][] { doubleArray48, doubleArray51 };
        com.operations.Matrix.Matrix matrix53 = new com.operations.Matrix.Matrix(doubleArray52);
        int int54 = matrix53.getCols();
        boolean boolean55 = com.operations.Matrix.MatrixUtils.isSquare(matrix53);
        com.operations.Matrix.Matrix matrix56 = com.operations.Matrix.MatrixOperations.transpose(matrix53);
        int int57 = matrix56.getRows();
        com.operations.Matrix.Matrix matrix60 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0L, (double) (byte) 10);
        double[] doubleArray63 = new double[] { 10, 'a' };
        double[] doubleArray66 = new double[] { 10, 'a' };
        double[][] doubleArray67 = new double[][] { doubleArray63, doubleArray66 };
        com.operations.Matrix.Matrix matrix68 = new com.operations.Matrix.Matrix(doubleArray67);
        int int69 = matrix68.getCols();
        int int70 = matrix68.getCols();
        int int71 = matrix68.getCols();
        com.operations.Matrix.Matrix[] matrixArray72 = com.operations.Matrix.MatrixDecompositions.luDecomposition(matrix68);
        com.operations.Matrix.Matrix matrix73 = com.operations.Matrix.MatrixOperations.multiply(matrix60, matrix68);
        com.operations.Matrix.Matrix matrix75 = com.operations.Matrix.MatrixTransformations.rotate2D((double) (short) 100);
        boolean boolean77 = com.operations.Matrix.MatrixUtils.compare(matrix68, matrix75, (double) (byte) 0);
        com.operations.Matrix.Matrix matrix78 = com.operations.Matrix.MatrixOperations.multiply(matrix56, matrix68);
        com.operations.Matrix.Matrix matrix79 = com.operations.Matrix.MatrixOperations.add(matrix45, matrix68);
        com.operations.Matrix.Matrix matrix80 = com.operations.Matrix.MatrixOperations.transpose(matrix45);
        com.operations.Matrix.Matrix matrix83 = com.operations.Matrix.MatrixTransformations.scale2D((double) (byte) 100, 350.0d);
        double double84 = com.operations.Matrix.MatrixUtils.frobeniusNorm(matrix83);
        int int85 = matrix83.getCols();
        com.operations.Matrix.Matrix matrix86 = com.operations.Matrix.MatrixOperations.multiply(matrix45, matrix83);
        int int87 = matrix45.getRows();
        com.operations.Matrix.Matrix matrix88 = com.operations.Matrix.MatrixOperations.multiply(matrix42, matrix45);
        com.operations.Matrix.Matrix matrix90 = com.operations.Matrix.MatrixOperations.scalarMultiply(matrix42, (double) 10.0f);
        com.operations.Matrix.Matrix matrix92 = com.operations.Matrix.MatrixTransformations.rotate2D((double) 'a');
        com.operations.Matrix.Matrix matrix94 = com.operations.Matrix.MatrixTransformations.rotate2D((double) 1.0f);
        com.operations.Matrix.Matrix matrix95 = com.operations.Matrix.MatrixOperations.add(matrix92, matrix94);
        com.operations.Matrix.Matrix matrix96 = com.operations.Matrix.MatrixOperations.subtract(matrix90, matrix92);
        int int97 = matrix96.getRows();
        org.junit.Assert.assertNotNull(matrix2);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertArrayEquals(doubleArray5, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertArrayEquals(doubleArray8, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 2 + "'", int11 == 2);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 2 + "'", int12 == 2);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 2 + "'", int13 == 2);
        org.junit.Assert.assertNotNull(matrixArray14);
        org.junit.Assert.assertNotNull(matrix15);
        org.junit.Assert.assertNotNull(matrix17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertArrayEquals(doubleArray22, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertArrayEquals(doubleArray25, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertArrayEquals(doubleArray34, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertArrayEquals(doubleArray37, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertNotNull(matrix42);
        org.junit.Assert.assertNotNull(matrix45);
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertArrayEquals(doubleArray48, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertArrayEquals(doubleArray51, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 2 + "'", int54 == 2);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + true + "'", boolean55 == true);
        org.junit.Assert.assertNotNull(matrix56);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 2 + "'", int57 == 2);
        org.junit.Assert.assertNotNull(matrix60);
        org.junit.Assert.assertNotNull(doubleArray63);
        org.junit.Assert.assertArrayEquals(doubleArray63, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray66);
        org.junit.Assert.assertArrayEquals(doubleArray66, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray67);
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 2 + "'", int69 == 2);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 2 + "'", int70 == 2);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 2 + "'", int71 == 2);
        org.junit.Assert.assertNotNull(matrixArray72);
        org.junit.Assert.assertNotNull(matrix73);
        org.junit.Assert.assertNotNull(matrix75);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertNotNull(matrix78);
        org.junit.Assert.assertNotNull(matrix79);
        org.junit.Assert.assertNotNull(matrix80);
        org.junit.Assert.assertNotNull(matrix83);
        org.junit.Assert.assertTrue("'" + double84 + "' != '" + 364.0054944640259d + "'", double84 == 364.0054944640259d);
        org.junit.Assert.assertTrue("'" + int85 + "' != '" + 2 + "'", int85 == 2);
        org.junit.Assert.assertNotNull(matrix86);
        org.junit.Assert.assertTrue("'" + int87 + "' != '" + 2 + "'", int87 == 2);
        org.junit.Assert.assertNotNull(matrix88);
        org.junit.Assert.assertNotNull(matrix90);
        org.junit.Assert.assertNotNull(matrix92);
        org.junit.Assert.assertNotNull(matrix94);
        org.junit.Assert.assertNotNull(matrix95);
        org.junit.Assert.assertNotNull(matrix96);
        org.junit.Assert.assertTrue("'" + int97 + "' != '" + 2 + "'", int97 == 2);
    }

    @Test
    public void test3910() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3910");
        com.operations.Matrix.Matrix matrix2 = com.operations.Matrix.MatrixTransformations.project2D(260.95643973734866d, 137.15495886388925d);
        double[][] doubleArray3 = matrix2.getData();
        com.operations.Matrix.Matrix matrix6 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0L, (double) (byte) 10);
        int int7 = matrix6.getRows();
        com.operations.Matrix.Matrix matrix9 = com.operations.Matrix.MatrixOperations.scalarMultiply(matrix6, (double) 2);
        matrix6.print();
        com.operations.Matrix.Matrix matrix16 = com.operations.Matrix.MatrixUtils.generateRandomMatrix((int) (short) 10, (int) (short) 100, (int) (byte) -1, (-1), (long) (byte) 10);
        boolean boolean18 = com.operations.Matrix.MatrixUtils.compare(matrix6, matrix16, (double) (short) 10);
        boolean boolean20 = com.operations.Matrix.MatrixUtils.compare(matrix2, matrix6, (double) 100L);
        com.operations.Matrix.Matrix matrix21 = com.operations.Matrix.MatrixDecompositions.choleskyDecomposition(matrix2);
        org.junit.Assert.assertNotNull(matrix2);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertNotNull(matrix6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 2 + "'", int7 == 2);
        org.junit.Assert.assertNotNull(matrix9);
        org.junit.Assert.assertNotNull(matrix16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(matrix21);
    }

    @Test
    public void test3911() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3911");
        // The following exception was thrown during execution in test generation
        try {
            com.operations.Matrix.Matrix matrix5 = com.operations.Matrix.MatrixUtils.generateRandomMatrix((-1), (int) (byte) 0, (int) ' ', (int) (byte) 1, (long) ' ');
            org.junit.Assert.fail("Expected exception of type java.lang.NegativeArraySizeException; message: -1");
        } catch (java.lang.NegativeArraySizeException e) {
            // Expected exception.
        }
    }

    @Test
    public void test3912() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3912");
        com.operations.Matrix.Matrix matrix2 = com.operations.Matrix.MatrixTransformations.project2D(0.984807753012208d, 10.0d);
        boolean boolean3 = com.operations.Matrix.MatrixUtils.isSymmetric(matrix2);
        org.junit.Assert.assertNotNull(matrix2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
    }

    @Test
    public void test3913() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3913");
        com.operations.Matrix.Matrix matrix2 = new com.operations.Matrix.Matrix((int) ' ', (int) (byte) 0);
        boolean boolean3 = com.operations.Matrix.MatrixUtils.isSquare(matrix2);
        double[][] doubleArray4 = matrix2.getData();
        int int5 = matrix2.getRows();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 32 + "'", int5 == 32);
    }

    @Test
    public void test3914() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3914");
        com.operations.Matrix.Matrix matrix2 = new com.operations.Matrix.Matrix((int) (byte) 10, (int) (byte) 100);
    }

    @Test
    public void test3915() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3915");
        com.operations.Matrix.Matrix matrix5 = com.operations.Matrix.MatrixUtils.generateRandomMatrix((int) (byte) 1, 0, (int) (short) 10, (int) (short) 1, 1L);
        com.operations.Matrix.Matrix matrix8 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0L, (double) (byte) 10);
        double[] doubleArray11 = new double[] { 10, 'a' };
        double[] doubleArray14 = new double[] { 10, 'a' };
        double[][] doubleArray15 = new double[][] { doubleArray11, doubleArray14 };
        com.operations.Matrix.Matrix matrix16 = new com.operations.Matrix.Matrix(doubleArray15);
        int int17 = matrix16.getCols();
        int int18 = matrix16.getCols();
        int int19 = matrix16.getCols();
        com.operations.Matrix.Matrix[] matrixArray20 = com.operations.Matrix.MatrixDecompositions.luDecomposition(matrix16);
        com.operations.Matrix.Matrix matrix21 = com.operations.Matrix.MatrixOperations.multiply(matrix8, matrix16);
        com.operations.Matrix.Matrix matrix23 = com.operations.Matrix.MatrixTransformations.rotate2D((double) (short) 100);
        boolean boolean25 = com.operations.Matrix.MatrixUtils.compare(matrix16, matrix23, (double) (byte) 0);
        double[] doubleArray28 = new double[] { 10, 'a' };
        double[] doubleArray31 = new double[] { 10, 'a' };
        double[][] doubleArray32 = new double[][] { doubleArray28, doubleArray31 };
        com.operations.Matrix.Matrix matrix33 = new com.operations.Matrix.Matrix(doubleArray32);
        com.operations.Matrix.Matrix matrix34 = new com.operations.Matrix.Matrix(doubleArray32);
        com.operations.Matrix.Matrix matrix35 = new com.operations.Matrix.Matrix(doubleArray32);
        boolean boolean37 = com.operations.Matrix.MatrixUtils.compare(matrix16, matrix35, (double) (-1));
        double[] doubleArray40 = new double[] { 10, 'a' };
        double[] doubleArray43 = new double[] { 10, 'a' };
        double[][] doubleArray44 = new double[][] { doubleArray40, doubleArray43 };
        com.operations.Matrix.Matrix matrix45 = new com.operations.Matrix.Matrix(doubleArray44);
        com.operations.Matrix.Matrix matrix46 = new com.operations.Matrix.Matrix(doubleArray44);
        boolean boolean47 = com.operations.Matrix.MatrixUtils.isSquare(matrix46);
        com.operations.Matrix.Matrix matrix48 = com.operations.Matrix.MatrixOperations.multiply(matrix35, matrix46);
        com.operations.Matrix.Matrix matrix49 = com.operations.Matrix.MatrixDecompositions.choleskyDecomposition(matrix35);
        double[][] doubleArray50 = matrix49.getData();
        // The following exception was thrown during execution in test generation
        try {
            com.operations.Matrix.Matrix matrix51 = com.operations.Matrix.MatrixOperations.multiply(matrix5, matrix49);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Matrix A's columns must match Matrix B's rows for multiplication.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(matrix5);
        org.junit.Assert.assertNotNull(matrix8);
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertArrayEquals(doubleArray11, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertArrayEquals(doubleArray14, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 2 + "'", int17 == 2);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 2 + "'", int18 == 2);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 2 + "'", int19 == 2);
        org.junit.Assert.assertNotNull(matrixArray20);
        org.junit.Assert.assertNotNull(matrix21);
        org.junit.Assert.assertNotNull(matrix23);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertArrayEquals(doubleArray28, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertArrayEquals(doubleArray31, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertArrayEquals(doubleArray40, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertArrayEquals(doubleArray43, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        org.junit.Assert.assertNotNull(matrix48);
        org.junit.Assert.assertNotNull(matrix49);
        org.junit.Assert.assertNotNull(doubleArray50);
    }

    @Test
    public void test3916() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3916");
        com.operations.Matrix.Matrix matrix2 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0L, (double) (byte) 10);
        int int3 = matrix2.getRows();
        com.operations.Matrix.Matrix matrix5 = com.operations.Matrix.MatrixOperations.scalarMultiply(matrix2, (double) 2);
        matrix2.print();
        com.operations.Matrix.Matrix matrix8 = com.operations.Matrix.MatrixOperations.scalarMultiply(matrix2, 100.00499987500625d);
        com.operations.Matrix.Matrix[] matrixArray9 = com.operations.Matrix.MatrixDecompositions.luDecomposition(matrix2);
        org.junit.Assert.assertNotNull(matrix2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 2 + "'", int3 == 2);
        org.junit.Assert.assertNotNull(matrix5);
        org.junit.Assert.assertNotNull(matrix8);
        org.junit.Assert.assertNotNull(matrixArray9);
    }

    @Test
    public void test3917() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3917");
        com.operations.Matrix.Matrix matrix2 = com.operations.Matrix.MatrixTransformations.project2D(137.13497001129946d, 137.15495886388925d);
        // The following exception was thrown during execution in test generation
        try {
            matrix2.setValue((int) (byte) 10, (int) '#', (double) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: Index 10 out of bounds for length 2");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(matrix2);
    }

    @Test
    public void test3918() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3918");
        com.operations.Matrix.Matrix matrix1 = com.operations.Matrix.MatrixTransformations.rotate2D((double) '4');
        double[] doubleArray4 = new double[] { 10, 'a' };
        double[] doubleArray7 = new double[] { 10, 'a' };
        double[][] doubleArray8 = new double[][] { doubleArray4, doubleArray7 };
        com.operations.Matrix.Matrix matrix9 = new com.operations.Matrix.Matrix(doubleArray8);
        com.operations.Matrix.Matrix matrix10 = new com.operations.Matrix.Matrix(doubleArray8);
        com.operations.Matrix.Matrix matrix12 = com.operations.Matrix.MatrixTransformations.rotate2D((double) (short) 100);
        double[] doubleArray15 = new double[] { 137.90576492663388d, (byte) -1 };
        double[] doubleArray16 = com.operations.Matrix.MatrixSolver.solveGaussian(matrix12, doubleArray15);
        com.operations.Matrix.Matrix matrix17 = com.operations.Matrix.MatrixOperations.add(matrix10, matrix12);
        boolean boolean18 = com.operations.Matrix.MatrixUtils.isSymmetric(matrix17);
        boolean boolean20 = com.operations.Matrix.MatrixUtils.compare(matrix1, matrix17, 364.0054944640259d);
        com.operations.Matrix.Matrix matrix23 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0L, (double) (byte) 10);
        double[] doubleArray26 = new double[] { 10, 'a' };
        double[] doubleArray29 = new double[] { 10, 'a' };
        double[][] doubleArray30 = new double[][] { doubleArray26, doubleArray29 };
        com.operations.Matrix.Matrix matrix31 = new com.operations.Matrix.Matrix(doubleArray30);
        int int32 = matrix31.getCols();
        int int33 = matrix31.getCols();
        int int34 = matrix31.getCols();
        com.operations.Matrix.Matrix[] matrixArray35 = com.operations.Matrix.MatrixDecompositions.luDecomposition(matrix31);
        com.operations.Matrix.Matrix matrix36 = com.operations.Matrix.MatrixOperations.multiply(matrix23, matrix31);
        com.operations.Matrix.Matrix matrix38 = com.operations.Matrix.MatrixTransformations.rotate2D((double) (short) 100);
        boolean boolean40 = com.operations.Matrix.MatrixUtils.compare(matrix31, matrix38, (double) (byte) 0);
        double[] doubleArray43 = new double[] { 10, 'a' };
        double[] doubleArray46 = new double[] { 10, 'a' };
        double[][] doubleArray47 = new double[][] { doubleArray43, doubleArray46 };
        com.operations.Matrix.Matrix matrix48 = new com.operations.Matrix.Matrix(doubleArray47);
        com.operations.Matrix.Matrix matrix49 = new com.operations.Matrix.Matrix(doubleArray47);
        com.operations.Matrix.Matrix matrix50 = new com.operations.Matrix.Matrix(doubleArray47);
        boolean boolean52 = com.operations.Matrix.MatrixUtils.compare(matrix31, matrix50, (double) (-1));
        com.operations.Matrix.Matrix matrix55 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0L, (double) (byte) 10);
        double[] doubleArray58 = new double[] { 10, 'a' };
        double[] doubleArray61 = new double[] { 10, 'a' };
        double[][] doubleArray62 = new double[][] { doubleArray58, doubleArray61 };
        com.operations.Matrix.Matrix matrix63 = new com.operations.Matrix.Matrix(doubleArray62);
        int int64 = matrix63.getCols();
        int int65 = matrix63.getCols();
        int int66 = matrix63.getCols();
        com.operations.Matrix.Matrix[] matrixArray67 = com.operations.Matrix.MatrixDecompositions.luDecomposition(matrix63);
        com.operations.Matrix.Matrix matrix68 = com.operations.Matrix.MatrixOperations.multiply(matrix55, matrix63);
        boolean boolean70 = com.operations.Matrix.MatrixUtils.compare(matrix50, matrix55, (double) 10L);
        boolean boolean72 = com.operations.Matrix.MatrixUtils.compare(matrix17, matrix55, (double) (-1L));
        com.operations.Matrix.Matrix matrix74 = com.operations.Matrix.MatrixOperations.scalarMultiply(matrix55, (double) (byte) 0);
        boolean boolean75 = com.operations.Matrix.MatrixUtils.isSquare(matrix55);
        org.junit.Assert.assertNotNull(matrix1);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertArrayEquals(doubleArray4, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertArrayEquals(doubleArray7, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertNotNull(matrix12);
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertArrayEquals(doubleArray15, new double[] { 137.90576492663388d, (-1.0d) }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertArrayEquals(doubleArray16, new double[] { (-24.931892522286255d), (-135.63701830716116d) }, 1.0E-15);
        org.junit.Assert.assertNotNull(matrix17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertNotNull(matrix23);
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertArrayEquals(doubleArray26, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertArrayEquals(doubleArray29, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 2 + "'", int32 == 2);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 2 + "'", int33 == 2);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 2 + "'", int34 == 2);
        org.junit.Assert.assertNotNull(matrixArray35);
        org.junit.Assert.assertNotNull(matrix36);
        org.junit.Assert.assertNotNull(matrix38);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertArrayEquals(doubleArray43, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray46);
        org.junit.Assert.assertArrayEquals(doubleArray46, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(matrix55);
        org.junit.Assert.assertNotNull(doubleArray58);
        org.junit.Assert.assertArrayEquals(doubleArray58, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray61);
        org.junit.Assert.assertArrayEquals(doubleArray61, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray62);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 2 + "'", int64 == 2);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 2 + "'", int65 == 2);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 2 + "'", int66 == 2);
        org.junit.Assert.assertNotNull(matrixArray67);
        org.junit.Assert.assertNotNull(matrix68);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertNotNull(matrix74);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + true + "'", boolean75 == true);
    }

    @Test
    public void test3919() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3919");
        com.operations.Matrix.Matrix matrix1 = com.operations.Matrix.MatrixTransformations.rotate2D((double) (short) 100);
        double[] doubleArray4 = new double[] { 137.90576492663388d, (byte) -1 };
        double[] doubleArray5 = com.operations.Matrix.MatrixSolver.solveGaussian(matrix1, doubleArray4);
        com.operations.Matrix.Matrix matrix8 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0L, (double) (byte) 10);
        double[] doubleArray11 = new double[] { 10, 'a' };
        double[] doubleArray14 = new double[] { 10, 'a' };
        double[][] doubleArray15 = new double[][] { doubleArray11, doubleArray14 };
        com.operations.Matrix.Matrix matrix16 = new com.operations.Matrix.Matrix(doubleArray15);
        int int17 = matrix16.getCols();
        int int18 = matrix16.getCols();
        int int19 = matrix16.getCols();
        com.operations.Matrix.Matrix[] matrixArray20 = com.operations.Matrix.MatrixDecompositions.luDecomposition(matrix16);
        com.operations.Matrix.Matrix matrix21 = com.operations.Matrix.MatrixOperations.multiply(matrix8, matrix16);
        boolean boolean23 = com.operations.Matrix.MatrixUtils.compare(matrix1, matrix8, (double) (-1L));
        com.operations.Matrix.Matrix matrix25 = com.operations.Matrix.MatrixTransformations.rotate2D((-1.0d));
        com.operations.Matrix.Matrix matrix27 = com.operations.Matrix.MatrixTransformations.rotate2D((double) (-1L));
        com.operations.Matrix.Matrix matrix29 = com.operations.Matrix.MatrixTransformations.rotate2D((double) (short) 100);
        double[] doubleArray32 = new double[] { 137.90576492663388d, (byte) -1 };
        double[] doubleArray33 = com.operations.Matrix.MatrixSolver.solveGaussian(matrix29, doubleArray32);
        double[] doubleArray34 = com.operations.Matrix.MatrixSolver.solveGaussian(matrix27, doubleArray32);
        double[] doubleArray35 = com.operations.Matrix.MatrixSolver.solveGaussian(matrix25, doubleArray32);
        boolean boolean37 = com.operations.Matrix.MatrixUtils.compare(matrix8, matrix25, (double) '4');
        // The following exception was thrown during execution in test generation
        try {
            double double40 = matrix8.getValue(35, (int) (byte) 10);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(matrix1);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertArrayEquals(doubleArray4, new double[] { 137.90576492663388d, (-1.0d) }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertArrayEquals(doubleArray5, new double[] { (-24.931892522286255d), (-135.63701830716116d) }, 1.0E-15);
        org.junit.Assert.assertNotNull(matrix8);
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertArrayEquals(doubleArray11, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertArrayEquals(doubleArray14, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 2 + "'", int17 == 2);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 2 + "'", int18 == 2);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 2 + "'", int19 == 2);
        org.junit.Assert.assertNotNull(matrixArray20);
        org.junit.Assert.assertNotNull(matrix21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(matrix25);
        org.junit.Assert.assertNotNull(matrix27);
        org.junit.Assert.assertNotNull(matrix29);
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertArrayEquals(doubleArray32, new double[] { 137.90576492663388d, (-1.0d) }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertArrayEquals(doubleArray33, new double[] { (-24.931892522286255d), (-135.63701830716116d) }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertArrayEquals(doubleArray34, new double[] { 137.90221361711127d, 1.4069397643877004d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertArrayEquals(doubleArray35, new double[] { 137.90221361711127d, 1.4069397643877004d }, 1.0E-15);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
    }

    @Test
    public void test3920() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3920");
        com.operations.Matrix.Matrix matrix2 = new com.operations.Matrix.Matrix((int) (short) 100, 2);
        double[][] doubleArray3 = matrix2.getData();
        com.operations.Matrix.Matrix matrix4 = null;
        // The following exception was thrown during execution in test generation
        try {
            com.operations.Matrix.Matrix matrix5 = com.operations.Matrix.MatrixOperations.add(matrix2, matrix4);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray3);
    }

    @Test
    public void test3921() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3921");
        com.operations.Matrix.Matrix matrix2 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0L, (double) (byte) 10);
        int int3 = matrix2.getRows();
        com.operations.Matrix.Matrix matrix9 = com.operations.Matrix.MatrixUtils.generateRandomMatrix(100, (int) (byte) 1, (int) '#', (int) '#', 1L);
        boolean boolean11 = com.operations.Matrix.MatrixUtils.compare(matrix2, matrix9, (double) 1.0f);
        matrix9.print();
        com.operations.Matrix.Matrix matrix13 = com.operations.Matrix.MatrixOperations.transpose(matrix9);
        int int14 = matrix9.getRows();
        com.operations.Matrix.Matrix matrix17 = com.operations.Matrix.MatrixTransformations.project2D(0.0d, (-0.1736481776669303d));
        com.operations.Matrix.Matrix matrix20 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0.0f, (double) (-1));
        com.operations.Matrix.Matrix matrix23 = com.operations.Matrix.MatrixTransformations.scale2D(146.4308710620817d, (double) 10L);
        com.operations.Matrix.Matrix matrix24 = com.operations.Matrix.MatrixOperations.multiply(matrix20, matrix23);
        double double27 = matrix20.getValue((int) (short) 0, (int) (byte) 1);
        double double28 = com.operations.Matrix.MatrixUtils.frobeniusNorm(matrix20);
        com.operations.Matrix.Matrix matrix29 = com.operations.Matrix.MatrixOperations.multiply(matrix17, matrix20);
        boolean boolean31 = com.operations.Matrix.MatrixUtils.compare(matrix9, matrix20, 14.142135623730951d);
        java.lang.Class<?> wildcardClass32 = matrix9.getClass();
        org.junit.Assert.assertNotNull(matrix2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 2 + "'", int3 == 2);
        org.junit.Assert.assertNotNull(matrix9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(matrix13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 100 + "'", int14 == 100);
        org.junit.Assert.assertNotNull(matrix17);
        org.junit.Assert.assertNotNull(matrix20);
        org.junit.Assert.assertNotNull(matrix23);
        org.junit.Assert.assertNotNull(matrix24);
        org.junit.Assert.assertTrue("'" + double27 + "' != '" + 0.0d + "'", double27 == 0.0d);
        org.junit.Assert.assertTrue("'" + double28 + "' != '" + 1.0d + "'", double28 == 1.0d);
        org.junit.Assert.assertNotNull(matrix29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(wildcardClass32);
    }

    @Test
    public void test3922() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3922");
        com.operations.Matrix.Matrix matrix1 = com.operations.Matrix.MatrixTransformations.rotate2D((double) (byte) 1);
        com.operations.Matrix.Matrix matrix3 = com.operations.Matrix.MatrixTransformations.rotate2D(1.414213562373095d);
        com.operations.Matrix.Matrix matrix5 = com.operations.Matrix.MatrixTransformations.rotate2D((double) (short) 100);
        double[] doubleArray8 = new double[] { 137.90576492663388d, (byte) -1 };
        double[] doubleArray9 = com.operations.Matrix.MatrixSolver.solveGaussian(matrix5, doubleArray8);
        com.operations.Matrix.Matrix matrix12 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0L, (double) (byte) 10);
        double[] doubleArray15 = new double[] { 10, 'a' };
        double[] doubleArray18 = new double[] { 10, 'a' };
        double[][] doubleArray19 = new double[][] { doubleArray15, doubleArray18 };
        com.operations.Matrix.Matrix matrix20 = new com.operations.Matrix.Matrix(doubleArray19);
        int int21 = matrix20.getCols();
        int int22 = matrix20.getCols();
        int int23 = matrix20.getCols();
        com.operations.Matrix.Matrix[] matrixArray24 = com.operations.Matrix.MatrixDecompositions.luDecomposition(matrix20);
        com.operations.Matrix.Matrix matrix25 = com.operations.Matrix.MatrixOperations.multiply(matrix12, matrix20);
        boolean boolean27 = com.operations.Matrix.MatrixUtils.compare(matrix5, matrix12, (double) (-1L));
        com.operations.Matrix.Matrix matrix29 = com.operations.Matrix.MatrixTransformations.rotate2D((-1.0d));
        com.operations.Matrix.Matrix matrix31 = com.operations.Matrix.MatrixTransformations.rotate2D((double) (-1L));
        com.operations.Matrix.Matrix matrix33 = com.operations.Matrix.MatrixTransformations.rotate2D((double) (short) 100);
        double[] doubleArray36 = new double[] { 137.90576492663388d, (byte) -1 };
        double[] doubleArray37 = com.operations.Matrix.MatrixSolver.solveGaussian(matrix33, doubleArray36);
        double[] doubleArray38 = com.operations.Matrix.MatrixSolver.solveGaussian(matrix31, doubleArray36);
        double[] doubleArray39 = com.operations.Matrix.MatrixSolver.solveGaussian(matrix29, doubleArray36);
        boolean boolean41 = com.operations.Matrix.MatrixUtils.compare(matrix12, matrix29, (double) '4');
        double[] doubleArray44 = new double[] { 10, 'a' };
        double[] doubleArray47 = new double[] { 10, 'a' };
        double[][] doubleArray48 = new double[][] { doubleArray44, doubleArray47 };
        com.operations.Matrix.Matrix matrix49 = new com.operations.Matrix.Matrix(doubleArray48);
        com.operations.Matrix.Matrix matrix50 = new com.operations.Matrix.Matrix(doubleArray48);
        com.operations.Matrix.Matrix matrix52 = com.operations.Matrix.MatrixTransformations.rotate2D((double) (short) 100);
        double[] doubleArray55 = new double[] { 137.90576492663388d, (byte) -1 };
        double[] doubleArray56 = com.operations.Matrix.MatrixSolver.solveGaussian(matrix52, doubleArray55);
        com.operations.Matrix.Matrix matrix57 = com.operations.Matrix.MatrixOperations.add(matrix50, matrix52);
        com.operations.Matrix.Matrix matrix58 = com.operations.Matrix.MatrixOperations.transpose(matrix52);
        int int59 = matrix52.getCols();
        com.operations.Matrix.Matrix matrix62 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0L, (double) (byte) 10);
        double[] doubleArray65 = new double[] { 10, 'a' };
        double[] doubleArray68 = new double[] { 10, 'a' };
        double[][] doubleArray69 = new double[][] { doubleArray65, doubleArray68 };
        com.operations.Matrix.Matrix matrix70 = new com.operations.Matrix.Matrix(doubleArray69);
        int int71 = matrix70.getCols();
        int int72 = matrix70.getCols();
        int int73 = matrix70.getCols();
        com.operations.Matrix.Matrix[] matrixArray74 = com.operations.Matrix.MatrixDecompositions.luDecomposition(matrix70);
        com.operations.Matrix.Matrix matrix75 = com.operations.Matrix.MatrixOperations.multiply(matrix62, matrix70);
        com.operations.Matrix.Matrix matrix77 = com.operations.Matrix.MatrixTransformations.rotate2D((double) (short) 100);
        boolean boolean79 = com.operations.Matrix.MatrixUtils.compare(matrix70, matrix77, (double) (byte) 0);
        boolean boolean80 = com.operations.Matrix.MatrixUtils.isSymmetric(matrix77);
        boolean boolean81 = com.operations.Matrix.MatrixUtils.isSquare(matrix77);
        com.operations.Matrix.Matrix matrix83 = com.operations.Matrix.MatrixTransformations.rotate2D((double) (short) 100);
        boolean boolean85 = com.operations.Matrix.MatrixUtils.compare(matrix77, matrix83, (double) (byte) 100);
        matrix83.print();
        com.operations.Matrix.Matrix matrix87 = com.operations.Matrix.MatrixOperations.add(matrix52, matrix83);
        com.operations.Matrix.Matrix matrix88 = com.operations.Matrix.MatrixOperations.subtract(matrix29, matrix83);
        com.operations.Matrix.Matrix matrix89 = com.operations.Matrix.MatrixOperations.subtract(matrix3, matrix88);
        double[][] doubleArray90 = matrix89.getData();
        com.operations.Matrix.Matrix matrix91 = com.operations.Matrix.MatrixOperations.add(matrix1, matrix89);
        org.junit.Assert.assertNotNull(matrix1);
        org.junit.Assert.assertNotNull(matrix3);
        org.junit.Assert.assertNotNull(matrix5);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertArrayEquals(doubleArray8, new double[] { 137.90576492663388d, (-1.0d) }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertArrayEquals(doubleArray9, new double[] { (-24.931892522286255d), (-135.63701830716116d) }, 1.0E-15);
        org.junit.Assert.assertNotNull(matrix12);
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertArrayEquals(doubleArray15, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertArrayEquals(doubleArray18, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 2 + "'", int21 == 2);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 2 + "'", int22 == 2);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 2 + "'", int23 == 2);
        org.junit.Assert.assertNotNull(matrixArray24);
        org.junit.Assert.assertNotNull(matrix25);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(matrix29);
        org.junit.Assert.assertNotNull(matrix31);
        org.junit.Assert.assertNotNull(matrix33);
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertArrayEquals(doubleArray36, new double[] { 137.90576492663388d, (-1.0d) }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertArrayEquals(doubleArray37, new double[] { (-24.931892522286255d), (-135.63701830716116d) }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertArrayEquals(doubleArray38, new double[] { 137.90221361711127d, 1.4069397643877004d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertArrayEquals(doubleArray39, new double[] { 137.90221361711127d, 1.4069397643877004d }, 1.0E-15);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertArrayEquals(doubleArray44, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertArrayEquals(doubleArray47, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertNotNull(matrix52);
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertArrayEquals(doubleArray55, new double[] { 137.90576492663388d, (-1.0d) }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray56);
        org.junit.Assert.assertArrayEquals(doubleArray56, new double[] { (-24.931892522286255d), (-135.63701830716116d) }, 1.0E-15);
        org.junit.Assert.assertNotNull(matrix57);
        org.junit.Assert.assertNotNull(matrix58);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 2 + "'", int59 == 2);
        org.junit.Assert.assertNotNull(matrix62);
        org.junit.Assert.assertNotNull(doubleArray65);
        org.junit.Assert.assertArrayEquals(doubleArray65, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray68);
        org.junit.Assert.assertArrayEquals(doubleArray68, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray69);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 2 + "'", int71 == 2);
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 2 + "'", int72 == 2);
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + 2 + "'", int73 == 2);
        org.junit.Assert.assertNotNull(matrixArray74);
        org.junit.Assert.assertNotNull(matrix75);
        org.junit.Assert.assertNotNull(matrix77);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + true + "'", boolean81 == true);
        org.junit.Assert.assertNotNull(matrix83);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + true + "'", boolean85 == true);
        org.junit.Assert.assertNotNull(matrix87);
        org.junit.Assert.assertNotNull(matrix88);
        org.junit.Assert.assertNotNull(matrix89);
        org.junit.Assert.assertNotNull(doubleArray90);
        org.junit.Assert.assertNotNull(matrix91);
    }

    @Test
    public void test3923() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3923");
        com.operations.Matrix.Matrix matrix2 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0L, (double) (byte) 10);
        int int3 = matrix2.getRows();
        com.operations.Matrix.Matrix matrix5 = com.operations.Matrix.MatrixOperations.scalarMultiply(matrix2, (double) 2);
        double double6 = com.operations.Matrix.MatrixUtils.frobeniusNorm(matrix2);
        com.operations.Matrix.Matrix matrix9 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0L, (double) (byte) 10);
        int int10 = matrix9.getRows();
        com.operations.Matrix.Matrix matrix12 = com.operations.Matrix.MatrixOperations.scalarMultiply(matrix9, (double) 2);
        com.operations.Matrix.Matrix matrix13 = com.operations.Matrix.MatrixOperations.subtract(matrix2, matrix12);
        com.operations.Matrix.Matrix matrix15 = com.operations.Matrix.MatrixTransformations.rotate2D((double) (short) 100);
        double[] doubleArray18 = new double[] { 137.90576492663388d, (byte) -1 };
        double[] doubleArray19 = com.operations.Matrix.MatrixSolver.solveGaussian(matrix15, doubleArray18);
        com.operations.Matrix.Matrix matrix22 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0L, (double) (byte) 10);
        double[] doubleArray25 = new double[] { 10, 'a' };
        double[] doubleArray28 = new double[] { 10, 'a' };
        double[][] doubleArray29 = new double[][] { doubleArray25, doubleArray28 };
        com.operations.Matrix.Matrix matrix30 = new com.operations.Matrix.Matrix(doubleArray29);
        int int31 = matrix30.getCols();
        int int32 = matrix30.getCols();
        int int33 = matrix30.getCols();
        com.operations.Matrix.Matrix[] matrixArray34 = com.operations.Matrix.MatrixDecompositions.luDecomposition(matrix30);
        com.operations.Matrix.Matrix matrix35 = com.operations.Matrix.MatrixOperations.multiply(matrix22, matrix30);
        boolean boolean37 = com.operations.Matrix.MatrixUtils.compare(matrix15, matrix22, (double) (-1L));
        double[][] doubleArray38 = matrix15.getData();
        com.operations.Matrix.Matrix matrix41 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0L, (double) 10L);
        boolean boolean43 = com.operations.Matrix.MatrixUtils.compare(matrix15, matrix41, 146.4308710620817d);
        com.operations.Matrix.Matrix matrix44 = com.operations.Matrix.MatrixOperations.subtract(matrix13, matrix41);
        com.operations.Matrix.Matrix matrix47 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0L, (double) (byte) 10);
        double[] doubleArray50 = new double[] { 10, 'a' };
        double[] doubleArray53 = new double[] { 10, 'a' };
        double[][] doubleArray54 = new double[][] { doubleArray50, doubleArray53 };
        com.operations.Matrix.Matrix matrix55 = new com.operations.Matrix.Matrix(doubleArray54);
        int int56 = matrix55.getCols();
        int int57 = matrix55.getCols();
        int int58 = matrix55.getCols();
        com.operations.Matrix.Matrix[] matrixArray59 = com.operations.Matrix.MatrixDecompositions.luDecomposition(matrix55);
        com.operations.Matrix.Matrix matrix60 = com.operations.Matrix.MatrixOperations.multiply(matrix47, matrix55);
        com.operations.Matrix.Matrix matrix62 = com.operations.Matrix.MatrixTransformations.rotate2D((double) (short) 100);
        boolean boolean64 = com.operations.Matrix.MatrixUtils.compare(matrix55, matrix62, (double) (byte) 0);
        com.operations.Matrix.Matrix[] matrixArray65 = com.operations.Matrix.MatrixDecompositions.luDecomposition(matrix55);
        com.operations.Matrix.Matrix matrix66 = com.operations.Matrix.MatrixOperations.transpose(matrix55);
        com.operations.Matrix.Matrix matrix69 = com.operations.Matrix.MatrixTransformations.scale2D((double) 1.0f, (double) 1);
        com.operations.Matrix.Matrix matrix71 = com.operations.Matrix.MatrixTransformations.rotate2D((double) 1.0f);
        com.operations.Matrix.Matrix matrix74 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0L, (double) (byte) 10);
        int int75 = matrix74.getRows();
        com.operations.Matrix.Matrix matrix77 = com.operations.Matrix.MatrixOperations.scalarMultiply(matrix74, (double) 2);
        double double78 = com.operations.Matrix.MatrixUtils.frobeniusNorm(matrix74);
        com.operations.Matrix.Matrix matrix81 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0L, (double) (byte) 10);
        int int82 = matrix81.getRows();
        com.operations.Matrix.Matrix matrix84 = com.operations.Matrix.MatrixOperations.scalarMultiply(matrix81, (double) 2);
        com.operations.Matrix.Matrix matrix85 = com.operations.Matrix.MatrixOperations.subtract(matrix74, matrix84);
        com.operations.Matrix.Matrix matrix86 = com.operations.Matrix.MatrixOperations.add(matrix71, matrix84);
        boolean boolean88 = com.operations.Matrix.MatrixUtils.compare(matrix69, matrix71, (double) (byte) -1);
        com.operations.Matrix.Matrix matrix89 = com.operations.Matrix.MatrixOperations.subtract(matrix66, matrix69);
        matrix66.print();
        com.operations.Matrix.Matrix matrix91 = com.operations.Matrix.MatrixOperations.add(matrix41, matrix66);
        boolean boolean92 = com.operations.Matrix.MatrixUtils.isSquare(matrix66);
        com.operations.Matrix.Matrix matrix94 = com.operations.Matrix.MatrixOperations.scalarMultiply(matrix66, 0.0d);
        boolean boolean95 = com.operations.Matrix.MatrixUtils.isSquare(matrix66);
        boolean boolean96 = com.operations.Matrix.MatrixUtils.isSymmetric(matrix66);
        org.junit.Assert.assertNotNull(matrix2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 2 + "'", int3 == 2);
        org.junit.Assert.assertNotNull(matrix5);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 10.0d + "'", double6 == 10.0d);
        org.junit.Assert.assertNotNull(matrix9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 2 + "'", int10 == 2);
        org.junit.Assert.assertNotNull(matrix12);
        org.junit.Assert.assertNotNull(matrix13);
        org.junit.Assert.assertNotNull(matrix15);
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertArrayEquals(doubleArray18, new double[] { 137.90576492663388d, (-1.0d) }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertArrayEquals(doubleArray19, new double[] { (-24.931892522286255d), (-135.63701830716116d) }, 1.0E-15);
        org.junit.Assert.assertNotNull(matrix22);
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertArrayEquals(doubleArray25, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertArrayEquals(doubleArray28, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 2 + "'", int31 == 2);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 2 + "'", int32 == 2);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 2 + "'", int33 == 2);
        org.junit.Assert.assertNotNull(matrixArray34);
        org.junit.Assert.assertNotNull(matrix35);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertNotNull(matrix41);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertNotNull(matrix44);
        org.junit.Assert.assertNotNull(matrix47);
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertArrayEquals(doubleArray50, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertArrayEquals(doubleArray53, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray54);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 2 + "'", int56 == 2);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 2 + "'", int57 == 2);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 2 + "'", int58 == 2);
        org.junit.Assert.assertNotNull(matrixArray59);
        org.junit.Assert.assertNotNull(matrix60);
        org.junit.Assert.assertNotNull(matrix62);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertNotNull(matrixArray65);
        org.junit.Assert.assertNotNull(matrix66);
        org.junit.Assert.assertNotNull(matrix69);
        org.junit.Assert.assertNotNull(matrix71);
        org.junit.Assert.assertNotNull(matrix74);
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + 2 + "'", int75 == 2);
        org.junit.Assert.assertNotNull(matrix77);
        org.junit.Assert.assertTrue("'" + double78 + "' != '" + 10.0d + "'", double78 == 10.0d);
        org.junit.Assert.assertNotNull(matrix81);
        org.junit.Assert.assertTrue("'" + int82 + "' != '" + 2 + "'", int82 == 2);
        org.junit.Assert.assertNotNull(matrix84);
        org.junit.Assert.assertNotNull(matrix85);
        org.junit.Assert.assertNotNull(matrix86);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
        org.junit.Assert.assertNotNull(matrix89);
        org.junit.Assert.assertNotNull(matrix91);
        org.junit.Assert.assertTrue("'" + boolean92 + "' != '" + true + "'", boolean92 == true);
        org.junit.Assert.assertNotNull(matrix94);
        org.junit.Assert.assertTrue("'" + boolean95 + "' != '" + true + "'", boolean95 == true);
        org.junit.Assert.assertTrue("'" + boolean96 + "' != '" + false + "'", boolean96 == false);
    }

    @Test
    public void test3924() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3924");
        // The following exception was thrown during execution in test generation
        try {
            com.operations.Matrix.Matrix matrix5 = com.operations.Matrix.MatrixUtils.generateRandomMatrix((int) (short) -1, 0, (int) 'a', (int) (byte) 0, 0L);
            org.junit.Assert.fail("Expected exception of type java.lang.NegativeArraySizeException; message: -1");
        } catch (java.lang.NegativeArraySizeException e) {
            // Expected exception.
        }
    }

    @Test
    public void test3925() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3925");
        com.operations.Matrix.Matrix matrix2 = new com.operations.Matrix.Matrix((int) (short) 0, (int) (byte) 10);
        double[] doubleArray5 = new double[] { 10, 'a' };
        double[] doubleArray8 = new double[] { 10, 'a' };
        double[][] doubleArray9 = new double[][] { doubleArray5, doubleArray8 };
        com.operations.Matrix.Matrix matrix10 = new com.operations.Matrix.Matrix(doubleArray9);
        int int11 = matrix10.getCols();
        int int12 = matrix10.getCols();
        int int13 = matrix10.getCols();
        com.operations.Matrix.Matrix matrix19 = com.operations.Matrix.MatrixUtils.generateRandomMatrix(100, (int) (byte) 1, (int) '#', (int) '#', 1L);
        double double22 = matrix19.getValue((int) '4', 0);
        double double23 = com.operations.Matrix.MatrixUtils.frobeniusNorm(matrix19);
        boolean boolean24 = com.operations.Matrix.MatrixUtils.isSquare(matrix19);
        boolean boolean26 = com.operations.Matrix.MatrixUtils.compare(matrix10, matrix19, (double) 100L);
        com.operations.Matrix.Matrix matrix27 = com.operations.Matrix.MatrixDecompositions.choleskyDecomposition(matrix10);
        double[] doubleArray30 = new double[] { 10, 'a' };
        double[] doubleArray33 = new double[] { 10, 'a' };
        double[][] doubleArray34 = new double[][] { doubleArray30, doubleArray33 };
        com.operations.Matrix.Matrix matrix35 = new com.operations.Matrix.Matrix(doubleArray34);
        int int36 = matrix35.getCols();
        int int37 = matrix35.getCols();
        int int38 = matrix35.getCols();
        com.operations.Matrix.Matrix matrix40 = com.operations.Matrix.MatrixOperations.scalarMultiply(matrix35, (double) 0.0f);
        boolean boolean42 = com.operations.Matrix.MatrixUtils.compare(matrix27, matrix35, (double) '4');
        int int43 = matrix27.getRows();
        com.operations.Matrix.Matrix matrix46 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0L, (double) (byte) 10);
        double[] doubleArray49 = new double[] { 10, 'a' };
        double[] doubleArray52 = new double[] { 10, 'a' };
        double[][] doubleArray53 = new double[][] { doubleArray49, doubleArray52 };
        com.operations.Matrix.Matrix matrix54 = new com.operations.Matrix.Matrix(doubleArray53);
        int int55 = matrix54.getCols();
        int int56 = matrix54.getCols();
        int int57 = matrix54.getCols();
        com.operations.Matrix.Matrix[] matrixArray58 = com.operations.Matrix.MatrixDecompositions.luDecomposition(matrix54);
        com.operations.Matrix.Matrix matrix59 = com.operations.Matrix.MatrixOperations.multiply(matrix46, matrix54);
        com.operations.Matrix.Matrix matrix61 = com.operations.Matrix.MatrixTransformations.rotate2D((double) (short) 100);
        boolean boolean63 = com.operations.Matrix.MatrixUtils.compare(matrix54, matrix61, (double) (byte) 0);
        double[] doubleArray66 = new double[] { 10, 'a' };
        double[] doubleArray69 = new double[] { 10, 'a' };
        double[][] doubleArray70 = new double[][] { doubleArray66, doubleArray69 };
        com.operations.Matrix.Matrix matrix71 = new com.operations.Matrix.Matrix(doubleArray70);
        com.operations.Matrix.Matrix matrix72 = new com.operations.Matrix.Matrix(doubleArray70);
        com.operations.Matrix.Matrix matrix73 = new com.operations.Matrix.Matrix(doubleArray70);
        boolean boolean75 = com.operations.Matrix.MatrixUtils.compare(matrix54, matrix73, (double) (-1));
        double[] doubleArray78 = new double[] { 10, 'a' };
        double[] doubleArray81 = new double[] { 10, 'a' };
        double[][] doubleArray82 = new double[][] { doubleArray78, doubleArray81 };
        com.operations.Matrix.Matrix matrix83 = new com.operations.Matrix.Matrix(doubleArray82);
        com.operations.Matrix.Matrix matrix84 = new com.operations.Matrix.Matrix(doubleArray82);
        boolean boolean85 = com.operations.Matrix.MatrixUtils.isSquare(matrix84);
        com.operations.Matrix.Matrix matrix86 = com.operations.Matrix.MatrixOperations.multiply(matrix73, matrix84);
        double[][] doubleArray87 = matrix84.getData();
        com.operations.Matrix.Matrix matrix88 = new com.operations.Matrix.Matrix(doubleArray87);
        com.operations.Matrix.Matrix matrix89 = com.operations.Matrix.MatrixOperations.transpose(matrix88);
        boolean boolean90 = com.operations.Matrix.MatrixUtils.isSymmetric(matrix88);
        com.operations.Matrix.Matrix matrix92 = com.operations.Matrix.MatrixOperations.scalarMultiply(matrix88, (double) 2);
        com.operations.Matrix.Matrix matrix93 = com.operations.Matrix.MatrixOperations.add(matrix27, matrix92);
        matrix92.print();
        int int95 = matrix92.getRows();
        boolean boolean97 = com.operations.Matrix.MatrixUtils.compare(matrix2, matrix92, 17.26267650163207d);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertArrayEquals(doubleArray5, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertArrayEquals(doubleArray8, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 2 + "'", int11 == 2);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 2 + "'", int12 == 2);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 2 + "'", int13 == 2);
        org.junit.Assert.assertNotNull(matrix19);
        org.junit.Assert.assertTrue("'" + double22 + "' != '" + 35.0d + "'", double22 == 35.0d);
        org.junit.Assert.assertTrue("'" + double23 + "' != '" + 350.0d + "'", double23 == 350.0d);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(matrix27);
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertArrayEquals(doubleArray30, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertArrayEquals(doubleArray33, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 2 + "'", int36 == 2);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 2 + "'", int37 == 2);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 2 + "'", int38 == 2);
        org.junit.Assert.assertNotNull(matrix40);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 2 + "'", int43 == 2);
        org.junit.Assert.assertNotNull(matrix46);
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertArrayEquals(doubleArray49, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertArrayEquals(doubleArray52, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 2 + "'", int55 == 2);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 2 + "'", int56 == 2);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 2 + "'", int57 == 2);
        org.junit.Assert.assertNotNull(matrixArray58);
        org.junit.Assert.assertNotNull(matrix59);
        org.junit.Assert.assertNotNull(matrix61);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNotNull(doubleArray66);
        org.junit.Assert.assertArrayEquals(doubleArray66, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray69);
        org.junit.Assert.assertArrayEquals(doubleArray69, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray70);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertNotNull(doubleArray78);
        org.junit.Assert.assertArrayEquals(doubleArray78, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray81);
        org.junit.Assert.assertArrayEquals(doubleArray81, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray82);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + true + "'", boolean85 == true);
        org.junit.Assert.assertNotNull(matrix86);
        org.junit.Assert.assertNotNull(doubleArray87);
        org.junit.Assert.assertNotNull(matrix89);
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + false + "'", boolean90 == false);
        org.junit.Assert.assertNotNull(matrix92);
        org.junit.Assert.assertNotNull(matrix93);
        org.junit.Assert.assertTrue("'" + int95 + "' != '" + 2 + "'", int95 == 2);
        org.junit.Assert.assertTrue("'" + boolean97 + "' != '" + false + "'", boolean97 == false);
    }

    @Test
    public void test3926() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3926");
        double[] doubleArray2 = new double[] { 10, 'a' };
        double[] doubleArray5 = new double[] { 10, 'a' };
        double[][] doubleArray6 = new double[][] { doubleArray2, doubleArray5 };
        com.operations.Matrix.Matrix matrix7 = new com.operations.Matrix.Matrix(doubleArray6);
        com.operations.Matrix.Matrix matrix8 = new com.operations.Matrix.Matrix(doubleArray6);
        com.operations.Matrix.Matrix[] matrixArray9 = com.operations.Matrix.MatrixDecompositions.luDecomposition(matrix8);
        double double10 = com.operations.Matrix.MatrixUtils.frobeniusNorm(matrix8);
        double[] doubleArray13 = new double[] { 10, 'a' };
        double[] doubleArray16 = new double[] { 10, 'a' };
        double[][] doubleArray17 = new double[][] { doubleArray13, doubleArray16 };
        com.operations.Matrix.Matrix matrix18 = new com.operations.Matrix.Matrix(doubleArray17);
        com.operations.Matrix.Matrix matrix19 = new com.operations.Matrix.Matrix(doubleArray17);
        boolean boolean20 = com.operations.Matrix.MatrixUtils.isSquare(matrix19);
        double[] doubleArray23 = new double[] { 10, 'a' };
        double[] doubleArray26 = new double[] { 10, 'a' };
        double[][] doubleArray27 = new double[][] { doubleArray23, doubleArray26 };
        com.operations.Matrix.Matrix matrix28 = new com.operations.Matrix.Matrix(doubleArray27);
        int int29 = matrix28.getCols();
        int int30 = matrix28.getCols();
        matrix28.print();
        double[] doubleArray34 = new double[] { 10, 'a' };
        double[] doubleArray37 = new double[] { 10, 'a' };
        double[][] doubleArray38 = new double[][] { doubleArray34, doubleArray37 };
        com.operations.Matrix.Matrix matrix39 = new com.operations.Matrix.Matrix(doubleArray38);
        boolean boolean41 = com.operations.Matrix.MatrixUtils.compare(matrix28, matrix39, (double) (-1));
        com.operations.Matrix.Matrix matrix42 = com.operations.Matrix.MatrixOperations.subtract(matrix19, matrix39);
        com.operations.Matrix.Matrix[] matrixArray43 = com.operations.Matrix.MatrixDecompositions.luDecomposition(matrix42);
        double[][] doubleArray44 = matrix42.getData();
        com.operations.Matrix.Matrix matrix47 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0L, (double) (byte) 10);
        double[] doubleArray50 = new double[] { 10, 'a' };
        double[] doubleArray53 = new double[] { 10, 'a' };
        double[][] doubleArray54 = new double[][] { doubleArray50, doubleArray53 };
        com.operations.Matrix.Matrix matrix55 = new com.operations.Matrix.Matrix(doubleArray54);
        int int56 = matrix55.getCols();
        int int57 = matrix55.getCols();
        int int58 = matrix55.getCols();
        com.operations.Matrix.Matrix[] matrixArray59 = com.operations.Matrix.MatrixDecompositions.luDecomposition(matrix55);
        com.operations.Matrix.Matrix matrix60 = com.operations.Matrix.MatrixOperations.multiply(matrix47, matrix55);
        int int61 = matrix55.getRows();
        com.operations.Matrix.Matrix matrix62 = com.operations.Matrix.MatrixOperations.multiply(matrix42, matrix55);
        boolean boolean64 = com.operations.Matrix.MatrixUtils.compare(matrix8, matrix62, (double) 2);
        com.operations.Matrix.Matrix matrix65 = com.operations.Matrix.MatrixOperations.transpose(matrix62);
        matrix65.print();
        boolean boolean67 = com.operations.Matrix.MatrixUtils.isSymmetric(matrix65);
        int int68 = matrix65.getCols();
        matrix65.print();
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertArrayEquals(doubleArray2, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertArrayEquals(doubleArray5, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertNotNull(matrixArray9);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 137.90576492663388d + "'", double10 == 137.90576492663388d);
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertArrayEquals(doubleArray13, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertArrayEquals(doubleArray16, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertArrayEquals(doubleArray23, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertArrayEquals(doubleArray26, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 2 + "'", int29 == 2);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 2 + "'", int30 == 2);
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertArrayEquals(doubleArray34, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertArrayEquals(doubleArray37, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(matrix42);
        org.junit.Assert.assertNotNull(matrixArray43);
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertNotNull(matrix47);
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertArrayEquals(doubleArray50, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertArrayEquals(doubleArray53, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray54);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 2 + "'", int56 == 2);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 2 + "'", int57 == 2);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 2 + "'", int58 == 2);
        org.junit.Assert.assertNotNull(matrixArray59);
        org.junit.Assert.assertNotNull(matrix60);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 2 + "'", int61 == 2);
        org.junit.Assert.assertNotNull(matrix62);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertNotNull(matrix65);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + true + "'", boolean67 == true);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 2 + "'", int68 == 2);
    }

    @Test
    public void test3927() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3927");
        com.operations.Matrix.Matrix matrix2 = com.operations.Matrix.MatrixTransformations.project2D((double) 0.0f, 24.03204160570106d);
        org.junit.Assert.assertNotNull(matrix2);
    }

    @Test
    public void test3928() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3928");
        double[] doubleArray2 = new double[] { 10, 'a' };
        double[] doubleArray5 = new double[] { 10, 'a' };
        double[][] doubleArray6 = new double[][] { doubleArray2, doubleArray5 };
        com.operations.Matrix.Matrix matrix7 = new com.operations.Matrix.Matrix(doubleArray6);
        int int8 = matrix7.getCols();
        int int9 = matrix7.getCols();
        int int10 = matrix7.getCols();
        com.operations.Matrix.Matrix matrix12 = com.operations.Matrix.MatrixOperations.scalarMultiply(matrix7, (double) 0.0f);
        double double13 = com.operations.Matrix.MatrixUtils.frobeniusNorm(matrix7);
        boolean boolean14 = com.operations.Matrix.MatrixUtils.isSquare(matrix7);
        java.lang.Class<?> wildcardClass15 = matrix7.getClass();
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertArrayEquals(doubleArray2, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertArrayEquals(doubleArray5, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 2 + "'", int8 == 2);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 2 + "'", int9 == 2);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 2 + "'", int10 == 2);
        org.junit.Assert.assertNotNull(matrix12);
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 137.90576492663388d + "'", double13 == 137.90576492663388d);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNotNull(wildcardClass15);
    }

    @Test
    public void test3929() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3929");
        com.operations.Matrix.Matrix matrix4 = com.operations.Matrix.MatrixUtils.generateRandomMatrix(100, (int) 'a', (int) (byte) -1, 2);
        com.operations.Matrix.Matrix matrix7 = new com.operations.Matrix.Matrix((int) (short) 10, (int) (short) 0);
        int int8 = matrix7.getCols();
        boolean boolean10 = com.operations.Matrix.MatrixUtils.compare(matrix4, matrix7, 186.6644586191991d);
        org.junit.Assert.assertNotNull(matrix4);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
    }

    @Test
    public void test3930() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3930");
        com.operations.Matrix.Matrix matrix1 = com.operations.Matrix.MatrixTransformations.rotate2D(350.0d);
        com.operations.Matrix.Matrix matrix3 = com.operations.Matrix.MatrixTransformations.rotate2D((double) (short) 100);
        double[] doubleArray6 = new double[] { 137.90576492663388d, (byte) -1 };
        double[] doubleArray7 = com.operations.Matrix.MatrixSolver.solveGaussian(matrix3, doubleArray6);
        double[] doubleArray8 = com.operations.Matrix.MatrixSolver.solveGaussian(matrix1, doubleArray7);
        com.operations.Matrix.Matrix matrix11 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0L, (double) (byte) 10);
        double[] doubleArray14 = new double[] { 10, 'a' };
        double[] doubleArray17 = new double[] { 10, 'a' };
        double[][] doubleArray18 = new double[][] { doubleArray14, doubleArray17 };
        com.operations.Matrix.Matrix matrix19 = new com.operations.Matrix.Matrix(doubleArray18);
        int int20 = matrix19.getCols();
        int int21 = matrix19.getCols();
        int int22 = matrix19.getCols();
        com.operations.Matrix.Matrix[] matrixArray23 = com.operations.Matrix.MatrixDecompositions.luDecomposition(matrix19);
        com.operations.Matrix.Matrix matrix24 = com.operations.Matrix.MatrixOperations.multiply(matrix11, matrix19);
        com.operations.Matrix.Matrix matrix26 = com.operations.Matrix.MatrixTransformations.rotate2D((double) (short) 100);
        boolean boolean28 = com.operations.Matrix.MatrixUtils.compare(matrix19, matrix26, (double) (byte) 0);
        double[] doubleArray31 = new double[] { 10, 'a' };
        double[] doubleArray34 = new double[] { 10, 'a' };
        double[][] doubleArray35 = new double[][] { doubleArray31, doubleArray34 };
        com.operations.Matrix.Matrix matrix36 = new com.operations.Matrix.Matrix(doubleArray35);
        com.operations.Matrix.Matrix matrix37 = new com.operations.Matrix.Matrix(doubleArray35);
        com.operations.Matrix.Matrix matrix38 = new com.operations.Matrix.Matrix(doubleArray35);
        boolean boolean40 = com.operations.Matrix.MatrixUtils.compare(matrix19, matrix38, (double) (-1));
        int int41 = matrix19.getRows();
        com.operations.Matrix.Matrix matrix42 = com.operations.Matrix.MatrixOperations.add(matrix1, matrix19);
        double double43 = com.operations.Matrix.MatrixUtils.frobeniusNorm(matrix1);
        boolean boolean44 = com.operations.Matrix.MatrixUtils.isSquare(matrix1);
        org.junit.Assert.assertNotNull(matrix1);
        org.junit.Assert.assertNotNull(matrix3);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertArrayEquals(doubleArray6, new double[] { 137.90576492663388d, (-1.0d) }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertArrayEquals(doubleArray7, new double[] { (-24.931892522286255d), (-135.63701830716116d) }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertArrayEquals(doubleArray8, new double[] { (-0.9999999999999858d), (-137.90576492663388d) }, 1.0E-15);
        org.junit.Assert.assertNotNull(matrix11);
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertArrayEquals(doubleArray14, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertArrayEquals(doubleArray17, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 2 + "'", int20 == 2);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 2 + "'", int21 == 2);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 2 + "'", int22 == 2);
        org.junit.Assert.assertNotNull(matrixArray23);
        org.junit.Assert.assertNotNull(matrix24);
        org.junit.Assert.assertNotNull(matrix26);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertArrayEquals(doubleArray31, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertArrayEquals(doubleArray34, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 2 + "'", int41 == 2);
        org.junit.Assert.assertNotNull(matrix42);
        org.junit.Assert.assertTrue("'" + double43 + "' != '" + 1.4142135623730951d + "'", double43 == 1.4142135623730951d);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
    }

    @Test
    public void test3931() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3931");
        com.operations.Matrix.Matrix matrix2 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0L, (double) (byte) 10);
        double[] doubleArray5 = new double[] { 10, 'a' };
        double[] doubleArray8 = new double[] { 10, 'a' };
        double[][] doubleArray9 = new double[][] { doubleArray5, doubleArray8 };
        com.operations.Matrix.Matrix matrix10 = new com.operations.Matrix.Matrix(doubleArray9);
        int int11 = matrix10.getCols();
        int int12 = matrix10.getCols();
        int int13 = matrix10.getCols();
        com.operations.Matrix.Matrix[] matrixArray14 = com.operations.Matrix.MatrixDecompositions.luDecomposition(matrix10);
        com.operations.Matrix.Matrix matrix15 = com.operations.Matrix.MatrixOperations.multiply(matrix2, matrix10);
        com.operations.Matrix.Matrix matrix17 = com.operations.Matrix.MatrixTransformations.rotate2D((double) (short) 100);
        boolean boolean19 = com.operations.Matrix.MatrixUtils.compare(matrix10, matrix17, (double) (byte) 0);
        com.operations.Matrix.Matrix[] matrixArray20 = com.operations.Matrix.MatrixDecompositions.luDecomposition(matrix10);
        com.operations.Matrix.Matrix matrix21 = com.operations.Matrix.MatrixOperations.transpose(matrix10);
        com.operations.Matrix.Matrix matrix24 = com.operations.Matrix.MatrixTransformations.scale2D((double) 1.0f, (double) 1);
        com.operations.Matrix.Matrix matrix26 = com.operations.Matrix.MatrixTransformations.rotate2D((double) 1.0f);
        com.operations.Matrix.Matrix matrix29 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0L, (double) (byte) 10);
        int int30 = matrix29.getRows();
        com.operations.Matrix.Matrix matrix32 = com.operations.Matrix.MatrixOperations.scalarMultiply(matrix29, (double) 2);
        double double33 = com.operations.Matrix.MatrixUtils.frobeniusNorm(matrix29);
        com.operations.Matrix.Matrix matrix36 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0L, (double) (byte) 10);
        int int37 = matrix36.getRows();
        com.operations.Matrix.Matrix matrix39 = com.operations.Matrix.MatrixOperations.scalarMultiply(matrix36, (double) 2);
        com.operations.Matrix.Matrix matrix40 = com.operations.Matrix.MatrixOperations.subtract(matrix29, matrix39);
        com.operations.Matrix.Matrix matrix41 = com.operations.Matrix.MatrixOperations.add(matrix26, matrix39);
        boolean boolean43 = com.operations.Matrix.MatrixUtils.compare(matrix24, matrix26, (double) (byte) -1);
        com.operations.Matrix.Matrix matrix44 = com.operations.Matrix.MatrixOperations.subtract(matrix21, matrix24);
        int int45 = matrix21.getCols();
        matrix21.print();
        org.junit.Assert.assertNotNull(matrix2);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertArrayEquals(doubleArray5, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertArrayEquals(doubleArray8, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 2 + "'", int11 == 2);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 2 + "'", int12 == 2);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 2 + "'", int13 == 2);
        org.junit.Assert.assertNotNull(matrixArray14);
        org.junit.Assert.assertNotNull(matrix15);
        org.junit.Assert.assertNotNull(matrix17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(matrixArray20);
        org.junit.Assert.assertNotNull(matrix21);
        org.junit.Assert.assertNotNull(matrix24);
        org.junit.Assert.assertNotNull(matrix26);
        org.junit.Assert.assertNotNull(matrix29);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 2 + "'", int30 == 2);
        org.junit.Assert.assertNotNull(matrix32);
        org.junit.Assert.assertTrue("'" + double33 + "' != '" + 10.0d + "'", double33 == 10.0d);
        org.junit.Assert.assertNotNull(matrix36);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 2 + "'", int37 == 2);
        org.junit.Assert.assertNotNull(matrix39);
        org.junit.Assert.assertNotNull(matrix40);
        org.junit.Assert.assertNotNull(matrix41);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(matrix44);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 2 + "'", int45 == 2);
    }

    @Test
    public void test3932() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3932");
        com.operations.Matrix.Matrix matrix2 = com.operations.Matrix.MatrixTransformations.scale2D((double) (byte) 100, 350.0d);
        double double3 = com.operations.Matrix.MatrixUtils.frobeniusNorm(matrix2);
        int int4 = matrix2.getCols();
        com.operations.Matrix.Matrix matrix6 = com.operations.Matrix.MatrixTransformations.rotate2D((double) 1.0f);
        com.operations.Matrix.Matrix matrix9 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0L, (double) (byte) 10);
        int int10 = matrix9.getRows();
        com.operations.Matrix.Matrix matrix12 = com.operations.Matrix.MatrixOperations.scalarMultiply(matrix9, (double) 2);
        double double13 = com.operations.Matrix.MatrixUtils.frobeniusNorm(matrix9);
        com.operations.Matrix.Matrix matrix16 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0L, (double) (byte) 10);
        int int17 = matrix16.getRows();
        com.operations.Matrix.Matrix matrix19 = com.operations.Matrix.MatrixOperations.scalarMultiply(matrix16, (double) 2);
        com.operations.Matrix.Matrix matrix20 = com.operations.Matrix.MatrixOperations.subtract(matrix9, matrix19);
        com.operations.Matrix.Matrix matrix21 = com.operations.Matrix.MatrixOperations.add(matrix6, matrix19);
        double[] doubleArray24 = new double[] { 10, 'a' };
        double[] doubleArray27 = new double[] { 10, 'a' };
        double[][] doubleArray28 = new double[][] { doubleArray24, doubleArray27 };
        com.operations.Matrix.Matrix matrix29 = new com.operations.Matrix.Matrix(doubleArray28);
        int int30 = matrix29.getCols();
        int int31 = matrix29.getCols();
        int int32 = matrix29.getCols();
        com.operations.Matrix.Matrix matrix38 = com.operations.Matrix.MatrixUtils.generateRandomMatrix(100, (int) (byte) 1, (int) '#', (int) '#', 1L);
        double double41 = matrix38.getValue((int) '4', 0);
        double double42 = com.operations.Matrix.MatrixUtils.frobeniusNorm(matrix38);
        boolean boolean43 = com.operations.Matrix.MatrixUtils.isSquare(matrix38);
        boolean boolean45 = com.operations.Matrix.MatrixUtils.compare(matrix29, matrix38, (double) 100L);
        com.operations.Matrix.Matrix matrix47 = com.operations.Matrix.MatrixTransformations.rotate2D((double) (short) 100);
        double[] doubleArray50 = new double[] { 137.90576492663388d, (byte) -1 };
        double[] doubleArray51 = com.operations.Matrix.MatrixSolver.solveGaussian(matrix47, doubleArray50);
        com.operations.Matrix.Matrix matrix54 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0L, (double) (byte) 10);
        double[] doubleArray57 = new double[] { 10, 'a' };
        double[] doubleArray60 = new double[] { 10, 'a' };
        double[][] doubleArray61 = new double[][] { doubleArray57, doubleArray60 };
        com.operations.Matrix.Matrix matrix62 = new com.operations.Matrix.Matrix(doubleArray61);
        int int63 = matrix62.getCols();
        int int64 = matrix62.getCols();
        int int65 = matrix62.getCols();
        com.operations.Matrix.Matrix[] matrixArray66 = com.operations.Matrix.MatrixDecompositions.luDecomposition(matrix62);
        com.operations.Matrix.Matrix matrix67 = com.operations.Matrix.MatrixOperations.multiply(matrix54, matrix62);
        boolean boolean69 = com.operations.Matrix.MatrixUtils.compare(matrix47, matrix54, (double) (-1L));
        com.operations.Matrix.Matrix matrix70 = com.operations.Matrix.MatrixOperations.subtract(matrix29, matrix54);
        com.operations.Matrix.Matrix matrix71 = com.operations.Matrix.MatrixOperations.add(matrix19, matrix54);
        boolean boolean73 = com.operations.Matrix.MatrixUtils.compare(matrix2, matrix19, 146.4308710620817d);
        int int74 = matrix19.getRows();
        org.junit.Assert.assertNotNull(matrix2);
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + 364.0054944640259d + "'", double3 == 364.0054944640259d);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 2 + "'", int4 == 2);
        org.junit.Assert.assertNotNull(matrix6);
        org.junit.Assert.assertNotNull(matrix9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 2 + "'", int10 == 2);
        org.junit.Assert.assertNotNull(matrix12);
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 10.0d + "'", double13 == 10.0d);
        org.junit.Assert.assertNotNull(matrix16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 2 + "'", int17 == 2);
        org.junit.Assert.assertNotNull(matrix19);
        org.junit.Assert.assertNotNull(matrix20);
        org.junit.Assert.assertNotNull(matrix21);
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertArrayEquals(doubleArray24, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertArrayEquals(doubleArray27, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 2 + "'", int30 == 2);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 2 + "'", int31 == 2);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 2 + "'", int32 == 2);
        org.junit.Assert.assertNotNull(matrix38);
        org.junit.Assert.assertTrue("'" + double41 + "' != '" + 35.0d + "'", double41 == 35.0d);
        org.junit.Assert.assertTrue("'" + double42 + "' != '" + 350.0d + "'", double42 == 350.0d);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(matrix47);
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertArrayEquals(doubleArray50, new double[] { 137.90576492663388d, (-1.0d) }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertArrayEquals(doubleArray51, new double[] { (-24.931892522286255d), (-135.63701830716116d) }, 1.0E-15);
        org.junit.Assert.assertNotNull(matrix54);
        org.junit.Assert.assertNotNull(doubleArray57);
        org.junit.Assert.assertArrayEquals(doubleArray57, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray60);
        org.junit.Assert.assertArrayEquals(doubleArray60, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray61);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 2 + "'", int63 == 2);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 2 + "'", int64 == 2);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 2 + "'", int65 == 2);
        org.junit.Assert.assertNotNull(matrixArray66);
        org.junit.Assert.assertNotNull(matrix67);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertNotNull(matrix70);
        org.junit.Assert.assertNotNull(matrix71);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 2 + "'", int74 == 2);
    }

    @Test
    public void test3933() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3933");
        com.operations.Matrix.Matrix matrix2 = com.operations.Matrix.MatrixTransformations.scale2D((double) '4', 0.984807753012208d);
        org.junit.Assert.assertNotNull(matrix2);
    }

    @Test
    public void test3934() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3934");
        double[] doubleArray2 = new double[] { 10, 'a' };
        double[] doubleArray5 = new double[] { 10, 'a' };
        double[][] doubleArray6 = new double[][] { doubleArray2, doubleArray5 };
        com.operations.Matrix.Matrix matrix7 = new com.operations.Matrix.Matrix(doubleArray6);
        int int8 = matrix7.getCols();
        int int9 = matrix7.getCols();
        boolean boolean10 = com.operations.Matrix.MatrixUtils.isSquare(matrix7);
        com.operations.Matrix.Matrix matrix11 = com.operations.Matrix.MatrixDecompositions.choleskyDecomposition(matrix7);
        com.operations.Matrix.Matrix matrix14 = com.operations.Matrix.MatrixTransformations.project2D(0.0d, (double) 0);
        com.operations.Matrix.Matrix matrix15 = com.operations.Matrix.MatrixOperations.subtract(matrix11, matrix14);
        com.operations.Matrix.Matrix matrix17 = com.operations.Matrix.MatrixOperations.scalarMultiply(matrix11, (double) 1.0f);
        int int18 = matrix17.getCols();
        double[] doubleArray21 = new double[] { 10, 'a' };
        double[] doubleArray24 = new double[] { 10, 'a' };
        double[][] doubleArray25 = new double[][] { doubleArray21, doubleArray24 };
        com.operations.Matrix.Matrix matrix26 = new com.operations.Matrix.Matrix(doubleArray25);
        com.operations.Matrix.Matrix matrix27 = new com.operations.Matrix.Matrix(doubleArray25);
        com.operations.Matrix.Matrix[] matrixArray28 = com.operations.Matrix.MatrixDecompositions.luDecomposition(matrix27);
        com.operations.Matrix.Matrix matrix31 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0, (double) 100L);
        com.operations.Matrix.Matrix matrix32 = com.operations.Matrix.MatrixOperations.subtract(matrix27, matrix31);
        boolean boolean33 = com.operations.Matrix.MatrixUtils.isSymmetric(matrix27);
        matrix27.setValue(0, 0, (double) '#');
        boolean boolean39 = com.operations.Matrix.MatrixUtils.compare(matrix17, matrix27, (-0.1736481776669303d));
        com.operations.Matrix.Matrix matrix40 = com.operations.Matrix.MatrixDecompositions.choleskyDecomposition(matrix17);
        double[][] doubleArray41 = matrix40.getData();
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertArrayEquals(doubleArray2, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertArrayEquals(doubleArray5, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 2 + "'", int8 == 2);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 2 + "'", int9 == 2);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(matrix11);
        org.junit.Assert.assertNotNull(matrix14);
        org.junit.Assert.assertNotNull(matrix15);
        org.junit.Assert.assertNotNull(matrix17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 2 + "'", int18 == 2);
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertArrayEquals(doubleArray21, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertArrayEquals(doubleArray24, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertNotNull(matrixArray28);
        org.junit.Assert.assertNotNull(matrix31);
        org.junit.Assert.assertNotNull(matrix32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(matrix40);
        org.junit.Assert.assertNotNull(doubleArray41);
    }

    @Test
    public void test3935() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3935");
        com.operations.Matrix.Matrix matrix2 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0L, (double) (byte) 10);
        double[] doubleArray5 = new double[] { 10, 'a' };
        double[] doubleArray8 = new double[] { 10, 'a' };
        double[][] doubleArray9 = new double[][] { doubleArray5, doubleArray8 };
        com.operations.Matrix.Matrix matrix10 = new com.operations.Matrix.Matrix(doubleArray9);
        int int11 = matrix10.getCols();
        int int12 = matrix10.getCols();
        int int13 = matrix10.getCols();
        com.operations.Matrix.Matrix[] matrixArray14 = com.operations.Matrix.MatrixDecompositions.luDecomposition(matrix10);
        com.operations.Matrix.Matrix matrix15 = com.operations.Matrix.MatrixOperations.multiply(matrix2, matrix10);
        com.operations.Matrix.Matrix matrix17 = com.operations.Matrix.MatrixTransformations.rotate2D((double) (short) 100);
        boolean boolean19 = com.operations.Matrix.MatrixUtils.compare(matrix10, matrix17, (double) (byte) 0);
        double[] doubleArray22 = new double[] { 10, 'a' };
        double[] doubleArray25 = new double[] { 10, 'a' };
        double[][] doubleArray26 = new double[][] { doubleArray22, doubleArray25 };
        com.operations.Matrix.Matrix matrix27 = new com.operations.Matrix.Matrix(doubleArray26);
        com.operations.Matrix.Matrix matrix28 = new com.operations.Matrix.Matrix(doubleArray26);
        com.operations.Matrix.Matrix matrix29 = new com.operations.Matrix.Matrix(doubleArray26);
        boolean boolean31 = com.operations.Matrix.MatrixUtils.compare(matrix10, matrix29, (double) (-1));
        double[] doubleArray34 = new double[] { 10, 'a' };
        double[] doubleArray37 = new double[] { 10, 'a' };
        double[][] doubleArray38 = new double[][] { doubleArray34, doubleArray37 };
        com.operations.Matrix.Matrix matrix39 = new com.operations.Matrix.Matrix(doubleArray38);
        com.operations.Matrix.Matrix matrix40 = new com.operations.Matrix.Matrix(doubleArray38);
        boolean boolean41 = com.operations.Matrix.MatrixUtils.isSquare(matrix40);
        com.operations.Matrix.Matrix matrix42 = com.operations.Matrix.MatrixOperations.multiply(matrix29, matrix40);
        com.operations.Matrix.Matrix matrix45 = com.operations.Matrix.MatrixTransformations.project2D((double) ' ', 0.0d);
        double[] doubleArray48 = new double[] { 10, 'a' };
        double[] doubleArray51 = new double[] { 10, 'a' };
        double[][] doubleArray52 = new double[][] { doubleArray48, doubleArray51 };
        com.operations.Matrix.Matrix matrix53 = new com.operations.Matrix.Matrix(doubleArray52);
        int int54 = matrix53.getCols();
        boolean boolean55 = com.operations.Matrix.MatrixUtils.isSquare(matrix53);
        com.operations.Matrix.Matrix matrix56 = com.operations.Matrix.MatrixOperations.transpose(matrix53);
        int int57 = matrix56.getRows();
        com.operations.Matrix.Matrix matrix60 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0L, (double) (byte) 10);
        double[] doubleArray63 = new double[] { 10, 'a' };
        double[] doubleArray66 = new double[] { 10, 'a' };
        double[][] doubleArray67 = new double[][] { doubleArray63, doubleArray66 };
        com.operations.Matrix.Matrix matrix68 = new com.operations.Matrix.Matrix(doubleArray67);
        int int69 = matrix68.getCols();
        int int70 = matrix68.getCols();
        int int71 = matrix68.getCols();
        com.operations.Matrix.Matrix[] matrixArray72 = com.operations.Matrix.MatrixDecompositions.luDecomposition(matrix68);
        com.operations.Matrix.Matrix matrix73 = com.operations.Matrix.MatrixOperations.multiply(matrix60, matrix68);
        com.operations.Matrix.Matrix matrix75 = com.operations.Matrix.MatrixTransformations.rotate2D((double) (short) 100);
        boolean boolean77 = com.operations.Matrix.MatrixUtils.compare(matrix68, matrix75, (double) (byte) 0);
        com.operations.Matrix.Matrix matrix78 = com.operations.Matrix.MatrixOperations.multiply(matrix56, matrix68);
        com.operations.Matrix.Matrix matrix79 = com.operations.Matrix.MatrixOperations.add(matrix45, matrix68);
        com.operations.Matrix.Matrix matrix80 = com.operations.Matrix.MatrixOperations.transpose(matrix45);
        com.operations.Matrix.Matrix matrix83 = com.operations.Matrix.MatrixTransformations.scale2D((double) (byte) 100, 350.0d);
        double double84 = com.operations.Matrix.MatrixUtils.frobeniusNorm(matrix83);
        int int85 = matrix83.getCols();
        com.operations.Matrix.Matrix matrix86 = com.operations.Matrix.MatrixOperations.multiply(matrix45, matrix83);
        int int87 = matrix45.getRows();
        com.operations.Matrix.Matrix matrix88 = com.operations.Matrix.MatrixOperations.multiply(matrix42, matrix45);
        // The following exception was thrown during execution in test generation
        try {
            double double91 = matrix45.getValue((int) (byte) 100, (int) (byte) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(matrix2);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertArrayEquals(doubleArray5, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertArrayEquals(doubleArray8, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 2 + "'", int11 == 2);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 2 + "'", int12 == 2);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 2 + "'", int13 == 2);
        org.junit.Assert.assertNotNull(matrixArray14);
        org.junit.Assert.assertNotNull(matrix15);
        org.junit.Assert.assertNotNull(matrix17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertArrayEquals(doubleArray22, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertArrayEquals(doubleArray25, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertArrayEquals(doubleArray34, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertArrayEquals(doubleArray37, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertNotNull(matrix42);
        org.junit.Assert.assertNotNull(matrix45);
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertArrayEquals(doubleArray48, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertArrayEquals(doubleArray51, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 2 + "'", int54 == 2);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + true + "'", boolean55 == true);
        org.junit.Assert.assertNotNull(matrix56);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 2 + "'", int57 == 2);
        org.junit.Assert.assertNotNull(matrix60);
        org.junit.Assert.assertNotNull(doubleArray63);
        org.junit.Assert.assertArrayEquals(doubleArray63, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray66);
        org.junit.Assert.assertArrayEquals(doubleArray66, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray67);
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 2 + "'", int69 == 2);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 2 + "'", int70 == 2);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 2 + "'", int71 == 2);
        org.junit.Assert.assertNotNull(matrixArray72);
        org.junit.Assert.assertNotNull(matrix73);
        org.junit.Assert.assertNotNull(matrix75);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertNotNull(matrix78);
        org.junit.Assert.assertNotNull(matrix79);
        org.junit.Assert.assertNotNull(matrix80);
        org.junit.Assert.assertNotNull(matrix83);
        org.junit.Assert.assertTrue("'" + double84 + "' != '" + 364.0054944640259d + "'", double84 == 364.0054944640259d);
        org.junit.Assert.assertTrue("'" + int85 + "' != '" + 2 + "'", int85 == 2);
        org.junit.Assert.assertNotNull(matrix86);
        org.junit.Assert.assertTrue("'" + int87 + "' != '" + 2 + "'", int87 == 2);
        org.junit.Assert.assertNotNull(matrix88);
    }

    @Test
    public void test3936() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3936");
        com.operations.Matrix.Matrix matrix1 = com.operations.Matrix.MatrixTransformations.rotate2D((double) (short) 100);
        double[][] doubleArray2 = matrix1.getData();
        com.operations.Matrix.Matrix matrix3 = new com.operations.Matrix.Matrix(doubleArray2);
        double[] doubleArray6 = new double[] { 10, 'a' };
        double[] doubleArray9 = new double[] { 10, 'a' };
        double[][] doubleArray10 = new double[][] { doubleArray6, doubleArray9 };
        com.operations.Matrix.Matrix matrix11 = new com.operations.Matrix.Matrix(doubleArray10);
        com.operations.Matrix.Matrix matrix12 = new com.operations.Matrix.Matrix(doubleArray10);
        boolean boolean13 = com.operations.Matrix.MatrixUtils.isSquare(matrix12);
        com.operations.Matrix.Matrix[] matrixArray14 = com.operations.Matrix.MatrixDecompositions.luDecomposition(matrix12);
        com.operations.Matrix.Matrix matrix15 = com.operations.Matrix.MatrixOperations.transpose(matrix12);
        boolean boolean17 = com.operations.Matrix.MatrixUtils.compare(matrix3, matrix12, 1.4142135623730951d);
        double[][] doubleArray18 = matrix3.getData();
        // The following exception was thrown during execution in test generation
        try {
            double double21 = matrix3.getValue((int) (byte) 0, (int) (byte) 10);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(matrix1);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertArrayEquals(doubleArray6, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertArrayEquals(doubleArray9, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNotNull(matrixArray14);
        org.junit.Assert.assertNotNull(matrix15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(doubleArray18);
    }

    @Test
    public void test3937() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3937");
        com.operations.Matrix.Matrix matrix2 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0L, (double) (byte) 10);
        double[] doubleArray5 = new double[] { 10, 'a' };
        double[] doubleArray8 = new double[] { 10, 'a' };
        double[][] doubleArray9 = new double[][] { doubleArray5, doubleArray8 };
        com.operations.Matrix.Matrix matrix10 = new com.operations.Matrix.Matrix(doubleArray9);
        int int11 = matrix10.getCols();
        int int12 = matrix10.getCols();
        int int13 = matrix10.getCols();
        com.operations.Matrix.Matrix[] matrixArray14 = com.operations.Matrix.MatrixDecompositions.luDecomposition(matrix10);
        com.operations.Matrix.Matrix matrix15 = com.operations.Matrix.MatrixOperations.multiply(matrix2, matrix10);
        com.operations.Matrix.Matrix matrix17 = com.operations.Matrix.MatrixTransformations.rotate2D((double) (short) 100);
        boolean boolean19 = com.operations.Matrix.MatrixUtils.compare(matrix10, matrix17, (double) (byte) 0);
        double[] doubleArray22 = new double[] { 10, 'a' };
        double[] doubleArray25 = new double[] { 10, 'a' };
        double[][] doubleArray26 = new double[][] { doubleArray22, doubleArray25 };
        com.operations.Matrix.Matrix matrix27 = new com.operations.Matrix.Matrix(doubleArray26);
        com.operations.Matrix.Matrix matrix28 = new com.operations.Matrix.Matrix(doubleArray26);
        com.operations.Matrix.Matrix matrix29 = new com.operations.Matrix.Matrix(doubleArray26);
        boolean boolean31 = com.operations.Matrix.MatrixUtils.compare(matrix10, matrix29, (double) (-1));
        double[] doubleArray34 = new double[] { 10, 'a' };
        double[] doubleArray37 = new double[] { 10, 'a' };
        double[][] doubleArray38 = new double[][] { doubleArray34, doubleArray37 };
        com.operations.Matrix.Matrix matrix39 = new com.operations.Matrix.Matrix(doubleArray38);
        com.operations.Matrix.Matrix matrix40 = new com.operations.Matrix.Matrix(doubleArray38);
        boolean boolean41 = com.operations.Matrix.MatrixUtils.isSquare(matrix40);
        com.operations.Matrix.Matrix matrix42 = com.operations.Matrix.MatrixOperations.multiply(matrix29, matrix40);
        com.operations.Matrix.Matrix matrix45 = com.operations.Matrix.MatrixTransformations.project2D((double) ' ', 0.0d);
        double[] doubleArray48 = new double[] { 10, 'a' };
        double[] doubleArray51 = new double[] { 10, 'a' };
        double[][] doubleArray52 = new double[][] { doubleArray48, doubleArray51 };
        com.operations.Matrix.Matrix matrix53 = new com.operations.Matrix.Matrix(doubleArray52);
        int int54 = matrix53.getCols();
        boolean boolean55 = com.operations.Matrix.MatrixUtils.isSquare(matrix53);
        com.operations.Matrix.Matrix matrix56 = com.operations.Matrix.MatrixOperations.transpose(matrix53);
        int int57 = matrix56.getRows();
        com.operations.Matrix.Matrix matrix60 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0L, (double) (byte) 10);
        double[] doubleArray63 = new double[] { 10, 'a' };
        double[] doubleArray66 = new double[] { 10, 'a' };
        double[][] doubleArray67 = new double[][] { doubleArray63, doubleArray66 };
        com.operations.Matrix.Matrix matrix68 = new com.operations.Matrix.Matrix(doubleArray67);
        int int69 = matrix68.getCols();
        int int70 = matrix68.getCols();
        int int71 = matrix68.getCols();
        com.operations.Matrix.Matrix[] matrixArray72 = com.operations.Matrix.MatrixDecompositions.luDecomposition(matrix68);
        com.operations.Matrix.Matrix matrix73 = com.operations.Matrix.MatrixOperations.multiply(matrix60, matrix68);
        com.operations.Matrix.Matrix matrix75 = com.operations.Matrix.MatrixTransformations.rotate2D((double) (short) 100);
        boolean boolean77 = com.operations.Matrix.MatrixUtils.compare(matrix68, matrix75, (double) (byte) 0);
        com.operations.Matrix.Matrix matrix78 = com.operations.Matrix.MatrixOperations.multiply(matrix56, matrix68);
        com.operations.Matrix.Matrix matrix79 = com.operations.Matrix.MatrixOperations.add(matrix45, matrix68);
        com.operations.Matrix.Matrix matrix80 = com.operations.Matrix.MatrixOperations.transpose(matrix45);
        com.operations.Matrix.Matrix matrix83 = com.operations.Matrix.MatrixTransformations.scale2D((double) (byte) 100, 350.0d);
        double double84 = com.operations.Matrix.MatrixUtils.frobeniusNorm(matrix83);
        int int85 = matrix83.getCols();
        com.operations.Matrix.Matrix matrix86 = com.operations.Matrix.MatrixOperations.multiply(matrix45, matrix83);
        int int87 = matrix45.getRows();
        com.operations.Matrix.Matrix matrix88 = com.operations.Matrix.MatrixOperations.multiply(matrix42, matrix45);
        com.operations.Matrix.Matrix matrix90 = com.operations.Matrix.MatrixOperations.scalarMultiply(matrix42, (double) 10.0f);
        com.operations.Matrix.Matrix matrix92 = com.operations.Matrix.MatrixOperations.scalarMultiply(matrix90, 14.142135623730951d);
        java.lang.Class<?> wildcardClass93 = matrix92.getClass();
        org.junit.Assert.assertNotNull(matrix2);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertArrayEquals(doubleArray5, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertArrayEquals(doubleArray8, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 2 + "'", int11 == 2);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 2 + "'", int12 == 2);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 2 + "'", int13 == 2);
        org.junit.Assert.assertNotNull(matrixArray14);
        org.junit.Assert.assertNotNull(matrix15);
        org.junit.Assert.assertNotNull(matrix17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertArrayEquals(doubleArray22, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertArrayEquals(doubleArray25, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertArrayEquals(doubleArray34, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertArrayEquals(doubleArray37, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertNotNull(matrix42);
        org.junit.Assert.assertNotNull(matrix45);
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertArrayEquals(doubleArray48, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertArrayEquals(doubleArray51, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 2 + "'", int54 == 2);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + true + "'", boolean55 == true);
        org.junit.Assert.assertNotNull(matrix56);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 2 + "'", int57 == 2);
        org.junit.Assert.assertNotNull(matrix60);
        org.junit.Assert.assertNotNull(doubleArray63);
        org.junit.Assert.assertArrayEquals(doubleArray63, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray66);
        org.junit.Assert.assertArrayEquals(doubleArray66, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray67);
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 2 + "'", int69 == 2);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 2 + "'", int70 == 2);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 2 + "'", int71 == 2);
        org.junit.Assert.assertNotNull(matrixArray72);
        org.junit.Assert.assertNotNull(matrix73);
        org.junit.Assert.assertNotNull(matrix75);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertNotNull(matrix78);
        org.junit.Assert.assertNotNull(matrix79);
        org.junit.Assert.assertNotNull(matrix80);
        org.junit.Assert.assertNotNull(matrix83);
        org.junit.Assert.assertTrue("'" + double84 + "' != '" + 364.0054944640259d + "'", double84 == 364.0054944640259d);
        org.junit.Assert.assertTrue("'" + int85 + "' != '" + 2 + "'", int85 == 2);
        org.junit.Assert.assertNotNull(matrix86);
        org.junit.Assert.assertTrue("'" + int87 + "' != '" + 2 + "'", int87 == 2);
        org.junit.Assert.assertNotNull(matrix88);
        org.junit.Assert.assertNotNull(matrix90);
        org.junit.Assert.assertNotNull(matrix92);
        org.junit.Assert.assertNotNull(wildcardClass93);
    }

    @Test
    public void test3938() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3938");
        com.operations.Matrix.Matrix matrix2 = com.operations.Matrix.MatrixTransformations.project2D(10.270003094125075d, 400.0d);
        org.junit.Assert.assertNotNull(matrix2);
    }

    @Test
    public void test3939() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3939");
        // The following exception was thrown during execution in test generation
        try {
            com.operations.Matrix.Matrix matrix5 = com.operations.Matrix.MatrixUtils.generateRandomMatrix(100, (int) (short) -1, (int) (short) -1, (-1), (long) 1);
            org.junit.Assert.fail("Expected exception of type java.lang.NegativeArraySizeException; message: -1");
        } catch (java.lang.NegativeArraySizeException e) {
            // Expected exception.
        }
    }

    @Test
    public void test3940() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3940");
        com.operations.Matrix.Matrix matrix2 = com.operations.Matrix.MatrixTransformations.scale2D(12.751772028997056d, (double) 32);
        org.junit.Assert.assertNotNull(matrix2);
    }

    @Test
    public void test3941() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3941");
        com.operations.Matrix.Matrix matrix2 = com.operations.Matrix.MatrixTransformations.project2D(10.0d, (double) '#');
        int int3 = matrix2.getCols();
        org.junit.Assert.assertNotNull(matrix2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 2 + "'", int3 == 2);
    }

    @Test
    public void test3942() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3942");
        com.operations.Matrix.Matrix matrix4 = com.operations.Matrix.MatrixUtils.generateRandomMatrix(100, (int) '4', (int) (byte) 1, (int) (byte) 100);
        org.junit.Assert.assertNotNull(matrix4);
    }

    @Test
    public void test3943() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3943");
        com.operations.Matrix.Matrix matrix2 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0L, (double) (byte) 10);
        double[] doubleArray5 = new double[] { 10, 'a' };
        double[] doubleArray8 = new double[] { 10, 'a' };
        double[][] doubleArray9 = new double[][] { doubleArray5, doubleArray8 };
        com.operations.Matrix.Matrix matrix10 = new com.operations.Matrix.Matrix(doubleArray9);
        int int11 = matrix10.getCols();
        int int12 = matrix10.getCols();
        int int13 = matrix10.getCols();
        com.operations.Matrix.Matrix[] matrixArray14 = com.operations.Matrix.MatrixDecompositions.luDecomposition(matrix10);
        com.operations.Matrix.Matrix matrix15 = com.operations.Matrix.MatrixOperations.multiply(matrix2, matrix10);
        com.operations.Matrix.Matrix matrix17 = com.operations.Matrix.MatrixTransformations.rotate2D((double) (short) 100);
        boolean boolean19 = com.operations.Matrix.MatrixUtils.compare(matrix10, matrix17, (double) (byte) 0);
        double[] doubleArray22 = new double[] { 10, 'a' };
        double[] doubleArray25 = new double[] { 10, 'a' };
        double[][] doubleArray26 = new double[][] { doubleArray22, doubleArray25 };
        com.operations.Matrix.Matrix matrix27 = new com.operations.Matrix.Matrix(doubleArray26);
        com.operations.Matrix.Matrix matrix28 = new com.operations.Matrix.Matrix(doubleArray26);
        com.operations.Matrix.Matrix matrix29 = new com.operations.Matrix.Matrix(doubleArray26);
        boolean boolean31 = com.operations.Matrix.MatrixUtils.compare(matrix10, matrix29, (double) (-1));
        double[] doubleArray34 = new double[] { 10, 'a' };
        double[] doubleArray37 = new double[] { 10, 'a' };
        double[][] doubleArray38 = new double[][] { doubleArray34, doubleArray37 };
        com.operations.Matrix.Matrix matrix39 = new com.operations.Matrix.Matrix(doubleArray38);
        com.operations.Matrix.Matrix matrix40 = new com.operations.Matrix.Matrix(doubleArray38);
        boolean boolean41 = com.operations.Matrix.MatrixUtils.isSquare(matrix40);
        com.operations.Matrix.Matrix matrix42 = com.operations.Matrix.MatrixOperations.multiply(matrix29, matrix40);
        double[][] doubleArray43 = matrix40.getData();
        com.operations.Matrix.Matrix matrix44 = new com.operations.Matrix.Matrix(doubleArray43);
        com.operations.Matrix.Matrix matrix45 = new com.operations.Matrix.Matrix(doubleArray43);
        com.operations.Matrix.Matrix matrix46 = new com.operations.Matrix.Matrix(doubleArray43);
        com.operations.Matrix.Matrix matrix48 = com.operations.Matrix.MatrixOperations.scalarMultiply(matrix46, (double) 'a');
        double[][] doubleArray49 = matrix48.getData();
        com.operations.Matrix.Matrix matrix52 = com.operations.Matrix.MatrixTransformations.scale2D((double) 100.0f, 20.0d);
        com.operations.Matrix.Matrix matrix53 = com.operations.Matrix.MatrixOperations.add(matrix48, matrix52);
        boolean boolean54 = com.operations.Matrix.MatrixUtils.isSquare(matrix53);
        matrix53.print();
        org.junit.Assert.assertNotNull(matrix2);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertArrayEquals(doubleArray5, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertArrayEquals(doubleArray8, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 2 + "'", int11 == 2);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 2 + "'", int12 == 2);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 2 + "'", int13 == 2);
        org.junit.Assert.assertNotNull(matrixArray14);
        org.junit.Assert.assertNotNull(matrix15);
        org.junit.Assert.assertNotNull(matrix17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertArrayEquals(doubleArray22, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertArrayEquals(doubleArray25, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertArrayEquals(doubleArray34, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertArrayEquals(doubleArray37, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertNotNull(matrix42);
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertNotNull(matrix48);
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertNotNull(matrix52);
        org.junit.Assert.assertNotNull(matrix53);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + true + "'", boolean54 == true);
    }

    @Test
    public void test3944() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3944");
        com.operations.Matrix.Matrix matrix2 = com.operations.Matrix.MatrixTransformations.project2D((double) 100.0f, (double) 1);
        com.operations.Matrix.Matrix matrix4 = com.operations.Matrix.MatrixTransformations.rotate2D((double) 'a');
        com.operations.Matrix.Matrix matrix6 = com.operations.Matrix.MatrixTransformations.rotate2D((double) 1.0f);
        com.operations.Matrix.Matrix matrix7 = com.operations.Matrix.MatrixOperations.add(matrix4, matrix6);
        com.operations.Matrix.Matrix matrix8 = com.operations.Matrix.MatrixOperations.subtract(matrix2, matrix7);
        boolean boolean9 = com.operations.Matrix.MatrixUtils.isSquare(matrix8);
        com.operations.Matrix.Matrix matrix11 = com.operations.Matrix.MatrixOperations.scalarMultiply(matrix8, 364.0068680670737d);
        org.junit.Assert.assertNotNull(matrix2);
        org.junit.Assert.assertNotNull(matrix4);
        org.junit.Assert.assertNotNull(matrix6);
        org.junit.Assert.assertNotNull(matrix7);
        org.junit.Assert.assertNotNull(matrix8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertNotNull(matrix11);
    }

    @Test
    public void test3945() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3945");
        com.operations.Matrix.Matrix matrix2 = com.operations.Matrix.MatrixTransformations.scale2D(131.06486943494812d, 51.2195908953061d);
        org.junit.Assert.assertNotNull(matrix2);
    }

    @Test
    public void test3946() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3946");
        com.operations.Matrix.Matrix matrix5 = com.operations.Matrix.MatrixUtils.generateRandomMatrix(100, (int) (byte) 1, (int) '#', (int) '#', 1L);
        double double8 = matrix5.getValue((int) '4', 0);
        double double9 = com.operations.Matrix.MatrixUtils.frobeniusNorm(matrix5);
        int int10 = matrix5.getCols();
        com.operations.Matrix.Matrix matrix12 = com.operations.Matrix.MatrixTransformations.rotate2D((double) 10);
        boolean boolean14 = com.operations.Matrix.MatrixUtils.compare(matrix5, matrix12, (double) 100L);
        double[] doubleArray17 = new double[] { 10, 'a' };
        double[] doubleArray20 = new double[] { 10, 'a' };
        double[][] doubleArray21 = new double[][] { doubleArray17, doubleArray20 };
        com.operations.Matrix.Matrix matrix22 = new com.operations.Matrix.Matrix(doubleArray21);
        int int23 = matrix22.getCols();
        boolean boolean24 = com.operations.Matrix.MatrixUtils.isSquare(matrix22);
        com.operations.Matrix.Matrix matrix25 = com.operations.Matrix.MatrixOperations.transpose(matrix22);
        int int26 = matrix25.getRows();
        com.operations.Matrix.Matrix matrix29 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0L, (double) (byte) 10);
        double[] doubleArray32 = new double[] { 10, 'a' };
        double[] doubleArray35 = new double[] { 10, 'a' };
        double[][] doubleArray36 = new double[][] { doubleArray32, doubleArray35 };
        com.operations.Matrix.Matrix matrix37 = new com.operations.Matrix.Matrix(doubleArray36);
        int int38 = matrix37.getCols();
        int int39 = matrix37.getCols();
        int int40 = matrix37.getCols();
        com.operations.Matrix.Matrix[] matrixArray41 = com.operations.Matrix.MatrixDecompositions.luDecomposition(matrix37);
        com.operations.Matrix.Matrix matrix42 = com.operations.Matrix.MatrixOperations.multiply(matrix29, matrix37);
        com.operations.Matrix.Matrix matrix44 = com.operations.Matrix.MatrixTransformations.rotate2D((double) (short) 100);
        boolean boolean46 = com.operations.Matrix.MatrixUtils.compare(matrix37, matrix44, (double) (byte) 0);
        com.operations.Matrix.Matrix matrix47 = com.operations.Matrix.MatrixOperations.multiply(matrix25, matrix37);
        int int48 = matrix25.getCols();
        com.operations.Matrix.Matrix matrix50 = com.operations.Matrix.MatrixTransformations.rotate2D((double) (short) 0);
        boolean boolean52 = com.operations.Matrix.MatrixUtils.compare(matrix25, matrix50, (double) (short) 100);
        double[] doubleArray55 = new double[] { 10, 'a' };
        double[] doubleArray58 = new double[] { 10, 'a' };
        double[][] doubleArray59 = new double[][] { doubleArray55, doubleArray58 };
        com.operations.Matrix.Matrix matrix60 = new com.operations.Matrix.Matrix(doubleArray59);
        com.operations.Matrix.Matrix matrix61 = new com.operations.Matrix.Matrix(doubleArray59);
        int int62 = matrix61.getCols();
        com.operations.Matrix.Matrix matrix63 = com.operations.Matrix.MatrixOperations.add(matrix50, matrix61);
        boolean boolean65 = com.operations.Matrix.MatrixUtils.compare(matrix12, matrix50, 0.0d);
        boolean boolean66 = com.operations.Matrix.MatrixUtils.isSymmetric(matrix12);
        org.junit.Assert.assertNotNull(matrix5);
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 35.0d + "'", double8 == 35.0d);
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 350.0d + "'", double9 == 350.0d);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1 + "'", int10 == 1);
        org.junit.Assert.assertNotNull(matrix12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertArrayEquals(doubleArray17, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertArrayEquals(doubleArray20, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 2 + "'", int23 == 2);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertNotNull(matrix25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 2 + "'", int26 == 2);
        org.junit.Assert.assertNotNull(matrix29);
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertArrayEquals(doubleArray32, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertArrayEquals(doubleArray35, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 2 + "'", int38 == 2);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 2 + "'", int39 == 2);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 2 + "'", int40 == 2);
        org.junit.Assert.assertNotNull(matrixArray41);
        org.junit.Assert.assertNotNull(matrix42);
        org.junit.Assert.assertNotNull(matrix44);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(matrix47);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 2 + "'", int48 == 2);
        org.junit.Assert.assertNotNull(matrix50);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + true + "'", boolean52 == true);
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertArrayEquals(doubleArray55, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray58);
        org.junit.Assert.assertArrayEquals(doubleArray58, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray59);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 2 + "'", int62 == 2);
        org.junit.Assert.assertNotNull(matrix63);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
    }

    @Test
    public void test3947() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3947");
        com.operations.Matrix.Matrix matrix4 = com.operations.Matrix.MatrixUtils.generateRandomMatrix(52, 100, 10, (int) (byte) 100);
        org.junit.Assert.assertNotNull(matrix4);
    }

    @Test
    public void test3948() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3948");
        com.operations.Matrix.Matrix matrix2 = com.operations.Matrix.MatrixTransformations.project2D((double) (byte) 100, 32.0d);
        boolean boolean3 = com.operations.Matrix.MatrixUtils.isSymmetric(matrix2);
        matrix2.print();
        com.operations.Matrix.Matrix matrix5 = com.operations.Matrix.MatrixOperations.transpose(matrix2);
        com.operations.Matrix.Matrix matrix6 = com.operations.Matrix.MatrixDecompositions.choleskyDecomposition(matrix2);
        com.operations.Matrix.Matrix matrix9 = com.operations.Matrix.MatrixTransformations.project2D(52.009614495783374d, (double) (short) 100);
        com.operations.Matrix.Matrix matrix10 = com.operations.Matrix.MatrixOperations.add(matrix2, matrix9);
        int int11 = matrix2.getRows();
        double double12 = com.operations.Matrix.MatrixUtils.frobeniusNorm(matrix2);
        org.junit.Assert.assertNotNull(matrix2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNotNull(matrix5);
        org.junit.Assert.assertNotNull(matrix6);
        org.junit.Assert.assertNotNull(matrix9);
        org.junit.Assert.assertNotNull(matrix10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 2 + "'", int11 == 2);
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 104.9952379872535d + "'", double12 == 104.9952379872535d);
    }

    @Test
    public void test3949() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3949");
        com.operations.Matrix.Matrix matrix2 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0L, (double) (byte) 10);
        double[] doubleArray5 = new double[] { 10, 'a' };
        double[] doubleArray8 = new double[] { 10, 'a' };
        double[][] doubleArray9 = new double[][] { doubleArray5, doubleArray8 };
        com.operations.Matrix.Matrix matrix10 = new com.operations.Matrix.Matrix(doubleArray9);
        int int11 = matrix10.getCols();
        int int12 = matrix10.getCols();
        int int13 = matrix10.getCols();
        com.operations.Matrix.Matrix[] matrixArray14 = com.operations.Matrix.MatrixDecompositions.luDecomposition(matrix10);
        com.operations.Matrix.Matrix matrix15 = com.operations.Matrix.MatrixOperations.multiply(matrix2, matrix10);
        com.operations.Matrix.Matrix matrix17 = com.operations.Matrix.MatrixTransformations.rotate2D((double) (short) 100);
        boolean boolean19 = com.operations.Matrix.MatrixUtils.compare(matrix10, matrix17, (double) (byte) 0);
        com.operations.Matrix.Matrix[] matrixArray20 = com.operations.Matrix.MatrixDecompositions.luDecomposition(matrix10);
        com.operations.Matrix.Matrix matrix21 = com.operations.Matrix.MatrixOperations.transpose(matrix10);
        com.operations.Matrix.Matrix matrix24 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0L, (double) (byte) 10);
        int int25 = matrix24.getRows();
        com.operations.Matrix.Matrix matrix28 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0L, (double) (byte) 10);
        int int29 = matrix28.getRows();
        com.operations.Matrix.Matrix matrix31 = com.operations.Matrix.MatrixOperations.scalarMultiply(matrix28, (double) 2);
        com.operations.Matrix.Matrix matrix32 = com.operations.Matrix.MatrixOperations.subtract(matrix24, matrix28);
        boolean boolean34 = com.operations.Matrix.MatrixUtils.compare(matrix10, matrix24, (double) ' ');
        com.operations.Matrix.Matrix matrix37 = com.operations.Matrix.MatrixTransformations.project2D((double) ' ', 0.0d);
        double[] doubleArray40 = new double[] { 10, 'a' };
        double[] doubleArray43 = new double[] { 10, 'a' };
        double[][] doubleArray44 = new double[][] { doubleArray40, doubleArray43 };
        com.operations.Matrix.Matrix matrix45 = new com.operations.Matrix.Matrix(doubleArray44);
        int int46 = matrix45.getCols();
        boolean boolean47 = com.operations.Matrix.MatrixUtils.isSquare(matrix45);
        com.operations.Matrix.Matrix matrix48 = com.operations.Matrix.MatrixOperations.transpose(matrix45);
        int int49 = matrix48.getRows();
        com.operations.Matrix.Matrix matrix52 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0L, (double) (byte) 10);
        double[] doubleArray55 = new double[] { 10, 'a' };
        double[] doubleArray58 = new double[] { 10, 'a' };
        double[][] doubleArray59 = new double[][] { doubleArray55, doubleArray58 };
        com.operations.Matrix.Matrix matrix60 = new com.operations.Matrix.Matrix(doubleArray59);
        int int61 = matrix60.getCols();
        int int62 = matrix60.getCols();
        int int63 = matrix60.getCols();
        com.operations.Matrix.Matrix[] matrixArray64 = com.operations.Matrix.MatrixDecompositions.luDecomposition(matrix60);
        com.operations.Matrix.Matrix matrix65 = com.operations.Matrix.MatrixOperations.multiply(matrix52, matrix60);
        com.operations.Matrix.Matrix matrix67 = com.operations.Matrix.MatrixTransformations.rotate2D((double) (short) 100);
        boolean boolean69 = com.operations.Matrix.MatrixUtils.compare(matrix60, matrix67, (double) (byte) 0);
        com.operations.Matrix.Matrix matrix70 = com.operations.Matrix.MatrixOperations.multiply(matrix48, matrix60);
        com.operations.Matrix.Matrix matrix71 = com.operations.Matrix.MatrixOperations.add(matrix37, matrix60);
        com.operations.Matrix.Matrix matrix72 = com.operations.Matrix.MatrixOperations.transpose(matrix37);
        matrix37.print();
        com.operations.Matrix.Matrix matrix74 = com.operations.Matrix.MatrixOperations.add(matrix24, matrix37);
        double double75 = com.operations.Matrix.MatrixUtils.frobeniusNorm(matrix74);
        com.operations.Matrix.Matrix matrix77 = com.operations.Matrix.MatrixOperations.scalarMultiply(matrix74, (double) 'a');
        int int78 = matrix77.getCols();
        org.junit.Assert.assertNotNull(matrix2);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertArrayEquals(doubleArray5, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertArrayEquals(doubleArray8, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 2 + "'", int11 == 2);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 2 + "'", int12 == 2);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 2 + "'", int13 == 2);
        org.junit.Assert.assertNotNull(matrixArray14);
        org.junit.Assert.assertNotNull(matrix15);
        org.junit.Assert.assertNotNull(matrix17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(matrixArray20);
        org.junit.Assert.assertNotNull(matrix21);
        org.junit.Assert.assertNotNull(matrix24);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 2 + "'", int25 == 2);
        org.junit.Assert.assertNotNull(matrix28);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 2 + "'", int29 == 2);
        org.junit.Assert.assertNotNull(matrix31);
        org.junit.Assert.assertNotNull(matrix32);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(matrix37);
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertArrayEquals(doubleArray40, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertArrayEquals(doubleArray43, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 2 + "'", int46 == 2);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        org.junit.Assert.assertNotNull(matrix48);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 2 + "'", int49 == 2);
        org.junit.Assert.assertNotNull(matrix52);
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertArrayEquals(doubleArray55, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray58);
        org.junit.Assert.assertArrayEquals(doubleArray58, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray59);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 2 + "'", int61 == 2);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 2 + "'", int62 == 2);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 2 + "'", int63 == 2);
        org.junit.Assert.assertNotNull(matrixArray64);
        org.junit.Assert.assertNotNull(matrix65);
        org.junit.Assert.assertNotNull(matrix67);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertNotNull(matrix70);
        org.junit.Assert.assertNotNull(matrix71);
        org.junit.Assert.assertNotNull(matrix72);
        org.junit.Assert.assertNotNull(matrix74);
        org.junit.Assert.assertTrue("'" + double75 + "' != '" + 33.52610922848042d + "'", double75 == 33.52610922848042d);
        org.junit.Assert.assertNotNull(matrix77);
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + 2 + "'", int78 == 2);
    }

    @Test
    public void test3950() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3950");
        com.operations.Matrix.Matrix matrix5 = com.operations.Matrix.MatrixUtils.generateRandomMatrix(10, (int) ' ', (int) '#', 97, (long) '4');
        com.operations.Matrix.Matrix matrix6 = com.operations.Matrix.MatrixOperations.transpose(matrix5);
        org.junit.Assert.assertNotNull(matrix5);
        org.junit.Assert.assertNotNull(matrix6);
    }

    @Test
    public void test3951() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3951");
        com.operations.Matrix.Matrix matrix2 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0L, (double) (byte) 10);
        int int3 = matrix2.getRows();
        com.operations.Matrix.Matrix matrix9 = com.operations.Matrix.MatrixUtils.generateRandomMatrix(100, (int) (byte) 1, (int) '#', (int) '#', 1L);
        boolean boolean11 = com.operations.Matrix.MatrixUtils.compare(matrix2, matrix9, (double) 1.0f);
        matrix9.print();
        com.operations.Matrix.Matrix matrix13 = com.operations.Matrix.MatrixOperations.transpose(matrix9);
        com.operations.Matrix.Matrix matrix14 = com.operations.Matrix.MatrixOperations.transpose(matrix9);
        double double15 = com.operations.Matrix.MatrixUtils.frobeniusNorm(matrix9);
        com.operations.Matrix.Matrix matrix21 = com.operations.Matrix.MatrixUtils.generateRandomMatrix(100, 1, (-1), (int) (byte) -1, (long) (short) 1);
        com.operations.Matrix.Matrix matrix23 = com.operations.Matrix.MatrixOperations.scalarMultiply(matrix21, (double) (byte) -1);
        com.operations.Matrix.Matrix matrix24 = com.operations.Matrix.MatrixOperations.subtract(matrix9, matrix23);
        com.operations.Matrix.Matrix matrix26 = com.operations.Matrix.MatrixOperations.scalarMultiply(matrix24, 137.90576492663385d);
        com.operations.Matrix.Matrix matrix28 = com.operations.Matrix.MatrixTransformations.rotate2D((-0.1736481776669303d));
        double[] doubleArray31 = new double[] { 10, 'a' };
        double[] doubleArray34 = new double[] { 10, 'a' };
        double[][] doubleArray35 = new double[][] { doubleArray31, doubleArray34 };
        com.operations.Matrix.Matrix matrix36 = new com.operations.Matrix.Matrix(doubleArray35);
        com.operations.Matrix.Matrix matrix37 = new com.operations.Matrix.Matrix(doubleArray35);
        boolean boolean38 = com.operations.Matrix.MatrixUtils.isSquare(matrix37);
        double[] doubleArray41 = new double[] { 10, 'a' };
        double[] doubleArray44 = new double[] { 10, 'a' };
        double[][] doubleArray45 = new double[][] { doubleArray41, doubleArray44 };
        com.operations.Matrix.Matrix matrix46 = new com.operations.Matrix.Matrix(doubleArray45);
        int int47 = matrix46.getCols();
        int int48 = matrix46.getCols();
        matrix46.print();
        double[] doubleArray52 = new double[] { 10, 'a' };
        double[] doubleArray55 = new double[] { 10, 'a' };
        double[][] doubleArray56 = new double[][] { doubleArray52, doubleArray55 };
        com.operations.Matrix.Matrix matrix57 = new com.operations.Matrix.Matrix(doubleArray56);
        boolean boolean59 = com.operations.Matrix.MatrixUtils.compare(matrix46, matrix57, (double) (-1));
        com.operations.Matrix.Matrix matrix60 = com.operations.Matrix.MatrixOperations.subtract(matrix37, matrix57);
        double[] doubleArray63 = new double[] { 10, 'a' };
        double[] doubleArray66 = new double[] { 10, 'a' };
        double[][] doubleArray67 = new double[][] { doubleArray63, doubleArray66 };
        com.operations.Matrix.Matrix matrix68 = new com.operations.Matrix.Matrix(doubleArray67);
        com.operations.Matrix.Matrix matrix69 = new com.operations.Matrix.Matrix(doubleArray67);
        boolean boolean70 = com.operations.Matrix.MatrixUtils.isSquare(matrix69);
        double[] doubleArray73 = new double[] { 10, 'a' };
        double[] doubleArray76 = new double[] { 10, 'a' };
        double[][] doubleArray77 = new double[][] { doubleArray73, doubleArray76 };
        com.operations.Matrix.Matrix matrix78 = new com.operations.Matrix.Matrix(doubleArray77);
        int int79 = matrix78.getCols();
        int int80 = matrix78.getCols();
        matrix78.print();
        double[] doubleArray84 = new double[] { 10, 'a' };
        double[] doubleArray87 = new double[] { 10, 'a' };
        double[][] doubleArray88 = new double[][] { doubleArray84, doubleArray87 };
        com.operations.Matrix.Matrix matrix89 = new com.operations.Matrix.Matrix(doubleArray88);
        boolean boolean91 = com.operations.Matrix.MatrixUtils.compare(matrix78, matrix89, (double) (-1));
        com.operations.Matrix.Matrix matrix92 = com.operations.Matrix.MatrixOperations.subtract(matrix69, matrix89);
        com.operations.Matrix.Matrix matrix93 = com.operations.Matrix.MatrixOperations.add(matrix37, matrix92);
        com.operations.Matrix.Matrix matrix94 = com.operations.Matrix.MatrixOperations.multiply(matrix28, matrix93);
        boolean boolean95 = com.operations.Matrix.MatrixUtils.isSymmetric(matrix94);
        // The following exception was thrown during execution in test generation
        try {
            com.operations.Matrix.Matrix matrix96 = com.operations.Matrix.MatrixOperations.add(matrix26, matrix94);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Matrices must have the same dimensions for addition.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(matrix2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 2 + "'", int3 == 2);
        org.junit.Assert.assertNotNull(matrix9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(matrix13);
        org.junit.Assert.assertNotNull(matrix14);
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 350.0d + "'", double15 == 350.0d);
        org.junit.Assert.assertNotNull(matrix21);
        org.junit.Assert.assertNotNull(matrix23);
        org.junit.Assert.assertNotNull(matrix24);
        org.junit.Assert.assertNotNull(matrix26);
        org.junit.Assert.assertNotNull(matrix28);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertArrayEquals(doubleArray31, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertArrayEquals(doubleArray34, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertArrayEquals(doubleArray41, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertArrayEquals(doubleArray44, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 2 + "'", int47 == 2);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 2 + "'", int48 == 2);
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertArrayEquals(doubleArray52, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertArrayEquals(doubleArray55, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray56);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNotNull(matrix60);
        org.junit.Assert.assertNotNull(doubleArray63);
        org.junit.Assert.assertArrayEquals(doubleArray63, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray66);
        org.junit.Assert.assertArrayEquals(doubleArray66, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray67);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + true + "'", boolean70 == true);
        org.junit.Assert.assertNotNull(doubleArray73);
        org.junit.Assert.assertArrayEquals(doubleArray73, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray76);
        org.junit.Assert.assertArrayEquals(doubleArray76, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray77);
        org.junit.Assert.assertTrue("'" + int79 + "' != '" + 2 + "'", int79 == 2);
        org.junit.Assert.assertTrue("'" + int80 + "' != '" + 2 + "'", int80 == 2);
        org.junit.Assert.assertNotNull(doubleArray84);
        org.junit.Assert.assertArrayEquals(doubleArray84, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray87);
        org.junit.Assert.assertArrayEquals(doubleArray87, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray88);
        org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + false + "'", boolean91 == false);
        org.junit.Assert.assertNotNull(matrix92);
        org.junit.Assert.assertNotNull(matrix93);
        org.junit.Assert.assertNotNull(matrix94);
        org.junit.Assert.assertTrue("'" + boolean95 + "' != '" + false + "'", boolean95 == false);
    }

    @Test
    public void test3952() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3952");
        double[] doubleArray2 = new double[] { 10, 'a' };
        double[] doubleArray5 = new double[] { 10, 'a' };
        double[][] doubleArray6 = new double[][] { doubleArray2, doubleArray5 };
        com.operations.Matrix.Matrix matrix7 = new com.operations.Matrix.Matrix(doubleArray6);
        com.operations.Matrix.Matrix matrix8 = new com.operations.Matrix.Matrix(doubleArray6);
        com.operations.Matrix.Matrix[] matrixArray9 = com.operations.Matrix.MatrixDecompositions.luDecomposition(matrix8);
        com.operations.Matrix.Matrix matrix10 = com.operations.Matrix.MatrixDecompositions.choleskyDecomposition(matrix8);
        com.operations.Matrix.Matrix matrix11 = com.operations.Matrix.MatrixDecompositions.choleskyDecomposition(matrix8);
        boolean boolean12 = com.operations.Matrix.MatrixUtils.isSquare(matrix11);
        boolean boolean13 = com.operations.Matrix.MatrixUtils.isSymmetric(matrix11);
        com.operations.Matrix.Matrix matrix16 = com.operations.Matrix.MatrixTransformations.scale2D((double) '4', 975.1410154434076d);
        com.operations.Matrix.Matrix matrix17 = com.operations.Matrix.MatrixDecompositions.choleskyDecomposition(matrix16);
        com.operations.Matrix.Matrix matrix20 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0L, (double) (byte) 10);
        double[] doubleArray23 = new double[] { 10, 'a' };
        double[] doubleArray26 = new double[] { 10, 'a' };
        double[][] doubleArray27 = new double[][] { doubleArray23, doubleArray26 };
        com.operations.Matrix.Matrix matrix28 = new com.operations.Matrix.Matrix(doubleArray27);
        int int29 = matrix28.getCols();
        int int30 = matrix28.getCols();
        int int31 = matrix28.getCols();
        com.operations.Matrix.Matrix[] matrixArray32 = com.operations.Matrix.MatrixDecompositions.luDecomposition(matrix28);
        com.operations.Matrix.Matrix matrix33 = com.operations.Matrix.MatrixOperations.multiply(matrix20, matrix28);
        int int34 = matrix28.getRows();
        com.operations.Matrix.Matrix matrix36 = com.operations.Matrix.MatrixOperations.scalarMultiply(matrix28, (double) (-1L));
        com.operations.Matrix.Matrix matrix39 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0L, (double) (byte) 10);
        int int40 = matrix39.getRows();
        com.operations.Matrix.Matrix matrix42 = com.operations.Matrix.MatrixOperations.scalarMultiply(matrix39, (double) 2);
        com.operations.Matrix.Matrix[] matrixArray43 = com.operations.Matrix.MatrixDecompositions.luDecomposition(matrix42);
        com.operations.Matrix.Matrix matrix44 = com.operations.Matrix.MatrixOperations.transpose(matrix42);
        com.operations.Matrix.Matrix matrix45 = com.operations.Matrix.MatrixOperations.add(matrix28, matrix42);
        com.operations.Matrix.Matrix matrix47 = com.operations.Matrix.MatrixTransformations.rotate2D((double) '4');
        matrix47.print();
        com.operations.Matrix.Matrix matrix49 = com.operations.Matrix.MatrixOperations.transpose(matrix47);
        double[][] doubleArray50 = matrix47.getData();
        com.operations.Matrix.Matrix matrix53 = com.operations.Matrix.MatrixTransformations.project2D(400.0d, 36.40054944640259d);
        com.operations.Matrix.Matrix matrix55 = com.operations.Matrix.MatrixTransformations.rotate2D(100.0d);
        int int56 = matrix55.getCols();
        matrix55.print();
        com.operations.Matrix.Matrix matrix59 = com.operations.Matrix.MatrixOperations.scalarMultiply(matrix55, (double) (byte) 1);
        com.operations.Matrix.Matrix matrix61 = com.operations.Matrix.MatrixTransformations.rotate2D(350.0d);
        com.operations.Matrix.Matrix matrix63 = com.operations.Matrix.MatrixTransformations.rotate2D((double) (short) 100);
        double[] doubleArray66 = new double[] { 137.90576492663388d, (byte) -1 };
        double[] doubleArray67 = com.operations.Matrix.MatrixSolver.solveGaussian(matrix63, doubleArray66);
        double[] doubleArray68 = com.operations.Matrix.MatrixSolver.solveGaussian(matrix61, doubleArray67);
        double[] doubleArray69 = com.operations.Matrix.MatrixSolver.solveGaussian(matrix55, doubleArray67);
        double[] doubleArray70 = com.operations.Matrix.MatrixSolver.solveGaussian(matrix53, doubleArray67);
        double[] doubleArray71 = com.operations.Matrix.MatrixSolver.solveGaussian(matrix47, doubleArray70);
        double[] doubleArray72 = com.operations.Matrix.MatrixSolver.solveGaussian(matrix45, doubleArray71);
        double[] doubleArray73 = com.operations.Matrix.MatrixSolver.solveGaussian(matrix16, doubleArray71);
        double[] doubleArray74 = com.operations.Matrix.MatrixSolver.solveGaussian(matrix11, doubleArray71);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertArrayEquals(doubleArray2, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertArrayEquals(doubleArray5, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertNotNull(matrixArray9);
        org.junit.Assert.assertNotNull(matrix10);
        org.junit.Assert.assertNotNull(matrix11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(matrix16);
        org.junit.Assert.assertNotNull(matrix17);
        org.junit.Assert.assertNotNull(matrix20);
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertArrayEquals(doubleArray23, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertArrayEquals(doubleArray26, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 2 + "'", int29 == 2);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 2 + "'", int30 == 2);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 2 + "'", int31 == 2);
        org.junit.Assert.assertNotNull(matrixArray32);
        org.junit.Assert.assertNotNull(matrix33);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 2 + "'", int34 == 2);
        org.junit.Assert.assertNotNull(matrix36);
        org.junit.Assert.assertNotNull(matrix39);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 2 + "'", int40 == 2);
        org.junit.Assert.assertNotNull(matrix42);
        org.junit.Assert.assertNotNull(matrixArray43);
        org.junit.Assert.assertNotNull(matrix44);
        org.junit.Assert.assertNotNull(matrix45);
        org.junit.Assert.assertNotNull(matrix47);
        org.junit.Assert.assertNotNull(matrix49);
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertNotNull(matrix53);
        org.junit.Assert.assertNotNull(matrix55);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 2 + "'", int56 == 2);
        org.junit.Assert.assertNotNull(matrix59);
        org.junit.Assert.assertNotNull(matrix61);
        org.junit.Assert.assertNotNull(matrix63);
        org.junit.Assert.assertNotNull(doubleArray66);
        org.junit.Assert.assertArrayEquals(doubleArray66, new double[] { 137.90576492663388d, (-1.0d) }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray67);
        org.junit.Assert.assertArrayEquals(doubleArray67, new double[] { (-24.931892522286255d), (-135.63701830716116d) }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray68);
        org.junit.Assert.assertArrayEquals(doubleArray68, new double[] { (-0.9999999999999858d), (-137.90576492663388d) }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray69);
        org.junit.Assert.assertArrayEquals(doubleArray69, new double[] { (-129.24700952206834d), 48.1062421064292d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray70);
        org.junit.Assert.assertArrayEquals(doubleArray70, new double[] { (-0.06232973130571564d), (-3.7262354653980627d) }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray71);
        org.junit.Assert.assertArrayEquals(doubleArray71, new double[] { (-2.9746876315367503d), (-2.2449831254994406d) }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray72);
        org.junit.Assert.assertArrayEquals(doubleArray72, new double[] { (-0.6513754485817702d), 0.03648522530186549d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray73);
        org.junit.Assert.assertArrayEquals(doubleArray73, new double[] { (-0.057205531375706734d), (-0.0023022138233808383d) }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray74);
        org.junit.Assert.assertArrayEquals(doubleArray74, new double[] { (-0.9406788243187852d), 0.07823253476502205d }, 1.0E-15);
    }

    @Test
    public void test3953() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3953");
        com.operations.Matrix.Matrix matrix2 = com.operations.Matrix.MatrixTransformations.project2D(0.0d, (double) 0);
        com.operations.Matrix.Matrix[] matrixArray3 = com.operations.Matrix.MatrixDecompositions.luDecomposition(matrix2);
        com.operations.Matrix.Matrix matrix6 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0L, (double) (byte) 10);
        int int7 = matrix6.getRows();
        com.operations.Matrix.Matrix matrix9 = com.operations.Matrix.MatrixOperations.scalarMultiply(matrix6, (double) 2);
        double double10 = com.operations.Matrix.MatrixUtils.frobeniusNorm(matrix6);
        int int11 = matrix6.getRows();
        com.operations.Matrix.Matrix matrix12 = com.operations.Matrix.MatrixOperations.transpose(matrix6);
        com.operations.Matrix.Matrix matrix13 = com.operations.Matrix.MatrixOperations.multiply(matrix2, matrix12);
        double[][] doubleArray14 = matrix2.getData();
        com.operations.Matrix.Matrix matrix15 = new com.operations.Matrix.Matrix(doubleArray14);
        com.operations.Matrix.Matrix matrix16 = new com.operations.Matrix.Matrix(doubleArray14);
        com.operations.Matrix.Matrix matrix19 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0L, (double) (byte) 10);
        int int20 = matrix19.getRows();
        com.operations.Matrix.Matrix matrix23 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0L, (double) (byte) 10);
        int int24 = matrix23.getRows();
        com.operations.Matrix.Matrix matrix26 = com.operations.Matrix.MatrixOperations.scalarMultiply(matrix23, (double) 2);
        com.operations.Matrix.Matrix matrix27 = com.operations.Matrix.MatrixOperations.subtract(matrix19, matrix23);
        com.operations.Matrix.Matrix matrix30 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0L, (double) (byte) 10);
        int int31 = matrix30.getRows();
        com.operations.Matrix.Matrix matrix37 = com.operations.Matrix.MatrixUtils.generateRandomMatrix(100, (int) (byte) 1, (int) '#', (int) '#', 1L);
        boolean boolean39 = com.operations.Matrix.MatrixUtils.compare(matrix30, matrix37, (double) 1.0f);
        com.operations.Matrix.Matrix matrix41 = com.operations.Matrix.MatrixOperations.scalarMultiply(matrix30, (double) 1L);
        boolean boolean43 = com.operations.Matrix.MatrixUtils.compare(matrix27, matrix41, 0.0d);
        int int44 = matrix41.getCols();
        com.operations.Matrix.Matrix matrix45 = com.operations.Matrix.MatrixOperations.transpose(matrix41);
        double double46 = com.operations.Matrix.MatrixUtils.frobeniusNorm(matrix45);
        com.operations.Matrix.Matrix matrix47 = com.operations.Matrix.MatrixOperations.add(matrix16, matrix45);
        com.operations.Matrix.Matrix[] matrixArray48 = com.operations.Matrix.MatrixDecompositions.luDecomposition(matrix16);
        matrix16.print();
        org.junit.Assert.assertNotNull(matrix2);
        org.junit.Assert.assertNotNull(matrixArray3);
        org.junit.Assert.assertNotNull(matrix6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 2 + "'", int7 == 2);
        org.junit.Assert.assertNotNull(matrix9);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 10.0d + "'", double10 == 10.0d);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 2 + "'", int11 == 2);
        org.junit.Assert.assertNotNull(matrix12);
        org.junit.Assert.assertNotNull(matrix13);
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertNotNull(matrix19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 2 + "'", int20 == 2);
        org.junit.Assert.assertNotNull(matrix23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 2 + "'", int24 == 2);
        org.junit.Assert.assertNotNull(matrix26);
        org.junit.Assert.assertNotNull(matrix27);
        org.junit.Assert.assertNotNull(matrix30);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 2 + "'", int31 == 2);
        org.junit.Assert.assertNotNull(matrix37);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(matrix41);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 2 + "'", int44 == 2);
        org.junit.Assert.assertNotNull(matrix45);
        org.junit.Assert.assertTrue("'" + double46 + "' != '" + 10.0d + "'", double46 == 10.0d);
        org.junit.Assert.assertNotNull(matrix47);
        org.junit.Assert.assertNotNull(matrixArray48);
    }

    @Test
    public void test3954() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3954");
        com.operations.Matrix.Matrix matrix2 = new com.operations.Matrix.Matrix((int) '4', (int) (byte) 0);
        com.operations.Matrix.Matrix matrix8 = com.operations.Matrix.MatrixUtils.generateRandomMatrix((int) '4', (int) ' ', 10, 0, (long) (short) -1);
        boolean boolean10 = com.operations.Matrix.MatrixUtils.compare(matrix2, matrix8, 14.142135623730951d);
        double[] doubleArray13 = new double[] { 10, 'a' };
        double[] doubleArray16 = new double[] { 10, 'a' };
        double[][] doubleArray17 = new double[][] { doubleArray13, doubleArray16 };
        com.operations.Matrix.Matrix matrix18 = new com.operations.Matrix.Matrix(doubleArray17);
        com.operations.Matrix.Matrix matrix19 = new com.operations.Matrix.Matrix(doubleArray17);
        com.operations.Matrix.Matrix[] matrixArray20 = com.operations.Matrix.MatrixDecompositions.luDecomposition(matrix19);
        com.operations.Matrix.Matrix matrix23 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0, (double) 100L);
        com.operations.Matrix.Matrix matrix24 = com.operations.Matrix.MatrixOperations.subtract(matrix19, matrix23);
        boolean boolean25 = com.operations.Matrix.MatrixUtils.isSymmetric(matrix19);
        matrix19.setValue(0, 0, (double) '#');
        com.operations.Matrix.Matrix matrix31 = com.operations.Matrix.MatrixTransformations.rotate2D((double) (short) 100);
        double[] doubleArray34 = new double[] { 137.90576492663388d, (byte) -1 };
        double[] doubleArray35 = com.operations.Matrix.MatrixSolver.solveGaussian(matrix31, doubleArray34);
        com.operations.Matrix.Matrix matrix38 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0L, (double) (byte) 10);
        double[] doubleArray41 = new double[] { 10, 'a' };
        double[] doubleArray44 = new double[] { 10, 'a' };
        double[][] doubleArray45 = new double[][] { doubleArray41, doubleArray44 };
        com.operations.Matrix.Matrix matrix46 = new com.operations.Matrix.Matrix(doubleArray45);
        int int47 = matrix46.getCols();
        int int48 = matrix46.getCols();
        int int49 = matrix46.getCols();
        com.operations.Matrix.Matrix[] matrixArray50 = com.operations.Matrix.MatrixDecompositions.luDecomposition(matrix46);
        com.operations.Matrix.Matrix matrix51 = com.operations.Matrix.MatrixOperations.multiply(matrix38, matrix46);
        boolean boolean53 = com.operations.Matrix.MatrixUtils.compare(matrix31, matrix38, (double) (-1L));
        double[][] doubleArray54 = matrix31.getData();
        com.operations.Matrix.Matrix matrix56 = com.operations.Matrix.MatrixTransformations.rotate2D((double) (short) 100);
        double[] doubleArray59 = new double[] { 137.90576492663388d, (byte) -1 };
        double[] doubleArray60 = com.operations.Matrix.MatrixSolver.solveGaussian(matrix56, doubleArray59);
        double[] doubleArray61 = com.operations.Matrix.MatrixSolver.solveGaussian(matrix31, doubleArray59);
        double[] doubleArray62 = com.operations.Matrix.MatrixSolver.solveGaussian(matrix19, doubleArray59);
        // The following exception was thrown during execution in test generation
        try {
            double[] doubleArray63 = com.operations.Matrix.MatrixSolver.solveGaussian(matrix2, doubleArray62);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Matrix must be square to solve equations.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(matrix8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertArrayEquals(doubleArray13, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertArrayEquals(doubleArray16, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertNotNull(matrixArray20);
        org.junit.Assert.assertNotNull(matrix23);
        org.junit.Assert.assertNotNull(matrix24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(matrix31);
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertArrayEquals(doubleArray34, new double[] { 137.90576492663388d, (-1.0d) }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertArrayEquals(doubleArray35, new double[] { (-24.931892522286255d), (-135.63701830716116d) }, 1.0E-15);
        org.junit.Assert.assertNotNull(matrix38);
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertArrayEquals(doubleArray41, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertArrayEquals(doubleArray44, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 2 + "'", int47 == 2);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 2 + "'", int48 == 2);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 2 + "'", int49 == 2);
        org.junit.Assert.assertNotNull(matrixArray50);
        org.junit.Assert.assertNotNull(matrix51);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(doubleArray54);
        org.junit.Assert.assertNotNull(matrix56);
        org.junit.Assert.assertNotNull(doubleArray59);
        org.junit.Assert.assertArrayEquals(doubleArray59, new double[] { 137.90576492663388d, (-1.0d) }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray60);
        org.junit.Assert.assertArrayEquals(doubleArray60, new double[] { (-24.931892522286255d), (-135.63701830716116d) }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray61);
        org.junit.Assert.assertArrayEquals(doubleArray61, new double[] { (-24.931892522286255d), (-135.63701830716116d) }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray62);
        org.junit.Assert.assertArrayEquals(doubleArray62, new double[] { 5.556230597065356d, (-0.5831165563984902d) }, 1.0E-15);
    }

    @Test
    public void test3955() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3955");
        com.operations.Matrix.Matrix matrix2 = com.operations.Matrix.MatrixTransformations.project2D(10.0d, (double) '#');
        double[][] doubleArray3 = matrix2.getData();
        com.operations.Matrix.Matrix matrix4 = new com.operations.Matrix.Matrix(doubleArray3);
        org.junit.Assert.assertNotNull(matrix2);
        org.junit.Assert.assertNotNull(doubleArray3);
    }

    @Test
    public void test3956() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3956");
        com.operations.Matrix.Matrix matrix2 = com.operations.Matrix.MatrixTransformations.project2D((double) ' ', 0.0d);
        double[] doubleArray5 = new double[] { 10, 'a' };
        double[] doubleArray8 = new double[] { 10, 'a' };
        double[][] doubleArray9 = new double[][] { doubleArray5, doubleArray8 };
        com.operations.Matrix.Matrix matrix10 = new com.operations.Matrix.Matrix(doubleArray9);
        int int11 = matrix10.getCols();
        boolean boolean12 = com.operations.Matrix.MatrixUtils.isSquare(matrix10);
        com.operations.Matrix.Matrix matrix13 = com.operations.Matrix.MatrixOperations.transpose(matrix10);
        int int14 = matrix13.getRows();
        com.operations.Matrix.Matrix matrix17 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0L, (double) (byte) 10);
        double[] doubleArray20 = new double[] { 10, 'a' };
        double[] doubleArray23 = new double[] { 10, 'a' };
        double[][] doubleArray24 = new double[][] { doubleArray20, doubleArray23 };
        com.operations.Matrix.Matrix matrix25 = new com.operations.Matrix.Matrix(doubleArray24);
        int int26 = matrix25.getCols();
        int int27 = matrix25.getCols();
        int int28 = matrix25.getCols();
        com.operations.Matrix.Matrix[] matrixArray29 = com.operations.Matrix.MatrixDecompositions.luDecomposition(matrix25);
        com.operations.Matrix.Matrix matrix30 = com.operations.Matrix.MatrixOperations.multiply(matrix17, matrix25);
        com.operations.Matrix.Matrix matrix32 = com.operations.Matrix.MatrixTransformations.rotate2D((double) (short) 100);
        boolean boolean34 = com.operations.Matrix.MatrixUtils.compare(matrix25, matrix32, (double) (byte) 0);
        com.operations.Matrix.Matrix matrix35 = com.operations.Matrix.MatrixOperations.multiply(matrix13, matrix25);
        com.operations.Matrix.Matrix matrix36 = com.operations.Matrix.MatrixOperations.add(matrix2, matrix25);
        matrix25.print();
        boolean boolean38 = com.operations.Matrix.MatrixUtils.isSquare(matrix25);
        com.operations.Matrix.Matrix matrix39 = com.operations.Matrix.MatrixDecompositions.choleskyDecomposition(matrix25);
        int int40 = matrix39.getCols();
        org.junit.Assert.assertNotNull(matrix2);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertArrayEquals(doubleArray5, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertArrayEquals(doubleArray8, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 2 + "'", int11 == 2);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(matrix13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 2 + "'", int14 == 2);
        org.junit.Assert.assertNotNull(matrix17);
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertArrayEquals(doubleArray20, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertArrayEquals(doubleArray23, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 2 + "'", int26 == 2);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 2 + "'", int27 == 2);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 2 + "'", int28 == 2);
        org.junit.Assert.assertNotNull(matrixArray29);
        org.junit.Assert.assertNotNull(matrix30);
        org.junit.Assert.assertNotNull(matrix32);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(matrix35);
        org.junit.Assert.assertNotNull(matrix36);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertNotNull(matrix39);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 2 + "'", int40 == 2);
    }

    @Test
    public void test3957() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3957");
        com.operations.Matrix.Matrix matrix5 = com.operations.Matrix.MatrixUtils.generateRandomMatrix(10, 1, 35, (int) (short) 1, (long) '4');
        // The following exception was thrown during execution in test generation
        try {
            com.operations.Matrix.Matrix[] matrixArray6 = com.operations.Matrix.MatrixDecompositions.luDecomposition(matrix5);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Matrix must be square for LU decomposition.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(matrix5);
    }

    @Test
    public void test3958() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3958");
        com.operations.Matrix.Matrix matrix2 = com.operations.Matrix.MatrixTransformations.project2D(10.0d, (double) 1);
        double[][] doubleArray3 = matrix2.getData();
        com.operations.Matrix.Matrix matrix4 = new com.operations.Matrix.Matrix(doubleArray3);
        com.operations.Matrix.Matrix matrix6 = com.operations.Matrix.MatrixOperations.scalarMultiply(matrix4, (-1.0d));
        matrix6.print();
        // The following exception was thrown during execution in test generation
        try {
            matrix6.setValue((int) (short) 10, (int) 'a', 0.0d);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: Index 10 out of bounds for length 2");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(matrix2);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertNotNull(matrix6);
    }

    @Test
    public void test3959() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3959");
        com.operations.Matrix.Matrix matrix2 = com.operations.Matrix.MatrixTransformations.project2D((double) ' ', (double) (short) 0);
        double[][] doubleArray3 = matrix2.getData();
        org.junit.Assert.assertNotNull(matrix2);
        org.junit.Assert.assertNotNull(doubleArray3);
    }

    @Test
    public void test3960() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3960");
        // The following exception was thrown during execution in test generation
        try {
            com.operations.Matrix.Matrix matrix2 = new com.operations.Matrix.Matrix(97, (int) (short) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.NegativeArraySizeException; message: -1");
        } catch (java.lang.NegativeArraySizeException e) {
            // Expected exception.
        }
    }

    @Test
    public void test3961() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3961");
        com.operations.Matrix.Matrix matrix1 = com.operations.Matrix.MatrixTransformations.rotate2D(14009.328092863216d);
        org.junit.Assert.assertNotNull(matrix1);
    }

    @Test
    public void test3962() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3962");
        // The following exception was thrown during execution in test generation
        try {
            com.operations.Matrix.Matrix matrix2 = new com.operations.Matrix.Matrix((int) (short) -1, (int) ' ');
            org.junit.Assert.fail("Expected exception of type java.lang.NegativeArraySizeException; message: -1");
        } catch (java.lang.NegativeArraySizeException e) {
            // Expected exception.
        }
    }

    @Test
    public void test3963() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3963");
        com.operations.Matrix.Matrix matrix2 = com.operations.Matrix.MatrixTransformations.project2D((double) (short) 100, (double) 0L);
        boolean boolean3 = com.operations.Matrix.MatrixUtils.isSquare(matrix2);
        double[] doubleArray6 = new double[] { 10, 'a' };
        double[] doubleArray9 = new double[] { 10, 'a' };
        double[][] doubleArray10 = new double[][] { doubleArray6, doubleArray9 };
        com.operations.Matrix.Matrix matrix11 = new com.operations.Matrix.Matrix(doubleArray10);
        com.operations.Matrix.Matrix matrix12 = new com.operations.Matrix.Matrix(doubleArray10);
        com.operations.Matrix.Matrix matrix14 = com.operations.Matrix.MatrixTransformations.rotate2D((double) (short) 100);
        double[] doubleArray17 = new double[] { 137.90576492663388d, (byte) -1 };
        double[] doubleArray18 = com.operations.Matrix.MatrixSolver.solveGaussian(matrix14, doubleArray17);
        com.operations.Matrix.Matrix matrix19 = com.operations.Matrix.MatrixOperations.add(matrix12, matrix14);
        com.operations.Matrix.Matrix matrix20 = com.operations.Matrix.MatrixOperations.transpose(matrix14);
        int int21 = matrix14.getCols();
        int int22 = matrix14.getRows();
        double[] doubleArray25 = new double[] { 10, 'a' };
        double[] doubleArray28 = new double[] { 10, 'a' };
        double[][] doubleArray29 = new double[][] { doubleArray25, doubleArray28 };
        com.operations.Matrix.Matrix matrix30 = new com.operations.Matrix.Matrix(doubleArray29);
        int int31 = matrix30.getCols();
        int int32 = matrix30.getCols();
        matrix30.print();
        double[] doubleArray36 = new double[] { 10, 'a' };
        double[] doubleArray39 = new double[] { 10, 'a' };
        double[][] doubleArray40 = new double[][] { doubleArray36, doubleArray39 };
        com.operations.Matrix.Matrix matrix41 = new com.operations.Matrix.Matrix(doubleArray40);
        boolean boolean43 = com.operations.Matrix.MatrixUtils.compare(matrix30, matrix41, (double) (-1));
        com.operations.Matrix.Matrix matrix44 = com.operations.Matrix.MatrixOperations.multiply(matrix14, matrix30);
        double double47 = matrix14.getValue((int) (short) 0, 0);
        com.operations.Matrix.Matrix matrix48 = com.operations.Matrix.MatrixOperations.add(matrix2, matrix14);
        com.operations.Matrix.Matrix matrix50 = com.operations.Matrix.MatrixOperations.scalarMultiply(matrix48, 0.0d);
        com.operations.Matrix.Matrix matrix52 = com.operations.Matrix.MatrixTransformations.rotate2D((double) (short) 100);
        double[] doubleArray55 = new double[] { 137.90576492663388d, (byte) -1 };
        double[] doubleArray56 = com.operations.Matrix.MatrixSolver.solveGaussian(matrix52, doubleArray55);
        com.operations.Matrix.Matrix matrix59 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0L, (double) (byte) 10);
        double[] doubleArray62 = new double[] { 10, 'a' };
        double[] doubleArray65 = new double[] { 10, 'a' };
        double[][] doubleArray66 = new double[][] { doubleArray62, doubleArray65 };
        com.operations.Matrix.Matrix matrix67 = new com.operations.Matrix.Matrix(doubleArray66);
        int int68 = matrix67.getCols();
        int int69 = matrix67.getCols();
        int int70 = matrix67.getCols();
        com.operations.Matrix.Matrix[] matrixArray71 = com.operations.Matrix.MatrixDecompositions.luDecomposition(matrix67);
        com.operations.Matrix.Matrix matrix72 = com.operations.Matrix.MatrixOperations.multiply(matrix59, matrix67);
        boolean boolean74 = com.operations.Matrix.MatrixUtils.compare(matrix52, matrix59, (double) (-1L));
        com.operations.Matrix.Matrix matrix76 = com.operations.Matrix.MatrixTransformations.rotate2D((-1.0d));
        com.operations.Matrix.Matrix matrix78 = com.operations.Matrix.MatrixTransformations.rotate2D((double) (-1L));
        com.operations.Matrix.Matrix matrix80 = com.operations.Matrix.MatrixTransformations.rotate2D((double) (short) 100);
        double[] doubleArray83 = new double[] { 137.90576492663388d, (byte) -1 };
        double[] doubleArray84 = com.operations.Matrix.MatrixSolver.solveGaussian(matrix80, doubleArray83);
        double[] doubleArray85 = com.operations.Matrix.MatrixSolver.solveGaussian(matrix78, doubleArray83);
        double[] doubleArray86 = com.operations.Matrix.MatrixSolver.solveGaussian(matrix76, doubleArray83);
        boolean boolean88 = com.operations.Matrix.MatrixUtils.compare(matrix59, matrix76, (double) '4');
        com.operations.Matrix.Matrix matrix89 = com.operations.Matrix.MatrixOperations.subtract(matrix48, matrix76);
        com.operations.Matrix.Matrix matrix90 = com.operations.Matrix.MatrixDecompositions.choleskyDecomposition(matrix76);
        org.junit.Assert.assertNotNull(matrix2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertArrayEquals(doubleArray6, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertArrayEquals(doubleArray9, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertNotNull(matrix14);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertArrayEquals(doubleArray17, new double[] { 137.90576492663388d, (-1.0d) }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertArrayEquals(doubleArray18, new double[] { (-24.931892522286255d), (-135.63701830716116d) }, 1.0E-15);
        org.junit.Assert.assertNotNull(matrix19);
        org.junit.Assert.assertNotNull(matrix20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 2 + "'", int21 == 2);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 2 + "'", int22 == 2);
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertArrayEquals(doubleArray25, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertArrayEquals(doubleArray28, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 2 + "'", int31 == 2);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 2 + "'", int32 == 2);
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertArrayEquals(doubleArray36, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertArrayEquals(doubleArray39, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(matrix44);
        org.junit.Assert.assertTrue("'" + double47 + "' != '" + (-0.1736481776669303d) + "'", double47 == (-0.1736481776669303d));
        org.junit.Assert.assertNotNull(matrix48);
        org.junit.Assert.assertNotNull(matrix50);
        org.junit.Assert.assertNotNull(matrix52);
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertArrayEquals(doubleArray55, new double[] { 137.90576492663388d, (-1.0d) }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray56);
        org.junit.Assert.assertArrayEquals(doubleArray56, new double[] { (-24.931892522286255d), (-135.63701830716116d) }, 1.0E-15);
        org.junit.Assert.assertNotNull(matrix59);
        org.junit.Assert.assertNotNull(doubleArray62);
        org.junit.Assert.assertArrayEquals(doubleArray62, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray65);
        org.junit.Assert.assertArrayEquals(doubleArray65, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray66);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 2 + "'", int68 == 2);
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 2 + "'", int69 == 2);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 2 + "'", int70 == 2);
        org.junit.Assert.assertNotNull(matrixArray71);
        org.junit.Assert.assertNotNull(matrix72);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertNotNull(matrix76);
        org.junit.Assert.assertNotNull(matrix78);
        org.junit.Assert.assertNotNull(matrix80);
        org.junit.Assert.assertNotNull(doubleArray83);
        org.junit.Assert.assertArrayEquals(doubleArray83, new double[] { 137.90576492663388d, (-1.0d) }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray84);
        org.junit.Assert.assertArrayEquals(doubleArray84, new double[] { (-24.931892522286255d), (-135.63701830716116d) }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray85);
        org.junit.Assert.assertArrayEquals(doubleArray85, new double[] { 137.90221361711127d, 1.4069397643877004d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray86);
        org.junit.Assert.assertArrayEquals(doubleArray86, new double[] { 137.90221361711127d, 1.4069397643877004d }, 1.0E-15);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + true + "'", boolean88 == true);
        org.junit.Assert.assertNotNull(matrix89);
        org.junit.Assert.assertNotNull(matrix90);
    }

    @Test
    public void test3964() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3964");
        com.operations.Matrix.Matrix matrix2 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0L, (double) (byte) 10);
        int int3 = matrix2.getRows();
        com.operations.Matrix.Matrix matrix9 = com.operations.Matrix.MatrixUtils.generateRandomMatrix(100, (int) (byte) 1, (int) '#', (int) '#', 1L);
        boolean boolean11 = com.operations.Matrix.MatrixUtils.compare(matrix2, matrix9, (double) 1.0f);
        int int12 = matrix2.getCols();
        com.operations.Matrix.Matrix matrix15 = com.operations.Matrix.MatrixTransformations.project2D((double) 100.0f, (double) (short) -1);
        com.operations.Matrix.Matrix matrix16 = com.operations.Matrix.MatrixOperations.add(matrix2, matrix15);
        com.operations.Matrix.Matrix matrix17 = com.operations.Matrix.MatrixOperations.transpose(matrix15);
        int int18 = matrix15.getRows();
        org.junit.Assert.assertNotNull(matrix2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 2 + "'", int3 == 2);
        org.junit.Assert.assertNotNull(matrix9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 2 + "'", int12 == 2);
        org.junit.Assert.assertNotNull(matrix15);
        org.junit.Assert.assertNotNull(matrix16);
        org.junit.Assert.assertNotNull(matrix17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 2 + "'", int18 == 2);
    }

    @Test
    public void test3965() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3965");
        com.operations.Matrix.Matrix matrix2 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0L, (double) (byte) 10);
        int int3 = matrix2.getRows();
        com.operations.Matrix.Matrix matrix9 = com.operations.Matrix.MatrixUtils.generateRandomMatrix(100, (int) (byte) 1, (int) '#', (int) '#', 1L);
        boolean boolean11 = com.operations.Matrix.MatrixUtils.compare(matrix2, matrix9, (double) 1.0f);
        com.operations.Matrix.Matrix matrix13 = com.operations.Matrix.MatrixOperations.scalarMultiply(matrix2, (double) 1L);
        matrix2.print();
        com.operations.Matrix.Matrix[] matrixArray15 = com.operations.Matrix.MatrixDecompositions.luDecomposition(matrix2);
        double[] doubleArray18 = new double[] { 10, 'a' };
        double[] doubleArray21 = new double[] { 10, 'a' };
        double[][] doubleArray22 = new double[][] { doubleArray18, doubleArray21 };
        com.operations.Matrix.Matrix matrix23 = new com.operations.Matrix.Matrix(doubleArray22);
        com.operations.Matrix.Matrix matrix24 = new com.operations.Matrix.Matrix(doubleArray22);
        com.operations.Matrix.Matrix[] matrixArray25 = com.operations.Matrix.MatrixDecompositions.luDecomposition(matrix24);
        com.operations.Matrix.Matrix matrix28 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0, (double) 100L);
        com.operations.Matrix.Matrix matrix29 = com.operations.Matrix.MatrixOperations.subtract(matrix24, matrix28);
        double[][] doubleArray30 = matrix29.getData();
        com.operations.Matrix.Matrix matrix31 = new com.operations.Matrix.Matrix(doubleArray30);
        com.operations.Matrix.Matrix matrix32 = new com.operations.Matrix.Matrix(doubleArray30);
        boolean boolean34 = com.operations.Matrix.MatrixUtils.compare(matrix2, matrix32, (double) 10.0f);
        java.lang.Class<?> wildcardClass35 = matrix32.getClass();
        org.junit.Assert.assertNotNull(matrix2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 2 + "'", int3 == 2);
        org.junit.Assert.assertNotNull(matrix9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(matrix13);
        org.junit.Assert.assertNotNull(matrixArray15);
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertArrayEquals(doubleArray18, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertArrayEquals(doubleArray21, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertNotNull(matrixArray25);
        org.junit.Assert.assertNotNull(matrix28);
        org.junit.Assert.assertNotNull(matrix29);
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(wildcardClass35);
    }

    @Test
    public void test3966() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3966");
        com.operations.Matrix.Matrix matrix2 = com.operations.Matrix.MatrixTransformations.scale2D((double) 35, 0.0d);
        // The following exception was thrown during execution in test generation
        try {
            double double5 = matrix2.getValue((int) '#', 2);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(matrix2);
    }

    @Test
    public void test3967() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3967");
        com.operations.Matrix.Matrix matrix1 = com.operations.Matrix.MatrixTransformations.rotate2D((double) 1.0f);
        com.operations.Matrix.Matrix matrix4 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0L, (double) (byte) 10);
        int int5 = matrix4.getRows();
        com.operations.Matrix.Matrix matrix7 = com.operations.Matrix.MatrixOperations.scalarMultiply(matrix4, (double) 2);
        double double8 = com.operations.Matrix.MatrixUtils.frobeniusNorm(matrix4);
        com.operations.Matrix.Matrix matrix11 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0L, (double) (byte) 10);
        int int12 = matrix11.getRows();
        com.operations.Matrix.Matrix matrix14 = com.operations.Matrix.MatrixOperations.scalarMultiply(matrix11, (double) 2);
        com.operations.Matrix.Matrix matrix15 = com.operations.Matrix.MatrixOperations.subtract(matrix4, matrix14);
        com.operations.Matrix.Matrix matrix16 = com.operations.Matrix.MatrixOperations.add(matrix1, matrix14);
        com.operations.Matrix.Matrix[] matrixArray17 = com.operations.Matrix.MatrixDecompositions.luDecomposition(matrix14);
        boolean boolean18 = com.operations.Matrix.MatrixUtils.isSquare(matrix14);
        com.operations.Matrix.Matrix matrix19 = com.operations.Matrix.MatrixOperations.transpose(matrix14);
        com.operations.Matrix.Matrix matrix21 = com.operations.Matrix.MatrixOperations.scalarMultiply(matrix14, (double) ' ');
        com.operations.Matrix.Matrix matrix24 = com.operations.Matrix.MatrixTransformations.project2D(0.0d, (double) 0);
        double[][] doubleArray25 = matrix24.getData();
        com.operations.Matrix.Matrix matrix26 = new com.operations.Matrix.Matrix(doubleArray25);
        com.operations.Matrix.Matrix matrix27 = new com.operations.Matrix.Matrix(doubleArray25);
        com.operations.Matrix.Matrix matrix28 = com.operations.Matrix.MatrixOperations.multiply(matrix14, matrix27);
        com.operations.Matrix.Matrix matrix29 = com.operations.Matrix.MatrixOperations.transpose(matrix28);
        matrix28.print();
        com.operations.Matrix.Matrix matrix32 = com.operations.Matrix.MatrixOperations.scalarMultiply(matrix28, (double) 35);
        int int33 = matrix28.getRows();
        com.operations.Matrix.Matrix matrix35 = com.operations.Matrix.MatrixOperations.scalarMultiply(matrix28, (double) (short) 0);
        boolean boolean36 = com.operations.Matrix.MatrixUtils.isSquare(matrix35);
        org.junit.Assert.assertNotNull(matrix1);
        org.junit.Assert.assertNotNull(matrix4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 2 + "'", int5 == 2);
        org.junit.Assert.assertNotNull(matrix7);
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 10.0d + "'", double8 == 10.0d);
        org.junit.Assert.assertNotNull(matrix11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 2 + "'", int12 == 2);
        org.junit.Assert.assertNotNull(matrix14);
        org.junit.Assert.assertNotNull(matrix15);
        org.junit.Assert.assertNotNull(matrix16);
        org.junit.Assert.assertNotNull(matrixArray17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(matrix19);
        org.junit.Assert.assertNotNull(matrix21);
        org.junit.Assert.assertNotNull(matrix24);
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertNotNull(matrix28);
        org.junit.Assert.assertNotNull(matrix29);
        org.junit.Assert.assertNotNull(matrix32);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 2 + "'", int33 == 2);
        org.junit.Assert.assertNotNull(matrix35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
    }

    @Test
    public void test3968() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3968");
        com.operations.Matrix.Matrix matrix5 = com.operations.Matrix.MatrixUtils.generateRandomMatrix(35, (int) (short) 0, (int) 'a', (int) (short) 1, 0L);
        org.junit.Assert.assertNotNull(matrix5);
    }

    @Test
    public void test3969() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3969");
        com.operations.Matrix.Matrix matrix2 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0.0f, 350.0d);
        com.operations.Matrix.Matrix matrix5 = com.operations.Matrix.MatrixTransformations.project2D(0.0d, (double) 0);
        com.operations.Matrix.Matrix[] matrixArray6 = com.operations.Matrix.MatrixDecompositions.luDecomposition(matrix5);
        com.operations.Matrix.Matrix matrix9 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0L, (double) (byte) 10);
        int int10 = matrix9.getRows();
        com.operations.Matrix.Matrix matrix12 = com.operations.Matrix.MatrixOperations.scalarMultiply(matrix9, (double) 2);
        double double13 = com.operations.Matrix.MatrixUtils.frobeniusNorm(matrix9);
        int int14 = matrix9.getRows();
        com.operations.Matrix.Matrix matrix15 = com.operations.Matrix.MatrixOperations.transpose(matrix9);
        com.operations.Matrix.Matrix matrix16 = com.operations.Matrix.MatrixOperations.multiply(matrix5, matrix15);
        com.operations.Matrix.Matrix matrix17 = com.operations.Matrix.MatrixOperations.multiply(matrix2, matrix15);
        com.operations.Matrix.Matrix matrix18 = com.operations.Matrix.MatrixOperations.transpose(matrix17);
        double double19 = com.operations.Matrix.MatrixUtils.frobeniusNorm(matrix18);
        com.operations.Matrix.Matrix[] matrixArray20 = com.operations.Matrix.MatrixDecompositions.luDecomposition(matrix18);
        int int21 = matrix18.getRows();
        org.junit.Assert.assertNotNull(matrix2);
        org.junit.Assert.assertNotNull(matrix5);
        org.junit.Assert.assertNotNull(matrixArray6);
        org.junit.Assert.assertNotNull(matrix9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 2 + "'", int10 == 2);
        org.junit.Assert.assertNotNull(matrix12);
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 10.0d + "'", double13 == 10.0d);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 2 + "'", int14 == 2);
        org.junit.Assert.assertNotNull(matrix15);
        org.junit.Assert.assertNotNull(matrix16);
        org.junit.Assert.assertNotNull(matrix17);
        org.junit.Assert.assertNotNull(matrix18);
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 3500.0d + "'", double19 == 3500.0d);
        org.junit.Assert.assertNotNull(matrixArray20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 2 + "'", int21 == 2);
    }

    @Test
    public void test3970() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3970");
        com.operations.Matrix.Matrix matrix2 = new com.operations.Matrix.Matrix(10, (int) 'a');
    }

    @Test
    public void test3971() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3971");
        com.operations.Matrix.Matrix matrix2 = com.operations.Matrix.MatrixTransformations.scale2D((double) 10.0f, 9.06897090016818d);
        org.junit.Assert.assertNotNull(matrix2);
    }

    @Test
    public void test3972() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3972");
        com.operations.Matrix.Matrix matrix4 = com.operations.Matrix.MatrixUtils.generateRandomMatrix(10, 32, (int) ' ', 1);
        org.junit.Assert.assertNotNull(matrix4);
    }

    @Test
    public void test3973() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3973");
        com.operations.Matrix.Matrix matrix2 = com.operations.Matrix.MatrixTransformations.project2D(33.34013029422918d, (double) (-1L));
        org.junit.Assert.assertNotNull(matrix2);
    }

    @Test
    public void test3974() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3974");
        com.operations.Matrix.Matrix matrix2 = com.operations.Matrix.MatrixTransformations.scale2D(3.618031071604718d, 146.4308710620817d);
        org.junit.Assert.assertNotNull(matrix2);
    }

    @Test
    public void test3975() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3975");
        com.operations.Matrix.Matrix matrix1 = com.operations.Matrix.MatrixTransformations.rotate2D(32.524725901652594d);
        // The following exception was thrown during execution in test generation
        try {
            matrix1.setValue((int) (short) 100, (int) (short) 1, (double) 35);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: Index 100 out of bounds for length 2");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(matrix1);
    }

    @Test
    public void test3976() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3976");
        com.operations.Matrix.Matrix matrix4 = com.operations.Matrix.MatrixUtils.generateRandomMatrix((int) 'a', (int) (byte) 100, (int) (short) 1, (int) (byte) 10);
        com.operations.Matrix.Matrix matrix7 = new com.operations.Matrix.Matrix(1, 32);
        // The following exception was thrown during execution in test generation
        try {
            com.operations.Matrix.Matrix matrix8 = com.operations.Matrix.MatrixOperations.add(matrix4, matrix7);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Matrices must have the same dimensions for addition.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(matrix4);
    }

    @Test
    public void test3977() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3977");
        // The following exception was thrown during execution in test generation
        try {
            com.operations.Matrix.Matrix matrix5 = com.operations.Matrix.MatrixUtils.generateRandomMatrix((-1), (int) (short) -1, 97, (int) (byte) 1, 0L);
            org.junit.Assert.fail("Expected exception of type java.lang.NegativeArraySizeException; message: -1");
        } catch (java.lang.NegativeArraySizeException e) {
            // Expected exception.
        }
    }

    @Test
    public void test3978() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3978");
        double[] doubleArray2 = new double[] { 10, 'a' };
        double[] doubleArray5 = new double[] { 10, 'a' };
        double[][] doubleArray6 = new double[][] { doubleArray2, doubleArray5 };
        com.operations.Matrix.Matrix matrix7 = new com.operations.Matrix.Matrix(doubleArray6);
        com.operations.Matrix.Matrix matrix8 = new com.operations.Matrix.Matrix(doubleArray6);
        com.operations.Matrix.Matrix matrix10 = com.operations.Matrix.MatrixTransformations.rotate2D((double) (short) 100);
        double[] doubleArray13 = new double[] { 137.90576492663388d, (byte) -1 };
        double[] doubleArray14 = com.operations.Matrix.MatrixSolver.solveGaussian(matrix10, doubleArray13);
        com.operations.Matrix.Matrix matrix15 = com.operations.Matrix.MatrixOperations.add(matrix8, matrix10);
        com.operations.Matrix.Matrix matrix16 = com.operations.Matrix.MatrixOperations.transpose(matrix10);
        double double17 = com.operations.Matrix.MatrixUtils.frobeniusNorm(matrix16);
        double[][] doubleArray18 = matrix16.getData();
        double[] doubleArray21 = new double[] { 10, 'a' };
        double[] doubleArray24 = new double[] { 10, 'a' };
        double[][] doubleArray25 = new double[][] { doubleArray21, doubleArray24 };
        com.operations.Matrix.Matrix matrix26 = new com.operations.Matrix.Matrix(doubleArray25);
        int int27 = matrix26.getCols();
        int int28 = matrix26.getCols();
        int int29 = matrix26.getCols();
        com.operations.Matrix.Matrix matrix35 = com.operations.Matrix.MatrixUtils.generateRandomMatrix(100, (int) (byte) 1, (int) '#', (int) '#', 1L);
        double double38 = matrix35.getValue((int) '4', 0);
        double double39 = com.operations.Matrix.MatrixUtils.frobeniusNorm(matrix35);
        boolean boolean40 = com.operations.Matrix.MatrixUtils.isSquare(matrix35);
        boolean boolean42 = com.operations.Matrix.MatrixUtils.compare(matrix26, matrix35, (double) 100L);
        com.operations.Matrix.Matrix matrix43 = com.operations.Matrix.MatrixDecompositions.choleskyDecomposition(matrix26);
        double[] doubleArray46 = new double[] { 10, 'a' };
        double[] doubleArray49 = new double[] { 10, 'a' };
        double[][] doubleArray50 = new double[][] { doubleArray46, doubleArray49 };
        com.operations.Matrix.Matrix matrix51 = new com.operations.Matrix.Matrix(doubleArray50);
        int int52 = matrix51.getCols();
        int int53 = matrix51.getCols();
        int int54 = matrix51.getCols();
        com.operations.Matrix.Matrix matrix56 = com.operations.Matrix.MatrixOperations.scalarMultiply(matrix51, (double) 0.0f);
        boolean boolean58 = com.operations.Matrix.MatrixUtils.compare(matrix43, matrix51, (double) '4');
        boolean boolean59 = com.operations.Matrix.MatrixUtils.isSymmetric(matrix43);
        com.operations.Matrix.Matrix matrix60 = com.operations.Matrix.MatrixOperations.multiply(matrix16, matrix43);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertArrayEquals(doubleArray2, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertArrayEquals(doubleArray5, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertNotNull(matrix10);
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertArrayEquals(doubleArray13, new double[] { 137.90576492663388d, (-1.0d) }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertArrayEquals(doubleArray14, new double[] { (-24.931892522286255d), (-135.63701830716116d) }, 1.0E-15);
        org.junit.Assert.assertNotNull(matrix15);
        org.junit.Assert.assertNotNull(matrix16);
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + 1.414213562373095d + "'", double17 == 1.414213562373095d);
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertArrayEquals(doubleArray21, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertArrayEquals(doubleArray24, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 2 + "'", int27 == 2);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 2 + "'", int28 == 2);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 2 + "'", int29 == 2);
        org.junit.Assert.assertNotNull(matrix35);
        org.junit.Assert.assertTrue("'" + double38 + "' != '" + 35.0d + "'", double38 == 35.0d);
        org.junit.Assert.assertTrue("'" + double39 + "' != '" + 350.0d + "'", double39 == 350.0d);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(matrix43);
        org.junit.Assert.assertNotNull(doubleArray46);
        org.junit.Assert.assertArrayEquals(doubleArray46, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertArrayEquals(doubleArray49, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 2 + "'", int52 == 2);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 2 + "'", int53 == 2);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 2 + "'", int54 == 2);
        org.junit.Assert.assertNotNull(matrix56);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNotNull(matrix60);
    }

    @Test
    public void test3979() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3979");
        com.operations.Matrix.Matrix matrix2 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0L, (double) (byte) 10);
        double[] doubleArray5 = new double[] { 10, 'a' };
        double[] doubleArray8 = new double[] { 10, 'a' };
        double[][] doubleArray9 = new double[][] { doubleArray5, doubleArray8 };
        com.operations.Matrix.Matrix matrix10 = new com.operations.Matrix.Matrix(doubleArray9);
        int int11 = matrix10.getCols();
        int int12 = matrix10.getCols();
        int int13 = matrix10.getCols();
        com.operations.Matrix.Matrix[] matrixArray14 = com.operations.Matrix.MatrixDecompositions.luDecomposition(matrix10);
        com.operations.Matrix.Matrix matrix15 = com.operations.Matrix.MatrixOperations.multiply(matrix2, matrix10);
        com.operations.Matrix.Matrix matrix17 = com.operations.Matrix.MatrixTransformations.rotate2D((double) (short) 100);
        boolean boolean19 = com.operations.Matrix.MatrixUtils.compare(matrix10, matrix17, (double) (byte) 0);
        double[] doubleArray22 = new double[] { 10, 'a' };
        double[] doubleArray25 = new double[] { 10, 'a' };
        double[][] doubleArray26 = new double[][] { doubleArray22, doubleArray25 };
        com.operations.Matrix.Matrix matrix27 = new com.operations.Matrix.Matrix(doubleArray26);
        com.operations.Matrix.Matrix matrix28 = new com.operations.Matrix.Matrix(doubleArray26);
        com.operations.Matrix.Matrix matrix29 = new com.operations.Matrix.Matrix(doubleArray26);
        boolean boolean31 = com.operations.Matrix.MatrixUtils.compare(matrix10, matrix29, (double) (-1));
        double[] doubleArray34 = new double[] { 10, 'a' };
        double[] doubleArray37 = new double[] { 10, 'a' };
        double[][] doubleArray38 = new double[][] { doubleArray34, doubleArray37 };
        com.operations.Matrix.Matrix matrix39 = new com.operations.Matrix.Matrix(doubleArray38);
        com.operations.Matrix.Matrix matrix40 = new com.operations.Matrix.Matrix(doubleArray38);
        boolean boolean41 = com.operations.Matrix.MatrixUtils.isSquare(matrix40);
        com.operations.Matrix.Matrix matrix42 = com.operations.Matrix.MatrixOperations.multiply(matrix29, matrix40);
        boolean boolean43 = com.operations.Matrix.MatrixUtils.isSymmetric(matrix29);
        com.operations.Matrix.Matrix matrix45 = com.operations.Matrix.MatrixOperations.scalarMultiply(matrix29, (double) ' ');
        double double46 = com.operations.Matrix.MatrixUtils.frobeniusNorm(matrix45);
        org.junit.Assert.assertNotNull(matrix2);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertArrayEquals(doubleArray5, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertArrayEquals(doubleArray8, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 2 + "'", int11 == 2);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 2 + "'", int12 == 2);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 2 + "'", int13 == 2);
        org.junit.Assert.assertNotNull(matrixArray14);
        org.junit.Assert.assertNotNull(matrix15);
        org.junit.Assert.assertNotNull(matrix17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertArrayEquals(doubleArray22, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertArrayEquals(doubleArray25, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertArrayEquals(doubleArray34, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertArrayEquals(doubleArray37, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertNotNull(matrix42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(matrix45);
        org.junit.Assert.assertTrue("'" + double46 + "' != '" + 4412.984477652284d + "'", double46 == 4412.984477652284d);
    }

    @Test
    public void test3980() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3980");
        com.operations.Matrix.Matrix matrix2 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0L, (double) (byte) 10);
        double[] doubleArray5 = new double[] { 10, 'a' };
        double[] doubleArray8 = new double[] { 10, 'a' };
        double[][] doubleArray9 = new double[][] { doubleArray5, doubleArray8 };
        com.operations.Matrix.Matrix matrix10 = new com.operations.Matrix.Matrix(doubleArray9);
        int int11 = matrix10.getCols();
        int int12 = matrix10.getCols();
        int int13 = matrix10.getCols();
        com.operations.Matrix.Matrix[] matrixArray14 = com.operations.Matrix.MatrixDecompositions.luDecomposition(matrix10);
        com.operations.Matrix.Matrix matrix15 = com.operations.Matrix.MatrixOperations.multiply(matrix2, matrix10);
        com.operations.Matrix.Matrix matrix17 = com.operations.Matrix.MatrixTransformations.rotate2D((double) (short) 100);
        boolean boolean19 = com.operations.Matrix.MatrixUtils.compare(matrix10, matrix17, (double) (byte) 0);
        com.operations.Matrix.Matrix[] matrixArray20 = com.operations.Matrix.MatrixDecompositions.luDecomposition(matrix10);
        com.operations.Matrix.Matrix matrix21 = com.operations.Matrix.MatrixOperations.transpose(matrix10);
        com.operations.Matrix.Matrix matrix24 = com.operations.Matrix.MatrixTransformations.scale2D(0.0d, (double) 0L);
        com.operations.Matrix.Matrix matrix25 = com.operations.Matrix.MatrixOperations.add(matrix10, matrix24);
        // The following exception was thrown during execution in test generation
        try {
            matrix25.setValue(97, (int) (byte) 0, 32.524725901652594d);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: Index 97 out of bounds for length 2");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(matrix2);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertArrayEquals(doubleArray5, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertArrayEquals(doubleArray8, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 2 + "'", int11 == 2);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 2 + "'", int12 == 2);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 2 + "'", int13 == 2);
        org.junit.Assert.assertNotNull(matrixArray14);
        org.junit.Assert.assertNotNull(matrix15);
        org.junit.Assert.assertNotNull(matrix17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(matrixArray20);
        org.junit.Assert.assertNotNull(matrix21);
        org.junit.Assert.assertNotNull(matrix24);
        org.junit.Assert.assertNotNull(matrix25);
    }

    @Test
    public void test3981() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3981");
        com.operations.Matrix.Matrix matrix1 = com.operations.Matrix.MatrixTransformations.rotate2D((double) 32);
        com.operations.Matrix.Matrix[] matrixArray2 = com.operations.Matrix.MatrixDecompositions.luDecomposition(matrix1);
        // The following exception was thrown during execution in test generation
        try {
            double double5 = matrix1.getValue((-1), (int) (short) 0);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(matrix1);
        org.junit.Assert.assertNotNull(matrixArray2);
    }

    @Test
    public void test3982() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3982");
        com.operations.Matrix.Matrix matrix2 = com.operations.Matrix.MatrixTransformations.scale2D(131.06486943494812d, (double) (byte) 100);
        com.operations.Matrix.Matrix matrix5 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0.0f, (double) (-1));
        com.operations.Matrix.Matrix matrix8 = com.operations.Matrix.MatrixTransformations.scale2D(146.4308710620817d, (double) 10L);
        com.operations.Matrix.Matrix matrix9 = com.operations.Matrix.MatrixOperations.multiply(matrix5, matrix8);
        com.operations.Matrix.Matrix matrix11 = com.operations.Matrix.MatrixTransformations.rotate2D((double) 1.0f);
        com.operations.Matrix.Matrix matrix14 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0L, (double) (byte) 10);
        int int15 = matrix14.getRows();
        com.operations.Matrix.Matrix matrix17 = com.operations.Matrix.MatrixOperations.scalarMultiply(matrix14, (double) 2);
        double double18 = com.operations.Matrix.MatrixUtils.frobeniusNorm(matrix14);
        com.operations.Matrix.Matrix matrix21 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0L, (double) (byte) 10);
        int int22 = matrix21.getRows();
        com.operations.Matrix.Matrix matrix24 = com.operations.Matrix.MatrixOperations.scalarMultiply(matrix21, (double) 2);
        com.operations.Matrix.Matrix matrix25 = com.operations.Matrix.MatrixOperations.subtract(matrix14, matrix24);
        com.operations.Matrix.Matrix matrix26 = com.operations.Matrix.MatrixOperations.add(matrix11, matrix24);
        matrix11.print();
        double[] doubleArray30 = new double[] { 10, 'a' };
        double[] doubleArray33 = new double[] { 10, 'a' };
        double[][] doubleArray34 = new double[][] { doubleArray30, doubleArray33 };
        com.operations.Matrix.Matrix matrix35 = new com.operations.Matrix.Matrix(doubleArray34);
        com.operations.Matrix.Matrix matrix36 = com.operations.Matrix.MatrixOperations.transpose(matrix35);
        com.operations.Matrix.Matrix matrix39 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0L, (double) (byte) 10);
        int int40 = matrix39.getRows();
        com.operations.Matrix.Matrix matrix46 = com.operations.Matrix.MatrixUtils.generateRandomMatrix(100, (int) (byte) 1, (int) '#', (int) '#', 1L);
        boolean boolean48 = com.operations.Matrix.MatrixUtils.compare(matrix39, matrix46, (double) 1.0f);
        com.operations.Matrix.Matrix matrix50 = com.operations.Matrix.MatrixOperations.scalarMultiply(matrix39, (double) 1L);
        matrix39.print();
        com.operations.Matrix.Matrix matrix52 = com.operations.Matrix.MatrixOperations.multiply(matrix36, matrix39);
        com.operations.Matrix.Matrix matrix53 = com.operations.Matrix.MatrixOperations.multiply(matrix11, matrix39);
        com.operations.Matrix.Matrix matrix54 = com.operations.Matrix.MatrixOperations.subtract(matrix5, matrix39);
        com.operations.Matrix.Matrix matrix55 = com.operations.Matrix.MatrixOperations.transpose(matrix39);
        com.operations.Matrix.Matrix matrix56 = com.operations.Matrix.MatrixOperations.multiply(matrix2, matrix39);
        boolean boolean57 = com.operations.Matrix.MatrixUtils.isSquare(matrix39);
        org.junit.Assert.assertNotNull(matrix2);
        org.junit.Assert.assertNotNull(matrix5);
        org.junit.Assert.assertNotNull(matrix8);
        org.junit.Assert.assertNotNull(matrix9);
        org.junit.Assert.assertNotNull(matrix11);
        org.junit.Assert.assertNotNull(matrix14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 2 + "'", int15 == 2);
        org.junit.Assert.assertNotNull(matrix17);
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 10.0d + "'", double18 == 10.0d);
        org.junit.Assert.assertNotNull(matrix21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 2 + "'", int22 == 2);
        org.junit.Assert.assertNotNull(matrix24);
        org.junit.Assert.assertNotNull(matrix25);
        org.junit.Assert.assertNotNull(matrix26);
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertArrayEquals(doubleArray30, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertArrayEquals(doubleArray33, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertNotNull(matrix36);
        org.junit.Assert.assertNotNull(matrix39);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 2 + "'", int40 == 2);
        org.junit.Assert.assertNotNull(matrix46);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(matrix50);
        org.junit.Assert.assertNotNull(matrix52);
        org.junit.Assert.assertNotNull(matrix53);
        org.junit.Assert.assertNotNull(matrix54);
        org.junit.Assert.assertNotNull(matrix55);
        org.junit.Assert.assertNotNull(matrix56);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + true + "'", boolean57 == true);
    }

    @Test
    public void test3983() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3983");
        com.operations.Matrix.Matrix matrix2 = com.operations.Matrix.MatrixTransformations.project2D((double) ' ', (double) '#');
        org.junit.Assert.assertNotNull(matrix2);
    }

    @Test
    public void test3984() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3984");
        com.operations.Matrix.Matrix matrix2 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0L, (double) (byte) 10);
        int int3 = matrix2.getRows();
        com.operations.Matrix.Matrix matrix9 = com.operations.Matrix.MatrixUtils.generateRandomMatrix(100, (int) (byte) 1, (int) '#', (int) '#', 1L);
        boolean boolean11 = com.operations.Matrix.MatrixUtils.compare(matrix2, matrix9, (double) 1.0f);
        matrix9.print();
        double[][] doubleArray13 = matrix9.getData();
        com.operations.Matrix.Matrix matrix16 = com.operations.Matrix.MatrixTransformations.scale2D((double) '4', 975.1410154434076d);
        com.operations.Matrix.Matrix matrix17 = com.operations.Matrix.MatrixDecompositions.choleskyDecomposition(matrix16);
        com.operations.Matrix.Matrix matrix20 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0L, (double) (byte) 10);
        double[] doubleArray23 = new double[] { 10, 'a' };
        double[] doubleArray26 = new double[] { 10, 'a' };
        double[][] doubleArray27 = new double[][] { doubleArray23, doubleArray26 };
        com.operations.Matrix.Matrix matrix28 = new com.operations.Matrix.Matrix(doubleArray27);
        int int29 = matrix28.getCols();
        int int30 = matrix28.getCols();
        int int31 = matrix28.getCols();
        com.operations.Matrix.Matrix[] matrixArray32 = com.operations.Matrix.MatrixDecompositions.luDecomposition(matrix28);
        com.operations.Matrix.Matrix matrix33 = com.operations.Matrix.MatrixOperations.multiply(matrix20, matrix28);
        int int34 = matrix28.getRows();
        com.operations.Matrix.Matrix matrix36 = com.operations.Matrix.MatrixOperations.scalarMultiply(matrix28, (double) (-1L));
        com.operations.Matrix.Matrix matrix39 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0L, (double) (byte) 10);
        int int40 = matrix39.getRows();
        com.operations.Matrix.Matrix matrix42 = com.operations.Matrix.MatrixOperations.scalarMultiply(matrix39, (double) 2);
        com.operations.Matrix.Matrix[] matrixArray43 = com.operations.Matrix.MatrixDecompositions.luDecomposition(matrix42);
        com.operations.Matrix.Matrix matrix44 = com.operations.Matrix.MatrixOperations.transpose(matrix42);
        com.operations.Matrix.Matrix matrix45 = com.operations.Matrix.MatrixOperations.add(matrix28, matrix42);
        com.operations.Matrix.Matrix matrix47 = com.operations.Matrix.MatrixTransformations.rotate2D((double) '4');
        matrix47.print();
        com.operations.Matrix.Matrix matrix49 = com.operations.Matrix.MatrixOperations.transpose(matrix47);
        double[][] doubleArray50 = matrix47.getData();
        com.operations.Matrix.Matrix matrix53 = com.operations.Matrix.MatrixTransformations.project2D(400.0d, 36.40054944640259d);
        com.operations.Matrix.Matrix matrix55 = com.operations.Matrix.MatrixTransformations.rotate2D(100.0d);
        int int56 = matrix55.getCols();
        matrix55.print();
        com.operations.Matrix.Matrix matrix59 = com.operations.Matrix.MatrixOperations.scalarMultiply(matrix55, (double) (byte) 1);
        com.operations.Matrix.Matrix matrix61 = com.operations.Matrix.MatrixTransformations.rotate2D(350.0d);
        com.operations.Matrix.Matrix matrix63 = com.operations.Matrix.MatrixTransformations.rotate2D((double) (short) 100);
        double[] doubleArray66 = new double[] { 137.90576492663388d, (byte) -1 };
        double[] doubleArray67 = com.operations.Matrix.MatrixSolver.solveGaussian(matrix63, doubleArray66);
        double[] doubleArray68 = com.operations.Matrix.MatrixSolver.solveGaussian(matrix61, doubleArray67);
        double[] doubleArray69 = com.operations.Matrix.MatrixSolver.solveGaussian(matrix55, doubleArray67);
        double[] doubleArray70 = com.operations.Matrix.MatrixSolver.solveGaussian(matrix53, doubleArray67);
        double[] doubleArray71 = com.operations.Matrix.MatrixSolver.solveGaussian(matrix47, doubleArray70);
        double[] doubleArray72 = com.operations.Matrix.MatrixSolver.solveGaussian(matrix45, doubleArray71);
        double[] doubleArray73 = com.operations.Matrix.MatrixSolver.solveGaussian(matrix16, doubleArray71);
        com.operations.Matrix.Matrix matrix75 = com.operations.Matrix.MatrixTransformations.rotate2D((-1.0d));
        com.operations.Matrix.Matrix matrix77 = com.operations.Matrix.MatrixTransformations.rotate2D((double) (-1L));
        com.operations.Matrix.Matrix matrix79 = com.operations.Matrix.MatrixTransformations.rotate2D((double) (short) 100);
        double[] doubleArray82 = new double[] { 137.90576492663388d, (byte) -1 };
        double[] doubleArray83 = com.operations.Matrix.MatrixSolver.solveGaussian(matrix79, doubleArray82);
        double[] doubleArray84 = com.operations.Matrix.MatrixSolver.solveGaussian(matrix77, doubleArray82);
        double[] doubleArray85 = com.operations.Matrix.MatrixSolver.solveGaussian(matrix75, doubleArray82);
        double[] doubleArray86 = com.operations.Matrix.MatrixSolver.solveGaussian(matrix16, doubleArray82);
        // The following exception was thrown during execution in test generation
        try {
            double[] doubleArray87 = com.operations.Matrix.MatrixSolver.solveGaussian(matrix9, doubleArray82);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Matrix must be square to solve equations.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(matrix2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 2 + "'", int3 == 2);
        org.junit.Assert.assertNotNull(matrix9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertNotNull(matrix16);
        org.junit.Assert.assertNotNull(matrix17);
        org.junit.Assert.assertNotNull(matrix20);
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertArrayEquals(doubleArray23, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertArrayEquals(doubleArray26, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 2 + "'", int29 == 2);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 2 + "'", int30 == 2);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 2 + "'", int31 == 2);
        org.junit.Assert.assertNotNull(matrixArray32);
        org.junit.Assert.assertNotNull(matrix33);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 2 + "'", int34 == 2);
        org.junit.Assert.assertNotNull(matrix36);
        org.junit.Assert.assertNotNull(matrix39);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 2 + "'", int40 == 2);
        org.junit.Assert.assertNotNull(matrix42);
        org.junit.Assert.assertNotNull(matrixArray43);
        org.junit.Assert.assertNotNull(matrix44);
        org.junit.Assert.assertNotNull(matrix45);
        org.junit.Assert.assertNotNull(matrix47);
        org.junit.Assert.assertNotNull(matrix49);
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertNotNull(matrix53);
        org.junit.Assert.assertNotNull(matrix55);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 2 + "'", int56 == 2);
        org.junit.Assert.assertNotNull(matrix59);
        org.junit.Assert.assertNotNull(matrix61);
        org.junit.Assert.assertNotNull(matrix63);
        org.junit.Assert.assertNotNull(doubleArray66);
        org.junit.Assert.assertArrayEquals(doubleArray66, new double[] { 137.90576492663388d, (-1.0d) }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray67);
        org.junit.Assert.assertArrayEquals(doubleArray67, new double[] { (-24.931892522286255d), (-135.63701830716116d) }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray68);
        org.junit.Assert.assertArrayEquals(doubleArray68, new double[] { (-0.9999999999999858d), (-137.90576492663388d) }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray69);
        org.junit.Assert.assertArrayEquals(doubleArray69, new double[] { (-129.24700952206834d), 48.1062421064292d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray70);
        org.junit.Assert.assertArrayEquals(doubleArray70, new double[] { (-0.06232973130571564d), (-3.7262354653980627d) }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray71);
        org.junit.Assert.assertArrayEquals(doubleArray71, new double[] { (-2.9746876315367503d), (-2.2449831254994406d) }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray72);
        org.junit.Assert.assertArrayEquals(doubleArray72, new double[] { (-0.6513754485817702d), 0.03648522530186549d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray73);
        org.junit.Assert.assertArrayEquals(doubleArray73, new double[] { (-0.057205531375706734d), (-0.0023022138233808383d) }, 1.0E-15);
        org.junit.Assert.assertNotNull(matrix75);
        org.junit.Assert.assertNotNull(matrix77);
        org.junit.Assert.assertNotNull(matrix79);
        org.junit.Assert.assertNotNull(doubleArray82);
        org.junit.Assert.assertArrayEquals(doubleArray82, new double[] { 137.90576492663388d, (-1.0d) }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray83);
        org.junit.Assert.assertArrayEquals(doubleArray83, new double[] { (-24.931892522286255d), (-135.63701830716116d) }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray84);
        org.junit.Assert.assertArrayEquals(doubleArray84, new double[] { 137.90221361711127d, 1.4069397643877004d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray85);
        org.junit.Assert.assertArrayEquals(doubleArray85, new double[] { 137.90221361711127d, 1.4069397643877004d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray86);
        org.junit.Assert.assertArrayEquals(doubleArray86, new double[] { 2.652033940896805d, (-0.0010254927073755468d) }, 1.0E-15);
    }

    @Test
    public void test3985() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3985");
        com.operations.Matrix.Matrix matrix2 = com.operations.Matrix.MatrixTransformations.scale2D((double) (byte) 10, (double) 10);
        double[] doubleArray5 = new double[] { 10, 'a' };
        double[] doubleArray8 = new double[] { 10, 'a' };
        double[][] doubleArray9 = new double[][] { doubleArray5, doubleArray8 };
        com.operations.Matrix.Matrix matrix10 = new com.operations.Matrix.Matrix(doubleArray9);
        com.operations.Matrix.Matrix matrix11 = new com.operations.Matrix.Matrix(doubleArray9);
        boolean boolean12 = com.operations.Matrix.MatrixUtils.isSquare(matrix11);
        double[] doubleArray15 = new double[] { 10, 'a' };
        double[] doubleArray18 = new double[] { 10, 'a' };
        double[][] doubleArray19 = new double[][] { doubleArray15, doubleArray18 };
        com.operations.Matrix.Matrix matrix20 = new com.operations.Matrix.Matrix(doubleArray19);
        int int21 = matrix20.getCols();
        int int22 = matrix20.getCols();
        matrix20.print();
        double[] doubleArray26 = new double[] { 10, 'a' };
        double[] doubleArray29 = new double[] { 10, 'a' };
        double[][] doubleArray30 = new double[][] { doubleArray26, doubleArray29 };
        com.operations.Matrix.Matrix matrix31 = new com.operations.Matrix.Matrix(doubleArray30);
        boolean boolean33 = com.operations.Matrix.MatrixUtils.compare(matrix20, matrix31, (double) (-1));
        com.operations.Matrix.Matrix matrix34 = com.operations.Matrix.MatrixOperations.subtract(matrix11, matrix31);
        com.operations.Matrix.Matrix[] matrixArray35 = com.operations.Matrix.MatrixDecompositions.luDecomposition(matrix34);
        double[][] doubleArray36 = matrix34.getData();
        com.operations.Matrix.Matrix matrix37 = new com.operations.Matrix.Matrix(doubleArray36);
        com.operations.Matrix.Matrix matrix38 = com.operations.Matrix.MatrixOperations.multiply(matrix2, matrix37);
        boolean boolean39 = com.operations.Matrix.MatrixUtils.isSymmetric(matrix2);
        com.operations.Matrix.Matrix matrix41 = com.operations.Matrix.MatrixTransformations.rotate2D(350.0d);
        com.operations.Matrix.Matrix matrix42 = com.operations.Matrix.MatrixDecompositions.choleskyDecomposition(matrix41);
        int int43 = matrix41.getRows();
        com.operations.Matrix.Matrix matrix44 = com.operations.Matrix.MatrixOperations.subtract(matrix2, matrix41);
        double[] doubleArray47 = new double[] { 10, 'a' };
        double[] doubleArray50 = new double[] { 10, 'a' };
        double[][] doubleArray51 = new double[][] { doubleArray47, doubleArray50 };
        com.operations.Matrix.Matrix matrix52 = new com.operations.Matrix.Matrix(doubleArray51);
        int int53 = matrix52.getCols();
        int int54 = matrix52.getCols();
        boolean boolean55 = com.operations.Matrix.MatrixUtils.isSquare(matrix52);
        com.operations.Matrix.Matrix matrix56 = com.operations.Matrix.MatrixDecompositions.choleskyDecomposition(matrix52);
        com.operations.Matrix.Matrix matrix59 = com.operations.Matrix.MatrixTransformations.project2D(0.0d, (double) 0);
        com.operations.Matrix.Matrix matrix60 = com.operations.Matrix.MatrixOperations.subtract(matrix56, matrix59);
        com.operations.Matrix.Matrix matrix61 = com.operations.Matrix.MatrixOperations.transpose(matrix59);
        com.operations.Matrix.Matrix matrix62 = com.operations.Matrix.MatrixOperations.subtract(matrix2, matrix61);
        com.operations.Matrix.Matrix matrix63 = com.operations.Matrix.MatrixOperations.transpose(matrix62);
        com.operations.Matrix.Matrix matrix65 = com.operations.Matrix.MatrixOperations.scalarMultiply(matrix62, (double) (byte) 1);
        matrix62.print();
        org.junit.Assert.assertNotNull(matrix2);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertArrayEquals(doubleArray5, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertArrayEquals(doubleArray8, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertArrayEquals(doubleArray15, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertArrayEquals(doubleArray18, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 2 + "'", int21 == 2);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 2 + "'", int22 == 2);
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertArrayEquals(doubleArray26, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertArrayEquals(doubleArray29, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(matrix34);
        org.junit.Assert.assertNotNull(matrixArray35);
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertNotNull(matrix38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertNotNull(matrix41);
        org.junit.Assert.assertNotNull(matrix42);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 2 + "'", int43 == 2);
        org.junit.Assert.assertNotNull(matrix44);
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertArrayEquals(doubleArray47, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertArrayEquals(doubleArray50, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 2 + "'", int53 == 2);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 2 + "'", int54 == 2);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + true + "'", boolean55 == true);
        org.junit.Assert.assertNotNull(matrix56);
        org.junit.Assert.assertNotNull(matrix59);
        org.junit.Assert.assertNotNull(matrix60);
        org.junit.Assert.assertNotNull(matrix61);
        org.junit.Assert.assertNotNull(matrix62);
        org.junit.Assert.assertNotNull(matrix63);
        org.junit.Assert.assertNotNull(matrix65);
    }

    @Test
    public void test3986() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3986");
        com.operations.Matrix.Matrix matrix2 = com.operations.Matrix.MatrixTransformations.scale2D(1.414213562373095d, 146781.22563870353d);
        org.junit.Assert.assertNotNull(matrix2);
    }

    @Test
    public void test3987() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3987");
        com.operations.Matrix.Matrix matrix4 = com.operations.Matrix.MatrixUtils.generateRandomMatrix((int) ' ', (int) (short) 100, 97, (int) '#');
        int int5 = matrix4.getCols();
        org.junit.Assert.assertNotNull(matrix4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 100 + "'", int5 == 100);
    }

    @Test
    public void test3988() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3988");
        com.operations.Matrix.Matrix matrix2 = new com.operations.Matrix.Matrix((int) (short) 100, (int) (short) 0);
        double[][] doubleArray3 = matrix2.getData();
        com.operations.Matrix.Matrix matrix4 = new com.operations.Matrix.Matrix(doubleArray3);
        double[][] doubleArray5 = matrix4.getData();
        com.operations.Matrix.Matrix matrix7 = com.operations.Matrix.MatrixOperations.scalarMultiply(matrix4, 36.45545226711637d);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertNotNull(matrix7);
    }

    @Test
    public void test3989() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3989");
        com.operations.Matrix.Matrix matrix2 = com.operations.Matrix.MatrixTransformations.project2D(33.34013029422918d, 481.29607094437216d);
        org.junit.Assert.assertNotNull(matrix2);
    }

    @Test
    public void test3990() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3990");
        // The following exception was thrown during execution in test generation
        try {
            com.operations.Matrix.Matrix matrix5 = com.operations.Matrix.MatrixUtils.generateRandomMatrix((-1), 32, 52, 97, 0L);
            org.junit.Assert.fail("Expected exception of type java.lang.NegativeArraySizeException; message: -1");
        } catch (java.lang.NegativeArraySizeException e) {
            // Expected exception.
        }
    }

    @Test
    public void test3991() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3991");
        com.operations.Matrix.Matrix matrix2 = com.operations.Matrix.MatrixTransformations.scale2D((double) 1.0f, (double) 1);
        com.operations.Matrix.Matrix matrix4 = com.operations.Matrix.MatrixTransformations.rotate2D((double) 1.0f);
        com.operations.Matrix.Matrix matrix7 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0L, (double) (byte) 10);
        int int8 = matrix7.getRows();
        com.operations.Matrix.Matrix matrix10 = com.operations.Matrix.MatrixOperations.scalarMultiply(matrix7, (double) 2);
        double double11 = com.operations.Matrix.MatrixUtils.frobeniusNorm(matrix7);
        com.operations.Matrix.Matrix matrix14 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0L, (double) (byte) 10);
        int int15 = matrix14.getRows();
        com.operations.Matrix.Matrix matrix17 = com.operations.Matrix.MatrixOperations.scalarMultiply(matrix14, (double) 2);
        com.operations.Matrix.Matrix matrix18 = com.operations.Matrix.MatrixOperations.subtract(matrix7, matrix17);
        com.operations.Matrix.Matrix matrix19 = com.operations.Matrix.MatrixOperations.add(matrix4, matrix17);
        boolean boolean21 = com.operations.Matrix.MatrixUtils.compare(matrix2, matrix4, (double) (byte) -1);
        com.operations.Matrix.Matrix matrix22 = com.operations.Matrix.MatrixOperations.transpose(matrix4);
        com.operations.Matrix.Matrix matrix25 = com.operations.Matrix.MatrixTransformations.project2D((double) 10L, 10.0d);
        com.operations.Matrix.Matrix matrix27 = com.operations.Matrix.MatrixTransformations.rotate2D((double) (short) 100);
        double[] doubleArray30 = new double[] { 137.90576492663388d, (byte) -1 };
        double[] doubleArray31 = com.operations.Matrix.MatrixSolver.solveGaussian(matrix27, doubleArray30);
        com.operations.Matrix.Matrix matrix34 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0L, (double) (byte) 10);
        double[] doubleArray37 = new double[] { 10, 'a' };
        double[] doubleArray40 = new double[] { 10, 'a' };
        double[][] doubleArray41 = new double[][] { doubleArray37, doubleArray40 };
        com.operations.Matrix.Matrix matrix42 = new com.operations.Matrix.Matrix(doubleArray41);
        int int43 = matrix42.getCols();
        int int44 = matrix42.getCols();
        int int45 = matrix42.getCols();
        com.operations.Matrix.Matrix[] matrixArray46 = com.operations.Matrix.MatrixDecompositions.luDecomposition(matrix42);
        com.operations.Matrix.Matrix matrix47 = com.operations.Matrix.MatrixOperations.multiply(matrix34, matrix42);
        boolean boolean49 = com.operations.Matrix.MatrixUtils.compare(matrix27, matrix34, (double) (-1L));
        double[][] doubleArray50 = matrix27.getData();
        com.operations.Matrix.Matrix matrix52 = com.operations.Matrix.MatrixTransformations.rotate2D((double) (short) 100);
        double[] doubleArray55 = new double[] { 137.90576492663388d, (byte) -1 };
        double[] doubleArray56 = com.operations.Matrix.MatrixSolver.solveGaussian(matrix52, doubleArray55);
        double[] doubleArray57 = com.operations.Matrix.MatrixSolver.solveGaussian(matrix27, doubleArray55);
        double[] doubleArray58 = com.operations.Matrix.MatrixSolver.solveGaussian(matrix25, doubleArray57);
        double[] doubleArray59 = com.operations.Matrix.MatrixSolver.solveGaussian(matrix4, doubleArray58);
        com.operations.Matrix.Matrix matrix60 = com.operations.Matrix.MatrixDecompositions.choleskyDecomposition(matrix4);
        double double61 = com.operations.Matrix.MatrixUtils.frobeniusNorm(matrix4);
        // The following exception was thrown during execution in test generation
        try {
            double double64 = matrix4.getValue(10, 10);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(matrix2);
        org.junit.Assert.assertNotNull(matrix4);
        org.junit.Assert.assertNotNull(matrix7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 2 + "'", int8 == 2);
        org.junit.Assert.assertNotNull(matrix10);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 10.0d + "'", double11 == 10.0d);
        org.junit.Assert.assertNotNull(matrix14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 2 + "'", int15 == 2);
        org.junit.Assert.assertNotNull(matrix17);
        org.junit.Assert.assertNotNull(matrix18);
        org.junit.Assert.assertNotNull(matrix19);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(matrix22);
        org.junit.Assert.assertNotNull(matrix25);
        org.junit.Assert.assertNotNull(matrix27);
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertArrayEquals(doubleArray30, new double[] { 137.90576492663388d, (-1.0d) }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertArrayEquals(doubleArray31, new double[] { (-24.931892522286255d), (-135.63701830716116d) }, 1.0E-15);
        org.junit.Assert.assertNotNull(matrix34);
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertArrayEquals(doubleArray37, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertArrayEquals(doubleArray40, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 2 + "'", int43 == 2);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 2 + "'", int44 == 2);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 2 + "'", int45 == 2);
        org.junit.Assert.assertNotNull(matrixArray46);
        org.junit.Assert.assertNotNull(matrix47);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertNotNull(matrix52);
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertArrayEquals(doubleArray55, new double[] { 137.90576492663388d, (-1.0d) }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray56);
        org.junit.Assert.assertArrayEquals(doubleArray56, new double[] { (-24.931892522286255d), (-135.63701830716116d) }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray57);
        org.junit.Assert.assertArrayEquals(doubleArray57, new double[] { (-24.931892522286255d), (-135.63701830716116d) }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray58);
        org.junit.Assert.assertArrayEquals(doubleArray58, new double[] { (-2.4931892522286256d), (-13.563701830716116d) }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray59);
        org.junit.Assert.assertArrayEquals(doubleArray59, new double[] { (-2.7295287645732618d), (-13.518123861075072d) }, 1.0E-15);
        org.junit.Assert.assertNotNull(matrix60);
        org.junit.Assert.assertTrue("'" + double61 + "' != '" + 1.4142135623730951d + "'", double61 == 1.4142135623730951d);
    }

    @Test
    public void test3992() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3992");
        com.operations.Matrix.Matrix matrix2 = com.operations.Matrix.MatrixTransformations.scale2D((double) 'a', 0.0d);
        org.junit.Assert.assertNotNull(matrix2);
    }

    @Test
    public void test3993() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3993");
        double[] doubleArray2 = new double[] { 10, 'a' };
        double[] doubleArray5 = new double[] { 10, 'a' };
        double[][] doubleArray6 = new double[][] { doubleArray2, doubleArray5 };
        com.operations.Matrix.Matrix matrix7 = new com.operations.Matrix.Matrix(doubleArray6);
        com.operations.Matrix.Matrix matrix8 = new com.operations.Matrix.Matrix(doubleArray6);
        boolean boolean9 = com.operations.Matrix.MatrixUtils.isSquare(matrix8);
        double[] doubleArray12 = new double[] { 10, 'a' };
        double[] doubleArray15 = new double[] { 10, 'a' };
        double[][] doubleArray16 = new double[][] { doubleArray12, doubleArray15 };
        com.operations.Matrix.Matrix matrix17 = new com.operations.Matrix.Matrix(doubleArray16);
        int int18 = matrix17.getCols();
        int int19 = matrix17.getCols();
        matrix17.print();
        double[] doubleArray23 = new double[] { 10, 'a' };
        double[] doubleArray26 = new double[] { 10, 'a' };
        double[][] doubleArray27 = new double[][] { doubleArray23, doubleArray26 };
        com.operations.Matrix.Matrix matrix28 = new com.operations.Matrix.Matrix(doubleArray27);
        boolean boolean30 = com.operations.Matrix.MatrixUtils.compare(matrix17, matrix28, (double) (-1));
        com.operations.Matrix.Matrix matrix31 = com.operations.Matrix.MatrixOperations.subtract(matrix8, matrix28);
        com.operations.Matrix.Matrix matrix33 = com.operations.Matrix.MatrixOperations.scalarMultiply(matrix8, (double) 0.0f);
        com.operations.Matrix.Matrix matrix34 = com.operations.Matrix.MatrixOperations.transpose(matrix8);
        com.operations.Matrix.Matrix matrix40 = com.operations.Matrix.MatrixUtils.generateRandomMatrix(2, (int) (byte) 10, (int) (byte) -1, 0, (long) (byte) 10);
        matrix40.print();
        boolean boolean43 = com.operations.Matrix.MatrixUtils.compare(matrix34, matrix40, 975.1410154434076d);
        com.operations.Matrix.Matrix matrix46 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0L, (double) (byte) 10);
        int int47 = matrix46.getRows();
        com.operations.Matrix.Matrix matrix50 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0L, (double) (byte) 10);
        int int51 = matrix50.getRows();
        com.operations.Matrix.Matrix matrix53 = com.operations.Matrix.MatrixOperations.scalarMultiply(matrix50, (double) 2);
        com.operations.Matrix.Matrix matrix54 = com.operations.Matrix.MatrixOperations.subtract(matrix46, matrix50);
        com.operations.Matrix.Matrix matrix57 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0L, (double) (byte) 10);
        int int58 = matrix57.getRows();
        com.operations.Matrix.Matrix matrix64 = com.operations.Matrix.MatrixUtils.generateRandomMatrix(100, (int) (byte) 1, (int) '#', (int) '#', 1L);
        boolean boolean66 = com.operations.Matrix.MatrixUtils.compare(matrix57, matrix64, (double) 1.0f);
        com.operations.Matrix.Matrix matrix68 = com.operations.Matrix.MatrixOperations.scalarMultiply(matrix57, (double) 1L);
        boolean boolean70 = com.operations.Matrix.MatrixUtils.compare(matrix54, matrix68, 0.0d);
        com.operations.Matrix.Matrix matrix72 = com.operations.Matrix.MatrixTransformations.rotate2D((double) (short) 100);
        double[][] doubleArray73 = matrix72.getData();
        com.operations.Matrix.Matrix matrix74 = new com.operations.Matrix.Matrix(doubleArray73);
        com.operations.Matrix.Matrix matrix75 = com.operations.Matrix.MatrixOperations.add(matrix68, matrix74);
        com.operations.Matrix.Matrix matrix76 = com.operations.Matrix.MatrixOperations.transpose(matrix74);
        boolean boolean78 = com.operations.Matrix.MatrixUtils.compare(matrix40, matrix76, 626.0990336999411d);
        com.operations.Matrix.Matrix matrix79 = com.operations.Matrix.MatrixOperations.transpose(matrix40);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertArrayEquals(doubleArray2, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertArrayEquals(doubleArray5, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertArrayEquals(doubleArray12, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertArrayEquals(doubleArray15, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 2 + "'", int18 == 2);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 2 + "'", int19 == 2);
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertArrayEquals(doubleArray23, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertArrayEquals(doubleArray26, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(matrix31);
        org.junit.Assert.assertNotNull(matrix33);
        org.junit.Assert.assertNotNull(matrix34);
        org.junit.Assert.assertNotNull(matrix40);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(matrix46);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 2 + "'", int47 == 2);
        org.junit.Assert.assertNotNull(matrix50);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 2 + "'", int51 == 2);
        org.junit.Assert.assertNotNull(matrix53);
        org.junit.Assert.assertNotNull(matrix54);
        org.junit.Assert.assertNotNull(matrix57);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 2 + "'", int58 == 2);
        org.junit.Assert.assertNotNull(matrix64);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertNotNull(matrix68);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertNotNull(matrix72);
        org.junit.Assert.assertNotNull(doubleArray73);
        org.junit.Assert.assertNotNull(matrix75);
        org.junit.Assert.assertNotNull(matrix76);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertNotNull(matrix79);
    }

    @Test
    public void test3994() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3994");
        com.operations.Matrix.Matrix matrix2 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0L, (double) (byte) 10);
        double[] doubleArray5 = new double[] { 10, 'a' };
        double[] doubleArray8 = new double[] { 10, 'a' };
        double[][] doubleArray9 = new double[][] { doubleArray5, doubleArray8 };
        com.operations.Matrix.Matrix matrix10 = new com.operations.Matrix.Matrix(doubleArray9);
        int int11 = matrix10.getCols();
        int int12 = matrix10.getCols();
        int int13 = matrix10.getCols();
        com.operations.Matrix.Matrix[] matrixArray14 = com.operations.Matrix.MatrixDecompositions.luDecomposition(matrix10);
        com.operations.Matrix.Matrix matrix15 = com.operations.Matrix.MatrixOperations.multiply(matrix2, matrix10);
        com.operations.Matrix.Matrix matrix17 = com.operations.Matrix.MatrixTransformations.rotate2D((double) (short) 100);
        boolean boolean19 = com.operations.Matrix.MatrixUtils.compare(matrix10, matrix17, (double) (byte) 0);
        double[] doubleArray22 = new double[] { 10, 'a' };
        double[] doubleArray25 = new double[] { 10, 'a' };
        double[][] doubleArray26 = new double[][] { doubleArray22, doubleArray25 };
        com.operations.Matrix.Matrix matrix27 = new com.operations.Matrix.Matrix(doubleArray26);
        com.operations.Matrix.Matrix matrix28 = new com.operations.Matrix.Matrix(doubleArray26);
        com.operations.Matrix.Matrix matrix29 = new com.operations.Matrix.Matrix(doubleArray26);
        boolean boolean31 = com.operations.Matrix.MatrixUtils.compare(matrix10, matrix29, (double) (-1));
        double[] doubleArray34 = new double[] { 10, 'a' };
        double[] doubleArray37 = new double[] { 10, 'a' };
        double[][] doubleArray38 = new double[][] { doubleArray34, doubleArray37 };
        com.operations.Matrix.Matrix matrix39 = new com.operations.Matrix.Matrix(doubleArray38);
        com.operations.Matrix.Matrix matrix40 = new com.operations.Matrix.Matrix(doubleArray38);
        boolean boolean41 = com.operations.Matrix.MatrixUtils.isSquare(matrix40);
        com.operations.Matrix.Matrix matrix42 = com.operations.Matrix.MatrixOperations.multiply(matrix29, matrix40);
        double[][] doubleArray43 = matrix40.getData();
        com.operations.Matrix.Matrix matrix44 = new com.operations.Matrix.Matrix(doubleArray43);
        double double45 = com.operations.Matrix.MatrixUtils.frobeniusNorm(matrix44);
        com.operations.Matrix.Matrix matrix46 = com.operations.Matrix.MatrixOperations.transpose(matrix44);
        double[][] doubleArray47 = matrix44.getData();
        int int48 = matrix44.getCols();
        org.junit.Assert.assertNotNull(matrix2);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertArrayEquals(doubleArray5, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertArrayEquals(doubleArray8, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 2 + "'", int11 == 2);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 2 + "'", int12 == 2);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 2 + "'", int13 == 2);
        org.junit.Assert.assertNotNull(matrixArray14);
        org.junit.Assert.assertNotNull(matrix15);
        org.junit.Assert.assertNotNull(matrix17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertArrayEquals(doubleArray22, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertArrayEquals(doubleArray25, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertArrayEquals(doubleArray34, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertArrayEquals(doubleArray37, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertNotNull(matrix42);
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertTrue("'" + double45 + "' != '" + 137.90576492663388d + "'", double45 == 137.90576492663388d);
        org.junit.Assert.assertNotNull(matrix46);
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 2 + "'", int48 == 2);
    }

    @Test
    public void test3995() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3995");
        com.operations.Matrix.Matrix matrix2 = com.operations.Matrix.MatrixTransformations.project2D((double) ' ', 0.0d);
        double[] doubleArray5 = new double[] { 10, 'a' };
        double[] doubleArray8 = new double[] { 10, 'a' };
        double[][] doubleArray9 = new double[][] { doubleArray5, doubleArray8 };
        com.operations.Matrix.Matrix matrix10 = new com.operations.Matrix.Matrix(doubleArray9);
        int int11 = matrix10.getCols();
        boolean boolean12 = com.operations.Matrix.MatrixUtils.isSquare(matrix10);
        com.operations.Matrix.Matrix matrix13 = com.operations.Matrix.MatrixOperations.transpose(matrix10);
        int int14 = matrix13.getRows();
        com.operations.Matrix.Matrix matrix17 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0L, (double) (byte) 10);
        double[] doubleArray20 = new double[] { 10, 'a' };
        double[] doubleArray23 = new double[] { 10, 'a' };
        double[][] doubleArray24 = new double[][] { doubleArray20, doubleArray23 };
        com.operations.Matrix.Matrix matrix25 = new com.operations.Matrix.Matrix(doubleArray24);
        int int26 = matrix25.getCols();
        int int27 = matrix25.getCols();
        int int28 = matrix25.getCols();
        com.operations.Matrix.Matrix[] matrixArray29 = com.operations.Matrix.MatrixDecompositions.luDecomposition(matrix25);
        com.operations.Matrix.Matrix matrix30 = com.operations.Matrix.MatrixOperations.multiply(matrix17, matrix25);
        com.operations.Matrix.Matrix matrix32 = com.operations.Matrix.MatrixTransformations.rotate2D((double) (short) 100);
        boolean boolean34 = com.operations.Matrix.MatrixUtils.compare(matrix25, matrix32, (double) (byte) 0);
        com.operations.Matrix.Matrix matrix35 = com.operations.Matrix.MatrixOperations.multiply(matrix13, matrix25);
        com.operations.Matrix.Matrix matrix36 = com.operations.Matrix.MatrixOperations.add(matrix2, matrix25);
        com.operations.Matrix.Matrix matrix37 = com.operations.Matrix.MatrixOperations.transpose(matrix2);
        int int38 = matrix2.getCols();
        com.operations.Matrix.Matrix[] matrixArray39 = com.operations.Matrix.MatrixDecompositions.luDecomposition(matrix2);
        org.junit.Assert.assertNotNull(matrix2);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertArrayEquals(doubleArray5, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertArrayEquals(doubleArray8, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 2 + "'", int11 == 2);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(matrix13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 2 + "'", int14 == 2);
        org.junit.Assert.assertNotNull(matrix17);
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertArrayEquals(doubleArray20, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertArrayEquals(doubleArray23, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 2 + "'", int26 == 2);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 2 + "'", int27 == 2);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 2 + "'", int28 == 2);
        org.junit.Assert.assertNotNull(matrixArray29);
        org.junit.Assert.assertNotNull(matrix30);
        org.junit.Assert.assertNotNull(matrix32);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(matrix35);
        org.junit.Assert.assertNotNull(matrix36);
        org.junit.Assert.assertNotNull(matrix37);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 2 + "'", int38 == 2);
        org.junit.Assert.assertNotNull(matrixArray39);
    }

    @Test
    public void test3996() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3996");
        com.operations.Matrix.Matrix matrix2 = com.operations.Matrix.MatrixTransformations.scale2D(32.0d, (double) 10L);
        org.junit.Assert.assertNotNull(matrix2);
    }

    @Test
    public void test3997() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3997");
        com.operations.Matrix.Matrix matrix2 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0L, (double) (byte) 10);
        double[] doubleArray5 = new double[] { 10, 'a' };
        double[] doubleArray8 = new double[] { 10, 'a' };
        double[][] doubleArray9 = new double[][] { doubleArray5, doubleArray8 };
        com.operations.Matrix.Matrix matrix10 = new com.operations.Matrix.Matrix(doubleArray9);
        int int11 = matrix10.getCols();
        int int12 = matrix10.getCols();
        int int13 = matrix10.getCols();
        com.operations.Matrix.Matrix[] matrixArray14 = com.operations.Matrix.MatrixDecompositions.luDecomposition(matrix10);
        com.operations.Matrix.Matrix matrix15 = com.operations.Matrix.MatrixOperations.multiply(matrix2, matrix10);
        com.operations.Matrix.Matrix matrix17 = com.operations.Matrix.MatrixTransformations.rotate2D((double) (short) 100);
        boolean boolean19 = com.operations.Matrix.MatrixUtils.compare(matrix10, matrix17, (double) (byte) 0);
        com.operations.Matrix.Matrix matrix21 = com.operations.Matrix.MatrixTransformations.rotate2D((double) 1.0f);
        com.operations.Matrix.Matrix matrix24 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0L, (double) (byte) 10);
        int int25 = matrix24.getRows();
        com.operations.Matrix.Matrix matrix27 = com.operations.Matrix.MatrixOperations.scalarMultiply(matrix24, (double) 2);
        double double28 = com.operations.Matrix.MatrixUtils.frobeniusNorm(matrix24);
        com.operations.Matrix.Matrix matrix31 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0L, (double) (byte) 10);
        int int32 = matrix31.getRows();
        com.operations.Matrix.Matrix matrix34 = com.operations.Matrix.MatrixOperations.scalarMultiply(matrix31, (double) 2);
        com.operations.Matrix.Matrix matrix35 = com.operations.Matrix.MatrixOperations.subtract(matrix24, matrix34);
        com.operations.Matrix.Matrix matrix36 = com.operations.Matrix.MatrixOperations.add(matrix21, matrix34);
        double[] doubleArray39 = new double[] { 10, 'a' };
        double[] doubleArray42 = new double[] { 10, 'a' };
        double[][] doubleArray43 = new double[][] { doubleArray39, doubleArray42 };
        com.operations.Matrix.Matrix matrix44 = new com.operations.Matrix.Matrix(doubleArray43);
        int int45 = matrix44.getCols();
        int int46 = matrix44.getCols();
        int int47 = matrix44.getCols();
        com.operations.Matrix.Matrix matrix53 = com.operations.Matrix.MatrixUtils.generateRandomMatrix(100, (int) (byte) 1, (int) '#', (int) '#', 1L);
        double double56 = matrix53.getValue((int) '4', 0);
        double double57 = com.operations.Matrix.MatrixUtils.frobeniusNorm(matrix53);
        boolean boolean58 = com.operations.Matrix.MatrixUtils.isSquare(matrix53);
        boolean boolean60 = com.operations.Matrix.MatrixUtils.compare(matrix44, matrix53, (double) 100L);
        com.operations.Matrix.Matrix matrix62 = com.operations.Matrix.MatrixTransformations.rotate2D((double) (short) 100);
        double[] doubleArray65 = new double[] { 137.90576492663388d, (byte) -1 };
        double[] doubleArray66 = com.operations.Matrix.MatrixSolver.solveGaussian(matrix62, doubleArray65);
        com.operations.Matrix.Matrix matrix69 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0L, (double) (byte) 10);
        double[] doubleArray72 = new double[] { 10, 'a' };
        double[] doubleArray75 = new double[] { 10, 'a' };
        double[][] doubleArray76 = new double[][] { doubleArray72, doubleArray75 };
        com.operations.Matrix.Matrix matrix77 = new com.operations.Matrix.Matrix(doubleArray76);
        int int78 = matrix77.getCols();
        int int79 = matrix77.getCols();
        int int80 = matrix77.getCols();
        com.operations.Matrix.Matrix[] matrixArray81 = com.operations.Matrix.MatrixDecompositions.luDecomposition(matrix77);
        com.operations.Matrix.Matrix matrix82 = com.operations.Matrix.MatrixOperations.multiply(matrix69, matrix77);
        boolean boolean84 = com.operations.Matrix.MatrixUtils.compare(matrix62, matrix69, (double) (-1L));
        com.operations.Matrix.Matrix matrix85 = com.operations.Matrix.MatrixOperations.subtract(matrix44, matrix69);
        com.operations.Matrix.Matrix matrix86 = com.operations.Matrix.MatrixOperations.add(matrix34, matrix69);
        com.operations.Matrix.Matrix matrix87 = com.operations.Matrix.MatrixOperations.add(matrix17, matrix86);
        double double88 = com.operations.Matrix.MatrixUtils.frobeniusNorm(matrix86);
        int int89 = matrix86.getCols();
        // The following exception was thrown during execution in test generation
        try {
            double double92 = matrix86.getValue(52, (int) (byte) 0);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(matrix2);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertArrayEquals(doubleArray5, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertArrayEquals(doubleArray8, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 2 + "'", int11 == 2);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 2 + "'", int12 == 2);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 2 + "'", int13 == 2);
        org.junit.Assert.assertNotNull(matrixArray14);
        org.junit.Assert.assertNotNull(matrix15);
        org.junit.Assert.assertNotNull(matrix17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(matrix21);
        org.junit.Assert.assertNotNull(matrix24);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 2 + "'", int25 == 2);
        org.junit.Assert.assertNotNull(matrix27);
        org.junit.Assert.assertTrue("'" + double28 + "' != '" + 10.0d + "'", double28 == 10.0d);
        org.junit.Assert.assertNotNull(matrix31);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 2 + "'", int32 == 2);
        org.junit.Assert.assertNotNull(matrix34);
        org.junit.Assert.assertNotNull(matrix35);
        org.junit.Assert.assertNotNull(matrix36);
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertArrayEquals(doubleArray39, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertArrayEquals(doubleArray42, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 2 + "'", int45 == 2);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 2 + "'", int46 == 2);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 2 + "'", int47 == 2);
        org.junit.Assert.assertNotNull(matrix53);
        org.junit.Assert.assertTrue("'" + double56 + "' != '" + 35.0d + "'", double56 == 35.0d);
        org.junit.Assert.assertTrue("'" + double57 + "' != '" + 350.0d + "'", double57 == 350.0d);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertNotNull(matrix62);
        org.junit.Assert.assertNotNull(doubleArray65);
        org.junit.Assert.assertArrayEquals(doubleArray65, new double[] { 137.90576492663388d, (-1.0d) }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray66);
        org.junit.Assert.assertArrayEquals(doubleArray66, new double[] { (-24.931892522286255d), (-135.63701830716116d) }, 1.0E-15);
        org.junit.Assert.assertNotNull(matrix69);
        org.junit.Assert.assertNotNull(doubleArray72);
        org.junit.Assert.assertArrayEquals(doubleArray72, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray75);
        org.junit.Assert.assertArrayEquals(doubleArray75, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray76);
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + 2 + "'", int78 == 2);
        org.junit.Assert.assertTrue("'" + int79 + "' != '" + 2 + "'", int79 == 2);
        org.junit.Assert.assertTrue("'" + int80 + "' != '" + 2 + "'", int80 == 2);
        org.junit.Assert.assertNotNull(matrixArray81);
        org.junit.Assert.assertNotNull(matrix82);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
        org.junit.Assert.assertNotNull(matrix85);
        org.junit.Assert.assertNotNull(matrix86);
        org.junit.Assert.assertNotNull(matrix87);
        org.junit.Assert.assertTrue("'" + double88 + "' != '" + 30.0d + "'", double88 == 30.0d);
        org.junit.Assert.assertTrue("'" + int89 + "' != '" + 2 + "'", int89 == 2);
    }

    @Test
    public void test3998() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3998");
        com.operations.Matrix.Matrix matrix2 = new com.operations.Matrix.Matrix((int) (byte) 100, (int) 'a');
        // The following exception was thrown during execution in test generation
        try {
            com.operations.Matrix.Matrix[] matrixArray3 = com.operations.Matrix.MatrixDecompositions.luDecomposition(matrix2);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Matrix must be square for LU decomposition.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test3999() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3999");
        com.operations.Matrix.Matrix matrix1 = com.operations.Matrix.MatrixTransformations.rotate2D((-0.1736481776669303d));
        double[] doubleArray4 = new double[] { 10, 'a' };
        double[] doubleArray7 = new double[] { 10, 'a' };
        double[][] doubleArray8 = new double[][] { doubleArray4, doubleArray7 };
        com.operations.Matrix.Matrix matrix9 = new com.operations.Matrix.Matrix(doubleArray8);
        com.operations.Matrix.Matrix matrix10 = new com.operations.Matrix.Matrix(doubleArray8);
        boolean boolean11 = com.operations.Matrix.MatrixUtils.isSquare(matrix10);
        double[] doubleArray14 = new double[] { 10, 'a' };
        double[] doubleArray17 = new double[] { 10, 'a' };
        double[][] doubleArray18 = new double[][] { doubleArray14, doubleArray17 };
        com.operations.Matrix.Matrix matrix19 = new com.operations.Matrix.Matrix(doubleArray18);
        int int20 = matrix19.getCols();
        int int21 = matrix19.getCols();
        matrix19.print();
        double[] doubleArray25 = new double[] { 10, 'a' };
        double[] doubleArray28 = new double[] { 10, 'a' };
        double[][] doubleArray29 = new double[][] { doubleArray25, doubleArray28 };
        com.operations.Matrix.Matrix matrix30 = new com.operations.Matrix.Matrix(doubleArray29);
        boolean boolean32 = com.operations.Matrix.MatrixUtils.compare(matrix19, matrix30, (double) (-1));
        com.operations.Matrix.Matrix matrix33 = com.operations.Matrix.MatrixOperations.subtract(matrix10, matrix30);
        double[] doubleArray36 = new double[] { 10, 'a' };
        double[] doubleArray39 = new double[] { 10, 'a' };
        double[][] doubleArray40 = new double[][] { doubleArray36, doubleArray39 };
        com.operations.Matrix.Matrix matrix41 = new com.operations.Matrix.Matrix(doubleArray40);
        com.operations.Matrix.Matrix matrix42 = new com.operations.Matrix.Matrix(doubleArray40);
        boolean boolean43 = com.operations.Matrix.MatrixUtils.isSquare(matrix42);
        double[] doubleArray46 = new double[] { 10, 'a' };
        double[] doubleArray49 = new double[] { 10, 'a' };
        double[][] doubleArray50 = new double[][] { doubleArray46, doubleArray49 };
        com.operations.Matrix.Matrix matrix51 = new com.operations.Matrix.Matrix(doubleArray50);
        int int52 = matrix51.getCols();
        int int53 = matrix51.getCols();
        matrix51.print();
        double[] doubleArray57 = new double[] { 10, 'a' };
        double[] doubleArray60 = new double[] { 10, 'a' };
        double[][] doubleArray61 = new double[][] { doubleArray57, doubleArray60 };
        com.operations.Matrix.Matrix matrix62 = new com.operations.Matrix.Matrix(doubleArray61);
        boolean boolean64 = com.operations.Matrix.MatrixUtils.compare(matrix51, matrix62, (double) (-1));
        com.operations.Matrix.Matrix matrix65 = com.operations.Matrix.MatrixOperations.subtract(matrix42, matrix62);
        com.operations.Matrix.Matrix matrix66 = com.operations.Matrix.MatrixOperations.add(matrix10, matrix65);
        com.operations.Matrix.Matrix matrix67 = com.operations.Matrix.MatrixOperations.multiply(matrix1, matrix66);
        matrix66.print();
        int int69 = matrix66.getCols();
        com.operations.Matrix.Matrix matrix72 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0L, (double) (byte) 10);
        int int73 = matrix72.getRows();
        com.operations.Matrix.Matrix matrix75 = com.operations.Matrix.MatrixOperations.scalarMultiply(matrix72, (double) 2);
        matrix72.print();
        boolean boolean78 = com.operations.Matrix.MatrixUtils.compare(matrix66, matrix72, 30.0d);
        boolean boolean79 = com.operations.Matrix.MatrixUtils.isSymmetric(matrix66);
        org.junit.Assert.assertNotNull(matrix1);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertArrayEquals(doubleArray4, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertArrayEquals(doubleArray7, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertArrayEquals(doubleArray14, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertArrayEquals(doubleArray17, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 2 + "'", int20 == 2);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 2 + "'", int21 == 2);
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertArrayEquals(doubleArray25, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertArrayEquals(doubleArray28, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(matrix33);
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertArrayEquals(doubleArray36, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertArrayEquals(doubleArray39, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertNotNull(doubleArray46);
        org.junit.Assert.assertArrayEquals(doubleArray46, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertArrayEquals(doubleArray49, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 2 + "'", int52 == 2);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 2 + "'", int53 == 2);
        org.junit.Assert.assertNotNull(doubleArray57);
        org.junit.Assert.assertArrayEquals(doubleArray57, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray60);
        org.junit.Assert.assertArrayEquals(doubleArray60, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray61);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertNotNull(matrix65);
        org.junit.Assert.assertNotNull(matrix66);
        org.junit.Assert.assertNotNull(matrix67);
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 2 + "'", int69 == 2);
        org.junit.Assert.assertNotNull(matrix72);
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + 2 + "'", int73 == 2);
        org.junit.Assert.assertNotNull(matrix75);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
    }

    @Test
    public void test4000() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test4000");
        com.operations.Matrix.Matrix matrix2 = com.operations.Matrix.MatrixTransformations.scale2D((double) 0L, (double) (byte) 10);
        double[] doubleArray5 = new double[] { 10, 'a' };
        double[] doubleArray8 = new double[] { 10, 'a' };
        double[][] doubleArray9 = new double[][] { doubleArray5, doubleArray8 };
        com.operations.Matrix.Matrix matrix10 = new com.operations.Matrix.Matrix(doubleArray9);
        int int11 = matrix10.getCols();
        int int12 = matrix10.getCols();
        int int13 = matrix10.getCols();
        com.operations.Matrix.Matrix[] matrixArray14 = com.operations.Matrix.MatrixDecompositions.luDecomposition(matrix10);
        com.operations.Matrix.Matrix matrix15 = com.operations.Matrix.MatrixOperations.multiply(matrix2, matrix10);
        com.operations.Matrix.Matrix matrix17 = com.operations.Matrix.MatrixTransformations.rotate2D((double) (short) 100);
        boolean boolean19 = com.operations.Matrix.MatrixUtils.compare(matrix10, matrix17, (double) (byte) 0);
        com.operations.Matrix.Matrix[] matrixArray20 = com.operations.Matrix.MatrixDecompositions.luDecomposition(matrix10);
        com.operations.Matrix.Matrix matrix21 = com.operations.Matrix.MatrixOperations.transpose(matrix10);
        com.operations.Matrix.Matrix matrix24 = com.operations.Matrix.MatrixTransformations.scale2D(0.0d, (double) 0L);
        com.operations.Matrix.Matrix matrix25 = com.operations.Matrix.MatrixOperations.add(matrix10, matrix24);
        com.operations.Matrix.Matrix matrix26 = com.operations.Matrix.MatrixOperations.transpose(matrix24);
        // The following exception was thrown during execution in test generation
        try {
            matrix26.setValue((int) 'a', (int) (short) 1, 1.0d);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: Index 97 out of bounds for length 2");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(matrix2);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertArrayEquals(doubleArray5, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertArrayEquals(doubleArray8, new double[] { 10.0d, 97.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 2 + "'", int11 == 2);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 2 + "'", int12 == 2);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 2 + "'", int13 == 2);
        org.junit.Assert.assertNotNull(matrixArray14);
        org.junit.Assert.assertNotNull(matrix15);
        org.junit.Assert.assertNotNull(matrix17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(matrixArray20);
        org.junit.Assert.assertNotNull(matrix21);
        org.junit.Assert.assertNotNull(matrix24);
        org.junit.Assert.assertNotNull(matrix25);
        org.junit.Assert.assertNotNull(matrix26);
    }
}

